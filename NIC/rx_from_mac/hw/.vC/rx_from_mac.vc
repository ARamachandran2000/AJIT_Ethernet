// Virtual circuit produced from Aa description by Aa2VC 
// $pipe  mac_data : $uint<37>  $depth 1024 
// can point into 
// in scope  top-level
$pipe [mac_data] 37 $depth 1024 
// $pipe  mac_to_nic_data : $uint<37>  $depth 1024 
// can point into 
// in scope  top-level
$pipe [mac_to_nic_data] 37 $depth 1024 
// $pipe  nic_rx_to_header : $uint<37>  $depth 1024 
// can point into 
// in scope  top-level
$pipe [nic_rx_to_header] 37 $depth 1024 
// $pipe  nic_rx_to_packet : $uint<37>  $depth 1024 
// can point into 
// in scope  top-level
$pipe [nic_rx_to_packet] 37 $depth 1024 
// $pipe  tb_in_pipe : $uint<64>  $depth 1024 
// can point into 
// in scope  top-level
$pipe [tb_in_pipe] 64 $depth 1024 
// $pipe  tb_out_packet_pipe : $uint<64>  $depth 1024 
// can point into 
// in scope  top-level
$pipe [tb_out_packet_pipe] 64 $depth 1024 
// $pipe  tb_out_pipe : $uint<64>  $depth 1024 
// can point into 
// in scope  top-level
$pipe [tb_out_pipe] 64 $depth 1024 
$constant $W[B] : $int<3> := _b101// 5
$constant $W[H] : $int<3> := _b100// 4
$constant $W[S0] : $int<3> := _b000// 0
$constant $W[S1] : $int<3> := _b001// 1
$constant $W[S2] : $int<3> := _b010// 2
$constant $W[S3] : $int<3> := _b011// 3
// load store constants for object buffer_1
$constant $W[buffer_1_base_address] : $int<10> := _b0000000000
// load store constants for object buffer_2
$constant $W[buffer_2_base_address] : $int<10> := _b0000000000
// load store constants for object packet_buffer
$constant $W[packet_buffer_base_address] : $int<16> := _b0000000000000000
$memoryspace [memory_space_0] 
{
  $capacity 1024
  $datawidth 37
  $addrwidth 10
  $maxaccesswidth 37
  // $storage  buffer_1 : $array[1024] $of $uint<37> // memory space index = 0  base address = 0  word size = 37
  // can point into 
  // in scope  top-level
  $object [buffer_1] : $array[1024] $of $int<37>
}
$memoryspace [memory_space_1] 
{
  $capacity 1024
  $datawidth 37
  $addrwidth 10
  $maxaccesswidth 37
  // $storage  buffer_2 : $array[1024] $of $uint<37> // memory space index = 1  base address = 0  word size = 37
  // can point into 
  // in scope  top-level
  $object [buffer_2] : $array[1024] $of $int<37>
}
$module [global_storage_initializer_] 
{
  // pipe-declarations for block %global_storage_initializer_
  //  file .Aa/rx_from_mac.opt.aa, line 27
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %global_storage_initializer_
    //  file .Aa/rx_from_mac.opt.aa, line 27
  }
  // end data-path
}
$volatile $module [isWriteToHeader] 
{
  $in LSTATE:$int<3>
  // can point into 
  HLEN:$int<4>
  // can point into 
  PLEN:$int<16>
  // can point into 
  $out write_to_header:$int<1>
  // can point into 
  // pipe-declarations for block %isWriteToHeader
  //  file .Aa/rx_from_mac.opt.aa, line 34
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    // Volatile! CP is left blank 
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %isWriteToHeader
    //  file .Aa/rx_from_mac.opt.aa, line 34
    // B
    $constant $W[R_B_45_wire_constant] : $int<3> := _b101// 5
    // ( $mux header_not_available ($bitcast ($uint<1>) _b0  )  ($bitcast ($uint<1>) _b1  ) ) 
    // ($bitcast ($uint<1>) _b0  )
    $constant $W[type_cast_51_wire_constant] : $int<1> := _b0// 0
    // ($bitcast ($uint<1>) _b1  )
    $constant $W[type_cast_53_wire_constant] : $int<1> := _b1// 1
    // 	$volatile header_not_available := (LSTATE == B) $buffering 1
    //  file .Aa/rx_from_mac.opt.aa, line 39
    // header_not_available
    $W[header_not_available_47] : $int<1>
    // 	write_to_header := ( $mux header_not_available ($bitcast ($uint<1>) _b0  )  ($bitcast ($uint<1>) _b1  ) )  $buffering 1
    //  file .Aa/rx_from_mac.opt.aa, line 40
    // write_to_header
    // 	$volatile header_not_available := (LSTATE == B) $buffering 1
    //  file .Aa/rx_from_mac.opt.aa, line 39
    // (LSTATE == B)
    ==[EQ_u3_u1_46_inst] (LSTATE R_B_45_wire_constant) (header_not_available_47)   $flowthrough 
    $delay EQ_u3_u1_46_inst 0
    // 	write_to_header := ( $mux header_not_available ($bitcast ($uint<1>) _b0  )  ($bitcast ($uint<1>) _b1  ) )  $buffering 1
    //  file .Aa/rx_from_mac.opt.aa, line 40
    // ( $mux header_not_available ($bitcast ($uint<1>) _b0  )  ($bitcast ($uint<1>) _b1  ) ) 
    ? [MUX_54_inst] (header_not_available_47 type_cast_51_wire_constant type_cast_53_wire_constant) (write_to_header) 
    $buffering  $out MUX_54_inst write_to_header 1
  }
  // end data-path
  // Volatile module.. no links.
}
$module [load_buffer1] 
{
  $out next_buf_ptr_out:$int<10>
  // can point into 
  pckt_status:$int<1>
  // can point into 
  // pipe-declarations for block %load_buffer1
  //  file .Aa/rx_from_mac.opt.aa, line 42
  // pipe-declarations for block %load_buffer1%pckt_good_check_fast
  //  file .Aa/rx_from_mac.opt.aa, line 47
  // memory-space 0 is written into.
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    <>[branch_block_stmt_61] // Branch Block  file .Aa/rx_from_mac.opt.aa, line 47
    {
      $P [branch_block_stmt_61__entry__]
      branch_block_stmt_61__entry__ <-| ($entry)
      $P [branch_block_stmt_61__exit__]
      branch_block_stmt_61__exit__ |-> ($exit)
      $P [do_while_stmt_62__entry__] 
      $P [do_while_stmt_62__exit__] 
      $P [assign_stmt_124_to_assign_stmt_136__entry__] 
      $P [assign_stmt_124_to_assign_stmt_136__exit__] 
      // do-while-statement  
      //  file .Aa/rx_from_mac.opt.aa, line 49
      <o> [do_while_stmt_62]  $depth 7 $buffering 1 
      {
        $P[do_while_stmt_62__entry__] 
        $P[do_while_stmt_62__exit__] 
        $P[loop_back] 
        $P[condition_done] 
        $P[loop_body_done] 
        $pipeline [do_while_stmt_62_loop_body] 
        {
          // Pipelined!
          $T[back_edge_to_loop_body] 
          $T[first_time_through_loop_body] 
          $T[loop_body_start] 
          $T[condition_evaluated] 
          $transitionmerge [entry_tmerge] (back_edge_to_loop_body first_time_through_loop_body) (loop_body_start)
          $entry <-& (loop_body_start)
          $T[aggregated_phi_sample_req] 
          $T[aggregated_phi_sample_ack] 
          $T[aggregated_phi_update_req] 
          $T[aggregated_phi_update_ack] 
          // do not loop-back unless all phi's have used up their triggering tokens.
          condition_evaluated <-& (aggregated_phi_update_ack)
          aggregated_phi_sample_req o<-& (aggregated_phi_update_ack 0)
          // start:  PHI statement phi_stmt_64
          // 			$phi intm_data := 			  mac_data $on   $entry 			  mac_data $on   $loopback 
          // type of target is $uint<37>
          $T[phi_stmt_64_sample_start_] 
          $T[phi_stmt_64_sample_completed_] 
          $T[phi_stmt_64_update_start_] 
          $T[phi_stmt_64_update_completed_] 
          $T[phi_stmt_64_sample_start__ps] 
          phi_stmt_64_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_64_sample_completed__ps] 
          phi_stmt_64_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_64_update_start__ps] 
          phi_stmt_64_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_64_update_completed__ps] 
          phi_stmt_64_update_completed_ <-& (phi_stmt_64_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_64_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_64_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_64_update_start_)
          $T[phi_stmt_64_loopback_trigger] 
          phi_stmt_64_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_64_loopback_sample_req] 
          $T[phi_stmt_64_loopback_sample_req_ps] 
          phi_stmt_64_loopback_sample_req <-& (phi_stmt_64_loopback_sample_req_ps)
          phi_stmt_64_loopback_sample_req &-> ($null)
          $T[phi_stmt_64_entry_trigger] 
          phi_stmt_64_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_64_entry_sample_req] 
          $T[phi_stmt_64_entry_sample_req_ps] 
          phi_stmt_64_entry_sample_req <-& (phi_stmt_64_entry_sample_req_ps)
          phi_stmt_64_entry_sample_req &-> ($null)
          phi_stmt_64_update_start_ o<-& (phi_stmt_64_update_completed_ 0)
          phi_stmt_64_sample_start_ o<-& (phi_stmt_64_sample_completed_ 1)
          $T[phi_stmt_64_merged_reqs] 
          $T[phi_stmt_64_phi_mux_ack] 
          $T[phi_stmt_64_phi_mux_ack_ps] 
          phi_stmt_64_phi_mux_ack_ps <-& (phi_stmt_64_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_64_update_completed_)
          $T[RPIPE_mac_data_66_sample_start__ps] 
          $T[RPIPE_mac_data_66_sample_completed__ps] 
          $T[RPIPE_mac_data_66_update_start__ps] 
          $T[RPIPE_mac_data_66_update_completed__ps] 
          // source expression in Phi alternative 0
          // mac_data
          $T[RPIPE_mac_data_66_sample_start_] 
          $T[RPIPE_mac_data_66_sample_completed_] 
          $T[RPIPE_mac_data_66_update_start_] 
          $T[RPIPE_mac_data_66_update_completed_] 
          ;;[RPIPE_mac_data_66_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_mac_data_66_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_mac_data_66_sample_start_ &-> (RPIPE_mac_data_66_Sample)
          RPIPE_mac_data_66_sample_completed_ <-& (RPIPE_mac_data_66_Sample)
          RPIPE_mac_data_66_update_start_ <-& (RPIPE_mac_data_66_sample_completed_)
          RPIPE_mac_data_66_update_start_ &-> (RPIPE_mac_data_66_Update)
          RPIPE_mac_data_66_update_completed_ <-& (RPIPE_mac_data_66_Update)
          RPIPE_mac_data_66_sample_start_ o<-& (RPIPE_mac_data_66_update_completed_ 0)
          // Phi start dependency
          RPIPE_mac_data_66_sample_start_ <-& (RPIPE_mac_data_66_sample_start__ps)
          RPIPE_mac_data_66_update_start_ <-& (RPIPE_mac_data_66_update_start__ps)
          // RAW reenables for mac_data
          // producer  and  consumer are both determined by PHI statements.
          // Phi complete dependency.
          RPIPE_mac_data_66_sample_completed__ps <-& (RPIPE_mac_data_66_sample_completed_)
          RPIPE_mac_data_66_update_completed__ps <-& (RPIPE_mac_data_66_update_completed_)
          $T[RPIPE_mac_data_67_sample_start__ps] 
          $T[RPIPE_mac_data_67_sample_completed__ps] 
          $T[RPIPE_mac_data_67_update_start__ps] 
          $T[RPIPE_mac_data_67_update_completed__ps] 
          // source expression in Phi alternative 1
          // mac_data
          $T[RPIPE_mac_data_67_sample_start_] 
          $T[RPIPE_mac_data_67_sample_completed_] 
          $T[RPIPE_mac_data_67_update_start_] 
          $T[RPIPE_mac_data_67_update_completed_] 
          ;;[RPIPE_mac_data_67_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_mac_data_67_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_mac_data_67_sample_start_ &-> (RPIPE_mac_data_67_Sample)
          RPIPE_mac_data_67_sample_completed_ <-& (RPIPE_mac_data_67_Sample)
          RPIPE_mac_data_67_update_start_ <-& (RPIPE_mac_data_67_sample_completed_)
          RPIPE_mac_data_67_update_start_ &-> (RPIPE_mac_data_67_Update)
          RPIPE_mac_data_67_update_completed_ <-& (RPIPE_mac_data_67_Update)
          RPIPE_mac_data_67_sample_start_ o<-& (RPIPE_mac_data_67_update_completed_ 0)
          // Phi start dependency
          RPIPE_mac_data_67_sample_start_ <-& (RPIPE_mac_data_67_sample_start__ps)
          RPIPE_mac_data_67_update_start_ <-& (RPIPE_mac_data_67_update_start__ps)
          // RAW reenables for mac_data
          // producer  and  consumer are both determined by PHI statements.
          // Phi complete dependency.
          RPIPE_mac_data_67_sample_completed__ps <-& (RPIPE_mac_data_67_sample_completed_)
          RPIPE_mac_data_67_update_completed__ps <-& (RPIPE_mac_data_67_update_completed_)
          $phisequencer [ phi_stmt_64_phi_seq] : 
          phi_stmt_64_entry_trigger RPIPE_mac_data_66_sample_start__ps RPIPE_mac_data_66_sample_completed__ps RPIPE_mac_data_66_update_start__ps RPIPE_mac_data_66_update_completed__ps phi_stmt_64_loopback_trigger RPIPE_mac_data_67_sample_start__ps RPIPE_mac_data_67_sample_completed__ps RPIPE_mac_data_67_update_start__ps RPIPE_mac_data_67_update_completed__ps :
          phi_stmt_64_sample_start__ps phi_stmt_64_sample_completed__ps phi_stmt_64_update_start__ps phi_stmt_64_update_completed__ps :
          phi_stmt_64_entry_sample_req_ps phi_stmt_64_loopback_sample_req_ps : 
          phi_stmt_64_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_64
          // start:  PHI statement phi_stmt_68
          // 			$phi buf_ptr := 			  ($bitcast ($uint<10>) _b0  ) $on   $entry 			  next_buf_ptr $on   $loopback 
          // type of target is $uint<10>
          $T[phi_stmt_68_sample_start_] 
          $T[phi_stmt_68_sample_completed_] 
          $T[phi_stmt_68_update_start_] 
          $T[phi_stmt_68_update_completed_] 
          $T[phi_stmt_68_sample_start__ps] 
          phi_stmt_68_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_68_sample_completed__ps] 
          phi_stmt_68_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_68_update_start__ps] 
          phi_stmt_68_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_68_update_completed__ps] 
          phi_stmt_68_update_completed_ <-& (phi_stmt_68_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_68_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_68_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_68_update_start_)
          $T[phi_stmt_68_loopback_trigger] 
          phi_stmt_68_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_68_loopback_sample_req] 
          $T[phi_stmt_68_loopback_sample_req_ps] 
          phi_stmt_68_loopback_sample_req <-& (phi_stmt_68_loopback_sample_req_ps)
          phi_stmt_68_loopback_sample_req &-> ($null)
          $T[phi_stmt_68_entry_trigger] 
          phi_stmt_68_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_68_entry_sample_req] 
          $T[phi_stmt_68_entry_sample_req_ps] 
          phi_stmt_68_entry_sample_req <-& (phi_stmt_68_entry_sample_req_ps)
          phi_stmt_68_entry_sample_req &-> ($null)
          phi_stmt_68_update_start_ o<-& (phi_stmt_68_update_completed_ 0)
          phi_stmt_68_sample_start_ o<-& (phi_stmt_68_sample_completed_ 1)
          $T[phi_stmt_68_merged_reqs] 
          $T[phi_stmt_68_phi_mux_ack] 
          $T[phi_stmt_68_phi_mux_ack_ps] 
          phi_stmt_68_phi_mux_ack_ps <-& (phi_stmt_68_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_68_update_completed_)
          $T[type_cast_71_sample_start__ps] 
          $T[type_cast_71_sample_completed__ps] 
          $T[type_cast_71_update_start__ps] 
          $T[type_cast_71_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[type_cast_71_sample_start_] 
          $T[type_cast_71_sample_completed_] 
          type_cast_71_sample_completed_ <-& (type_cast_71_sample_start_)
          $T[type_cast_71_update_start_] 
          $T [type_cast_71_update_completed_] $delay 
          type_cast_71_update_completed_ <-& (type_cast_71_update_start_)
          // Phi start dependency for implicit/constant alternative.
          type_cast_71_sample_start_ <-& (type_cast_71_sample_start__ps)
          type_cast_71_update_start_ <-& (type_cast_71_update_start__ps)
          // Phi complete dependency.
          type_cast_71_sample_completed__ps <-& (type_cast_71_sample_completed_)
          type_cast_71_update_completed__ps <-& (type_cast_71_update_completed_)
          $T[R_next_buf_ptr_72_sample_start__ps] 
          $T[R_next_buf_ptr_72_sample_completed__ps] 
          $T[R_next_buf_ptr_72_update_start__ps] 
          $T[R_next_buf_ptr_72_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_next_buf_ptr_72_sample_start_] 
          $T[R_next_buf_ptr_72_sample_completed_] 
          $T[R_next_buf_ptr_72_update_start_] 
          $T[R_next_buf_ptr_72_update_completed_] 
          ;;[R_next_buf_ptr_72_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_next_buf_ptr_72_sample_start_ &-> (R_next_buf_ptr_72_Sample)
          R_next_buf_ptr_72_sample_completed_ <-& (R_next_buf_ptr_72_Sample)
          ;;[R_next_buf_ptr_72_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_next_buf_ptr_72_update_start_ &-> (R_next_buf_ptr_72_Update)
          R_next_buf_ptr_72_update_completed_ <-& (R_next_buf_ptr_72_Update)
          // RAW reenables for next_buf_ptr
          // Phi start dependency for implicit/constant alternative.
          R_next_buf_ptr_72_sample_start_ <-& (R_next_buf_ptr_72_sample_start__ps)
          R_next_buf_ptr_72_update_start_ <-& (R_next_buf_ptr_72_update_start__ps)
          // Phi complete dependency.
          R_next_buf_ptr_72_sample_completed__ps <-& (R_next_buf_ptr_72_sample_completed_)
          R_next_buf_ptr_72_update_completed__ps <-& (R_next_buf_ptr_72_update_completed_)
          $phisequencer [ phi_stmt_68_phi_seq] : 
          phi_stmt_68_entry_trigger type_cast_71_sample_start__ps type_cast_71_sample_completed__ps type_cast_71_update_start__ps type_cast_71_update_completed__ps phi_stmt_68_loopback_trigger R_next_buf_ptr_72_sample_start__ps R_next_buf_ptr_72_sample_completed__ps R_next_buf_ptr_72_update_start__ps R_next_buf_ptr_72_update_completed__ps :
          phi_stmt_68_sample_start__ps phi_stmt_68_sample_completed__ps phi_stmt_68_update_start__ps phi_stmt_68_update_completed__ps :
          phi_stmt_68_entry_sample_req_ps phi_stmt_68_loopback_sample_req_ps : 
          phi_stmt_68_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_68
          // start: WAR dependencies for tlast
          // done: WAR dependencies for tlast
          // start:  			$volatile tlast := ( $slice intm_data 36 36 )  $buffering 1
          //  file .Aa/rx_from_mac.opt.aa, line 57
          // volatile! 
          // Source expression
          // ( $slice intm_data 36 36 ) 
          // intm_data
          // Target expression
          // (as target) tlast
          // start: WAR dependencies for tlast
          // done: WAR dependencies for tlast
          // end:  			$volatile tlast := ( $slice intm_data 36 36 )  $buffering 1
          // start: WAR dependencies for tdata
          // done: WAR dependencies for tdata
          // start:  			$volatile tdata := ( $slice intm_data 35 4 )  $buffering 1
          //  file .Aa/rx_from_mac.opt.aa, line 58
          // volatile! 
          // Source expression
          // ( $slice intm_data 35 4 ) 
          // intm_data
          // Target expression
          // (as target) tdata
          // start: WAR dependencies for tdata
          // done: WAR dependencies for tdata
          // end:  			$volatile tdata := ( $slice intm_data 35 4 )  $buffering 1
          // start: WAR dependencies for tkeep
          // done: WAR dependencies for tkeep
          // start:  			$volatile tkeep := ( $slice intm_data 3 0 )  $buffering 1
          //  file .Aa/rx_from_mac.opt.aa, line 59
          // volatile! 
          // Source expression
          // ( $slice intm_data 3 0 ) 
          // intm_data
          // Target expression
          // (as target) tkeep
          // start: WAR dependencies for tkeep
          // done: WAR dependencies for tkeep
          // end:  			$volatile tkeep := ( $slice intm_data 3 0 )  $buffering 1
          // start: WAR dependencies for bad_packet
          // done: WAR dependencies for bad_packet
          // start:  			$volatile bad_packet := (((tlast == 1 ) & (tdata == _hFFFFFFFF )) & (tkeep == 0 )) $buffering 1
          //  file .Aa/rx_from_mac.opt.aa, line 60
          // volatile! 
          // Source expression
          // (((tlast == 1 ) & (tdata == _hFFFFFFFF )) & (tkeep == 0 ))
          // ((tlast == 1 ) & (tdata == _hFFFFFFFF ))
          // (tlast == 1 )
          // tlast
          // (tdata == _hFFFFFFFF )
          // tdata
          // (tkeep == 0 )
          // tkeep
          // Target expression
          // (as target) bad_packet
          // start: WAR dependencies for bad_packet
          // done: WAR dependencies for bad_packet
          // end:  			$volatile bad_packet := (((tlast == 1 ) & (tdata == _hFFFFFFFF )) & (tkeep == 0 )) $buffering 1
          // start: WAR dependencies for good_packet
          // done: WAR dependencies for good_packet
          // start:  			$volatile good_packet := ((tlast == 1 ) & (tkeep != 0 )) $buffering 1
          //  file .Aa/rx_from_mac.opt.aa, line 61
          // volatile! 
          // Source expression
          // ((tlast == 1 ) & (tkeep != 0 ))
          // (tlast == 1 )
          // tlast
          // (tkeep != 0 )
          // tkeep
          // Target expression
          // (as target) good_packet
          // start: WAR dependencies for good_packet
          // done: WAR dependencies for good_packet
          // end:  			$volatile good_packet := ((tlast == 1 ) & (tkeep != 0 )) $buffering 1
          // start:  			buffer_1[buf_ptr] := intm_data $buffering 1// bits of buffering = 37. 
          //  file .Aa/rx_from_mac.opt.aa, line 62
          // Source expression
          // intm_data
          // Target expression
          // buffer_1[buf_ptr]
          $T[array_obj_ref_110_sample_start_] 
          $T[array_obj_ref_110_sample_completed_] 
          $T[array_obj_ref_110_update_start_] 
          $T[array_obj_ref_110_update_completed_] 
          $T[array_obj_ref_110_word_address_calculated] 
          $T[array_obj_ref_110_root_address_calculated] 
          $T[array_obj_ref_110_offset_calculated] 
          $T[array_obj_ref_110_index_resized_0] 
          $T[array_obj_ref_110_index_scaled_0] 
          $T[array_obj_ref_110_index_computed_0] 
          // buf_ptr
          // start: Forward dependencies from buf_ptr to transition array_obj_ref_110_index_computed_0
          array_obj_ref_110_index_computed_0 <-& (phi_stmt_68_update_completed_)
          // done: Forward dependencies from buf_ptr to transition array_obj_ref_110_index_computed_0
          ;;[array_obj_ref_110_index_resize_0] 
          {
            $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
          }
          array_obj_ref_110_index_computed_0 &-> (array_obj_ref_110_index_resize_0)
          array_obj_ref_110_index_resized_0 <-& (array_obj_ref_110_index_resize_0)
          ;;[array_obj_ref_110_index_scale_0] 
          {
            $T [scale_rename_req] $T [scale_rename_ack] // rename 
          }
          array_obj_ref_110_index_resized_0 &-> (array_obj_ref_110_index_scale_0)
          array_obj_ref_110_index_scaled_0 <-& (array_obj_ref_110_index_scale_0)
          ;;[array_obj_ref_110_final_index_sum_regn] 
          {
            $T [req] $T [ack] // rename
          }
          array_obj_ref_110_index_scaled_0 &-> (array_obj_ref_110_final_index_sum_regn)
          array_obj_ref_110_offset_calculated <-& (array_obj_ref_110_final_index_sum_regn)
          ;;[array_obj_ref_110_base_plus_offset] 
          {
            $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
          }
          array_obj_ref_110_offset_calculated &-> (array_obj_ref_110_base_plus_offset)
          array_obj_ref_110_root_address_calculated <-& (array_obj_ref_110_base_plus_offset)
          ;;[array_obj_ref_110_word_addrgen] 
          {
            $T [root_register_req] $T [root_register_ack]
          }
          array_obj_ref_110_root_address_calculated &-> (array_obj_ref_110_word_addrgen)
          array_obj_ref_110_word_address_calculated <-& (array_obj_ref_110_word_addrgen)
          ;;[array_obj_ref_110_Sample] 
          {
            ;;[array_obj_ref_110_Split] 
            {
              $T [split_req] $T [split_ack]
            }
            ||[word_access_start] 
            {
              ;;[word_0] 
              {
                $T [rr] $T [ra] 
              }
            }
          }
          ;;[array_obj_ref_110_Update] 
          {
            ||[word_access_complete] 
            {
              ;;[word_0] 
              {
                $T [cr] $T [ca] 
              }
            }
          }
          array_obj_ref_110_sample_start_ <-& (array_obj_ref_110_word_address_calculated)
          // reenable-joins
          phi_stmt_68_update_start_ o<-& (array_obj_ref_110_sample_completed_ 0)
          array_obj_ref_110_sample_start_ &-> (array_obj_ref_110_Sample)
          array_obj_ref_110_sample_completed_ <-& (array_obj_ref_110_Sample)
          array_obj_ref_110_sample_completed_ &-> ($null)
          array_obj_ref_110_update_start_ &-> (array_obj_ref_110_Update)
          array_obj_ref_110_update_completed_ <-& (array_obj_ref_110_Update)
          // self-release: 
          array_obj_ref_110_sample_start_ o<-& (array_obj_ref_110_sample_completed_ 1)
          $null &-> (array_obj_ref_110_update_start_)
          array_obj_ref_110_update_start_ o<-& (array_obj_ref_110_update_completed_ 0)
          // start: Forward dependencies from intm_data to transition array_obj_ref_110_sample_start_
          array_obj_ref_110_sample_start_ <-& (phi_stmt_64_update_completed_)
          // done: Forward dependencies from intm_data to transition array_obj_ref_110_sample_start_
          // RAW reenables for intm_data
          phi_stmt_64_update_start_ o<-& (array_obj_ref_110_sample_completed_ 0)
          // end:  			buffer_1[buf_ptr] := intm_data $buffering 1// bits of buffering = 37. 
          // start: WAR dependencies for next_buf_ptr
          // WAR dependency: Read: next_buf_ptr before Write: 			$volatile next_buf_ptr := (buf_ptr + 1 ) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_buf_ptr
          // start:  			$volatile next_buf_ptr := (buf_ptr + 1 ) $buffering 1
          //  file .Aa/rx_from_mac.opt.aa, line 63
          // volatile! 
          // Source expression
          // (buf_ptr + 1 )
          // buf_ptr
          // Target expression
          // (as target) next_buf_ptr
          // start: WAR dependencies for next_buf_ptr
          // WAR dependency: Read: next_buf_ptr before Write: 			$volatile next_buf_ptr := (buf_ptr + 1 ) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_buf_ptr
          // end:  			$volatile next_buf_ptr := (buf_ptr + 1 ) $buffering 1
          // (tlast == 0 )
          // tlast
          $T [loop_body_delay_to_condition_start] $delay
          loop_body_start &-> (loop_body_delay_to_condition_start)
          loop_body_delay_to_condition_start &-> (condition_evaluated)
          // start: Forward dependencies from (tlast == 0 ) to transition condition_evaluated
          condition_evaluated <-& (phi_stmt_64_update_completed_)
          // done: Forward dependencies from (tlast == 0 ) to transition condition_evaluated
          condition_evaluated &-> ($null)
          // load-store dependencies..
          // memory-space  memory_space_0
          //  array_obj_ref_110 store
          // reenable across ring for memory space memory_space_0
          // leading and trailing sets are the same... no ring dependency
          // pipe read/write dependencies for pipe mac_data
          // read-dependencies for pipe mac_data
          RPIPE_mac_data_67_sample_start_ <-& (RPIPE_mac_data_66_update_completed_)
          // ring dependency in pipeline.
          RPIPE_mac_data_66_update_start_ o<-& (RPIPE_mac_data_67_update_completed_ 0)
          // write-dependencies for pipe mac_data
          // signal write dependencies for mac_data
        }
        ( first_time_through_loop_body  back_edge_to_loop_body) 
        ( condition_evaluated )
        ;; [loop_exit] 
        {
          $T [ack] 
        }
        ;; [loop_taken] 
        {
          $T [ack] 
        }
        do_while_stmt_62__entry__ <-| ($entry)
        loop_body_done <-| ( do_while_stmt_62_loop_body ) 
        condition_done |-> (loop_exit loop_taken)
        do_while_stmt_62__exit__ |-> ($exit)
        $bind condition_done <= do_while_stmt_62_loop_body : condition_evaluated
        $bind do_while_stmt_62__entry__  => do_while_stmt_62_loop_body : first_time_through_loop_body 
        $bind loop_back  => do_while_stmt_62_loop_body : back_edge_to_loop_body 
        $terminate (loop_exit loop_taken loop_body_done) (loop_back do_while_stmt_62__exit__)
      }
      do_while_stmt_62__entry__ |-> (do_while_stmt_62)
      do_while_stmt_62__exit__ <-| (do_while_stmt_62)
      ::[assign_stmt_124_to_assign_stmt_136] 
      {
        // start: WAR dependencies for next_buf_ptr_out
        // ignored out-of-scope w_root 			$phi buf_ptr := 			  ($bitcast ($uint<10>) _b0  ) $on   $entry 			  next_buf_ptr $on   $loopback 
        // type of target is $uint<10>
        // done: WAR dependencies for next_buf_ptr_out
        // start:  		$volatile next_buf_ptr_out := next_buf_ptr $buffering 1
        //  file .Aa/rx_from_mac.opt.aa, line 65
        // volatile! 
        // Source expression
        // next_buf_ptr
        // Target expression
        // (as target) next_buf_ptr_out
        // next_buf_ptr_out
        // write to interface object
        // start: WAR dependencies for next_buf_ptr_out
        // ignored out-of-scope w_root 			$phi buf_ptr := 			  ($bitcast ($uint<10>) _b0  ) $on   $entry 			  next_buf_ptr $on   $loopback 
        // type of target is $uint<10>
        // done: WAR dependencies for next_buf_ptr_out
        // next_buf_ptr_out
        // write to interface object
        // end:  		$volatile next_buf_ptr_out := next_buf_ptr $buffering 1
        // start: WAR dependencies for pckt_status
        // ignored out-of-scope w_root 			$phi intm_data := 			  mac_data $on   $entry 			  mac_data $on   $loopback 
        // type of target is $uint<37>
        // done: WAR dependencies for pckt_status
        // start:  		$volatile pckt_status := ( $mux good_packet ($bitcast ($uint<1>) _b1  )  ( $mux bad_packet ($bitcast ($uint<1>) _b0  )  ($bitcast ($uint<1>) _b0  ) )  )  $buffering 1
        //  file .Aa/rx_from_mac.opt.aa, line 66
        // volatile! 
        // Source expression
        // ( $mux good_packet ($bitcast ($uint<1>) _b1  )  ( $mux bad_packet ($bitcast ($uint<1>) _b0  )  ($bitcast ($uint<1>) _b0  ) )  ) 
        // good_packet
        // ( $mux bad_packet ($bitcast ($uint<1>) _b0  )  ($bitcast ($uint<1>) _b0  ) ) 
        // bad_packet
        // Target expression
        // (as target) pckt_status
        // pckt_status
        // write to interface object
        // start: WAR dependencies for pckt_status
        // ignored out-of-scope w_root 			$phi intm_data := 			  mac_data $on   $entry 			  mac_data $on   $loopback 
        // type of target is $uint<37>
        // done: WAR dependencies for pckt_status
        // pckt_status
        // write to interface object
        // end:  		$volatile pckt_status := ( $mux good_packet ($bitcast ($uint<1>) _b1  )  ( $mux bad_packet ($bitcast ($uint<1>) _b0  )  ($bitcast ($uint<1>) _b0  ) )  )  $buffering 1
        // load-store dependencies..
      }
      assign_stmt_124_to_assign_stmt_136__entry__ |-> (assign_stmt_124_to_assign_stmt_136)
      assign_stmt_124_to_assign_stmt_136__exit__ <-| (assign_stmt_124_to_assign_stmt_136)
      do_while_stmt_62__entry__ <-| (branch_block_stmt_61__entry__)
      assign_stmt_124_to_assign_stmt_136__entry__ <-| (do_while_stmt_62__exit__)
      assign_stmt_124_to_assign_stmt_136__exit__ |-> (branch_block_stmt_61__exit__)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %load_buffer1%pckt_good_check_fast%
    //  file .Aa/rx_from_mac.opt.aa, line 51
    // constant-object-declarations for block %load_buffer1%pckt_good_check_fast
    //  file .Aa/rx_from_mac.opt.aa, line 47
    // constant-object-declarations for block %load_buffer1
    //  file .Aa/rx_from_mac.opt.aa, line 42
    // constant-declarations for block %load_buffer1%pckt_good_check_fast
    //  file .Aa/rx_from_mac.opt.aa, line 47
    // do-while statement  
    //  file .Aa/rx_from_mac.opt.aa, line 49
    // 0 
    $constant $W[konst_120_wire_constant] : $int<1> := _b0// 0
    // constant-declarations for block %load_buffer1%pckt_good_check_fast%
    //  file .Aa/rx_from_mac.opt.aa, line 51
    // constant-declarations for phi:  			$phi intm_data := 			  mac_data $on   $entry 			  mac_data $on   $loopback 
    // type of target is $uint<37>
    //  file .Aa/rx_from_mac.opt.aa, line 52
    // constant-declarations for phi:  			$phi buf_ptr := 			  ($bitcast ($uint<10>) _b0  ) $on   $entry 			  next_buf_ptr $on   $loopback 
    // type of target is $uint<10>
    //  file .Aa/rx_from_mac.opt.aa, line 54
    // ($bitcast ($uint<10>) _b0  )
    $constant $W[type_cast_71_wire_constant] : $int<10> := _b0000000000// 0
    // 1 
    $constant $W[konst_89_wire_constant] : $int<1> := _b1// 1
    // _hFFFFFFFF 
    $constant $W[konst_92_wire_constant] : $int<32> := _b11111111111111111111111111111111// -1
    // 0 
    $constant $W[konst_96_wire_constant] : $int<4> := _b0000// 0
    // 1 
    $constant $W[konst_102_wire_constant] : $int<1> := _b1// 1
    // 0 
    $constant $W[konst_105_wire_constant] : $int<4> := _b0000// 0
    // buffer_1[buf_ptr]
    $constant $W[array_obj_ref_110_resized_base_address] : $int<10> := _b0000000000// 0
    $constant $W[array_obj_ref_110_offset_scale_factor_0] : $int<10> := _b0000000001// 1
    $constant $W[array_obj_ref_110_word_offset_0] : $int<10> := _b0000000000// 0
    // 1 
    $constant $W[konst_115_wire_constant] : $int<10> := _b0000000001// 1
    // ( $mux good_packet ($bitcast ($uint<1>) _b1  )  ( $mux bad_packet ($bitcast ($uint<1>) _b0  )  ($bitcast ($uint<1>) _b0  ) )  ) 
    // ($bitcast ($uint<1>) _b1  )
    $constant $W[type_cast_128_wire_constant] : $int<1> := _b1// 1
    // ( $mux bad_packet ($bitcast ($uint<1>) _b0  )  ($bitcast ($uint<1>) _b0  ) ) 
    // ($bitcast ($uint<1>) _b0  )
    $constant $W[type_cast_131_wire_constant] : $int<1> := _b0// 0
    // ($bitcast ($uint<1>) _b0  )
    $constant $W[type_cast_133_wire_constant] : $int<1> := _b0// 0
    // block %load_buffer1%pckt_good_check_fast
    //  file .Aa/rx_from_mac.opt.aa, line 47
    // do-while statement  
    //  file .Aa/rx_from_mac.opt.aa, line 49
    // (tlast == 0 )
    $intermediate $W[EQ_u1_u1_121_wire] : $int<1>
    // merge-statement  
    //  file .Aa/rx_from_mac.opt.aa, line 51
    // 			$phi intm_data := 			  mac_data $on   $entry 			  mac_data $on   $loopback 
    // type of target is $uint<37>
    //  file .Aa/rx_from_mac.opt.aa, line 52
    // mac_data
    $W[RPIPE_mac_data_66_wire] : $int<37>
    // mac_data
    $W[RPIPE_mac_data_67_wire] : $int<37>
    // intm_data
    $W[intm_data_64] : $int<37>
    // 			$phi buf_ptr := 			  ($bitcast ($uint<10>) _b0  ) $on   $entry 			  next_buf_ptr $on   $loopback 
    // type of target is $uint<10>
    //  file .Aa/rx_from_mac.opt.aa, line 54
    $W[next_buf_ptr_117_72_buffered] : $int<10>
    // buf_ptr
    $W[buf_ptr_68] : $int<10>
    // 			$volatile tlast := ( $slice intm_data 36 36 )  $buffering 1
    //  file .Aa/rx_from_mac.opt.aa, line 57
    // tlast
    $W[tlast_77] : $int<1>
    // 			$volatile tdata := ( $slice intm_data 35 4 )  $buffering 1
    //  file .Aa/rx_from_mac.opt.aa, line 58
    // tdata
    $W[tdata_82] : $int<32>
    // 			$volatile tkeep := ( $slice intm_data 3 0 )  $buffering 1
    //  file .Aa/rx_from_mac.opt.aa, line 59
    // tkeep
    $W[tkeep_86] : $int<4>
    // 			$volatile bad_packet := (((tlast == 1 ) & (tdata == _hFFFFFFFF )) & (tkeep == 0 )) $buffering 1
    //  file .Aa/rx_from_mac.opt.aa, line 60
    // (tlast == 1 )
    $intermediate $W[EQ_u1_u1_90_wire] : $int<1>
    // (tdata == _hFFFFFFFF )
    $intermediate $W[EQ_u32_u1_93_wire] : $int<1>
    // ((tlast == 1 ) & (tdata == _hFFFFFFFF ))
    $intermediate $W[AND_u1_u1_94_wire] : $int<1>
    // (tkeep == 0 )
    $intermediate $W[EQ_u4_u1_97_wire] : $int<1>
    // bad_packet
    $W[bad_packet_99] : $int<1>
    // 			$volatile good_packet := ((tlast == 1 ) & (tkeep != 0 )) $buffering 1
    //  file .Aa/rx_from_mac.opt.aa, line 61
    // (tlast == 1 )
    $intermediate $W[EQ_u1_u1_103_wire] : $int<1>
    // (tkeep != 0 )
    $intermediate $W[NEQ_u4_u1_106_wire] : $int<1>
    // good_packet
    $W[good_packet_108] : $int<1>
    // 			buffer_1[buf_ptr] := intm_data $buffering 1// bits of buffering = 37. 
    //  file .Aa/rx_from_mac.opt.aa, line 62
    // buffer_1[buf_ptr]
    $intermediate $W[R_buf_ptr_109_resized] : $int<10>
    $intermediate $W[R_buf_ptr_109_scaled] : $int<10>
    $intermediate $W[array_obj_ref_110_final_offset] : $int<10>
    $intermediate $W[array_obj_ref_110_root_address] : $int<10>
    $W[array_obj_ref_110_word_address_0] : $pointer<memory_space_0>
    $W[array_obj_ref_110_data_0] : $int<37>
    // 			$volatile next_buf_ptr := (buf_ptr + 1 ) $buffering 1
    //  file .Aa/rx_from_mac.opt.aa, line 63
    // next_buf_ptr
    $W[next_buf_ptr_117] : $int<10>
    // 		$volatile next_buf_ptr_out := next_buf_ptr $buffering 1
    //  file .Aa/rx_from_mac.opt.aa, line 65
    // next_buf_ptr_out
    // 		$volatile pckt_status := ( $mux good_packet ($bitcast ($uint<1>) _b1  )  ( $mux bad_packet ($bitcast ($uint<1>) _b0  )  ($bitcast ($uint<1>) _b0  ) )  )  $buffering 1
    //  file .Aa/rx_from_mac.opt.aa, line 66
    // ( $mux bad_packet ($bitcast ($uint<1>) _b0  )  ($bitcast ($uint<1>) _b0  ) ) 
    $intermediate $W[MUX_134_wire] : $int<1>
    // pckt_status
    // datapath-instances for block %load_buffer1%pckt_good_check_fast
    //  file .Aa/rx_from_mac.opt.aa, line 47
    // datapath-instances for do-while  
    //  file .Aa/rx_from_mac.opt.aa, line 49
    // (tlast == 0 )
    ==[EQ_u1_u1_121_inst] (tlast_77 konst_120_wire_constant) (EQ_u1_u1_121_wire)   $flowthrough 
    $delay EQ_u1_u1_121_inst 0
    ==0? [do_while_stmt_62_branch] (EQ_u1_u1_121_wire)
    $flowthrough
    // data-path instances for merge  
    //  file .Aa/rx_from_mac.opt.aa, line 51
    // 			$phi intm_data := 			  mac_data $on   $entry 			  mac_data $on   $loopback 
    // type of target is $uint<37>
    //  file .Aa/rx_from_mac.opt.aa, line 52
    // mac_data
    $ioport $in [RPIPE_mac_data_66_inst] (mac_data) (RPIPE_mac_data_66_wire)  $fullrate 
    $buffering $out RPIPE_mac_data_66_inst RPIPE_mac_data_66_wire 1
    // mac_data
    $ioport $in [RPIPE_mac_data_67_inst] (mac_data) (RPIPE_mac_data_67_wire)  $fullrate 
    $buffering $out RPIPE_mac_data_67_inst RPIPE_mac_data_67_wire 1
    # $phi [phi_stmt_64] (RPIPE_mac_data_66_wire RPIPE_mac_data_67_wire) ( intm_data_64 ) $fullrate
    // $buffering  $out phi_stmt_64 intm_data_64 2
    // 			$phi buf_ptr := 			  ($bitcast ($uint<10>) _b0  ) $on   $entry 			  next_buf_ptr $on   $loopback 
    // type of target is $uint<10>
    //  file .Aa/rx_from_mac.opt.aa, line 54
    # := [next_buf_ptr_117_72_buf] (next_buf_ptr_117) (next_buf_ptr_117_72_buffered)     $fullrate
    $buffering $out next_buf_ptr_117_72_buf next_buf_ptr_117_72_buffered  1
    # $phi [phi_stmt_68] (type_cast_71_wire_constant next_buf_ptr_117_72_buffered) ( buf_ptr_68 ) $fullrate
    // $buffering  $out phi_stmt_68 buf_ptr_68 2
    // 			$volatile tlast := ( $slice intm_data 36 36 )  $buffering 1
    //  file .Aa/rx_from_mac.opt.aa, line 57
    // ( $slice intm_data 36 36 ) 
    [:] [slice_76_inst] (intm_data_64 36 36) (tlast_77)  $flowthrough
    $delay slice_76_inst 0
    // 			$volatile tdata := ( $slice intm_data 35 4 )  $buffering 1
    //  file .Aa/rx_from_mac.opt.aa, line 58
    // ( $slice intm_data 35 4 ) 
    [:] [slice_81_inst] (intm_data_64 35 4) (tdata_82)  $flowthrough
    $delay slice_81_inst 0
    // 			$volatile tkeep := ( $slice intm_data 3 0 )  $buffering 1
    //  file .Aa/rx_from_mac.opt.aa, line 59
    // ( $slice intm_data 3 0 ) 
    [:] [slice_85_inst] (intm_data_64 3 0) (tkeep_86)  $flowthrough
    $delay slice_85_inst 0
    // 			$volatile bad_packet := (((tlast == 1 ) & (tdata == _hFFFFFFFF )) & (tkeep == 0 )) $buffering 1
    //  file .Aa/rx_from_mac.opt.aa, line 60
    // (tlast == 1 )
    ==[EQ_u1_u1_90_inst] (tlast_77 konst_89_wire_constant) (EQ_u1_u1_90_wire)   $flowthrough 
    $delay EQ_u1_u1_90_inst 0
    // (tdata == _hFFFFFFFF )
    ==[EQ_u32_u1_93_inst] (tdata_82 konst_92_wire_constant) (EQ_u32_u1_93_wire)   $flowthrough 
    $delay EQ_u32_u1_93_inst 0
    // ((tlast == 1 ) & (tdata == _hFFFFFFFF ))
    &[AND_u1_u1_94_inst] (EQ_u1_u1_90_wire EQ_u32_u1_93_wire) (AND_u1_u1_94_wire)   $flowthrough 
    $delay AND_u1_u1_94_inst 0
    // (tkeep == 0 )
    ==[EQ_u4_u1_97_inst] (tkeep_86 konst_96_wire_constant) (EQ_u4_u1_97_wire)   $flowthrough 
    $delay EQ_u4_u1_97_inst 0
    // (((tlast == 1 ) & (tdata == _hFFFFFFFF )) & (tkeep == 0 ))
    &[AND_u1_u1_98_inst] (AND_u1_u1_94_wire EQ_u4_u1_97_wire) (bad_packet_99)   $flowthrough 
    $delay AND_u1_u1_98_inst 0
    // 			$volatile good_packet := ((tlast == 1 ) & (tkeep != 0 )) $buffering 1
    //  file .Aa/rx_from_mac.opt.aa, line 61
    // (tlast == 1 )
    ==[EQ_u1_u1_103_inst] (tlast_77 konst_102_wire_constant) (EQ_u1_u1_103_wire)   $flowthrough 
    $delay EQ_u1_u1_103_inst 0
    // (tkeep != 0 )
    !=[NEQ_u4_u1_106_inst] (tkeep_86 konst_105_wire_constant) (NEQ_u4_u1_106_wire)   $flowthrough 
    $delay NEQ_u4_u1_106_inst 0
    // ((tlast == 1 ) & (tkeep != 0 ))
    &[AND_u1_u1_107_inst] (EQ_u1_u1_103_wire NEQ_u4_u1_106_wire) (good_packet_108)   $flowthrough 
    $delay AND_u1_u1_107_inst 0
    // 			buffer_1[buf_ptr] := intm_data $buffering 1// bits of buffering = 37. 
    //  file .Aa/rx_from_mac.opt.aa, line 62
    // buffer_1[buf_ptr]
    &/ [array_obj_ref_110_index_0_resize] (buf_ptr_68) (R_buf_ptr_109_resized) 
    $flowthrough 
    &/ [array_obj_ref_110_index_0_rename] (R_buf_ptr_109_resized) (R_buf_ptr_109_scaled) 
    $flowthrough 
    &/ [array_obj_ref_110_index_offset] (R_buf_ptr_109_scaled) (array_obj_ref_110_final_offset) 
    $flowthrough 
    &/ [array_obj_ref_110_root_address_inst] (array_obj_ref_110_final_offset) (array_obj_ref_110_root_address) 
    $flowthrough 
    &/ [array_obj_ref_110_addr_0] (array_obj_ref_110_root_address) (array_obj_ref_110_word_address_0) 
    $flowthrough 
    $store [array_obj_ref_110_store_0] $to memory_space_0 (array_obj_ref_110_word_address_0 array_obj_ref_110_data_0) 
    $buffering  $in array_obj_ref_110_store_0 array_obj_ref_110_word_address_0 2
    $buffering  $in array_obj_ref_110_store_0 array_obj_ref_110_data_0 2
    $delay array_obj_ref_110_store_0 4
    &/ [array_obj_ref_110_gather_scatter] (intm_data_64) (array_obj_ref_110_data_0) 
    $flowthrough 
    // 			$volatile next_buf_ptr := (buf_ptr + 1 ) $buffering 1
    //  file .Aa/rx_from_mac.opt.aa, line 63
    // (buf_ptr + 1 )
    +[ADD_u10_u10_116_inst] (buf_ptr_68 konst_115_wire_constant) (next_buf_ptr_117)   $flowthrough 
    $delay ADD_u10_u10_116_inst 0
    // 		$volatile next_buf_ptr_out := next_buf_ptr $buffering 1
    //  file .Aa/rx_from_mac.opt.aa, line 65
    # := [W_next_buf_ptr_out_122_inst] (next_buf_ptr_117) (next_buf_ptr_out)    $flowthrough 
    // 		$volatile pckt_status := ( $mux good_packet ($bitcast ($uint<1>) _b1  )  ( $mux bad_packet ($bitcast ($uint<1>) _b0  )  ($bitcast ($uint<1>) _b0  ) )  )  $buffering 1
    //  file .Aa/rx_from_mac.opt.aa, line 66
    // ( $mux bad_packet ($bitcast ($uint<1>) _b0  )  ($bitcast ($uint<1>) _b0  ) ) 
    ? [MUX_134_inst] (bad_packet_99 type_cast_131_wire_constant type_cast_133_wire_constant) (MUX_134_wire)  $flowthrough
    // ( $mux good_packet ($bitcast ($uint<1>) _b1  )  ( $mux bad_packet ($bitcast ($uint<1>) _b0  )  ($bitcast ($uint<1>) _b0  ) )  ) 
    ? [MUX_135_inst] (good_packet_108 type_cast_128_wire_constant MUX_134_wire) (pckt_status)  $flowthrough
  }
  // end data-path
  // CP-DP links for do-while  do_while_stmt_62
  //  file .Aa/rx_from_mac.opt.aa, line 49
  phi_stmt_64 <=> (branch_block_stmt_61/do_while_stmt_62/do_while_stmt_62_loop_body/phi_stmt_64_entry_sample_req branch_block_stmt_61/do_while_stmt_62/do_while_stmt_62_loop_body/phi_stmt_64_loopback_sample_req) (branch_block_stmt_61/do_while_stmt_62/do_while_stmt_62_loop_body/phi_stmt_64_phi_mux_ack)
  // mac_data
  RPIPE_mac_data_66_inst <=> (branch_block_stmt_61/do_while_stmt_62/do_while_stmt_62_loop_body/RPIPE_mac_data_66_Sample/rr branch_block_stmt_61/do_while_stmt_62/do_while_stmt_62_loop_body/RPIPE_mac_data_66_Update/cr) (branch_block_stmt_61/do_while_stmt_62/do_while_stmt_62_loop_body/RPIPE_mac_data_66_Sample/ra branch_block_stmt_61/do_while_stmt_62/do_while_stmt_62_loop_body/RPIPE_mac_data_66_Update/ca)
  // mac_data
  RPIPE_mac_data_67_inst <=> (branch_block_stmt_61/do_while_stmt_62/do_while_stmt_62_loop_body/RPIPE_mac_data_67_Sample/rr branch_block_stmt_61/do_while_stmt_62/do_while_stmt_62_loop_body/RPIPE_mac_data_67_Update/cr) (branch_block_stmt_61/do_while_stmt_62/do_while_stmt_62_loop_body/RPIPE_mac_data_67_Sample/ra branch_block_stmt_61/do_while_stmt_62/do_while_stmt_62_loop_body/RPIPE_mac_data_67_Update/ca)
  phi_stmt_68 <=> (branch_block_stmt_61/do_while_stmt_62/do_while_stmt_62_loop_body/phi_stmt_68_entry_sample_req branch_block_stmt_61/do_while_stmt_62/do_while_stmt_62_loop_body/phi_stmt_68_loopback_sample_req) (branch_block_stmt_61/do_while_stmt_62/do_while_stmt_62_loop_body/phi_stmt_68_phi_mux_ack)
  next_buf_ptr_117_72_buf <=> (branch_block_stmt_61/do_while_stmt_62/do_while_stmt_62_loop_body/R_next_buf_ptr_72_Sample/req branch_block_stmt_61/do_while_stmt_62/do_while_stmt_62_loop_body/R_next_buf_ptr_72_Update/req) (branch_block_stmt_61/do_while_stmt_62/do_while_stmt_62_loop_body/R_next_buf_ptr_72_Sample/ack branch_block_stmt_61/do_while_stmt_62/do_while_stmt_62_loop_body/R_next_buf_ptr_72_Update/ack)
  // 			$volatile tlast := ( $slice intm_data 36 36 )  $buffering 1
  //  file .Aa/rx_from_mac.opt.aa, line 57
  // intm_data
  // 			$volatile tdata := ( $slice intm_data 35 4 )  $buffering 1
  //  file .Aa/rx_from_mac.opt.aa, line 58
  // intm_data
  // 			$volatile tkeep := ( $slice intm_data 3 0 )  $buffering 1
  //  file .Aa/rx_from_mac.opt.aa, line 59
  // intm_data
  // 			$volatile bad_packet := (((tlast == 1 ) & (tdata == _hFFFFFFFF )) & (tkeep == 0 )) $buffering 1
  //  file .Aa/rx_from_mac.opt.aa, line 60
  // (((tlast == 1 ) & (tdata == _hFFFFFFFF )) & (tkeep == 0 ))
  // ((tlast == 1 ) & (tdata == _hFFFFFFFF ))
  // (tlast == 1 )
  // tlast
  // (tdata == _hFFFFFFFF )
  // tdata
  // (tkeep == 0 )
  // tkeep
  // 			$volatile good_packet := ((tlast == 1 ) & (tkeep != 0 )) $buffering 1
  //  file .Aa/rx_from_mac.opt.aa, line 61
  // ((tlast == 1 ) & (tkeep != 0 ))
  // (tlast == 1 )
  // tlast
  // (tkeep != 0 )
  // tkeep
  // 			buffer_1[buf_ptr] := intm_data $buffering 1// bits of buffering = 37. 
  //  file .Aa/rx_from_mac.opt.aa, line 62
  // intm_data
  // buf_ptr
  array_obj_ref_110_index_0_resize <=> (branch_block_stmt_61/do_while_stmt_62/do_while_stmt_62_loop_body/array_obj_ref_110_index_resize_0/index_resize_req) (branch_block_stmt_61/do_while_stmt_62/do_while_stmt_62_loop_body/array_obj_ref_110_index_resize_0/index_resize_ack)
  array_obj_ref_110_index_0_rename <=> (branch_block_stmt_61/do_while_stmt_62/do_while_stmt_62_loop_body/array_obj_ref_110_index_scale_0/scale_rename_req) (branch_block_stmt_61/do_while_stmt_62/do_while_stmt_62_loop_body/array_obj_ref_110_index_scale_0/scale_rename_ack)
  array_obj_ref_110_index_offset <=> (branch_block_stmt_61/do_while_stmt_62/do_while_stmt_62_loop_body/array_obj_ref_110_final_index_sum_regn/req) (branch_block_stmt_61/do_while_stmt_62/do_while_stmt_62_loop_body/array_obj_ref_110_final_index_sum_regn/ack)
  array_obj_ref_110_root_address_inst <=> (branch_block_stmt_61/do_while_stmt_62/do_while_stmt_62_loop_body/array_obj_ref_110_base_plus_offset/sum_rename_req) (branch_block_stmt_61/do_while_stmt_62/do_while_stmt_62_loop_body/array_obj_ref_110_base_plus_offset/sum_rename_ack)
  array_obj_ref_110_addr_0 <=> (branch_block_stmt_61/do_while_stmt_62/do_while_stmt_62_loop_body/array_obj_ref_110_word_addrgen/root_register_req) (branch_block_stmt_61/do_while_stmt_62/do_while_stmt_62_loop_body/array_obj_ref_110_word_addrgen/root_register_ack)
  array_obj_ref_110_gather_scatter <=> (branch_block_stmt_61/do_while_stmt_62/do_while_stmt_62_loop_body/array_obj_ref_110_Sample/array_obj_ref_110_Split/split_req) (branch_block_stmt_61/do_while_stmt_62/do_while_stmt_62_loop_body/array_obj_ref_110_Sample/array_obj_ref_110_Split/split_ack)
  array_obj_ref_110_store_0 <=> (branch_block_stmt_61/do_while_stmt_62/do_while_stmt_62_loop_body/array_obj_ref_110_Sample/word_access_start/word_0/rr branch_block_stmt_61/do_while_stmt_62/do_while_stmt_62_loop_body/array_obj_ref_110_Update/word_access_complete/word_0/cr) (branch_block_stmt_61/do_while_stmt_62/do_while_stmt_62_loop_body/array_obj_ref_110_Sample/word_access_start/word_0/ra branch_block_stmt_61/do_while_stmt_62/do_while_stmt_62_loop_body/array_obj_ref_110_Update/word_access_complete/word_0/ca)
  // 			$volatile next_buf_ptr := (buf_ptr + 1 ) $buffering 1
  //  file .Aa/rx_from_mac.opt.aa, line 63
  // (buf_ptr + 1 )
  // buf_ptr
  // (tlast == 0 )
  // tlast
  do_while_stmt_62_branch <=> (branch_block_stmt_61/do_while_stmt_62/do_while_stmt_62_loop_body/condition_evaluated) (branch_block_stmt_61/do_while_stmt_62/loop_exit/ack branch_block_stmt_61/do_while_stmt_62/loop_taken/ack)
  // 		$volatile next_buf_ptr_out := next_buf_ptr $buffering 1
  //  file .Aa/rx_from_mac.opt.aa, line 65
  // next_buf_ptr
  // 		$volatile pckt_status := ( $mux good_packet ($bitcast ($uint<1>) _b1  )  ( $mux bad_packet ($bitcast ($uint<1>) _b0  )  ($bitcast ($uint<1>) _b0  ) )  )  $buffering 1
  //  file .Aa/rx_from_mac.opt.aa, line 66
  // good_packet
  // bad_packet
  // ( $mux bad_packet ($bitcast ($uint<1>) _b0  )  ($bitcast ($uint<1>) _b0  ) ) 
  // ( $mux good_packet ($bitcast ($uint<1>) _b1  )  ( $mux bad_packet ($bitcast ($uint<1>) _b0  )  ($bitcast ($uint<1>) _b0  ) )  ) 
}
$module [load_buffer2] 
{
  $out next_buf_ptr_out:$int<10>
  // can point into 
  pckt_status:$int<1>
  // can point into 
  // pipe-declarations for block %load_buffer2
  //  file .Aa/rx_from_mac.opt.aa, line 69
  // pipe-declarations for block %load_buffer2%pckt_good_check_fast
  //  file .Aa/rx_from_mac.opt.aa, line 74
  // memory-space 1 is written into.
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    <>[branch_block_stmt_142] // Branch Block  file .Aa/rx_from_mac.opt.aa, line 74
    {
      $P [branch_block_stmt_142__entry__]
      branch_block_stmt_142__entry__ <-| ($entry)
      $P [branch_block_stmt_142__exit__]
      branch_block_stmt_142__exit__ |-> ($exit)
      $P [do_while_stmt_143__entry__] 
      $P [do_while_stmt_143__exit__] 
      $P [assign_stmt_204_to_assign_stmt_216__entry__] 
      $P [assign_stmt_204_to_assign_stmt_216__exit__] 
      // do-while-statement  
      //  file .Aa/rx_from_mac.opt.aa, line 76
      <o> [do_while_stmt_143]  $depth 7 $buffering 1 
      {
        $P[do_while_stmt_143__entry__] 
        $P[do_while_stmt_143__exit__] 
        $P[loop_back] 
        $P[condition_done] 
        $P[loop_body_done] 
        $pipeline [do_while_stmt_143_loop_body] 
        {
          // Pipelined!
          $T[back_edge_to_loop_body] 
          $T[first_time_through_loop_body] 
          $T[loop_body_start] 
          $T[condition_evaluated] 
          $transitionmerge [entry_tmerge] (back_edge_to_loop_body first_time_through_loop_body) (loop_body_start)
          $entry <-& (loop_body_start)
          $T[aggregated_phi_sample_req] 
          $T[aggregated_phi_sample_ack] 
          $T[aggregated_phi_update_req] 
          $T[aggregated_phi_update_ack] 
          // do not loop-back unless all phi's have used up their triggering tokens.
          condition_evaluated <-& (aggregated_phi_update_ack)
          aggregated_phi_sample_req o<-& (aggregated_phi_update_ack 0)
          // start:  PHI statement phi_stmt_145
          // 			$phi intm_data := 			  mac_data $on   $entry 			  mac_data $on   $loopback 
          // type of target is $uint<37>
          $T[phi_stmt_145_sample_start_] 
          $T[phi_stmt_145_sample_completed_] 
          $T[phi_stmt_145_update_start_] 
          $T[phi_stmt_145_update_completed_] 
          $T[phi_stmt_145_sample_start__ps] 
          phi_stmt_145_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_145_sample_completed__ps] 
          phi_stmt_145_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_145_update_start__ps] 
          phi_stmt_145_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_145_update_completed__ps] 
          phi_stmt_145_update_completed_ <-& (phi_stmt_145_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_145_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_145_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_145_update_start_)
          $T[phi_stmt_145_loopback_trigger] 
          phi_stmt_145_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_145_loopback_sample_req] 
          $T[phi_stmt_145_loopback_sample_req_ps] 
          phi_stmt_145_loopback_sample_req <-& (phi_stmt_145_loopback_sample_req_ps)
          phi_stmt_145_loopback_sample_req &-> ($null)
          $T[phi_stmt_145_entry_trigger] 
          phi_stmt_145_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_145_entry_sample_req] 
          $T[phi_stmt_145_entry_sample_req_ps] 
          phi_stmt_145_entry_sample_req <-& (phi_stmt_145_entry_sample_req_ps)
          phi_stmt_145_entry_sample_req &-> ($null)
          phi_stmt_145_update_start_ o<-& (phi_stmt_145_update_completed_ 0)
          phi_stmt_145_sample_start_ o<-& (phi_stmt_145_sample_completed_ 1)
          $T[phi_stmt_145_merged_reqs] 
          $T[phi_stmt_145_phi_mux_ack] 
          $T[phi_stmt_145_phi_mux_ack_ps] 
          phi_stmt_145_phi_mux_ack_ps <-& (phi_stmt_145_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_145_update_completed_)
          $T[RPIPE_mac_data_147_sample_start__ps] 
          $T[RPIPE_mac_data_147_sample_completed__ps] 
          $T[RPIPE_mac_data_147_update_start__ps] 
          $T[RPIPE_mac_data_147_update_completed__ps] 
          // source expression in Phi alternative 0
          // mac_data
          $T[RPIPE_mac_data_147_sample_start_] 
          $T[RPIPE_mac_data_147_sample_completed_] 
          $T[RPIPE_mac_data_147_update_start_] 
          $T[RPIPE_mac_data_147_update_completed_] 
          ;;[RPIPE_mac_data_147_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_mac_data_147_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_mac_data_147_sample_start_ &-> (RPIPE_mac_data_147_Sample)
          RPIPE_mac_data_147_sample_completed_ <-& (RPIPE_mac_data_147_Sample)
          RPIPE_mac_data_147_update_start_ <-& (RPIPE_mac_data_147_sample_completed_)
          RPIPE_mac_data_147_update_start_ &-> (RPIPE_mac_data_147_Update)
          RPIPE_mac_data_147_update_completed_ <-& (RPIPE_mac_data_147_Update)
          RPIPE_mac_data_147_sample_start_ o<-& (RPIPE_mac_data_147_update_completed_ 0)
          // Phi start dependency
          RPIPE_mac_data_147_sample_start_ <-& (RPIPE_mac_data_147_sample_start__ps)
          RPIPE_mac_data_147_update_start_ <-& (RPIPE_mac_data_147_update_start__ps)
          // RAW reenables for mac_data
          // producer  and  consumer are both determined by PHI statements.
          // Phi complete dependency.
          RPIPE_mac_data_147_sample_completed__ps <-& (RPIPE_mac_data_147_sample_completed_)
          RPIPE_mac_data_147_update_completed__ps <-& (RPIPE_mac_data_147_update_completed_)
          $T[RPIPE_mac_data_148_sample_start__ps] 
          $T[RPIPE_mac_data_148_sample_completed__ps] 
          $T[RPIPE_mac_data_148_update_start__ps] 
          $T[RPIPE_mac_data_148_update_completed__ps] 
          // source expression in Phi alternative 1
          // mac_data
          $T[RPIPE_mac_data_148_sample_start_] 
          $T[RPIPE_mac_data_148_sample_completed_] 
          $T[RPIPE_mac_data_148_update_start_] 
          $T[RPIPE_mac_data_148_update_completed_] 
          ;;[RPIPE_mac_data_148_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_mac_data_148_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_mac_data_148_sample_start_ &-> (RPIPE_mac_data_148_Sample)
          RPIPE_mac_data_148_sample_completed_ <-& (RPIPE_mac_data_148_Sample)
          RPIPE_mac_data_148_update_start_ <-& (RPIPE_mac_data_148_sample_completed_)
          RPIPE_mac_data_148_update_start_ &-> (RPIPE_mac_data_148_Update)
          RPIPE_mac_data_148_update_completed_ <-& (RPIPE_mac_data_148_Update)
          RPIPE_mac_data_148_sample_start_ o<-& (RPIPE_mac_data_148_update_completed_ 0)
          // Phi start dependency
          RPIPE_mac_data_148_sample_start_ <-& (RPIPE_mac_data_148_sample_start__ps)
          RPIPE_mac_data_148_update_start_ <-& (RPIPE_mac_data_148_update_start__ps)
          // RAW reenables for mac_data
          // producer  and  consumer are both determined by PHI statements.
          // Phi complete dependency.
          RPIPE_mac_data_148_sample_completed__ps <-& (RPIPE_mac_data_148_sample_completed_)
          RPIPE_mac_data_148_update_completed__ps <-& (RPIPE_mac_data_148_update_completed_)
          $phisequencer [ phi_stmt_145_phi_seq] : 
          phi_stmt_145_entry_trigger RPIPE_mac_data_147_sample_start__ps RPIPE_mac_data_147_sample_completed__ps RPIPE_mac_data_147_update_start__ps RPIPE_mac_data_147_update_completed__ps phi_stmt_145_loopback_trigger RPIPE_mac_data_148_sample_start__ps RPIPE_mac_data_148_sample_completed__ps RPIPE_mac_data_148_update_start__ps RPIPE_mac_data_148_update_completed__ps :
          phi_stmt_145_sample_start__ps phi_stmt_145_sample_completed__ps phi_stmt_145_update_start__ps phi_stmt_145_update_completed__ps :
          phi_stmt_145_entry_sample_req_ps phi_stmt_145_loopback_sample_req_ps : 
          phi_stmt_145_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_145
          // start:  PHI statement phi_stmt_149
          // 			$phi buf_ptr := 			  ($bitcast ($uint<10>) _b0  ) $on   $entry 			  next_buf_ptr $on   $loopback 
          // type of target is $uint<10>
          $T[phi_stmt_149_sample_start_] 
          $T[phi_stmt_149_sample_completed_] 
          $T[phi_stmt_149_update_start_] 
          $T[phi_stmt_149_update_completed_] 
          $T[phi_stmt_149_sample_start__ps] 
          phi_stmt_149_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_149_sample_completed__ps] 
          phi_stmt_149_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_149_update_start__ps] 
          phi_stmt_149_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_149_update_completed__ps] 
          phi_stmt_149_update_completed_ <-& (phi_stmt_149_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_149_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_149_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_149_update_start_)
          $T[phi_stmt_149_loopback_trigger] 
          phi_stmt_149_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_149_loopback_sample_req] 
          $T[phi_stmt_149_loopback_sample_req_ps] 
          phi_stmt_149_loopback_sample_req <-& (phi_stmt_149_loopback_sample_req_ps)
          phi_stmt_149_loopback_sample_req &-> ($null)
          $T[phi_stmt_149_entry_trigger] 
          phi_stmt_149_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_149_entry_sample_req] 
          $T[phi_stmt_149_entry_sample_req_ps] 
          phi_stmt_149_entry_sample_req <-& (phi_stmt_149_entry_sample_req_ps)
          phi_stmt_149_entry_sample_req &-> ($null)
          phi_stmt_149_update_start_ o<-& (phi_stmt_149_update_completed_ 0)
          phi_stmt_149_sample_start_ o<-& (phi_stmt_149_sample_completed_ 1)
          $T[phi_stmt_149_merged_reqs] 
          $T[phi_stmt_149_phi_mux_ack] 
          $T[phi_stmt_149_phi_mux_ack_ps] 
          phi_stmt_149_phi_mux_ack_ps <-& (phi_stmt_149_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_149_update_completed_)
          $T[type_cast_152_sample_start__ps] 
          $T[type_cast_152_sample_completed__ps] 
          $T[type_cast_152_update_start__ps] 
          $T[type_cast_152_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[type_cast_152_sample_start_] 
          $T[type_cast_152_sample_completed_] 
          type_cast_152_sample_completed_ <-& (type_cast_152_sample_start_)
          $T[type_cast_152_update_start_] 
          $T [type_cast_152_update_completed_] $delay 
          type_cast_152_update_completed_ <-& (type_cast_152_update_start_)
          // Phi start dependency for implicit/constant alternative.
          type_cast_152_sample_start_ <-& (type_cast_152_sample_start__ps)
          type_cast_152_update_start_ <-& (type_cast_152_update_start__ps)
          // Phi complete dependency.
          type_cast_152_sample_completed__ps <-& (type_cast_152_sample_completed_)
          type_cast_152_update_completed__ps <-& (type_cast_152_update_completed_)
          $T[R_next_buf_ptr_153_sample_start__ps] 
          $T[R_next_buf_ptr_153_sample_completed__ps] 
          $T[R_next_buf_ptr_153_update_start__ps] 
          $T[R_next_buf_ptr_153_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_next_buf_ptr_153_sample_start_] 
          $T[R_next_buf_ptr_153_sample_completed_] 
          $T[R_next_buf_ptr_153_update_start_] 
          $T[R_next_buf_ptr_153_update_completed_] 
          ;;[R_next_buf_ptr_153_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_next_buf_ptr_153_sample_start_ &-> (R_next_buf_ptr_153_Sample)
          R_next_buf_ptr_153_sample_completed_ <-& (R_next_buf_ptr_153_Sample)
          ;;[R_next_buf_ptr_153_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_next_buf_ptr_153_update_start_ &-> (R_next_buf_ptr_153_Update)
          R_next_buf_ptr_153_update_completed_ <-& (R_next_buf_ptr_153_Update)
          // RAW reenables for next_buf_ptr
          // Phi start dependency for implicit/constant alternative.
          R_next_buf_ptr_153_sample_start_ <-& (R_next_buf_ptr_153_sample_start__ps)
          R_next_buf_ptr_153_update_start_ <-& (R_next_buf_ptr_153_update_start__ps)
          // Phi complete dependency.
          R_next_buf_ptr_153_sample_completed__ps <-& (R_next_buf_ptr_153_sample_completed_)
          R_next_buf_ptr_153_update_completed__ps <-& (R_next_buf_ptr_153_update_completed_)
          $phisequencer [ phi_stmt_149_phi_seq] : 
          phi_stmt_149_entry_trigger type_cast_152_sample_start__ps type_cast_152_sample_completed__ps type_cast_152_update_start__ps type_cast_152_update_completed__ps phi_stmt_149_loopback_trigger R_next_buf_ptr_153_sample_start__ps R_next_buf_ptr_153_sample_completed__ps R_next_buf_ptr_153_update_start__ps R_next_buf_ptr_153_update_completed__ps :
          phi_stmt_149_sample_start__ps phi_stmt_149_sample_completed__ps phi_stmt_149_update_start__ps phi_stmt_149_update_completed__ps :
          phi_stmt_149_entry_sample_req_ps phi_stmt_149_loopback_sample_req_ps : 
          phi_stmt_149_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_149
          // start: WAR dependencies for tlast
          // done: WAR dependencies for tlast
          // start:  			$volatile tlast := ( $slice intm_data 36 36 )  $buffering 1
          //  file .Aa/rx_from_mac.opt.aa, line 84
          // volatile! 
          // Source expression
          // ( $slice intm_data 36 36 ) 
          // intm_data
          // Target expression
          // (as target) tlast
          // start: WAR dependencies for tlast
          // done: WAR dependencies for tlast
          // end:  			$volatile tlast := ( $slice intm_data 36 36 )  $buffering 1
          // start: WAR dependencies for tdata
          // done: WAR dependencies for tdata
          // start:  			$volatile tdata := ( $slice intm_data 35 4 )  $buffering 1
          //  file .Aa/rx_from_mac.opt.aa, line 85
          // volatile! 
          // Source expression
          // ( $slice intm_data 35 4 ) 
          // intm_data
          // Target expression
          // (as target) tdata
          // start: WAR dependencies for tdata
          // done: WAR dependencies for tdata
          // end:  			$volatile tdata := ( $slice intm_data 35 4 )  $buffering 1
          // start: WAR dependencies for tkeep
          // done: WAR dependencies for tkeep
          // start:  			$volatile tkeep := ( $slice intm_data 3 0 )  $buffering 1
          //  file .Aa/rx_from_mac.opt.aa, line 86
          // volatile! 
          // Source expression
          // ( $slice intm_data 3 0 ) 
          // intm_data
          // Target expression
          // (as target) tkeep
          // start: WAR dependencies for tkeep
          // done: WAR dependencies for tkeep
          // end:  			$volatile tkeep := ( $slice intm_data 3 0 )  $buffering 1
          // start: WAR dependencies for bad_packet
          // done: WAR dependencies for bad_packet
          // start:  			$volatile bad_packet := (((tlast == 1 ) & (tdata == _hFFFFFFFF )) & (tkeep == 0 )) $buffering 1
          //  file .Aa/rx_from_mac.opt.aa, line 87
          // volatile! 
          // Source expression
          // (((tlast == 1 ) & (tdata == _hFFFFFFFF )) & (tkeep == 0 ))
          // ((tlast == 1 ) & (tdata == _hFFFFFFFF ))
          // (tlast == 1 )
          // tlast
          // (tdata == _hFFFFFFFF )
          // tdata
          // (tkeep == 0 )
          // tkeep
          // Target expression
          // (as target) bad_packet
          // start: WAR dependencies for bad_packet
          // done: WAR dependencies for bad_packet
          // end:  			$volatile bad_packet := (((tlast == 1 ) & (tdata == _hFFFFFFFF )) & (tkeep == 0 )) $buffering 1
          // start: WAR dependencies for good_packet
          // done: WAR dependencies for good_packet
          // start:  			$volatile good_packet := ((tlast == 1 ) & (tkeep != 0 )) $buffering 1
          //  file .Aa/rx_from_mac.opt.aa, line 88
          // volatile! 
          // Source expression
          // ((tlast == 1 ) & (tkeep != 0 ))
          // (tlast == 1 )
          // tlast
          // (tkeep != 0 )
          // tkeep
          // Target expression
          // (as target) good_packet
          // start: WAR dependencies for good_packet
          // done: WAR dependencies for good_packet
          // end:  			$volatile good_packet := ((tlast == 1 ) & (tkeep != 0 )) $buffering 1
          // start:  			buffer_2[buf_ptr] := intm_data $buffering 1// bits of buffering = 37. 
          //  file .Aa/rx_from_mac.opt.aa, line 89
          // Source expression
          // intm_data
          // Target expression
          // buffer_2[buf_ptr]
          $T[array_obj_ref_190_sample_start_] 
          $T[array_obj_ref_190_sample_completed_] 
          $T[array_obj_ref_190_update_start_] 
          $T[array_obj_ref_190_update_completed_] 
          $T[array_obj_ref_190_word_address_calculated] 
          $T[array_obj_ref_190_root_address_calculated] 
          $T[array_obj_ref_190_offset_calculated] 
          $T[array_obj_ref_190_index_resized_0] 
          $T[array_obj_ref_190_index_scaled_0] 
          $T[array_obj_ref_190_index_computed_0] 
          // buf_ptr
          // start: Forward dependencies from buf_ptr to transition array_obj_ref_190_index_computed_0
          array_obj_ref_190_index_computed_0 <-& (phi_stmt_149_update_completed_)
          // done: Forward dependencies from buf_ptr to transition array_obj_ref_190_index_computed_0
          ;;[array_obj_ref_190_index_resize_0] 
          {
            $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
          }
          array_obj_ref_190_index_computed_0 &-> (array_obj_ref_190_index_resize_0)
          array_obj_ref_190_index_resized_0 <-& (array_obj_ref_190_index_resize_0)
          ;;[array_obj_ref_190_index_scale_0] 
          {
            $T [scale_rename_req] $T [scale_rename_ack] // rename 
          }
          array_obj_ref_190_index_resized_0 &-> (array_obj_ref_190_index_scale_0)
          array_obj_ref_190_index_scaled_0 <-& (array_obj_ref_190_index_scale_0)
          ;;[array_obj_ref_190_final_index_sum_regn] 
          {
            $T [req] $T [ack] // rename
          }
          array_obj_ref_190_index_scaled_0 &-> (array_obj_ref_190_final_index_sum_regn)
          array_obj_ref_190_offset_calculated <-& (array_obj_ref_190_final_index_sum_regn)
          ;;[array_obj_ref_190_base_plus_offset] 
          {
            $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
          }
          array_obj_ref_190_offset_calculated &-> (array_obj_ref_190_base_plus_offset)
          array_obj_ref_190_root_address_calculated <-& (array_obj_ref_190_base_plus_offset)
          ;;[array_obj_ref_190_word_addrgen] 
          {
            $T [root_register_req] $T [root_register_ack]
          }
          array_obj_ref_190_root_address_calculated &-> (array_obj_ref_190_word_addrgen)
          array_obj_ref_190_word_address_calculated <-& (array_obj_ref_190_word_addrgen)
          ;;[array_obj_ref_190_Sample] 
          {
            ;;[array_obj_ref_190_Split] 
            {
              $T [split_req] $T [split_ack]
            }
            ||[word_access_start] 
            {
              ;;[word_0] 
              {
                $T [rr] $T [ra] 
              }
            }
          }
          ;;[array_obj_ref_190_Update] 
          {
            ||[word_access_complete] 
            {
              ;;[word_0] 
              {
                $T [cr] $T [ca] 
              }
            }
          }
          array_obj_ref_190_sample_start_ <-& (array_obj_ref_190_word_address_calculated)
          // reenable-joins
          phi_stmt_149_update_start_ o<-& (array_obj_ref_190_sample_completed_ 0)
          array_obj_ref_190_sample_start_ &-> (array_obj_ref_190_Sample)
          array_obj_ref_190_sample_completed_ <-& (array_obj_ref_190_Sample)
          array_obj_ref_190_sample_completed_ &-> ($null)
          array_obj_ref_190_update_start_ &-> (array_obj_ref_190_Update)
          array_obj_ref_190_update_completed_ <-& (array_obj_ref_190_Update)
          // self-release: 
          array_obj_ref_190_sample_start_ o<-& (array_obj_ref_190_sample_completed_ 1)
          $null &-> (array_obj_ref_190_update_start_)
          array_obj_ref_190_update_start_ o<-& (array_obj_ref_190_update_completed_ 0)
          // start: Forward dependencies from intm_data to transition array_obj_ref_190_sample_start_
          array_obj_ref_190_sample_start_ <-& (phi_stmt_145_update_completed_)
          // done: Forward dependencies from intm_data to transition array_obj_ref_190_sample_start_
          // RAW reenables for intm_data
          phi_stmt_145_update_start_ o<-& (array_obj_ref_190_sample_completed_ 0)
          // end:  			buffer_2[buf_ptr] := intm_data $buffering 1// bits of buffering = 37. 
          // start: WAR dependencies for next_buf_ptr
          // WAR dependency: Read: next_buf_ptr before Write: 			$volatile next_buf_ptr := (buf_ptr + 1 ) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_buf_ptr
          // start:  			$volatile next_buf_ptr := (buf_ptr + 1 ) $buffering 1
          //  file .Aa/rx_from_mac.opt.aa, line 90
          // volatile! 
          // Source expression
          // (buf_ptr + 1 )
          // buf_ptr
          // Target expression
          // (as target) next_buf_ptr
          // start: WAR dependencies for next_buf_ptr
          // WAR dependency: Read: next_buf_ptr before Write: 			$volatile next_buf_ptr := (buf_ptr + 1 ) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for next_buf_ptr
          // end:  			$volatile next_buf_ptr := (buf_ptr + 1 ) $buffering 1
          // (tlast == 0 )
          // tlast
          $T [loop_body_delay_to_condition_start] $delay
          loop_body_start &-> (loop_body_delay_to_condition_start)
          loop_body_delay_to_condition_start &-> (condition_evaluated)
          // start: Forward dependencies from (tlast == 0 ) to transition condition_evaluated
          condition_evaluated <-& (phi_stmt_145_update_completed_)
          // done: Forward dependencies from (tlast == 0 ) to transition condition_evaluated
          condition_evaluated &-> ($null)
          // load-store dependencies..
          // memory-space  memory_space_1
          //  array_obj_ref_190 store
          // reenable across ring for memory space memory_space_1
          // leading and trailing sets are the same... no ring dependency
          // pipe read/write dependencies for pipe mac_data
          // read-dependencies for pipe mac_data
          RPIPE_mac_data_148_sample_start_ <-& (RPIPE_mac_data_147_update_completed_)
          // ring dependency in pipeline.
          RPIPE_mac_data_147_update_start_ o<-& (RPIPE_mac_data_148_update_completed_ 0)
          // write-dependencies for pipe mac_data
          // signal write dependencies for mac_data
        }
        ( first_time_through_loop_body  back_edge_to_loop_body) 
        ( condition_evaluated )
        ;; [loop_exit] 
        {
          $T [ack] 
        }
        ;; [loop_taken] 
        {
          $T [ack] 
        }
        do_while_stmt_143__entry__ <-| ($entry)
        loop_body_done <-| ( do_while_stmt_143_loop_body ) 
        condition_done |-> (loop_exit loop_taken)
        do_while_stmt_143__exit__ |-> ($exit)
        $bind condition_done <= do_while_stmt_143_loop_body : condition_evaluated
        $bind do_while_stmt_143__entry__  => do_while_stmt_143_loop_body : first_time_through_loop_body 
        $bind loop_back  => do_while_stmt_143_loop_body : back_edge_to_loop_body 
        $terminate (loop_exit loop_taken loop_body_done) (loop_back do_while_stmt_143__exit__)
      }
      do_while_stmt_143__entry__ |-> (do_while_stmt_143)
      do_while_stmt_143__exit__ <-| (do_while_stmt_143)
      ::[assign_stmt_204_to_assign_stmt_216] 
      {
        // start: WAR dependencies for next_buf_ptr_out
        // ignored out-of-scope w_root 			$phi buf_ptr := 			  ($bitcast ($uint<10>) _b0  ) $on   $entry 			  next_buf_ptr $on   $loopback 
        // type of target is $uint<10>
        // done: WAR dependencies for next_buf_ptr_out
        // start:  		$volatile next_buf_ptr_out := next_buf_ptr $buffering 1
        //  file .Aa/rx_from_mac.opt.aa, line 92
        // volatile! 
        // Source expression
        // next_buf_ptr
        // Target expression
        // (as target) next_buf_ptr_out
        // next_buf_ptr_out
        // write to interface object
        // start: WAR dependencies for next_buf_ptr_out
        // ignored out-of-scope w_root 			$phi buf_ptr := 			  ($bitcast ($uint<10>) _b0  ) $on   $entry 			  next_buf_ptr $on   $loopback 
        // type of target is $uint<10>
        // done: WAR dependencies for next_buf_ptr_out
        // next_buf_ptr_out
        // write to interface object
        // end:  		$volatile next_buf_ptr_out := next_buf_ptr $buffering 1
        // start: WAR dependencies for pckt_status
        // ignored out-of-scope w_root 			$phi intm_data := 			  mac_data $on   $entry 			  mac_data $on   $loopback 
        // type of target is $uint<37>
        // done: WAR dependencies for pckt_status
        // start:  		$volatile pckt_status := ( $mux good_packet ($bitcast ($uint<1>) _b1  )  ( $mux bad_packet ($bitcast ($uint<1>) _b0  )  ($bitcast ($uint<1>) _b0  ) )  )  $buffering 1
        //  file .Aa/rx_from_mac.opt.aa, line 93
        // volatile! 
        // Source expression
        // ( $mux good_packet ($bitcast ($uint<1>) _b1  )  ( $mux bad_packet ($bitcast ($uint<1>) _b0  )  ($bitcast ($uint<1>) _b0  ) )  ) 
        // good_packet
        // ( $mux bad_packet ($bitcast ($uint<1>) _b0  )  ($bitcast ($uint<1>) _b0  ) ) 
        // bad_packet
        // Target expression
        // (as target) pckt_status
        // pckt_status
        // write to interface object
        // start: WAR dependencies for pckt_status
        // ignored out-of-scope w_root 			$phi intm_data := 			  mac_data $on   $entry 			  mac_data $on   $loopback 
        // type of target is $uint<37>
        // done: WAR dependencies for pckt_status
        // pckt_status
        // write to interface object
        // end:  		$volatile pckt_status := ( $mux good_packet ($bitcast ($uint<1>) _b1  )  ( $mux bad_packet ($bitcast ($uint<1>) _b0  )  ($bitcast ($uint<1>) _b0  ) )  )  $buffering 1
        // load-store dependencies..
      }
      assign_stmt_204_to_assign_stmt_216__entry__ |-> (assign_stmt_204_to_assign_stmt_216)
      assign_stmt_204_to_assign_stmt_216__exit__ <-| (assign_stmt_204_to_assign_stmt_216)
      do_while_stmt_143__entry__ <-| (branch_block_stmt_142__entry__)
      assign_stmt_204_to_assign_stmt_216__entry__ <-| (do_while_stmt_143__exit__)
      assign_stmt_204_to_assign_stmt_216__exit__ |-> (branch_block_stmt_142__exit__)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %load_buffer2%pckt_good_check_fast%
    //  file .Aa/rx_from_mac.opt.aa, line 78
    // constant-object-declarations for block %load_buffer2%pckt_good_check_fast
    //  file .Aa/rx_from_mac.opt.aa, line 74
    // constant-object-declarations for block %load_buffer2
    //  file .Aa/rx_from_mac.opt.aa, line 69
    // constant-declarations for block %load_buffer2%pckt_good_check_fast
    //  file .Aa/rx_from_mac.opt.aa, line 74
    // do-while statement  
    //  file .Aa/rx_from_mac.opt.aa, line 76
    // 0 
    $constant $W[konst_200_wire_constant] : $int<1> := _b0// 0
    // constant-declarations for block %load_buffer2%pckt_good_check_fast%
    //  file .Aa/rx_from_mac.opt.aa, line 78
    // constant-declarations for phi:  			$phi intm_data := 			  mac_data $on   $entry 			  mac_data $on   $loopback 
    // type of target is $uint<37>
    //  file .Aa/rx_from_mac.opt.aa, line 79
    // constant-declarations for phi:  			$phi buf_ptr := 			  ($bitcast ($uint<10>) _b0  ) $on   $entry 			  next_buf_ptr $on   $loopback 
    // type of target is $uint<10>
    //  file .Aa/rx_from_mac.opt.aa, line 81
    // ($bitcast ($uint<10>) _b0  )
    $constant $W[type_cast_152_wire_constant] : $int<10> := _b0000000000// 0
    // 1 
    $constant $W[konst_169_wire_constant] : $int<1> := _b1// 1
    // _hFFFFFFFF 
    $constant $W[konst_172_wire_constant] : $int<32> := _b11111111111111111111111111111111// -1
    // 0 
    $constant $W[konst_176_wire_constant] : $int<4> := _b0000// 0
    // 1 
    $constant $W[konst_182_wire_constant] : $int<1> := _b1// 1
    // 0 
    $constant $W[konst_185_wire_constant] : $int<4> := _b0000// 0
    // buffer_2[buf_ptr]
    $constant $W[array_obj_ref_190_resized_base_address] : $int<10> := _b0000000000// 0
    $constant $W[array_obj_ref_190_offset_scale_factor_0] : $int<10> := _b0000000001// 1
    $constant $W[array_obj_ref_190_word_offset_0] : $int<10> := _b0000000000// 0
    // 1 
    $constant $W[konst_195_wire_constant] : $int<10> := _b0000000001// 1
    // ( $mux good_packet ($bitcast ($uint<1>) _b1  )  ( $mux bad_packet ($bitcast ($uint<1>) _b0  )  ($bitcast ($uint<1>) _b0  ) )  ) 
    // ($bitcast ($uint<1>) _b1  )
    $constant $W[type_cast_208_wire_constant] : $int<1> := _b1// 1
    // ( $mux bad_packet ($bitcast ($uint<1>) _b0  )  ($bitcast ($uint<1>) _b0  ) ) 
    // ($bitcast ($uint<1>) _b0  )
    $constant $W[type_cast_211_wire_constant] : $int<1> := _b0// 0
    // ($bitcast ($uint<1>) _b0  )
    $constant $W[type_cast_213_wire_constant] : $int<1> := _b0// 0
    // block %load_buffer2%pckt_good_check_fast
    //  file .Aa/rx_from_mac.opt.aa, line 74
    // do-while statement  
    //  file .Aa/rx_from_mac.opt.aa, line 76
    // (tlast == 0 )
    $intermediate $W[EQ_u1_u1_201_wire] : $int<1>
    // merge-statement  
    //  file .Aa/rx_from_mac.opt.aa, line 78
    // 			$phi intm_data := 			  mac_data $on   $entry 			  mac_data $on   $loopback 
    // type of target is $uint<37>
    //  file .Aa/rx_from_mac.opt.aa, line 79
    // mac_data
    $W[RPIPE_mac_data_147_wire] : $int<37>
    // mac_data
    $W[RPIPE_mac_data_148_wire] : $int<37>
    // intm_data
    $W[intm_data_145] : $int<37>
    // 			$phi buf_ptr := 			  ($bitcast ($uint<10>) _b0  ) $on   $entry 			  next_buf_ptr $on   $loopback 
    // type of target is $uint<10>
    //  file .Aa/rx_from_mac.opt.aa, line 81
    $W[next_buf_ptr_197_153_buffered] : $int<10>
    // buf_ptr
    $W[buf_ptr_149] : $int<10>
    // 			$volatile tlast := ( $slice intm_data 36 36 )  $buffering 1
    //  file .Aa/rx_from_mac.opt.aa, line 84
    // tlast
    $W[tlast_158] : $int<1>
    // 			$volatile tdata := ( $slice intm_data 35 4 )  $buffering 1
    //  file .Aa/rx_from_mac.opt.aa, line 85
    // tdata
    $W[tdata_162] : $int<32>
    // 			$volatile tkeep := ( $slice intm_data 3 0 )  $buffering 1
    //  file .Aa/rx_from_mac.opt.aa, line 86
    // tkeep
    $W[tkeep_166] : $int<4>
    // 			$volatile bad_packet := (((tlast == 1 ) & (tdata == _hFFFFFFFF )) & (tkeep == 0 )) $buffering 1
    //  file .Aa/rx_from_mac.opt.aa, line 87
    // (tlast == 1 )
    $intermediate $W[EQ_u1_u1_170_wire] : $int<1>
    // (tdata == _hFFFFFFFF )
    $intermediate $W[EQ_u32_u1_173_wire] : $int<1>
    // ((tlast == 1 ) & (tdata == _hFFFFFFFF ))
    $intermediate $W[AND_u1_u1_174_wire] : $int<1>
    // (tkeep == 0 )
    $intermediate $W[EQ_u4_u1_177_wire] : $int<1>
    // bad_packet
    $W[bad_packet_179] : $int<1>
    // 			$volatile good_packet := ((tlast == 1 ) & (tkeep != 0 )) $buffering 1
    //  file .Aa/rx_from_mac.opt.aa, line 88
    // (tlast == 1 )
    $intermediate $W[EQ_u1_u1_183_wire] : $int<1>
    // (tkeep != 0 )
    $intermediate $W[NEQ_u4_u1_186_wire] : $int<1>
    // good_packet
    $W[good_packet_188] : $int<1>
    // 			buffer_2[buf_ptr] := intm_data $buffering 1// bits of buffering = 37. 
    //  file .Aa/rx_from_mac.opt.aa, line 89
    // buffer_2[buf_ptr]
    $intermediate $W[R_buf_ptr_189_resized] : $int<10>
    $intermediate $W[R_buf_ptr_189_scaled] : $int<10>
    $intermediate $W[array_obj_ref_190_final_offset] : $int<10>
    $intermediate $W[array_obj_ref_190_root_address] : $int<10>
    $W[array_obj_ref_190_word_address_0] : $pointer<memory_space_1>
    $W[array_obj_ref_190_data_0] : $int<37>
    // 			$volatile next_buf_ptr := (buf_ptr + 1 ) $buffering 1
    //  file .Aa/rx_from_mac.opt.aa, line 90
    // next_buf_ptr
    $W[next_buf_ptr_197] : $int<10>
    // 		$volatile next_buf_ptr_out := next_buf_ptr $buffering 1
    //  file .Aa/rx_from_mac.opt.aa, line 92
    // next_buf_ptr_out
    // 		$volatile pckt_status := ( $mux good_packet ($bitcast ($uint<1>) _b1  )  ( $mux bad_packet ($bitcast ($uint<1>) _b0  )  ($bitcast ($uint<1>) _b0  ) )  )  $buffering 1
    //  file .Aa/rx_from_mac.opt.aa, line 93
    // ( $mux bad_packet ($bitcast ($uint<1>) _b0  )  ($bitcast ($uint<1>) _b0  ) ) 
    $intermediate $W[MUX_214_wire] : $int<1>
    // pckt_status
    // datapath-instances for block %load_buffer2%pckt_good_check_fast
    //  file .Aa/rx_from_mac.opt.aa, line 74
    // datapath-instances for do-while  
    //  file .Aa/rx_from_mac.opt.aa, line 76
    // (tlast == 0 )
    ==[EQ_u1_u1_201_inst] (tlast_158 konst_200_wire_constant) (EQ_u1_u1_201_wire)   $flowthrough 
    $delay EQ_u1_u1_201_inst 0
    ==0? [do_while_stmt_143_branch] (EQ_u1_u1_201_wire)
    $flowthrough
    // data-path instances for merge  
    //  file .Aa/rx_from_mac.opt.aa, line 78
    // 			$phi intm_data := 			  mac_data $on   $entry 			  mac_data $on   $loopback 
    // type of target is $uint<37>
    //  file .Aa/rx_from_mac.opt.aa, line 79
    // mac_data
    $ioport $in [RPIPE_mac_data_147_inst] (mac_data) (RPIPE_mac_data_147_wire)  $fullrate 
    $buffering $out RPIPE_mac_data_147_inst RPIPE_mac_data_147_wire 1
    // mac_data
    $ioport $in [RPIPE_mac_data_148_inst] (mac_data) (RPIPE_mac_data_148_wire)  $fullrate 
    $buffering $out RPIPE_mac_data_148_inst RPIPE_mac_data_148_wire 1
    # $phi [phi_stmt_145] (RPIPE_mac_data_147_wire RPIPE_mac_data_148_wire) ( intm_data_145 ) $fullrate
    // $buffering  $out phi_stmt_145 intm_data_145 2
    // 			$phi buf_ptr := 			  ($bitcast ($uint<10>) _b0  ) $on   $entry 			  next_buf_ptr $on   $loopback 
    // type of target is $uint<10>
    //  file .Aa/rx_from_mac.opt.aa, line 81
    # := [next_buf_ptr_197_153_buf] (next_buf_ptr_197) (next_buf_ptr_197_153_buffered)     $fullrate
    $buffering $out next_buf_ptr_197_153_buf next_buf_ptr_197_153_buffered  1
    # $phi [phi_stmt_149] (type_cast_152_wire_constant next_buf_ptr_197_153_buffered) ( buf_ptr_149 ) $fullrate
    // $buffering  $out phi_stmt_149 buf_ptr_149 2
    // 			$volatile tlast := ( $slice intm_data 36 36 )  $buffering 1
    //  file .Aa/rx_from_mac.opt.aa, line 84
    // ( $slice intm_data 36 36 ) 
    [:] [slice_157_inst] (intm_data_145 36 36) (tlast_158)  $flowthrough
    $delay slice_157_inst 0
    // 			$volatile tdata := ( $slice intm_data 35 4 )  $buffering 1
    //  file .Aa/rx_from_mac.opt.aa, line 85
    // ( $slice intm_data 35 4 ) 
    [:] [slice_161_inst] (intm_data_145 35 4) (tdata_162)  $flowthrough
    $delay slice_161_inst 0
    // 			$volatile tkeep := ( $slice intm_data 3 0 )  $buffering 1
    //  file .Aa/rx_from_mac.opt.aa, line 86
    // ( $slice intm_data 3 0 ) 
    [:] [slice_165_inst] (intm_data_145 3 0) (tkeep_166)  $flowthrough
    $delay slice_165_inst 0
    // 			$volatile bad_packet := (((tlast == 1 ) & (tdata == _hFFFFFFFF )) & (tkeep == 0 )) $buffering 1
    //  file .Aa/rx_from_mac.opt.aa, line 87
    // (tlast == 1 )
    ==[EQ_u1_u1_170_inst] (tlast_158 konst_169_wire_constant) (EQ_u1_u1_170_wire)   $flowthrough 
    $delay EQ_u1_u1_170_inst 0
    // (tdata == _hFFFFFFFF )
    ==[EQ_u32_u1_173_inst] (tdata_162 konst_172_wire_constant) (EQ_u32_u1_173_wire)   $flowthrough 
    $delay EQ_u32_u1_173_inst 0
    // ((tlast == 1 ) & (tdata == _hFFFFFFFF ))
    &[AND_u1_u1_174_inst] (EQ_u1_u1_170_wire EQ_u32_u1_173_wire) (AND_u1_u1_174_wire)   $flowthrough 
    $delay AND_u1_u1_174_inst 0
    // (tkeep == 0 )
    ==[EQ_u4_u1_177_inst] (tkeep_166 konst_176_wire_constant) (EQ_u4_u1_177_wire)   $flowthrough 
    $delay EQ_u4_u1_177_inst 0
    // (((tlast == 1 ) & (tdata == _hFFFFFFFF )) & (tkeep == 0 ))
    &[AND_u1_u1_178_inst] (AND_u1_u1_174_wire EQ_u4_u1_177_wire) (bad_packet_179)   $flowthrough 
    $delay AND_u1_u1_178_inst 0
    // 			$volatile good_packet := ((tlast == 1 ) & (tkeep != 0 )) $buffering 1
    //  file .Aa/rx_from_mac.opt.aa, line 88
    // (tlast == 1 )
    ==[EQ_u1_u1_183_inst] (tlast_158 konst_182_wire_constant) (EQ_u1_u1_183_wire)   $flowthrough 
    $delay EQ_u1_u1_183_inst 0
    // (tkeep != 0 )
    !=[NEQ_u4_u1_186_inst] (tkeep_166 konst_185_wire_constant) (NEQ_u4_u1_186_wire)   $flowthrough 
    $delay NEQ_u4_u1_186_inst 0
    // ((tlast == 1 ) & (tkeep != 0 ))
    &[AND_u1_u1_187_inst] (EQ_u1_u1_183_wire NEQ_u4_u1_186_wire) (good_packet_188)   $flowthrough 
    $delay AND_u1_u1_187_inst 0
    // 			buffer_2[buf_ptr] := intm_data $buffering 1// bits of buffering = 37. 
    //  file .Aa/rx_from_mac.opt.aa, line 89
    // buffer_2[buf_ptr]
    &/ [array_obj_ref_190_index_0_resize] (buf_ptr_149) (R_buf_ptr_189_resized) 
    $flowthrough 
    &/ [array_obj_ref_190_index_0_rename] (R_buf_ptr_189_resized) (R_buf_ptr_189_scaled) 
    $flowthrough 
    &/ [array_obj_ref_190_index_offset] (R_buf_ptr_189_scaled) (array_obj_ref_190_final_offset) 
    $flowthrough 
    &/ [array_obj_ref_190_root_address_inst] (array_obj_ref_190_final_offset) (array_obj_ref_190_root_address) 
    $flowthrough 
    &/ [array_obj_ref_190_addr_0] (array_obj_ref_190_root_address) (array_obj_ref_190_word_address_0) 
    $flowthrough 
    $store [array_obj_ref_190_store_0] $to memory_space_1 (array_obj_ref_190_word_address_0 array_obj_ref_190_data_0) 
    $buffering  $in array_obj_ref_190_store_0 array_obj_ref_190_word_address_0 2
    $buffering  $in array_obj_ref_190_store_0 array_obj_ref_190_data_0 2
    $delay array_obj_ref_190_store_0 4
    &/ [array_obj_ref_190_gather_scatter] (intm_data_145) (array_obj_ref_190_data_0) 
    $flowthrough 
    // 			$volatile next_buf_ptr := (buf_ptr + 1 ) $buffering 1
    //  file .Aa/rx_from_mac.opt.aa, line 90
    // (buf_ptr + 1 )
    +[ADD_u10_u10_196_inst] (buf_ptr_149 konst_195_wire_constant) (next_buf_ptr_197)   $flowthrough 
    $delay ADD_u10_u10_196_inst 0
    // 		$volatile next_buf_ptr_out := next_buf_ptr $buffering 1
    //  file .Aa/rx_from_mac.opt.aa, line 92
    # := [W_next_buf_ptr_out_202_inst] (next_buf_ptr_197) (next_buf_ptr_out)    $flowthrough 
    // 		$volatile pckt_status := ( $mux good_packet ($bitcast ($uint<1>) _b1  )  ( $mux bad_packet ($bitcast ($uint<1>) _b0  )  ($bitcast ($uint<1>) _b0  ) )  )  $buffering 1
    //  file .Aa/rx_from_mac.opt.aa, line 93
    // ( $mux bad_packet ($bitcast ($uint<1>) _b0  )  ($bitcast ($uint<1>) _b0  ) ) 
    ? [MUX_214_inst] (bad_packet_179 type_cast_211_wire_constant type_cast_213_wire_constant) (MUX_214_wire)  $flowthrough
    // ( $mux good_packet ($bitcast ($uint<1>) _b1  )  ( $mux bad_packet ($bitcast ($uint<1>) _b0  )  ($bitcast ($uint<1>) _b0  ) )  ) 
    ? [MUX_215_inst] (good_packet_188 type_cast_208_wire_constant MUX_214_wire) (pckt_status)  $flowthrough
  }
  // end data-path
  // CP-DP links for do-while  do_while_stmt_143
  //  file .Aa/rx_from_mac.opt.aa, line 76
  phi_stmt_145 <=> (branch_block_stmt_142/do_while_stmt_143/do_while_stmt_143_loop_body/phi_stmt_145_entry_sample_req branch_block_stmt_142/do_while_stmt_143/do_while_stmt_143_loop_body/phi_stmt_145_loopback_sample_req) (branch_block_stmt_142/do_while_stmt_143/do_while_stmt_143_loop_body/phi_stmt_145_phi_mux_ack)
  // mac_data
  RPIPE_mac_data_147_inst <=> (branch_block_stmt_142/do_while_stmt_143/do_while_stmt_143_loop_body/RPIPE_mac_data_147_Sample/rr branch_block_stmt_142/do_while_stmt_143/do_while_stmt_143_loop_body/RPIPE_mac_data_147_Update/cr) (branch_block_stmt_142/do_while_stmt_143/do_while_stmt_143_loop_body/RPIPE_mac_data_147_Sample/ra branch_block_stmt_142/do_while_stmt_143/do_while_stmt_143_loop_body/RPIPE_mac_data_147_Update/ca)
  // mac_data
  RPIPE_mac_data_148_inst <=> (branch_block_stmt_142/do_while_stmt_143/do_while_stmt_143_loop_body/RPIPE_mac_data_148_Sample/rr branch_block_stmt_142/do_while_stmt_143/do_while_stmt_143_loop_body/RPIPE_mac_data_148_Update/cr) (branch_block_stmt_142/do_while_stmt_143/do_while_stmt_143_loop_body/RPIPE_mac_data_148_Sample/ra branch_block_stmt_142/do_while_stmt_143/do_while_stmt_143_loop_body/RPIPE_mac_data_148_Update/ca)
  phi_stmt_149 <=> (branch_block_stmt_142/do_while_stmt_143/do_while_stmt_143_loop_body/phi_stmt_149_entry_sample_req branch_block_stmt_142/do_while_stmt_143/do_while_stmt_143_loop_body/phi_stmt_149_loopback_sample_req) (branch_block_stmt_142/do_while_stmt_143/do_while_stmt_143_loop_body/phi_stmt_149_phi_mux_ack)
  next_buf_ptr_197_153_buf <=> (branch_block_stmt_142/do_while_stmt_143/do_while_stmt_143_loop_body/R_next_buf_ptr_153_Sample/req branch_block_stmt_142/do_while_stmt_143/do_while_stmt_143_loop_body/R_next_buf_ptr_153_Update/req) (branch_block_stmt_142/do_while_stmt_143/do_while_stmt_143_loop_body/R_next_buf_ptr_153_Sample/ack branch_block_stmt_142/do_while_stmt_143/do_while_stmt_143_loop_body/R_next_buf_ptr_153_Update/ack)
  // 			$volatile tlast := ( $slice intm_data 36 36 )  $buffering 1
  //  file .Aa/rx_from_mac.opt.aa, line 84
  // intm_data
  // 			$volatile tdata := ( $slice intm_data 35 4 )  $buffering 1
  //  file .Aa/rx_from_mac.opt.aa, line 85
  // intm_data
  // 			$volatile tkeep := ( $slice intm_data 3 0 )  $buffering 1
  //  file .Aa/rx_from_mac.opt.aa, line 86
  // intm_data
  // 			$volatile bad_packet := (((tlast == 1 ) & (tdata == _hFFFFFFFF )) & (tkeep == 0 )) $buffering 1
  //  file .Aa/rx_from_mac.opt.aa, line 87
  // (((tlast == 1 ) & (tdata == _hFFFFFFFF )) & (tkeep == 0 ))
  // ((tlast == 1 ) & (tdata == _hFFFFFFFF ))
  // (tlast == 1 )
  // tlast
  // (tdata == _hFFFFFFFF )
  // tdata
  // (tkeep == 0 )
  // tkeep
  // 			$volatile good_packet := ((tlast == 1 ) & (tkeep != 0 )) $buffering 1
  //  file .Aa/rx_from_mac.opt.aa, line 88
  // ((tlast == 1 ) & (tkeep != 0 ))
  // (tlast == 1 )
  // tlast
  // (tkeep != 0 )
  // tkeep
  // 			buffer_2[buf_ptr] := intm_data $buffering 1// bits of buffering = 37. 
  //  file .Aa/rx_from_mac.opt.aa, line 89
  // intm_data
  // buf_ptr
  array_obj_ref_190_index_0_resize <=> (branch_block_stmt_142/do_while_stmt_143/do_while_stmt_143_loop_body/array_obj_ref_190_index_resize_0/index_resize_req) (branch_block_stmt_142/do_while_stmt_143/do_while_stmt_143_loop_body/array_obj_ref_190_index_resize_0/index_resize_ack)
  array_obj_ref_190_index_0_rename <=> (branch_block_stmt_142/do_while_stmt_143/do_while_stmt_143_loop_body/array_obj_ref_190_index_scale_0/scale_rename_req) (branch_block_stmt_142/do_while_stmt_143/do_while_stmt_143_loop_body/array_obj_ref_190_index_scale_0/scale_rename_ack)
  array_obj_ref_190_index_offset <=> (branch_block_stmt_142/do_while_stmt_143/do_while_stmt_143_loop_body/array_obj_ref_190_final_index_sum_regn/req) (branch_block_stmt_142/do_while_stmt_143/do_while_stmt_143_loop_body/array_obj_ref_190_final_index_sum_regn/ack)
  array_obj_ref_190_root_address_inst <=> (branch_block_stmt_142/do_while_stmt_143/do_while_stmt_143_loop_body/array_obj_ref_190_base_plus_offset/sum_rename_req) (branch_block_stmt_142/do_while_stmt_143/do_while_stmt_143_loop_body/array_obj_ref_190_base_plus_offset/sum_rename_ack)
  array_obj_ref_190_addr_0 <=> (branch_block_stmt_142/do_while_stmt_143/do_while_stmt_143_loop_body/array_obj_ref_190_word_addrgen/root_register_req) (branch_block_stmt_142/do_while_stmt_143/do_while_stmt_143_loop_body/array_obj_ref_190_word_addrgen/root_register_ack)
  array_obj_ref_190_gather_scatter <=> (branch_block_stmt_142/do_while_stmt_143/do_while_stmt_143_loop_body/array_obj_ref_190_Sample/array_obj_ref_190_Split/split_req) (branch_block_stmt_142/do_while_stmt_143/do_while_stmt_143_loop_body/array_obj_ref_190_Sample/array_obj_ref_190_Split/split_ack)
  array_obj_ref_190_store_0 <=> (branch_block_stmt_142/do_while_stmt_143/do_while_stmt_143_loop_body/array_obj_ref_190_Sample/word_access_start/word_0/rr branch_block_stmt_142/do_while_stmt_143/do_while_stmt_143_loop_body/array_obj_ref_190_Update/word_access_complete/word_0/cr) (branch_block_stmt_142/do_while_stmt_143/do_while_stmt_143_loop_body/array_obj_ref_190_Sample/word_access_start/word_0/ra branch_block_stmt_142/do_while_stmt_143/do_while_stmt_143_loop_body/array_obj_ref_190_Update/word_access_complete/word_0/ca)
  // 			$volatile next_buf_ptr := (buf_ptr + 1 ) $buffering 1
  //  file .Aa/rx_from_mac.opt.aa, line 90
  // (buf_ptr + 1 )
  // buf_ptr
  // (tlast == 0 )
  // tlast
  do_while_stmt_143_branch <=> (branch_block_stmt_142/do_while_stmt_143/do_while_stmt_143_loop_body/condition_evaluated) (branch_block_stmt_142/do_while_stmt_143/loop_exit/ack branch_block_stmt_142/do_while_stmt_143/loop_taken/ack)
  // 		$volatile next_buf_ptr_out := next_buf_ptr $buffering 1
  //  file .Aa/rx_from_mac.opt.aa, line 92
  // next_buf_ptr
  // 		$volatile pckt_status := ( $mux good_packet ($bitcast ($uint<1>) _b1  )  ( $mux bad_packet ($bitcast ($uint<1>) _b0  )  ($bitcast ($uint<1>) _b0  ) )  )  $buffering 1
  //  file .Aa/rx_from_mac.opt.aa, line 93
  // good_packet
  // bad_packet
  // ( $mux bad_packet ($bitcast ($uint<1>) _b0  )  ($bitcast ($uint<1>) _b0  ) ) 
  // ( $mux good_packet ($bitcast ($uint<1>) _b1  )  ( $mux bad_packet ($bitcast ($uint<1>) _b0  )  ($bitcast ($uint<1>) _b0  ) )  ) 
}
$volatile $module [nextDESTMAC] 
{
  $in LSTATE:$int<3>
  // can point into 
  DESTMAC:$int<48>
  // can point into 
  RX:$int<37>
  // can point into 
  $out nDESTMAC:$int<48>
  // can point into 
  // pipe-declarations for block %nextDESTMAC
  //  file .Aa/rx_from_mac.opt.aa, line 96
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    // Volatile! CP is left blank 
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %nextDESTMAC
    //  file .Aa/rx_from_mac.opt.aa, line 96
    // S0
    $constant $W[R_S0_227_wire_constant] : $int<3> := _b000// 0
    // S1
    $constant $W[R_S1_232_wire_constant] : $int<3> := _b001// 1
    // ( $mux S0_state ($bitcast ($uint<48>) ( $slice RX 35 4 )  )  _b0  ) 
    // _b0 
    $constant $W[konst_247_wire_constant] : $int<48> := _b000000000000000000000000000000000000000000000000// 0
    // ( $mux S1_state (( $slice RX 19 4 )  && ( $slice DESTMAC 31 0 ) )  _b0  ) 
    // _b0 
    $constant $W[konst_255_wire_constant] : $int<48> := _b000000000000000000000000000000000000000000000000// 0
    // ( $mux not_both DESTMAC  _b0  ) 
    // _b0 
    $constant $W[konst_260_wire_constant] : $int<48> := _b000000000000000000000000000000000000000000000000// 0
    // 	$volatile S0_state := (LSTATE == S0) $buffering 1
    //  file .Aa/rx_from_mac.opt.aa, line 101
    // S0_state
    $W[S0_state_229] : $int<1>
    // 	$volatile S1_state := (LSTATE == S1) $buffering 1
    //  file .Aa/rx_from_mac.opt.aa, line 102
    // S1_state
    $W[S1_state_234] : $int<1>
    // 	$volatile not_both := (( ~ S0_state ) & ( ~ S1_state )) $buffering 1
    //  file .Aa/rx_from_mac.opt.aa, line 103
    // ( ~ S0_state )
    $intermediate $W[NOT_u1_u1_237_wire] : $int<1>
    // ( ~ S1_state )
    $intermediate $W[NOT_u1_u1_239_wire] : $int<1>
    // not_both
    $W[not_both_241] : $int<1>
    // 	nDESTMAC := ((( $mux S0_state ($bitcast ($uint<48>) ( $slice RX 35 4 )  )  _b0  )  | ( $mux S1_state (( $slice RX 19 4 )  && ( $slice DESTMAC 31 0 ) )  _b0  ) ) | ( $mux not_both DESTMAC  _b0  ) ) $buffering 1
    //  file .Aa/rx_from_mac.opt.aa, line 104
    // ( $slice RX 35 4 ) 
    $intermediate $W[slice_245_wire] : $int<32>
    // ($bitcast ($uint<48>) ( $slice RX 35 4 )  )
    $intermediate $W[type_cast_246_wire] : $int<48>
    // ( $mux S0_state ($bitcast ($uint<48>) ( $slice RX 35 4 )  )  _b0  ) 
    $intermediate $W[MUX_248_wire] : $int<48>
    // ( $slice RX 19 4 ) 
    $intermediate $W[slice_251_wire] : $int<16>
    // ( $slice DESTMAC 31 0 ) 
    $intermediate $W[slice_253_wire] : $int<32>
    // (( $slice RX 19 4 )  && ( $slice DESTMAC 31 0 ) )
    $intermediate $W[CONCAT_u16_u48_254_wire] : $int<48>
    // ( $mux S1_state (( $slice RX 19 4 )  && ( $slice DESTMAC 31 0 ) )  _b0  ) 
    $intermediate $W[MUX_256_wire] : $int<48>
    // (( $mux S0_state ($bitcast ($uint<48>) ( $slice RX 35 4 )  )  _b0  )  | ( $mux S1_state (( $slice RX 19 4 )  && ( $slice DESTMAC 31 0 ) )  _b0  ) )
    $intermediate $W[OR_u48_u48_257_wire] : $int<48>
    // ( $mux not_both DESTMAC  _b0  ) 
    $intermediate $W[MUX_261_wire] : $int<48>
    // nDESTMAC
    // 	$volatile S0_state := (LSTATE == S0) $buffering 1
    //  file .Aa/rx_from_mac.opt.aa, line 101
    // (LSTATE == S0)
    ==[EQ_u3_u1_228_inst] (LSTATE R_S0_227_wire_constant) (S0_state_229)   $flowthrough 
    $delay EQ_u3_u1_228_inst 0
    // 	$volatile S1_state := (LSTATE == S1) $buffering 1
    //  file .Aa/rx_from_mac.opt.aa, line 102
    // (LSTATE == S1)
    ==[EQ_u3_u1_233_inst] (LSTATE R_S1_232_wire_constant) (S1_state_234)   $flowthrough 
    $delay EQ_u3_u1_233_inst 0
    // 	$volatile not_both := (( ~ S0_state ) & ( ~ S1_state )) $buffering 1
    //  file .Aa/rx_from_mac.opt.aa, line 103
    // ( ~ S0_state )
    ~ [NOT_u1_u1_237_inst] (S0_state_229) (NOT_u1_u1_237_wire)   $flowthrough
    $delay NOT_u1_u1_237_inst 0
    // ( ~ S1_state )
    ~ [NOT_u1_u1_239_inst] (S1_state_234) (NOT_u1_u1_239_wire)   $flowthrough
    $delay NOT_u1_u1_239_inst 0
    // (( ~ S0_state ) & ( ~ S1_state ))
    &[AND_u1_u1_240_inst] (NOT_u1_u1_237_wire NOT_u1_u1_239_wire) (not_both_241)   $flowthrough 
    $delay AND_u1_u1_240_inst 0
    // 	nDESTMAC := ((( $mux S0_state ($bitcast ($uint<48>) ( $slice RX 35 4 )  )  _b0  )  | ( $mux S1_state (( $slice RX 19 4 )  && ( $slice DESTMAC 31 0 ) )  _b0  ) ) | ( $mux not_both DESTMAC  _b0  ) ) $buffering 1
    //  file .Aa/rx_from_mac.opt.aa, line 104
    // ( $slice RX 35 4 ) 
    [:] [slice_245_inst] (RX 35 4) (slice_245_wire)  $flowthrough
    $delay slice_245_inst 0
    // ($bitcast ($uint<48>) ( $slice RX 35 4 )  )
    # := [type_cast_246_inst] (slice_245_wire) (type_cast_246_wire)   $flowthrough
    $delay type_cast_246_inst 0
    // ( $mux S0_state ($bitcast ($uint<48>) ( $slice RX 35 4 )  )  _b0  ) 
    ? [MUX_248_inst] (S0_state_229 type_cast_246_wire konst_247_wire_constant) (MUX_248_wire)  $flowthrough
    // ( $slice RX 19 4 ) 
    [:] [slice_251_inst] (RX 19 4) (slice_251_wire)  $flowthrough
    $delay slice_251_inst 0
    // ( $slice DESTMAC 31 0 ) 
    [:] [slice_253_inst] (DESTMAC 31 0) (slice_253_wire)  $flowthrough
    $delay slice_253_inst 0
    // (( $slice RX 19 4 )  && ( $slice DESTMAC 31 0 ) )
    &&[CONCAT_u16_u48_254_inst] (slice_251_wire slice_253_wire) (CONCAT_u16_u48_254_wire)   $flowthrough 
    $delay CONCAT_u16_u48_254_inst 0
    // ( $mux S1_state (( $slice RX 19 4 )  && ( $slice DESTMAC 31 0 ) )  _b0  ) 
    ? [MUX_256_inst] (S1_state_234 CONCAT_u16_u48_254_wire konst_255_wire_constant) (MUX_256_wire)  $flowthrough
    // (( $mux S0_state ($bitcast ($uint<48>) ( $slice RX 35 4 )  )  _b0  )  | ( $mux S1_state (( $slice RX 19 4 )  && ( $slice DESTMAC 31 0 ) )  _b0  ) )
    |[OR_u48_u48_257_inst] (MUX_248_wire MUX_256_wire) (OR_u48_u48_257_wire)   $flowthrough 
    $delay OR_u48_u48_257_inst 0
    // ( $mux not_both DESTMAC  _b0  ) 
    ? [MUX_261_inst] (not_both_241 DESTMAC konst_260_wire_constant) (MUX_261_wire)  $flowthrough
    // ((( $mux S0_state ($bitcast ($uint<48>) ( $slice RX 35 4 )  )  _b0  )  | ( $mux S1_state (( $slice RX 19 4 )  && ( $slice DESTMAC 31 0 ) )  _b0  ) ) | ( $mux not_both DESTMAC  _b0  ) )
    |[OR_u48_u48_262_inst] (OR_u48_u48_257_wire MUX_261_wire) (nDESTMAC)   
    $buffering  $out OR_u48_u48_262_inst nDESTMAC 1
    $delay OR_u48_u48_262_inst 1
  }
  // end data-path
  // Volatile module.. no links.
}
$volatile $module [nextLSTATE] 
{
  $in RX:$int<37>
  // can point into 
  LSTATE:$int<3>
  // can point into 
  HLEN:$int<4>
  // can point into 
  PLEN:$int<16>
  // can point into 
  $out nLSTATE:$int<3>
  // can point into 
  nHLEN:$int<4>
  // can point into 
  nPLEN:$int<16>
  // can point into 
  // pipe-declarations for block %nextLSTATE
  //  file .Aa/rx_from_mac.opt.aa, line 106
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    // Volatile! CP is left blank 
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %nextLSTATE
    //  file .Aa/rx_from_mac.opt.aa, line 106
    // H
    $constant $W[R_H_275_wire_constant] : $int<3> := _b100// 4
    // 2 
    $constant $W[konst_278_wire_constant] : $int<16> := _b0000000000000010// 2
    // 1 
    $constant $W[konst_282_wire_constant] : $int<4> := _b0001// 1
    // B
    $constant $W[R_B_288_wire_constant] : $int<3> := _b101// 5
    // 2 
    $constant $W[konst_291_wire_constant] : $int<16> := _b0000000000000010// 2
    // ( $mux (LSTATE == S0) S1  _b0  ) 
    // S0
    $constant $W[R_S0_297_wire_constant] : $int<3> := _b000// 0
    // S1
    $constant $W[R_S1_299_wire_constant] : $int<3> := _b001// 1
    // _b0 
    $constant $W[konst_300_wire_constant] : $int<3> := _b000// 0
    // ( $mux (LSTATE == S1) S2  _b0  ) 
    // S1
    $constant $W[R_S1_303_wire_constant] : $int<3> := _b001// 1
    // S2
    $constant $W[R_S2_305_wire_constant] : $int<3> := _b010// 2
    // _b0 
    $constant $W[konst_306_wire_constant] : $int<3> := _b000// 0
    // ( $mux (LSTATE == S2) S3  _b0  ) 
    // S2
    $constant $W[R_S2_310_wire_constant] : $int<3> := _b010// 2
    // S3
    $constant $W[R_S3_312_wire_constant] : $int<3> := _b011// 3
    // _b0 
    $constant $W[konst_313_wire_constant] : $int<3> := _b000// 0
    // ( $mux ((LSTATE == S3) | (HLEN > 1 )) H  _b0  ) 
    // S3
    $constant $W[R_S3_317_wire_constant] : $int<3> := _b011// 3
    // 1 
    $constant $W[konst_320_wire_constant] : $int<4> := _b0001// 1
    // H
    $constant $W[R_H_323_wire_constant] : $int<3> := _b100// 4
    // _b0 
    $constant $W[konst_324_wire_constant] : $int<3> := _b000// 0
    // ( $mux n_state_is_B B  _b0  ) 
    // B
    $constant $W[R_B_327_wire_constant] : $int<3> := _b101// 5
    // _b0 
    $constant $W[konst_328_wire_constant] : $int<3> := _b000// 0
    // ( $mux n_state_is_S0 S0  _b0  ) 
    // S0
    $constant $W[R_S0_332_wire_constant] : $int<3> := _b000// 0
    // _b0 
    $constant $W[konst_333_wire_constant] : $int<3> := _b000// 0
    // H
    $constant $W[R_H_340_wire_constant] : $int<3> := _b100// 4
    // ( $mux H_state ( $mux (LSTATE == S3) ( $slice RX 27 24 )   (HLEN - 1 ) )   HLEN ) 
    // ( $mux (LSTATE == S3) ( $slice RX 27 24 )   (HLEN - 1 ) ) 
    // S3
    $constant $W[R_S3_346_wire_constant] : $int<3> := _b011// 3
    // 1 
    $constant $W[konst_351_wire_constant] : $int<4> := _b0001// 1
    // B
    $constant $W[R_B_359_wire_constant] : $int<3> := _b101// 5
    // ( $mux (B_state | H_state) ( $mux (LSTATE == S3) ( $slice RX 19 4 )   (PLEN - 4 ) )   PLEN ) 
    // ( $mux (LSTATE == S3) ( $slice RX 19 4 )   (PLEN - 4 ) ) 
    // S3
    $constant $W[R_S3_367_wire_constant] : $int<3> := _b011// 3
    // 4 
    $constant $W[konst_372_wire_constant] : $int<16> := _b0000000000000100// 4
    // 	$volatile n_state_is_B := (((LSTATE == H) | (PLEN > 2 )) & (HLEN <= 1 )) $buffering 1
    //  file .Aa/rx_from_mac.opt.aa, line 111
    // (LSTATE == H)
    $intermediate $W[EQ_u3_u1_276_wire] : $int<1>
    // (PLEN > 2 )
    $intermediate $W[UGT_u16_u1_279_wire] : $int<1>
    // ((LSTATE == H) | (PLEN > 2 ))
    $intermediate $W[OR_u1_u1_280_wire] : $int<1>
    // (HLEN <= 1 )
    $intermediate $W[ULE_u4_u1_283_wire] : $int<1>
    // n_state_is_B
    $W[n_state_is_B_285] : $int<1>
    // 	$volatile n_state_is_S0 := ((LSTATE == B) & (PLEN <= 2 )) $buffering 1
    //  file .Aa/rx_from_mac.opt.aa, line 112
    // (LSTATE == B)
    $intermediate $W[EQ_u3_u1_289_wire] : $int<1>
    // (PLEN <= 2 )
    $intermediate $W[ULE_u16_u1_292_wire] : $int<1>
    // n_state_is_S0
    $W[n_state_is_S0_294] : $int<1>
    // 	nLSTATE := (((( $mux (LSTATE == S0) S1  _b0  )  | ( $mux (LSTATE == S1) S2  _b0  ) ) | ( $mux (LSTATE == S2) S3  _b0  ) ) | ((( $mux ((LSTATE == S3) | (HLEN > 1 )) H  _b0  )  | ( $mux n_state_is_B B  _b0  ) ) | ( $mux n_state_is_S0 S0  _b0  ) )) $buffering 1
    //  file .Aa/rx_from_mac.opt.aa, line 113
    // (LSTATE == S0)
    $intermediate $W[EQ_u3_u1_298_wire] : $int<1>
    // ( $mux (LSTATE == S0) S1  _b0  ) 
    $intermediate $W[MUX_301_wire] : $int<3>
    // (LSTATE == S1)
    $intermediate $W[EQ_u3_u1_304_wire] : $int<1>
    // ( $mux (LSTATE == S1) S2  _b0  ) 
    $intermediate $W[MUX_307_wire] : $int<3>
    // (( $mux (LSTATE == S0) S1  _b0  )  | ( $mux (LSTATE == S1) S2  _b0  ) )
    $intermediate $W[OR_u3_u3_308_wire] : $int<3>
    // (LSTATE == S2)
    $intermediate $W[EQ_u3_u1_311_wire] : $int<1>
    // ( $mux (LSTATE == S2) S3  _b0  ) 
    $intermediate $W[MUX_314_wire] : $int<3>
    // ((( $mux (LSTATE == S0) S1  _b0  )  | ( $mux (LSTATE == S1) S2  _b0  ) ) | ( $mux (LSTATE == S2) S3  _b0  ) )
    $intermediate $W[OR_u3_u3_315_wire] : $int<3>
    // (LSTATE == S3)
    $intermediate $W[EQ_u3_u1_318_wire] : $int<1>
    // (HLEN > 1 )
    $intermediate $W[UGT_u4_u1_321_wire] : $int<1>
    // ((LSTATE == S3) | (HLEN > 1 ))
    $intermediate $W[OR_u1_u1_322_wire] : $int<1>
    // ( $mux ((LSTATE == S3) | (HLEN > 1 )) H  _b0  ) 
    $intermediate $W[MUX_325_wire] : $int<3>
    // ( $mux n_state_is_B B  _b0  ) 
    $intermediate $W[MUX_329_wire] : $int<3>
    // (( $mux ((LSTATE == S3) | (HLEN > 1 )) H  _b0  )  | ( $mux n_state_is_B B  _b0  ) )
    $intermediate $W[OR_u3_u3_330_wire] : $int<3>
    // ( $mux n_state_is_S0 S0  _b0  ) 
    $intermediate $W[MUX_334_wire] : $int<3>
    // ((( $mux ((LSTATE == S3) | (HLEN > 1 )) H  _b0  )  | ( $mux n_state_is_B B  _b0  ) ) | ( $mux n_state_is_S0 S0  _b0  ) )
    $intermediate $W[OR_u3_u3_335_wire] : $int<3>
    // nLSTATE
    // 	$volatile H_state := (nLSTATE == H) $buffering 1
    //  file .Aa/rx_from_mac.opt.aa, line 114
    // H_state
    $W[H_state_342] : $int<1>
    // 	nHLEN := ( $mux H_state ( $mux (LSTATE == S3) ( $slice RX 27 24 )   (HLEN - 1 ) )   HLEN )  $buffering 1
    //  file .Aa/rx_from_mac.opt.aa, line 115
    // (LSTATE == S3)
    $intermediate $W[EQ_u3_u1_347_wire] : $int<1>
    // ( $slice RX 27 24 ) 
    $intermediate $W[slice_349_wire] : $int<4>
    // (HLEN - 1 )
    $intermediate $W[SUB_u4_u4_352_wire] : $int<4>
    // ( $mux (LSTATE == S3) ( $slice RX 27 24 )   (HLEN - 1 ) ) 
    $intermediate $W[MUX_353_wire] : $int<4>
    // nHLEN
    // 	$volatile B_state := (nLSTATE == B) $buffering 1
    //  file .Aa/rx_from_mac.opt.aa, line 116
    // B_state
    $W[B_state_361] : $int<1>
    // 	nPLEN := ( $mux (B_state | H_state) ( $mux (LSTATE == S3) ( $slice RX 19 4 )   (PLEN - 4 ) )   PLEN )  $buffering 1
    //  file .Aa/rx_from_mac.opt.aa, line 117
    // (B_state | H_state)
    $intermediate $W[OR_u1_u1_365_wire] : $int<1>
    // (LSTATE == S3)
    $intermediate $W[EQ_u3_u1_368_wire] : $int<1>
    // ( $slice RX 19 4 ) 
    $intermediate $W[slice_370_wire] : $int<16>
    // (PLEN - 4 )
    $intermediate $W[SUB_u16_u16_373_wire] : $int<16>
    // ( $mux (LSTATE == S3) ( $slice RX 19 4 )   (PLEN - 4 ) ) 
    $intermediate $W[MUX_374_wire] : $int<16>
    // nPLEN
    // 	$volatile n_state_is_B := (((LSTATE == H) | (PLEN > 2 )) & (HLEN <= 1 )) $buffering 1
    //  file .Aa/rx_from_mac.opt.aa, line 111
    // (LSTATE == H)
    ==[EQ_u3_u1_276_inst] (LSTATE R_H_275_wire_constant) (EQ_u3_u1_276_wire)   $flowthrough 
    $delay EQ_u3_u1_276_inst 0
    // (PLEN > 2 )
    >[UGT_u16_u1_279_inst] (PLEN konst_278_wire_constant) (UGT_u16_u1_279_wire)   $flowthrough 
    $delay UGT_u16_u1_279_inst 0
    // ((LSTATE == H) | (PLEN > 2 ))
    |[OR_u1_u1_280_inst] (EQ_u3_u1_276_wire UGT_u16_u1_279_wire) (OR_u1_u1_280_wire)   $flowthrough 
    $delay OR_u1_u1_280_inst 0
    // (HLEN <= 1 )
    <=[ULE_u4_u1_283_inst] (HLEN konst_282_wire_constant) (ULE_u4_u1_283_wire)   $flowthrough 
    $delay ULE_u4_u1_283_inst 0
    // (((LSTATE == H) | (PLEN > 2 )) & (HLEN <= 1 ))
    &[AND_u1_u1_284_inst] (OR_u1_u1_280_wire ULE_u4_u1_283_wire) (n_state_is_B_285)   $flowthrough 
    $delay AND_u1_u1_284_inst 0
    // 	$volatile n_state_is_S0 := ((LSTATE == B) & (PLEN <= 2 )) $buffering 1
    //  file .Aa/rx_from_mac.opt.aa, line 112
    // (LSTATE == B)
    ==[EQ_u3_u1_289_inst] (LSTATE R_B_288_wire_constant) (EQ_u3_u1_289_wire)   $flowthrough 
    $delay EQ_u3_u1_289_inst 0
    // (PLEN <= 2 )
    <=[ULE_u16_u1_292_inst] (PLEN konst_291_wire_constant) (ULE_u16_u1_292_wire)   $flowthrough 
    $delay ULE_u16_u1_292_inst 0
    // ((LSTATE == B) & (PLEN <= 2 ))
    &[AND_u1_u1_293_inst] (EQ_u3_u1_289_wire ULE_u16_u1_292_wire) (n_state_is_S0_294)   $flowthrough 
    $delay AND_u1_u1_293_inst 0
    // 	nLSTATE := (((( $mux (LSTATE == S0) S1  _b0  )  | ( $mux (LSTATE == S1) S2  _b0  ) ) | ( $mux (LSTATE == S2) S3  _b0  ) ) | ((( $mux ((LSTATE == S3) | (HLEN > 1 )) H  _b0  )  | ( $mux n_state_is_B B  _b0  ) ) | ( $mux n_state_is_S0 S0  _b0  ) )) $buffering 1
    //  file .Aa/rx_from_mac.opt.aa, line 113
    // (LSTATE == S0)
    ==[EQ_u3_u1_298_inst] (LSTATE R_S0_297_wire_constant) (EQ_u3_u1_298_wire)   $flowthrough 
    $delay EQ_u3_u1_298_inst 0
    // ( $mux (LSTATE == S0) S1  _b0  ) 
    ? [MUX_301_inst] (EQ_u3_u1_298_wire R_S1_299_wire_constant konst_300_wire_constant) (MUX_301_wire)  $flowthrough
    // (LSTATE == S1)
    ==[EQ_u3_u1_304_inst] (LSTATE R_S1_303_wire_constant) (EQ_u3_u1_304_wire)   $flowthrough 
    $delay EQ_u3_u1_304_inst 0
    // ( $mux (LSTATE == S1) S2  _b0  ) 
    ? [MUX_307_inst] (EQ_u3_u1_304_wire R_S2_305_wire_constant konst_306_wire_constant) (MUX_307_wire)  $flowthrough
    // (( $mux (LSTATE == S0) S1  _b0  )  | ( $mux (LSTATE == S1) S2  _b0  ) )
    |[OR_u3_u3_308_inst] (MUX_301_wire MUX_307_wire) (OR_u3_u3_308_wire)   $flowthrough 
    $delay OR_u3_u3_308_inst 0
    // (LSTATE == S2)
    ==[EQ_u3_u1_311_inst] (LSTATE R_S2_310_wire_constant) (EQ_u3_u1_311_wire)   $flowthrough 
    $delay EQ_u3_u1_311_inst 0
    // ( $mux (LSTATE == S2) S3  _b0  ) 
    ? [MUX_314_inst] (EQ_u3_u1_311_wire R_S3_312_wire_constant konst_313_wire_constant) (MUX_314_wire)  $flowthrough
    // ((( $mux (LSTATE == S0) S1  _b0  )  | ( $mux (LSTATE == S1) S2  _b0  ) ) | ( $mux (LSTATE == S2) S3  _b0  ) )
    |[OR_u3_u3_315_inst] (OR_u3_u3_308_wire MUX_314_wire) (OR_u3_u3_315_wire)   $flowthrough 
    $delay OR_u3_u3_315_inst 0
    // (LSTATE == S3)
    ==[EQ_u3_u1_318_inst] (LSTATE R_S3_317_wire_constant) (EQ_u3_u1_318_wire)   $flowthrough 
    $delay EQ_u3_u1_318_inst 0
    // (HLEN > 1 )
    >[UGT_u4_u1_321_inst] (HLEN konst_320_wire_constant) (UGT_u4_u1_321_wire)   $flowthrough 
    $delay UGT_u4_u1_321_inst 0
    // ((LSTATE == S3) | (HLEN > 1 ))
    |[OR_u1_u1_322_inst] (EQ_u3_u1_318_wire UGT_u4_u1_321_wire) (OR_u1_u1_322_wire)   $flowthrough 
    $delay OR_u1_u1_322_inst 0
    // ( $mux ((LSTATE == S3) | (HLEN > 1 )) H  _b0  ) 
    ? [MUX_325_inst] (OR_u1_u1_322_wire R_H_323_wire_constant konst_324_wire_constant) (MUX_325_wire)  $flowthrough
    // ( $mux n_state_is_B B  _b0  ) 
    ? [MUX_329_inst] (n_state_is_B_285 R_B_327_wire_constant konst_328_wire_constant) (MUX_329_wire)  $flowthrough
    // (( $mux ((LSTATE == S3) | (HLEN > 1 )) H  _b0  )  | ( $mux n_state_is_B B  _b0  ) )
    |[OR_u3_u3_330_inst] (MUX_325_wire MUX_329_wire) (OR_u3_u3_330_wire)   $flowthrough 
    $delay OR_u3_u3_330_inst 0
    // ( $mux n_state_is_S0 S0  _b0  ) 
    ? [MUX_334_inst] (n_state_is_S0_294 R_S0_332_wire_constant konst_333_wire_constant) (MUX_334_wire)  $flowthrough
    // ((( $mux ((LSTATE == S3) | (HLEN > 1 )) H  _b0  )  | ( $mux n_state_is_B B  _b0  ) ) | ( $mux n_state_is_S0 S0  _b0  ) )
    |[OR_u3_u3_335_inst] (OR_u3_u3_330_wire MUX_334_wire) (OR_u3_u3_335_wire)   $flowthrough 
    $delay OR_u3_u3_335_inst 0
    // (((( $mux (LSTATE == S0) S1  _b0  )  | ( $mux (LSTATE == S1) S2  _b0  ) ) | ( $mux (LSTATE == S2) S3  _b0  ) ) | ((( $mux ((LSTATE == S3) | (HLEN > 1 )) H  _b0  )  | ( $mux n_state_is_B B  _b0  ) ) | ( $mux n_state_is_S0 S0  _b0  ) ))
    |[OR_u3_u3_336_inst] (OR_u3_u3_315_wire OR_u3_u3_335_wire) (nLSTATE)   
    $buffering  $out OR_u3_u3_336_inst nLSTATE 1
    $delay OR_u3_u3_336_inst 1
    // 	$volatile H_state := (nLSTATE == H) $buffering 1
    //  file .Aa/rx_from_mac.opt.aa, line 114
    // (nLSTATE == H)
    ==[EQ_u3_u1_341_inst] (nLSTATE R_H_340_wire_constant) (H_state_342)   $flowthrough 
    $delay EQ_u3_u1_341_inst 0
    // 	nHLEN := ( $mux H_state ( $mux (LSTATE == S3) ( $slice RX 27 24 )   (HLEN - 1 ) )   HLEN )  $buffering 1
    //  file .Aa/rx_from_mac.opt.aa, line 115
    // (LSTATE == S3)
    ==[EQ_u3_u1_347_inst] (LSTATE R_S3_346_wire_constant) (EQ_u3_u1_347_wire)   $flowthrough 
    $delay EQ_u3_u1_347_inst 0
    // ( $slice RX 27 24 ) 
    [:] [slice_349_inst] (RX 27 24) (slice_349_wire)  $flowthrough
    $delay slice_349_inst 0
    // (HLEN - 1 )
    -[SUB_u4_u4_352_inst] (HLEN konst_351_wire_constant) (SUB_u4_u4_352_wire)   $flowthrough 
    $delay SUB_u4_u4_352_inst 0
    // ( $mux (LSTATE == S3) ( $slice RX 27 24 )   (HLEN - 1 ) ) 
    ? [MUX_353_inst] (EQ_u3_u1_347_wire slice_349_wire SUB_u4_u4_352_wire) (MUX_353_wire)  $flowthrough
    // ( $mux H_state ( $mux (LSTATE == S3) ( $slice RX 27 24 )   (HLEN - 1 ) )   HLEN ) 
    ? [MUX_355_inst] (H_state_342 MUX_353_wire HLEN) (nHLEN) 
    $buffering  $out MUX_355_inst nHLEN 1
    // 	$volatile B_state := (nLSTATE == B) $buffering 1
    //  file .Aa/rx_from_mac.opt.aa, line 116
    // (nLSTATE == B)
    ==[EQ_u3_u1_360_inst] (nLSTATE R_B_359_wire_constant) (B_state_361)   $flowthrough 
    $delay EQ_u3_u1_360_inst 0
    // 	nPLEN := ( $mux (B_state | H_state) ( $mux (LSTATE == S3) ( $slice RX 19 4 )   (PLEN - 4 ) )   PLEN )  $buffering 1
    //  file .Aa/rx_from_mac.opt.aa, line 117
    // (B_state | H_state)
    |[OR_u1_u1_365_inst] (B_state_361 H_state_342) (OR_u1_u1_365_wire)   $flowthrough 
    $delay OR_u1_u1_365_inst 0
    // (LSTATE == S3)
    ==[EQ_u3_u1_368_inst] (LSTATE R_S3_367_wire_constant) (EQ_u3_u1_368_wire)   $flowthrough 
    $delay EQ_u3_u1_368_inst 0
    // ( $slice RX 19 4 ) 
    [:] [slice_370_inst] (RX 19 4) (slice_370_wire)  $flowthrough
    $delay slice_370_inst 0
    // (PLEN - 4 )
    -[SUB_u16_u16_373_inst] (PLEN konst_372_wire_constant) (SUB_u16_u16_373_wire)   $flowthrough 
    $delay SUB_u16_u16_373_inst 0
    // ( $mux (LSTATE == S3) ( $slice RX 19 4 )   (PLEN - 4 ) ) 
    ? [MUX_374_inst] (EQ_u3_u1_368_wire slice_370_wire SUB_u16_u16_373_wire) (MUX_374_wire)  $flowthrough
    // ( $mux (B_state | H_state) ( $mux (LSTATE == S3) ( $slice RX 19 4 )   (PLEN - 4 ) )   PLEN ) 
    ? [MUX_376_inst] (OR_u1_u1_365_wire MUX_374_wire PLEN) (nPLEN) 
    $buffering  $out MUX_376_inst nPLEN 1
  }
  // end data-path
  // Volatile module.. no links.
}
$volatile $module [nextSRCMAC] 
{
  $in LSTATE:$int<3>
  // can point into 
  SRCMAC:$int<48>
  // can point into 
  RX:$int<37>
  // can point into 
  $out nSRCMAC:$int<48>
  // can point into 
  // pipe-declarations for block %nextSRCMAC
  //  file .Aa/rx_from_mac.opt.aa, line 119
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    // Volatile! CP is left blank 
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %nextSRCMAC
    //  file .Aa/rx_from_mac.opt.aa, line 119
    // S1
    $constant $W[R_S1_386_wire_constant] : $int<3> := _b001// 1
    // S2
    $constant $W[R_S2_391_wire_constant] : $int<3> := _b010// 2
    // ( $mux S1_state ($bitcast ($uint<48>) ( $slice RX 35 20 )  )  _b0  ) 
    // _b0 
    $constant $W[konst_406_wire_constant] : $int<48> := _b000000000000000000000000000000000000000000000000// 0
    // ( $mux S2_state (( $slice RX 35 4 )  && ( $slice SRCMAC 15 0 ) )  _b0  ) 
    // _b0 
    $constant $W[konst_414_wire_constant] : $int<48> := _b000000000000000000000000000000000000000000000000// 0
    // ( $mux not_both SRCMAC  _b0  ) 
    // _b0 
    $constant $W[konst_419_wire_constant] : $int<48> := _b000000000000000000000000000000000000000000000000// 0
    // 	$volatile S1_state := (LSTATE == S1) $buffering 1
    //  file .Aa/rx_from_mac.opt.aa, line 124
    // S1_state
    $W[S1_state_388] : $int<1>
    // 	$volatile S2_state := (LSTATE == S2) $buffering 1
    //  file .Aa/rx_from_mac.opt.aa, line 125
    // S2_state
    $W[S2_state_393] : $int<1>
    // 	$volatile not_both := (( ~ S2_state ) & ( ~ S2_state )) $buffering 1
    //  file .Aa/rx_from_mac.opt.aa, line 126
    // ( ~ S2_state )
    $intermediate $W[NOT_u1_u1_396_wire] : $int<1>
    // ( ~ S2_state )
    $intermediate $W[NOT_u1_u1_398_wire] : $int<1>
    // not_both
    $W[not_both_400] : $int<1>
    // 	nSRCMAC := ((( $mux S1_state ($bitcast ($uint<48>) ( $slice RX 35 20 )  )  _b0  )  | ( $mux S2_state (( $slice RX 35 4 )  && ( $slice SRCMAC 15 0 ) )  _b0  ) ) | ( $mux not_both SRCMAC  _b0  ) ) $buffering 1
    //  file .Aa/rx_from_mac.opt.aa, line 127
    // ( $slice RX 35 20 ) 
    $intermediate $W[slice_404_wire] : $int<16>
    // ($bitcast ($uint<48>) ( $slice RX 35 20 )  )
    $intermediate $W[type_cast_405_wire] : $int<48>
    // ( $mux S1_state ($bitcast ($uint<48>) ( $slice RX 35 20 )  )  _b0  ) 
    $intermediate $W[MUX_407_wire] : $int<48>
    // ( $slice RX 35 4 ) 
    $intermediate $W[slice_410_wire] : $int<32>
    // ( $slice SRCMAC 15 0 ) 
    $intermediate $W[slice_412_wire] : $int<16>
    // (( $slice RX 35 4 )  && ( $slice SRCMAC 15 0 ) )
    $intermediate $W[CONCAT_u32_u48_413_wire] : $int<48>
    // ( $mux S2_state (( $slice RX 35 4 )  && ( $slice SRCMAC 15 0 ) )  _b0  ) 
    $intermediate $W[MUX_415_wire] : $int<48>
    // (( $mux S1_state ($bitcast ($uint<48>) ( $slice RX 35 20 )  )  _b0  )  | ( $mux S2_state (( $slice RX 35 4 )  && ( $slice SRCMAC 15 0 ) )  _b0  ) )
    $intermediate $W[OR_u48_u48_416_wire] : $int<48>
    // ( $mux not_both SRCMAC  _b0  ) 
    $intermediate $W[MUX_420_wire] : $int<48>
    // nSRCMAC
    // 	$volatile S1_state := (LSTATE == S1) $buffering 1
    //  file .Aa/rx_from_mac.opt.aa, line 124
    // (LSTATE == S1)
    ==[EQ_u3_u1_387_inst] (LSTATE R_S1_386_wire_constant) (S1_state_388)   $flowthrough 
    $delay EQ_u3_u1_387_inst 0
    // 	$volatile S2_state := (LSTATE == S2) $buffering 1
    //  file .Aa/rx_from_mac.opt.aa, line 125
    // (LSTATE == S2)
    ==[EQ_u3_u1_392_inst] (LSTATE R_S2_391_wire_constant) (S2_state_393)   $flowthrough 
    $delay EQ_u3_u1_392_inst 0
    // 	$volatile not_both := (( ~ S2_state ) & ( ~ S2_state )) $buffering 1
    //  file .Aa/rx_from_mac.opt.aa, line 126
    // ( ~ S2_state )
    ~ [NOT_u1_u1_396_inst] (S2_state_393) (NOT_u1_u1_396_wire)   $flowthrough
    $delay NOT_u1_u1_396_inst 0
    // ( ~ S2_state )
    ~ [NOT_u1_u1_398_inst] (S2_state_393) (NOT_u1_u1_398_wire)   $flowthrough
    $delay NOT_u1_u1_398_inst 0
    // (( ~ S2_state ) & ( ~ S2_state ))
    &[AND_u1_u1_399_inst] (NOT_u1_u1_396_wire NOT_u1_u1_398_wire) (not_both_400)   $flowthrough 
    $delay AND_u1_u1_399_inst 0
    // 	nSRCMAC := ((( $mux S1_state ($bitcast ($uint<48>) ( $slice RX 35 20 )  )  _b0  )  | ( $mux S2_state (( $slice RX 35 4 )  && ( $slice SRCMAC 15 0 ) )  _b0  ) ) | ( $mux not_both SRCMAC  _b0  ) ) $buffering 1
    //  file .Aa/rx_from_mac.opt.aa, line 127
    // ( $slice RX 35 20 ) 
    [:] [slice_404_inst] (RX 35 20) (slice_404_wire)  $flowthrough
    $delay slice_404_inst 0
    // ($bitcast ($uint<48>) ( $slice RX 35 20 )  )
    # := [type_cast_405_inst] (slice_404_wire) (type_cast_405_wire)   $flowthrough
    $delay type_cast_405_inst 0
    // ( $mux S1_state ($bitcast ($uint<48>) ( $slice RX 35 20 )  )  _b0  ) 
    ? [MUX_407_inst] (S1_state_388 type_cast_405_wire konst_406_wire_constant) (MUX_407_wire)  $flowthrough
    // ( $slice RX 35 4 ) 
    [:] [slice_410_inst] (RX 35 4) (slice_410_wire)  $flowthrough
    $delay slice_410_inst 0
    // ( $slice SRCMAC 15 0 ) 
    [:] [slice_412_inst] (SRCMAC 15 0) (slice_412_wire)  $flowthrough
    $delay slice_412_inst 0
    // (( $slice RX 35 4 )  && ( $slice SRCMAC 15 0 ) )
    &&[CONCAT_u32_u48_413_inst] (slice_410_wire slice_412_wire) (CONCAT_u32_u48_413_wire)   $flowthrough 
    $delay CONCAT_u32_u48_413_inst 0
    // ( $mux S2_state (( $slice RX 35 4 )  && ( $slice SRCMAC 15 0 ) )  _b0  ) 
    ? [MUX_415_inst] (S2_state_393 CONCAT_u32_u48_413_wire konst_414_wire_constant) (MUX_415_wire)  $flowthrough
    // (( $mux S1_state ($bitcast ($uint<48>) ( $slice RX 35 20 )  )  _b0  )  | ( $mux S2_state (( $slice RX 35 4 )  && ( $slice SRCMAC 15 0 ) )  _b0  ) )
    |[OR_u48_u48_416_inst] (MUX_407_wire MUX_415_wire) (OR_u48_u48_416_wire)   $flowthrough 
    $delay OR_u48_u48_416_inst 0
    // ( $mux not_both SRCMAC  _b0  ) 
    ? [MUX_420_inst] (not_both_400 SRCMAC konst_419_wire_constant) (MUX_420_wire)  $flowthrough
    // ((( $mux S1_state ($bitcast ($uint<48>) ( $slice RX 35 20 )  )  _b0  )  | ( $mux S2_state (( $slice RX 35 4 )  && ( $slice SRCMAC 15 0 ) )  _b0  ) ) | ( $mux not_both SRCMAC  _b0  ) )
    |[OR_u48_u48_421_inst] (OR_u48_u48_416_wire MUX_420_wire) (nSRCMAC)   
    $buffering  $out OR_u48_u48_421_inst nSRCMAC 1
    $delay OR_u48_u48_421_inst 1
  }
  // end data-path
  // Volatile module.. no links.
}
$module [nicRxFromMacDaemon] 
{
  // pipe-declarations for block %nicRxFromMacDaemon
  //  file .Aa/rx_from_mac.opt.aa, line 129
  // pipe-declarations for block %nicRxFromMacDaemon%loop
  //  file .Aa/rx_from_mac.opt.aa, line 134
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    <>[branch_block_stmt_425] // Branch Block  file .Aa/rx_from_mac.opt.aa, line 134
    {
      $P [branch_block_stmt_425__entry__]
      branch_block_stmt_425__entry__ <-| ($entry)
      $P [branch_block_stmt_425__exit__]
      branch_block_stmt_425__exit__ |-> ($exit)
      $P [do_while_stmt_426__entry__] 
      $P [do_while_stmt_426__exit__] 
      // do-while-statement  
      //  file .Aa/rx_from_mac.opt.aa, line 136
      <o> [do_while_stmt_426]  $depth 7 $buffering 1 
      {
        $P[do_while_stmt_426__entry__] 
        $P[do_while_stmt_426__exit__] 
        $P[loop_back] 
        $P[condition_done] 
        $P[loop_body_done] 
        $pipeline [do_while_stmt_426_loop_body] 
        {
          // Pipelined!
          $T[back_edge_to_loop_body] 
          $T[first_time_through_loop_body] 
          $T[loop_body_start] 
          $T[condition_evaluated] 
          $transitionmerge [entry_tmerge] (back_edge_to_loop_body first_time_through_loop_body) (loop_body_start)
          $entry <-& (loop_body_start)
          $T[aggregated_phi_sample_req] 
          $T[aggregated_phi_sample_ack] 
          $T[aggregated_phi_update_req] 
          $T[aggregated_phi_update_ack] 
          // do not loop-back unless all phi's have used up their triggering tokens.
          condition_evaluated <-& (aggregated_phi_update_ack)
          aggregated_phi_sample_req o<-& (aggregated_phi_update_ack 0)
          // start:  PHI statement phi_stmt_428
          // 			$phi TOTAL_STATE := 			  ($bitcast ($uint<119>) _b0  ) $on   $entry 			  nTOTAL_STATE $on   $loopback 
          // type of target is $uint<119>
          $T[phi_stmt_428_sample_start_] 
          $T[phi_stmt_428_sample_completed_] 
          $T[phi_stmt_428_update_start_] 
          $T[phi_stmt_428_update_completed_] 
          $T[phi_stmt_428_sample_start__ps] 
          phi_stmt_428_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_428_sample_completed__ps] 
          phi_stmt_428_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_428_update_start__ps] 
          phi_stmt_428_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_428_update_completed__ps] 
          phi_stmt_428_update_completed_ <-& (phi_stmt_428_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_428_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_428_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_428_update_start_)
          $T[phi_stmt_428_loopback_trigger] 
          phi_stmt_428_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_428_loopback_sample_req] 
          $T[phi_stmt_428_loopback_sample_req_ps] 
          phi_stmt_428_loopback_sample_req <-& (phi_stmt_428_loopback_sample_req_ps)
          phi_stmt_428_loopback_sample_req &-> ($null)
          $T[phi_stmt_428_entry_trigger] 
          phi_stmt_428_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_428_entry_sample_req] 
          $T[phi_stmt_428_entry_sample_req_ps] 
          phi_stmt_428_entry_sample_req <-& (phi_stmt_428_entry_sample_req_ps)
          phi_stmt_428_entry_sample_req &-> ($null)
          phi_stmt_428_update_start_ o<-& (phi_stmt_428_update_completed_ 0)
          phi_stmt_428_sample_start_ o<-& (phi_stmt_428_sample_completed_ 1)
          $T[phi_stmt_428_merged_reqs] 
          $T[phi_stmt_428_phi_mux_ack] 
          $T[phi_stmt_428_phi_mux_ack_ps] 
          phi_stmt_428_phi_mux_ack_ps <-& (phi_stmt_428_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_428_update_completed_)
          $T[type_cast_432_sample_start__ps] 
          $T[type_cast_432_sample_completed__ps] 
          $T[type_cast_432_update_start__ps] 
          $T[type_cast_432_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[type_cast_432_sample_start_] 
          $T[type_cast_432_sample_completed_] 
          type_cast_432_sample_completed_ <-& (type_cast_432_sample_start_)
          $T[type_cast_432_update_start_] 
          $T [type_cast_432_update_completed_] $delay 
          type_cast_432_update_completed_ <-& (type_cast_432_update_start_)
          // Phi start dependency for implicit/constant alternative.
          type_cast_432_sample_start_ <-& (type_cast_432_sample_start__ps)
          type_cast_432_update_start_ <-& (type_cast_432_update_start__ps)
          // Phi complete dependency.
          type_cast_432_sample_completed__ps <-& (type_cast_432_sample_completed_)
          type_cast_432_update_completed__ps <-& (type_cast_432_update_completed_)
          $T[R_nTOTAL_STATE_433_sample_start__ps] 
          $T[R_nTOTAL_STATE_433_sample_completed__ps] 
          $T[R_nTOTAL_STATE_433_update_start__ps] 
          $T[R_nTOTAL_STATE_433_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_nTOTAL_STATE_433_sample_start_] 
          $T[R_nTOTAL_STATE_433_sample_completed_] 
          $T[R_nTOTAL_STATE_433_update_start_] 
          $T[R_nTOTAL_STATE_433_update_completed_] 
          ;;[R_nTOTAL_STATE_433_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_nTOTAL_STATE_433_sample_start_ &-> (R_nTOTAL_STATE_433_Sample)
          R_nTOTAL_STATE_433_sample_completed_ <-& (R_nTOTAL_STATE_433_Sample)
          ;;[R_nTOTAL_STATE_433_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_nTOTAL_STATE_433_update_start_ &-> (R_nTOTAL_STATE_433_Update)
          R_nTOTAL_STATE_433_update_completed_ <-& (R_nTOTAL_STATE_433_Update)
          // RAW reenables for nTOTAL_STATE
          // Phi start dependency for implicit/constant alternative.
          R_nTOTAL_STATE_433_sample_start_ <-& (R_nTOTAL_STATE_433_sample_start__ps)
          R_nTOTAL_STATE_433_update_start_ <-& (R_nTOTAL_STATE_433_update_start__ps)
          // Phi complete dependency.
          R_nTOTAL_STATE_433_sample_completed__ps <-& (R_nTOTAL_STATE_433_sample_completed_)
          R_nTOTAL_STATE_433_update_completed__ps <-& (R_nTOTAL_STATE_433_update_completed_)
          $phisequencer [ phi_stmt_428_phi_seq] : 
          phi_stmt_428_entry_trigger type_cast_432_sample_start__ps type_cast_432_sample_completed__ps type_cast_432_update_start__ps type_cast_432_update_completed__ps phi_stmt_428_loopback_trigger R_nTOTAL_STATE_433_sample_start__ps R_nTOTAL_STATE_433_sample_completed__ps R_nTOTAL_STATE_433_update_start__ps R_nTOTAL_STATE_433_update_completed__ps :
          phi_stmt_428_sample_start__ps phi_stmt_428_sample_completed__ps phi_stmt_428_update_start__ps phi_stmt_428_update_completed__ps :
          phi_stmt_428_entry_sample_req_ps phi_stmt_428_loopback_sample_req_ps : 
          phi_stmt_428_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_428
          // start:  single source PHI statement phi_stmt_434
          // 			$phi RX := 			  mac_to_nic_data $on   $entry ,   $loopback 
          // type of target is $uint<37>
          $T[phi_stmt_434_sample_start_] 
          $T[phi_stmt_434_sample_completed_] 
          $T[phi_stmt_434_update_start_] 
          $T[phi_stmt_434_update_completed_] 
          aggregated_phi_sample_req <-& (phi_stmt_434_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_434_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_434_update_start_)
          // non-implicit source expression in single-source phi
          // mac_to_nic_data
          $T[RPIPE_mac_to_nic_data_436_sample_start_] 
          $T[RPIPE_mac_to_nic_data_436_sample_completed_] 
          $T[RPIPE_mac_to_nic_data_436_update_start_] 
          $T[RPIPE_mac_to_nic_data_436_update_completed_] 
          ;;[RPIPE_mac_to_nic_data_436_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_mac_to_nic_data_436_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_mac_to_nic_data_436_sample_start_ &-> (RPIPE_mac_to_nic_data_436_Sample)
          RPIPE_mac_to_nic_data_436_sample_completed_ <-& (RPIPE_mac_to_nic_data_436_Sample)
          RPIPE_mac_to_nic_data_436_update_start_ <-& (RPIPE_mac_to_nic_data_436_sample_completed_)
          RPIPE_mac_to_nic_data_436_update_start_ &-> (RPIPE_mac_to_nic_data_436_Update)
          RPIPE_mac_to_nic_data_436_update_completed_ <-& (RPIPE_mac_to_nic_data_436_Update)
          RPIPE_mac_to_nic_data_436_sample_start_ o<-& (RPIPE_mac_to_nic_data_436_update_completed_ 0)
          // RAW reenables for mac_to_nic_data
          // producer  and  consumer are both determined by PHI statements.
          aggregated_phi_sample_req &-> (RPIPE_mac_to_nic_data_436_sample_start_)
          aggregated_phi_sample_ack <-& (RPIPE_mac_to_nic_data_436_sample_completed_)
          aggregated_phi_update_req &-> (RPIPE_mac_to_nic_data_436_update_start_)
          phi_stmt_434_update_completed_ <-& (RPIPE_mac_to_nic_data_436_update_completed_)
          aggregated_phi_update_ack <-& (phi_stmt_434_update_completed_)
          // done: PHI Statement phi_stmt_434
          // start: WAR dependencies for LSTATE
          // done: WAR dependencies for LSTATE
          // start:  			$volatile LSTATE := ( $slice TOTAL_STATE 118 116 )  $buffering 1
          //  file .Aa/rx_from_mac.opt.aa, line 144
          // volatile! 
          // Source expression
          // ( $slice TOTAL_STATE 118 116 ) 
          // TOTAL_STATE
          // Target expression
          // (as target) LSTATE
          // start: WAR dependencies for LSTATE
          // done: WAR dependencies for LSTATE
          // end:  			$volatile LSTATE := ( $slice TOTAL_STATE 118 116 )  $buffering 1
          // start: WAR dependencies for SRCMAC
          // done: WAR dependencies for SRCMAC
          // start:  			$volatile SRCMAC := ( $slice TOTAL_STATE 115 68 )  $buffering 1
          //  file .Aa/rx_from_mac.opt.aa, line 145
          // volatile! 
          // Source expression
          // ( $slice TOTAL_STATE 115 68 ) 
          // TOTAL_STATE
          // Target expression
          // (as target) SRCMAC
          // start: WAR dependencies for SRCMAC
          // done: WAR dependencies for SRCMAC
          // end:  			$volatile SRCMAC := ( $slice TOTAL_STATE 115 68 )  $buffering 1
          // start: WAR dependencies for DESTMAC
          // done: WAR dependencies for DESTMAC
          // start:  			$volatile DESTMAC := ( $slice TOTAL_STATE 67 20 )  $buffering 1
          //  file .Aa/rx_from_mac.opt.aa, line 146
          // volatile! 
          // Source expression
          // ( $slice TOTAL_STATE 67 20 ) 
          // TOTAL_STATE
          // Target expression
          // (as target) DESTMAC
          // start: WAR dependencies for DESTMAC
          // done: WAR dependencies for DESTMAC
          // end:  			$volatile DESTMAC := ( $slice TOTAL_STATE 67 20 )  $buffering 1
          // start: WAR dependencies for HLEN
          // done: WAR dependencies for HLEN
          // start:  			$volatile HLEN := ( $slice TOTAL_STATE 19 16 )  $buffering 1
          //  file .Aa/rx_from_mac.opt.aa, line 147
          // volatile! 
          // Source expression
          // ( $slice TOTAL_STATE 19 16 ) 
          // TOTAL_STATE
          // Target expression
          // (as target) HLEN
          // start: WAR dependencies for HLEN
          // done: WAR dependencies for HLEN
          // end:  			$volatile HLEN := ( $slice TOTAL_STATE 19 16 )  $buffering 1
          // start: WAR dependencies for PLEN
          // done: WAR dependencies for PLEN
          // start:  			$volatile PLEN := ( $slice TOTAL_STATE 15 0 )  $buffering 1
          //  file .Aa/rx_from_mac.opt.aa, line 148
          // volatile! 
          // Source expression
          // ( $slice TOTAL_STATE 15 0 ) 
          // TOTAL_STATE
          // Target expression
          // (as target) PLEN
          // start: WAR dependencies for PLEN
          // done: WAR dependencies for PLEN
          // end:  			$volatile PLEN := ( $slice TOTAL_STATE 15 0 )  $buffering 1
          // start: WAR dependencies for nLSTATE
          // done: WAR dependencies for nLSTATE
          // start: WAR dependencies for nHLEN
          // done: WAR dependencies for nHLEN
          // start: WAR dependencies for nPLEN
          // done: WAR dependencies for nPLEN
          // start:  $volatile 			$call nextLSTATE (RX LSTATE HLEN PLEN ) (nLSTATE nHLEN nPLEN ) 
          //  file .Aa/rx_from_mac.opt.aa, line 150
          // volatile! 
          // Call input argument 0
          // RX
          // Call input argument 1
          // LSTATE
          // Call input argument 2
          // HLEN
          // Call input argument 3
          // PLEN
          // Call output argument 0
          // (as target) nLSTATE
          // Call output argument 1
          // (as target) nHLEN
          // Call output argument 2
          // (as target) nPLEN
          // start: WAR dependencies for nLSTATE
          // done: WAR dependencies for nLSTATE
          // start: WAR dependencies for nHLEN
          // done: WAR dependencies for nHLEN
          // start: WAR dependencies for nPLEN
          // done: WAR dependencies for nPLEN
          // end:  $volatile 			$call nextLSTATE (RX LSTATE HLEN PLEN ) (nLSTATE nHLEN nPLEN ) 
          // start: WAR dependencies for nSRCMAC
          // done: WAR dependencies for nSRCMAC
          // start:  $volatile 			$call nextSRCMAC (LSTATE SRCMAC RX ) (nSRCMAC ) 
          //  file .Aa/rx_from_mac.opt.aa, line 151
          // volatile! 
          // Call input argument 0
          // LSTATE
          // Call input argument 1
          // SRCMAC
          // Call input argument 2
          // RX
          // Call output argument 0
          // (as target) nSRCMAC
          // start: WAR dependencies for nSRCMAC
          // done: WAR dependencies for nSRCMAC
          // end:  $volatile 			$call nextSRCMAC (LSTATE SRCMAC RX ) (nSRCMAC ) 
          // start: WAR dependencies for nDESTMAC
          // done: WAR dependencies for nDESTMAC
          // start:  $volatile 			$call nextDESTMAC (LSTATE DESTMAC RX ) (nDESTMAC ) 
          //  file .Aa/rx_from_mac.opt.aa, line 152
          // volatile! 
          // Call input argument 0
          // LSTATE
          // Call input argument 1
          // DESTMAC
          // Call input argument 2
          // RX
          // Call output argument 0
          // (as target) nDESTMAC
          // start: WAR dependencies for nDESTMAC
          // done: WAR dependencies for nDESTMAC
          // end:  $volatile 			$call nextDESTMAC (LSTATE DESTMAC RX ) (nDESTMAC ) 
          // start: WAR dependencies for write_to_header
          // done: WAR dependencies for write_to_header
          // start:  $volatile 			$call isWriteToHeader (LSTATE HLEN PLEN ) (write_to_header ) 
          //  file .Aa/rx_from_mac.opt.aa, line 153
          // volatile! 
          // Call input argument 0
          // LSTATE
          // Call input argument 1
          // HLEN
          // Call input argument 2
          // PLEN
          // Call output argument 0
          // (as target) write_to_header
          // start: WAR dependencies for write_to_header
          // done: WAR dependencies for write_to_header
          // end:  $volatile 			$call isWriteToHeader (LSTATE HLEN PLEN ) (write_to_header ) 
          // start:  			$guard (write_to_header) nic_rx_to_header := RX $buffering 1// bits of buffering = 37. 
          //  file .Aa/rx_from_mac.opt.aa, line 154
          // Guard expression 
          // write_to_header
          // Source expression
          // RX
          // Target expression
          // (as target) nic_rx_to_header
          $T[WPIPE_nic_rx_to_header_490_sample_start_] 
          $T[WPIPE_nic_rx_to_header_490_sample_completed_] 
          $T[WPIPE_nic_rx_to_header_490_update_start_] 
          $T[WPIPE_nic_rx_to_header_490_update_completed_] 
          // Guard dependency for expression WPIPE_nic_rx_to_header_490 with guard R_write_to_header_489
          WPIPE_nic_rx_to_header_490_sample_start_ <-& (phi_stmt_428_update_completed_)
          // RAW reenables for write_to_header
          phi_stmt_428_update_start_ o<-& (WPIPE_nic_rx_to_header_490_sample_completed_ 0)
          ;;[WPIPE_nic_rx_to_header_490_Sample] 
          {
            // pipe write sample-start nic_rx_to_header
            $T [req] $T [ack] 
          }
          ;;[WPIPE_nic_rx_to_header_490_Update] 
          {
            // pipe write update (complete) nic_rx_to_header
            $T [req] $T [ack] 
          }
          WPIPE_nic_rx_to_header_490_sample_start_ &-> (WPIPE_nic_rx_to_header_490_Sample)
          WPIPE_nic_rx_to_header_490_sample_completed_ <-& (WPIPE_nic_rx_to_header_490_Sample)
          WPIPE_nic_rx_to_header_490_update_start_ <-& (WPIPE_nic_rx_to_header_490_sample_completed_)
          WPIPE_nic_rx_to_header_490_update_start_ &-> (WPIPE_nic_rx_to_header_490_Update)
          WPIPE_nic_rx_to_header_490_update_completed_ <-& (WPIPE_nic_rx_to_header_490_Update)
          WPIPE_nic_rx_to_header_490_sample_start_ o<-& (WPIPE_nic_rx_to_header_490_update_completed_ 0)
          // start: Forward dependencies from RX to transition WPIPE_nic_rx_to_header_490_sample_start_
          WPIPE_nic_rx_to_header_490_sample_start_ <-& (phi_stmt_434_update_completed_)
          // done: Forward dependencies from RX to transition WPIPE_nic_rx_to_header_490_sample_start_
          // RAW reenables for RX
          phi_stmt_434_update_start_ o<-& (WPIPE_nic_rx_to_header_490_sample_completed_ 0)
          // end:  			$guard (write_to_header) nic_rx_to_header := RX $buffering 1// bits of buffering = 37. 
          // start:  			nic_rx_to_packet := RX $buffering 1// bits of buffering = 37. 
          //  file .Aa/rx_from_mac.opt.aa, line 155
          // Source expression
          // RX
          // Target expression
          // (as target) nic_rx_to_packet
          $T[WPIPE_nic_rx_to_packet_493_sample_start_] 
          $T[WPIPE_nic_rx_to_packet_493_sample_completed_] 
          $T[WPIPE_nic_rx_to_packet_493_update_start_] 
          $T[WPIPE_nic_rx_to_packet_493_update_completed_] 
          ;;[WPIPE_nic_rx_to_packet_493_Sample] 
          {
            // pipe write sample-start nic_rx_to_packet
            $T [req] $T [ack] 
          }
          ;;[WPIPE_nic_rx_to_packet_493_Update] 
          {
            // pipe write update (complete) nic_rx_to_packet
            $T [req] $T [ack] 
          }
          WPIPE_nic_rx_to_packet_493_sample_start_ &-> (WPIPE_nic_rx_to_packet_493_Sample)
          WPIPE_nic_rx_to_packet_493_sample_completed_ <-& (WPIPE_nic_rx_to_packet_493_Sample)
          WPIPE_nic_rx_to_packet_493_update_start_ <-& (WPIPE_nic_rx_to_packet_493_sample_completed_)
          WPIPE_nic_rx_to_packet_493_update_start_ &-> (WPIPE_nic_rx_to_packet_493_Update)
          WPIPE_nic_rx_to_packet_493_update_completed_ <-& (WPIPE_nic_rx_to_packet_493_Update)
          WPIPE_nic_rx_to_packet_493_sample_start_ o<-& (WPIPE_nic_rx_to_packet_493_update_completed_ 0)
          // start: Forward dependencies from RX to transition WPIPE_nic_rx_to_packet_493_sample_start_
          WPIPE_nic_rx_to_packet_493_sample_start_ <-& (phi_stmt_434_update_completed_)
          // done: Forward dependencies from RX to transition WPIPE_nic_rx_to_packet_493_sample_start_
          // RAW reenables for RX
          phi_stmt_434_update_start_ o<-& (WPIPE_nic_rx_to_packet_493_sample_completed_ 0)
          // end:  			nic_rx_to_packet := RX $buffering 1// bits of buffering = 37. 
          // start: WAR dependencies for nTOTAL_STATE
          // WAR dependency: Read: nTOTAL_STATE before Write: 			$volatile nTOTAL_STATE := (((nLSTATE && nSRCMAC) && nDESTMAC) && (nHLEN && nPLEN)) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for nTOTAL_STATE
          // start:  			$volatile nTOTAL_STATE := (((nLSTATE && nSRCMAC) && nDESTMAC) && (nHLEN && nPLEN)) $buffering 1
          //  file .Aa/rx_from_mac.opt.aa, line 157
          // volatile! 
          // Source expression
          // (((nLSTATE && nSRCMAC) && nDESTMAC) && (nHLEN && nPLEN))
          // ((nLSTATE && nSRCMAC) && nDESTMAC)
          // (nLSTATE && nSRCMAC)
          // nLSTATE
          // nSRCMAC
          // nDESTMAC
          // (nHLEN && nPLEN)
          // nHLEN
          // nPLEN
          // Target expression
          // (as target) nTOTAL_STATE
          // start: WAR dependencies for nTOTAL_STATE
          // WAR dependency: Read: nTOTAL_STATE before Write: 			$volatile nTOTAL_STATE := (((nLSTATE && nSRCMAC) && nDESTMAC) && (nHLEN && nPLEN)) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for nTOTAL_STATE
          // end:  			$volatile nTOTAL_STATE := (((nLSTATE && nSRCMAC) && nDESTMAC) && (nHLEN && nPLEN)) $buffering 1
          $T [loop_body_delay_to_condition_start] $delay
          loop_body_start &-> (loop_body_delay_to_condition_start)
          loop_body_delay_to_condition_start &-> (condition_evaluated)
          condition_evaluated &-> ($null)
          // load-store dependencies..
          // pipe read/write dependencies for pipe mac_to_nic_data
          // read-dependencies for pipe mac_to_nic_data
          // write-dependencies for pipe mac_to_nic_data
          // signal write dependencies for mac_to_nic_data
          // pipe read/write dependencies for pipe nic_rx_to_header
          // read-dependencies for pipe nic_rx_to_header
          // write-dependencies for pipe nic_rx_to_header
          // signal write dependencies for nic_rx_to_header
          // pipe read/write dependencies for pipe nic_rx_to_packet
          // read-dependencies for pipe nic_rx_to_packet
          // write-dependencies for pipe nic_rx_to_packet
          // signal write dependencies for nic_rx_to_packet
        }
        ( first_time_through_loop_body  back_edge_to_loop_body) 
        ( condition_evaluated )
        ;; [loop_exit] 
        {
          $T [ack] 
        }
        ;; [loop_taken] 
        {
          $T [ack] 
        }
        do_while_stmt_426__entry__ <-| ($entry)
        loop_body_done <-| ( do_while_stmt_426_loop_body ) 
        condition_done |-> (loop_exit loop_taken)
        do_while_stmt_426__exit__ |-> ($exit)
        $bind condition_done <= do_while_stmt_426_loop_body : condition_evaluated
        $bind do_while_stmt_426__entry__  => do_while_stmt_426_loop_body : first_time_through_loop_body 
        $bind loop_back  => do_while_stmt_426_loop_body : back_edge_to_loop_body 
        $terminate (loop_exit loop_taken loop_body_done) (loop_back do_while_stmt_426__exit__)
      }
      do_while_stmt_426__entry__ |-> (do_while_stmt_426)
      do_while_stmt_426__exit__ <-| (do_while_stmt_426)
      do_while_stmt_426__entry__ <-| (branch_block_stmt_425__entry__)
      do_while_stmt_426__exit__ |-> (branch_block_stmt_425__exit__)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %nicRxFromMacDaemon%loop%
    //  file .Aa/rx_from_mac.opt.aa, line 138
    // constant-object-declarations for block %nicRxFromMacDaemon%loop
    //  file .Aa/rx_from_mac.opt.aa, line 134
    // constant-object-declarations for block %nicRxFromMacDaemon
    //  file .Aa/rx_from_mac.opt.aa, line 129
    // constant-declarations for block %nicRxFromMacDaemon%loop
    //  file .Aa/rx_from_mac.opt.aa, line 134
    // do-while statement  
    //  file .Aa/rx_from_mac.opt.aa, line 136
    // 1 
    $constant $W[konst_517_wire_constant] : $int<1> := _b1// 1
    // constant-declarations for block %nicRxFromMacDaemon%loop%
    //  file .Aa/rx_from_mac.opt.aa, line 138
    // constant-declarations for phi:  			$phi TOTAL_STATE := 			  ($bitcast ($uint<119>) _b0  ) $on   $entry 			  nTOTAL_STATE $on   $loopback 
    // type of target is $uint<119>
    //  file .Aa/rx_from_mac.opt.aa, line 139
    // ($bitcast ($uint<119>) _b0  )
    $constant $W[type_cast_432_wire_constant] : $int<119> := _b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000// 0
    // constant-declarations for phi:  			$phi RX := 			  mac_to_nic_data $on   $entry ,   $loopback 
    // type of target is $uint<37>
    //  file .Aa/rx_from_mac.opt.aa, line 141
    //  $volatile 			$call nextLSTATE (RX LSTATE HLEN PLEN ) (nLSTATE nHLEN nPLEN ) 
    //  file .Aa/rx_from_mac.opt.aa, line 150
    //  $volatile 			$call nextSRCMAC (LSTATE SRCMAC RX ) (nSRCMAC ) 
    //  file .Aa/rx_from_mac.opt.aa, line 151
    //  $volatile 			$call nextDESTMAC (LSTATE DESTMAC RX ) (nDESTMAC ) 
    //  file .Aa/rx_from_mac.opt.aa, line 152
    //  $volatile 			$call isWriteToHeader (LSTATE HLEN PLEN ) (write_to_header ) 
    //  file .Aa/rx_from_mac.opt.aa, line 153
    // block %nicRxFromMacDaemon%loop
    //  file .Aa/rx_from_mac.opt.aa, line 134
    // do-while statement  
    //  file .Aa/rx_from_mac.opt.aa, line 136
    // merge-statement  
    //  file .Aa/rx_from_mac.opt.aa, line 138
    // 			$phi TOTAL_STATE := 			  ($bitcast ($uint<119>) _b0  ) $on   $entry 			  nTOTAL_STATE $on   $loopback 
    // type of target is $uint<119>
    //  file .Aa/rx_from_mac.opt.aa, line 139
    $W[nTOTAL_STATE_508_433_buffered] : $int<119>
    // TOTAL_STATE
    $W[TOTAL_STATE_428] : $int<119>
    // 			$phi RX := 			  mac_to_nic_data $on   $entry ,   $loopback 
    // type of target is $uint<37>
    //  file .Aa/rx_from_mac.opt.aa, line 141
    // mac_to_nic_data
    $W[RPIPE_mac_to_nic_data_436_wire] : $int<37>
    // RX
    $W[RX_434] : $int<37>
    // 			$volatile LSTATE := ( $slice TOTAL_STATE 118 116 )  $buffering 1
    //  file .Aa/rx_from_mac.opt.aa, line 144
    // LSTATE
    $W[LSTATE_441] : $int<3>
    // 			$volatile SRCMAC := ( $slice TOTAL_STATE 115 68 )  $buffering 1
    //  file .Aa/rx_from_mac.opt.aa, line 145
    // SRCMAC
    $W[SRCMAC_445] : $int<48>
    // 			$volatile DESTMAC := ( $slice TOTAL_STATE 67 20 )  $buffering 1
    //  file .Aa/rx_from_mac.opt.aa, line 146
    // DESTMAC
    $W[DESTMAC_449] : $int<48>
    // 			$volatile HLEN := ( $slice TOTAL_STATE 19 16 )  $buffering 1
    //  file .Aa/rx_from_mac.opt.aa, line 147
    // HLEN
    $W[HLEN_453] : $int<4>
    // 			$volatile PLEN := ( $slice TOTAL_STATE 15 0 )  $buffering 1
    //  file .Aa/rx_from_mac.opt.aa, line 148
    // PLEN
    $W[PLEN_457] : $int<16>
    //  $volatile 			$call nextLSTATE (RX LSTATE HLEN PLEN ) (nLSTATE nHLEN nPLEN ) 
    //  file .Aa/rx_from_mac.opt.aa, line 150
    // nLSTATE
    $W[nLSTATE_473] : $int<3>
    // nHLEN
    $W[nHLEN_473] : $int<4>
    // nPLEN
    $W[nPLEN_473] : $int<16>
    //  $volatile 			$call nextSRCMAC (LSTATE SRCMAC RX ) (nSRCMAC ) 
    //  file .Aa/rx_from_mac.opt.aa, line 151
    // nSRCMAC
    $W[nSRCMAC_478] : $int<48>
    //  $volatile 			$call nextDESTMAC (LSTATE DESTMAC RX ) (nDESTMAC ) 
    //  file .Aa/rx_from_mac.opt.aa, line 152
    // nDESTMAC
    $W[nDESTMAC_483] : $int<48>
    //  $volatile 			$call isWriteToHeader (LSTATE HLEN PLEN ) (write_to_header ) 
    //  file .Aa/rx_from_mac.opt.aa, line 153
    // write_to_header
    $W[write_to_header_488] : $int<1>
    // 			$guard (write_to_header) nic_rx_to_header := RX $buffering 1// bits of buffering = 37. 
    //  file .Aa/rx_from_mac.opt.aa, line 154
    // nic_rx_to_header
    // 			nic_rx_to_packet := RX $buffering 1// bits of buffering = 37. 
    //  file .Aa/rx_from_mac.opt.aa, line 155
    // nic_rx_to_packet
    // 			$volatile nTOTAL_STATE := (((nLSTATE && nSRCMAC) && nDESTMAC) && (nHLEN && nPLEN)) $buffering 1
    //  file .Aa/rx_from_mac.opt.aa, line 157
    // (nLSTATE && nSRCMAC)
    $intermediate $W[CONCAT_u3_u51_501_wire] : $int<51>
    // ((nLSTATE && nSRCMAC) && nDESTMAC)
    $intermediate $W[CONCAT_u51_u99_503_wire] : $int<99>
    // (nHLEN && nPLEN)
    $intermediate $W[CONCAT_u4_u20_506_wire] : $int<20>
    // nTOTAL_STATE
    $W[nTOTAL_STATE_508] : $int<119>
    // datapath-instances for block %nicRxFromMacDaemon%loop
    //  file .Aa/rx_from_mac.opt.aa, line 134
    // datapath-instances for do-while  
    //  file .Aa/rx_from_mac.opt.aa, line 136
    ==0? [do_while_stmt_426_branch] (konst_517_wire_constant)
    $flowthrough
    // data-path instances for merge  
    //  file .Aa/rx_from_mac.opt.aa, line 138
    // 			$phi TOTAL_STATE := 			  ($bitcast ($uint<119>) _b0  ) $on   $entry 			  nTOTAL_STATE $on   $loopback 
    // type of target is $uint<119>
    //  file .Aa/rx_from_mac.opt.aa, line 139
    # := [nTOTAL_STATE_508_433_buf] (nTOTAL_STATE_508) (nTOTAL_STATE_508_433_buffered)     $fullrate
    $buffering $out nTOTAL_STATE_508_433_buf nTOTAL_STATE_508_433_buffered  1
    # $phi [phi_stmt_428] (type_cast_432_wire_constant nTOTAL_STATE_508_433_buffered) ( TOTAL_STATE_428 ) $fullrate
    // $buffering  $out phi_stmt_428 TOTAL_STATE_428 2
    // 			$phi RX := 			  mac_to_nic_data $on   $entry ,   $loopback 
    // type of target is $uint<37>
    //  file .Aa/rx_from_mac.opt.aa, line 141
    // mac_to_nic_data
    $ioport $in [RPIPE_mac_to_nic_data_436_inst] (mac_to_nic_data) (RPIPE_mac_to_nic_data_436_wire)  $fullrate 
    $buffering $out RPIPE_mac_to_nic_data_436_inst RPIPE_mac_to_nic_data_436_wire 1
    # := [ssrc_phi_stmt_434] (RPIPE_mac_to_nic_data_436_wire) (RX_434)    $flowthrough 
    // 			$volatile LSTATE := ( $slice TOTAL_STATE 118 116 )  $buffering 1
    //  file .Aa/rx_from_mac.opt.aa, line 144
    // ( $slice TOTAL_STATE 118 116 ) 
    [:] [slice_440_inst] (TOTAL_STATE_428 118 116) (LSTATE_441)  $flowthrough
    $delay slice_440_inst 0
    // 			$volatile SRCMAC := ( $slice TOTAL_STATE 115 68 )  $buffering 1
    //  file .Aa/rx_from_mac.opt.aa, line 145
    // ( $slice TOTAL_STATE 115 68 ) 
    [:] [slice_444_inst] (TOTAL_STATE_428 115 68) (SRCMAC_445)  $flowthrough
    $delay slice_444_inst 0
    // 			$volatile DESTMAC := ( $slice TOTAL_STATE 67 20 )  $buffering 1
    //  file .Aa/rx_from_mac.opt.aa, line 146
    // ( $slice TOTAL_STATE 67 20 ) 
    [:] [slice_448_inst] (TOTAL_STATE_428 67 20) (DESTMAC_449)  $flowthrough
    $delay slice_448_inst 0
    // 			$volatile HLEN := ( $slice TOTAL_STATE 19 16 )  $buffering 1
    //  file .Aa/rx_from_mac.opt.aa, line 147
    // ( $slice TOTAL_STATE 19 16 ) 
    [:] [slice_452_inst] (TOTAL_STATE_428 19 16) (HLEN_453)  $flowthrough
    $delay slice_452_inst 0
    // 			$volatile PLEN := ( $slice TOTAL_STATE 15 0 )  $buffering 1
    //  file .Aa/rx_from_mac.opt.aa, line 148
    // ( $slice TOTAL_STATE 15 0 ) 
    [:] [slice_456_inst] (TOTAL_STATE_428 15 0) (PLEN_457)  $flowthrough
    $delay slice_456_inst 0
    //  $volatile 			$call nextLSTATE (RX LSTATE HLEN PLEN ) (nLSTATE nHLEN nPLEN ) 
    //  file .Aa/rx_from_mac.opt.aa, line 150
    $call [call_stmt_473_call] $module nextLSTATE(RX_434 LSTATE_441 HLEN_453 PLEN_457) (nLSTATE_473 nHLEN_473 nPLEN_473)   $flowthrough $fullrate
    //  $volatile 			$call nextSRCMAC (LSTATE SRCMAC RX ) (nSRCMAC ) 
    //  file .Aa/rx_from_mac.opt.aa, line 151
    $call [call_stmt_478_call] $module nextSRCMAC(LSTATE_441 SRCMAC_445 RX_434) (nSRCMAC_478)   $flowthrough $fullrate
    //  $volatile 			$call nextDESTMAC (LSTATE DESTMAC RX ) (nDESTMAC ) 
    //  file .Aa/rx_from_mac.opt.aa, line 152
    $call [call_stmt_483_call] $module nextDESTMAC(LSTATE_441 DESTMAC_449 RX_434) (nDESTMAC_483)   $flowthrough $fullrate
    //  $volatile 			$call isWriteToHeader (LSTATE HLEN PLEN ) (write_to_header ) 
    //  file .Aa/rx_from_mac.opt.aa, line 153
    $call [call_stmt_488_call] $module isWriteToHeader(LSTATE_441 HLEN_453 PLEN_457) (write_to_header_488)   $flowthrough $fullrate
    // 			$guard (write_to_header) nic_rx_to_header := RX $buffering 1// bits of buffering = 37. 
    //  file .Aa/rx_from_mac.opt.aa, line 154
    // nic_rx_to_header
    $ioport $out [WPIPE_nic_rx_to_header_490_inst]  (RX_434) (nic_rx_to_header) $guard ( write_to_header_488 )  $fullrate 
    // 			nic_rx_to_packet := RX $buffering 1// bits of buffering = 37. 
    //  file .Aa/rx_from_mac.opt.aa, line 155
    // nic_rx_to_packet
    $ioport $out [WPIPE_nic_rx_to_packet_493_inst]  (RX_434) (nic_rx_to_packet)  $fullrate 
    // 			$volatile nTOTAL_STATE := (((nLSTATE && nSRCMAC) && nDESTMAC) && (nHLEN && nPLEN)) $buffering 1
    //  file .Aa/rx_from_mac.opt.aa, line 157
    // (nLSTATE && nSRCMAC)
    &&[CONCAT_u3_u51_501_inst] (nLSTATE_473 nSRCMAC_478) (CONCAT_u3_u51_501_wire)   $flowthrough 
    $delay CONCAT_u3_u51_501_inst 0
    // ((nLSTATE && nSRCMAC) && nDESTMAC)
    &&[CONCAT_u51_u99_503_inst] (CONCAT_u3_u51_501_wire nDESTMAC_483) (CONCAT_u51_u99_503_wire)   $flowthrough 
    $delay CONCAT_u51_u99_503_inst 0
    // (nHLEN && nPLEN)
    &&[CONCAT_u4_u20_506_inst] (nHLEN_473 nPLEN_473) (CONCAT_u4_u20_506_wire)   $flowthrough 
    $delay CONCAT_u4_u20_506_inst 0
    // (((nLSTATE && nSRCMAC) && nDESTMAC) && (nHLEN && nPLEN))
    &&[CONCAT_u99_u119_507_inst] (CONCAT_u51_u99_503_wire CONCAT_u4_u20_506_wire) (nTOTAL_STATE_508)   $flowthrough 
    $delay CONCAT_u99_u119_507_inst 0
  }
  // end data-path
  // CP-DP links for do-while  do_while_stmt_426
  //  file .Aa/rx_from_mac.opt.aa, line 136
  phi_stmt_428 <=> (branch_block_stmt_425/do_while_stmt_426/do_while_stmt_426_loop_body/phi_stmt_428_entry_sample_req branch_block_stmt_425/do_while_stmt_426/do_while_stmt_426_loop_body/phi_stmt_428_loopback_sample_req) (branch_block_stmt_425/do_while_stmt_426/do_while_stmt_426_loop_body/phi_stmt_428_phi_mux_ack)
  nTOTAL_STATE_508_433_buf <=> (branch_block_stmt_425/do_while_stmt_426/do_while_stmt_426_loop_body/R_nTOTAL_STATE_433_Sample/req branch_block_stmt_425/do_while_stmt_426/do_while_stmt_426_loop_body/R_nTOTAL_STATE_433_Update/req) (branch_block_stmt_425/do_while_stmt_426/do_while_stmt_426_loop_body/R_nTOTAL_STATE_433_Sample/ack branch_block_stmt_425/do_while_stmt_426/do_while_stmt_426_loop_body/R_nTOTAL_STATE_433_Update/ack)
  // mac_to_nic_data
  RPIPE_mac_to_nic_data_436_inst <=> (branch_block_stmt_425/do_while_stmt_426/do_while_stmt_426_loop_body/RPIPE_mac_to_nic_data_436_Sample/rr branch_block_stmt_425/do_while_stmt_426/do_while_stmt_426_loop_body/RPIPE_mac_to_nic_data_436_Update/cr) (branch_block_stmt_425/do_while_stmt_426/do_while_stmt_426_loop_body/RPIPE_mac_to_nic_data_436_Sample/ra branch_block_stmt_425/do_while_stmt_426/do_while_stmt_426_loop_body/RPIPE_mac_to_nic_data_436_Update/ca)
  // 			$volatile LSTATE := ( $slice TOTAL_STATE 118 116 )  $buffering 1
  //  file .Aa/rx_from_mac.opt.aa, line 144
  // TOTAL_STATE
  // 			$volatile SRCMAC := ( $slice TOTAL_STATE 115 68 )  $buffering 1
  //  file .Aa/rx_from_mac.opt.aa, line 145
  // TOTAL_STATE
  // 			$volatile DESTMAC := ( $slice TOTAL_STATE 67 20 )  $buffering 1
  //  file .Aa/rx_from_mac.opt.aa, line 146
  // TOTAL_STATE
  // 			$volatile HLEN := ( $slice TOTAL_STATE 19 16 )  $buffering 1
  //  file .Aa/rx_from_mac.opt.aa, line 147
  // TOTAL_STATE
  // 			$volatile PLEN := ( $slice TOTAL_STATE 15 0 )  $buffering 1
  //  file .Aa/rx_from_mac.opt.aa, line 148
  // TOTAL_STATE
  //  $volatile 			$call nextLSTATE (RX LSTATE HLEN PLEN ) (nLSTATE nHLEN nPLEN ) 
  //  file .Aa/rx_from_mac.opt.aa, line 150
  // RX
  // LSTATE
  // HLEN
  // PLEN
  //  $volatile 			$call nextSRCMAC (LSTATE SRCMAC RX ) (nSRCMAC ) 
  //  file .Aa/rx_from_mac.opt.aa, line 151
  // LSTATE
  // SRCMAC
  // RX
  //  $volatile 			$call nextDESTMAC (LSTATE DESTMAC RX ) (nDESTMAC ) 
  //  file .Aa/rx_from_mac.opt.aa, line 152
  // LSTATE
  // DESTMAC
  // RX
  //  $volatile 			$call isWriteToHeader (LSTATE HLEN PLEN ) (write_to_header ) 
  //  file .Aa/rx_from_mac.opt.aa, line 153
  // LSTATE
  // HLEN
  // PLEN
  // 			$guard (write_to_header) nic_rx_to_header := RX $buffering 1// bits of buffering = 37. 
  //  file .Aa/rx_from_mac.opt.aa, line 154
  // RX
  // nic_rx_to_header
  WPIPE_nic_rx_to_header_490_inst <=> (branch_block_stmt_425/do_while_stmt_426/do_while_stmt_426_loop_body/WPIPE_nic_rx_to_header_490_Sample/req branch_block_stmt_425/do_while_stmt_426/do_while_stmt_426_loop_body/WPIPE_nic_rx_to_header_490_Update/req) (branch_block_stmt_425/do_while_stmt_426/do_while_stmt_426_loop_body/WPIPE_nic_rx_to_header_490_Sample/ack branch_block_stmt_425/do_while_stmt_426/do_while_stmt_426_loop_body/WPIPE_nic_rx_to_header_490_Update/ack)
  // 			nic_rx_to_packet := RX $buffering 1// bits of buffering = 37. 
  //  file .Aa/rx_from_mac.opt.aa, line 155
  // RX
  // nic_rx_to_packet
  WPIPE_nic_rx_to_packet_493_inst <=> (branch_block_stmt_425/do_while_stmt_426/do_while_stmt_426_loop_body/WPIPE_nic_rx_to_packet_493_Sample/req branch_block_stmt_425/do_while_stmt_426/do_while_stmt_426_loop_body/WPIPE_nic_rx_to_packet_493_Update/req) (branch_block_stmt_425/do_while_stmt_426/do_while_stmt_426_loop_body/WPIPE_nic_rx_to_packet_493_Sample/ack branch_block_stmt_425/do_while_stmt_426/do_while_stmt_426_loop_body/WPIPE_nic_rx_to_packet_493_Update/ack)
  // 			$volatile nTOTAL_STATE := (((nLSTATE && nSRCMAC) && nDESTMAC) && (nHLEN && nPLEN)) $buffering 1
  //  file .Aa/rx_from_mac.opt.aa, line 157
  // (((nLSTATE && nSRCMAC) && nDESTMAC) && (nHLEN && nPLEN))
  // ((nLSTATE && nSRCMAC) && nDESTMAC)
  // (nLSTATE && nSRCMAC)
  // nLSTATE
  // nSRCMAC
  // nDESTMAC
  // (nHLEN && nPLEN)
  // nHLEN
  // nPLEN
  do_while_stmt_426_branch <=> (branch_block_stmt_425/do_while_stmt_426/do_while_stmt_426_loop_body/condition_evaluated) (branch_block_stmt_425/do_while_stmt_426/loop_exit/ack branch_block_stmt_425/do_while_stmt_426/loop_taken/ack)
}
$module [read_from_tb] 
{
  // pipe-declarations for block %read_from_tb
  //  file .Aa/rx_from_mac.opt.aa, line 162
  // pipe-declarations for block %read_from_tb%loop
  //  file .Aa/rx_from_mac.opt.aa, line 167
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    <>[branch_block_stmt_521] // Branch Block  file .Aa/rx_from_mac.opt.aa, line 167
    {
      $P [branch_block_stmt_521__entry__]
      branch_block_stmt_521__entry__ <-| ($entry)
      $P [branch_block_stmt_521__exit__]
      branch_block_stmt_521__exit__ |-> ($exit)
      $P [do_while_stmt_522__entry__] 
      $P [do_while_stmt_522__exit__] 
      // do-while-statement  
      //  file .Aa/rx_from_mac.opt.aa, line 169
      <o> [do_while_stmt_522]  $depth 7 $buffering 1 
      {
        $P[do_while_stmt_522__entry__] 
        $P[do_while_stmt_522__exit__] 
        $P[loop_back] 
        $P[condition_done] 
        $P[loop_body_done] 
        $pipeline [do_while_stmt_522_loop_body] 
        {
          // Pipelined!
          $T[back_edge_to_loop_body] 
          $T[first_time_through_loop_body] 
          $T[loop_body_start] 
          $T[condition_evaluated] 
          $transitionmerge [entry_tmerge] (back_edge_to_loop_body first_time_through_loop_body) (loop_body_start)
          $entry <-& (loop_body_start)
          $T[aggregated_phi_sample_req] 
          $T[aggregated_phi_sample_ack] 
          $T[aggregated_phi_update_req] 
          $T[aggregated_phi_update_ack] 
          // do not loop-back unless all phi's have used up their triggering tokens.
          condition_evaluated <-& (aggregated_phi_update_ack)
          aggregated_phi_sample_req o<-& (aggregated_phi_update_ack 0)
          // start:  single source PHI statement phi_stmt_524
          // 			$phi idata := 			  tb_in_pipe $on   $entry ,   $loopback 
          // type of target is $uint<64>
          $T[phi_stmt_524_sample_start_] 
          $T[phi_stmt_524_sample_completed_] 
          $T[phi_stmt_524_update_start_] 
          $T[phi_stmt_524_update_completed_] 
          aggregated_phi_sample_req <-& (phi_stmt_524_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_524_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_524_update_start_)
          // non-implicit source expression in single-source phi
          // tb_in_pipe
          $T[RPIPE_tb_in_pipe_526_sample_start_] 
          $T[RPIPE_tb_in_pipe_526_sample_completed_] 
          $T[RPIPE_tb_in_pipe_526_update_start_] 
          $T[RPIPE_tb_in_pipe_526_update_completed_] 
          ;;[RPIPE_tb_in_pipe_526_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_tb_in_pipe_526_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_tb_in_pipe_526_sample_start_ &-> (RPIPE_tb_in_pipe_526_Sample)
          RPIPE_tb_in_pipe_526_sample_completed_ <-& (RPIPE_tb_in_pipe_526_Sample)
          RPIPE_tb_in_pipe_526_update_start_ <-& (RPIPE_tb_in_pipe_526_sample_completed_)
          RPIPE_tb_in_pipe_526_update_start_ &-> (RPIPE_tb_in_pipe_526_Update)
          RPIPE_tb_in_pipe_526_update_completed_ <-& (RPIPE_tb_in_pipe_526_Update)
          RPIPE_tb_in_pipe_526_sample_start_ o<-& (RPIPE_tb_in_pipe_526_update_completed_ 0)
          // RAW reenables for tb_in_pipe
          // producer  and  consumer are both determined by PHI statements.
          aggregated_phi_sample_req &-> (RPIPE_tb_in_pipe_526_sample_start_)
          aggregated_phi_sample_ack <-& (RPIPE_tb_in_pipe_526_sample_completed_)
          aggregated_phi_update_req &-> (RPIPE_tb_in_pipe_526_update_start_)
          phi_stmt_524_update_completed_ <-& (RPIPE_tb_in_pipe_526_update_completed_)
          aggregated_phi_update_ack <-& (phi_stmt_524_update_completed_)
          // done: PHI Statement phi_stmt_524
          // start:  			send_data := ( $slice idata 36 0 )  $buffering 1// bits of buffering = 37. 
          //  file .Aa/rx_from_mac.opt.aa, line 175
          // Source expression
          // ( $slice idata 36 0 ) 
          $T[slice_530_sample_start_] 
          $T[slice_530_sample_completed_] 
          $T[slice_530_update_start_] 
          $T[slice_530_update_completed_] 
          // idata
          // start: Forward dependencies from idata to transition slice_530_sample_start_
          slice_530_sample_start_ <-& (phi_stmt_524_update_completed_)
          // done: Forward dependencies from idata to transition slice_530_sample_start_
          ;;[slice_530_Sample] 
          {
            // unary expression 
            $T [rr] $T [ra] // (split) unary operation
          }
          ;;[slice_530_Update] 
          {
            // unary expression 
            $T [cr] $T [ca] //(split) unary operation
          }
          slice_530_sample_start_ &-> (slice_530_Sample)
          slice_530_sample_completed_ <-& (slice_530_Sample)
          slice_530_sample_completed_ &-> ($null)
          slice_530_update_start_ &-> (slice_530_Update)
          slice_530_update_completed_ <-& (slice_530_Update)
          // RAW reenables for idata
          phi_stmt_524_update_start_ o<-& (slice_530_sample_completed_ 0)
          // self-release: 
          slice_530_sample_start_ o<-& (slice_530_sample_completed_ 1)
          $null &-> (slice_530_update_start_)
          slice_530_update_start_ o<-& (slice_530_update_completed_ 0)
          // Target expression
          // (as target) send_data
          // start: WAR dependencies for send_data
          // done: WAR dependencies for send_data
          // end:  			send_data := ( $slice idata 36 0 )  $buffering 1// bits of buffering = 37. 
          // start:  			mac_data := send_data $buffering 1// bits of buffering = 37. 
          //  file .Aa/rx_from_mac.opt.aa, line 176
          // Source expression
          // send_data
          // Target expression
          // (as target) mac_data
          $T[WPIPE_mac_data_532_sample_start_] 
          $T[WPIPE_mac_data_532_sample_completed_] 
          $T[WPIPE_mac_data_532_update_start_] 
          $T[WPIPE_mac_data_532_update_completed_] 
          ;;[WPIPE_mac_data_532_Sample] 
          {
            // pipe write sample-start mac_data
            $T [req] $T [ack] 
          }
          ;;[WPIPE_mac_data_532_Update] 
          {
            // pipe write update (complete) mac_data
            $T [req] $T [ack] 
          }
          WPIPE_mac_data_532_sample_start_ &-> (WPIPE_mac_data_532_Sample)
          WPIPE_mac_data_532_sample_completed_ <-& (WPIPE_mac_data_532_Sample)
          WPIPE_mac_data_532_update_start_ <-& (WPIPE_mac_data_532_sample_completed_)
          WPIPE_mac_data_532_update_start_ &-> (WPIPE_mac_data_532_Update)
          WPIPE_mac_data_532_update_completed_ <-& (WPIPE_mac_data_532_Update)
          WPIPE_mac_data_532_sample_start_ o<-& (WPIPE_mac_data_532_update_completed_ 0)
          // start: Forward dependencies from send_data to transition WPIPE_mac_data_532_sample_start_
          WPIPE_mac_data_532_sample_start_ <-& (slice_530_update_completed_)
          // done: Forward dependencies from send_data to transition WPIPE_mac_data_532_sample_start_
          // RAW reenables for send_data
          slice_530_update_start_ o<-& (WPIPE_mac_data_532_sample_completed_ 0)
          // end:  			mac_data := send_data $buffering 1// bits of buffering = 37. 
          $T [loop_body_delay_to_condition_start] $delay
          loop_body_start &-> (loop_body_delay_to_condition_start)
          loop_body_delay_to_condition_start &-> (condition_evaluated)
          condition_evaluated &-> ($null)
          // load-store dependencies..
          // pipe read/write dependencies for pipe mac_data
          // read-dependencies for pipe mac_data
          // write-dependencies for pipe mac_data
          // signal write dependencies for mac_data
          // pipe read/write dependencies for pipe tb_in_pipe
          // read-dependencies for pipe tb_in_pipe
          // write-dependencies for pipe tb_in_pipe
          // signal write dependencies for tb_in_pipe
        }
        ( first_time_through_loop_body  back_edge_to_loop_body) 
        ( condition_evaluated )
        ;; [loop_exit] 
        {
          $T [ack] 
        }
        ;; [loop_taken] 
        {
          $T [ack] 
        }
        do_while_stmt_522__entry__ <-| ($entry)
        loop_body_done <-| ( do_while_stmt_522_loop_body ) 
        condition_done |-> (loop_exit loop_taken)
        do_while_stmt_522__exit__ |-> ($exit)
        $bind condition_done <= do_while_stmt_522_loop_body : condition_evaluated
        $bind do_while_stmt_522__entry__  => do_while_stmt_522_loop_body : first_time_through_loop_body 
        $bind loop_back  => do_while_stmt_522_loop_body : back_edge_to_loop_body 
        $terminate (loop_exit loop_taken loop_body_done) (loop_back do_while_stmt_522__exit__)
      }
      do_while_stmt_522__entry__ |-> (do_while_stmt_522)
      do_while_stmt_522__exit__ <-| (do_while_stmt_522)
      do_while_stmt_522__entry__ <-| (branch_block_stmt_521__entry__)
      do_while_stmt_522__exit__ |-> (branch_block_stmt_521__exit__)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %read_from_tb%loop%
    //  file .Aa/rx_from_mac.opt.aa, line 171
    // constant-object-declarations for block %read_from_tb%loop
    //  file .Aa/rx_from_mac.opt.aa, line 167
    // constant-object-declarations for block %read_from_tb
    //  file .Aa/rx_from_mac.opt.aa, line 162
    // constant-declarations for block %read_from_tb%loop
    //  file .Aa/rx_from_mac.opt.aa, line 167
    // do-while statement  
    //  file .Aa/rx_from_mac.opt.aa, line 169
    // 1 
    $constant $W[konst_536_wire_constant] : $int<1> := _b1// 1
    // constant-declarations for block %read_from_tb%loop%
    //  file .Aa/rx_from_mac.opt.aa, line 171
    // constant-declarations for phi:  			$phi idata := 			  tb_in_pipe $on   $entry ,   $loopback 
    // type of target is $uint<64>
    //  file .Aa/rx_from_mac.opt.aa, line 172
    // block %read_from_tb%loop
    //  file .Aa/rx_from_mac.opt.aa, line 167
    // do-while statement  
    //  file .Aa/rx_from_mac.opt.aa, line 169
    // merge-statement  
    //  file .Aa/rx_from_mac.opt.aa, line 171
    // 			$phi idata := 			  tb_in_pipe $on   $entry ,   $loopback 
    // type of target is $uint<64>
    //  file .Aa/rx_from_mac.opt.aa, line 172
    // tb_in_pipe
    $W[RPIPE_tb_in_pipe_526_wire] : $int<64>
    // idata
    $W[idata_524] : $int<64>
    // 			send_data := ( $slice idata 36 0 )  $buffering 1// bits of buffering = 37. 
    //  file .Aa/rx_from_mac.opt.aa, line 175
    // send_data
    $W[send_data_531] : $int<37>
    // 			mac_data := send_data $buffering 1// bits of buffering = 37. 
    //  file .Aa/rx_from_mac.opt.aa, line 176
    // mac_data
    // datapath-instances for block %read_from_tb%loop
    //  file .Aa/rx_from_mac.opt.aa, line 167
    // datapath-instances for do-while  
    //  file .Aa/rx_from_mac.opt.aa, line 169
    ==0? [do_while_stmt_522_branch] (konst_536_wire_constant)
    $flowthrough
    // data-path instances for merge  
    //  file .Aa/rx_from_mac.opt.aa, line 171
    // 			$phi idata := 			  tb_in_pipe $on   $entry ,   $loopback 
    // type of target is $uint<64>
    //  file .Aa/rx_from_mac.opt.aa, line 172
    // tb_in_pipe
    $ioport $in [RPIPE_tb_in_pipe_526_inst] (tb_in_pipe) (RPIPE_tb_in_pipe_526_wire)  $fullrate 
    $buffering $out RPIPE_tb_in_pipe_526_inst RPIPE_tb_in_pipe_526_wire 1
    # := [ssrc_phi_stmt_524] (RPIPE_tb_in_pipe_526_wire) (idata_524)    $flowthrough 
    // 			send_data := ( $slice idata 36 0 )  $buffering 1// bits of buffering = 37. 
    //  file .Aa/rx_from_mac.opt.aa, line 175
    // ( $slice idata 36 0 ) 
    [:] [slice_530_inst] (idata_524 36 0) (send_data_531)  $fullrate
    $buffering  $out slice_530_inst send_data_531 1
    $delay slice_530_inst 1
    // 			mac_data := send_data $buffering 1// bits of buffering = 37. 
    //  file .Aa/rx_from_mac.opt.aa, line 176
    // mac_data
    $ioport $out [WPIPE_mac_data_532_inst]  (send_data_531) (mac_data)  $fullrate 
  }
  // end data-path
  // CP-DP links for do-while  do_while_stmt_522
  //  file .Aa/rx_from_mac.opt.aa, line 169
  // tb_in_pipe
  RPIPE_tb_in_pipe_526_inst <=> (branch_block_stmt_521/do_while_stmt_522/do_while_stmt_522_loop_body/RPIPE_tb_in_pipe_526_Sample/rr branch_block_stmt_521/do_while_stmt_522/do_while_stmt_522_loop_body/RPIPE_tb_in_pipe_526_Update/cr) (branch_block_stmt_521/do_while_stmt_522/do_while_stmt_522_loop_body/RPIPE_tb_in_pipe_526_Sample/ra branch_block_stmt_521/do_while_stmt_522/do_while_stmt_522_loop_body/RPIPE_tb_in_pipe_526_Update/ca)
  // 			send_data := ( $slice idata 36 0 )  $buffering 1// bits of buffering = 37. 
  //  file .Aa/rx_from_mac.opt.aa, line 175
  // idata
  // ( $slice idata 36 0 ) 
  slice_530_inst <=> (branch_block_stmt_521/do_while_stmt_522/do_while_stmt_522_loop_body/slice_530_Sample/rr branch_block_stmt_521/do_while_stmt_522/do_while_stmt_522_loop_body/slice_530_Update/cr) (branch_block_stmt_521/do_while_stmt_522/do_while_stmt_522_loop_body/slice_530_Sample/ra branch_block_stmt_521/do_while_stmt_522/do_while_stmt_522_loop_body/slice_530_Update/ca)
  // 			mac_data := send_data $buffering 1// bits of buffering = 37. 
  //  file .Aa/rx_from_mac.opt.aa, line 176
  // send_data
  // mac_data
  WPIPE_mac_data_532_inst <=> (branch_block_stmt_521/do_while_stmt_522/do_while_stmt_522_loop_body/WPIPE_mac_data_532_Sample/req branch_block_stmt_521/do_while_stmt_522/do_while_stmt_522_loop_body/WPIPE_mac_data_532_Update/req) (branch_block_stmt_521/do_while_stmt_522/do_while_stmt_522_loop_body/WPIPE_mac_data_532_Sample/ack branch_block_stmt_521/do_while_stmt_522/do_while_stmt_522_loop_body/WPIPE_mac_data_532_Update/ack)
  do_while_stmt_522_branch <=> (branch_block_stmt_521/do_while_stmt_522/do_while_stmt_522_loop_body/condition_evaluated) (branch_block_stmt_521/do_while_stmt_522/loop_exit/ack branch_block_stmt_521/do_while_stmt_522/loop_taken/ack)
}
$module [send_to_nic1] 
{
  $in buf_ptr:$int<10>
  // can point into 
  // pipe-declarations for block %send_to_nic1
  //  file .Aa/rx_from_mac.opt.aa, line 180
  // pipe-declarations for block %send_to_nic1%main
  //  file .Aa/rx_from_mac.opt.aa, line 185
  // memory-space 0 is read from.
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    <>[branch_block_stmt_541] // Branch Block  file .Aa/rx_from_mac.opt.aa, line 185
    {
      $P [branch_block_stmt_541__entry__]
      branch_block_stmt_541__entry__ <-| ($entry)
      $P [branch_block_stmt_541__exit__]
      branch_block_stmt_541__exit__ |-> ($exit)
      $P [do_while_stmt_542__entry__] 
      $P [do_while_stmt_542__exit__] 
      // do-while-statement  
      //  file .Aa/rx_from_mac.opt.aa, line 187
      <o> [do_while_stmt_542]  $depth 5 $buffering 1 
      {
        $P[do_while_stmt_542__entry__] 
        $P[do_while_stmt_542__exit__] 
        $P[loop_back] 
        $P[condition_done] 
        $P[loop_body_done] 
        $pipeline [do_while_stmt_542_loop_body] 
        {
          // Pipelined!
          $T[back_edge_to_loop_body] 
          $T[first_time_through_loop_body] 
          $T[loop_body_start] 
          $T[condition_evaluated] 
          $transitionmerge [entry_tmerge] (back_edge_to_loop_body first_time_through_loop_body) (loop_body_start)
          $entry <-& (loop_body_start)
          $T[aggregated_phi_sample_req] 
          $T[aggregated_phi_sample_ack] 
          $T[aggregated_phi_update_req] 
          $T[aggregated_phi_update_ack] 
          // do not loop-back unless all phi's have used up their triggering tokens.
          condition_evaluated <-& (aggregated_phi_update_ack)
          aggregated_phi_sample_req o<-& (aggregated_phi_update_ack 0)
          // start:  PHI statement phi_stmt_544
          // 			$phi I := 			  ($bitcast ($uint<10>) _b0  ) $on   $entry 			  num $on   $loopback 
          // type of target is $uint<10>
          $T[phi_stmt_544_sample_start_] 
          $T[phi_stmt_544_sample_completed_] 
          $T[phi_stmt_544_update_start_] 
          $T[phi_stmt_544_update_completed_] 
          $T[phi_stmt_544_sample_start__ps] 
          phi_stmt_544_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_544_sample_completed__ps] 
          phi_stmt_544_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_544_update_start__ps] 
          phi_stmt_544_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_544_update_completed__ps] 
          phi_stmt_544_update_completed_ <-& (phi_stmt_544_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_544_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_544_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_544_update_start_)
          $T[phi_stmt_544_loopback_trigger] 
          phi_stmt_544_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_544_loopback_sample_req] 
          $T[phi_stmt_544_loopback_sample_req_ps] 
          phi_stmt_544_loopback_sample_req <-& (phi_stmt_544_loopback_sample_req_ps)
          phi_stmt_544_loopback_sample_req &-> ($null)
          $T[phi_stmt_544_entry_trigger] 
          phi_stmt_544_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_544_entry_sample_req] 
          $T[phi_stmt_544_entry_sample_req_ps] 
          phi_stmt_544_entry_sample_req <-& (phi_stmt_544_entry_sample_req_ps)
          phi_stmt_544_entry_sample_req &-> ($null)
          phi_stmt_544_update_start_ o<-& (phi_stmt_544_update_completed_ 0)
          phi_stmt_544_sample_start_ o<-& (phi_stmt_544_sample_completed_ 1)
          $T[phi_stmt_544_merged_reqs] 
          $T[phi_stmt_544_phi_mux_ack] 
          $T[phi_stmt_544_phi_mux_ack_ps] 
          phi_stmt_544_phi_mux_ack_ps <-& (phi_stmt_544_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_544_update_completed_)
          $T[type_cast_547_sample_start__ps] 
          $T[type_cast_547_sample_completed__ps] 
          $T[type_cast_547_update_start__ps] 
          $T[type_cast_547_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[type_cast_547_sample_start_] 
          $T[type_cast_547_sample_completed_] 
          type_cast_547_sample_completed_ <-& (type_cast_547_sample_start_)
          $T[type_cast_547_update_start_] 
          $T [type_cast_547_update_completed_] $delay 
          type_cast_547_update_completed_ <-& (type_cast_547_update_start_)
          // Phi start dependency for implicit/constant alternative.
          type_cast_547_sample_start_ <-& (type_cast_547_sample_start__ps)
          type_cast_547_update_start_ <-& (type_cast_547_update_start__ps)
          // Phi complete dependency.
          type_cast_547_sample_completed__ps <-& (type_cast_547_sample_completed_)
          type_cast_547_update_completed__ps <-& (type_cast_547_update_completed_)
          $T[R_num_548_sample_start__ps] 
          $T[R_num_548_sample_completed__ps] 
          $T[R_num_548_update_start__ps] 
          $T[R_num_548_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_num_548_sample_start_] 
          $T[R_num_548_sample_completed_] 
          $T[R_num_548_update_start_] 
          $T[R_num_548_update_completed_] 
          ;;[R_num_548_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_num_548_sample_start_ &-> (R_num_548_Sample)
          R_num_548_sample_completed_ <-& (R_num_548_Sample)
          ;;[R_num_548_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_num_548_update_start_ &-> (R_num_548_Update)
          R_num_548_update_completed_ <-& (R_num_548_Update)
          // RAW reenables for num
          // Phi start dependency for implicit/constant alternative.
          R_num_548_sample_start_ <-& (R_num_548_sample_start__ps)
          R_num_548_update_start_ <-& (R_num_548_update_start__ps)
          // Phi complete dependency.
          R_num_548_sample_completed__ps <-& (R_num_548_sample_completed_)
          R_num_548_update_completed__ps <-& (R_num_548_update_completed_)
          $phisequencer [ phi_stmt_544_phi_seq] : 
          phi_stmt_544_entry_trigger type_cast_547_sample_start__ps type_cast_547_sample_completed__ps type_cast_547_update_start__ps type_cast_547_update_completed__ps phi_stmt_544_loopback_trigger R_num_548_sample_start__ps R_num_548_sample_completed__ps R_num_548_update_start__ps R_num_548_update_completed__ps :
          phi_stmt_544_sample_start__ps phi_stmt_544_sample_completed__ps phi_stmt_544_update_start__ps phi_stmt_544_update_completed__ps :
          phi_stmt_544_entry_sample_req_ps phi_stmt_544_loopback_sample_req_ps : 
          phi_stmt_544_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_544
          // start:  			mac_to_nic_data := buffer_1[I] $buffering 1// bits of buffering = 37. 
          //  file .Aa/rx_from_mac.opt.aa, line 193
          // Source expression
          // buffer_1[I]
          $T[array_obj_ref_552_base_address_calculated] 
          $T[array_obj_ref_552_sample_start_] 
          $T[array_obj_ref_552_sample_completed_] 
          $T[array_obj_ref_552_update_start_] 
          $T[array_obj_ref_552_update_completed_] 
          $T[array_obj_ref_552_word_address_calculated] 
          $T[array_obj_ref_552_root_address_calculated] 
          $T[array_obj_ref_552_offset_calculated] 
          $T[array_obj_ref_552_index_resized_0] 
          $T[array_obj_ref_552_index_scaled_0] 
          $T[array_obj_ref_552_index_computed_0] 
          // I
          // start: Forward dependencies from I to transition array_obj_ref_552_index_computed_0
          array_obj_ref_552_index_computed_0 <-& (phi_stmt_544_update_completed_)
          // done: Forward dependencies from I to transition array_obj_ref_552_index_computed_0
          ;;[array_obj_ref_552_index_resize_0] 
          {
            $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
          }
          array_obj_ref_552_index_computed_0 &-> (array_obj_ref_552_index_resize_0)
          array_obj_ref_552_index_resized_0 <-& (array_obj_ref_552_index_resize_0)
          ;;[array_obj_ref_552_index_scale_0] 
          {
            $T [scale_rename_req] $T [scale_rename_ack] // rename 
          }
          array_obj_ref_552_index_resized_0 &-> (array_obj_ref_552_index_scale_0)
          array_obj_ref_552_index_scaled_0 <-& (array_obj_ref_552_index_scale_0)
          ;;[array_obj_ref_552_final_index_sum_regn] 
          {
            $T [req] $T [ack] // rename
          }
          array_obj_ref_552_index_scaled_0 &-> (array_obj_ref_552_final_index_sum_regn)
          array_obj_ref_552_offset_calculated <-& (array_obj_ref_552_final_index_sum_regn)
          ;;[array_obj_ref_552_base_plus_offset] 
          {
            $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
          }
          array_obj_ref_552_offset_calculated &-> (array_obj_ref_552_base_plus_offset)
          array_obj_ref_552_root_address_calculated <-& (array_obj_ref_552_base_plus_offset)
          ;;[array_obj_ref_552_word_addrgen] 
          {
            $T [root_register_req] $T [root_register_ack]
          }
          array_obj_ref_552_root_address_calculated &-> (array_obj_ref_552_word_addrgen)
          array_obj_ref_552_word_address_calculated <-& (array_obj_ref_552_word_addrgen)
          ;;[array_obj_ref_552_Sample] 
          {
            ||[word_access_start] 
            {
              ;;[word_0] 
              {
                $T [rr] $T [ra] 
              }
            }
          }
          ;;[array_obj_ref_552_Update] 
          {
            ||[word_access_complete] 
            {
              ;;[word_0] 
              {
                $T [cr] $T [ca] 
              }
            }
            ;;[array_obj_ref_552_Merge] 
            {
              $T [merge_req] $T [merge_ack]
            }
          }
          array_obj_ref_552_sample_start_ <-& (array_obj_ref_552_word_address_calculated)
          // reenable-joins
          phi_stmt_544_update_start_ o<-& (array_obj_ref_552_sample_completed_ 0)
          array_obj_ref_552_sample_start_ &-> (array_obj_ref_552_Sample)
          array_obj_ref_552_sample_completed_ <-& (array_obj_ref_552_Sample)
          array_obj_ref_552_sample_completed_ &-> ($null)
          array_obj_ref_552_update_start_ &-> (array_obj_ref_552_Update)
          array_obj_ref_552_update_completed_ <-& (array_obj_ref_552_Update)
          // self-release: 
          array_obj_ref_552_sample_start_ o<-& (array_obj_ref_552_sample_completed_ 1)
          $null &-> (array_obj_ref_552_update_start_)
          array_obj_ref_552_update_start_ o<-& (array_obj_ref_552_update_completed_ 0)
          // Target expression
          // (as target) mac_to_nic_data
          $T[WPIPE_mac_to_nic_data_550_sample_start_] 
          $T[WPIPE_mac_to_nic_data_550_sample_completed_] 
          $T[WPIPE_mac_to_nic_data_550_update_start_] 
          $T[WPIPE_mac_to_nic_data_550_update_completed_] 
          ;;[WPIPE_mac_to_nic_data_550_Sample] 
          {
            // pipe write sample-start mac_to_nic_data
            $T [req] $T [ack] 
          }
          ;;[WPIPE_mac_to_nic_data_550_Update] 
          {
            // pipe write update (complete) mac_to_nic_data
            $T [req] $T [ack] 
          }
          WPIPE_mac_to_nic_data_550_sample_start_ &-> (WPIPE_mac_to_nic_data_550_Sample)
          WPIPE_mac_to_nic_data_550_sample_completed_ <-& (WPIPE_mac_to_nic_data_550_Sample)
          WPIPE_mac_to_nic_data_550_update_start_ <-& (WPIPE_mac_to_nic_data_550_sample_completed_)
          WPIPE_mac_to_nic_data_550_update_start_ &-> (WPIPE_mac_to_nic_data_550_Update)
          WPIPE_mac_to_nic_data_550_update_completed_ <-& (WPIPE_mac_to_nic_data_550_Update)
          WPIPE_mac_to_nic_data_550_sample_start_ o<-& (WPIPE_mac_to_nic_data_550_update_completed_ 0)
          // start: Forward dependencies from buffer_1[I] to transition WPIPE_mac_to_nic_data_550_sample_start_
          WPIPE_mac_to_nic_data_550_sample_start_ <-& (array_obj_ref_552_update_completed_)
          // done: Forward dependencies from buffer_1[I] to transition WPIPE_mac_to_nic_data_550_sample_start_
          // RAW reenables for buffer_1[I]
          array_obj_ref_552_update_start_ o<-& (WPIPE_mac_to_nic_data_550_sample_completed_ 0)
          // end:  			mac_to_nic_data := buffer_1[I] $buffering 1// bits of buffering = 37. 
          // start: WAR dependencies for num
          // WAR dependency: Read: num before Write: 			$volatile num := (I + 1 ) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for num
          // start:  			$volatile num := (I + 1 ) $buffering 1
          //  file .Aa/rx_from_mac.opt.aa, line 194
          // volatile! 
          // Source expression
          // (I + 1 )
          // I
          // Target expression
          // (as target) num
          // start: WAR dependencies for num
          // WAR dependency: Read: num before Write: 			$volatile num := (I + 1 ) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for num
          // end:  			$volatile num := (I + 1 ) $buffering 1
          // (num < buf_ptr)
          // num
          // buf_ptr
          $T [loop_body_delay_to_condition_start] $delay
          loop_body_start &-> (loop_body_delay_to_condition_start)
          loop_body_delay_to_condition_start &-> (condition_evaluated)
          // start: Forward dependencies from (num < buf_ptr) to transition condition_evaluated
          condition_evaluated <-& (phi_stmt_544_update_completed_)
          // done: Forward dependencies from (num < buf_ptr) to transition condition_evaluated
          condition_evaluated &-> ($null)
          // load-store dependencies..
          // memory-space  memory_space_0
          //  array_obj_ref_552 load
          // reenable across ring for memory space memory_space_0
          // leading and trailing sets are the same... no ring dependency
          // pipe read/write dependencies for pipe mac_to_nic_data
          // read-dependencies for pipe mac_to_nic_data
          // write-dependencies for pipe mac_to_nic_data
          // signal write dependencies for mac_to_nic_data
        }
        ( first_time_through_loop_body  back_edge_to_loop_body) 
        ( condition_evaluated )
        ;; [loop_exit] 
        {
          $T [ack] 
        }
        ;; [loop_taken] 
        {
          $T [ack] 
        }
        do_while_stmt_542__entry__ <-| ($entry)
        loop_body_done <-| ( do_while_stmt_542_loop_body ) 
        condition_done |-> (loop_exit loop_taken)
        do_while_stmt_542__exit__ |-> ($exit)
        $bind condition_done <= do_while_stmt_542_loop_body : condition_evaluated
        $bind do_while_stmt_542__entry__  => do_while_stmt_542_loop_body : first_time_through_loop_body 
        $bind loop_back  => do_while_stmt_542_loop_body : back_edge_to_loop_body 
        $terminate (loop_exit loop_taken loop_body_done) (loop_back do_while_stmt_542__exit__)
      }
      do_while_stmt_542__entry__ |-> (do_while_stmt_542)
      do_while_stmt_542__exit__ <-| (do_while_stmt_542)
      do_while_stmt_542__entry__ <-| (branch_block_stmt_541__entry__)
      do_while_stmt_542__exit__ |-> (branch_block_stmt_541__exit__)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %send_to_nic1%main%
    //  file .Aa/rx_from_mac.opt.aa, line 189
    // constant-object-declarations for block %send_to_nic1%main
    //  file .Aa/rx_from_mac.opt.aa, line 185
    // constant-object-declarations for block %send_to_nic1
    //  file .Aa/rx_from_mac.opt.aa, line 180
    // constant-declarations for block %send_to_nic1%main
    //  file .Aa/rx_from_mac.opt.aa, line 185
    // do-while statement  
    //  file .Aa/rx_from_mac.opt.aa, line 187
    // constant-declarations for block %send_to_nic1%main%
    //  file .Aa/rx_from_mac.opt.aa, line 189
    // constant-declarations for phi:  			$phi I := 			  ($bitcast ($uint<10>) _b0  ) $on   $entry 			  num $on   $loopback 
    // type of target is $uint<10>
    //  file .Aa/rx_from_mac.opt.aa, line 190
    // ($bitcast ($uint<10>) _b0  )
    $constant $W[type_cast_547_wire_constant] : $int<10> := _b0000000000// 0
    // buffer_1[I]
    $constant $W[array_obj_ref_552_resized_base_address] : $int<10> := _b0000000000// 0
    $constant $W[array_obj_ref_552_offset_scale_factor_0] : $int<10> := _b0000000001// 1
    $constant $W[array_obj_ref_552_word_offset_0] : $int<10> := _b0000000000// 0
    // 1 
    $constant $W[konst_556_wire_constant] : $int<10> := _b0000000001// 1
    // block %send_to_nic1%main
    //  file .Aa/rx_from_mac.opt.aa, line 185
    // do-while statement  
    //  file .Aa/rx_from_mac.opt.aa, line 187
    // (num < buf_ptr)
    $intermediate $W[ULT_u10_u1_562_wire] : $int<1>
    // merge-statement  
    //  file .Aa/rx_from_mac.opt.aa, line 189
    // 			$phi I := 			  ($bitcast ($uint<10>) _b0  ) $on   $entry 			  num $on   $loopback 
    // type of target is $uint<10>
    //  file .Aa/rx_from_mac.opt.aa, line 190
    $W[num_558_548_buffered] : $int<10>
    // I
    $W[I_544] : $int<10>
    // 			mac_to_nic_data := buffer_1[I] $buffering 1// bits of buffering = 37. 
    //  file .Aa/rx_from_mac.opt.aa, line 193
    // buffer_1[I]
    $intermediate $W[R_I_551_resized] : $int<10>
    $intermediate $W[R_I_551_scaled] : $int<10>
    $intermediate $W[array_obj_ref_552_final_offset] : $int<10>
    $intermediate $W[array_obj_ref_552_root_address] : $int<10>
    $W[array_obj_ref_552_word_address_0] : $pointer<memory_space_0>
    $W[array_obj_ref_552_data_0] : $int<37>
    $W[array_obj_ref_552_wire] : $int<37>
    // mac_to_nic_data
    // 			$volatile num := (I + 1 ) $buffering 1
    //  file .Aa/rx_from_mac.opt.aa, line 194
    // num
    $W[num_558] : $int<10>
    // datapath-instances for block %send_to_nic1%main
    //  file .Aa/rx_from_mac.opt.aa, line 185
    // datapath-instances for do-while  
    //  file .Aa/rx_from_mac.opt.aa, line 187
    // (num < buf_ptr)
    <[ULT_u10_u1_562_inst] (num_558 buf_ptr) (ULT_u10_u1_562_wire)   $flowthrough 
    $delay ULT_u10_u1_562_inst 0
    ==0? [do_while_stmt_542_branch] (ULT_u10_u1_562_wire)
    $flowthrough
    // data-path instances for merge  
    //  file .Aa/rx_from_mac.opt.aa, line 189
    // 			$phi I := 			  ($bitcast ($uint<10>) _b0  ) $on   $entry 			  num $on   $loopback 
    // type of target is $uint<10>
    //  file .Aa/rx_from_mac.opt.aa, line 190
    # := [num_558_548_buf] (num_558) (num_558_548_buffered)     $fullrate
    $buffering $out num_558_548_buf num_558_548_buffered  1
    # $phi [phi_stmt_544] (type_cast_547_wire_constant num_558_548_buffered) ( I_544 ) $fullrate
    // $buffering  $out phi_stmt_544 I_544 2
    // 			mac_to_nic_data := buffer_1[I] $buffering 1// bits of buffering = 37. 
    //  file .Aa/rx_from_mac.opt.aa, line 193
    // buffer_1[I]
    &/ [array_obj_ref_552_index_0_resize] (I_544) (R_I_551_resized) 
    $flowthrough 
    &/ [array_obj_ref_552_index_0_rename] (R_I_551_resized) (R_I_551_scaled) 
    $flowthrough 
    &/ [array_obj_ref_552_index_offset] (R_I_551_scaled) (array_obj_ref_552_final_offset) 
    $flowthrough 
    &/ [array_obj_ref_552_root_address_inst] (array_obj_ref_552_final_offset) (array_obj_ref_552_root_address) 
    $flowthrough 
    &/ [array_obj_ref_552_addr_0] (array_obj_ref_552_root_address) (array_obj_ref_552_word_address_0) 
    $flowthrough 
    $load [array_obj_ref_552_load_0] $from memory_space_0 (array_obj_ref_552_word_address_0) (array_obj_ref_552_data_0) 
    $buffering  $in array_obj_ref_552_load_0 array_obj_ref_552_word_address_0 2
    $buffering  $out array_obj_ref_552_load_0 array_obj_ref_552_data_0 2
    $delay array_obj_ref_552_load_0 4
    &/ [array_obj_ref_552_gather_scatter] (array_obj_ref_552_data_0) (array_obj_ref_552_wire) 
    $flowthrough 
    // mac_to_nic_data
    $ioport $out [WPIPE_mac_to_nic_data_550_inst]  (array_obj_ref_552_wire) (mac_to_nic_data)  $fullrate 
    // 			$volatile num := (I + 1 ) $buffering 1
    //  file .Aa/rx_from_mac.opt.aa, line 194
    // (I + 1 )
    +[ADD_u10_u10_557_inst] (I_544 konst_556_wire_constant) (num_558)   $flowthrough 
    $delay ADD_u10_u10_557_inst 0
  }
  // end data-path
  // CP-DP links for do-while  do_while_stmt_542
  //  file .Aa/rx_from_mac.opt.aa, line 187
  phi_stmt_544 <=> (branch_block_stmt_541/do_while_stmt_542/do_while_stmt_542_loop_body/phi_stmt_544_entry_sample_req branch_block_stmt_541/do_while_stmt_542/do_while_stmt_542_loop_body/phi_stmt_544_loopback_sample_req) (branch_block_stmt_541/do_while_stmt_542/do_while_stmt_542_loop_body/phi_stmt_544_phi_mux_ack)
  num_558_548_buf <=> (branch_block_stmt_541/do_while_stmt_542/do_while_stmt_542_loop_body/R_num_548_Sample/req branch_block_stmt_541/do_while_stmt_542/do_while_stmt_542_loop_body/R_num_548_Update/req) (branch_block_stmt_541/do_while_stmt_542/do_while_stmt_542_loop_body/R_num_548_Sample/ack branch_block_stmt_541/do_while_stmt_542/do_while_stmt_542_loop_body/R_num_548_Update/ack)
  // 			mac_to_nic_data := buffer_1[I] $buffering 1// bits of buffering = 37. 
  //  file .Aa/rx_from_mac.opt.aa, line 193
  // buffer_1[I]
  // I
  array_obj_ref_552_index_0_resize <=> (branch_block_stmt_541/do_while_stmt_542/do_while_stmt_542_loop_body/array_obj_ref_552_index_resize_0/index_resize_req) (branch_block_stmt_541/do_while_stmt_542/do_while_stmt_542_loop_body/array_obj_ref_552_index_resize_0/index_resize_ack)
  array_obj_ref_552_index_0_rename <=> (branch_block_stmt_541/do_while_stmt_542/do_while_stmt_542_loop_body/array_obj_ref_552_index_scale_0/scale_rename_req) (branch_block_stmt_541/do_while_stmt_542/do_while_stmt_542_loop_body/array_obj_ref_552_index_scale_0/scale_rename_ack)
  array_obj_ref_552_index_offset <=> (branch_block_stmt_541/do_while_stmt_542/do_while_stmt_542_loop_body/array_obj_ref_552_final_index_sum_regn/req) (branch_block_stmt_541/do_while_stmt_542/do_while_stmt_542_loop_body/array_obj_ref_552_final_index_sum_regn/ack)
  array_obj_ref_552_root_address_inst <=> (branch_block_stmt_541/do_while_stmt_542/do_while_stmt_542_loop_body/array_obj_ref_552_base_plus_offset/sum_rename_req) (branch_block_stmt_541/do_while_stmt_542/do_while_stmt_542_loop_body/array_obj_ref_552_base_plus_offset/sum_rename_ack)
  array_obj_ref_552_addr_0 <=> (branch_block_stmt_541/do_while_stmt_542/do_while_stmt_542_loop_body/array_obj_ref_552_word_addrgen/root_register_req) (branch_block_stmt_541/do_while_stmt_542/do_while_stmt_542_loop_body/array_obj_ref_552_word_addrgen/root_register_ack)
  array_obj_ref_552_gather_scatter <=> (branch_block_stmt_541/do_while_stmt_542/do_while_stmt_542_loop_body/array_obj_ref_552_Update/array_obj_ref_552_Merge/merge_req) (branch_block_stmt_541/do_while_stmt_542/do_while_stmt_542_loop_body/array_obj_ref_552_Update/array_obj_ref_552_Merge/merge_ack)
  array_obj_ref_552_load_0 <=> (branch_block_stmt_541/do_while_stmt_542/do_while_stmt_542_loop_body/array_obj_ref_552_Sample/word_access_start/word_0/rr branch_block_stmt_541/do_while_stmt_542/do_while_stmt_542_loop_body/array_obj_ref_552_Update/word_access_complete/word_0/cr) (branch_block_stmt_541/do_while_stmt_542/do_while_stmt_542_loop_body/array_obj_ref_552_Sample/word_access_start/word_0/ra branch_block_stmt_541/do_while_stmt_542/do_while_stmt_542_loop_body/array_obj_ref_552_Update/word_access_complete/word_0/ca)
  // mac_to_nic_data
  WPIPE_mac_to_nic_data_550_inst <=> (branch_block_stmt_541/do_while_stmt_542/do_while_stmt_542_loop_body/WPIPE_mac_to_nic_data_550_Sample/req branch_block_stmt_541/do_while_stmt_542/do_while_stmt_542_loop_body/WPIPE_mac_to_nic_data_550_Update/req) (branch_block_stmt_541/do_while_stmt_542/do_while_stmt_542_loop_body/WPIPE_mac_to_nic_data_550_Sample/ack branch_block_stmt_541/do_while_stmt_542/do_while_stmt_542_loop_body/WPIPE_mac_to_nic_data_550_Update/ack)
  // 			$volatile num := (I + 1 ) $buffering 1
  //  file .Aa/rx_from_mac.opt.aa, line 194
  // (I + 1 )
  // I
  // (num < buf_ptr)
  // num
  // buf_ptr
  do_while_stmt_542_branch <=> (branch_block_stmt_541/do_while_stmt_542/do_while_stmt_542_loop_body/condition_evaluated) (branch_block_stmt_541/do_while_stmt_542/loop_exit/ack branch_block_stmt_541/do_while_stmt_542/loop_taken/ack)
}
$module [send_to_nic2] 
{
  $in buf_ptr:$int<10>
  // can point into 
  // pipe-declarations for block %send_to_nic2
  //  file .Aa/rx_from_mac.opt.aa, line 198
  // pipe-declarations for block %send_to_nic2%main
  //  file .Aa/rx_from_mac.opt.aa, line 203
  // memory-space 1 is read from.
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    <>[branch_block_stmt_567] // Branch Block  file .Aa/rx_from_mac.opt.aa, line 203
    {
      $P [branch_block_stmt_567__entry__]
      branch_block_stmt_567__entry__ <-| ($entry)
      $P [branch_block_stmt_567__exit__]
      branch_block_stmt_567__exit__ |-> ($exit)
      $P [do_while_stmt_568__entry__] 
      $P [do_while_stmt_568__exit__] 
      // do-while-statement  
      //  file .Aa/rx_from_mac.opt.aa, line 205
      <o> [do_while_stmt_568]  $depth 5 $buffering 1 
      {
        $P[do_while_stmt_568__entry__] 
        $P[do_while_stmt_568__exit__] 
        $P[loop_back] 
        $P[condition_done] 
        $P[loop_body_done] 
        $pipeline [do_while_stmt_568_loop_body] 
        {
          // Pipelined!
          $T[back_edge_to_loop_body] 
          $T[first_time_through_loop_body] 
          $T[loop_body_start] 
          $T[condition_evaluated] 
          $transitionmerge [entry_tmerge] (back_edge_to_loop_body first_time_through_loop_body) (loop_body_start)
          $entry <-& (loop_body_start)
          $T[aggregated_phi_sample_req] 
          $T[aggregated_phi_sample_ack] 
          $T[aggregated_phi_update_req] 
          $T[aggregated_phi_update_ack] 
          // do not loop-back unless all phi's have used up their triggering tokens.
          condition_evaluated <-& (aggregated_phi_update_ack)
          aggregated_phi_sample_req o<-& (aggregated_phi_update_ack 0)
          // start:  PHI statement phi_stmt_570
          // 			$phi I := 			  ($bitcast ($uint<10>) _b0  ) $on   $entry 			  num $on   $loopback 
          // type of target is $uint<10>
          $T[phi_stmt_570_sample_start_] 
          $T[phi_stmt_570_sample_completed_] 
          $T[phi_stmt_570_update_start_] 
          $T[phi_stmt_570_update_completed_] 
          $T[phi_stmt_570_sample_start__ps] 
          phi_stmt_570_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_570_sample_completed__ps] 
          phi_stmt_570_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_570_update_start__ps] 
          phi_stmt_570_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_570_update_completed__ps] 
          phi_stmt_570_update_completed_ <-& (phi_stmt_570_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_570_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_570_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_570_update_start_)
          $T[phi_stmt_570_loopback_trigger] 
          phi_stmt_570_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_570_loopback_sample_req] 
          $T[phi_stmt_570_loopback_sample_req_ps] 
          phi_stmt_570_loopback_sample_req <-& (phi_stmt_570_loopback_sample_req_ps)
          phi_stmt_570_loopback_sample_req &-> ($null)
          $T[phi_stmt_570_entry_trigger] 
          phi_stmt_570_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_570_entry_sample_req] 
          $T[phi_stmt_570_entry_sample_req_ps] 
          phi_stmt_570_entry_sample_req <-& (phi_stmt_570_entry_sample_req_ps)
          phi_stmt_570_entry_sample_req &-> ($null)
          phi_stmt_570_update_start_ o<-& (phi_stmt_570_update_completed_ 0)
          phi_stmt_570_sample_start_ o<-& (phi_stmt_570_sample_completed_ 1)
          $T[phi_stmt_570_merged_reqs] 
          $T[phi_stmt_570_phi_mux_ack] 
          $T[phi_stmt_570_phi_mux_ack_ps] 
          phi_stmt_570_phi_mux_ack_ps <-& (phi_stmt_570_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_570_update_completed_)
          $T[type_cast_573_sample_start__ps] 
          $T[type_cast_573_sample_completed__ps] 
          $T[type_cast_573_update_start__ps] 
          $T[type_cast_573_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[type_cast_573_sample_start_] 
          $T[type_cast_573_sample_completed_] 
          type_cast_573_sample_completed_ <-& (type_cast_573_sample_start_)
          $T[type_cast_573_update_start_] 
          $T [type_cast_573_update_completed_] $delay 
          type_cast_573_update_completed_ <-& (type_cast_573_update_start_)
          // Phi start dependency for implicit/constant alternative.
          type_cast_573_sample_start_ <-& (type_cast_573_sample_start__ps)
          type_cast_573_update_start_ <-& (type_cast_573_update_start__ps)
          // Phi complete dependency.
          type_cast_573_sample_completed__ps <-& (type_cast_573_sample_completed_)
          type_cast_573_update_completed__ps <-& (type_cast_573_update_completed_)
          $T[R_num_574_sample_start__ps] 
          $T[R_num_574_sample_completed__ps] 
          $T[R_num_574_update_start__ps] 
          $T[R_num_574_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_num_574_sample_start_] 
          $T[R_num_574_sample_completed_] 
          $T[R_num_574_update_start_] 
          $T[R_num_574_update_completed_] 
          ;;[R_num_574_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_num_574_sample_start_ &-> (R_num_574_Sample)
          R_num_574_sample_completed_ <-& (R_num_574_Sample)
          ;;[R_num_574_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_num_574_update_start_ &-> (R_num_574_Update)
          R_num_574_update_completed_ <-& (R_num_574_Update)
          // RAW reenables for num
          // Phi start dependency for implicit/constant alternative.
          R_num_574_sample_start_ <-& (R_num_574_sample_start__ps)
          R_num_574_update_start_ <-& (R_num_574_update_start__ps)
          // Phi complete dependency.
          R_num_574_sample_completed__ps <-& (R_num_574_sample_completed_)
          R_num_574_update_completed__ps <-& (R_num_574_update_completed_)
          $phisequencer [ phi_stmt_570_phi_seq] : 
          phi_stmt_570_entry_trigger type_cast_573_sample_start__ps type_cast_573_sample_completed__ps type_cast_573_update_start__ps type_cast_573_update_completed__ps phi_stmt_570_loopback_trigger R_num_574_sample_start__ps R_num_574_sample_completed__ps R_num_574_update_start__ps R_num_574_update_completed__ps :
          phi_stmt_570_sample_start__ps phi_stmt_570_sample_completed__ps phi_stmt_570_update_start__ps phi_stmt_570_update_completed__ps :
          phi_stmt_570_entry_sample_req_ps phi_stmt_570_loopback_sample_req_ps : 
          phi_stmt_570_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_570
          // start:  			mac_to_nic_data := buffer_2[I] $buffering 1// bits of buffering = 37. 
          //  file .Aa/rx_from_mac.opt.aa, line 211
          // Source expression
          // buffer_2[I]
          $T[array_obj_ref_578_base_address_calculated] 
          $T[array_obj_ref_578_sample_start_] 
          $T[array_obj_ref_578_sample_completed_] 
          $T[array_obj_ref_578_update_start_] 
          $T[array_obj_ref_578_update_completed_] 
          $T[array_obj_ref_578_word_address_calculated] 
          $T[array_obj_ref_578_root_address_calculated] 
          $T[array_obj_ref_578_offset_calculated] 
          $T[array_obj_ref_578_index_resized_0] 
          $T[array_obj_ref_578_index_scaled_0] 
          $T[array_obj_ref_578_index_computed_0] 
          // I
          // start: Forward dependencies from I to transition array_obj_ref_578_index_computed_0
          array_obj_ref_578_index_computed_0 <-& (phi_stmt_570_update_completed_)
          // done: Forward dependencies from I to transition array_obj_ref_578_index_computed_0
          ;;[array_obj_ref_578_index_resize_0] 
          {
            $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
          }
          array_obj_ref_578_index_computed_0 &-> (array_obj_ref_578_index_resize_0)
          array_obj_ref_578_index_resized_0 <-& (array_obj_ref_578_index_resize_0)
          ;;[array_obj_ref_578_index_scale_0] 
          {
            $T [scale_rename_req] $T [scale_rename_ack] // rename 
          }
          array_obj_ref_578_index_resized_0 &-> (array_obj_ref_578_index_scale_0)
          array_obj_ref_578_index_scaled_0 <-& (array_obj_ref_578_index_scale_0)
          ;;[array_obj_ref_578_final_index_sum_regn] 
          {
            $T [req] $T [ack] // rename
          }
          array_obj_ref_578_index_scaled_0 &-> (array_obj_ref_578_final_index_sum_regn)
          array_obj_ref_578_offset_calculated <-& (array_obj_ref_578_final_index_sum_regn)
          ;;[array_obj_ref_578_base_plus_offset] 
          {
            $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
          }
          array_obj_ref_578_offset_calculated &-> (array_obj_ref_578_base_plus_offset)
          array_obj_ref_578_root_address_calculated <-& (array_obj_ref_578_base_plus_offset)
          ;;[array_obj_ref_578_word_addrgen] 
          {
            $T [root_register_req] $T [root_register_ack]
          }
          array_obj_ref_578_root_address_calculated &-> (array_obj_ref_578_word_addrgen)
          array_obj_ref_578_word_address_calculated <-& (array_obj_ref_578_word_addrgen)
          ;;[array_obj_ref_578_Sample] 
          {
            ||[word_access_start] 
            {
              ;;[word_0] 
              {
                $T [rr] $T [ra] 
              }
            }
          }
          ;;[array_obj_ref_578_Update] 
          {
            ||[word_access_complete] 
            {
              ;;[word_0] 
              {
                $T [cr] $T [ca] 
              }
            }
            ;;[array_obj_ref_578_Merge] 
            {
              $T [merge_req] $T [merge_ack]
            }
          }
          array_obj_ref_578_sample_start_ <-& (array_obj_ref_578_word_address_calculated)
          // reenable-joins
          phi_stmt_570_update_start_ o<-& (array_obj_ref_578_sample_completed_ 0)
          array_obj_ref_578_sample_start_ &-> (array_obj_ref_578_Sample)
          array_obj_ref_578_sample_completed_ <-& (array_obj_ref_578_Sample)
          array_obj_ref_578_sample_completed_ &-> ($null)
          array_obj_ref_578_update_start_ &-> (array_obj_ref_578_Update)
          array_obj_ref_578_update_completed_ <-& (array_obj_ref_578_Update)
          // self-release: 
          array_obj_ref_578_sample_start_ o<-& (array_obj_ref_578_sample_completed_ 1)
          $null &-> (array_obj_ref_578_update_start_)
          array_obj_ref_578_update_start_ o<-& (array_obj_ref_578_update_completed_ 0)
          // Target expression
          // (as target) mac_to_nic_data
          $T[WPIPE_mac_to_nic_data_576_sample_start_] 
          $T[WPIPE_mac_to_nic_data_576_sample_completed_] 
          $T[WPIPE_mac_to_nic_data_576_update_start_] 
          $T[WPIPE_mac_to_nic_data_576_update_completed_] 
          ;;[WPIPE_mac_to_nic_data_576_Sample] 
          {
            // pipe write sample-start mac_to_nic_data
            $T [req] $T [ack] 
          }
          ;;[WPIPE_mac_to_nic_data_576_Update] 
          {
            // pipe write update (complete) mac_to_nic_data
            $T [req] $T [ack] 
          }
          WPIPE_mac_to_nic_data_576_sample_start_ &-> (WPIPE_mac_to_nic_data_576_Sample)
          WPIPE_mac_to_nic_data_576_sample_completed_ <-& (WPIPE_mac_to_nic_data_576_Sample)
          WPIPE_mac_to_nic_data_576_update_start_ <-& (WPIPE_mac_to_nic_data_576_sample_completed_)
          WPIPE_mac_to_nic_data_576_update_start_ &-> (WPIPE_mac_to_nic_data_576_Update)
          WPIPE_mac_to_nic_data_576_update_completed_ <-& (WPIPE_mac_to_nic_data_576_Update)
          WPIPE_mac_to_nic_data_576_sample_start_ o<-& (WPIPE_mac_to_nic_data_576_update_completed_ 0)
          // start: Forward dependencies from buffer_2[I] to transition WPIPE_mac_to_nic_data_576_sample_start_
          WPIPE_mac_to_nic_data_576_sample_start_ <-& (array_obj_ref_578_update_completed_)
          // done: Forward dependencies from buffer_2[I] to transition WPIPE_mac_to_nic_data_576_sample_start_
          // RAW reenables for buffer_2[I]
          array_obj_ref_578_update_start_ o<-& (WPIPE_mac_to_nic_data_576_sample_completed_ 0)
          // end:  			mac_to_nic_data := buffer_2[I] $buffering 1// bits of buffering = 37. 
          // start: WAR dependencies for num
          // WAR dependency: Read: num before Write: 			$volatile num := (I + 1 ) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for num
          // start:  			$volatile num := (I + 1 ) $buffering 1
          //  file .Aa/rx_from_mac.opt.aa, line 212
          // volatile! 
          // Source expression
          // (I + 1 )
          // I
          // Target expression
          // (as target) num
          // start: WAR dependencies for num
          // WAR dependency: Read: num before Write: 			$volatile num := (I + 1 ) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for num
          // end:  			$volatile num := (I + 1 ) $buffering 1
          // (num < buf_ptr)
          // num
          // buf_ptr
          $T [loop_body_delay_to_condition_start] $delay
          loop_body_start &-> (loop_body_delay_to_condition_start)
          loop_body_delay_to_condition_start &-> (condition_evaluated)
          // start: Forward dependencies from (num < buf_ptr) to transition condition_evaluated
          condition_evaluated <-& (phi_stmt_570_update_completed_)
          // done: Forward dependencies from (num < buf_ptr) to transition condition_evaluated
          condition_evaluated &-> ($null)
          // load-store dependencies..
          // memory-space  memory_space_1
          //  array_obj_ref_578 load
          // reenable across ring for memory space memory_space_1
          // leading and trailing sets are the same... no ring dependency
          // pipe read/write dependencies for pipe mac_to_nic_data
          // read-dependencies for pipe mac_to_nic_data
          // write-dependencies for pipe mac_to_nic_data
          // signal write dependencies for mac_to_nic_data
        }
        ( first_time_through_loop_body  back_edge_to_loop_body) 
        ( condition_evaluated )
        ;; [loop_exit] 
        {
          $T [ack] 
        }
        ;; [loop_taken] 
        {
          $T [ack] 
        }
        do_while_stmt_568__entry__ <-| ($entry)
        loop_body_done <-| ( do_while_stmt_568_loop_body ) 
        condition_done |-> (loop_exit loop_taken)
        do_while_stmt_568__exit__ |-> ($exit)
        $bind condition_done <= do_while_stmt_568_loop_body : condition_evaluated
        $bind do_while_stmt_568__entry__  => do_while_stmt_568_loop_body : first_time_through_loop_body 
        $bind loop_back  => do_while_stmt_568_loop_body : back_edge_to_loop_body 
        $terminate (loop_exit loop_taken loop_body_done) (loop_back do_while_stmt_568__exit__)
      }
      do_while_stmt_568__entry__ |-> (do_while_stmt_568)
      do_while_stmt_568__exit__ <-| (do_while_stmt_568)
      do_while_stmt_568__entry__ <-| (branch_block_stmt_567__entry__)
      do_while_stmt_568__exit__ |-> (branch_block_stmt_567__exit__)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %send_to_nic2%main%
    //  file .Aa/rx_from_mac.opt.aa, line 207
    // constant-object-declarations for block %send_to_nic2%main
    //  file .Aa/rx_from_mac.opt.aa, line 203
    // constant-object-declarations for block %send_to_nic2
    //  file .Aa/rx_from_mac.opt.aa, line 198
    // constant-declarations for block %send_to_nic2%main
    //  file .Aa/rx_from_mac.opt.aa, line 203
    // do-while statement  
    //  file .Aa/rx_from_mac.opt.aa, line 205
    // constant-declarations for block %send_to_nic2%main%
    //  file .Aa/rx_from_mac.opt.aa, line 207
    // constant-declarations for phi:  			$phi I := 			  ($bitcast ($uint<10>) _b0  ) $on   $entry 			  num $on   $loopback 
    // type of target is $uint<10>
    //  file .Aa/rx_from_mac.opt.aa, line 208
    // ($bitcast ($uint<10>) _b0  )
    $constant $W[type_cast_573_wire_constant] : $int<10> := _b0000000000// 0
    // buffer_2[I]
    $constant $W[array_obj_ref_578_resized_base_address] : $int<10> := _b0000000000// 0
    $constant $W[array_obj_ref_578_offset_scale_factor_0] : $int<10> := _b0000000001// 1
    $constant $W[array_obj_ref_578_word_offset_0] : $int<10> := _b0000000000// 0
    // 1 
    $constant $W[konst_582_wire_constant] : $int<10> := _b0000000001// 1
    // block %send_to_nic2%main
    //  file .Aa/rx_from_mac.opt.aa, line 203
    // do-while statement  
    //  file .Aa/rx_from_mac.opt.aa, line 205
    // (num < buf_ptr)
    $intermediate $W[ULT_u10_u1_588_wire] : $int<1>
    // merge-statement  
    //  file .Aa/rx_from_mac.opt.aa, line 207
    // 			$phi I := 			  ($bitcast ($uint<10>) _b0  ) $on   $entry 			  num $on   $loopback 
    // type of target is $uint<10>
    //  file .Aa/rx_from_mac.opt.aa, line 208
    $W[num_584_574_buffered] : $int<10>
    // I
    $W[I_570] : $int<10>
    // 			mac_to_nic_data := buffer_2[I] $buffering 1// bits of buffering = 37. 
    //  file .Aa/rx_from_mac.opt.aa, line 211
    // buffer_2[I]
    $intermediate $W[R_I_577_resized] : $int<10>
    $intermediate $W[R_I_577_scaled] : $int<10>
    $intermediate $W[array_obj_ref_578_final_offset] : $int<10>
    $intermediate $W[array_obj_ref_578_root_address] : $int<10>
    $W[array_obj_ref_578_word_address_0] : $pointer<memory_space_1>
    $W[array_obj_ref_578_data_0] : $int<37>
    $W[array_obj_ref_578_wire] : $int<37>
    // mac_to_nic_data
    // 			$volatile num := (I + 1 ) $buffering 1
    //  file .Aa/rx_from_mac.opt.aa, line 212
    // num
    $W[num_584] : $int<10>
    // datapath-instances for block %send_to_nic2%main
    //  file .Aa/rx_from_mac.opt.aa, line 203
    // datapath-instances for do-while  
    //  file .Aa/rx_from_mac.opt.aa, line 205
    // (num < buf_ptr)
    <[ULT_u10_u1_588_inst] (num_584 buf_ptr) (ULT_u10_u1_588_wire)   $flowthrough 
    $delay ULT_u10_u1_588_inst 0
    ==0? [do_while_stmt_568_branch] (ULT_u10_u1_588_wire)
    $flowthrough
    // data-path instances for merge  
    //  file .Aa/rx_from_mac.opt.aa, line 207
    // 			$phi I := 			  ($bitcast ($uint<10>) _b0  ) $on   $entry 			  num $on   $loopback 
    // type of target is $uint<10>
    //  file .Aa/rx_from_mac.opt.aa, line 208
    # := [num_584_574_buf] (num_584) (num_584_574_buffered)     $fullrate
    $buffering $out num_584_574_buf num_584_574_buffered  1
    # $phi [phi_stmt_570] (type_cast_573_wire_constant num_584_574_buffered) ( I_570 ) $fullrate
    // $buffering  $out phi_stmt_570 I_570 2
    // 			mac_to_nic_data := buffer_2[I] $buffering 1// bits of buffering = 37. 
    //  file .Aa/rx_from_mac.opt.aa, line 211
    // buffer_2[I]
    &/ [array_obj_ref_578_index_0_resize] (I_570) (R_I_577_resized) 
    $flowthrough 
    &/ [array_obj_ref_578_index_0_rename] (R_I_577_resized) (R_I_577_scaled) 
    $flowthrough 
    &/ [array_obj_ref_578_index_offset] (R_I_577_scaled) (array_obj_ref_578_final_offset) 
    $flowthrough 
    &/ [array_obj_ref_578_root_address_inst] (array_obj_ref_578_final_offset) (array_obj_ref_578_root_address) 
    $flowthrough 
    &/ [array_obj_ref_578_addr_0] (array_obj_ref_578_root_address) (array_obj_ref_578_word_address_0) 
    $flowthrough 
    $load [array_obj_ref_578_load_0] $from memory_space_1 (array_obj_ref_578_word_address_0) (array_obj_ref_578_data_0) 
    $buffering  $in array_obj_ref_578_load_0 array_obj_ref_578_word_address_0 2
    $buffering  $out array_obj_ref_578_load_0 array_obj_ref_578_data_0 2
    $delay array_obj_ref_578_load_0 4
    &/ [array_obj_ref_578_gather_scatter] (array_obj_ref_578_data_0) (array_obj_ref_578_wire) 
    $flowthrough 
    // mac_to_nic_data
    $ioport $out [WPIPE_mac_to_nic_data_576_inst]  (array_obj_ref_578_wire) (mac_to_nic_data)  $fullrate 
    // 			$volatile num := (I + 1 ) $buffering 1
    //  file .Aa/rx_from_mac.opt.aa, line 212
    // (I + 1 )
    +[ADD_u10_u10_583_inst] (I_570 konst_582_wire_constant) (num_584)   $flowthrough 
    $delay ADD_u10_u10_583_inst 0
  }
  // end data-path
  // CP-DP links for do-while  do_while_stmt_568
  //  file .Aa/rx_from_mac.opt.aa, line 205
  phi_stmt_570 <=> (branch_block_stmt_567/do_while_stmt_568/do_while_stmt_568_loop_body/phi_stmt_570_entry_sample_req branch_block_stmt_567/do_while_stmt_568/do_while_stmt_568_loop_body/phi_stmt_570_loopback_sample_req) (branch_block_stmt_567/do_while_stmt_568/do_while_stmt_568_loop_body/phi_stmt_570_phi_mux_ack)
  num_584_574_buf <=> (branch_block_stmt_567/do_while_stmt_568/do_while_stmt_568_loop_body/R_num_574_Sample/req branch_block_stmt_567/do_while_stmt_568/do_while_stmt_568_loop_body/R_num_574_Update/req) (branch_block_stmt_567/do_while_stmt_568/do_while_stmt_568_loop_body/R_num_574_Sample/ack branch_block_stmt_567/do_while_stmt_568/do_while_stmt_568_loop_body/R_num_574_Update/ack)
  // 			mac_to_nic_data := buffer_2[I] $buffering 1// bits of buffering = 37. 
  //  file .Aa/rx_from_mac.opt.aa, line 211
  // buffer_2[I]
  // I
  array_obj_ref_578_index_0_resize <=> (branch_block_stmt_567/do_while_stmt_568/do_while_stmt_568_loop_body/array_obj_ref_578_index_resize_0/index_resize_req) (branch_block_stmt_567/do_while_stmt_568/do_while_stmt_568_loop_body/array_obj_ref_578_index_resize_0/index_resize_ack)
  array_obj_ref_578_index_0_rename <=> (branch_block_stmt_567/do_while_stmt_568/do_while_stmt_568_loop_body/array_obj_ref_578_index_scale_0/scale_rename_req) (branch_block_stmt_567/do_while_stmt_568/do_while_stmt_568_loop_body/array_obj_ref_578_index_scale_0/scale_rename_ack)
  array_obj_ref_578_index_offset <=> (branch_block_stmt_567/do_while_stmt_568/do_while_stmt_568_loop_body/array_obj_ref_578_final_index_sum_regn/req) (branch_block_stmt_567/do_while_stmt_568/do_while_stmt_568_loop_body/array_obj_ref_578_final_index_sum_regn/ack)
  array_obj_ref_578_root_address_inst <=> (branch_block_stmt_567/do_while_stmt_568/do_while_stmt_568_loop_body/array_obj_ref_578_base_plus_offset/sum_rename_req) (branch_block_stmt_567/do_while_stmt_568/do_while_stmt_568_loop_body/array_obj_ref_578_base_plus_offset/sum_rename_ack)
  array_obj_ref_578_addr_0 <=> (branch_block_stmt_567/do_while_stmt_568/do_while_stmt_568_loop_body/array_obj_ref_578_word_addrgen/root_register_req) (branch_block_stmt_567/do_while_stmt_568/do_while_stmt_568_loop_body/array_obj_ref_578_word_addrgen/root_register_ack)
  array_obj_ref_578_gather_scatter <=> (branch_block_stmt_567/do_while_stmt_568/do_while_stmt_568_loop_body/array_obj_ref_578_Update/array_obj_ref_578_Merge/merge_req) (branch_block_stmt_567/do_while_stmt_568/do_while_stmt_568_loop_body/array_obj_ref_578_Update/array_obj_ref_578_Merge/merge_ack)
  array_obj_ref_578_load_0 <=> (branch_block_stmt_567/do_while_stmt_568/do_while_stmt_568_loop_body/array_obj_ref_578_Sample/word_access_start/word_0/rr branch_block_stmt_567/do_while_stmt_568/do_while_stmt_568_loop_body/array_obj_ref_578_Update/word_access_complete/word_0/cr) (branch_block_stmt_567/do_while_stmt_568/do_while_stmt_568_loop_body/array_obj_ref_578_Sample/word_access_start/word_0/ra branch_block_stmt_567/do_while_stmt_568/do_while_stmt_568_loop_body/array_obj_ref_578_Update/word_access_complete/word_0/ca)
  // mac_to_nic_data
  WPIPE_mac_to_nic_data_576_inst <=> (branch_block_stmt_567/do_while_stmt_568/do_while_stmt_568_loop_body/WPIPE_mac_to_nic_data_576_Sample/req branch_block_stmt_567/do_while_stmt_568/do_while_stmt_568_loop_body/WPIPE_mac_to_nic_data_576_Update/req) (branch_block_stmt_567/do_while_stmt_568/do_while_stmt_568_loop_body/WPIPE_mac_to_nic_data_576_Sample/ack branch_block_stmt_567/do_while_stmt_568/do_while_stmt_568_loop_body/WPIPE_mac_to_nic_data_576_Update/ack)
  // 			$volatile num := (I + 1 ) $buffering 1
  //  file .Aa/rx_from_mac.opt.aa, line 212
  // (I + 1 )
  // I
  // (num < buf_ptr)
  // num
  // buf_ptr
  do_while_stmt_568_branch <=> (branch_block_stmt_567/do_while_stmt_568/do_while_stmt_568_loop_body/condition_evaluated) (branch_block_stmt_567/do_while_stmt_568/loop_exit/ack branch_block_stmt_567/do_while_stmt_568/loop_taken/ack)
}
$module [rx_fifo_reader] 
{
  // pipe-declarations for block %rx_fifo_reader
  //  file .Aa/rx_from_mac.opt.aa, line 216
  // pipe-declarations for block %rx_fifo_reader%pckt_good_check_fast
  //  file .Aa/rx_from_mac.opt.aa, line 221
  // pipe-declarations for block %rx_fifo_reader%pckt_good_check_fast%
  //  file .Aa/rx_from_mac.opt.aa, line 223
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    <>[branch_block_stmt_592] // Branch Block  file .Aa/rx_from_mac.opt.aa, line 221
    {
      $P [branch_block_stmt_592__entry__]
      branch_block_stmt_592__entry__ <-| ($entry)
      $P [branch_block_stmt_592__exit__]
      branch_block_stmt_592__exit__ |-> ($exit)
      $P [merge_stmt_593__entry__] 
      $P [merge_stmt_593__exit__] 
      $P [call_stmt_596_to_call_stmt_605__entry__] 
      $P [call_stmt_596_to_call_stmt_605__exit__] 
      $P [loopback]
      ::[call_stmt_596_to_call_stmt_605] 
      {
        // start: 		$call load_buffer1 () (last_written_pointer_1 packet_status_1 ) 
        //  file .Aa/rx_from_mac.opt.aa, line 225
        $T[call_stmt_596_sample_start_] 
        $T[call_stmt_596_sample_completed_] 
        $T[call_stmt_596_update_start_] 
        $T[call_stmt_596_update_completed_] 
        ;;[call_stmt_596_Sample] 
        {
          $T [crr] $T [cra] 
        }
        ;;[call_stmt_596_Update] 
        {
          $T [ccr] $T [cca] 
        }
        call_stmt_596_sample_start_ &-> (call_stmt_596_Sample)
        call_stmt_596_sample_completed_ <-& (call_stmt_596_Sample)
        call_stmt_596_sample_completed_ &-> ($null)
        call_stmt_596_update_start_ &-> (call_stmt_596_Update)
        call_stmt_596_update_completed_ <-& (call_stmt_596_Update)
        // Call output argument 0
        // (as target) last_written_pointer_1
        // Call output argument 1
        // (as target) packet_status_1
        // start: WAR dependencies for last_written_pointer_1
        // done: WAR dependencies for last_written_pointer_1
        // start: WAR dependencies for packet_status_1
        // done: WAR dependencies for packet_status_1
        // end: 		$call load_buffer1 () (last_written_pointer_1 packet_status_1 ) 
        // start: 		$guard (packet_status_1) $call send_to_nic1 (last_written_pointer_1 ) () 
        //  file .Aa/rx_from_mac.opt.aa, line 226
        $T[call_stmt_599_sample_start_] 
        $T[call_stmt_599_sample_completed_] 
        $T[call_stmt_599_update_start_] 
        $T[call_stmt_599_update_completed_] 
        // Guard expression
        // packet_status_1
        // start: Forward dependencies from packet_status_1 to transition call_stmt_599_sample_start_
        call_stmt_599_sample_start_ <-& (call_stmt_596_update_completed_)
        // done: Forward dependencies from packet_status_1 to transition call_stmt_599_sample_start_
        // Call input argument 0
        // last_written_pointer_1
        // start: Forward dependencies from last_written_pointer_1 to transition call_stmt_599_sample_start_
        call_stmt_599_sample_start_ <-& (call_stmt_596_update_completed_)
        // done: Forward dependencies from last_written_pointer_1 to transition call_stmt_599_sample_start_
        ;;[call_stmt_599_Sample] 
        {
          $T [crr] $T [cra] 
        }
        ;;[call_stmt_599_Update] 
        {
          $T [ccr] $T [cca] 
        }
        call_stmt_599_sample_start_ &-> (call_stmt_599_Sample)
        call_stmt_599_sample_completed_ <-& (call_stmt_599_Sample)
        call_stmt_599_sample_completed_ &-> ($null)
        call_stmt_599_update_start_ &-> (call_stmt_599_Update)
        call_stmt_599_update_completed_ <-& (call_stmt_599_Update)
        // end: 		$guard (packet_status_1) $call send_to_nic1 (last_written_pointer_1 ) () 
        // start: 		$call load_buffer2 () (last_written_pointer_2 packet_status_2 ) 
        //  file .Aa/rx_from_mac.opt.aa, line 227
        $T[call_stmt_602_sample_start_] 
        $T[call_stmt_602_sample_completed_] 
        $T[call_stmt_602_update_start_] 
        $T[call_stmt_602_update_completed_] 
        ;;[call_stmt_602_Sample] 
        {
          $T [crr] $T [cra] 
        }
        ;;[call_stmt_602_Update] 
        {
          $T [ccr] $T [cca] 
        }
        call_stmt_602_sample_start_ &-> (call_stmt_602_Sample)
        call_stmt_602_sample_completed_ <-& (call_stmt_602_Sample)
        call_stmt_602_sample_completed_ &-> ($null)
        call_stmt_602_update_start_ &-> (call_stmt_602_Update)
        call_stmt_602_update_completed_ <-& (call_stmt_602_Update)
        // Call output argument 0
        // (as target) last_written_pointer_2
        // Call output argument 1
        // (as target) packet_status_2
        // start: WAR dependencies for last_written_pointer_2
        // done: WAR dependencies for last_written_pointer_2
        // start: WAR dependencies for packet_status_2
        // done: WAR dependencies for packet_status_2
        // end: 		$call load_buffer2 () (last_written_pointer_2 packet_status_2 ) 
        // start: 		$guard (packet_status_2) $call send_to_nic2 (last_written_pointer_2 ) () 
        //  file .Aa/rx_from_mac.opt.aa, line 228
        $T[call_stmt_605_sample_start_] 
        $T[call_stmt_605_sample_completed_] 
        $T[call_stmt_605_update_start_] 
        $T[call_stmt_605_update_completed_] 
        // Guard expression
        // packet_status_2
        // start: Forward dependencies from packet_status_2 to transition call_stmt_605_sample_start_
        call_stmt_605_sample_start_ <-& (call_stmt_602_update_completed_)
        // done: Forward dependencies from packet_status_2 to transition call_stmt_605_sample_start_
        // Call input argument 0
        // last_written_pointer_2
        // start: Forward dependencies from last_written_pointer_2 to transition call_stmt_605_sample_start_
        call_stmt_605_sample_start_ <-& (call_stmt_602_update_completed_)
        // done: Forward dependencies from last_written_pointer_2 to transition call_stmt_605_sample_start_
        ;;[call_stmt_605_Sample] 
        {
          $T [crr] $T [cra] 
        }
        ;;[call_stmt_605_Update] 
        {
          $T [ccr] $T [cca] 
        }
        call_stmt_605_sample_start_ &-> (call_stmt_605_Sample)
        call_stmt_605_sample_completed_ <-& (call_stmt_605_Sample)
        call_stmt_605_sample_completed_ &-> ($null)
        call_stmt_605_update_start_ &-> (call_stmt_605_Update)
        call_stmt_605_update_completed_ <-& (call_stmt_605_Update)
        // end: 		$guard (packet_status_2) $call send_to_nic2 (last_written_pointer_2 ) () 
        // load-store dependencies..
        // memory-space  memory_space_1
        //  call_stmt_602 store
        //  call_stmt_605 load
        $T [call_stmt_602_call_stmt_605_delay] $delay
        // call_stmt_602(store) -> call_stmt_605(load)
        call_stmt_605_sample_start_ <-& (call_stmt_602_call_stmt_605_delay)
        call_stmt_602_call_stmt_605_delay <-& (call_stmt_602_update_completed_)
        // memory-space  memory_space_0
        //  call_stmt_596 store
        //  call_stmt_599 load
        $T [call_stmt_596_call_stmt_599_delay] $delay
        // call_stmt_596(store) -> call_stmt_599(load)
        call_stmt_599_sample_start_ <-& (call_stmt_596_call_stmt_599_delay)
        call_stmt_596_call_stmt_599_delay <-& (call_stmt_596_update_completed_)
        // pipe read/write dependencies for pipe mac_to_nic_data
        // read-dependencies for pipe mac_to_nic_data
        // write-dependencies for pipe mac_to_nic_data
        call_stmt_605_sample_start_ <-& (call_stmt_599_update_completed_)
        // signal write dependencies for mac_to_nic_data
        // pipe read/write dependencies for pipe mac_data
        // read-dependencies for pipe mac_data
        call_stmt_602_sample_start_ <-& (call_stmt_596_update_completed_)
        // write-dependencies for pipe mac_data
        // signal write dependencies for mac_data
      }
      call_stmt_596_to_call_stmt_605__entry__ |-> (call_stmt_596_to_call_stmt_605)
      call_stmt_596_to_call_stmt_605__exit__ <-| (call_stmt_596_to_call_stmt_605)
      // control-path for merge  
      //  file .Aa/rx_from_mac.opt.aa, line 223
      ;;[merge_stmt_593_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      merge_stmt_593__entry__ |-> (merge_stmt_593_dead_link)
      merge_stmt_593__exit__ <-| (merge_stmt_593_dead_link)
      //---------------------   merge statement  file .Aa/rx_from_mac.opt.aa, line 223  --------------------------
      ||[merge_stmt_593__entry___PhiReq] 
      {
        // no phi statements in merge..
      }
      merge_stmt_593__entry__ |-> (merge_stmt_593__entry___PhiReq)
      ||[loopback_PhiReq] 
      {
        // no phi statements in merge..
      }
      loopback |-> (loopback_PhiReq)
      $P [merge_stmt_593_PhiReqMerge] 
      merge_stmt_593_PhiReqMerge <-| ( merge_stmt_593__entry___PhiReq  loopback_PhiReq )
      ||[merge_stmt_593_PhiAck] 
      {
        $T [dummy] 
      }
      merge_stmt_593_PhiReqMerge |-> (merge_stmt_593_PhiAck)
      merge_stmt_593__exit__  <-| (merge_stmt_593_PhiAck)
      //---------------------  end of merge statement  file .Aa/rx_from_mac.opt.aa, line 223  --------------------------
      merge_stmt_593__entry__ <-| (branch_block_stmt_592__entry__)
      call_stmt_596_to_call_stmt_605__entry__ <-| (merge_stmt_593__exit__)
      loopback <-| (call_stmt_596_to_call_stmt_605__exit__)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %rx_fifo_reader%pckt_good_check_fast%
    //  file .Aa/rx_from_mac.opt.aa, line 223
    // constant-object-declarations for block %rx_fifo_reader%pckt_good_check_fast
    //  file .Aa/rx_from_mac.opt.aa, line 221
    // constant-object-declarations for block %rx_fifo_reader
    //  file .Aa/rx_from_mac.opt.aa, line 216
    // constant-declarations for block %rx_fifo_reader%pckt_good_check_fast
    //  file .Aa/rx_from_mac.opt.aa, line 221
    // constant-declarations for block %rx_fifo_reader%pckt_good_check_fast%
    //  file .Aa/rx_from_mac.opt.aa, line 223
    // 		$call load_buffer1 () (last_written_pointer_1 packet_status_1 ) 
    //  file .Aa/rx_from_mac.opt.aa, line 225
    // 		$guard (packet_status_1) $call send_to_nic1 (last_written_pointer_1 ) () 
    //  file .Aa/rx_from_mac.opt.aa, line 226
    // 		$call load_buffer2 () (last_written_pointer_2 packet_status_2 ) 
    //  file .Aa/rx_from_mac.opt.aa, line 227
    // 		$guard (packet_status_2) $call send_to_nic2 (last_written_pointer_2 ) () 
    //  file .Aa/rx_from_mac.opt.aa, line 228
    // block %rx_fifo_reader%pckt_good_check_fast
    //  file .Aa/rx_from_mac.opt.aa, line 221
    // 		$call load_buffer1 () (last_written_pointer_1 packet_status_1 ) 
    //  file .Aa/rx_from_mac.opt.aa, line 225
    // last_written_pointer_1
    $W[last_written_pointer_1_596] : $int<10>
    // packet_status_1
    $W[packet_status_1_596] : $int<1>
    // 		$guard (packet_status_1) $call send_to_nic1 (last_written_pointer_1 ) () 
    //  file .Aa/rx_from_mac.opt.aa, line 226
    // 		$call load_buffer2 () (last_written_pointer_2 packet_status_2 ) 
    //  file .Aa/rx_from_mac.opt.aa, line 227
    // last_written_pointer_2
    $W[last_written_pointer_2_602] : $int<10>
    // packet_status_2
    $W[packet_status_2_602] : $int<1>
    // 		$guard (packet_status_2) $call send_to_nic2 (last_written_pointer_2 ) () 
    //  file .Aa/rx_from_mac.opt.aa, line 228
    // datapath-instances for block %rx_fifo_reader%pckt_good_check_fast
    //  file .Aa/rx_from_mac.opt.aa, line 221
    // 		$call load_buffer1 () (last_written_pointer_1 packet_status_1 ) 
    //  file .Aa/rx_from_mac.opt.aa, line 225
    $call [call_stmt_596_call] $module load_buffer1() (last_written_pointer_1_596 packet_status_1_596)  
    $delay call_stmt_596_call 4
    $buffering  $out call_stmt_596_call last_written_pointer_1_596 1
    $buffering  $out call_stmt_596_call packet_status_1_596 1
    // 		$guard (packet_status_1) $call send_to_nic1 (last_written_pointer_1 ) () 
    //  file .Aa/rx_from_mac.opt.aa, line 226
    $call [call_stmt_599_call] $module send_to_nic1(last_written_pointer_1_596) () $guard ( packet_status_1_596 )  
    $delay call_stmt_599_call 4
    $buffering  $in call_stmt_599_call last_written_pointer_1_596 1
    // 		$call load_buffer2 () (last_written_pointer_2 packet_status_2 ) 
    //  file .Aa/rx_from_mac.opt.aa, line 227
    $call [call_stmt_602_call] $module load_buffer2() (last_written_pointer_2_602 packet_status_2_602)  
    $delay call_stmt_602_call 4
    $buffering  $out call_stmt_602_call last_written_pointer_2_602 1
    $buffering  $out call_stmt_602_call packet_status_2_602 1
    // 		$guard (packet_status_2) $call send_to_nic2 (last_written_pointer_2 ) () 
    //  file .Aa/rx_from_mac.opt.aa, line 228
    $call [call_stmt_605_call] $module send_to_nic2(last_written_pointer_2_602) () $guard ( packet_status_2_602 )  
    $delay call_stmt_605_call 4
    $buffering  $in call_stmt_605_call last_written_pointer_2_602 1
  }
  // end data-path
  // CP-DP links for merge  
  //  file .Aa/rx_from_mac.opt.aa, line 223
  // 		$call load_buffer1 () (last_written_pointer_1 packet_status_1 ) 
  //  file .Aa/rx_from_mac.opt.aa, line 225
  call_stmt_596_call <=> (branch_block_stmt_592/call_stmt_596_to_call_stmt_605/call_stmt_596_Sample/crr branch_block_stmt_592/call_stmt_596_to_call_stmt_605/call_stmt_596_Update/ccr) (branch_block_stmt_592/call_stmt_596_to_call_stmt_605/call_stmt_596_Sample/cra branch_block_stmt_592/call_stmt_596_to_call_stmt_605/call_stmt_596_Update/cca)
  // 		$guard (packet_status_1) $call send_to_nic1 (last_written_pointer_1 ) () 
  //  file .Aa/rx_from_mac.opt.aa, line 226
  // last_written_pointer_1
  call_stmt_599_call <=> (branch_block_stmt_592/call_stmt_596_to_call_stmt_605/call_stmt_599_Sample/crr branch_block_stmt_592/call_stmt_596_to_call_stmt_605/call_stmt_599_Update/ccr) (branch_block_stmt_592/call_stmt_596_to_call_stmt_605/call_stmt_599_Sample/cra branch_block_stmt_592/call_stmt_596_to_call_stmt_605/call_stmt_599_Update/cca)
  // 		$call load_buffer2 () (last_written_pointer_2 packet_status_2 ) 
  //  file .Aa/rx_from_mac.opt.aa, line 227
  call_stmt_602_call <=> (branch_block_stmt_592/call_stmt_596_to_call_stmt_605/call_stmt_602_Sample/crr branch_block_stmt_592/call_stmt_596_to_call_stmt_605/call_stmt_602_Update/ccr) (branch_block_stmt_592/call_stmt_596_to_call_stmt_605/call_stmt_602_Sample/cra branch_block_stmt_592/call_stmt_596_to_call_stmt_605/call_stmt_602_Update/cca)
  // 		$guard (packet_status_2) $call send_to_nic2 (last_written_pointer_2 ) () 
  //  file .Aa/rx_from_mac.opt.aa, line 228
  // last_written_pointer_2
  call_stmt_605_call <=> (branch_block_stmt_592/call_stmt_596_to_call_stmt_605/call_stmt_605_Sample/crr branch_block_stmt_592/call_stmt_596_to_call_stmt_605/call_stmt_605_Update/ccr) (branch_block_stmt_592/call_stmt_596_to_call_stmt_605/call_stmt_605_Sample/cra branch_block_stmt_592/call_stmt_596_to_call_stmt_605/call_stmt_605_Update/cca)
}
$module [send_header_to_tb] 
{
  // pipe-declarations for block %send_header_to_tb
  //  file .Aa/rx_from_mac.opt.aa, line 232
  // pipe-declarations for block %send_header_to_tb%loop
  //  file .Aa/rx_from_mac.opt.aa, line 237
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    <>[branch_block_stmt_610] // Branch Block  file .Aa/rx_from_mac.opt.aa, line 237
    {
      $P [branch_block_stmt_610__entry__]
      branch_block_stmt_610__entry__ <-| ($entry)
      $P [branch_block_stmt_610__exit__]
      branch_block_stmt_610__exit__ |-> ($exit)
      $P [do_while_stmt_611__entry__] 
      $P [do_while_stmt_611__exit__] 
      // do-while-statement  
      //  file .Aa/rx_from_mac.opt.aa, line 239
      <o> [do_while_stmt_611]  $depth 7 $buffering 1 
      {
        $P[do_while_stmt_611__entry__] 
        $P[do_while_stmt_611__exit__] 
        $P[loop_back] 
        $P[condition_done] 
        $P[loop_body_done] 
        $pipeline [do_while_stmt_611_loop_body] 
        {
          // Pipelined!
          $T[back_edge_to_loop_body] 
          $T[first_time_through_loop_body] 
          $T[loop_body_start] 
          $T[condition_evaluated] 
          $transitionmerge [entry_tmerge] (back_edge_to_loop_body first_time_through_loop_body) (loop_body_start)
          $entry <-& (loop_body_start)
          $T[aggregated_phi_sample_req] 
          $T[aggregated_phi_sample_ack] 
          $T[aggregated_phi_update_req] 
          $T[aggregated_phi_update_ack] 
          // do not loop-back unless all phi's have used up their triggering tokens.
          condition_evaluated <-& (aggregated_phi_update_ack)
          aggregated_phi_sample_req o<-& (aggregated_phi_update_ack 0)
          // start:  single source PHI statement phi_stmt_613
          // 			$phi rhdata := 			  nic_rx_to_header $on   $entry ,   $loopback 
          // type of target is $uint<37>
          $T[phi_stmt_613_sample_start_] 
          $T[phi_stmt_613_sample_completed_] 
          $T[phi_stmt_613_update_start_] 
          $T[phi_stmt_613_update_completed_] 
          aggregated_phi_sample_req <-& (phi_stmt_613_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_613_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_613_update_start_)
          // non-implicit source expression in single-source phi
          // nic_rx_to_header
          $T[RPIPE_nic_rx_to_header_615_sample_start_] 
          $T[RPIPE_nic_rx_to_header_615_sample_completed_] 
          $T[RPIPE_nic_rx_to_header_615_update_start_] 
          $T[RPIPE_nic_rx_to_header_615_update_completed_] 
          ;;[RPIPE_nic_rx_to_header_615_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_nic_rx_to_header_615_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_nic_rx_to_header_615_sample_start_ &-> (RPIPE_nic_rx_to_header_615_Sample)
          RPIPE_nic_rx_to_header_615_sample_completed_ <-& (RPIPE_nic_rx_to_header_615_Sample)
          RPIPE_nic_rx_to_header_615_update_start_ <-& (RPIPE_nic_rx_to_header_615_sample_completed_)
          RPIPE_nic_rx_to_header_615_update_start_ &-> (RPIPE_nic_rx_to_header_615_Update)
          RPIPE_nic_rx_to_header_615_update_completed_ <-& (RPIPE_nic_rx_to_header_615_Update)
          RPIPE_nic_rx_to_header_615_sample_start_ o<-& (RPIPE_nic_rx_to_header_615_update_completed_ 0)
          // RAW reenables for nic_rx_to_header
          // producer  and  consumer are both determined by PHI statements.
          aggregated_phi_sample_req &-> (RPIPE_nic_rx_to_header_615_sample_start_)
          aggregated_phi_sample_ack <-& (RPIPE_nic_rx_to_header_615_sample_completed_)
          aggregated_phi_update_req &-> (RPIPE_nic_rx_to_header_615_update_start_)
          phi_stmt_613_update_completed_ <-& (RPIPE_nic_rx_to_header_615_update_completed_)
          aggregated_phi_update_ack <-& (phi_stmt_613_update_completed_)
          // done: PHI Statement phi_stmt_613
          // start:  			tb_out_pipe := ($bitcast ($uint<64>) rhdata ) $buffering 1// bits of buffering = 64. 
          //  file .Aa/rx_from_mac.opt.aa, line 245
          // Source expression
          // ($bitcast ($uint<64>) rhdata )
          $T[type_cast_619_sample_start_] 
          $T[type_cast_619_sample_completed_] 
          $T[type_cast_619_update_start_] 
          $T[type_cast_619_update_completed_] 
          // rhdata
          // start: Forward dependencies from rhdata to transition type_cast_619_sample_start_
          type_cast_619_sample_start_ <-& (phi_stmt_613_update_completed_)
          // done: Forward dependencies from rhdata to transition type_cast_619_sample_start_
          ;;[type_cast_619_Sample] 
          {
            // unary expression 
            $T [rr] $T [ra] // (split) unary operation
          }
          ;;[type_cast_619_Update] 
          {
            // unary expression 
            $T [cr] $T [ca] //(split) unary operation
          }
          type_cast_619_sample_start_ &-> (type_cast_619_Sample)
          type_cast_619_sample_completed_ <-& (type_cast_619_Sample)
          type_cast_619_sample_completed_ &-> ($null)
          type_cast_619_update_start_ &-> (type_cast_619_Update)
          type_cast_619_update_completed_ <-& (type_cast_619_Update)
          // RAW reenables for rhdata
          phi_stmt_613_update_start_ o<-& (type_cast_619_sample_completed_ 0)
          // self-release: 
          type_cast_619_sample_start_ o<-& (type_cast_619_sample_completed_ 1)
          $null &-> (type_cast_619_update_start_)
          type_cast_619_update_start_ o<-& (type_cast_619_update_completed_ 0)
          // Target expression
          // (as target) tb_out_pipe
          $T[WPIPE_tb_out_pipe_617_sample_start_] 
          $T[WPIPE_tb_out_pipe_617_sample_completed_] 
          $T[WPIPE_tb_out_pipe_617_update_start_] 
          $T[WPIPE_tb_out_pipe_617_update_completed_] 
          ;;[WPIPE_tb_out_pipe_617_Sample] 
          {
            // pipe write sample-start tb_out_pipe
            $T [req] $T [ack] 
          }
          ;;[WPIPE_tb_out_pipe_617_Update] 
          {
            // pipe write update (complete) tb_out_pipe
            $T [req] $T [ack] 
          }
          WPIPE_tb_out_pipe_617_sample_start_ &-> (WPIPE_tb_out_pipe_617_Sample)
          WPIPE_tb_out_pipe_617_sample_completed_ <-& (WPIPE_tb_out_pipe_617_Sample)
          WPIPE_tb_out_pipe_617_update_start_ <-& (WPIPE_tb_out_pipe_617_sample_completed_)
          WPIPE_tb_out_pipe_617_update_start_ &-> (WPIPE_tb_out_pipe_617_Update)
          WPIPE_tb_out_pipe_617_update_completed_ <-& (WPIPE_tb_out_pipe_617_Update)
          WPIPE_tb_out_pipe_617_sample_start_ o<-& (WPIPE_tb_out_pipe_617_update_completed_ 0)
          // start: Forward dependencies from ($bitcast ($uint<64>) rhdata ) to transition WPIPE_tb_out_pipe_617_sample_start_
          WPIPE_tb_out_pipe_617_sample_start_ <-& (type_cast_619_update_completed_)
          // done: Forward dependencies from ($bitcast ($uint<64>) rhdata ) to transition WPIPE_tb_out_pipe_617_sample_start_
          // RAW reenables for ($bitcast ($uint<64>) rhdata )
          type_cast_619_update_start_ o<-& (WPIPE_tb_out_pipe_617_sample_completed_ 0)
          // end:  			tb_out_pipe := ($bitcast ($uint<64>) rhdata ) $buffering 1// bits of buffering = 64. 
          $T [loop_body_delay_to_condition_start] $delay
          loop_body_start &-> (loop_body_delay_to_condition_start)
          loop_body_delay_to_condition_start &-> (condition_evaluated)
          condition_evaluated &-> ($null)
          // load-store dependencies..
          // pipe read/write dependencies for pipe tb_out_pipe
          // read-dependencies for pipe tb_out_pipe
          // write-dependencies for pipe tb_out_pipe
          // signal write dependencies for tb_out_pipe
          // pipe read/write dependencies for pipe nic_rx_to_header
          // read-dependencies for pipe nic_rx_to_header
          // write-dependencies for pipe nic_rx_to_header
          // signal write dependencies for nic_rx_to_header
        }
        ( first_time_through_loop_body  back_edge_to_loop_body) 
        ( condition_evaluated )
        ;; [loop_exit] 
        {
          $T [ack] 
        }
        ;; [loop_taken] 
        {
          $T [ack] 
        }
        do_while_stmt_611__entry__ <-| ($entry)
        loop_body_done <-| ( do_while_stmt_611_loop_body ) 
        condition_done |-> (loop_exit loop_taken)
        do_while_stmt_611__exit__ |-> ($exit)
        $bind condition_done <= do_while_stmt_611_loop_body : condition_evaluated
        $bind do_while_stmt_611__entry__  => do_while_stmt_611_loop_body : first_time_through_loop_body 
        $bind loop_back  => do_while_stmt_611_loop_body : back_edge_to_loop_body 
        $terminate (loop_exit loop_taken loop_body_done) (loop_back do_while_stmt_611__exit__)
      }
      do_while_stmt_611__entry__ |-> (do_while_stmt_611)
      do_while_stmt_611__exit__ <-| (do_while_stmt_611)
      do_while_stmt_611__entry__ <-| (branch_block_stmt_610__entry__)
      do_while_stmt_611__exit__ |-> (branch_block_stmt_610__exit__)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %send_header_to_tb%loop%
    //  file .Aa/rx_from_mac.opt.aa, line 241
    // constant-object-declarations for block %send_header_to_tb%loop
    //  file .Aa/rx_from_mac.opt.aa, line 237
    // constant-object-declarations for block %send_header_to_tb
    //  file .Aa/rx_from_mac.opt.aa, line 232
    // constant-declarations for block %send_header_to_tb%loop
    //  file .Aa/rx_from_mac.opt.aa, line 237
    // do-while statement  
    //  file .Aa/rx_from_mac.opt.aa, line 239
    // 1 
    $constant $W[konst_622_wire_constant] : $int<1> := _b1// 1
    // constant-declarations for block %send_header_to_tb%loop%
    //  file .Aa/rx_from_mac.opt.aa, line 241
    // constant-declarations for phi:  			$phi rhdata := 			  nic_rx_to_header $on   $entry ,   $loopback 
    // type of target is $uint<37>
    //  file .Aa/rx_from_mac.opt.aa, line 242
    // block %send_header_to_tb%loop
    //  file .Aa/rx_from_mac.opt.aa, line 237
    // do-while statement  
    //  file .Aa/rx_from_mac.opt.aa, line 239
    // merge-statement  
    //  file .Aa/rx_from_mac.opt.aa, line 241
    // 			$phi rhdata := 			  nic_rx_to_header $on   $entry ,   $loopback 
    // type of target is $uint<37>
    //  file .Aa/rx_from_mac.opt.aa, line 242
    // nic_rx_to_header
    $W[RPIPE_nic_rx_to_header_615_wire] : $int<37>
    // rhdata
    $W[rhdata_613] : $int<37>
    // 			tb_out_pipe := ($bitcast ($uint<64>) rhdata ) $buffering 1// bits of buffering = 64. 
    //  file .Aa/rx_from_mac.opt.aa, line 245
    // ($bitcast ($uint<64>) rhdata )
    $intermediate $W[type_cast_619_wire] : $int<64>
    // tb_out_pipe
    // datapath-instances for block %send_header_to_tb%loop
    //  file .Aa/rx_from_mac.opt.aa, line 237
    // datapath-instances for do-while  
    //  file .Aa/rx_from_mac.opt.aa, line 239
    ==0? [do_while_stmt_611_branch] (konst_622_wire_constant)
    $flowthrough
    // data-path instances for merge  
    //  file .Aa/rx_from_mac.opt.aa, line 241
    // 			$phi rhdata := 			  nic_rx_to_header $on   $entry ,   $loopback 
    // type of target is $uint<37>
    //  file .Aa/rx_from_mac.opt.aa, line 242
    // nic_rx_to_header
    $ioport $in [RPIPE_nic_rx_to_header_615_inst] (nic_rx_to_header) (RPIPE_nic_rx_to_header_615_wire)  $fullrate 
    $buffering $out RPIPE_nic_rx_to_header_615_inst RPIPE_nic_rx_to_header_615_wire 1
    # := [ssrc_phi_stmt_613] (RPIPE_nic_rx_to_header_615_wire) (rhdata_613)    $flowthrough 
    // 			tb_out_pipe := ($bitcast ($uint<64>) rhdata ) $buffering 1// bits of buffering = 64. 
    //  file .Aa/rx_from_mac.opt.aa, line 245
    // ($bitcast ($uint<64>) rhdata )
    # := [type_cast_619_inst] (rhdata_613) (type_cast_619_wire)     $fullrate
    $buffering  $out type_cast_619_inst type_cast_619_wire 1
    $delay type_cast_619_inst 1
    // tb_out_pipe
    $ioport $out [WPIPE_tb_out_pipe_617_inst]  (type_cast_619_wire) (tb_out_pipe)  $fullrate 
  }
  // end data-path
  // CP-DP links for do-while  do_while_stmt_611
  //  file .Aa/rx_from_mac.opt.aa, line 239
  // nic_rx_to_header
  RPIPE_nic_rx_to_header_615_inst <=> (branch_block_stmt_610/do_while_stmt_611/do_while_stmt_611_loop_body/RPIPE_nic_rx_to_header_615_Sample/rr branch_block_stmt_610/do_while_stmt_611/do_while_stmt_611_loop_body/RPIPE_nic_rx_to_header_615_Update/cr) (branch_block_stmt_610/do_while_stmt_611/do_while_stmt_611_loop_body/RPIPE_nic_rx_to_header_615_Sample/ra branch_block_stmt_610/do_while_stmt_611/do_while_stmt_611_loop_body/RPIPE_nic_rx_to_header_615_Update/ca)
  // 			tb_out_pipe := ($bitcast ($uint<64>) rhdata ) $buffering 1// bits of buffering = 64. 
  //  file .Aa/rx_from_mac.opt.aa, line 245
  // rhdata
  // ($bitcast ($uint<64>) rhdata )
  type_cast_619_inst <=> (branch_block_stmt_610/do_while_stmt_611/do_while_stmt_611_loop_body/type_cast_619_Sample/rr branch_block_stmt_610/do_while_stmt_611/do_while_stmt_611_loop_body/type_cast_619_Update/cr) (branch_block_stmt_610/do_while_stmt_611/do_while_stmt_611_loop_body/type_cast_619_Sample/ra branch_block_stmt_610/do_while_stmt_611/do_while_stmt_611_loop_body/type_cast_619_Update/ca)
  // tb_out_pipe
  WPIPE_tb_out_pipe_617_inst <=> (branch_block_stmt_610/do_while_stmt_611/do_while_stmt_611_loop_body/WPIPE_tb_out_pipe_617_Sample/req branch_block_stmt_610/do_while_stmt_611/do_while_stmt_611_loop_body/WPIPE_tb_out_pipe_617_Update/req) (branch_block_stmt_610/do_while_stmt_611/do_while_stmt_611_loop_body/WPIPE_tb_out_pipe_617_Sample/ack branch_block_stmt_610/do_while_stmt_611/do_while_stmt_611_loop_body/WPIPE_tb_out_pipe_617_Update/ack)
  do_while_stmt_611_branch <=> (branch_block_stmt_610/do_while_stmt_611/do_while_stmt_611_loop_body/condition_evaluated) (branch_block_stmt_610/do_while_stmt_611/loop_exit/ack branch_block_stmt_610/do_while_stmt_611/loop_taken/ack)
}
$module [send_packet_to_tb] 
{
  // pipe-declarations for block %send_packet_to_tb
  //  file .Aa/rx_from_mac.opt.aa, line 249
  // pipe-declarations for block %send_packet_to_tb%loop1
  //  file .Aa/rx_from_mac.opt.aa, line 254
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    <>[branch_block_stmt_626] // Branch Block  file .Aa/rx_from_mac.opt.aa, line 254
    {
      $P [branch_block_stmt_626__entry__]
      branch_block_stmt_626__entry__ <-| ($entry)
      $P [branch_block_stmt_626__exit__]
      branch_block_stmt_626__exit__ |-> ($exit)
      $P [do_while_stmt_627__entry__] 
      $P [do_while_stmt_627__exit__] 
      // do-while-statement  
      //  file .Aa/rx_from_mac.opt.aa, line 256
      <o> [do_while_stmt_627]  $depth 7 $buffering 1 
      {
        $P[do_while_stmt_627__entry__] 
        $P[do_while_stmt_627__exit__] 
        $P[loop_back] 
        $P[condition_done] 
        $P[loop_body_done] 
        $pipeline [do_while_stmt_627_loop_body] 
        {
          // Pipelined!
          $T[back_edge_to_loop_body] 
          $T[first_time_through_loop_body] 
          $T[loop_body_start] 
          $T[condition_evaluated] 
          $transitionmerge [entry_tmerge] (back_edge_to_loop_body first_time_through_loop_body) (loop_body_start)
          $entry <-& (loop_body_start)
          $T[aggregated_phi_sample_req] 
          $T[aggregated_phi_sample_ack] 
          $T[aggregated_phi_update_req] 
          $T[aggregated_phi_update_ack] 
          // do not loop-back unless all phi's have used up their triggering tokens.
          condition_evaluated <-& (aggregated_phi_update_ack)
          aggregated_phi_sample_req o<-& (aggregated_phi_update_ack 0)
          // start:  single source PHI statement phi_stmt_629
          // 			$phi rpdata := 			  nic_rx_to_packet $on   $entry ,   $loopback 
          // type of target is $uint<37>
          $T[phi_stmt_629_sample_start_] 
          $T[phi_stmt_629_sample_completed_] 
          $T[phi_stmt_629_update_start_] 
          $T[phi_stmt_629_update_completed_] 
          aggregated_phi_sample_req <-& (phi_stmt_629_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_629_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_629_update_start_)
          // non-implicit source expression in single-source phi
          // nic_rx_to_packet
          $T[RPIPE_nic_rx_to_packet_631_sample_start_] 
          $T[RPIPE_nic_rx_to_packet_631_sample_completed_] 
          $T[RPIPE_nic_rx_to_packet_631_update_start_] 
          $T[RPIPE_nic_rx_to_packet_631_update_completed_] 
          ;;[RPIPE_nic_rx_to_packet_631_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_nic_rx_to_packet_631_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_nic_rx_to_packet_631_sample_start_ &-> (RPIPE_nic_rx_to_packet_631_Sample)
          RPIPE_nic_rx_to_packet_631_sample_completed_ <-& (RPIPE_nic_rx_to_packet_631_Sample)
          RPIPE_nic_rx_to_packet_631_update_start_ <-& (RPIPE_nic_rx_to_packet_631_sample_completed_)
          RPIPE_nic_rx_to_packet_631_update_start_ &-> (RPIPE_nic_rx_to_packet_631_Update)
          RPIPE_nic_rx_to_packet_631_update_completed_ <-& (RPIPE_nic_rx_to_packet_631_Update)
          RPIPE_nic_rx_to_packet_631_sample_start_ o<-& (RPIPE_nic_rx_to_packet_631_update_completed_ 0)
          // RAW reenables for nic_rx_to_packet
          // producer  and  consumer are both determined by PHI statements.
          aggregated_phi_sample_req &-> (RPIPE_nic_rx_to_packet_631_sample_start_)
          aggregated_phi_sample_ack <-& (RPIPE_nic_rx_to_packet_631_sample_completed_)
          aggregated_phi_update_req &-> (RPIPE_nic_rx_to_packet_631_update_start_)
          phi_stmt_629_update_completed_ <-& (RPIPE_nic_rx_to_packet_631_update_completed_)
          aggregated_phi_update_ack <-& (phi_stmt_629_update_completed_)
          // done: PHI Statement phi_stmt_629
          // start:  			tb_out_packet_pipe := ($bitcast ($uint<64>) rpdata ) $buffering 1// bits of buffering = 64. 
          //  file .Aa/rx_from_mac.opt.aa, line 262
          // Source expression
          // ($bitcast ($uint<64>) rpdata )
          $T[type_cast_635_sample_start_] 
          $T[type_cast_635_sample_completed_] 
          $T[type_cast_635_update_start_] 
          $T[type_cast_635_update_completed_] 
          // rpdata
          // start: Forward dependencies from rpdata to transition type_cast_635_sample_start_
          type_cast_635_sample_start_ <-& (phi_stmt_629_update_completed_)
          // done: Forward dependencies from rpdata to transition type_cast_635_sample_start_
          ;;[type_cast_635_Sample] 
          {
            // unary expression 
            $T [rr] $T [ra] // (split) unary operation
          }
          ;;[type_cast_635_Update] 
          {
            // unary expression 
            $T [cr] $T [ca] //(split) unary operation
          }
          type_cast_635_sample_start_ &-> (type_cast_635_Sample)
          type_cast_635_sample_completed_ <-& (type_cast_635_Sample)
          type_cast_635_sample_completed_ &-> ($null)
          type_cast_635_update_start_ &-> (type_cast_635_Update)
          type_cast_635_update_completed_ <-& (type_cast_635_Update)
          // RAW reenables for rpdata
          phi_stmt_629_update_start_ o<-& (type_cast_635_sample_completed_ 0)
          // self-release: 
          type_cast_635_sample_start_ o<-& (type_cast_635_sample_completed_ 1)
          $null &-> (type_cast_635_update_start_)
          type_cast_635_update_start_ o<-& (type_cast_635_update_completed_ 0)
          // Target expression
          // (as target) tb_out_packet_pipe
          $T[WPIPE_tb_out_packet_pipe_633_sample_start_] 
          $T[WPIPE_tb_out_packet_pipe_633_sample_completed_] 
          $T[WPIPE_tb_out_packet_pipe_633_update_start_] 
          $T[WPIPE_tb_out_packet_pipe_633_update_completed_] 
          ;;[WPIPE_tb_out_packet_pipe_633_Sample] 
          {
            // pipe write sample-start tb_out_packet_pipe
            $T [req] $T [ack] 
          }
          ;;[WPIPE_tb_out_packet_pipe_633_Update] 
          {
            // pipe write update (complete) tb_out_packet_pipe
            $T [req] $T [ack] 
          }
          WPIPE_tb_out_packet_pipe_633_sample_start_ &-> (WPIPE_tb_out_packet_pipe_633_Sample)
          WPIPE_tb_out_packet_pipe_633_sample_completed_ <-& (WPIPE_tb_out_packet_pipe_633_Sample)
          WPIPE_tb_out_packet_pipe_633_update_start_ <-& (WPIPE_tb_out_packet_pipe_633_sample_completed_)
          WPIPE_tb_out_packet_pipe_633_update_start_ &-> (WPIPE_tb_out_packet_pipe_633_Update)
          WPIPE_tb_out_packet_pipe_633_update_completed_ <-& (WPIPE_tb_out_packet_pipe_633_Update)
          WPIPE_tb_out_packet_pipe_633_sample_start_ o<-& (WPIPE_tb_out_packet_pipe_633_update_completed_ 0)
          // start: Forward dependencies from ($bitcast ($uint<64>) rpdata ) to transition WPIPE_tb_out_packet_pipe_633_sample_start_
          WPIPE_tb_out_packet_pipe_633_sample_start_ <-& (type_cast_635_update_completed_)
          // done: Forward dependencies from ($bitcast ($uint<64>) rpdata ) to transition WPIPE_tb_out_packet_pipe_633_sample_start_
          // RAW reenables for ($bitcast ($uint<64>) rpdata )
          type_cast_635_update_start_ o<-& (WPIPE_tb_out_packet_pipe_633_sample_completed_ 0)
          // end:  			tb_out_packet_pipe := ($bitcast ($uint<64>) rpdata ) $buffering 1// bits of buffering = 64. 
          $T [loop_body_delay_to_condition_start] $delay
          loop_body_start &-> (loop_body_delay_to_condition_start)
          loop_body_delay_to_condition_start &-> (condition_evaluated)
          condition_evaluated &-> ($null)
          // load-store dependencies..
          // pipe read/write dependencies for pipe nic_rx_to_packet
          // read-dependencies for pipe nic_rx_to_packet
          // write-dependencies for pipe nic_rx_to_packet
          // signal write dependencies for nic_rx_to_packet
          // pipe read/write dependencies for pipe tb_out_packet_pipe
          // read-dependencies for pipe tb_out_packet_pipe
          // write-dependencies for pipe tb_out_packet_pipe
          // signal write dependencies for tb_out_packet_pipe
        }
        ( first_time_through_loop_body  back_edge_to_loop_body) 
        ( condition_evaluated )
        ;; [loop_exit] 
        {
          $T [ack] 
        }
        ;; [loop_taken] 
        {
          $T [ack] 
        }
        do_while_stmt_627__entry__ <-| ($entry)
        loop_body_done <-| ( do_while_stmt_627_loop_body ) 
        condition_done |-> (loop_exit loop_taken)
        do_while_stmt_627__exit__ |-> ($exit)
        $bind condition_done <= do_while_stmt_627_loop_body : condition_evaluated
        $bind do_while_stmt_627__entry__  => do_while_stmt_627_loop_body : first_time_through_loop_body 
        $bind loop_back  => do_while_stmt_627_loop_body : back_edge_to_loop_body 
        $terminate (loop_exit loop_taken loop_body_done) (loop_back do_while_stmt_627__exit__)
      }
      do_while_stmt_627__entry__ |-> (do_while_stmt_627)
      do_while_stmt_627__exit__ <-| (do_while_stmt_627)
      do_while_stmt_627__entry__ <-| (branch_block_stmt_626__entry__)
      do_while_stmt_627__exit__ |-> (branch_block_stmt_626__exit__)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %send_packet_to_tb%loop1%
    //  file .Aa/rx_from_mac.opt.aa, line 258
    // constant-object-declarations for block %send_packet_to_tb%loop1
    //  file .Aa/rx_from_mac.opt.aa, line 254
    // constant-object-declarations for block %send_packet_to_tb
    //  file .Aa/rx_from_mac.opt.aa, line 249
    // constant-declarations for block %send_packet_to_tb%loop1
    //  file .Aa/rx_from_mac.opt.aa, line 254
    // do-while statement  
    //  file .Aa/rx_from_mac.opt.aa, line 256
    // 1 
    $constant $W[konst_638_wire_constant] : $int<1> := _b1// 1
    // constant-declarations for block %send_packet_to_tb%loop1%
    //  file .Aa/rx_from_mac.opt.aa, line 258
    // constant-declarations for phi:  			$phi rpdata := 			  nic_rx_to_packet $on   $entry ,   $loopback 
    // type of target is $uint<37>
    //  file .Aa/rx_from_mac.opt.aa, line 259
    // block %send_packet_to_tb%loop1
    //  file .Aa/rx_from_mac.opt.aa, line 254
    // do-while statement  
    //  file .Aa/rx_from_mac.opt.aa, line 256
    // merge-statement  
    //  file .Aa/rx_from_mac.opt.aa, line 258
    // 			$phi rpdata := 			  nic_rx_to_packet $on   $entry ,   $loopback 
    // type of target is $uint<37>
    //  file .Aa/rx_from_mac.opt.aa, line 259
    // nic_rx_to_packet
    $W[RPIPE_nic_rx_to_packet_631_wire] : $int<37>
    // rpdata
    $W[rpdata_629] : $int<37>
    // 			tb_out_packet_pipe := ($bitcast ($uint<64>) rpdata ) $buffering 1// bits of buffering = 64. 
    //  file .Aa/rx_from_mac.opt.aa, line 262
    // ($bitcast ($uint<64>) rpdata )
    $intermediate $W[type_cast_635_wire] : $int<64>
    // tb_out_packet_pipe
    // datapath-instances for block %send_packet_to_tb%loop1
    //  file .Aa/rx_from_mac.opt.aa, line 254
    // datapath-instances for do-while  
    //  file .Aa/rx_from_mac.opt.aa, line 256
    ==0? [do_while_stmt_627_branch] (konst_638_wire_constant)
    $flowthrough
    // data-path instances for merge  
    //  file .Aa/rx_from_mac.opt.aa, line 258
    // 			$phi rpdata := 			  nic_rx_to_packet $on   $entry ,   $loopback 
    // type of target is $uint<37>
    //  file .Aa/rx_from_mac.opt.aa, line 259
    // nic_rx_to_packet
    $ioport $in [RPIPE_nic_rx_to_packet_631_inst] (nic_rx_to_packet) (RPIPE_nic_rx_to_packet_631_wire)  $fullrate 
    $buffering $out RPIPE_nic_rx_to_packet_631_inst RPIPE_nic_rx_to_packet_631_wire 1
    # := [ssrc_phi_stmt_629] (RPIPE_nic_rx_to_packet_631_wire) (rpdata_629)    $flowthrough 
    // 			tb_out_packet_pipe := ($bitcast ($uint<64>) rpdata ) $buffering 1// bits of buffering = 64. 
    //  file .Aa/rx_from_mac.opt.aa, line 262
    // ($bitcast ($uint<64>) rpdata )
    # := [type_cast_635_inst] (rpdata_629) (type_cast_635_wire)     $fullrate
    $buffering  $out type_cast_635_inst type_cast_635_wire 1
    $delay type_cast_635_inst 1
    // tb_out_packet_pipe
    $ioport $out [WPIPE_tb_out_packet_pipe_633_inst]  (type_cast_635_wire) (tb_out_packet_pipe)  $fullrate 
  }
  // end data-path
  // CP-DP links for do-while  do_while_stmt_627
  //  file .Aa/rx_from_mac.opt.aa, line 256
  // nic_rx_to_packet
  RPIPE_nic_rx_to_packet_631_inst <=> (branch_block_stmt_626/do_while_stmt_627/do_while_stmt_627_loop_body/RPIPE_nic_rx_to_packet_631_Sample/rr branch_block_stmt_626/do_while_stmt_627/do_while_stmt_627_loop_body/RPIPE_nic_rx_to_packet_631_Update/cr) (branch_block_stmt_626/do_while_stmt_627/do_while_stmt_627_loop_body/RPIPE_nic_rx_to_packet_631_Sample/ra branch_block_stmt_626/do_while_stmt_627/do_while_stmt_627_loop_body/RPIPE_nic_rx_to_packet_631_Update/ca)
  // 			tb_out_packet_pipe := ($bitcast ($uint<64>) rpdata ) $buffering 1// bits of buffering = 64. 
  //  file .Aa/rx_from_mac.opt.aa, line 262
  // rpdata
  // ($bitcast ($uint<64>) rpdata )
  type_cast_635_inst <=> (branch_block_stmt_626/do_while_stmt_627/do_while_stmt_627_loop_body/type_cast_635_Sample/rr branch_block_stmt_626/do_while_stmt_627/do_while_stmt_627_loop_body/type_cast_635_Update/cr) (branch_block_stmt_626/do_while_stmt_627/do_while_stmt_627_loop_body/type_cast_635_Sample/ra branch_block_stmt_626/do_while_stmt_627/do_while_stmt_627_loop_body/type_cast_635_Update/ca)
  // tb_out_packet_pipe
  WPIPE_tb_out_packet_pipe_633_inst <=> (branch_block_stmt_626/do_while_stmt_627/do_while_stmt_627_loop_body/WPIPE_tb_out_packet_pipe_633_Sample/req branch_block_stmt_626/do_while_stmt_627/do_while_stmt_627_loop_body/WPIPE_tb_out_packet_pipe_633_Update/req) (branch_block_stmt_626/do_while_stmt_627/do_while_stmt_627_loop_body/WPIPE_tb_out_packet_pipe_633_Sample/ack branch_block_stmt_626/do_while_stmt_627/do_while_stmt_627_loop_body/WPIPE_tb_out_packet_pipe_633_Update/ack)
  do_while_stmt_627_branch <=> (branch_block_stmt_626/do_while_stmt_627/do_while_stmt_627_loop_body/condition_evaluated) (branch_block_stmt_626/do_while_stmt_627/loop_exit/ack branch_block_stmt_626/do_while_stmt_627/loop_taken/ack)
}
