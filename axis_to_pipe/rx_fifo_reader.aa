/////////////////////////////////////////////////////////////////////////

// This module reads from the pipe to which rx_fifo.v writes to
// and checks if it is a good or a bad packet.
// If it is a bad packet then the buffer is flushed else it is sent to the NIC.

////////////////////////////////////////////////////////////////////////


$pipe mac_data  : $uint<37> $depth 1024  //Pipe to which rx_fifo.v writes to
$pipe out_data  : $uint<37> $depth 1024  //Pipe which will contain only packets that are good

//Miscellaneous Variables Decarations
$storage buf_ptr : $uint<10> //Used to index into buffer

$storage buffer : $array[1024] $of $uint<37>
//Intermediate buffer that stores packets until packet validity is verified



$module [rx_fifo_reader] $in() $out()
$is
{


$branchblock[pckt_good_check]
{
	$merge $entry flush still_loading
	//Add Phi Statements here
	$phi buf_ptr := $zero<37> $on $entry $zero<37> $on flush
				buf_ptr $on still_loading
	$endmerge

	intm_data := mac_data
	$split (intm_data 1 32 4) (tlast tdata tkeep)
	
	$if(tlast == 0) $then //Can't yet determine status
		buffer[ buf_ptr ] := intm_data
		buf_ptr := buf_ptr + 1
		$place [still_loading]
	$else // We are at last packet
		$if((tdata && tkeep) == _hffff0) $then //Indicates Bad Packet is stored in buffer
			$place [flush]
		$else  // Good Packet received, send to NIC
			buffer[ buf_ptr ] := intm_data
			buf_ptr := buf_ptr + 1
			$call send_to_nic () ()
			$place [flush]
		$endif
	
	$endif
	

}

}

$branchblock[pckt_good_check_fast]
{
	$dopipeline $depth 7 $fullrate 

	$merge $entry $loopback 
		$phi intm_data := mac_data $on $entry, $loopback
		$phi buf_ptr := $zero<37> $on $entry next_buf_ptr $on $loopback
	$endmerge

		$volatile $split (intm_data 1 32 4) (tlast tdata tkeep)
		$volatile bad_packet := ((tlast == 1) & (tdata = _hFFFFFFFF) (tkeep == 0))
		$volatile send_buffer := ((tlast == 1) & (tkeep != 0))
		$volatile fill_buffer := (tlast == 0)

		$guard (fill_buffer)
			buffer[buf_ptr] := intm_data

		$volatile next_buf_ptr :=
				($prioritymux
					(bad_packet | send_buffer) $zero<32>
					fill_buffer (buf_ptr + 1)
					$default buf_ptr)

		$guard (send_buffer)
			$call send_to_nic () ()

	$while 1
}
}



$module [send_to_nic] $in() $out()
$is
{
	
$branchblock [ main] 
{
	$dopipeline $depth 8 $fullrate
		$merge $entry $loopback
			$phi I := $zero<10> $on $entry num $on $loopback
		$endmerge
		out_data := buffer[I]
		$volatile num := (I+1)
	$while(num<buf_ptr)

}

}	
 

