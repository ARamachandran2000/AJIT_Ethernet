#include<stdio.h>
#include <stdint.h>
#include "core_portme.h"
#include "ajit_access_routines.h"

// queue related constants
#define NUMBER_OF_BUFFERS 8
#define BUFFER_SIZE_IN_BYTES 80
#define QUEUE_LENGTH 16 + 4 * NUMBER_OF_BUFFERS


#define NIC_START_ADDR 0x0FFFF5000
#define NIC_END_ADDR   0x0FFFF50FF


uint32_t* NIC_REG = NIC_START_ADDR;
typedef struct __BufferQueueHeader{
	uint32_t acquire_mutex;
	uint32_t number_of_entries;
	
	uint32_t write_pointer;
	uint32_t read_pointer;

	uint32_t* buffers;
}BufferQueueHeader;


// initialization of queues
void initBufferQueue(BufferQueueHeader* Q, uint32_t number_of_entries)
{
	Q->acquire_mutex = 0; //(uint32_t)cortos_reserveLock(1);
	Q->read_pointer  = 0;
	Q->write_pointer = 0;
	Q->number_of_entries = number_of_entries;
	uint8_t *buffer_ptr;
	// 32 bytes for 8 buffer addresses
	buffer_ptr = cortos_bget_ncram(4*NUMBER_OF_BUFFERS);
	Q->buffers = (uint32_t *)buffer_ptr;
	//ee_printf ("Init Queue function end.\nData = \n\tacquire_mutex=0x%x,\n\tread_pointer=0x%x,"
	//		"\n\twrite_pointer=0x%x,\n\tnumber_of_entries=0x%x\n", Q->acquire_mutex,
	//			Q->read_pointer, Q->write_pointer,Q->number_of_entries);
}
void acquireMutex(BufferQueueHeader* Q)
{
	uint32_t mutex_val = Q->acquire_mutex;
	// loop till mutex is not available
	while(mutex_val == 1)
	{
		mutex_val = Q->acquire_mutex;
	}
	Q->acquire_mutex = 1;
}

void releaseMutex(BufferQueueHeader* Q)
{
	Q->acquire_mutex = 0;
}
// returns 0 on success
int pushIntoBufferQueue(BufferQueueHeader* Q, uint32_t buf_ptr)
{
	int ret_val = 1;
	// we may need to check which instruction this cortos_lock_acquire_buzy uses
	//cortos_lock_acquire_buzy((uint8_t*)Q->acquire_mutex);
	acquireMutex(Q);

	uint32_t nwp = (Q->write_pointer + 1) & (Q->number_of_entries - 1);
	if(nwp != Q->read_pointer)
	{
		ret_val = 0;
		Q->buffers[Q->write_pointer] = buf_ptr;
		Q->write_pointer = nwp;
	}
	//cortos_lock_release((uint8_t*)Q->acquire_mutex);
	releaseMutex(Q);
	return(ret_val);
}

// returns 0 on success
int popFromBufferQueue(BufferQueueHeader* Q, uint32_t* buf)
{
	int ret_val = 1;
	//cortos_lock_acquire_buzy((uint8_t*)Q->acquire_mutex);
	acquireMutex(Q);
	
	if(Q->write_pointer != Q->read_pointer)
	{
		ret_val = 0;
		*buf = Q->buffers[Q->read_pointer];
		Q->read_pointer = (Q->read_pointer + 1) & (Q->number_of_entries - 1);
	}

	releaseMutex(Q);
	//cortos_lock_release((uint8_t*)Q->acquire_mutex);
	return(ret_val);
}

void nicRegConfig(BufferQueueHeader* Free_Queue, BufferQueueHeader* Rx_Queue,BufferQueueHeader* Tx_Queue)
{
	NIC_REG[1] = NUMBER_OF_BUFFERS;
	NIC_REG[2] = Rx_Queue;
	NIC_REG[10] = Tx_Queue;
	NIC_REG[18] = Free_Queue;
	// start NIC
	NIC_REG[0] = 1;
}	


int main()
{
	 __ajit_write_serial_control_register__ ( TX_ENABLE | RX_ENABLE);
	ee_printf ("Started\n");
	
	// allocate buffers
	uint32_t* Buffers[3];
	int i;
	for(i = 0; i < 3; i++)
	{
		Buffers[i] = (uint32_t*)cortos_bget_ncram(BUFFER_SIZE_IN_BYTES);
	}
	uint8_t* rx_queue;
	uint8_t* tx_queue;
	uint8_t* free_queue;
	// these should be in NCRAM but right now NIC is placed in NCRAM region.
	rx_queue = (uint8_t*)cortos_bget_ncram(QUEUE_LENGTH);
	tx_queue = (uint8_t*)cortos_bget_ncram(QUEUE_LENGTH);
	free_queue = (uint8_t*)cortos_bget_ncram(QUEUE_LENGTH);
	
	ee_printf ("All Addresses:\n\tBuffer[0]=0x%lx,\n\tBuffer[1]=0x%lx,\n\tBuffer[2]=0x%lx,"
			"\n\trx_queue=0x%lx,\n\ttx_queue=0x%lx,\n\tFree_Queue=0x%lx\n",Buffers[0],
			Buffers[1],Buffers[2],rx_queue,tx_queue,free_queue);
	BufferQueueHeader* Free_Queue;
	BufferQueueHeader* Tx_Queue;
	BufferQueueHeader* Rx_Queue;
	Free_Queue = (BufferQueueHeader*) free_queue;	
	Tx_Queue = (BufferQueueHeader*) tx_queue;
	Rx_Queue = (BufferQueueHeader*) rx_queue;
	
	ee_printf ("Initializing the Queues.\tFree_Queue=0x%lx\n",Free_Queue);
	// initialize Queues
	initBufferQueue(Free_Queue, NUMBER_OF_BUFFERS);
	initBufferQueue(Tx_Queue, NUMBER_OF_BUFFERS);
	initBufferQueue(Rx_Queue, NUMBER_OF_BUFFERS);
	ee_printf ("Queues Initialized,\n Pushing free buffers.\n");

	// push free buffers to free queues
	pushIntoBufferQueue(Free_Queue,Buffers[0]);
	pushIntoBufferQueue(Free_Queue,Buffers[1]);
	pushIntoBufferQueue(Free_Queue,Buffers[2]);
	ee_printf ("Pushed free buffers,\n Configuring NIC registers.\n");

	// configure nic registers
	nicRegConfig(Free_Queue,Rx_Queue,Tx_Queue);
	ee_printf ("Configuration Done. NIC has started\n");

	uint32_t buffer_with_packet = 0;
	while(1){
		
		ee_printf ("In the loop.\n");
		if(popFromBufferQueue(Rx_Queue,&buffer_with_packet)){
			ee_printf ("Reading Rx_Queue\n");
			int k = 0;
			for(k = 0; k < 2500000; k++);
		}	
		else
		{
			pushIntoBufferQueue(Tx_Queue,buffer_with_packet);
			ee_printf ("Written to Tx queue.\nNIC_REG[21]=%u\n",NIC_REG[21]);
		}
	}
	return(0);
}
