// Virtual circuit produced from Aa description by Aa2VC 
// $pipe  AFB_NIC_REQUEST : $uint<74>  $depth 2 
// can point into 
// in scope  top-level
$pipe [AFB_NIC_REQUEST] 74 $depth 2 
// $pipe  AFB_NIC_RESPONSE : $uint<33>  $depth 2 
// can point into 
// in scope  top-level
$pipe [AFB_NIC_RESPONSE] 33 $depth 2 
// $pipe  CONTROL_REGISTER : $uint<32>  $depth 1  $signal 
// can point into 
// in scope  top-level
$pipe [CONTROL_REGISTER] 32 $depth 1 $signal 
// $pipe  FREE_Q : $uint<36>  $depth 1  $signal 
// can point into 
// in scope  top-level
$pipe [FREE_Q] 36 $depth 1 $signal 
// $pipe  LAST_READ_TX_QUEUE_INDEX : $uint<6>  $depth 1  $signal 
// can point into 
// in scope  top-level
$pipe [LAST_READ_TX_QUEUE_INDEX] 6 $depth 1 $signal 
// $pipe  LAST_WRITTEN_RX_QUEUE_INDEX : $uint<6>  $depth 1  $signal 
// can point into 
// in scope  top-level
$pipe [LAST_WRITTEN_RX_QUEUE_INDEX] 6 $depth 1 $signal 
// $pipe  MEMORY_TO_NIC_RESPONSE : $uint<65>  $depth 2 
// can point into 
// in scope  top-level
$pipe [MEMORY_TO_NIC_RESPONSE] 65 $depth 2 
// $pipe  NIC_REQUEST_REGISTER_ACCESS_PIPE : $uint<43>  $depth 2 
// can point into 
// in scope  top-level
$pipe [NIC_REQUEST_REGISTER_ACCESS_PIPE] 43 $depth 2 
// $pipe  NIC_RESPONSE_REGISTER_ACCESS_PIPE : $uint<33>  $depth 2 
// can point into 
// in scope  top-level
$pipe [NIC_RESPONSE_REGISTER_ACCESS_PIPE] 33 $depth 2 
// $pipe  NIC_TO_MEMORY_REQUEST : $uint<110>  $depth 2 
// can point into 
// in scope  top-level
$pipe [NIC_TO_MEMORY_REQUEST] 110 $depth 2 
// $pipe  NUMBER_OF_SERVERS : $uint<32>  $depth 1  $signal 
// can point into 
// in scope  top-level
$pipe [NUMBER_OF_SERVERS] 32 $depth 1 $signal 
// $pipe  control_word_request_pipe_0 : $uint<32>  $depth 2 
// can point into 
// in scope  top-level
$pipe [control_word_request_pipe_0] 32 $depth 2 
// $pipe  control_word_request_pipe_1 : $uint<64>  $depth 2 
// can point into 
// in scope  top-level
$pipe [control_word_request_pipe_1] 64 $depth 2 
// $pipe  control_word_response_pipe : $uint<64>  $depth 2 
// can point into 
// in scope  top-level
$pipe [control_word_response_pipe] 64 $depth 2 
// $pipe  mac_to_nic_data : $uint<73>  $depth 2 
// can point into 
// in scope  top-level
$pipe [mac_to_nic_data] 73 $depth 2 
// $pipe  mac_to_nic_data_0 : $uint<64>  $depth 2 
// can point into 
// in scope  top-level
$pipe [mac_to_nic_data_0] 64 $depth 2 
// $pipe  mac_to_nic_data_1 : $uint<16>  $depth 2 
// can point into 
// in scope  top-level
$pipe [mac_to_nic_data_1] 16 $depth 2 
// $pipe  mem_req0_pipe0 : $uint<64>  $depth 2 
// can point into 
// in scope  top-level
$pipe [mem_req0_pipe0] 64 $depth 2 
// $pipe  mem_req0_pipe1 : $uint<64>  $depth 2 
// can point into 
// in scope  top-level
$pipe [mem_req0_pipe1] 64 $depth 2 
// $pipe  mem_req1_pipe0 : $uint<64>  $depth 2 
// can point into 
// in scope  top-level
$pipe [mem_req1_pipe0] 64 $depth 2 
// $pipe  mem_req1_pipe1 : $uint<64>  $depth 2 
// can point into 
// in scope  top-level
$pipe [mem_req1_pipe1] 64 $depth 2 
// $pipe  mem_resp0_pipe0 : $uint<64>  $depth 2 
// can point into 
// in scope  top-level
$pipe [mem_resp0_pipe0] 64 $depth 2 
// $pipe  mem_resp0_pipe1 : $uint<8>  $depth 2 
// can point into 
// in scope  top-level
$pipe [mem_resp0_pipe1] 8 $depth 2 
// $pipe  mem_resp1_pipe0 : $uint<64>  $depth 2 
// can point into 
// in scope  top-level
$pipe [mem_resp1_pipe0] 64 $depth 2 
// $pipe  mem_resp1_pipe1 : $uint<8>  $depth 2 
// can point into 
// in scope  top-level
$pipe [mem_resp1_pipe1] 8 $depth 2 
// $pipe  nic_rx_to_header : $uint<73>  $depth 2 
// can point into 
// in scope  top-level
$pipe [nic_rx_to_header] 73 $depth 2 
// $pipe  nic_rx_to_packet : $uint<73>  $depth 2 
// can point into 
// in scope  top-level
$pipe [nic_rx_to_packet] 73 $depth 2 
// $pipe  nic_to_mac_data_0 : $uint<64>  $depth 2 
// can point into 
// in scope  top-level
$pipe [nic_to_mac_data_0] 64 $depth 2 
// $pipe  nic_to_mac_data_1 : $uint<16>  $depth 2 
// can point into 
// in scope  top-level
$pipe [nic_to_mac_data_1] 16 $depth 2 
// $pipe  nic_to_mac_transmit_pipe : $uint<73>  $depth 2 
// can point into 
// in scope  top-level
$pipe [nic_to_mac_transmit_pipe] 73 $depth 2 
$constant $W[BAD_PACKET_DATA] : $int<64> := _b1111111111111111111111111111111111111111111111111111111111111111// -1
$constant $W[FULL_BYTE_MASK] : $int<8> := _b11111111// 255
$constant $W[HEADER_TKEEP] : $int<8> := _b00111111// 63
$constant $W[QUEUE_SIZE_MASK] : $int<32> := _b00000000000000000000000100000000// 256
$constant $W[RX_QUEUES_REG_START_OFFSET] : $int<6> := _b000010// 2
$constant $W[S0] : $int<2> := _b00// 0
$constant $W[S1] : $int<2> := _b01// 1
$constant $W[S2] : $int<2> := _b10// 2
$constant $W[TX_QUEUES_REG_START_OFFSET] : $int<6> := _b001010// 10
$constant $W[WAIT_TIME] : $int<10> := _b0000001010// 10
// load store constants for object nic_registers
$constant $W[nic_registers_base_address] : $int<6> := _b000000
$memoryspace [memory_space_0] 
{
  $capacity 64
  $datawidth 32
  $addrwidth 6
  $maxaccesswidth 32
  // $storage  nic_registers : $array[64] $of $uint<32> // memory space index = 0  base address = 0  word size = 32
  // can point into 
  // in scope  top-level
  $object [nic_registers] : $array[64] $of $int<32>
}
$module [AccessRegister] 
{
  $in rwbar:$int<1>
  // can point into 
  bmask:$int<4>
  // can point into 
  register_index:$int<6>
  // can point into 
  wdata:$int<32>
  // can point into 
  $out rdata:$int<32>
  // can point into 
  // pipe-declarations for block %AccessRegister
  //  file nic.linked.aa, line 73
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    ::[assign_stmt_92_to_assign_stmt_106] 
    {
      // start: WAR dependencies for request
      // ignored out-of-scope w_root  rwbar : $uint<1> 
      // ignored out-of-scope w_root  bmask : $uint<4> 
      // ignored out-of-scope w_root  register_index : $uint<6> 
      // ignored out-of-scope w_root  wdata : $uint<32> 
      // done: WAR dependencies for request
      // start:  	$volatile request := ((rwbar && bmask) && (register_index && wdata)) $buffering 1
      //  file nic.linked.aa, line 78
      // volatile! 
      // Source expression
      // ((rwbar && bmask) && (register_index && wdata))
      // (rwbar && bmask)
      // rwbar
      // bmask
      // (register_index && wdata)
      // register_index
      // wdata
      // Target expression
      // (as target) request
      // start: WAR dependencies for request
      // ignored out-of-scope w_root  rwbar : $uint<1> 
      // ignored out-of-scope w_root  bmask : $uint<4> 
      // ignored out-of-scope w_root  register_index : $uint<6> 
      // ignored out-of-scope w_root  wdata : $uint<32> 
      // done: WAR dependencies for request
      // end:  	$volatile request := ((rwbar && bmask) && (register_index && wdata)) $buffering 1
      // start:  	NIC_REQUEST_REGISTER_ACCESS_PIPE := request $buffering 1// bits of buffering = 43. 
      //  file nic.linked.aa, line 79
      // Source expression
      // request
      // Target expression
      // (as target) NIC_REQUEST_REGISTER_ACCESS_PIPE
      $T[WPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_93_sample_start_] 
      $T[WPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_93_sample_completed_] 
      $T[WPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_93_update_start_] 
      $T[WPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_93_update_completed_] 
      ;;[WPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_93_Sample] 
      {
        // pipe write sample-start NIC_REQUEST_REGISTER_ACCESS_PIPE
        $T [req] $T [ack] 
      }
      ;;[WPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_93_Update] 
      {
        // pipe write update (complete) NIC_REQUEST_REGISTER_ACCESS_PIPE
        $T [req] $T [ack] 
      }
      WPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_93_sample_start_ &-> (WPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_93_Sample)
      WPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_93_sample_completed_ <-& (WPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_93_Sample)
      WPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_93_update_start_ <-& (WPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_93_sample_completed_)
      WPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_93_update_start_ &-> (WPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_93_Update)
      WPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_93_update_completed_ <-& (WPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_93_Update)
      // start: Forward dependencies from request to transition WPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_93_sample_start_
      // done: Forward dependencies from request to transition WPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_93_sample_start_
      // end:  	NIC_REQUEST_REGISTER_ACCESS_PIPE := request $buffering 1// bits of buffering = 43. 
      // start:  	response := NIC_RESPONSE_REGISTER_ACCESS_PIPE $buffering 1// bits of buffering = 33. 
      //  file nic.linked.aa, line 80
      // Source expression
      // NIC_RESPONSE_REGISTER_ACCESS_PIPE
      $T[RPIPE_NIC_RESPONSE_REGISTER_ACCESS_PIPE_97_sample_start_] 
      $T[RPIPE_NIC_RESPONSE_REGISTER_ACCESS_PIPE_97_sample_completed_] 
      $T[RPIPE_NIC_RESPONSE_REGISTER_ACCESS_PIPE_97_update_start_] 
      $T[RPIPE_NIC_RESPONSE_REGISTER_ACCESS_PIPE_97_update_completed_] 
      ;;[RPIPE_NIC_RESPONSE_REGISTER_ACCESS_PIPE_97_Sample] 
      {
        // pipe read sample
        $T [rr] $T [ra] 
      }
      ;;[RPIPE_NIC_RESPONSE_REGISTER_ACCESS_PIPE_97_Update] 
      {
        // pipe read update
        $T [cr] $T [ca] 
      }
      RPIPE_NIC_RESPONSE_REGISTER_ACCESS_PIPE_97_sample_start_ &-> (RPIPE_NIC_RESPONSE_REGISTER_ACCESS_PIPE_97_Sample)
      RPIPE_NIC_RESPONSE_REGISTER_ACCESS_PIPE_97_sample_completed_ <-& (RPIPE_NIC_RESPONSE_REGISTER_ACCESS_PIPE_97_Sample)
      RPIPE_NIC_RESPONSE_REGISTER_ACCESS_PIPE_97_update_start_ <-& (RPIPE_NIC_RESPONSE_REGISTER_ACCESS_PIPE_97_sample_completed_)
      RPIPE_NIC_RESPONSE_REGISTER_ACCESS_PIPE_97_update_start_ &-> (RPIPE_NIC_RESPONSE_REGISTER_ACCESS_PIPE_97_Update)
      RPIPE_NIC_RESPONSE_REGISTER_ACCESS_PIPE_97_update_completed_ <-& (RPIPE_NIC_RESPONSE_REGISTER_ACCESS_PIPE_97_Update)
      // Target expression
      // (as target) response
      // start: WAR dependencies for response
      // done: WAR dependencies for response
      // end:  	response := NIC_RESPONSE_REGISTER_ACCESS_PIPE $buffering 1// bits of buffering = 33. 
      // start: WAR dependencies for status
      // done: WAR dependencies for status
      // start:  	$volatile status := ( $slice response 32 32 )  $buffering 1
      //  file nic.linked.aa, line 81
      // volatile! 
      // Source expression
      // ( $slice response 32 32 ) 
      // response
      // Target expression
      // (as target) status
      // start: WAR dependencies for status
      // done: WAR dependencies for status
      // end:  	$volatile status := ( $slice response 32 32 )  $buffering 1
      // start: WAR dependencies for rdata
      // done: WAR dependencies for rdata
      // start:  	$volatile rdata := ( $slice response 31 0 )  $buffering 1
      //  file nic.linked.aa, line 82
      // volatile! 
      // Source expression
      // ( $slice response 31 0 ) 
      // response
      // Target expression
      // (as target) rdata
      // rdata
      // write to interface object
      // start: WAR dependencies for rdata
      // done: WAR dependencies for rdata
      // rdata
      // write to interface object
      // end:  	$volatile rdata := ( $slice response 31 0 )  $buffering 1
      // load-store dependencies..
      // pipe read/write dependencies for pipe NIC_REQUEST_REGISTER_ACCESS_PIPE
      // read-dependencies for pipe NIC_REQUEST_REGISTER_ACCESS_PIPE
      // write-dependencies for pipe NIC_REQUEST_REGISTER_ACCESS_PIPE
      // signal write dependencies for NIC_REQUEST_REGISTER_ACCESS_PIPE
      // pipe read/write dependencies for pipe NIC_RESPONSE_REGISTER_ACCESS_PIPE
      // read-dependencies for pipe NIC_RESPONSE_REGISTER_ACCESS_PIPE
      // write-dependencies for pipe NIC_RESPONSE_REGISTER_ACCESS_PIPE
      // signal write dependencies for NIC_RESPONSE_REGISTER_ACCESS_PIPE
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %AccessRegister
    //  file nic.linked.aa, line 73
    // 	$volatile request := ((rwbar && bmask) && (register_index && wdata)) $buffering 1
    //  file nic.linked.aa, line 78
    // (rwbar && bmask)
    $intermediate $W[CONCAT_u1_u5_87_wire] : $int<5>
    // (register_index && wdata)
    $intermediate $W[CONCAT_u6_u38_90_wire] : $int<38>
    // request
    $W[request_92] : $int<43>
    // 	NIC_REQUEST_REGISTER_ACCESS_PIPE := request $buffering 1// bits of buffering = 43. 
    //  file nic.linked.aa, line 79
    // NIC_REQUEST_REGISTER_ACCESS_PIPE
    // 	response := NIC_RESPONSE_REGISTER_ACCESS_PIPE $buffering 1// bits of buffering = 33. 
    //  file nic.linked.aa, line 80
    // response
    $W[response_98] : $int<33>
    // 	$volatile status := ( $slice response 32 32 )  $buffering 1
    //  file nic.linked.aa, line 81
    // status
    $W[status_102] : $int<1>
    // 	$volatile rdata := ( $slice response 31 0 )  $buffering 1
    //  file nic.linked.aa, line 82
    // rdata
    // 	$volatile request := ((rwbar && bmask) && (register_index && wdata)) $buffering 1
    //  file nic.linked.aa, line 78
    // (rwbar && bmask)
    &&[CONCAT_u1_u5_87_inst] (rwbar bmask) (CONCAT_u1_u5_87_wire)   $flowthrough 
    $delay CONCAT_u1_u5_87_inst 0
    // (register_index && wdata)
    &&[CONCAT_u6_u38_90_inst] (register_index wdata) (CONCAT_u6_u38_90_wire)   $flowthrough 
    $delay CONCAT_u6_u38_90_inst 0
    // ((rwbar && bmask) && (register_index && wdata))
    &&[CONCAT_u5_u43_91_inst] (CONCAT_u1_u5_87_wire CONCAT_u6_u38_90_wire) (request_92)   $flowthrough 
    $delay CONCAT_u5_u43_91_inst 0
    // 	NIC_REQUEST_REGISTER_ACCESS_PIPE := request $buffering 1// bits of buffering = 43. 
    //  file nic.linked.aa, line 79
    // NIC_REQUEST_REGISTER_ACCESS_PIPE
    $ioport $out [WPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_93_inst]  (request_92) (NIC_REQUEST_REGISTER_ACCESS_PIPE) 
    // 	response := NIC_RESPONSE_REGISTER_ACCESS_PIPE $buffering 1// bits of buffering = 33. 
    //  file nic.linked.aa, line 80
    // NIC_RESPONSE_REGISTER_ACCESS_PIPE
    $ioport $in [RPIPE_NIC_RESPONSE_REGISTER_ACCESS_PIPE_97_inst] (NIC_RESPONSE_REGISTER_ACCESS_PIPE) (response_98) 
    $buffering $out RPIPE_NIC_RESPONSE_REGISTER_ACCESS_PIPE_97_inst response_98 1
    // 	$volatile status := ( $slice response 32 32 )  $buffering 1
    //  file nic.linked.aa, line 81
    // ( $slice response 32 32 ) 
    [:] [slice_101_inst] (response_98 32 32) (status_102)  $flowthrough
    $delay slice_101_inst 0
    // 	$volatile rdata := ( $slice response 31 0 )  $buffering 1
    //  file nic.linked.aa, line 82
    // ( $slice response 31 0 ) 
    [:] [slice_105_inst] (response_98 31 0) (rdata)  $flowthrough
    $delay slice_105_inst 0
  }
  // end data-path
  // 	$volatile request := ((rwbar && bmask) && (register_index && wdata)) $buffering 1
  //  file nic.linked.aa, line 78
  // ((rwbar && bmask) && (register_index && wdata))
  // (rwbar && bmask)
  // rwbar
  // bmask
  // (register_index && wdata)
  // register_index
  // wdata
  // 	NIC_REQUEST_REGISTER_ACCESS_PIPE := request $buffering 1// bits of buffering = 43. 
  //  file nic.linked.aa, line 79
  // request
  // NIC_REQUEST_REGISTER_ACCESS_PIPE
  WPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_93_inst <=> (assign_stmt_92_to_assign_stmt_106/WPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_93_Sample/req assign_stmt_92_to_assign_stmt_106/WPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_93_Update/req) (assign_stmt_92_to_assign_stmt_106/WPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_93_Sample/ack assign_stmt_92_to_assign_stmt_106/WPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_93_Update/ack)
  // 	response := NIC_RESPONSE_REGISTER_ACCESS_PIPE $buffering 1// bits of buffering = 33. 
  //  file nic.linked.aa, line 80
  // NIC_RESPONSE_REGISTER_ACCESS_PIPE
  RPIPE_NIC_RESPONSE_REGISTER_ACCESS_PIPE_97_inst <=> (assign_stmt_92_to_assign_stmt_106/RPIPE_NIC_RESPONSE_REGISTER_ACCESS_PIPE_97_Sample/rr assign_stmt_92_to_assign_stmt_106/RPIPE_NIC_RESPONSE_REGISTER_ACCESS_PIPE_97_Update/cr) (assign_stmt_92_to_assign_stmt_106/RPIPE_NIC_RESPONSE_REGISTER_ACCESS_PIPE_97_Sample/ra assign_stmt_92_to_assign_stmt_106/RPIPE_NIC_RESPONSE_REGISTER_ACCESS_PIPE_97_Update/ca)
  // 	$volatile status := ( $slice response 32 32 )  $buffering 1
  //  file nic.linked.aa, line 81
  // response
  // 	$volatile rdata := ( $slice response 31 0 )  $buffering 1
  //  file nic.linked.aa, line 82
  // response
}
$module [UpdateRegister] 
{
  $in bmask:$int<4>
  // can point into 
  rval:$int<32>
  // can point into 
  wdata:$int<32>
  // can point into 
  index:$int<6>
  // can point into 
  $out wval:$int<32>
  // can point into 
  // pipe-declarations for block %UpdateRegister
  //  file nic.linked.aa, line 84
  // memory-space 0 is written into.
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    ::[assign_stmt_117_to_assign_stmt_186] 
    {
      // start: WAR dependencies for b0
      // ignored out-of-scope w_root  bmask : $uint<4> 
      // done: WAR dependencies for b0
      // start:  	$volatile b0 := ( $slice bmask 3 3 )  $buffering 1
      //  file nic.linked.aa, line 89
      // volatile! 
      // Source expression
      // ( $slice bmask 3 3 ) 
      // bmask
      // Target expression
      // (as target) b0
      // start: WAR dependencies for b0
      // ignored out-of-scope w_root  bmask : $uint<4> 
      // done: WAR dependencies for b0
      // end:  	$volatile b0 := ( $slice bmask 3 3 )  $buffering 1
      // start: WAR dependencies for b1
      // ignored out-of-scope w_root  bmask : $uint<4> 
      // done: WAR dependencies for b1
      // start:  	$volatile b1 := ( $slice bmask 2 2 )  $buffering 1
      //  file nic.linked.aa, line 90
      // volatile! 
      // Source expression
      // ( $slice bmask 2 2 ) 
      // bmask
      // Target expression
      // (as target) b1
      // start: WAR dependencies for b1
      // ignored out-of-scope w_root  bmask : $uint<4> 
      // done: WAR dependencies for b1
      // end:  	$volatile b1 := ( $slice bmask 2 2 )  $buffering 1
      // start: WAR dependencies for b2
      // ignored out-of-scope w_root  bmask : $uint<4> 
      // done: WAR dependencies for b2
      // start:  	$volatile b2 := ( $slice bmask 1 1 )  $buffering 1
      //  file nic.linked.aa, line 91
      // volatile! 
      // Source expression
      // ( $slice bmask 1 1 ) 
      // bmask
      // Target expression
      // (as target) b2
      // start: WAR dependencies for b2
      // ignored out-of-scope w_root  bmask : $uint<4> 
      // done: WAR dependencies for b2
      // end:  	$volatile b2 := ( $slice bmask 1 1 )  $buffering 1
      // start: WAR dependencies for b3
      // ignored out-of-scope w_root  bmask : $uint<4> 
      // done: WAR dependencies for b3
      // start:  	$volatile b3 := ( $slice bmask 0 0 )  $buffering 1
      //  file nic.linked.aa, line 92
      // volatile! 
      // Source expression
      // ( $slice bmask 0 0 ) 
      // bmask
      // Target expression
      // (as target) b3
      // start: WAR dependencies for b3
      // ignored out-of-scope w_root  bmask : $uint<4> 
      // done: WAR dependencies for b3
      // end:  	$volatile b3 := ( $slice bmask 0 0 )  $buffering 1
      // start: WAR dependencies for r0
      // ignored out-of-scope w_root  rval : $uint<32> 
      // done: WAR dependencies for r0
      // start:  	$volatile r0 := ( $slice rval 31 24 )  $buffering 1
      //  file nic.linked.aa, line 93
      // volatile! 
      // Source expression
      // ( $slice rval 31 24 ) 
      // rval
      // Target expression
      // (as target) r0
      // start: WAR dependencies for r0
      // ignored out-of-scope w_root  rval : $uint<32> 
      // done: WAR dependencies for r0
      // end:  	$volatile r0 := ( $slice rval 31 24 )  $buffering 1
      // start: WAR dependencies for r1
      // ignored out-of-scope w_root  rval : $uint<32> 
      // done: WAR dependencies for r1
      // start:  	$volatile r1 := ( $slice rval 23 16 )  $buffering 1
      //  file nic.linked.aa, line 94
      // volatile! 
      // Source expression
      // ( $slice rval 23 16 ) 
      // rval
      // Target expression
      // (as target) r1
      // start: WAR dependencies for r1
      // ignored out-of-scope w_root  rval : $uint<32> 
      // done: WAR dependencies for r1
      // end:  	$volatile r1 := ( $slice rval 23 16 )  $buffering 1
      // start: WAR dependencies for r2
      // ignored out-of-scope w_root  rval : $uint<32> 
      // done: WAR dependencies for r2
      // start:  	$volatile r2 := ( $slice rval 15 8 )  $buffering 1
      //  file nic.linked.aa, line 95
      // volatile! 
      // Source expression
      // ( $slice rval 15 8 ) 
      // rval
      // Target expression
      // (as target) r2
      // start: WAR dependencies for r2
      // ignored out-of-scope w_root  rval : $uint<32> 
      // done: WAR dependencies for r2
      // end:  	$volatile r2 := ( $slice rval 15 8 )  $buffering 1
      // start: WAR dependencies for r3
      // ignored out-of-scope w_root  rval : $uint<32> 
      // done: WAR dependencies for r3
      // start:  	$volatile r3 := ( $slice rval 7 0 )  $buffering 1
      //  file nic.linked.aa, line 96
      // volatile! 
      // Source expression
      // ( $slice rval 7 0 ) 
      // rval
      // Target expression
      // (as target) r3
      // start: WAR dependencies for r3
      // ignored out-of-scope w_root  rval : $uint<32> 
      // done: WAR dependencies for r3
      // end:  	$volatile r3 := ( $slice rval 7 0 )  $buffering 1
      // start: WAR dependencies for w0
      // ignored out-of-scope w_root  wdata : $uint<32> 
      // done: WAR dependencies for w0
      // start:  	$volatile w0 := ( $slice wdata 31 24 )  $buffering 1
      //  file nic.linked.aa, line 97
      // volatile! 
      // Source expression
      // ( $slice wdata 31 24 ) 
      // wdata
      // Target expression
      // (as target) w0
      // start: WAR dependencies for w0
      // ignored out-of-scope w_root  wdata : $uint<32> 
      // done: WAR dependencies for w0
      // end:  	$volatile w0 := ( $slice wdata 31 24 )  $buffering 1
      // start: WAR dependencies for w1
      // ignored out-of-scope w_root  wdata : $uint<32> 
      // done: WAR dependencies for w1
      // start:  	$volatile w1 := ( $slice wdata 23 16 )  $buffering 1
      //  file nic.linked.aa, line 98
      // volatile! 
      // Source expression
      // ( $slice wdata 23 16 ) 
      // wdata
      // Target expression
      // (as target) w1
      // start: WAR dependencies for w1
      // ignored out-of-scope w_root  wdata : $uint<32> 
      // done: WAR dependencies for w1
      // end:  	$volatile w1 := ( $slice wdata 23 16 )  $buffering 1
      // start: WAR dependencies for w2
      // ignored out-of-scope w_root  wdata : $uint<32> 
      // done: WAR dependencies for w2
      // start:  	$volatile w2 := ( $slice wdata 15 8 )  $buffering 1
      //  file nic.linked.aa, line 99
      // volatile! 
      // Source expression
      // ( $slice wdata 15 8 ) 
      // wdata
      // Target expression
      // (as target) w2
      // start: WAR dependencies for w2
      // ignored out-of-scope w_root  wdata : $uint<32> 
      // done: WAR dependencies for w2
      // end:  	$volatile w2 := ( $slice wdata 15 8 )  $buffering 1
      // start: WAR dependencies for w3
      // ignored out-of-scope w_root  wdata : $uint<32> 
      // done: WAR dependencies for w3
      // start:  	$volatile w3 := ( $slice wdata 7 0 )  $buffering 1
      //  file nic.linked.aa, line 100
      // volatile! 
      // Source expression
      // ( $slice wdata 7 0 ) 
      // wdata
      // Target expression
      // (as target) w3
      // start: WAR dependencies for w3
      // ignored out-of-scope w_root  wdata : $uint<32> 
      // done: WAR dependencies for w3
      // end:  	$volatile w3 := ( $slice wdata 7 0 )  $buffering 1
      // start:  	wval := ((( $mux b0 w0  r0 )  && ( $mux b1 w1  r1 ) ) && (( $mux b2 w2  r2 )  && ( $mux b3 w3  r3 ) )) $buffering 1// bits of buffering = 32. 
      //  file nic.linked.aa, line 101
      // Source expression
      // ((( $mux b0 w0  r0 )  && ( $mux b1 w1  r1 ) ) && (( $mux b2 w2  r2 )  && ( $mux b3 w3  r3 ) ))
      $T[CONCAT_u16_u32_181_sample_start_] 
      $T[CONCAT_u16_u32_181_sample_completed_] 
      $T[CONCAT_u16_u32_181_update_start_] 
      $T[CONCAT_u16_u32_181_update_completed_] 
      // (( $mux b0 w0  r0 )  && ( $mux b1 w1  r1 ) )
      // ( $mux b0 w0  r0 ) 
      // b0
      // w0
      // r0
      // ( $mux b1 w1  r1 ) 
      // b1
      // w1
      // r1
      // (( $mux b2 w2  r2 )  && ( $mux b3 w3  r3 ) )
      // ( $mux b2 w2  r2 ) 
      // b2
      // w2
      // r2
      // ( $mux b3 w3  r3 ) 
      // b3
      // w3
      // r3
      // start: Forward dependencies from (( $mux b0 w0  r0 )  && ( $mux b1 w1  r1 ) ) to transition CONCAT_u16_u32_181_sample_start_
      // done: Forward dependencies from (( $mux b0 w0  r0 )  && ( $mux b1 w1  r1 ) ) to transition CONCAT_u16_u32_181_sample_start_
      // start: Forward dependencies from (( $mux b2 w2  r2 )  && ( $mux b3 w3  r3 ) ) to transition CONCAT_u16_u32_181_sample_start_
      // done: Forward dependencies from (( $mux b2 w2  r2 )  && ( $mux b3 w3  r3 ) ) to transition CONCAT_u16_u32_181_sample_start_
      ;;[CONCAT_u16_u32_181_Sample] 
      {
        // binary expression 
        $T [rr] $T [ra]  // (split) binary operation 
      }
      ;;[CONCAT_u16_u32_181_Update] 
      {
        // binary expression 
        $T [cr] $T [ca] // (split) binary operation 
      }
      CONCAT_u16_u32_181_sample_start_ &-> (CONCAT_u16_u32_181_Sample)
      CONCAT_u16_u32_181_sample_completed_ <-& (CONCAT_u16_u32_181_Sample)
      CONCAT_u16_u32_181_sample_completed_ &-> ($null)
      CONCAT_u16_u32_181_update_start_ &-> (CONCAT_u16_u32_181_Update)
      CONCAT_u16_u32_181_update_completed_ <-& (CONCAT_u16_u32_181_Update)
      // Target expression
      // (as target) wval
      // wval
      // write to interface object
      // start: WAR dependencies for wval
      // done: WAR dependencies for wval
      // wval
      // write to interface object
      // end:  	wval := ((( $mux b0 w0  r0 )  && ( $mux b1 w1  r1 ) ) && (( $mux b2 w2  r2 )  && ( $mux b3 w3  r3 ) )) $buffering 1// bits of buffering = 32. 
      // start:  	nic_registers[index] := wval $buffering 1// bits of buffering = 32. 
      //  file nic.linked.aa, line 102
      // Source expression
      // wval
      // Target expression
      // nic_registers[index]
      $T[array_obj_ref_184_sample_start_] 
      $T[array_obj_ref_184_sample_completed_] 
      $T[array_obj_ref_184_update_start_] 
      $T[array_obj_ref_184_update_completed_] 
      $T[array_obj_ref_184_word_address_calculated] 
      $T[array_obj_ref_184_root_address_calculated] 
      $T[array_obj_ref_184_offset_calculated] 
      $T[array_obj_ref_184_index_resized_0] 
      $T[array_obj_ref_184_index_scaled_0] 
      $T[array_obj_ref_184_index_computed_0] 
      // index
      // start: Forward dependencies from index to transition array_obj_ref_184_index_computed_0
      // done: Forward dependencies from index to transition array_obj_ref_184_index_computed_0
      ;;[array_obj_ref_184_index_resize_0] 
      {
        $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
      }
      array_obj_ref_184_index_computed_0 &-> (array_obj_ref_184_index_resize_0)
      array_obj_ref_184_index_resized_0 <-& (array_obj_ref_184_index_resize_0)
      ;;[array_obj_ref_184_index_scale_0] 
      {
        $T [scale_rename_req] $T [scale_rename_ack] // rename 
      }
      array_obj_ref_184_index_resized_0 &-> (array_obj_ref_184_index_scale_0)
      array_obj_ref_184_index_scaled_0 <-& (array_obj_ref_184_index_scale_0)
      ;;[array_obj_ref_184_final_index_sum_regn] 
      {
        $T [req] $T [ack] // rename
      }
      array_obj_ref_184_index_scaled_0 &-> (array_obj_ref_184_final_index_sum_regn)
      array_obj_ref_184_offset_calculated <-& (array_obj_ref_184_final_index_sum_regn)
      ;;[array_obj_ref_184_base_plus_offset] 
      {
        $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
      }
      array_obj_ref_184_offset_calculated &-> (array_obj_ref_184_base_plus_offset)
      array_obj_ref_184_root_address_calculated <-& (array_obj_ref_184_base_plus_offset)
      ;;[array_obj_ref_184_word_addrgen] 
      {
        $T [root_register_req] $T [root_register_ack]
      }
      array_obj_ref_184_root_address_calculated &-> (array_obj_ref_184_word_addrgen)
      array_obj_ref_184_word_address_calculated <-& (array_obj_ref_184_word_addrgen)
      ;;[array_obj_ref_184_Sample] 
      {
        ;;[array_obj_ref_184_Split] 
        {
          $T [split_req] $T [split_ack]
        }
        ||[word_access_start] 
        {
          ;;[word_0] 
          {
            $T [rr] $T [ra] 
          }
        }
      }
      ;;[array_obj_ref_184_Update] 
      {
        ||[word_access_complete] 
        {
          ;;[word_0] 
          {
            $T [cr] $T [ca] 
          }
        }
      }
      array_obj_ref_184_sample_start_ <-& (array_obj_ref_184_word_address_calculated)
      array_obj_ref_184_sample_start_ &-> (array_obj_ref_184_Sample)
      array_obj_ref_184_sample_completed_ <-& (array_obj_ref_184_Sample)
      array_obj_ref_184_sample_completed_ &-> ($null)
      array_obj_ref_184_update_start_ &-> (array_obj_ref_184_Update)
      array_obj_ref_184_update_completed_ <-& (array_obj_ref_184_Update)
      // start: Forward dependencies from wval to transition array_obj_ref_184_sample_start_
      array_obj_ref_184_sample_start_ <-& (CONCAT_u16_u32_181_update_completed_)
      // done: Forward dependencies from wval to transition array_obj_ref_184_sample_start_
      // end:  	nic_registers[index] := wval $buffering 1// bits of buffering = 32. 
      // load-store dependencies..
      // memory-space  memory_space_0
      //  array_obj_ref_184 store
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %UpdateRegister
    //  file nic.linked.aa, line 84
    // ( $mux b0 w0  r0 ) 
    // ( $mux b1 w1  r1 ) 
    // ( $mux b2 w2  r2 ) 
    // ( $mux b3 w3  r3 ) 
    // nic_registers[index]
    $constant $W[array_obj_ref_184_resized_base_address] : $int<6> := _b000000// 0
    $constant $W[array_obj_ref_184_offset_scale_factor_0] : $int<6> := _b000001// 1
    $constant $W[array_obj_ref_184_word_offset_0] : $int<6> := _b000000// 0
    // 	$volatile b0 := ( $slice bmask 3 3 )  $buffering 1
    //  file nic.linked.aa, line 89
    // b0
    $W[b0_117] : $int<1>
    // 	$volatile b1 := ( $slice bmask 2 2 )  $buffering 1
    //  file nic.linked.aa, line 90
    // b1
    $W[b1_121] : $int<1>
    // 	$volatile b2 := ( $slice bmask 1 1 )  $buffering 1
    //  file nic.linked.aa, line 91
    // b2
    $W[b2_125] : $int<1>
    // 	$volatile b3 := ( $slice bmask 0 0 )  $buffering 1
    //  file nic.linked.aa, line 92
    // b3
    $W[b3_129] : $int<1>
    // 	$volatile r0 := ( $slice rval 31 24 )  $buffering 1
    //  file nic.linked.aa, line 93
    // r0
    $W[r0_133] : $int<8>
    // 	$volatile r1 := ( $slice rval 23 16 )  $buffering 1
    //  file nic.linked.aa, line 94
    // r1
    $W[r1_137] : $int<8>
    // 	$volatile r2 := ( $slice rval 15 8 )  $buffering 1
    //  file nic.linked.aa, line 95
    // r2
    $W[r2_141] : $int<8>
    // 	$volatile r3 := ( $slice rval 7 0 )  $buffering 1
    //  file nic.linked.aa, line 96
    // r3
    $W[r3_145] : $int<8>
    // 	$volatile w0 := ( $slice wdata 31 24 )  $buffering 1
    //  file nic.linked.aa, line 97
    // w0
    $W[w0_149] : $int<8>
    // 	$volatile w1 := ( $slice wdata 23 16 )  $buffering 1
    //  file nic.linked.aa, line 98
    // w1
    $W[w1_153] : $int<8>
    // 	$volatile w2 := ( $slice wdata 15 8 )  $buffering 1
    //  file nic.linked.aa, line 99
    // w2
    $W[w2_157] : $int<8>
    // 	$volatile w3 := ( $slice wdata 7 0 )  $buffering 1
    //  file nic.linked.aa, line 100
    // w3
    $W[w3_161] : $int<8>
    // 	wval := ((( $mux b0 w0  r0 )  && ( $mux b1 w1  r1 ) ) && (( $mux b2 w2  r2 )  && ( $mux b3 w3  r3 ) )) $buffering 1// bits of buffering = 32. 
    //  file nic.linked.aa, line 101
    // ( $mux b0 w0  r0 ) 
    $intermediate $W[MUX_166_wire] : $int<8>
    // ( $mux b1 w1  r1 ) 
    $intermediate $W[MUX_170_wire] : $int<8>
    // (( $mux b0 w0  r0 )  && ( $mux b1 w1  r1 ) )
    $intermediate $W[CONCAT_u8_u16_171_wire] : $int<16>
    // ( $mux b2 w2  r2 ) 
    $intermediate $W[MUX_175_wire] : $int<8>
    // ( $mux b3 w3  r3 ) 
    $intermediate $W[MUX_179_wire] : $int<8>
    // (( $mux b2 w2  r2 )  && ( $mux b3 w3  r3 ) )
    $intermediate $W[CONCAT_u8_u16_180_wire] : $int<16>
    // wval
    // 	nic_registers[index] := wval $buffering 1// bits of buffering = 32. 
    //  file nic.linked.aa, line 102
    // nic_registers[index]
    $intermediate $W[R_index_183_resized] : $int<6>
    $intermediate $W[R_index_183_scaled] : $int<6>
    $intermediate $W[array_obj_ref_184_final_offset] : $int<6>
    $intermediate $W[array_obj_ref_184_root_address] : $int<6>
    $W[array_obj_ref_184_word_address_0] : $pointer<memory_space_0>
    $W[array_obj_ref_184_data_0] : $int<32>
    // 	$volatile b0 := ( $slice bmask 3 3 )  $buffering 1
    //  file nic.linked.aa, line 89
    // ( $slice bmask 3 3 ) 
    [:] [slice_116_inst] (bmask 3 3) (b0_117)  $flowthrough
    $delay slice_116_inst 0
    // 	$volatile b1 := ( $slice bmask 2 2 )  $buffering 1
    //  file nic.linked.aa, line 90
    // ( $slice bmask 2 2 ) 
    [:] [slice_120_inst] (bmask 2 2) (b1_121)  $flowthrough
    $delay slice_120_inst 0
    // 	$volatile b2 := ( $slice bmask 1 1 )  $buffering 1
    //  file nic.linked.aa, line 91
    // ( $slice bmask 1 1 ) 
    [:] [slice_124_inst] (bmask 1 1) (b2_125)  $flowthrough
    $delay slice_124_inst 0
    // 	$volatile b3 := ( $slice bmask 0 0 )  $buffering 1
    //  file nic.linked.aa, line 92
    // ( $slice bmask 0 0 ) 
    [:] [slice_128_inst] (bmask 0 0) (b3_129)  $flowthrough
    $delay slice_128_inst 0
    // 	$volatile r0 := ( $slice rval 31 24 )  $buffering 1
    //  file nic.linked.aa, line 93
    // ( $slice rval 31 24 ) 
    [:] [slice_132_inst] (rval 31 24) (r0_133)  $flowthrough
    $delay slice_132_inst 0
    // 	$volatile r1 := ( $slice rval 23 16 )  $buffering 1
    //  file nic.linked.aa, line 94
    // ( $slice rval 23 16 ) 
    [:] [slice_136_inst] (rval 23 16) (r1_137)  $flowthrough
    $delay slice_136_inst 0
    // 	$volatile r2 := ( $slice rval 15 8 )  $buffering 1
    //  file nic.linked.aa, line 95
    // ( $slice rval 15 8 ) 
    [:] [slice_140_inst] (rval 15 8) (r2_141)  $flowthrough
    $delay slice_140_inst 0
    // 	$volatile r3 := ( $slice rval 7 0 )  $buffering 1
    //  file nic.linked.aa, line 96
    // ( $slice rval 7 0 ) 
    [:] [slice_144_inst] (rval 7 0) (r3_145)  $flowthrough
    $delay slice_144_inst 0
    // 	$volatile w0 := ( $slice wdata 31 24 )  $buffering 1
    //  file nic.linked.aa, line 97
    // ( $slice wdata 31 24 ) 
    [:] [slice_148_inst] (wdata 31 24) (w0_149)  $flowthrough
    $delay slice_148_inst 0
    // 	$volatile w1 := ( $slice wdata 23 16 )  $buffering 1
    //  file nic.linked.aa, line 98
    // ( $slice wdata 23 16 ) 
    [:] [slice_152_inst] (wdata 23 16) (w1_153)  $flowthrough
    $delay slice_152_inst 0
    // 	$volatile w2 := ( $slice wdata 15 8 )  $buffering 1
    //  file nic.linked.aa, line 99
    // ( $slice wdata 15 8 ) 
    [:] [slice_156_inst] (wdata 15 8) (w2_157)  $flowthrough
    $delay slice_156_inst 0
    // 	$volatile w3 := ( $slice wdata 7 0 )  $buffering 1
    //  file nic.linked.aa, line 100
    // ( $slice wdata 7 0 ) 
    [:] [slice_160_inst] (wdata 7 0) (w3_161)  $flowthrough
    $delay slice_160_inst 0
    // 	wval := ((( $mux b0 w0  r0 )  && ( $mux b1 w1  r1 ) ) && (( $mux b2 w2  r2 )  && ( $mux b3 w3  r3 ) )) $buffering 1// bits of buffering = 32. 
    //  file nic.linked.aa, line 101
    // ( $mux b0 w0  r0 ) 
    ? [MUX_166_inst] (b0_117 w0_149 r0_133) (MUX_166_wire)  $flowthrough
    // ( $mux b1 w1  r1 ) 
    ? [MUX_170_inst] (b1_121 w1_153 r1_137) (MUX_170_wire)  $flowthrough
    // (( $mux b0 w0  r0 )  && ( $mux b1 w1  r1 ) )
    &&[CONCAT_u8_u16_171_inst] (MUX_166_wire MUX_170_wire) (CONCAT_u8_u16_171_wire)   $flowthrough 
    $delay CONCAT_u8_u16_171_inst 0
    // ( $mux b2 w2  r2 ) 
    ? [MUX_175_inst] (b2_125 w2_157 r2_141) (MUX_175_wire)  $flowthrough
    // ( $mux b3 w3  r3 ) 
    ? [MUX_179_inst] (b3_129 w3_161 r3_145) (MUX_179_wire)  $flowthrough
    // (( $mux b2 w2  r2 )  && ( $mux b3 w3  r3 ) )
    &&[CONCAT_u8_u16_180_inst] (MUX_175_wire MUX_179_wire) (CONCAT_u8_u16_180_wire)   $flowthrough 
    $delay CONCAT_u8_u16_180_inst 0
    // ((( $mux b0 w0  r0 )  && ( $mux b1 w1  r1 ) ) && (( $mux b2 w2  r2 )  && ( $mux b3 w3  r3 ) ))
    &&[CONCAT_u16_u32_181_inst] (CONCAT_u8_u16_171_wire CONCAT_u8_u16_180_wire) (wval)   
    $buffering  $out CONCAT_u16_u32_181_inst wval 1
    $delay CONCAT_u16_u32_181_inst 1
    // 	nic_registers[index] := wval $buffering 1// bits of buffering = 32. 
    //  file nic.linked.aa, line 102
    // nic_registers[index]
    &/ [array_obj_ref_184_index_0_resize] (index) (R_index_183_resized) 
    $flowthrough 
    &/ [array_obj_ref_184_index_0_rename] (R_index_183_resized) (R_index_183_scaled) 
    $flowthrough 
    &/ [array_obj_ref_184_index_offset] (R_index_183_scaled) (array_obj_ref_184_final_offset) 
    $flowthrough 
    &/ [array_obj_ref_184_root_address_inst] (array_obj_ref_184_final_offset) (array_obj_ref_184_root_address) 
    $flowthrough 
    &/ [array_obj_ref_184_addr_0] (array_obj_ref_184_root_address) (array_obj_ref_184_word_address_0) 
    $flowthrough 
    $store [array_obj_ref_184_store_0] $to memory_space_0 (array_obj_ref_184_word_address_0 array_obj_ref_184_data_0) 
    $delay array_obj_ref_184_store_0 4
    &/ [array_obj_ref_184_gather_scatter] (wval) (array_obj_ref_184_data_0) 
    $flowthrough 
  }
  // end data-path
  // 	$volatile b0 := ( $slice bmask 3 3 )  $buffering 1
  //  file nic.linked.aa, line 89
  // bmask
  // 	$volatile b1 := ( $slice bmask 2 2 )  $buffering 1
  //  file nic.linked.aa, line 90
  // bmask
  // 	$volatile b2 := ( $slice bmask 1 1 )  $buffering 1
  //  file nic.linked.aa, line 91
  // bmask
  // 	$volatile b3 := ( $slice bmask 0 0 )  $buffering 1
  //  file nic.linked.aa, line 92
  // bmask
  // 	$volatile r0 := ( $slice rval 31 24 )  $buffering 1
  //  file nic.linked.aa, line 93
  // rval
  // 	$volatile r1 := ( $slice rval 23 16 )  $buffering 1
  //  file nic.linked.aa, line 94
  // rval
  // 	$volatile r2 := ( $slice rval 15 8 )  $buffering 1
  //  file nic.linked.aa, line 95
  // rval
  // 	$volatile r3 := ( $slice rval 7 0 )  $buffering 1
  //  file nic.linked.aa, line 96
  // rval
  // 	$volatile w0 := ( $slice wdata 31 24 )  $buffering 1
  //  file nic.linked.aa, line 97
  // wdata
  // 	$volatile w1 := ( $slice wdata 23 16 )  $buffering 1
  //  file nic.linked.aa, line 98
  // wdata
  // 	$volatile w2 := ( $slice wdata 15 8 )  $buffering 1
  //  file nic.linked.aa, line 99
  // wdata
  // 	$volatile w3 := ( $slice wdata 7 0 )  $buffering 1
  //  file nic.linked.aa, line 100
  // wdata
  // 	wval := ((( $mux b0 w0  r0 )  && ( $mux b1 w1  r1 ) ) && (( $mux b2 w2  r2 )  && ( $mux b3 w3  r3 ) )) $buffering 1// bits of buffering = 32. 
  //  file nic.linked.aa, line 101
  // ((( $mux b0 w0  r0 )  && ( $mux b1 w1  r1 ) ) && (( $mux b2 w2  r2 )  && ( $mux b3 w3  r3 ) ))
  // (( $mux b0 w0  r0 )  && ( $mux b1 w1  r1 ) )
  // b0
  // w0
  // r0
  // ( $mux b0 w0  r0 ) 
  // b1
  // w1
  // r1
  // ( $mux b1 w1  r1 ) 
  // (( $mux b2 w2  r2 )  && ( $mux b3 w3  r3 ) )
  // b2
  // w2
  // r2
  // ( $mux b2 w2  r2 ) 
  // b3
  // w3
  // r3
  // ( $mux b3 w3  r3 ) 
  CONCAT_u16_u32_181_inst <=> (assign_stmt_117_to_assign_stmt_186/CONCAT_u16_u32_181_Sample/rr assign_stmt_117_to_assign_stmt_186/CONCAT_u16_u32_181_Update/cr) (assign_stmt_117_to_assign_stmt_186/CONCAT_u16_u32_181_Sample/ra assign_stmt_117_to_assign_stmt_186/CONCAT_u16_u32_181_Update/ca)
  // 	nic_registers[index] := wval $buffering 1// bits of buffering = 32. 
  //  file nic.linked.aa, line 102
  // wval
  // index
  array_obj_ref_184_index_0_resize <=> (assign_stmt_117_to_assign_stmt_186/array_obj_ref_184_index_resize_0/index_resize_req) (assign_stmt_117_to_assign_stmt_186/array_obj_ref_184_index_resize_0/index_resize_ack)
  array_obj_ref_184_index_0_rename <=> (assign_stmt_117_to_assign_stmt_186/array_obj_ref_184_index_scale_0/scale_rename_req) (assign_stmt_117_to_assign_stmt_186/array_obj_ref_184_index_scale_0/scale_rename_ack)
  array_obj_ref_184_index_offset <=> (assign_stmt_117_to_assign_stmt_186/array_obj_ref_184_final_index_sum_regn/req) (assign_stmt_117_to_assign_stmt_186/array_obj_ref_184_final_index_sum_regn/ack)
  array_obj_ref_184_root_address_inst <=> (assign_stmt_117_to_assign_stmt_186/array_obj_ref_184_base_plus_offset/sum_rename_req) (assign_stmt_117_to_assign_stmt_186/array_obj_ref_184_base_plus_offset/sum_rename_ack)
  array_obj_ref_184_addr_0 <=> (assign_stmt_117_to_assign_stmt_186/array_obj_ref_184_word_addrgen/root_register_req) (assign_stmt_117_to_assign_stmt_186/array_obj_ref_184_word_addrgen/root_register_ack)
  array_obj_ref_184_gather_scatter <=> (assign_stmt_117_to_assign_stmt_186/array_obj_ref_184_Sample/array_obj_ref_184_Split/split_req) (assign_stmt_117_to_assign_stmt_186/array_obj_ref_184_Sample/array_obj_ref_184_Split/split_ack)
  array_obj_ref_184_store_0 <=> (assign_stmt_117_to_assign_stmt_186/array_obj_ref_184_Sample/word_access_start/word_0/rr assign_stmt_117_to_assign_stmt_186/array_obj_ref_184_Update/word_access_complete/word_0/cr) (assign_stmt_117_to_assign_stmt_186/array_obj_ref_184_Sample/word_access_start/word_0/ra assign_stmt_117_to_assign_stmt_186/array_obj_ref_184_Update/word_access_complete/word_0/ca)
}
$module [NicRegisterAccessDaemon] 
{
  // pipe-declarations for block %NicRegisterAccessDaemon
  //  file nic.linked.aa, line 104
  // pipe-declarations for block %NicRegisterAccessDaemon%loop
  //  file nic.linked.aa, line 109
  // memory-space 0 is read from.
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    <>[branch_block_stmt_189] // Branch Block  file nic.linked.aa, line 109
    {
      $P [branch_block_stmt_189__entry__]
      branch_block_stmt_189__entry__ <-| ($entry)
      $P [branch_block_stmt_189__exit__]
      branch_block_stmt_189__exit__ |-> ($exit)
      $P [do_while_stmt_190__entry__] 
      $P [do_while_stmt_190__exit__] 
      // do-while-statement  
      //  file nic.linked.aa, line 111
      <o> [do_while_stmt_190]  $depth 31 $buffering 1 
      {
        $P[do_while_stmt_190__entry__] 
        $P[do_while_stmt_190__exit__] 
        $P[loop_back] 
        $P[condition_done] 
        $P[loop_body_done] 
        $pipeline [do_while_stmt_190_loop_body] 
        {
          // Pipelined!
          $T[back_edge_to_loop_body] 
          $T[first_time_through_loop_body] 
          $T[loop_body_start] 
          $T[condition_evaluated] 
          $transitionmerge [entry_tmerge] (back_edge_to_loop_body first_time_through_loop_body) (loop_body_start)
          $entry <-& (loop_body_start)
          // start:  			req := NIC_REQUEST_REGISTER_ACCESS_PIPE $buffering 1// bits of buffering = 43. 
          //  file nic.linked.aa, line 115
          // Source expression
          // NIC_REQUEST_REGISTER_ACCESS_PIPE
          $T[RPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_193_sample_start_] 
          $T[RPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_193_sample_completed_] 
          $T[RPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_193_update_start_] 
          $T[RPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_193_update_completed_] 
          ;;[RPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_193_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_193_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_193_sample_start_ &-> (RPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_193_Sample)
          RPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_193_sample_completed_ <-& (RPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_193_Sample)
          RPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_193_update_start_ <-& (RPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_193_sample_completed_)
          RPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_193_update_start_ &-> (RPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_193_Update)
          RPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_193_update_completed_ <-& (RPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_193_Update)
          RPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_193_sample_start_ o<-& (RPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_193_update_completed_ 0)
          // Target expression
          // (as target) req
          // start: WAR dependencies for req
          // done: WAR dependencies for req
          // end:  			req := NIC_REQUEST_REGISTER_ACCESS_PIPE $buffering 1// bits of buffering = 43. 
          // start: WAR dependencies for rwbar
          // done: WAR dependencies for rwbar
          // start:  			$volatile rwbar := ( $slice req 42 42 )  $buffering 1
          //  file nic.linked.aa, line 116
          // volatile! 
          // Source expression
          // ( $slice req 42 42 ) 
          // req
          // Target expression
          // (as target) rwbar
          // start: WAR dependencies for rwbar
          // done: WAR dependencies for rwbar
          // end:  			$volatile rwbar := ( $slice req 42 42 )  $buffering 1
          // start: WAR dependencies for bmask
          // done: WAR dependencies for bmask
          // start:  			$volatile bmask := ( $slice req 41 38 )  $buffering 1
          //  file nic.linked.aa, line 117
          // volatile! 
          // Source expression
          // ( $slice req 41 38 ) 
          // req
          // Target expression
          // (as target) bmask
          // start: WAR dependencies for bmask
          // done: WAR dependencies for bmask
          // end:  			$volatile bmask := ( $slice req 41 38 )  $buffering 1
          // start: WAR dependencies for index
          // done: WAR dependencies for index
          // start:  			$volatile index := ( $slice req 37 32 )  $buffering 1
          //  file nic.linked.aa, line 118
          // volatile! 
          // Source expression
          // ( $slice req 37 32 ) 
          // req
          // Target expression
          // (as target) index
          // start: WAR dependencies for index
          // done: WAR dependencies for index
          // end:  			$volatile index := ( $slice req 37 32 )  $buffering 1
          // start: WAR dependencies for wdata
          // done: WAR dependencies for wdata
          // start:  			$volatile wdata := ( $slice req 31 0 )  $buffering 1
          //  file nic.linked.aa, line 119
          // volatile! 
          // Source expression
          // ( $slice req 31 0 ) 
          // req
          // Target expression
          // (as target) wdata
          // start: WAR dependencies for wdata
          // done: WAR dependencies for wdata
          // end:  			$volatile wdata := ( $slice req 31 0 )  $buffering 1
          // start:  			rval := nic_registers[index] $buffering 1// bits of buffering = 32. 
          //  file nic.linked.aa, line 120
          // Source expression
          // nic_registers[index]
          $T[array_obj_ref_213_base_address_calculated] 
          $T[array_obj_ref_213_sample_start_] 
          $T[array_obj_ref_213_sample_completed_] 
          $T[array_obj_ref_213_update_start_] 
          $T[array_obj_ref_213_update_completed_] 
          $T[array_obj_ref_213_word_address_calculated] 
          $T[array_obj_ref_213_root_address_calculated] 
          $T[array_obj_ref_213_offset_calculated] 
          $T[array_obj_ref_213_index_resized_0] 
          $T[array_obj_ref_213_index_scaled_0] 
          $T[array_obj_ref_213_index_computed_0] 
          // index
          // start: Forward dependencies from index to transition array_obj_ref_213_index_computed_0
          array_obj_ref_213_index_computed_0 <-& (RPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_193_update_completed_)
          // done: Forward dependencies from index to transition array_obj_ref_213_index_computed_0
          ;;[array_obj_ref_213_index_resize_0] 
          {
            $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
          }
          array_obj_ref_213_index_computed_0 &-> (array_obj_ref_213_index_resize_0)
          array_obj_ref_213_index_resized_0 <-& (array_obj_ref_213_index_resize_0)
          ;;[array_obj_ref_213_index_scale_0] 
          {
            $T [scale_rename_req] $T [scale_rename_ack] // rename 
          }
          array_obj_ref_213_index_resized_0 &-> (array_obj_ref_213_index_scale_0)
          array_obj_ref_213_index_scaled_0 <-& (array_obj_ref_213_index_scale_0)
          ;;[array_obj_ref_213_final_index_sum_regn] 
          {
            $T [req] $T [ack] // rename
          }
          array_obj_ref_213_index_scaled_0 &-> (array_obj_ref_213_final_index_sum_regn)
          array_obj_ref_213_offset_calculated <-& (array_obj_ref_213_final_index_sum_regn)
          ;;[array_obj_ref_213_base_plus_offset] 
          {
            $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
          }
          array_obj_ref_213_offset_calculated &-> (array_obj_ref_213_base_plus_offset)
          array_obj_ref_213_root_address_calculated <-& (array_obj_ref_213_base_plus_offset)
          ;;[array_obj_ref_213_word_addrgen] 
          {
            $T [root_register_req] $T [root_register_ack]
          }
          array_obj_ref_213_root_address_calculated &-> (array_obj_ref_213_word_addrgen)
          array_obj_ref_213_word_address_calculated <-& (array_obj_ref_213_word_addrgen)
          ;;[array_obj_ref_213_Sample] 
          {
            ||[word_access_start] 
            {
              ;;[word_0] 
              {
                $T [rr] $T [ra] 
              }
            }
          }
          ;;[array_obj_ref_213_Update] 
          {
            ||[word_access_complete] 
            {
              ;;[word_0] 
              {
                $T [cr] $T [ca] 
              }
            }
            ;;[array_obj_ref_213_Merge] 
            {
              $T [merge_req] $T [merge_ack]
            }
          }
          array_obj_ref_213_sample_start_ <-& (array_obj_ref_213_word_address_calculated)
          // reenable-joins
          RPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_193_update_start_ o<-& (array_obj_ref_213_sample_completed_ 0)
          array_obj_ref_213_sample_start_ &-> (array_obj_ref_213_Sample)
          array_obj_ref_213_sample_completed_ <-& (array_obj_ref_213_Sample)
          array_obj_ref_213_sample_completed_ &-> ($null)
          array_obj_ref_213_update_start_ &-> (array_obj_ref_213_Update)
          array_obj_ref_213_update_completed_ <-& (array_obj_ref_213_Update)
          // self-release: 
          array_obj_ref_213_sample_start_ o<-& (array_obj_ref_213_sample_completed_ 1)
          $null &-> (array_obj_ref_213_update_start_)
          array_obj_ref_213_update_start_ o<-& (array_obj_ref_213_update_completed_ 0)
          // Target expression
          // (as target) rval
          // start: WAR dependencies for rval
          // done: WAR dependencies for rval
          // end:  			rval := nic_registers[index] $buffering 1// bits of buffering = 32. 
          // start: 			$guard (~rwbar) $call UpdateRegister (bmask rval wdata index ) (wval ) 
          //  file nic.linked.aa, line 121
          $T[call_stmt_221_sample_start_] 
          $T[call_stmt_221_sample_completed_] 
          $T[call_stmt_221_update_start_] 
          $T[call_stmt_221_update_completed_] 
          // Guard expression
          // rwbar
          // start: Forward dependencies from rwbar to transition call_stmt_221_sample_start_
          call_stmt_221_sample_start_ <-& (RPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_193_update_completed_)
          // done: Forward dependencies from rwbar to transition call_stmt_221_sample_start_
          // RAW reenables for rwbar
          RPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_193_update_start_ o<-& (call_stmt_221_sample_completed_ 0)
          // Call input argument 0
          // bmask
          // Call input argument 1
          // rval
          // Call input argument 2
          // wdata
          // Call input argument 3
          // index
          // start: Forward dependencies from bmask to transition call_stmt_221_sample_start_
          call_stmt_221_sample_start_ <-& (RPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_193_update_completed_)
          // done: Forward dependencies from bmask to transition call_stmt_221_sample_start_
          // RAW reenables for bmask
          RPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_193_update_start_ o<-& (call_stmt_221_sample_completed_ 0)
          // start: Forward dependencies from rval to transition call_stmt_221_sample_start_
          call_stmt_221_sample_start_ <-& (array_obj_ref_213_update_completed_)
          // done: Forward dependencies from rval to transition call_stmt_221_sample_start_
          // RAW reenables for rval
          array_obj_ref_213_update_start_ o<-& (call_stmt_221_sample_completed_ 0)
          // start: Forward dependencies from wdata to transition call_stmt_221_sample_start_
          call_stmt_221_sample_start_ <-& (RPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_193_update_completed_)
          // done: Forward dependencies from wdata to transition call_stmt_221_sample_start_
          // RAW reenables for wdata
          RPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_193_update_start_ o<-& (call_stmt_221_sample_completed_ 0)
          // start: Forward dependencies from index to transition call_stmt_221_sample_start_
          call_stmt_221_sample_start_ <-& (RPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_193_update_completed_)
          // done: Forward dependencies from index to transition call_stmt_221_sample_start_
          // RAW reenables for index
          RPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_193_update_start_ o<-& (call_stmt_221_sample_completed_ 0)
          ;;[call_stmt_221_Sample] 
          {
            $T [crr] $T [cra] 
          }
          ;;[call_stmt_221_Update] 
          {
            $T [ccr] $T [cca] 
          }
          call_stmt_221_sample_start_ &-> (call_stmt_221_Sample)
          call_stmt_221_sample_completed_ <-& (call_stmt_221_Sample)
          call_stmt_221_sample_completed_ &-> ($null)
          call_stmt_221_update_start_ &-> (call_stmt_221_Update)
          call_stmt_221_update_completed_ <-& (call_stmt_221_Update)
          // Call output argument 0
          // (as target) wval
          // self-release: 
          call_stmt_221_sample_start_ o<-& (call_stmt_221_sample_completed_ 1)
          $null &-> (call_stmt_221_update_start_)
          call_stmt_221_update_start_ o<-& (call_stmt_221_update_completed_ 0)
          // start: WAR dependencies for wval
          // done: WAR dependencies for wval
          // end: 			$guard (~rwbar) $call UpdateRegister (bmask rval wdata index ) (wval ) 
          // start: WAR dependencies for rdata
          // done: WAR dependencies for rdata
          // start:  			$volatile rdata := ( $mux rwbar rval  ($bitcast ($uint<32>) _b0  ) )  $buffering 1
          //  file nic.linked.aa, line 122
          // volatile! 
          // Source expression
          // ( $mux rwbar rval  ($bitcast ($uint<32>) _b0  ) ) 
          // rwbar
          // rval
          // Target expression
          // (as target) rdata
          // start: WAR dependencies for rdata
          // done: WAR dependencies for rdata
          // end:  			$volatile rdata := ( $mux rwbar rval  ($bitcast ($uint<32>) _b0  ) )  $buffering 1
          // start: WAR dependencies for resp
          // done: WAR dependencies for resp
          // start:  			$volatile resp := (($bitcast ($uint<1>) _b0  ) && rdata) $buffering 1
          //  file nic.linked.aa, line 123
          // volatile! 
          // Source expression
          // (($bitcast ($uint<1>) _b0  ) && rdata)
          // rdata
          // Target expression
          // (as target) resp
          // start: WAR dependencies for resp
          // done: WAR dependencies for resp
          // end:  			$volatile resp := (($bitcast ($uint<1>) _b0  ) && rdata) $buffering 1
          // start:  			NIC_RESPONE_REGISTER_ACCESS_PIPE := resp $buffering 1// bits of buffering = 33.  Orphaned statement with target NIC_RESPONE_REGISTER_ACCESS_PIPE ?? 
          //  file nic.linked.aa, line 124
          $T[assign_stmt_237_sample_start_] 
          $T[assign_stmt_237_sample_completed_] 
          $T[assign_stmt_237_update_start_] 
          $T[assign_stmt_237_update_completed_] 
          // Source expression
          // resp
          // Target expression
          // (as target) NIC_RESPONE_REGISTER_ACCESS_PIPE
          // both source and target are implicit: use interlock 
          // Interlock 
          ;;[assign_stmt_237_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          ;;[assign_stmt_237_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          assign_stmt_237_sample_start_ &-> (assign_stmt_237_Sample)
          assign_stmt_237_sample_completed_ <-& (assign_stmt_237_Sample)
          assign_stmt_237_sample_completed_ &-> ($null)
          assign_stmt_237_update_start_ &-> (assign_stmt_237_Update)
          assign_stmt_237_update_completed_ <-& (assign_stmt_237_Update)
          // start: Forward dependencies from resp to transition assign_stmt_237_sample_start_
          assign_stmt_237_sample_start_ <-& (RPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_193_update_completed_)
          assign_stmt_237_sample_start_ <-& (array_obj_ref_213_update_completed_)
          // done: Forward dependencies from resp to transition assign_stmt_237_sample_start_
          // RAW reenables for resp
          RPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_193_update_start_ o<-& (assign_stmt_237_sample_completed_ 0)
          array_obj_ref_213_update_start_ o<-& (assign_stmt_237_sample_completed_ 0)
          // self-release: 
          assign_stmt_237_sample_start_ o<-& (assign_stmt_237_sample_completed_ 1)
          $null &-> (assign_stmt_237_update_start_)
          assign_stmt_237_update_start_ o<-& (assign_stmt_237_update_completed_ 0)
          // start: WAR dependencies for NIC_RESPONE_REGISTER_ACCESS_PIPE
          // done: WAR dependencies for NIC_RESPONE_REGISTER_ACCESS_PIPE
          // end:  			NIC_RESPONE_REGISTER_ACCESS_PIPE := resp $buffering 1// bits of buffering = 33.  Orphaned statement with target NIC_RESPONE_REGISTER_ACCESS_PIPE ?? 
          $T [loop_body_delay_to_condition_start] $delay
          loop_body_start &-> (loop_body_delay_to_condition_start)
          loop_body_delay_to_condition_start &-> (condition_evaluated)
          condition_evaluated &-> ($null)
          // load-store dependencies..
          // memory-space  memory_space_0
          //  array_obj_ref_213 load
          //  call_stmt_221 store
          $T [array_obj_ref_213_call_stmt_221_delay] $delay
          // array_obj_ref_213(load) -> call_stmt_221(store)
          call_stmt_221_sample_start_ <-& (array_obj_ref_213_call_stmt_221_delay)
          array_obj_ref_213_call_stmt_221_delay <-& (array_obj_ref_213_sample_completed_)
          // reenable across ring for memory space memory_space_0
          $T[ring_reenable_memory_space_0] 
          ring_reenable_memory_space_0 <-& (call_stmt_221_update_completed_)
          array_obj_ref_213_sample_start_ o<-& (ring_reenable_memory_space_0 1)
          // pipe read/write dependencies for pipe NIC_REQUEST_REGISTER_ACCESS_PIPE
          // read-dependencies for pipe NIC_REQUEST_REGISTER_ACCESS_PIPE
          // write-dependencies for pipe NIC_REQUEST_REGISTER_ACCESS_PIPE
          // signal write dependencies for NIC_REQUEST_REGISTER_ACCESS_PIPE
        }
        ( first_time_through_loop_body  back_edge_to_loop_body) 
        ( condition_evaluated )
        ;; [loop_exit] 
        {
          $T [ack] 
        }
        ;; [loop_taken] 
        {
          $T [ack] 
        }
        do_while_stmt_190__entry__ <-| ($entry)
        loop_body_done <-| ( do_while_stmt_190_loop_body ) 
        condition_done |-> (loop_exit loop_taken)
        do_while_stmt_190__exit__ |-> ($exit)
        $bind condition_done <= do_while_stmt_190_loop_body : condition_evaluated
        $bind do_while_stmt_190__entry__  => do_while_stmt_190_loop_body : first_time_through_loop_body 
        $bind loop_back  => do_while_stmt_190_loop_body : back_edge_to_loop_body 
        $terminate (loop_exit loop_taken loop_body_done) (loop_back do_while_stmt_190__exit__)
      }
      do_while_stmt_190__entry__ |-> (do_while_stmt_190)
      do_while_stmt_190__exit__ <-| (do_while_stmt_190)
      do_while_stmt_190__entry__ <-| (branch_block_stmt_189__entry__)
      do_while_stmt_190__exit__ |-> (branch_block_stmt_189__exit__)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %NicRegisterAccessDaemon%loop%
    //  file nic.linked.aa, line 113
    // constant-object-declarations for block %NicRegisterAccessDaemon%loop
    //  file nic.linked.aa, line 109
    // constant-object-declarations for block %NicRegisterAccessDaemon
    //  file nic.linked.aa, line 104
    // constant-declarations for block %NicRegisterAccessDaemon%loop
    //  file nic.linked.aa, line 109
    // do-while statement  
    //  file nic.linked.aa, line 111
    // 1 
    $constant $W[konst_239_wire_constant] : $int<1> := _b1// 1
    // constant-declarations for block %NicRegisterAccessDaemon%loop%
    //  file nic.linked.aa, line 113
    // nic_registers[index]
    $constant $W[array_obj_ref_213_resized_base_address] : $int<6> := _b000000// 0
    $constant $W[array_obj_ref_213_offset_scale_factor_0] : $int<6> := _b000001// 1
    $constant $W[array_obj_ref_213_word_offset_0] : $int<6> := _b000000// 0
    // 			$guard (~rwbar) $call UpdateRegister (bmask rval wdata index ) (wval ) 
    //  file nic.linked.aa, line 121
    // ( $mux rwbar rval  ($bitcast ($uint<32>) _b0  ) ) 
    // ($bitcast ($uint<32>) _b0  )
    $constant $W[type_cast_226_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // ($bitcast ($uint<1>) _b0  )
    $constant $W[type_cast_231_wire_constant] : $int<1> := _b0// 0
    // block %NicRegisterAccessDaemon%loop
    //  file nic.linked.aa, line 109
    // do-while statement  
    //  file nic.linked.aa, line 111
    // 			req := NIC_REQUEST_REGISTER_ACCESS_PIPE $buffering 1// bits of buffering = 43. 
    //  file nic.linked.aa, line 115
    // req
    $W[req_194] : $int<43>
    // 			$volatile rwbar := ( $slice req 42 42 )  $buffering 1
    //  file nic.linked.aa, line 116
    // rwbar
    $W[rwbar_198] : $int<1>
    // 			$volatile bmask := ( $slice req 41 38 )  $buffering 1
    //  file nic.linked.aa, line 117
    // bmask
    $W[bmask_202] : $int<4>
    // 			$volatile index := ( $slice req 37 32 )  $buffering 1
    //  file nic.linked.aa, line 118
    // index
    $W[index_206] : $int<6>
    // 			$volatile wdata := ( $slice req 31 0 )  $buffering 1
    //  file nic.linked.aa, line 119
    // wdata
    $W[wdata_210] : $int<32>
    // 			rval := nic_registers[index] $buffering 1// bits of buffering = 32. 
    //  file nic.linked.aa, line 120
    // nic_registers[index]
    $intermediate $W[R_index_212_resized] : $int<6>
    $intermediate $W[R_index_212_scaled] : $int<6>
    $intermediate $W[array_obj_ref_213_final_offset] : $int<6>
    $intermediate $W[array_obj_ref_213_root_address] : $int<6>
    $W[array_obj_ref_213_word_address_0] : $pointer<memory_space_0>
    $W[array_obj_ref_213_data_0] : $int<32>
    // rval
    $W[rval_214] : $int<32>
    // 			$guard (~rwbar) $call UpdateRegister (bmask rval wdata index ) (wval ) 
    //  file nic.linked.aa, line 121
    // wval
    $W[wval_221] : $int<32>
    // 			$volatile rdata := ( $mux rwbar rval  ($bitcast ($uint<32>) _b0  ) )  $buffering 1
    //  file nic.linked.aa, line 122
    // rdata
    $W[rdata_228] : $int<32>
    // 			$volatile resp := (($bitcast ($uint<1>) _b0  ) && rdata) $buffering 1
    //  file nic.linked.aa, line 123
    // resp
    $W[resp_234] : $int<33>
    // 			NIC_RESPONE_REGISTER_ACCESS_PIPE := resp $buffering 1// bits of buffering = 33.  Orphaned statement with target NIC_RESPONE_REGISTER_ACCESS_PIPE ?? 
    //  file nic.linked.aa, line 124
    // NIC_RESPONE_REGISTER_ACCESS_PIPE
    $W[NIC_RESPONE_REGISTER_ACCESS_PIPE_237] : $int<33>
    // datapath-instances for block %NicRegisterAccessDaemon%loop
    //  file nic.linked.aa, line 109
    // datapath-instances for do-while  
    //  file nic.linked.aa, line 111
    ==0? [do_while_stmt_190_branch] (konst_239_wire_constant)
    $flowthrough
    // 			req := NIC_REQUEST_REGISTER_ACCESS_PIPE $buffering 1// bits of buffering = 43. 
    //  file nic.linked.aa, line 115
    // NIC_REQUEST_REGISTER_ACCESS_PIPE
    $ioport $in [RPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_193_inst] (NIC_REQUEST_REGISTER_ACCESS_PIPE) (req_194)  $fullrate 
    $buffering $out RPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_193_inst req_194 1
    // 			$volatile rwbar := ( $slice req 42 42 )  $buffering 1
    //  file nic.linked.aa, line 116
    // ( $slice req 42 42 ) 
    [:] [slice_197_inst] (req_194 42 42) (rwbar_198)  $flowthrough
    $delay slice_197_inst 0
    // 			$volatile bmask := ( $slice req 41 38 )  $buffering 1
    //  file nic.linked.aa, line 117
    // ( $slice req 41 38 ) 
    [:] [slice_201_inst] (req_194 41 38) (bmask_202)  $flowthrough
    $delay slice_201_inst 0
    // 			$volatile index := ( $slice req 37 32 )  $buffering 1
    //  file nic.linked.aa, line 118
    // ( $slice req 37 32 ) 
    [:] [slice_205_inst] (req_194 37 32) (index_206)  $flowthrough
    $delay slice_205_inst 0
    // 			$volatile wdata := ( $slice req 31 0 )  $buffering 1
    //  file nic.linked.aa, line 119
    // ( $slice req 31 0 ) 
    [:] [slice_209_inst] (req_194 31 0) (wdata_210)  $flowthrough
    $delay slice_209_inst 0
    // 			rval := nic_registers[index] $buffering 1// bits of buffering = 32. 
    //  file nic.linked.aa, line 120
    // nic_registers[index]
    &/ [array_obj_ref_213_index_0_resize] (index_206) (R_index_212_resized) 
    $flowthrough 
    &/ [array_obj_ref_213_index_0_rename] (R_index_212_resized) (R_index_212_scaled) 
    $flowthrough 
    &/ [array_obj_ref_213_index_offset] (R_index_212_scaled) (array_obj_ref_213_final_offset) 
    $flowthrough 
    &/ [array_obj_ref_213_root_address_inst] (array_obj_ref_213_final_offset) (array_obj_ref_213_root_address) 
    $flowthrough 
    &/ [array_obj_ref_213_addr_0] (array_obj_ref_213_root_address) (array_obj_ref_213_word_address_0) 
    $flowthrough 
    $load [array_obj_ref_213_load_0] $from memory_space_0 (array_obj_ref_213_word_address_0) (array_obj_ref_213_data_0) 
    $buffering  $in array_obj_ref_213_load_0 array_obj_ref_213_word_address_0 2
    $buffering  $out array_obj_ref_213_load_0 array_obj_ref_213_data_0 2
    $delay array_obj_ref_213_load_0 5
    &/ [array_obj_ref_213_gather_scatter] (array_obj_ref_213_data_0) (rval_214) 
    $flowthrough 
    // 			$guard (~rwbar) $call UpdateRegister (bmask rval wdata index ) (wval ) 
    //  file nic.linked.aa, line 121
    $call [call_stmt_221_call] $module UpdateRegister(bmask_202 rval_214 wdata_210 index_206) (wval_221) $guard ( ~ rwbar_198 )   $fullrate
    $delay call_stmt_221_call 4
    $buffering  $in call_stmt_221_call bmask_202 1
    $buffering  $in call_stmt_221_call rval_214 1
    $buffering  $in call_stmt_221_call wdata_210 1
    $buffering  $in call_stmt_221_call index_206 1
    $buffering  $out call_stmt_221_call wval_221 1
    // 			$volatile rdata := ( $mux rwbar rval  ($bitcast ($uint<32>) _b0  ) )  $buffering 1
    //  file nic.linked.aa, line 122
    // ( $mux rwbar rval  ($bitcast ($uint<32>) _b0  ) ) 
    ? [MUX_227_inst] (rwbar_198 rval_214 type_cast_226_wire_constant) (rdata_228)  $flowthrough
    // 			$volatile resp := (($bitcast ($uint<1>) _b0  ) && rdata) $buffering 1
    //  file nic.linked.aa, line 123
    // (($bitcast ($uint<1>) _b0  ) && rdata)
    &&[CONCAT_u1_u33_233_inst] (type_cast_231_wire_constant rdata_228) (resp_234)   $flowthrough 
    $delay CONCAT_u1_u33_233_inst 0
    // 			NIC_RESPONE_REGISTER_ACCESS_PIPE := resp $buffering 1// bits of buffering = 33.  Orphaned statement with target NIC_RESPONE_REGISTER_ACCESS_PIPE ?? 
    //  file nic.linked.aa, line 124
    # := [W_NIC_RESPONE_REGISTER_ACCESS_PIPE_235_inst] (resp_234) (NIC_RESPONE_REGISTER_ACCESS_PIPE_237)     $fullrate
  }
  // end data-path
  // CP-DP links for do-while  do_while_stmt_190
  //  file nic.linked.aa, line 111
  // 			req := NIC_REQUEST_REGISTER_ACCESS_PIPE $buffering 1// bits of buffering = 43. 
  //  file nic.linked.aa, line 115
  // NIC_REQUEST_REGISTER_ACCESS_PIPE
  RPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_193_inst <=> (branch_block_stmt_189/do_while_stmt_190/do_while_stmt_190_loop_body/RPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_193_Sample/rr branch_block_stmt_189/do_while_stmt_190/do_while_stmt_190_loop_body/RPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_193_Update/cr) (branch_block_stmt_189/do_while_stmt_190/do_while_stmt_190_loop_body/RPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_193_Sample/ra branch_block_stmt_189/do_while_stmt_190/do_while_stmt_190_loop_body/RPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_193_Update/ca)
  // 			$volatile rwbar := ( $slice req 42 42 )  $buffering 1
  //  file nic.linked.aa, line 116
  // req
  // 			$volatile bmask := ( $slice req 41 38 )  $buffering 1
  //  file nic.linked.aa, line 117
  // req
  // 			$volatile index := ( $slice req 37 32 )  $buffering 1
  //  file nic.linked.aa, line 118
  // req
  // 			$volatile wdata := ( $slice req 31 0 )  $buffering 1
  //  file nic.linked.aa, line 119
  // req
  // 			rval := nic_registers[index] $buffering 1// bits of buffering = 32. 
  //  file nic.linked.aa, line 120
  // nic_registers[index]
  // index
  array_obj_ref_213_index_0_resize <=> (branch_block_stmt_189/do_while_stmt_190/do_while_stmt_190_loop_body/array_obj_ref_213_index_resize_0/index_resize_req) (branch_block_stmt_189/do_while_stmt_190/do_while_stmt_190_loop_body/array_obj_ref_213_index_resize_0/index_resize_ack)
  array_obj_ref_213_index_0_rename <=> (branch_block_stmt_189/do_while_stmt_190/do_while_stmt_190_loop_body/array_obj_ref_213_index_scale_0/scale_rename_req) (branch_block_stmt_189/do_while_stmt_190/do_while_stmt_190_loop_body/array_obj_ref_213_index_scale_0/scale_rename_ack)
  array_obj_ref_213_index_offset <=> (branch_block_stmt_189/do_while_stmt_190/do_while_stmt_190_loop_body/array_obj_ref_213_final_index_sum_regn/req) (branch_block_stmt_189/do_while_stmt_190/do_while_stmt_190_loop_body/array_obj_ref_213_final_index_sum_regn/ack)
  array_obj_ref_213_root_address_inst <=> (branch_block_stmt_189/do_while_stmt_190/do_while_stmt_190_loop_body/array_obj_ref_213_base_plus_offset/sum_rename_req) (branch_block_stmt_189/do_while_stmt_190/do_while_stmt_190_loop_body/array_obj_ref_213_base_plus_offset/sum_rename_ack)
  array_obj_ref_213_addr_0 <=> (branch_block_stmt_189/do_while_stmt_190/do_while_stmt_190_loop_body/array_obj_ref_213_word_addrgen/root_register_req) (branch_block_stmt_189/do_while_stmt_190/do_while_stmt_190_loop_body/array_obj_ref_213_word_addrgen/root_register_ack)
  array_obj_ref_213_gather_scatter <=> (branch_block_stmt_189/do_while_stmt_190/do_while_stmt_190_loop_body/array_obj_ref_213_Update/array_obj_ref_213_Merge/merge_req) (branch_block_stmt_189/do_while_stmt_190/do_while_stmt_190_loop_body/array_obj_ref_213_Update/array_obj_ref_213_Merge/merge_ack)
  array_obj_ref_213_load_0 <=> (branch_block_stmt_189/do_while_stmt_190/do_while_stmt_190_loop_body/array_obj_ref_213_Sample/word_access_start/word_0/rr branch_block_stmt_189/do_while_stmt_190/do_while_stmt_190_loop_body/array_obj_ref_213_Update/word_access_complete/word_0/cr) (branch_block_stmt_189/do_while_stmt_190/do_while_stmt_190_loop_body/array_obj_ref_213_Sample/word_access_start/word_0/ra branch_block_stmt_189/do_while_stmt_190/do_while_stmt_190_loop_body/array_obj_ref_213_Update/word_access_complete/word_0/ca)
  // 			$guard (~rwbar) $call UpdateRegister (bmask rval wdata index ) (wval ) 
  //  file nic.linked.aa, line 121
  // bmask
  // rval
  // wdata
  // index
  call_stmt_221_call <=> (branch_block_stmt_189/do_while_stmt_190/do_while_stmt_190_loop_body/call_stmt_221_Sample/crr branch_block_stmt_189/do_while_stmt_190/do_while_stmt_190_loop_body/call_stmt_221_Update/ccr) (branch_block_stmt_189/do_while_stmt_190/do_while_stmt_190_loop_body/call_stmt_221_Sample/cra branch_block_stmt_189/do_while_stmt_190/do_while_stmt_190_loop_body/call_stmt_221_Update/cca)
  // 			$volatile rdata := ( $mux rwbar rval  ($bitcast ($uint<32>) _b0  ) )  $buffering 1
  //  file nic.linked.aa, line 122
  // rwbar
  // rval
  // ( $mux rwbar rval  ($bitcast ($uint<32>) _b0  ) ) 
  // 			$volatile resp := (($bitcast ($uint<1>) _b0  ) && rdata) $buffering 1
  //  file nic.linked.aa, line 123
  // (($bitcast ($uint<1>) _b0  ) && rdata)
  // rdata
  // 			NIC_RESPONE_REGISTER_ACCESS_PIPE := resp $buffering 1// bits of buffering = 33.  Orphaned statement with target NIC_RESPONE_REGISTER_ACCESS_PIPE ?? 
  //  file nic.linked.aa, line 124
  // resp
  W_NIC_RESPONE_REGISTER_ACCESS_PIPE_235_inst <=> (branch_block_stmt_189/do_while_stmt_190/do_while_stmt_190_loop_body/assign_stmt_237_Sample/req branch_block_stmt_189/do_while_stmt_190/do_while_stmt_190_loop_body/assign_stmt_237_Update/req) (branch_block_stmt_189/do_while_stmt_190/do_while_stmt_190_loop_body/assign_stmt_237_Sample/ack branch_block_stmt_189/do_while_stmt_190/do_while_stmt_190_loop_body/assign_stmt_237_Update/ack)
  do_while_stmt_190_branch <=> (branch_block_stmt_189/do_while_stmt_190/do_while_stmt_190_loop_body/condition_evaluated) (branch_block_stmt_189/do_while_stmt_190/loop_exit/ack branch_block_stmt_189/do_while_stmt_190/loop_taken/ack)
}
$pipeline $depth 15 $buffering 1 $fullrate $module [accessMemory] 
{
  $in lock:$int<1>
  // can point into 
  rwbar:$int<1>
  // can point into 
  bmask:$int<8>
  // can point into 
  addr:$int<36>
  // can point into 
  wdata:$int<64>
  // can point into 
  $out rdata:$int<64>
  // can point into 
  // pipe-declarations for block %accessMemory
  //  file nic.linked.aa, line 128
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    // pipelined module
    :|:[assign_stmt_259_to_assign_stmt_273] 
    {
      $T [lock_update_enable] 
      $T [lock_update_enable_out] 
      lock_update_enable &-> (lock_update_enable_out)
      $null &-> (lock_update_enable)
      $T [rwbar_update_enable] 
      $T [rwbar_update_enable_out] 
      rwbar_update_enable &-> (rwbar_update_enable_out)
      $null &-> (rwbar_update_enable)
      $T [bmask_update_enable] 
      $T [bmask_update_enable_out] 
      bmask_update_enable &-> (bmask_update_enable_out)
      $null &-> (bmask_update_enable)
      $T [addr_update_enable] 
      $T [addr_update_enable_out] 
      addr_update_enable &-> (addr_update_enable_out)
      $null &-> (addr_update_enable)
      $T [wdata_update_enable] 
      $T [wdata_update_enable_out] 
      wdata_update_enable &-> (wdata_update_enable_out)
      $null &-> (wdata_update_enable)
      $T [rdata_update_enable] 
      $T [rdata_update_enable_in] 
      $null &-> (rdata_update_enable)
      $null <-& (rdata_update_enable_in) 
      $null &-> (rdata_update_enable)
      rdata_update_enable <-& (rdata_update_enable_in) 
      // start: WAR dependencies for request
      // done: WAR dependencies for request
      // start:  	$volatile request := (((lock && rwbar) && bmask) && (addr && wdata)) $buffering 1
      //  file nic.linked.aa, line 133
      // volatile! 
      // Source expression
      // (((lock && rwbar) && bmask) && (addr && wdata))
      // ((lock && rwbar) && bmask)
      // (lock && rwbar)
      // lock
      // rwbar
      // bmask
      // (addr && wdata)
      // addr
      // wdata
      // Target expression
      // (as target) request
      // start: WAR dependencies for request
      // done: WAR dependencies for request
      // end:  	$volatile request := (((lock && rwbar) && bmask) && (addr && wdata)) $buffering 1
      // start:  	NIC_TO_MEMORY_REQUEST := request $buffering 1// bits of buffering = 110. 
      //  file nic.linked.aa, line 134
      // Source expression
      // request
      // Target expression
      // (as target) NIC_TO_MEMORY_REQUEST
      $T[WPIPE_NIC_TO_MEMORY_REQUEST_260_sample_start_] 
      $T[WPIPE_NIC_TO_MEMORY_REQUEST_260_sample_completed_] 
      $T[WPIPE_NIC_TO_MEMORY_REQUEST_260_update_start_] 
      $T[WPIPE_NIC_TO_MEMORY_REQUEST_260_update_completed_] 
      ;;[WPIPE_NIC_TO_MEMORY_REQUEST_260_Sample] 
      {
        // pipe write sample-start NIC_TO_MEMORY_REQUEST
        $T [req] $T [ack] 
      }
      ;;[WPIPE_NIC_TO_MEMORY_REQUEST_260_Update] 
      {
        // pipe write update (complete) NIC_TO_MEMORY_REQUEST
        $T [req] $T [ack] 
      }
      WPIPE_NIC_TO_MEMORY_REQUEST_260_sample_start_ &-> (WPIPE_NIC_TO_MEMORY_REQUEST_260_Sample)
      WPIPE_NIC_TO_MEMORY_REQUEST_260_sample_completed_ <-& (WPIPE_NIC_TO_MEMORY_REQUEST_260_Sample)
      WPIPE_NIC_TO_MEMORY_REQUEST_260_update_start_ <-& (WPIPE_NIC_TO_MEMORY_REQUEST_260_sample_completed_)
      WPIPE_NIC_TO_MEMORY_REQUEST_260_update_start_ &-> (WPIPE_NIC_TO_MEMORY_REQUEST_260_Update)
      WPIPE_NIC_TO_MEMORY_REQUEST_260_update_completed_ <-& (WPIPE_NIC_TO_MEMORY_REQUEST_260_Update)
      WPIPE_NIC_TO_MEMORY_REQUEST_260_sample_start_ o<-& (WPIPE_NIC_TO_MEMORY_REQUEST_260_update_completed_ 0)
      // start: Forward dependencies from request to transition WPIPE_NIC_TO_MEMORY_REQUEST_260_sample_start_
      WPIPE_NIC_TO_MEMORY_REQUEST_260_sample_start_ <-& ($entry)
      WPIPE_NIC_TO_MEMORY_REQUEST_260_sample_start_ <-& ($entry)
      WPIPE_NIC_TO_MEMORY_REQUEST_260_sample_start_ <-& ($entry)
      WPIPE_NIC_TO_MEMORY_REQUEST_260_sample_start_ <-& ($entry)
      WPIPE_NIC_TO_MEMORY_REQUEST_260_sample_start_ <-& ($entry)
      // done: Forward dependencies from request to transition WPIPE_NIC_TO_MEMORY_REQUEST_260_sample_start_
      // RAW reenables for request
      lock_update_enable o<-& (WPIPE_NIC_TO_MEMORY_REQUEST_260_sample_completed_ 0)
      rwbar_update_enable o<-& (WPIPE_NIC_TO_MEMORY_REQUEST_260_sample_completed_ 0)
      bmask_update_enable o<-& (WPIPE_NIC_TO_MEMORY_REQUEST_260_sample_completed_ 0)
      addr_update_enable o<-& (WPIPE_NIC_TO_MEMORY_REQUEST_260_sample_completed_ 0)
      wdata_update_enable o<-& (WPIPE_NIC_TO_MEMORY_REQUEST_260_sample_completed_ 0)
      // end:  	NIC_TO_MEMORY_REQUEST := request $buffering 1// bits of buffering = 110. 
      // start:  	response := MEMORY_TO_NIC_RESPONSE $buffering 1// bits of buffering = 65. 
      //  file nic.linked.aa, line 135
      // Source expression
      // MEMORY_TO_NIC_RESPONSE
      $T[RPIPE_MEMORY_TO_NIC_RESPONSE_264_sample_start_] 
      $T[RPIPE_MEMORY_TO_NIC_RESPONSE_264_sample_completed_] 
      $T[RPIPE_MEMORY_TO_NIC_RESPONSE_264_update_start_] 
      $T[RPIPE_MEMORY_TO_NIC_RESPONSE_264_update_completed_] 
      ;;[RPIPE_MEMORY_TO_NIC_RESPONSE_264_Sample] 
      {
        // pipe read sample
        $T [rr] $T [ra] 
      }
      ;;[RPIPE_MEMORY_TO_NIC_RESPONSE_264_Update] 
      {
        // pipe read update
        $T [cr] $T [ca] 
      }
      RPIPE_MEMORY_TO_NIC_RESPONSE_264_sample_start_ &-> (RPIPE_MEMORY_TO_NIC_RESPONSE_264_Sample)
      RPIPE_MEMORY_TO_NIC_RESPONSE_264_sample_completed_ <-& (RPIPE_MEMORY_TO_NIC_RESPONSE_264_Sample)
      RPIPE_MEMORY_TO_NIC_RESPONSE_264_update_start_ <-& (RPIPE_MEMORY_TO_NIC_RESPONSE_264_sample_completed_)
      RPIPE_MEMORY_TO_NIC_RESPONSE_264_update_start_ &-> (RPIPE_MEMORY_TO_NIC_RESPONSE_264_Update)
      RPIPE_MEMORY_TO_NIC_RESPONSE_264_update_completed_ <-& (RPIPE_MEMORY_TO_NIC_RESPONSE_264_Update)
      RPIPE_MEMORY_TO_NIC_RESPONSE_264_sample_start_ o<-& (RPIPE_MEMORY_TO_NIC_RESPONSE_264_update_completed_ 0)
      // Target expression
      // (as target) response
      // start: WAR dependencies for response
      // done: WAR dependencies for response
      // end:  	response := MEMORY_TO_NIC_RESPONSE $buffering 1// bits of buffering = 65. 
      // start: WAR dependencies for err
      // done: WAR dependencies for err
      // start:  	$volatile err := ( $slice response 64 64 )  $buffering 1
      //  file nic.linked.aa, line 136
      // volatile! 
      // Source expression
      // ( $slice response 64 64 ) 
      // response
      // Target expression
      // (as target) err
      // start: WAR dependencies for err
      // done: WAR dependencies for err
      // end:  	$volatile err := ( $slice response 64 64 )  $buffering 1
      // start: WAR dependencies for rdata
      // done: WAR dependencies for rdata
      // start:  	$volatile rdata := ( $slice response 63 0 )  $buffering 1
      //  file nic.linked.aa, line 137
      // volatile! 
      // Source expression
      // ( $slice response 63 0 ) 
      // response
      // Target expression
      // (as target) rdata
      // rdata
      // write to interface object
      // start: WAR dependencies for rdata
      // done: WAR dependencies for rdata
      // rdata
      // write to interface object
      RPIPE_MEMORY_TO_NIC_RESPONSE_264_update_start_ <-& (rdata_update_enable)
      // end:  	$volatile rdata := ( $slice response 63 0 )  $buffering 1
      // load-store dependencies..
      // pipe read/write dependencies for pipe MEMORY_TO_NIC_RESPONSE
      // read-dependencies for pipe MEMORY_TO_NIC_RESPONSE
      // write-dependencies for pipe MEMORY_TO_NIC_RESPONSE
      // signal write dependencies for MEMORY_TO_NIC_RESPONSE
      // pipe read/write dependencies for pipe NIC_TO_MEMORY_REQUEST
      // read-dependencies for pipe NIC_TO_MEMORY_REQUEST
      // write-dependencies for pipe NIC_TO_MEMORY_REQUEST
      // signal write dependencies for NIC_TO_MEMORY_REQUEST
    }
    ( rdata_update_enable_in)
    ( lock_update_enable_out rwbar_update_enable_out bmask_update_enable_out addr_update_enable_out wdata_update_enable_out)
    $P [lock_update_enable] 
    $P [rwbar_update_enable] 
    $P [bmask_update_enable] 
    $P [addr_update_enable] 
    $P [wdata_update_enable] 
    $P [rdata_update_enable] 
    $bind lock_update_enable <= assign_stmt_259_to_assign_stmt_273 : lock_update_enable_out
    $bind rwbar_update_enable <= assign_stmt_259_to_assign_stmt_273 : rwbar_update_enable_out
    $bind bmask_update_enable <= assign_stmt_259_to_assign_stmt_273 : bmask_update_enable_out
    $bind addr_update_enable <= assign_stmt_259_to_assign_stmt_273 : addr_update_enable_out
    $bind wdata_update_enable <= assign_stmt_259_to_assign_stmt_273 : wdata_update_enable_out
    $bind rdata_update_enable => assign_stmt_259_to_assign_stmt_273 : rdata_update_enable_in
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %accessMemory
    //  file nic.linked.aa, line 128
    // 	$volatile request := (((lock && rwbar) && bmask) && (addr && wdata)) $buffering 1
    //  file nic.linked.aa, line 133
    // (lock && rwbar)
    $intermediate $W[CONCAT_u1_u2_252_wire] : $int<2>
    // ((lock && rwbar) && bmask)
    $intermediate $W[CONCAT_u2_u10_254_wire] : $int<10>
    // (addr && wdata)
    $intermediate $W[CONCAT_u36_u100_257_wire] : $int<100>
    // request
    $W[request_259] : $int<110>
    // 	NIC_TO_MEMORY_REQUEST := request $buffering 1// bits of buffering = 110. 
    //  file nic.linked.aa, line 134
    // NIC_TO_MEMORY_REQUEST
    // 	response := MEMORY_TO_NIC_RESPONSE $buffering 1// bits of buffering = 65. 
    //  file nic.linked.aa, line 135
    // response
    $W[response_265] : $int<65>
    // 	$volatile err := ( $slice response 64 64 )  $buffering 1
    //  file nic.linked.aa, line 136
    // err
    $W[err_269] : $int<1>
    // 	$volatile rdata := ( $slice response 63 0 )  $buffering 1
    //  file nic.linked.aa, line 137
    // rdata
    // 	$volatile request := (((lock && rwbar) && bmask) && (addr && wdata)) $buffering 1
    //  file nic.linked.aa, line 133
    // (lock && rwbar)
    &&[CONCAT_u1_u2_252_inst] (lock rwbar) (CONCAT_u1_u2_252_wire)   $flowthrough 
    $delay CONCAT_u1_u2_252_inst 0
    // ((lock && rwbar) && bmask)
    &&[CONCAT_u2_u10_254_inst] (CONCAT_u1_u2_252_wire bmask) (CONCAT_u2_u10_254_wire)   $flowthrough 
    $delay CONCAT_u2_u10_254_inst 0
    // (addr && wdata)
    &&[CONCAT_u36_u100_257_inst] (addr wdata) (CONCAT_u36_u100_257_wire)   $flowthrough 
    $delay CONCAT_u36_u100_257_inst 0
    // (((lock && rwbar) && bmask) && (addr && wdata))
    &&[CONCAT_u10_u110_258_inst] (CONCAT_u2_u10_254_wire CONCAT_u36_u100_257_wire) (request_259)   $flowthrough 
    $delay CONCAT_u10_u110_258_inst 0
    // 	NIC_TO_MEMORY_REQUEST := request $buffering 1// bits of buffering = 110. 
    //  file nic.linked.aa, line 134
    // NIC_TO_MEMORY_REQUEST
    $ioport $out [WPIPE_NIC_TO_MEMORY_REQUEST_260_inst]  (request_259) (NIC_TO_MEMORY_REQUEST)  $fullrate 
    // 	response := MEMORY_TO_NIC_RESPONSE $buffering 1// bits of buffering = 65. 
    //  file nic.linked.aa, line 135
    // MEMORY_TO_NIC_RESPONSE
    $ioport $in [RPIPE_MEMORY_TO_NIC_RESPONSE_264_inst] (MEMORY_TO_NIC_RESPONSE) (response_265)  $fullrate 
    $buffering $out RPIPE_MEMORY_TO_NIC_RESPONSE_264_inst response_265 1
    // 	$volatile err := ( $slice response 64 64 )  $buffering 1
    //  file nic.linked.aa, line 136
    // ( $slice response 64 64 ) 
    [:] [slice_268_inst] (response_265 64 64) (err_269)  $flowthrough
    $delay slice_268_inst 0
    // 	$volatile rdata := ( $slice response 63 0 )  $buffering 1
    //  file nic.linked.aa, line 137
    // ( $slice response 63 0 ) 
    [:] [slice_272_inst] (response_265 63 0) (rdata)  $flowthrough
    $delay slice_272_inst 0
  }
  // end data-path
  // 	$volatile request := (((lock && rwbar) && bmask) && (addr && wdata)) $buffering 1
  //  file nic.linked.aa, line 133
  // (((lock && rwbar) && bmask) && (addr && wdata))
  // ((lock && rwbar) && bmask)
  // (lock && rwbar)
  // lock
  // rwbar
  // bmask
  // (addr && wdata)
  // addr
  // wdata
  // 	NIC_TO_MEMORY_REQUEST := request $buffering 1// bits of buffering = 110. 
  //  file nic.linked.aa, line 134
  // request
  // NIC_TO_MEMORY_REQUEST
  WPIPE_NIC_TO_MEMORY_REQUEST_260_inst <=> (assign_stmt_259_to_assign_stmt_273/WPIPE_NIC_TO_MEMORY_REQUEST_260_Sample/req assign_stmt_259_to_assign_stmt_273/WPIPE_NIC_TO_MEMORY_REQUEST_260_Update/req) (assign_stmt_259_to_assign_stmt_273/WPIPE_NIC_TO_MEMORY_REQUEST_260_Sample/ack assign_stmt_259_to_assign_stmt_273/WPIPE_NIC_TO_MEMORY_REQUEST_260_Update/ack)
  // 	response := MEMORY_TO_NIC_RESPONSE $buffering 1// bits of buffering = 65. 
  //  file nic.linked.aa, line 135
  // MEMORY_TO_NIC_RESPONSE
  RPIPE_MEMORY_TO_NIC_RESPONSE_264_inst <=> (assign_stmt_259_to_assign_stmt_273/RPIPE_MEMORY_TO_NIC_RESPONSE_264_Sample/rr assign_stmt_259_to_assign_stmt_273/RPIPE_MEMORY_TO_NIC_RESPONSE_264_Update/cr) (assign_stmt_259_to_assign_stmt_273/RPIPE_MEMORY_TO_NIC_RESPONSE_264_Sample/ra assign_stmt_259_to_assign_stmt_273/RPIPE_MEMORY_TO_NIC_RESPONSE_264_Update/ca)
  // 	$volatile err := ( $slice response 64 64 )  $buffering 1
  //  file nic.linked.aa, line 136
  // response
  // 	$volatile rdata := ( $slice response 63 0 )  $buffering 1
  //  file nic.linked.aa, line 137
  // response
}
$module [acquireMutex] 
{
  $in q_base_address:$int<36>
  // can point into 
  $out m_ok:$int<1> := _b1
  // can point into 
  // pipe-declarations for block %acquireMutex
  //  file nic.linked.aa, line 139
  // pipe-declarations for block %acquireMutex%loop
  //  file nic.linked.aa, line 144
  // pipe-declarations for block %acquireMutex%loop%
  //  file nic.linked.aa, line 148
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    <>[branch_block_stmt_278] // Branch Block  file nic.linked.aa, line 144
    {
      $P [branch_block_stmt_278__entry__]
      branch_block_stmt_278__entry__ <-| ($entry)
      $P [branch_block_stmt_278__exit__]
      branch_block_stmt_278__exit__ |-> ($exit)
      $P [assign_stmt_281__entry__] 
      $P [assign_stmt_281__exit__] 
      $P [merge_stmt_283__entry__] 
      $P [merge_stmt_283__exit__] 
      $P [call_stmt_296_to_call_stmt_320__entry__] 
      $P [call_stmt_296_to_call_stmt_320__exit__] 
      $P [if_stmt_323__entry__] 
      $P [if_stmt_323__exit__] 
      ::[assign_stmt_281] 
      {
        // start: WAR dependencies for mutex_address
        // ignored out-of-scope w_root  q_base_address : $uint<36> 
        // done: WAR dependencies for mutex_address
        // start:  		$volatile mutex_address := q_base_address $buffering 1
        //  file nic.linked.aa, line 146
        // volatile! 
        // Source expression
        // q_base_address
        // Target expression
        // (as target) mutex_address
        // start: WAR dependencies for mutex_address
        // ignored out-of-scope w_root  q_base_address : $uint<36> 
        // done: WAR dependencies for mutex_address
        // end:  		$volatile mutex_address := q_base_address $buffering 1
        // load-store dependencies..
      }
      assign_stmt_281__entry__ |-> (assign_stmt_281)
      assign_stmt_281__exit__ <-| (assign_stmt_281)
      ::[call_stmt_296_to_call_stmt_320] 
      {
        // start: 		$call accessMemory (($bitcast ($uint<1>) _b1  ) ($bitcast ($uint<1>) _b1  ) ( ~ ($bitcast ($uint<8>) _b0  ) ) mutex_address ($bitcast ($uint<64>) _b0  ) ) (mutex_plus_nentries ) 
        //  file nic.linked.aa, line 151
        $T[call_stmt_296_sample_start_] 
        $T[call_stmt_296_sample_completed_] 
        $T[call_stmt_296_update_start_] 
        $T[call_stmt_296_update_completed_] 
        // Call input argument 0
        // Call input argument 1
        // Call input argument 2
        // Call input argument 3
        // mutex_address
        // Call input argument 4
        // start: Forward dependencies from mutex_address to transition call_stmt_296_sample_start_
        // done: Forward dependencies from mutex_address to transition call_stmt_296_sample_start_
        ;;[call_stmt_296_Sample] 
        {
          $T [crr] $T [cra] 
        }
        ;;[call_stmt_296_Update] 
        {
          $T [ccr] $T [cca] 
        }
        call_stmt_296_sample_start_ &-> (call_stmt_296_Sample)
        call_stmt_296_sample_completed_ <-& (call_stmt_296_Sample)
        call_stmt_296_sample_completed_ &-> ($null)
        call_stmt_296_update_start_ &-> (call_stmt_296_Update)
        call_stmt_296_update_completed_ <-& (call_stmt_296_Update)
        // Call output argument 0
        // (as target) mutex_plus_nentries
        // start: WAR dependencies for mutex_plus_nentries
        // done: WAR dependencies for mutex_plus_nentries
        // end: 		$call accessMemory (($bitcast ($uint<1>) _b1  ) ($bitcast ($uint<1>) _b1  ) ( ~ ($bitcast ($uint<8>) _b0  ) ) mutex_address ($bitcast ($uint<64>) _b0  ) ) (mutex_plus_nentries ) 
        // start: WAR dependencies for mutex_val
        // done: WAR dependencies for mutex_val
        // start:  		$volatile mutex_val := ( $slice mutex_plus_nentries 63 32 )  $buffering 1
        //  file nic.linked.aa, line 153
        // volatile! 
        // Source expression
        // ( $slice mutex_plus_nentries 63 32 ) 
        // mutex_plus_nentries
        // Target expression
        // (as target) mutex_val
        // start: WAR dependencies for mutex_val
        // done: WAR dependencies for mutex_val
        // end:  		$volatile mutex_val := ( $slice mutex_plus_nentries 63 32 )  $buffering 1
        // start: WAR dependencies for wval
        // done: WAR dependencies for wval
        // start:  		$volatile wval := (($bitcast ($uint<32>) _b1  ) && ( $slice mutex_plus_nentries 31 0 ) ) $buffering 1
        //  file nic.linked.aa, line 154
        // volatile! 
        // Source expression
        // (($bitcast ($uint<32>) _b1  ) && ( $slice mutex_plus_nentries 31 0 ) )
        // ( $slice mutex_plus_nentries 31 0 ) 
        // mutex_plus_nentries
        // Target expression
        // (as target) wval
        // start: WAR dependencies for wval
        // done: WAR dependencies for wval
        // end:  		$volatile wval := (($bitcast ($uint<32>) _b1  ) && ( $slice mutex_plus_nentries 31 0 ) ) $buffering 1
        // start: 		$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b0  ) ( ~ ($bitcast ($uint<8>) _b0  ) ) mutex_address wval ) (ignore ) 
        //  file nic.linked.aa, line 156
        $T[call_stmt_320_sample_start_] 
        $T[call_stmt_320_sample_completed_] 
        $T[call_stmt_320_update_start_] 
        $T[call_stmt_320_update_completed_] 
        // Call input argument 0
        // Call input argument 1
        // Call input argument 2
        // Call input argument 3
        // mutex_address
        // Call input argument 4
        // wval
        // start: Forward dependencies from mutex_address to transition call_stmt_320_sample_start_
        // done: Forward dependencies from mutex_address to transition call_stmt_320_sample_start_
        // start: Forward dependencies from wval to transition call_stmt_320_sample_start_
        call_stmt_320_sample_start_ <-& (call_stmt_296_update_completed_)
        // done: Forward dependencies from wval to transition call_stmt_320_sample_start_
        ;;[call_stmt_320_Sample] 
        {
          $T [crr] $T [cra] 
        }
        ;;[call_stmt_320_Update] 
        {
          $T [ccr] $T [cca] 
        }
        call_stmt_320_sample_start_ &-> (call_stmt_320_Sample)
        call_stmt_320_sample_completed_ <-& (call_stmt_320_Sample)
        call_stmt_320_sample_completed_ &-> ($null)
        call_stmt_320_update_start_ &-> (call_stmt_320_Update)
        call_stmt_320_update_completed_ <-& (call_stmt_320_Update)
        // Call output argument 0
        // (as target) ignore
        // start: WAR dependencies for ignore
        // done: WAR dependencies for ignore
        // end: 		$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b0  ) ( ~ ($bitcast ($uint<8>) _b0  ) ) mutex_address wval ) (ignore ) 
        // load-store dependencies..
        // pipe read/write dependencies for pipe MEMORY_TO_NIC_RESPONSE
        // read-dependencies for pipe MEMORY_TO_NIC_RESPONSE
        call_stmt_320_sample_start_ <-& (call_stmt_296_update_completed_)
        // write-dependencies for pipe MEMORY_TO_NIC_RESPONSE
        // signal write dependencies for MEMORY_TO_NIC_RESPONSE
        // pipe read/write dependencies for pipe NIC_TO_MEMORY_REQUEST
        // read-dependencies for pipe NIC_TO_MEMORY_REQUEST
        // write-dependencies for pipe NIC_TO_MEMORY_REQUEST
        call_stmt_320_sample_start_ <-& (call_stmt_296_update_completed_)
        // signal write dependencies for NIC_TO_MEMORY_REQUEST
      }
      call_stmt_296_to_call_stmt_320__entry__ |-> (call_stmt_296_to_call_stmt_320)
      call_stmt_296_to_call_stmt_320__exit__ <-| (call_stmt_296_to_call_stmt_320)
      // if-statement  
      //  file nic.linked.aa, line 0
      ;;[if_stmt_323_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      if_stmt_323__entry__ |-> (if_stmt_323_dead_link)
      if_stmt_323__exit__ <-| (if_stmt_323_dead_link)
      ;;[if_stmt_323_eval_test] 
      {
        // test expression evaluate and trigger branch 
        // (mutex_val != 0 )
        ;;[NEQ_u32_u1_326] 
        {
          // binary expression 
          ||[NEQ_u32_u1_326_inputs] 
          {
          }
          // flow-through
          ;;[SplitProtocol] 
          {
            ;;[Sample] 
            {
              $T [rr] $T [ra]
            }
            ;;[Update] 
            {
              $T [cr] $T [ca]
            }
          }
        }
        $T [branch_req] 
      }
      if_stmt_323__entry__ |-> (if_stmt_323_eval_test)
      $P [NEQ_u32_u1_326_place]
      NEQ_u32_u1_326_place <-| (if_stmt_323_eval_test)
      ;;[if_stmt_323_if_link] 
      {
        $T [if_choice_transition] 
      }
      ;;[if_stmt_323_else_link] 
      {
        $T [else_choice_transition] 
      }
      NEQ_u32_u1_326_place |-> (if_stmt_323_if_link if_stmt_323_else_link)
      $P [loopback]
      loopback <-| (if_stmt_323_if_link)
      if_stmt_323__exit__ <-| (if_stmt_323_else_link)
      // control-path for merge  
      //  file nic.linked.aa, line 148
      ;;[merge_stmt_283_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      merge_stmt_283__entry__ |-> (merge_stmt_283_dead_link)
      merge_stmt_283__exit__ <-| (merge_stmt_283_dead_link)
      //---------------------   merge statement  file nic.linked.aa, line 148  --------------------------
      ||[merge_stmt_283__entry___PhiReq] 
      {
        // no phi statements in merge..
      }
      merge_stmt_283__entry__ |-> (merge_stmt_283__entry___PhiReq)
      ||[loopback_PhiReq] 
      {
        // no phi statements in merge..
      }
      loopback |-> (loopback_PhiReq)
      $P [merge_stmt_283_PhiReqMerge] 
      merge_stmt_283_PhiReqMerge <-| ( merge_stmt_283__entry___PhiReq  loopback_PhiReq )
      ||[merge_stmt_283_PhiAck] 
      {
        $T [dummy] 
      }
      merge_stmt_283_PhiReqMerge |-> (merge_stmt_283_PhiAck)
      merge_stmt_283__exit__  <-| (merge_stmt_283_PhiAck)
      //---------------------  end of merge statement  file nic.linked.aa, line 148  --------------------------
      assign_stmt_281__entry__ <-| (branch_block_stmt_278__entry__)
      merge_stmt_283__entry__ <-| (assign_stmt_281__exit__)
      call_stmt_296_to_call_stmt_320__entry__ <-| (merge_stmt_283__exit__)
      if_stmt_323__entry__ <-| (call_stmt_296_to_call_stmt_320__exit__)
      if_stmt_323__exit__ |-> (branch_block_stmt_278__exit__)
    }
    ::[assign_stmt_333] 
    {
      // start:  	m_ok := ($bitcast ($uint<1>) _b1  ) $buffering 1// bits of buffering = 1. 
      //  file nic.linked.aa, line 162
      // constant! 
      // m_ok
      // write to interface object
      // end:  	m_ok := ($bitcast ($uint<1>) _b1  ) $buffering 1// bits of buffering = 1. 
      // load-store dependencies..
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %acquireMutex%loop%
    //  file nic.linked.aa, line 148
    // constant-object-declarations for block %acquireMutex%loop
    //  file nic.linked.aa, line 144
    // constant-object-declarations for block %acquireMutex
    //  file nic.linked.aa, line 139
    // constant-declarations for block %acquireMutex%loop
    //  file nic.linked.aa, line 144
    // constant-declarations for block %acquireMutex%loop%
    //  file nic.linked.aa, line 148
    // 		$call accessMemory (($bitcast ($uint<1>) _b1  ) ($bitcast ($uint<1>) _b1  ) ( ~ ($bitcast ($uint<8>) _b0  ) ) mutex_address ($bitcast ($uint<64>) _b0  ) ) (mutex_plus_nentries ) 
    //  file nic.linked.aa, line 151
    // ($bitcast ($uint<1>) _b1  )
    $constant $W[type_cast_286_wire_constant] : $int<1> := _b1// 1
    // ($bitcast ($uint<1>) _b1  )
    $constant $W[type_cast_288_wire_constant] : $int<1> := _b1// 1
    // ( ~ ($bitcast ($uint<8>) _b0  ) )
    $constant $W[NOT_u8_u8_291_wire_constant] : $int<8> := _b11111111// -1
    // ($bitcast ($uint<64>) _b0  )
    $constant $W[type_cast_294_wire_constant] : $int<64> := _b0000000000000000000000000000000000000000000000000000000000000000// 0
    // ($bitcast ($uint<32>) _b1  )
    $constant $W[type_cast_304_wire_constant] : $int<32> := _b00000000000000000000000000000001// 1
    // 		$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b0  ) ( ~ ($bitcast ($uint<8>) _b0  ) ) mutex_address wval ) (ignore ) 
    //  file nic.linked.aa, line 156
    // ($bitcast ($uint<1>) _b0  )
    $constant $W[type_cast_311_wire_constant] : $int<1> := _b0// 0
    // ($bitcast ($uint<1>) _b0  )
    $constant $W[type_cast_313_wire_constant] : $int<1> := _b0// 0
    // ( ~ ($bitcast ($uint<8>) _b0  ) )
    $constant $W[NOT_u8_u8_316_wire_constant] : $int<8> := _b11111111// -1
    // if-statement  
    //  file nic.linked.aa, line 0
    // 0 
    $constant $W[konst_325_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // 	m_ok := ($bitcast ($uint<1>) _b1  ) $buffering 1// bits of buffering = 1. 
    //  file nic.linked.aa, line 162
    // block %acquireMutex%loop
    //  file nic.linked.aa, line 144
    // 		$volatile mutex_address := q_base_address $buffering 1
    //  file nic.linked.aa, line 146
    // mutex_address
    $W[mutex_address_281] : $int<36>
    // 		$call accessMemory (($bitcast ($uint<1>) _b1  ) ($bitcast ($uint<1>) _b1  ) ( ~ ($bitcast ($uint<8>) _b0  ) ) mutex_address ($bitcast ($uint<64>) _b0  ) ) (mutex_plus_nentries ) 
    //  file nic.linked.aa, line 151
    // mutex_plus_nentries
    $W[mutex_plus_nentries_296] : $int<64>
    // 		$volatile mutex_val := ( $slice mutex_plus_nentries 63 32 )  $buffering 1
    //  file nic.linked.aa, line 153
    // mutex_val
    $W[mutex_val_301] : $int<32>
    // 		$volatile wval := (($bitcast ($uint<32>) _b1  ) && ( $slice mutex_plus_nentries 31 0 ) ) $buffering 1
    //  file nic.linked.aa, line 154
    // ( $slice mutex_plus_nentries 31 0 ) 
    $intermediate $W[slice_306_wire] : $int<32>
    // wval
    $W[wval_308] : $int<64>
    // 		$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b0  ) ( ~ ($bitcast ($uint<8>) _b0  ) ) mutex_address wval ) (ignore ) 
    //  file nic.linked.aa, line 156
    // ignore
    $W[ignore_320] : $int<64>
    // if statement  
    //  file nic.linked.aa, line 0
    // (mutex_val != 0 )
    $intermediate $W[NEQ_u32_u1_326_wire] : $int<1>
    // datapath-instances for block %acquireMutex%loop
    //  file nic.linked.aa, line 144
    // 		$volatile mutex_address := q_base_address $buffering 1
    //  file nic.linked.aa, line 146
    # := [W_mutex_address_279_inst] (q_base_address) (mutex_address_281)    $flowthrough 
    // 		$call accessMemory (($bitcast ($uint<1>) _b1  ) ($bitcast ($uint<1>) _b1  ) ( ~ ($bitcast ($uint<8>) _b0  ) ) mutex_address ($bitcast ($uint<64>) _b0  ) ) (mutex_plus_nentries ) 
    //  file nic.linked.aa, line 151
    $call [call_stmt_296_call] $module accessMemory(type_cast_286_wire_constant type_cast_288_wire_constant NOT_u8_u8_291_wire_constant mutex_address_281 type_cast_294_wire_constant) (mutex_plus_nentries_296)  
    $delay call_stmt_296_call 4
    $buffering  $in call_stmt_296_call type_cast_286_wire_constant 1
    $buffering  $in call_stmt_296_call type_cast_288_wire_constant 1
    $buffering  $in call_stmt_296_call NOT_u8_u8_291_wire_constant 1
    $buffering  $in call_stmt_296_call mutex_address_281 1
    $buffering  $in call_stmt_296_call type_cast_294_wire_constant 1
    $buffering  $out call_stmt_296_call mutex_plus_nentries_296 1
    // 		$volatile mutex_val := ( $slice mutex_plus_nentries 63 32 )  $buffering 1
    //  file nic.linked.aa, line 153
    // ( $slice mutex_plus_nentries 63 32 ) 
    [:] [slice_300_inst] (mutex_plus_nentries_296 63 32) (mutex_val_301)  $flowthrough
    $delay slice_300_inst 0
    // 		$volatile wval := (($bitcast ($uint<32>) _b1  ) && ( $slice mutex_plus_nentries 31 0 ) ) $buffering 1
    //  file nic.linked.aa, line 154
    // ( $slice mutex_plus_nentries 31 0 ) 
    [:] [slice_306_inst] (mutex_plus_nentries_296 31 0) (slice_306_wire)  $flowthrough
    $delay slice_306_inst 0
    // (($bitcast ($uint<32>) _b1  ) && ( $slice mutex_plus_nentries 31 0 ) )
    &&[CONCAT_u32_u64_307_inst] (type_cast_304_wire_constant slice_306_wire) (wval_308)   $flowthrough 
    $delay CONCAT_u32_u64_307_inst 0
    // 		$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b0  ) ( ~ ($bitcast ($uint<8>) _b0  ) ) mutex_address wval ) (ignore ) 
    //  file nic.linked.aa, line 156
    $call [call_stmt_320_call] $module accessMemory(type_cast_311_wire_constant type_cast_313_wire_constant NOT_u8_u8_316_wire_constant mutex_address_281 wval_308) (ignore_320)  
    $delay call_stmt_320_call 4
    $buffering  $in call_stmt_320_call type_cast_311_wire_constant 1
    $buffering  $in call_stmt_320_call type_cast_313_wire_constant 1
    $buffering  $in call_stmt_320_call NOT_u8_u8_316_wire_constant 1
    $buffering  $in call_stmt_320_call mutex_address_281 1
    $buffering  $in call_stmt_320_call wval_308 1
    $buffering  $out call_stmt_320_call ignore_320 1
    // datapath-instances for if  
    //  file nic.linked.aa, line 0
    // (mutex_val != 0 )
    !=[NEQ_u32_u1_326_inst] (mutex_val_301 konst_325_wire_constant) (NEQ_u32_u1_326_wire)   $flowthrough 
    $delay NEQ_u32_u1_326_inst 0
    ==0? [if_stmt_323_branch] (NEQ_u32_u1_326_wire)
  }
  // end data-path
  // 		$volatile mutex_address := q_base_address $buffering 1
  //  file nic.linked.aa, line 146
  // q_base_address
  // CP-DP links for merge  
  //  file nic.linked.aa, line 148
  // 		$call accessMemory (($bitcast ($uint<1>) _b1  ) ($bitcast ($uint<1>) _b1  ) ( ~ ($bitcast ($uint<8>) _b0  ) ) mutex_address ($bitcast ($uint<64>) _b0  ) ) (mutex_plus_nentries ) 
  //  file nic.linked.aa, line 151
  // mutex_address
  call_stmt_296_call <=> (branch_block_stmt_278/call_stmt_296_to_call_stmt_320/call_stmt_296_Sample/crr branch_block_stmt_278/call_stmt_296_to_call_stmt_320/call_stmt_296_Update/ccr) (branch_block_stmt_278/call_stmt_296_to_call_stmt_320/call_stmt_296_Sample/cra branch_block_stmt_278/call_stmt_296_to_call_stmt_320/call_stmt_296_Update/cca)
  // 		$volatile mutex_val := ( $slice mutex_plus_nentries 63 32 )  $buffering 1
  //  file nic.linked.aa, line 153
  // mutex_plus_nentries
  // 		$volatile wval := (($bitcast ($uint<32>) _b1  ) && ( $slice mutex_plus_nentries 31 0 ) ) $buffering 1
  //  file nic.linked.aa, line 154
  // (($bitcast ($uint<32>) _b1  ) && ( $slice mutex_plus_nentries 31 0 ) )
  // mutex_plus_nentries
  // 		$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b0  ) ( ~ ($bitcast ($uint<8>) _b0  ) ) mutex_address wval ) (ignore ) 
  //  file nic.linked.aa, line 156
  // mutex_address
  // wval
  call_stmt_320_call <=> (branch_block_stmt_278/call_stmt_296_to_call_stmt_320/call_stmt_320_Sample/crr branch_block_stmt_278/call_stmt_296_to_call_stmt_320/call_stmt_320_Update/ccr) (branch_block_stmt_278/call_stmt_296_to_call_stmt_320/call_stmt_320_Sample/cra branch_block_stmt_278/call_stmt_296_to_call_stmt_320/call_stmt_320_Update/cca)
  // CP-DP links for if  
  //  file nic.linked.aa, line 0
  // (mutex_val != 0 )
  if_stmt_323_branch <=> (branch_block_stmt_278/if_stmt_323_eval_test/branch_req) (branch_block_stmt_278/if_stmt_323_else_link/else_choice_transition branch_block_stmt_278/if_stmt_323_if_link/if_choice_transition)
}
$module [getQueuePointers] 
{
  $in q_base_address:$int<36>
  // can point into 
  $out wp:$int<32>
  // can point into 
  rp:$int<32>
  // can point into 
  // pipe-declarations for block %getQueuePointers
  //  file nic.linked.aa, line 164
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    ::[call_stmt_352_to_assign_stmt_360] 
    {
      // start: 	$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b1  ) ( ~ ($bitcast ($uint<8>) _b0  ) ) (q_base_address + 8 ) ($bitcast ($uint<64>) _b0  ) ) (wp_rp ) 
      //  file nic.linked.aa, line 169
      $T[call_stmt_352_sample_start_] 
      $T[call_stmt_352_sample_completed_] 
      $T[call_stmt_352_update_start_] 
      $T[call_stmt_352_update_completed_] 
      // Call input argument 0
      // Call input argument 1
      // Call input argument 2
      // Call input argument 3
      // (q_base_address + 8 )
      // q_base_address
      // Call input argument 4
      // start: Forward dependencies from (q_base_address + 8 ) to transition call_stmt_352_sample_start_
      // done: Forward dependencies from (q_base_address + 8 ) to transition call_stmt_352_sample_start_
      ;;[call_stmt_352_Sample] 
      {
        $T [crr] $T [cra] 
      }
      ;;[call_stmt_352_Update] 
      {
        $T [ccr] $T [cca] 
      }
      call_stmt_352_sample_start_ &-> (call_stmt_352_Sample)
      call_stmt_352_sample_completed_ <-& (call_stmt_352_Sample)
      call_stmt_352_sample_completed_ &-> ($null)
      call_stmt_352_update_start_ &-> (call_stmt_352_Update)
      call_stmt_352_update_completed_ <-& (call_stmt_352_Update)
      // Call output argument 0
      // (as target) wp_rp
      // start: WAR dependencies for wp_rp
      // done: WAR dependencies for wp_rp
      // end: 	$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b1  ) ( ~ ($bitcast ($uint<8>) _b0  ) ) (q_base_address + 8 ) ($bitcast ($uint<64>) _b0  ) ) (wp_rp ) 
      // start: WAR dependencies for wp
      // done: WAR dependencies for wp
      // start:  	$volatile wp := ( $slice wp_rp 63 32 )  $buffering 1
      //  file nic.linked.aa, line 170
      // volatile! 
      // Source expression
      // ( $slice wp_rp 63 32 ) 
      // wp_rp
      // Target expression
      // (as target) wp
      // wp
      // write to interface object
      // start: WAR dependencies for wp
      // done: WAR dependencies for wp
      // wp
      // write to interface object
      // end:  	$volatile wp := ( $slice wp_rp 63 32 )  $buffering 1
      // start: WAR dependencies for rp
      // done: WAR dependencies for rp
      // start:  	$volatile rp := ( $slice wp_rp 31 0 )  $buffering 1
      //  file nic.linked.aa, line 171
      // volatile! 
      // Source expression
      // ( $slice wp_rp 31 0 ) 
      // wp_rp
      // Target expression
      // (as target) rp
      // rp
      // write to interface object
      // start: WAR dependencies for rp
      // done: WAR dependencies for rp
      // rp
      // write to interface object
      // end:  	$volatile rp := ( $slice wp_rp 31 0 )  $buffering 1
      // load-store dependencies..
      // pipe read/write dependencies for pipe MEMORY_TO_NIC_RESPONSE
      // read-dependencies for pipe MEMORY_TO_NIC_RESPONSE
      // write-dependencies for pipe MEMORY_TO_NIC_RESPONSE
      // signal write dependencies for MEMORY_TO_NIC_RESPONSE
      // pipe read/write dependencies for pipe NIC_TO_MEMORY_REQUEST
      // read-dependencies for pipe NIC_TO_MEMORY_REQUEST
      // write-dependencies for pipe NIC_TO_MEMORY_REQUEST
      // signal write dependencies for NIC_TO_MEMORY_REQUEST
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %getQueuePointers
    //  file nic.linked.aa, line 164
    // 	$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b1  ) ( ~ ($bitcast ($uint<8>) _b0  ) ) (q_base_address + 8 ) ($bitcast ($uint<64>) _b0  ) ) (wp_rp ) 
    //  file nic.linked.aa, line 169
    // ($bitcast ($uint<1>) _b0  )
    $constant $W[type_cast_340_wire_constant] : $int<1> := _b0// 0
    // ($bitcast ($uint<1>) _b1  )
    $constant $W[type_cast_342_wire_constant] : $int<1> := _b1// 1
    // ( ~ ($bitcast ($uint<8>) _b0  ) )
    $constant $W[NOT_u8_u8_345_wire_constant] : $int<8> := _b11111111// -1
    // 8 
    $constant $W[konst_347_wire_constant] : $int<36> := _b000000000000000000000000000000001000// 8
    // ($bitcast ($uint<64>) _b0  )
    $constant $W[type_cast_350_wire_constant] : $int<64> := _b0000000000000000000000000000000000000000000000000000000000000000// 0
    // 	$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b1  ) ( ~ ($bitcast ($uint<8>) _b0  ) ) (q_base_address + 8 ) ($bitcast ($uint<64>) _b0  ) ) (wp_rp ) 
    //  file nic.linked.aa, line 169
    // (q_base_address + 8 )
    $intermediate $W[ADD_u36_u36_348_wire] : $int<36>
    // wp_rp
    $W[wp_rp_352] : $int<64>
    // 	$volatile wp := ( $slice wp_rp 63 32 )  $buffering 1
    //  file nic.linked.aa, line 170
    // wp
    // 	$volatile rp := ( $slice wp_rp 31 0 )  $buffering 1
    //  file nic.linked.aa, line 171
    // rp
    // 	$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b1  ) ( ~ ($bitcast ($uint<8>) _b0  ) ) (q_base_address + 8 ) ($bitcast ($uint<64>) _b0  ) ) (wp_rp ) 
    //  file nic.linked.aa, line 169
    // (q_base_address + 8 )
    +[ADD_u36_u36_348_inst] (q_base_address konst_347_wire_constant) (ADD_u36_u36_348_wire)   $flowthrough 
    $delay ADD_u36_u36_348_inst 0
    $call [call_stmt_352_call] $module accessMemory(type_cast_340_wire_constant type_cast_342_wire_constant NOT_u8_u8_345_wire_constant ADD_u36_u36_348_wire type_cast_350_wire_constant) (wp_rp_352)  
    $delay call_stmt_352_call 4
    $buffering  $in call_stmt_352_call type_cast_340_wire_constant 1
    $buffering  $in call_stmt_352_call type_cast_342_wire_constant 1
    $buffering  $in call_stmt_352_call NOT_u8_u8_345_wire_constant 1
    $buffering  $in call_stmt_352_call ADD_u36_u36_348_wire 1
    $buffering  $in call_stmt_352_call type_cast_350_wire_constant 1
    $buffering  $out call_stmt_352_call wp_rp_352 1
    // 	$volatile wp := ( $slice wp_rp 63 32 )  $buffering 1
    //  file nic.linked.aa, line 170
    // ( $slice wp_rp 63 32 ) 
    [:] [slice_355_inst] (wp_rp_352 63 32) (wp)  $flowthrough
    $delay slice_355_inst 0
    // 	$volatile rp := ( $slice wp_rp 31 0 )  $buffering 1
    //  file nic.linked.aa, line 171
    // ( $slice wp_rp 31 0 ) 
    [:] [slice_359_inst] (wp_rp_352 31 0) (rp)  $flowthrough
    $delay slice_359_inst 0
  }
  // end data-path
  // 	$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b1  ) ( ~ ($bitcast ($uint<8>) _b0  ) ) (q_base_address + 8 ) ($bitcast ($uint<64>) _b0  ) ) (wp_rp ) 
  //  file nic.linked.aa, line 169
  // (q_base_address + 8 )
  // q_base_address
  call_stmt_352_call <=> (call_stmt_352_to_assign_stmt_360/call_stmt_352_Sample/crr call_stmt_352_to_assign_stmt_360/call_stmt_352_Update/ccr) (call_stmt_352_to_assign_stmt_360/call_stmt_352_Sample/cra call_stmt_352_to_assign_stmt_360/call_stmt_352_Update/cca)
  // 	$volatile wp := ( $slice wp_rp 63 32 )  $buffering 1
  //  file nic.linked.aa, line 170
  // wp_rp
  // 	$volatile rp := ( $slice wp_rp 31 0 )  $buffering 1
  //  file nic.linked.aa, line 171
  // wp_rp
}
$module [getQueueElement] 
{
  $in q_base_address:$int<36>
  // can point into 
  read_pointer:$int<32>
  // can point into 
  $out q_r_data:$int<32>
  // can point into 
  // pipe-declarations for block %getQueueElement
  //  file nic.linked.aa, line 173
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    ::[assign_stmt_371_to_assign_stmt_412] 
    {
      // start: WAR dependencies for buffer_address
      // ignored out-of-scope w_root  q_base_address : $uint<36> 
      // done: WAR dependencies for buffer_address
      // start:  	$volatile buffer_address := (q_base_address + ($bitcast ($uint<36>) 16  )) $buffering 1
      //  file nic.linked.aa, line 178
      // volatile! 
      // Source expression
      // (q_base_address + ($bitcast ($uint<36>) 16  ))
      // q_base_address
      // Target expression
      // (as target) buffer_address
      // start: WAR dependencies for buffer_address
      // ignored out-of-scope w_root  q_base_address : $uint<36> 
      // done: WAR dependencies for buffer_address
      // end:  	$volatile buffer_address := (q_base_address + ($bitcast ($uint<36>) 16  )) $buffering 1
      // start: WAR dependencies for element_pair_address
      // ignored out-of-scope w_root  q_base_address : $uint<36> 
      // ignored out-of-scope w_root  read_pointer : $uint<32> 
      // done: WAR dependencies for element_pair_address
      // start:  	$volatile element_pair_address := (buffer_address + ($bitcast ($uint<36>) (( $slice read_pointer 31 1 )  && ($bitcast ($uint<3>) _b0  )) )) $buffering 1
      //  file nic.linked.aa, line 179
      // volatile! 
      // Source expression
      // (buffer_address + ($bitcast ($uint<36>) (( $slice read_pointer 31 1 )  && ($bitcast ($uint<3>) _b0  )) ))
      // buffer_address
      // ($bitcast ($uint<36>) (( $slice read_pointer 31 1 )  && ($bitcast ($uint<3>) _b0  )) )
      // (( $slice read_pointer 31 1 )  && ($bitcast ($uint<3>) _b0  ))
      // ( $slice read_pointer 31 1 ) 
      // read_pointer
      // Target expression
      // (as target) element_pair_address
      // start: WAR dependencies for element_pair_address
      // ignored out-of-scope w_root  q_base_address : $uint<36> 
      // ignored out-of-scope w_root  read_pointer : $uint<32> 
      // done: WAR dependencies for element_pair_address
      // end:  	$volatile element_pair_address := (buffer_address + ($bitcast ($uint<36>) (( $slice read_pointer 31 1 )  && ($bitcast ($uint<3>) _b0  )) )) $buffering 1
      // start: 	$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b1  ) ( ~ ($bitcast ($uint<8>) _b0  ) ) element_pair_address ($bitcast ($uint<64>) _b0  ) ) (element_pair ) 
      //  file nic.linked.aa, line 180
      $T[call_stmt_396_sample_start_] 
      $T[call_stmt_396_sample_completed_] 
      $T[call_stmt_396_update_start_] 
      $T[call_stmt_396_update_completed_] 
      // Call input argument 0
      // Call input argument 1
      // Call input argument 2
      // Call input argument 3
      // element_pair_address
      // Call input argument 4
      // start: Forward dependencies from element_pair_address to transition call_stmt_396_sample_start_
      // done: Forward dependencies from element_pair_address to transition call_stmt_396_sample_start_
      ;;[call_stmt_396_Sample] 
      {
        $T [crr] $T [cra] 
      }
      ;;[call_stmt_396_Update] 
      {
        $T [ccr] $T [cca] 
      }
      call_stmt_396_sample_start_ &-> (call_stmt_396_Sample)
      call_stmt_396_sample_completed_ <-& (call_stmt_396_Sample)
      call_stmt_396_sample_completed_ &-> ($null)
      call_stmt_396_update_start_ &-> (call_stmt_396_Update)
      call_stmt_396_update_completed_ <-& (call_stmt_396_Update)
      // Call output argument 0
      // (as target) element_pair
      // start: WAR dependencies for element_pair
      // done: WAR dependencies for element_pair
      // end: 	$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b1  ) ( ~ ($bitcast ($uint<8>) _b0  ) ) element_pair_address ($bitcast ($uint<64>) _b0  ) ) (element_pair ) 
      // start: WAR dependencies for e0
      // done: WAR dependencies for e0
      // start:  	$volatile e0 := ( $slice element_pair 63 32 )  $buffering 1
      //  file nic.linked.aa, line 181
      // volatile! 
      // Source expression
      // ( $slice element_pair 63 32 ) 
      // element_pair
      // Target expression
      // (as target) e0
      // start: WAR dependencies for e0
      // done: WAR dependencies for e0
      // end:  	$volatile e0 := ( $slice element_pair 63 32 )  $buffering 1
      // start: WAR dependencies for e1
      // done: WAR dependencies for e1
      // start:  	$volatile e1 := ( $slice element_pair 31 0 )  $buffering 1
      //  file nic.linked.aa, line 182
      // volatile! 
      // Source expression
      // ( $slice element_pair 31 0 ) 
      // element_pair
      // Target expression
      // (as target) e1
      // start: WAR dependencies for e1
      // done: WAR dependencies for e1
      // end:  	$volatile e1 := ( $slice element_pair 31 0 )  $buffering 1
      // start:  	q_r_data := ( $mux (read_pointer [] 0 ) e1  e0 )  $buffering 1// bits of buffering = 32. 
      //  file nic.linked.aa, line 183
      // Source expression
      // ( $mux (read_pointer [] 0 ) e1  e0 ) 
      $T[MUX_411_sample_start_] 
      $T[MUX_411_sample_completed_] 
      $T[MUX_411_update_start_] 
      $T[MUX_411_update_completed_] 
      // (read_pointer [] 0 )
      // read_pointer
      // e1
      // e0
      // start: Forward dependencies from (read_pointer [] 0 ) to transition MUX_411_sample_start_
      // done: Forward dependencies from (read_pointer [] 0 ) to transition MUX_411_sample_start_
      // start: Forward dependencies from e1 to transition MUX_411_sample_start_
      MUX_411_sample_start_ <-& (call_stmt_396_update_completed_)
      // done: Forward dependencies from e1 to transition MUX_411_sample_start_
      // start: Forward dependencies from e0 to transition MUX_411_sample_start_
      MUX_411_sample_start_ <-& (call_stmt_396_update_completed_)
      // done: Forward dependencies from e0 to transition MUX_411_sample_start_
      ;;[MUX_411_start] 
      {
        // ternary expression: 
        $T [req] $T [ack] // sample req/ack
      }
      ;;[MUX_411_complete] 
      {
        // ternary expression: 
        $T [req] $T [ack] // update req/ack
      }
      MUX_411_sample_start_ &-> (MUX_411_start)
      MUX_411_sample_completed_ <-& (MUX_411_start)
      MUX_411_sample_completed_ &-> ($null)
      MUX_411_update_start_ &-> (MUX_411_complete)
      MUX_411_update_completed_ <-& (MUX_411_complete)
      // Target expression
      // (as target) q_r_data
      // q_r_data
      // write to interface object
      // start: WAR dependencies for q_r_data
      // done: WAR dependencies for q_r_data
      // q_r_data
      // write to interface object
      // end:  	q_r_data := ( $mux (read_pointer [] 0 ) e1  e0 )  $buffering 1// bits of buffering = 32. 
      // load-store dependencies..
      // pipe read/write dependencies for pipe MEMORY_TO_NIC_RESPONSE
      // read-dependencies for pipe MEMORY_TO_NIC_RESPONSE
      // write-dependencies for pipe MEMORY_TO_NIC_RESPONSE
      // signal write dependencies for MEMORY_TO_NIC_RESPONSE
      // pipe read/write dependencies for pipe NIC_TO_MEMORY_REQUEST
      // read-dependencies for pipe NIC_TO_MEMORY_REQUEST
      // write-dependencies for pipe NIC_TO_MEMORY_REQUEST
      // signal write dependencies for NIC_TO_MEMORY_REQUEST
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %getQueueElement
    //  file nic.linked.aa, line 173
    // ($bitcast ($uint<36>) 16  )
    $constant $W[type_cast_369_wire_constant] : $int<36> := _b000000000000000000000000000000010000// 16
    // ($bitcast ($uint<3>) _b0  )
    $constant $W[type_cast_379_wire_constant] : $int<3> := _b000// 0
    // 	$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b1  ) ( ~ ($bitcast ($uint<8>) _b0  ) ) element_pair_address ($bitcast ($uint<64>) _b0  ) ) (element_pair ) 
    //  file nic.linked.aa, line 180
    // ($bitcast ($uint<1>) _b0  )
    $constant $W[type_cast_386_wire_constant] : $int<1> := _b0// 0
    // ($bitcast ($uint<1>) _b1  )
    $constant $W[type_cast_388_wire_constant] : $int<1> := _b1// 1
    // ( ~ ($bitcast ($uint<8>) _b0  ) )
    $constant $W[NOT_u8_u8_391_wire_constant] : $int<8> := _b11111111// -1
    // ($bitcast ($uint<64>) _b0  )
    $constant $W[type_cast_394_wire_constant] : $int<64> := _b0000000000000000000000000000000000000000000000000000000000000000// 0
    // ( $mux (read_pointer [] 0 ) e1  e0 ) 
    // 0 
    $constant $W[konst_407_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // 	$volatile buffer_address := (q_base_address + ($bitcast ($uint<36>) 16  )) $buffering 1
    //  file nic.linked.aa, line 178
    // buffer_address
    $W[buffer_address_371] : $int<36>
    // 	$volatile element_pair_address := (buffer_address + ($bitcast ($uint<36>) (( $slice read_pointer 31 1 )  && ($bitcast ($uint<3>) _b0  )) )) $buffering 1
    //  file nic.linked.aa, line 179
    // ( $slice read_pointer 31 1 ) 
    $intermediate $W[slice_376_wire] : $int<31>
    // (( $slice read_pointer 31 1 )  && ($bitcast ($uint<3>) _b0  ))
    $intermediate $W[CONCAT_u31_u34_380_wire] : $int<34>
    // ($bitcast ($uint<36>) (( $slice read_pointer 31 1 )  && ($bitcast ($uint<3>) _b0  )) )
    $intermediate $W[type_cast_382_wire] : $int<36>
    // element_pair_address
    $W[element_pair_address_384] : $int<36>
    // 	$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b1  ) ( ~ ($bitcast ($uint<8>) _b0  ) ) element_pair_address ($bitcast ($uint<64>) _b0  ) ) (element_pair ) 
    //  file nic.linked.aa, line 180
    // element_pair
    $W[element_pair_396] : $int<64>
    // 	$volatile e0 := ( $slice element_pair 63 32 )  $buffering 1
    //  file nic.linked.aa, line 181
    // e0
    $W[e0_400] : $int<32>
    // 	$volatile e1 := ( $slice element_pair 31 0 )  $buffering 1
    //  file nic.linked.aa, line 182
    // e1
    $W[e1_404] : $int<32>
    // 	q_r_data := ( $mux (read_pointer [] 0 ) e1  e0 )  $buffering 1// bits of buffering = 32. 
    //  file nic.linked.aa, line 183
    // (read_pointer [] 0 )
    $intermediate $W[BITSEL_u32_u1_408_wire] : $int<1>
    // q_r_data
    // 	$volatile buffer_address := (q_base_address + ($bitcast ($uint<36>) 16  )) $buffering 1
    //  file nic.linked.aa, line 178
    // (q_base_address + ($bitcast ($uint<36>) 16  ))
    +[ADD_u36_u36_370_inst] (q_base_address type_cast_369_wire_constant) (buffer_address_371)   $flowthrough 
    $delay ADD_u36_u36_370_inst 0
    // 	$volatile element_pair_address := (buffer_address + ($bitcast ($uint<36>) (( $slice read_pointer 31 1 )  && ($bitcast ($uint<3>) _b0  )) )) $buffering 1
    //  file nic.linked.aa, line 179
    // ( $slice read_pointer 31 1 ) 
    [:] [slice_376_inst] (read_pointer 31 1) (slice_376_wire)  $flowthrough
    $delay slice_376_inst 0
    // (( $slice read_pointer 31 1 )  && ($bitcast ($uint<3>) _b0  ))
    &&[CONCAT_u31_u34_380_inst] (slice_376_wire type_cast_379_wire_constant) (CONCAT_u31_u34_380_wire)   $flowthrough 
    $delay CONCAT_u31_u34_380_inst 0
    // ($bitcast ($uint<36>) (( $slice read_pointer 31 1 )  && ($bitcast ($uint<3>) _b0  )) )
    # := [type_cast_382_inst] (CONCAT_u31_u34_380_wire) (type_cast_382_wire)   $flowthrough
    $delay type_cast_382_inst 0
    // (buffer_address + ($bitcast ($uint<36>) (( $slice read_pointer 31 1 )  && ($bitcast ($uint<3>) _b0  )) ))
    +[ADD_u36_u36_383_inst] (buffer_address_371 type_cast_382_wire) (element_pair_address_384)   $flowthrough 
    $delay ADD_u36_u36_383_inst 0
    // 	$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b1  ) ( ~ ($bitcast ($uint<8>) _b0  ) ) element_pair_address ($bitcast ($uint<64>) _b0  ) ) (element_pair ) 
    //  file nic.linked.aa, line 180
    $call [call_stmt_396_call] $module accessMemory(type_cast_386_wire_constant type_cast_388_wire_constant NOT_u8_u8_391_wire_constant element_pair_address_384 type_cast_394_wire_constant) (element_pair_396)  
    $delay call_stmt_396_call 4
    $buffering  $in call_stmt_396_call type_cast_386_wire_constant 1
    $buffering  $in call_stmt_396_call type_cast_388_wire_constant 1
    $buffering  $in call_stmt_396_call NOT_u8_u8_391_wire_constant 1
    $buffering  $in call_stmt_396_call element_pair_address_384 1
    $buffering  $in call_stmt_396_call type_cast_394_wire_constant 1
    $buffering  $out call_stmt_396_call element_pair_396 1
    // 	$volatile e0 := ( $slice element_pair 63 32 )  $buffering 1
    //  file nic.linked.aa, line 181
    // ( $slice element_pair 63 32 ) 
    [:] [slice_399_inst] (element_pair_396 63 32) (e0_400)  $flowthrough
    $delay slice_399_inst 0
    // 	$volatile e1 := ( $slice element_pair 31 0 )  $buffering 1
    //  file nic.linked.aa, line 182
    // ( $slice element_pair 31 0 ) 
    [:] [slice_403_inst] (element_pair_396 31 0) (e1_404)  $flowthrough
    $delay slice_403_inst 0
    // 	q_r_data := ( $mux (read_pointer [] 0 ) e1  e0 )  $buffering 1// bits of buffering = 32. 
    //  file nic.linked.aa, line 183
    // (read_pointer [] 0 )
    [][BITSEL_u32_u1_408_inst] (read_pointer konst_407_wire_constant) (BITSEL_u32_u1_408_wire)   $flowthrough 
    $delay BITSEL_u32_u1_408_inst 0
    // ( $mux (read_pointer [] 0 ) e1  e0 ) 
    ? [MUX_411_inst] (BITSEL_u32_u1_408_wire e1_404 e0_400) (q_r_data) 
    $buffering  $out MUX_411_inst q_r_data 1
  }
  // end data-path
  // 	$volatile buffer_address := (q_base_address + ($bitcast ($uint<36>) 16  )) $buffering 1
  //  file nic.linked.aa, line 178
  // (q_base_address + ($bitcast ($uint<36>) 16  ))
  // q_base_address
  // 	$volatile element_pair_address := (buffer_address + ($bitcast ($uint<36>) (( $slice read_pointer 31 1 )  && ($bitcast ($uint<3>) _b0  )) )) $buffering 1
  //  file nic.linked.aa, line 179
  // (buffer_address + ($bitcast ($uint<36>) (( $slice read_pointer 31 1 )  && ($bitcast ($uint<3>) _b0  )) ))
  // buffer_address
  // (( $slice read_pointer 31 1 )  && ($bitcast ($uint<3>) _b0  ))
  // read_pointer
  // 	$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b1  ) ( ~ ($bitcast ($uint<8>) _b0  ) ) element_pair_address ($bitcast ($uint<64>) _b0  ) ) (element_pair ) 
  //  file nic.linked.aa, line 180
  // element_pair_address
  call_stmt_396_call <=> (assign_stmt_371_to_assign_stmt_412/call_stmt_396_Sample/crr assign_stmt_371_to_assign_stmt_412/call_stmt_396_Update/ccr) (assign_stmt_371_to_assign_stmt_412/call_stmt_396_Sample/cra assign_stmt_371_to_assign_stmt_412/call_stmt_396_Update/cca)
  // 	$volatile e0 := ( $slice element_pair 63 32 )  $buffering 1
  //  file nic.linked.aa, line 181
  // element_pair
  // 	$volatile e1 := ( $slice element_pair 31 0 )  $buffering 1
  //  file nic.linked.aa, line 182
  // element_pair
  // 	q_r_data := ( $mux (read_pointer [] 0 ) e1  e0 )  $buffering 1// bits of buffering = 32. 
  //  file nic.linked.aa, line 183
  // (read_pointer [] 0 )
  // read_pointer
  // e1
  // e0
  // ( $mux (read_pointer [] 0 ) e1  e0 ) 
  MUX_411_inst <=> (assign_stmt_371_to_assign_stmt_412/MUX_411_start/req assign_stmt_371_to_assign_stmt_412/MUX_411_complete/req) (assign_stmt_371_to_assign_stmt_412/MUX_411_start/ack assign_stmt_371_to_assign_stmt_412/MUX_411_complete/ack)
}
$module [setQueuePointers] 
{
  $in q_base_address:$int<36>
  // can point into 
  wp:$int<32>
  // can point into 
  rp:$int<32>
  // can point into 
  // pipe-declarations for block %setQueuePointers
  //  file nic.linked.aa, line 185
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    ::[call_stmt_432] 
    {
      // start: 	$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b0  ) ( ~ ($bitcast ($uint<8>) _b0  ) ) (q_base_address + 8 ) (wp && rp) ) (ignore ) 
      //  file nic.linked.aa, line 190
      $T[call_stmt_432_sample_start_] 
      $T[call_stmt_432_sample_completed_] 
      $T[call_stmt_432_update_start_] 
      $T[call_stmt_432_update_completed_] 
      // Call input argument 0
      // Call input argument 1
      // Call input argument 2
      // Call input argument 3
      // (q_base_address + 8 )
      // q_base_address
      // Call input argument 4
      // (wp && rp)
      // wp
      // rp
      // start: Forward dependencies from (q_base_address + 8 ) to transition call_stmt_432_sample_start_
      // done: Forward dependencies from (q_base_address + 8 ) to transition call_stmt_432_sample_start_
      // start: Forward dependencies from (wp && rp) to transition call_stmt_432_sample_start_
      // done: Forward dependencies from (wp && rp) to transition call_stmt_432_sample_start_
      ;;[call_stmt_432_Sample] 
      {
        $T [crr] $T [cra] 
      }
      ;;[call_stmt_432_Update] 
      {
        $T [ccr] $T [cca] 
      }
      call_stmt_432_sample_start_ &-> (call_stmt_432_Sample)
      call_stmt_432_sample_completed_ <-& (call_stmt_432_Sample)
      call_stmt_432_sample_completed_ &-> ($null)
      call_stmt_432_update_start_ &-> (call_stmt_432_Update)
      call_stmt_432_update_completed_ <-& (call_stmt_432_Update)
      // Call output argument 0
      // (as target) ignore
      // start: WAR dependencies for ignore
      // done: WAR dependencies for ignore
      // end: 	$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b0  ) ( ~ ($bitcast ($uint<8>) _b0  ) ) (q_base_address + 8 ) (wp && rp) ) (ignore ) 
      // load-store dependencies..
      // pipe read/write dependencies for pipe MEMORY_TO_NIC_RESPONSE
      // read-dependencies for pipe MEMORY_TO_NIC_RESPONSE
      // write-dependencies for pipe MEMORY_TO_NIC_RESPONSE
      // signal write dependencies for MEMORY_TO_NIC_RESPONSE
      // pipe read/write dependencies for pipe NIC_TO_MEMORY_REQUEST
      // read-dependencies for pipe NIC_TO_MEMORY_REQUEST
      // write-dependencies for pipe NIC_TO_MEMORY_REQUEST
      // signal write dependencies for NIC_TO_MEMORY_REQUEST
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %setQueuePointers
    //  file nic.linked.aa, line 185
    // 	$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b0  ) ( ~ ($bitcast ($uint<8>) _b0  ) ) (q_base_address + 8 ) (wp && rp) ) (ignore ) 
    //  file nic.linked.aa, line 190
    // ($bitcast ($uint<1>) _b0  )
    $constant $W[type_cast_419_wire_constant] : $int<1> := _b0// 0
    // ($bitcast ($uint<1>) _b0  )
    $constant $W[type_cast_421_wire_constant] : $int<1> := _b0// 0
    // ( ~ ($bitcast ($uint<8>) _b0  ) )
    $constant $W[NOT_u8_u8_424_wire_constant] : $int<8> := _b11111111// -1
    // 8 
    $constant $W[konst_426_wire_constant] : $int<36> := _b000000000000000000000000000000001000// 8
    // 	$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b0  ) ( ~ ($bitcast ($uint<8>) _b0  ) ) (q_base_address + 8 ) (wp && rp) ) (ignore ) 
    //  file nic.linked.aa, line 190
    // (q_base_address + 8 )
    $intermediate $W[ADD_u36_u36_427_wire] : $int<36>
    // (wp && rp)
    $intermediate $W[CONCAT_u32_u64_430_wire] : $int<64>
    // ignore
    $W[ignore_432] : $int<64>
    // 	$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b0  ) ( ~ ($bitcast ($uint<8>) _b0  ) ) (q_base_address + 8 ) (wp && rp) ) (ignore ) 
    //  file nic.linked.aa, line 190
    // (q_base_address + 8 )
    +[ADD_u36_u36_427_inst] (q_base_address konst_426_wire_constant) (ADD_u36_u36_427_wire)   $flowthrough 
    $delay ADD_u36_u36_427_inst 0
    // (wp && rp)
    &&[CONCAT_u32_u64_430_inst] (wp rp) (CONCAT_u32_u64_430_wire)   $flowthrough 
    $delay CONCAT_u32_u64_430_inst 0
    $call [call_stmt_432_call] $module accessMemory(type_cast_419_wire_constant type_cast_421_wire_constant NOT_u8_u8_424_wire_constant ADD_u36_u36_427_wire CONCAT_u32_u64_430_wire) (ignore_432)  
    $delay call_stmt_432_call 4
    $buffering  $in call_stmt_432_call type_cast_419_wire_constant 1
    $buffering  $in call_stmt_432_call type_cast_421_wire_constant 1
    $buffering  $in call_stmt_432_call NOT_u8_u8_424_wire_constant 1
    $buffering  $in call_stmt_432_call ADD_u36_u36_427_wire 1
    $buffering  $in call_stmt_432_call CONCAT_u32_u64_430_wire 1
    $buffering  $out call_stmt_432_call ignore_432 1
  }
  // end data-path
  // 	$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b0  ) ( ~ ($bitcast ($uint<8>) _b0  ) ) (q_base_address + 8 ) (wp && rp) ) (ignore ) 
  //  file nic.linked.aa, line 190
  // (q_base_address + 8 )
  // q_base_address
  // (wp && rp)
  // wp
  // rp
  call_stmt_432_call <=> (call_stmt_432/call_stmt_432_Sample/crr call_stmt_432/call_stmt_432_Update/ccr) (call_stmt_432/call_stmt_432_Sample/cra call_stmt_432/call_stmt_432_Update/cca)
}
$module [releaseMutex] 
{
  $in q_base_address:$int<36>
  // can point into 
  // pipe-declarations for block %releaseMutex
  //  file nic.linked.aa, line 192
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    ::[call_stmt_450] 
    {
      // start: 	$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b0  ) (( ~ ($bitcast ($uint<4>) _b0  ) ) && ($bitcast ($uint<4>) _b0  )) q_base_address ($bitcast ($uint<64>) _b0  ) ) (ignore ) 
      //  file nic.linked.aa, line 197
      $T[call_stmt_450_sample_start_] 
      $T[call_stmt_450_sample_completed_] 
      $T[call_stmt_450_update_start_] 
      $T[call_stmt_450_update_completed_] 
      // Call input argument 0
      // Call input argument 1
      // Call input argument 2
      // Call input argument 3
      // q_base_address
      // Call input argument 4
      // start: Forward dependencies from q_base_address to transition call_stmt_450_sample_start_
      // done: Forward dependencies from q_base_address to transition call_stmt_450_sample_start_
      ;;[call_stmt_450_Sample] 
      {
        $T [crr] $T [cra] 
      }
      ;;[call_stmt_450_Update] 
      {
        $T [ccr] $T [cca] 
      }
      call_stmt_450_sample_start_ &-> (call_stmt_450_Sample)
      call_stmt_450_sample_completed_ <-& (call_stmt_450_Sample)
      call_stmt_450_sample_completed_ &-> ($null)
      call_stmt_450_update_start_ &-> (call_stmt_450_Update)
      call_stmt_450_update_completed_ <-& (call_stmt_450_Update)
      // Call output argument 0
      // (as target) ignore
      // start: WAR dependencies for ignore
      // done: WAR dependencies for ignore
      // end: 	$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b0  ) (( ~ ($bitcast ($uint<4>) _b0  ) ) && ($bitcast ($uint<4>) _b0  )) q_base_address ($bitcast ($uint<64>) _b0  ) ) (ignore ) 
      // load-store dependencies..
      // pipe read/write dependencies for pipe MEMORY_TO_NIC_RESPONSE
      // read-dependencies for pipe MEMORY_TO_NIC_RESPONSE
      // write-dependencies for pipe MEMORY_TO_NIC_RESPONSE
      // signal write dependencies for MEMORY_TO_NIC_RESPONSE
      // pipe read/write dependencies for pipe NIC_TO_MEMORY_REQUEST
      // read-dependencies for pipe NIC_TO_MEMORY_REQUEST
      // write-dependencies for pipe NIC_TO_MEMORY_REQUEST
      // signal write dependencies for NIC_TO_MEMORY_REQUEST
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %releaseMutex
    //  file nic.linked.aa, line 192
    // 	$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b0  ) (( ~ ($bitcast ($uint<4>) _b0  ) ) && ($bitcast ($uint<4>) _b0  )) q_base_address ($bitcast ($uint<64>) _b0  ) ) (ignore ) 
    //  file nic.linked.aa, line 197
    // ($bitcast ($uint<1>) _b0  )
    $constant $W[type_cast_437_wire_constant] : $int<1> := _b0// 0
    // ($bitcast ($uint<1>) _b0  )
    $constant $W[type_cast_439_wire_constant] : $int<1> := _b0// 0
    // (( ~ ($bitcast ($uint<4>) _b0  ) ) && ($bitcast ($uint<4>) _b0  ))
    $constant $W[CONCAT_u4_u8_445_wire_constant] : $int<8> := _b11110000// 240
    // ($bitcast ($uint<64>) _b0  )
    $constant $W[type_cast_448_wire_constant] : $int<64> := _b0000000000000000000000000000000000000000000000000000000000000000// 0
    // 	$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b0  ) (( ~ ($bitcast ($uint<4>) _b0  ) ) && ($bitcast ($uint<4>) _b0  )) q_base_address ($bitcast ($uint<64>) _b0  ) ) (ignore ) 
    //  file nic.linked.aa, line 197
    // ignore
    $W[ignore_450] : $int<64>
    // 	$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b0  ) (( ~ ($bitcast ($uint<4>) _b0  ) ) && ($bitcast ($uint<4>) _b0  )) q_base_address ($bitcast ($uint<64>) _b0  ) ) (ignore ) 
    //  file nic.linked.aa, line 197
    $call [call_stmt_450_call] $module accessMemory(type_cast_437_wire_constant type_cast_439_wire_constant CONCAT_u4_u8_445_wire_constant q_base_address type_cast_448_wire_constant) (ignore_450)  
    $delay call_stmt_450_call 4
    $buffering  $in call_stmt_450_call type_cast_437_wire_constant 1
    $buffering  $in call_stmt_450_call type_cast_439_wire_constant 1
    $buffering  $in call_stmt_450_call CONCAT_u4_u8_445_wire_constant 1
    $buffering  $in call_stmt_450_call q_base_address 1
    $buffering  $in call_stmt_450_call type_cast_448_wire_constant 1
    $buffering  $out call_stmt_450_call ignore_450 1
  }
  // end data-path
  // 	$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b0  ) (( ~ ($bitcast ($uint<4>) _b0  ) ) && ($bitcast ($uint<4>) _b0  )) q_base_address ($bitcast ($uint<64>) _b0  ) ) (ignore ) 
  //  file nic.linked.aa, line 197
  // q_base_address
  call_stmt_450_call <=> (call_stmt_450/call_stmt_450_Sample/crr call_stmt_450/call_stmt_450_Update/ccr) (call_stmt_450/call_stmt_450_Sample/cra call_stmt_450/call_stmt_450_Update/cca)
}
$module [popFromQueue] 
{
  $in lock:$int<1>
  // can point into 
  q_base_address:$int<36>
  // can point into 
  $out q_r_data:$int<32>
  // can point into 
  status:$int<1>
  // can point into 
  // pipe-declarations for block %popFromQueue
  //  file nic.linked.aa, line 199
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    ::[call_stmt_462] 
    {
      // start: 	$guard (lock) $call acquireMutex (q_base_address ) (m_ok ) 
      //  file nic.linked.aa, line 205
      $T[call_stmt_462_sample_start_] 
      $T[call_stmt_462_sample_completed_] 
      $T[call_stmt_462_update_start_] 
      $T[call_stmt_462_update_completed_] 
      // Guard expression
      // lock
      // start: Forward dependencies from lock to transition call_stmt_462_sample_start_
      // done: Forward dependencies from lock to transition call_stmt_462_sample_start_
      // Call input argument 0
      // q_base_address
      // start: Forward dependencies from q_base_address to transition call_stmt_462_sample_start_
      // done: Forward dependencies from q_base_address to transition call_stmt_462_sample_start_
      ;;[call_stmt_462_Sample] 
      {
        $T [crr] $T [cra] 
      }
      ;;[call_stmt_462_Update] 
      {
        $T [ccr] $T [cca] 
      }
      call_stmt_462_sample_start_ &-> (call_stmt_462_Sample)
      call_stmt_462_sample_completed_ <-& (call_stmt_462_Sample)
      call_stmt_462_sample_completed_ &-> ($null)
      call_stmt_462_update_start_ &-> (call_stmt_462_Update)
      call_stmt_462_update_completed_ <-& (call_stmt_462_Update)
      // Call output argument 0
      // (as target) m_ok
      // start: WAR dependencies for m_ok
      // done: WAR dependencies for m_ok
      // end: 	$guard (lock) $call acquireMutex (q_base_address ) (m_ok ) 
      // load-store dependencies..
      // pipe read/write dependencies for pipe MEMORY_TO_NIC_RESPONSE
      // read-dependencies for pipe MEMORY_TO_NIC_RESPONSE
      // write-dependencies for pipe MEMORY_TO_NIC_RESPONSE
      // signal write dependencies for MEMORY_TO_NIC_RESPONSE
      // pipe read/write dependencies for pipe NIC_TO_MEMORY_REQUEST
      // read-dependencies for pipe NIC_TO_MEMORY_REQUEST
      // write-dependencies for pipe NIC_TO_MEMORY_REQUEST
      // signal write dependencies for NIC_TO_MEMORY_REQUEST
    }
    ::[call_stmt_467_to_call_stmt_492] 
    {
      // start: 	$call getQueuePointers (q_base_address ) (write_pointer read_pointer ) 
      //  file nic.linked.aa, line 207
      $T[call_stmt_467_sample_start_] 
      $T[call_stmt_467_sample_completed_] 
      $T[call_stmt_467_update_start_] 
      $T[call_stmt_467_update_completed_] 
      // Call input argument 0
      // q_base_address
      // start: Forward dependencies from q_base_address to transition call_stmt_467_sample_start_
      // done: Forward dependencies from q_base_address to transition call_stmt_467_sample_start_
      ;;[call_stmt_467_Sample] 
      {
        $T [crr] $T [cra] 
      }
      ;;[call_stmt_467_Update] 
      {
        $T [ccr] $T [cca] 
      }
      call_stmt_467_sample_start_ &-> (call_stmt_467_Sample)
      call_stmt_467_sample_completed_ <-& (call_stmt_467_Sample)
      call_stmt_467_sample_completed_ &-> ($null)
      call_stmt_467_update_start_ &-> (call_stmt_467_Update)
      call_stmt_467_update_completed_ <-& (call_stmt_467_Update)
      // Call output argument 0
      // (as target) write_pointer
      // Call output argument 1
      // (as target) read_pointer
      // start: WAR dependencies for write_pointer
      // done: WAR dependencies for write_pointer
      // start: WAR dependencies for read_pointer
      // done: WAR dependencies for read_pointer
      // end: 	$call getQueuePointers (q_base_address ) (write_pointer read_pointer ) 
      // start: WAR dependencies for q_empty
      // done: WAR dependencies for q_empty
      // start:  	$volatile q_empty := (write_pointer == read_pointer) $buffering 1
      //  file nic.linked.aa, line 209
      // volatile! 
      // Source expression
      // (write_pointer == read_pointer)
      // write_pointer
      // read_pointer
      // Target expression
      // (as target) q_empty
      // start: WAR dependencies for q_empty
      // done: WAR dependencies for q_empty
      // end:  	$volatile q_empty := (write_pointer == read_pointer) $buffering 1
      // start: WAR dependencies for next_rp
      // done: WAR dependencies for next_rp
      // start:  	$volatile next_rp := ((read_pointer + 1 ) & QUEUE_SIZE_MASK) $buffering 1
      //  file nic.linked.aa, line 210
      // volatile! 
      // Source expression
      // ((read_pointer + 1 ) & QUEUE_SIZE_MASK)
      // (read_pointer + 1 )
      // read_pointer
      // Target expression
      // (as target) next_rp
      // start: WAR dependencies for next_rp
      // done: WAR dependencies for next_rp
      // end:  	$volatile next_rp := ((read_pointer + 1 ) & QUEUE_SIZE_MASK) $buffering 1
      // start: 	$guard (~q_empty) $call getQueueElement (q_base_address read_pointer ) (q_r_data ) 
      //  file nic.linked.aa, line 211
      $T[call_stmt_487_sample_start_] 
      $T[call_stmt_487_sample_completed_] 
      $T[call_stmt_487_update_start_] 
      $T[call_stmt_487_update_completed_] 
      // Guard expression
      // q_empty
      // start: Forward dependencies from q_empty to transition call_stmt_487_sample_start_
      call_stmt_487_sample_start_ <-& (call_stmt_467_update_completed_)
      // done: Forward dependencies from q_empty to transition call_stmt_487_sample_start_
      // Call input argument 0
      // q_base_address
      // Call input argument 1
      // read_pointer
      // start: Forward dependencies from q_base_address to transition call_stmt_487_sample_start_
      // done: Forward dependencies from q_base_address to transition call_stmt_487_sample_start_
      // start: Forward dependencies from read_pointer to transition call_stmt_487_sample_start_
      call_stmt_487_sample_start_ <-& (call_stmt_467_update_completed_)
      // done: Forward dependencies from read_pointer to transition call_stmt_487_sample_start_
      ;;[call_stmt_487_Sample] 
      {
        $T [crr] $T [cra] 
      }
      ;;[call_stmt_487_Update] 
      {
        $T [ccr] $T [cca] 
      }
      call_stmt_487_sample_start_ &-> (call_stmt_487_Sample)
      call_stmt_487_sample_completed_ <-& (call_stmt_487_Sample)
      call_stmt_487_sample_completed_ &-> ($null)
      call_stmt_487_update_start_ &-> (call_stmt_487_Update)
      call_stmt_487_update_completed_ <-& (call_stmt_487_Update)
      // Call output argument 0
      // (as target) q_r_data
      // q_r_data
      // write to interface object
      // q_r_data
      // write to interface object
      // start: WAR dependencies for q_r_data
      // done: WAR dependencies for q_r_data
      // end: 	$guard (~q_empty) $call getQueueElement (q_base_address read_pointer ) (q_r_data ) 
      // start: 	$guard (~q_empty) $call setQueuePointers (q_base_address write_pointer next_rp ) () 
      //  file nic.linked.aa, line 212
      $T[call_stmt_492_sample_start_] 
      $T[call_stmt_492_sample_completed_] 
      $T[call_stmt_492_update_start_] 
      $T[call_stmt_492_update_completed_] 
      // Guard expression
      // q_empty
      // start: Forward dependencies from q_empty to transition call_stmt_492_sample_start_
      call_stmt_492_sample_start_ <-& (call_stmt_467_update_completed_)
      // done: Forward dependencies from q_empty to transition call_stmt_492_sample_start_
      // Call input argument 0
      // q_base_address
      // Call input argument 1
      // write_pointer
      // Call input argument 2
      // next_rp
      // start: Forward dependencies from q_base_address to transition call_stmt_492_sample_start_
      // done: Forward dependencies from q_base_address to transition call_stmt_492_sample_start_
      // start: Forward dependencies from write_pointer to transition call_stmt_492_sample_start_
      call_stmt_492_sample_start_ <-& (call_stmt_467_update_completed_)
      // done: Forward dependencies from write_pointer to transition call_stmt_492_sample_start_
      // start: Forward dependencies from next_rp to transition call_stmt_492_sample_start_
      call_stmt_492_sample_start_ <-& (call_stmt_467_update_completed_)
      // done: Forward dependencies from next_rp to transition call_stmt_492_sample_start_
      ;;[call_stmt_492_Sample] 
      {
        $T [crr] $T [cra] 
      }
      ;;[call_stmt_492_Update] 
      {
        $T [ccr] $T [cca] 
      }
      call_stmt_492_sample_start_ &-> (call_stmt_492_Sample)
      call_stmt_492_sample_completed_ <-& (call_stmt_492_Sample)
      call_stmt_492_sample_completed_ &-> ($null)
      call_stmt_492_update_start_ &-> (call_stmt_492_Update)
      call_stmt_492_update_completed_ <-& (call_stmt_492_Update)
      // end: 	$guard (~q_empty) $call setQueuePointers (q_base_address write_pointer next_rp ) () 
      // load-store dependencies..
      // pipe read/write dependencies for pipe MEMORY_TO_NIC_RESPONSE
      // read-dependencies for pipe MEMORY_TO_NIC_RESPONSE
      call_stmt_487_sample_start_ <-& (call_stmt_467_update_completed_)
      call_stmt_492_sample_start_ <-& (call_stmt_487_update_completed_)
      // write-dependencies for pipe MEMORY_TO_NIC_RESPONSE
      // signal write dependencies for MEMORY_TO_NIC_RESPONSE
      // pipe read/write dependencies for pipe NIC_TO_MEMORY_REQUEST
      // read-dependencies for pipe NIC_TO_MEMORY_REQUEST
      // write-dependencies for pipe NIC_TO_MEMORY_REQUEST
      call_stmt_487_sample_start_ <-& (call_stmt_467_update_completed_)
      call_stmt_492_sample_start_ <-& (call_stmt_487_update_completed_)
      // signal write dependencies for NIC_TO_MEMORY_REQUEST
    }
    ::[call_stmt_498_to_assign_stmt_502] 
    {
      // start: 	$guard (lock) $call releaseMutex (q_base_address ) () 
      //  file nic.linked.aa, line 215
      $T[call_stmt_498_sample_start_] 
      $T[call_stmt_498_sample_completed_] 
      $T[call_stmt_498_update_start_] 
      $T[call_stmt_498_update_completed_] 
      // Guard expression
      // lock
      // start: Forward dependencies from lock to transition call_stmt_498_sample_start_
      // done: Forward dependencies from lock to transition call_stmt_498_sample_start_
      // Call input argument 0
      // q_base_address
      // start: Forward dependencies from q_base_address to transition call_stmt_498_sample_start_
      // done: Forward dependencies from q_base_address to transition call_stmt_498_sample_start_
      ;;[call_stmt_498_Sample] 
      {
        $T [crr] $T [cra] 
      }
      ;;[call_stmt_498_Update] 
      {
        $T [ccr] $T [cca] 
      }
      call_stmt_498_sample_start_ &-> (call_stmt_498_Sample)
      call_stmt_498_sample_completed_ <-& (call_stmt_498_Sample)
      call_stmt_498_sample_completed_ &-> ($null)
      call_stmt_498_update_start_ &-> (call_stmt_498_Update)
      call_stmt_498_update_completed_ <-& (call_stmt_498_Update)
      // end: 	$guard (lock) $call releaseMutex (q_base_address ) () 
      // start:  	status := ( ~ q_empty ) $buffering 1// bits of buffering = 1. 
      //  file nic.linked.aa, line 216
      // Source expression
      // ( ~ q_empty )
      $T[NOT_u1_u1_501_sample_start_] 
      $T[NOT_u1_u1_501_sample_completed_] 
      $T[NOT_u1_u1_501_update_start_] 
      $T[NOT_u1_u1_501_update_completed_] 
      // q_empty
      // start: Forward dependencies from q_empty to transition NOT_u1_u1_501_sample_start_
      // done: Forward dependencies from q_empty to transition NOT_u1_u1_501_sample_start_
      ;;[NOT_u1_u1_501_Sample] 
      {
        // unary expression 
        $T [rr] $T [ra] // (split) unary operation
      }
      ;;[NOT_u1_u1_501_Update] 
      {
        // unary expression 
        $T [cr] $T [ca] //(split) unary operation
      }
      NOT_u1_u1_501_sample_start_ &-> (NOT_u1_u1_501_Sample)
      NOT_u1_u1_501_sample_completed_ <-& (NOT_u1_u1_501_Sample)
      NOT_u1_u1_501_sample_completed_ &-> ($null)
      NOT_u1_u1_501_update_start_ &-> (NOT_u1_u1_501_Update)
      NOT_u1_u1_501_update_completed_ <-& (NOT_u1_u1_501_Update)
      // Target expression
      // (as target) status
      // status
      // write to interface object
      // start: WAR dependencies for status
      // done: WAR dependencies for status
      // status
      // write to interface object
      // end:  	status := ( ~ q_empty ) $buffering 1// bits of buffering = 1. 
      // load-store dependencies..
      // pipe read/write dependencies for pipe MEMORY_TO_NIC_RESPONSE
      // read-dependencies for pipe MEMORY_TO_NIC_RESPONSE
      // write-dependencies for pipe MEMORY_TO_NIC_RESPONSE
      // signal write dependencies for MEMORY_TO_NIC_RESPONSE
      // pipe read/write dependencies for pipe NIC_TO_MEMORY_REQUEST
      // read-dependencies for pipe NIC_TO_MEMORY_REQUEST
      // write-dependencies for pipe NIC_TO_MEMORY_REQUEST
      // signal write dependencies for NIC_TO_MEMORY_REQUEST
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %popFromQueue
    //  file nic.linked.aa, line 199
    // 	$guard (lock) $call acquireMutex (q_base_address ) (m_ok ) 
    //  file nic.linked.aa, line 205
    // 	$call getQueuePointers (q_base_address ) (write_pointer read_pointer ) 
    //  file nic.linked.aa, line 207
    // 1 
    $constant $W[konst_478_wire_constant] : $int<32> := _b00000000000000000000000000000001// 1
    // QUEUE_SIZE_MASK
    $constant $W[R_QUEUE_SIZE_MASK_480_wire_constant] : $int<32> := _b00000000000000000000000100000000// 256
    // 	$guard (~q_empty) $call getQueueElement (q_base_address read_pointer ) (q_r_data ) 
    //  file nic.linked.aa, line 211
    // 	$guard (~q_empty) $call setQueuePointers (q_base_address write_pointer next_rp ) () 
    //  file nic.linked.aa, line 212
    // 	$guard (lock) $call releaseMutex (q_base_address ) () 
    //  file nic.linked.aa, line 215
    // 	$guard (lock) $call acquireMutex (q_base_address ) (m_ok ) 
    //  file nic.linked.aa, line 205
    // m_ok
    $W[m_ok_462] : $int<1>
    // 	$call getQueuePointers (q_base_address ) (write_pointer read_pointer ) 
    //  file nic.linked.aa, line 207
    // write_pointer
    $W[write_pointer_467] : $int<32>
    // read_pointer
    $W[read_pointer_467] : $int<32>
    // 	$volatile q_empty := (write_pointer == read_pointer) $buffering 1
    //  file nic.linked.aa, line 209
    // q_empty
    $W[q_empty_475] : $int<1>
    // 	$volatile next_rp := ((read_pointer + 1 ) & QUEUE_SIZE_MASK) $buffering 1
    //  file nic.linked.aa, line 210
    // (read_pointer + 1 )
    $intermediate $W[ADD_u32_u32_479_wire] : $int<32>
    // next_rp
    $W[next_rp_482] : $int<32>
    // 	$guard (~q_empty) $call getQueueElement (q_base_address read_pointer ) (q_r_data ) 
    //  file nic.linked.aa, line 211
    // q_r_data
    // 	$guard (~q_empty) $call setQueuePointers (q_base_address write_pointer next_rp ) () 
    //  file nic.linked.aa, line 212
    // 	$guard (lock) $call releaseMutex (q_base_address ) () 
    //  file nic.linked.aa, line 215
    // 	status := ( ~ q_empty ) $buffering 1// bits of buffering = 1. 
    //  file nic.linked.aa, line 216
    // status
    // 	$guard (lock) $call acquireMutex (q_base_address ) (m_ok ) 
    //  file nic.linked.aa, line 205
    $call [call_stmt_462_call] $module acquireMutex(q_base_address) (m_ok_462) $guard ( lock )  
    $delay call_stmt_462_call 4
    $buffering  $in call_stmt_462_call q_base_address 1
    $buffering  $out call_stmt_462_call m_ok_462 1
    // 	$call getQueuePointers (q_base_address ) (write_pointer read_pointer ) 
    //  file nic.linked.aa, line 207
    $call [call_stmt_467_call] $module getQueuePointers(q_base_address) (write_pointer_467 read_pointer_467)  
    $delay call_stmt_467_call 4
    $buffering  $in call_stmt_467_call q_base_address 1
    $buffering  $out call_stmt_467_call write_pointer_467 1
    $buffering  $out call_stmt_467_call read_pointer_467 1
    // 	$volatile q_empty := (write_pointer == read_pointer) $buffering 1
    //  file nic.linked.aa, line 209
    // (write_pointer == read_pointer)
    ==[EQ_u32_u1_474_inst] (write_pointer_467 read_pointer_467) (q_empty_475)   $flowthrough 
    $delay EQ_u32_u1_474_inst 0
    // 	$volatile next_rp := ((read_pointer + 1 ) & QUEUE_SIZE_MASK) $buffering 1
    //  file nic.linked.aa, line 210
    // (read_pointer + 1 )
    +[ADD_u32_u32_479_inst] (read_pointer_467 konst_478_wire_constant) (ADD_u32_u32_479_wire)   $flowthrough 
    $delay ADD_u32_u32_479_inst 0
    // ((read_pointer + 1 ) & QUEUE_SIZE_MASK)
    &[AND_u32_u32_481_inst] (ADD_u32_u32_479_wire R_QUEUE_SIZE_MASK_480_wire_constant) (next_rp_482)   $flowthrough 
    $delay AND_u32_u32_481_inst 0
    // 	$guard (~q_empty) $call getQueueElement (q_base_address read_pointer ) (q_r_data ) 
    //  file nic.linked.aa, line 211
    $call [call_stmt_487_call] $module getQueueElement(q_base_address read_pointer_467) (q_r_data) $guard ( ~ q_empty_475 )  
    $delay call_stmt_487_call 4
    $buffering  $in call_stmt_487_call q_base_address 1
    $buffering  $in call_stmt_487_call read_pointer_467 1
    $buffering  $out call_stmt_487_call q_r_data 1
    // 	$guard (~q_empty) $call setQueuePointers (q_base_address write_pointer next_rp ) () 
    //  file nic.linked.aa, line 212
    $call [call_stmt_492_call] $module setQueuePointers(q_base_address write_pointer_467 next_rp_482) () $guard ( ~ q_empty_475 )  
    $delay call_stmt_492_call 4
    $buffering  $in call_stmt_492_call q_base_address 1
    $buffering  $in call_stmt_492_call write_pointer_467 1
    $buffering  $in call_stmt_492_call next_rp_482 1
    // 	$guard (lock) $call releaseMutex (q_base_address ) () 
    //  file nic.linked.aa, line 215
    $call [call_stmt_498_call] $module releaseMutex(q_base_address) () $guard ( lock )  
    $delay call_stmt_498_call 4
    $buffering  $in call_stmt_498_call q_base_address 1
    // 	status := ( ~ q_empty ) $buffering 1// bits of buffering = 1. 
    //  file nic.linked.aa, line 216
    // ( ~ q_empty )
    ~ [NOT_u1_u1_501_inst] (q_empty_475) (status)  
    $buffering  $out NOT_u1_u1_501_inst status 1
    $delay NOT_u1_u1_501_inst 1
  }
  // end data-path
  // 	$guard (lock) $call acquireMutex (q_base_address ) (m_ok ) 
  //  file nic.linked.aa, line 205
  // q_base_address
  call_stmt_462_call <=> (call_stmt_462/call_stmt_462_Sample/crr call_stmt_462/call_stmt_462_Update/ccr) (call_stmt_462/call_stmt_462_Sample/cra call_stmt_462/call_stmt_462_Update/cca)
  // 	$call getQueuePointers (q_base_address ) (write_pointer read_pointer ) 
  //  file nic.linked.aa, line 207
  // q_base_address
  call_stmt_467_call <=> (call_stmt_467_to_call_stmt_492/call_stmt_467_Sample/crr call_stmt_467_to_call_stmt_492/call_stmt_467_Update/ccr) (call_stmt_467_to_call_stmt_492/call_stmt_467_Sample/cra call_stmt_467_to_call_stmt_492/call_stmt_467_Update/cca)
  // 	$volatile q_empty := (write_pointer == read_pointer) $buffering 1
  //  file nic.linked.aa, line 209
  // (write_pointer == read_pointer)
  // write_pointer
  // read_pointer
  // 	$volatile next_rp := ((read_pointer + 1 ) & QUEUE_SIZE_MASK) $buffering 1
  //  file nic.linked.aa, line 210
  // ((read_pointer + 1 ) & QUEUE_SIZE_MASK)
  // (read_pointer + 1 )
  // read_pointer
  // 	$guard (~q_empty) $call getQueueElement (q_base_address read_pointer ) (q_r_data ) 
  //  file nic.linked.aa, line 211
  // q_base_address
  // read_pointer
  call_stmt_487_call <=> (call_stmt_467_to_call_stmt_492/call_stmt_487_Sample/crr call_stmt_467_to_call_stmt_492/call_stmt_487_Update/ccr) (call_stmt_467_to_call_stmt_492/call_stmt_487_Sample/cra call_stmt_467_to_call_stmt_492/call_stmt_487_Update/cca)
  // 	$guard (~q_empty) $call setQueuePointers (q_base_address write_pointer next_rp ) () 
  //  file nic.linked.aa, line 212
  // q_base_address
  // write_pointer
  // next_rp
  call_stmt_492_call <=> (call_stmt_467_to_call_stmt_492/call_stmt_492_Sample/crr call_stmt_467_to_call_stmt_492/call_stmt_492_Update/ccr) (call_stmt_467_to_call_stmt_492/call_stmt_492_Sample/cra call_stmt_467_to_call_stmt_492/call_stmt_492_Update/cca)
  // 	$guard (lock) $call releaseMutex (q_base_address ) () 
  //  file nic.linked.aa, line 215
  // q_base_address
  call_stmt_498_call <=> (call_stmt_498_to_assign_stmt_502/call_stmt_498_Sample/crr call_stmt_498_to_assign_stmt_502/call_stmt_498_Update/ccr) (call_stmt_498_to_assign_stmt_502/call_stmt_498_Sample/cra call_stmt_498_to_assign_stmt_502/call_stmt_498_Update/cca)
  // 	status := ( ~ q_empty ) $buffering 1// bits of buffering = 1. 
  //  file nic.linked.aa, line 216
  // q_empty
  // ( ~ q_empty )
  NOT_u1_u1_501_inst <=> (call_stmt_498_to_assign_stmt_502/NOT_u1_u1_501_Sample/rr call_stmt_498_to_assign_stmt_502/NOT_u1_u1_501_Update/cr) (call_stmt_498_to_assign_stmt_502/NOT_u1_u1_501_Sample/ra call_stmt_498_to_assign_stmt_502/NOT_u1_u1_501_Update/ca)
}
$module [writeEthernetHeaderToMem] 
{
  $in buf_pointer:$int<36>
  // can point into 
  $out buf_position:$int<36>
  // can point into 
  // pipe-declarations for block %writeEthernetHeaderToMem
  //  file nic.linked.aa, line 219
  // pipe-declarations for block %writeEthernetHeaderToMem%main
  //  file nic.linked.aa, line 224
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    <>[branch_block_stmt_510] // Branch Block  file nic.linked.aa, line 224
    {
      $P [branch_block_stmt_510__entry__]
      branch_block_stmt_510__entry__ <-| ($entry)
      $P [branch_block_stmt_510__exit__]
      branch_block_stmt_510__exit__ |-> ($exit)
      $P [do_while_stmt_511__entry__] 
      $P [do_while_stmt_511__exit__] 
      // do-while-statement  
      //  file nic.linked.aa, line 226
      <o> [do_while_stmt_511]  $depth 15 $buffering 1 
      {
        $P[do_while_stmt_511__entry__] 
        $P[do_while_stmt_511__exit__] 
        $P[loop_back] 
        $P[condition_done] 
        $P[loop_body_done] 
        $pipeline [do_while_stmt_511_loop_body] 
        {
          // Pipelined!
          $T[back_edge_to_loop_body] 
          $T[first_time_through_loop_body] 
          $T[loop_body_start] 
          $T[condition_evaluated] 
          $transitionmerge [entry_tmerge] (back_edge_to_loop_body first_time_through_loop_body) (loop_body_start)
          $entry <-& (loop_body_start)
          $T[aggregated_phi_sample_req] 
          $T[aggregated_phi_sample_ack] 
          $T[aggregated_phi_update_req] 
          $T[aggregated_phi_update_ack] 
          // do not loop-back unless all phi's have used up their triggering tokens.
          condition_evaluated <-& (aggregated_phi_update_ack)
          aggregated_phi_sample_req o<-& (aggregated_phi_update_ack 0)
          // start:  PHI statement phi_stmt_513
          // 			$phi buf_position := 			  (buf_pointer + 8 ) $on   $entry 			  (buf_position + 8 ) $on   $loopback 
          // type of target is $uint<36>
          $T[phi_stmt_513_sample_start_] 
          $T[phi_stmt_513_sample_completed_] 
          $T[phi_stmt_513_update_start_] 
          $T[phi_stmt_513_update_completed_] 
          $T[phi_stmt_513_sample_start__ps] 
          phi_stmt_513_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_513_sample_completed__ps] 
          phi_stmt_513_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_513_update_start__ps] 
          phi_stmt_513_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_513_update_completed__ps] 
          phi_stmt_513_update_completed_ <-& (phi_stmt_513_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_513_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_513_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_513_update_start_)
          $T[phi_stmt_513_loopback_trigger] 
          phi_stmt_513_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_513_loopback_sample_req] 
          $T[phi_stmt_513_loopback_sample_req_ps] 
          phi_stmt_513_loopback_sample_req <-& (phi_stmt_513_loopback_sample_req_ps)
          phi_stmt_513_loopback_sample_req &-> ($null)
          $T[phi_stmt_513_entry_trigger] 
          phi_stmt_513_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_513_entry_sample_req] 
          $T[phi_stmt_513_entry_sample_req_ps] 
          phi_stmt_513_entry_sample_req <-& (phi_stmt_513_entry_sample_req_ps)
          phi_stmt_513_entry_sample_req &-> ($null)
          phi_stmt_513_update_start_ o<-& (phi_stmt_513_update_completed_ 0)
          phi_stmt_513_sample_start_ o<-& (phi_stmt_513_sample_completed_ 1)
          $T[phi_stmt_513_merged_reqs] 
          $T[phi_stmt_513_phi_mux_ack] 
          $T[phi_stmt_513_phi_mux_ack_ps] 
          phi_stmt_513_phi_mux_ack_ps <-& (phi_stmt_513_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_513_update_completed_)
          $T[ADD_u36_u36_517_sample_start__ps] 
          $T[ADD_u36_u36_517_sample_completed__ps] 
          $T[ADD_u36_u36_517_update_start__ps] 
          $T[ADD_u36_u36_517_update_completed__ps] 
          // source expression in Phi alternative 0
          // (buf_pointer + 8 )
          $T[ADD_u36_u36_517_sample_start_] 
          $T[ADD_u36_u36_517_sample_completed_] 
          $T[ADD_u36_u36_517_update_start_] 
          $T[ADD_u36_u36_517_update_completed_] 
          // buf_pointer
          // start: Forward dependencies from buf_pointer to transition ADD_u36_u36_517_sample_start_
          // done: Forward dependencies from buf_pointer to transition ADD_u36_u36_517_sample_start_
          ;;[ADD_u36_u36_517_Sample] 
          {
            // binary expression 
            $T [rr] $T [ra]  // (split) binary operation 
          }
          ;;[ADD_u36_u36_517_Update] 
          {
            // binary expression 
            $T [cr] $T [ca] // (split) binary operation 
          }
          ADD_u36_u36_517_sample_start_ &-> (ADD_u36_u36_517_Sample)
          ADD_u36_u36_517_sample_completed_ <-& (ADD_u36_u36_517_Sample)
          ADD_u36_u36_517_sample_completed_ &-> ($null)
          ADD_u36_u36_517_update_start_ &-> (ADD_u36_u36_517_Update)
          ADD_u36_u36_517_update_completed_ <-& (ADD_u36_u36_517_Update)
          // RAW reenables for buf_pointer
          // self-release: 
          ADD_u36_u36_517_sample_start_ o<-& (ADD_u36_u36_517_sample_completed_ 1)
          $null &-> (ADD_u36_u36_517_update_start_)
          ADD_u36_u36_517_update_start_ o<-& (ADD_u36_u36_517_update_completed_ 0)
          // Phi start dependency
          ADD_u36_u36_517_sample_start_ <-& (ADD_u36_u36_517_sample_start__ps)
          ADD_u36_u36_517_update_start_ <-& (ADD_u36_u36_517_update_start__ps)
          // RAW reenables for (buf_pointer + 8 )
          // producer  and  consumer are both determined by PHI statements.
          // Phi complete dependency.
          ADD_u36_u36_517_sample_completed__ps <-& (ADD_u36_u36_517_sample_completed_)
          ADD_u36_u36_517_update_completed__ps <-& (ADD_u36_u36_517_update_completed_)
          $T[ADD_u36_u36_520_sample_start__ps] 
          $T[ADD_u36_u36_520_sample_completed__ps] 
          $T[ADD_u36_u36_520_update_start__ps] 
          $T[ADD_u36_u36_520_update_completed__ps] 
          // source expression in Phi alternative 1
          // (buf_position + 8 )
          $T[ADD_u36_u36_520_sample_start_] 
          $T[ADD_u36_u36_520_sample_completed_] 
          $T[ADD_u36_u36_520_update_start_] 
          $T[ADD_u36_u36_520_update_completed_] 
          // buf_position
          // start: Forward dependencies from buf_position to transition ADD_u36_u36_520_sample_start_
          // non-constant expression which depends only on signals/constants?
          // done: Forward dependencies from buf_position to transition ADD_u36_u36_520_sample_start_
          ;;[ADD_u36_u36_520_Sample] 
          {
            // binary expression 
            $T [rr] $T [ra]  // (split) binary operation 
          }
          ;;[ADD_u36_u36_520_Update] 
          {
            // binary expression 
            $T [cr] $T [ca] // (split) binary operation 
          }
          ADD_u36_u36_520_sample_start_ &-> (ADD_u36_u36_520_Sample)
          ADD_u36_u36_520_sample_completed_ <-& (ADD_u36_u36_520_Sample)
          ADD_u36_u36_520_sample_completed_ &-> ($null)
          ADD_u36_u36_520_update_start_ &-> (ADD_u36_u36_520_Update)
          ADD_u36_u36_520_update_completed_ <-& (ADD_u36_u36_520_Update)
          // RAW reenables for buf_position
          // self-release: 
          ADD_u36_u36_520_sample_start_ o<-& (ADD_u36_u36_520_sample_completed_ 1)
          $null &-> (ADD_u36_u36_520_update_start_)
          ADD_u36_u36_520_update_start_ o<-& (ADD_u36_u36_520_update_completed_ 0)
          // Phi start dependency
          ADD_u36_u36_520_sample_start_ <-& (ADD_u36_u36_520_sample_start__ps)
          ADD_u36_u36_520_update_start_ <-& (ADD_u36_u36_520_update_start__ps)
          // RAW reenables for (buf_position + 8 )
          // producer  and  consumer are both determined by PHI statements.
          // Phi complete dependency.
          ADD_u36_u36_520_sample_completed__ps <-& (ADD_u36_u36_520_sample_completed_)
          ADD_u36_u36_520_update_completed__ps <-& (ADD_u36_u36_520_update_completed_)
          $phisequencer [ phi_stmt_513_phi_seq] : 
          phi_stmt_513_entry_trigger ADD_u36_u36_517_sample_start__ps ADD_u36_u36_517_sample_completed__ps ADD_u36_u36_517_update_start__ps ADD_u36_u36_517_update_completed__ps phi_stmt_513_loopback_trigger ADD_u36_u36_520_sample_start__ps ADD_u36_u36_520_sample_completed__ps ADD_u36_u36_520_update_start__ps ADD_u36_u36_520_update_completed__ps :
          phi_stmt_513_sample_start__ps phi_stmt_513_sample_completed__ps phi_stmt_513_update_start__ps phi_stmt_513_update_completed__ps :
          phi_stmt_513_entry_sample_req_ps phi_stmt_513_loopback_sample_req_ps : 
          phi_stmt_513_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_513
          // start:  PHI statement phi_stmt_521
          // 			$phi I := 			  ($bitcast ($uint<4>) _b0  ) $on   $entry 			  nI $on   $loopback 
          // type of target is $uint<4>
          $T[phi_stmt_521_sample_start_] 
          $T[phi_stmt_521_sample_completed_] 
          $T[phi_stmt_521_update_start_] 
          $T[phi_stmt_521_update_completed_] 
          $T[phi_stmt_521_sample_start__ps] 
          phi_stmt_521_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_521_sample_completed__ps] 
          phi_stmt_521_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_521_update_start__ps] 
          phi_stmt_521_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_521_update_completed__ps] 
          phi_stmt_521_update_completed_ <-& (phi_stmt_521_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_521_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_521_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_521_update_start_)
          $T[phi_stmt_521_loopback_trigger] 
          phi_stmt_521_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_521_loopback_sample_req] 
          $T[phi_stmt_521_loopback_sample_req_ps] 
          phi_stmt_521_loopback_sample_req <-& (phi_stmt_521_loopback_sample_req_ps)
          phi_stmt_521_loopback_sample_req &-> ($null)
          $T[phi_stmt_521_entry_trigger] 
          phi_stmt_521_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_521_entry_sample_req] 
          $T[phi_stmt_521_entry_sample_req_ps] 
          phi_stmt_521_entry_sample_req <-& (phi_stmt_521_entry_sample_req_ps)
          phi_stmt_521_entry_sample_req &-> ($null)
          phi_stmt_521_update_start_ o<-& (phi_stmt_521_update_completed_ 0)
          phi_stmt_521_sample_start_ o<-& (phi_stmt_521_sample_completed_ 1)
          $T[phi_stmt_521_merged_reqs] 
          $T[phi_stmt_521_phi_mux_ack] 
          $T[phi_stmt_521_phi_mux_ack_ps] 
          phi_stmt_521_phi_mux_ack_ps <-& (phi_stmt_521_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_521_update_completed_)
          $T[type_cast_524_sample_start__ps] 
          $T[type_cast_524_sample_completed__ps] 
          $T[type_cast_524_update_start__ps] 
          $T[type_cast_524_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[type_cast_524_sample_start_] 
          $T[type_cast_524_sample_completed_] 
          type_cast_524_sample_completed_ <-& (type_cast_524_sample_start_)
          $T[type_cast_524_update_start_] 
          $T [type_cast_524_update_completed_] $delay 
          type_cast_524_update_completed_ <-& (type_cast_524_update_start_)
          // Phi start dependency for implicit/constant alternative.
          type_cast_524_sample_start_ <-& (type_cast_524_sample_start__ps)
          type_cast_524_update_start_ <-& (type_cast_524_update_start__ps)
          // Phi complete dependency.
          type_cast_524_sample_completed__ps <-& (type_cast_524_sample_completed_)
          type_cast_524_update_completed__ps <-& (type_cast_524_update_completed_)
          $T[R_nI_525_sample_start__ps] 
          $T[R_nI_525_sample_completed__ps] 
          $T[R_nI_525_update_start__ps] 
          $T[R_nI_525_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_nI_525_sample_start_] 
          $T[R_nI_525_sample_completed_] 
          $T[R_nI_525_update_start_] 
          $T[R_nI_525_update_completed_] 
          ;;[R_nI_525_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_nI_525_sample_start_ &-> (R_nI_525_Sample)
          R_nI_525_sample_completed_ <-& (R_nI_525_Sample)
          ;;[R_nI_525_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_nI_525_update_start_ &-> (R_nI_525_Update)
          R_nI_525_update_completed_ <-& (R_nI_525_Update)
          // RAW reenables for nI
          // Phi start dependency for implicit/constant alternative.
          R_nI_525_sample_start_ <-& (R_nI_525_sample_start__ps)
          R_nI_525_update_start_ <-& (R_nI_525_update_start__ps)
          // Phi complete dependency.
          R_nI_525_sample_completed__ps <-& (R_nI_525_sample_completed_)
          R_nI_525_update_completed__ps <-& (R_nI_525_update_completed_)
          $phisequencer [ phi_stmt_521_phi_seq] : 
          phi_stmt_521_entry_trigger type_cast_524_sample_start__ps type_cast_524_sample_completed__ps type_cast_524_update_start__ps type_cast_524_update_completed__ps phi_stmt_521_loopback_trigger R_nI_525_sample_start__ps R_nI_525_sample_completed__ps R_nI_525_update_start__ps R_nI_525_update_completed__ps :
          phi_stmt_521_sample_start__ps phi_stmt_521_sample_completed__ps phi_stmt_521_update_start__ps phi_stmt_521_update_completed__ps :
          phi_stmt_521_entry_sample_req_ps phi_stmt_521_loopback_sample_req_ps : 
          phi_stmt_521_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_521
          // start:  single source PHI statement phi_stmt_526
          // 			$phi ethernet_header := 			  nic_rx_to_header $on   $entry ,   $loopback 
          // type of target is $uint<73>
          $T[phi_stmt_526_sample_start_] 
          $T[phi_stmt_526_sample_completed_] 
          $T[phi_stmt_526_update_start_] 
          $T[phi_stmt_526_update_completed_] 
          aggregated_phi_sample_req <-& (phi_stmt_526_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_526_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_526_update_start_)
          // non-implicit source expression in single-source phi
          // nic_rx_to_header
          $T[RPIPE_nic_rx_to_header_528_sample_start_] 
          $T[RPIPE_nic_rx_to_header_528_sample_completed_] 
          $T[RPIPE_nic_rx_to_header_528_update_start_] 
          $T[RPIPE_nic_rx_to_header_528_update_completed_] 
          ;;[RPIPE_nic_rx_to_header_528_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_nic_rx_to_header_528_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_nic_rx_to_header_528_sample_start_ &-> (RPIPE_nic_rx_to_header_528_Sample)
          RPIPE_nic_rx_to_header_528_sample_completed_ <-& (RPIPE_nic_rx_to_header_528_Sample)
          RPIPE_nic_rx_to_header_528_update_start_ <-& (RPIPE_nic_rx_to_header_528_sample_completed_)
          RPIPE_nic_rx_to_header_528_update_start_ &-> (RPIPE_nic_rx_to_header_528_Update)
          RPIPE_nic_rx_to_header_528_update_completed_ <-& (RPIPE_nic_rx_to_header_528_Update)
          RPIPE_nic_rx_to_header_528_sample_start_ o<-& (RPIPE_nic_rx_to_header_528_update_completed_ 0)
          // RAW reenables for nic_rx_to_header
          // producer  and  consumer are both determined by PHI statements.
          aggregated_phi_sample_req &-> (RPIPE_nic_rx_to_header_528_sample_start_)
          aggregated_phi_sample_ack <-& (RPIPE_nic_rx_to_header_528_sample_completed_)
          aggregated_phi_update_req &-> (RPIPE_nic_rx_to_header_528_update_start_)
          phi_stmt_526_update_completed_ <-& (RPIPE_nic_rx_to_header_528_update_completed_)
          aggregated_phi_update_ack <-& (phi_stmt_526_update_completed_)
          // done: PHI Statement phi_stmt_526
          // start: WAR dependencies for last_bit
          // done: WAR dependencies for last_bit
          // start:  			$volatile last_bit := ( $slice ethernet_header 72 72 )  $buffering 1
          //  file nic.linked.aa, line 236
          // volatile! 
          // Source expression
          // ( $slice ethernet_header 72 72 ) 
          // ethernet_header
          // Target expression
          // (as target) last_bit
          // start: WAR dependencies for last_bit
          // done: WAR dependencies for last_bit
          // end:  			$volatile last_bit := ( $slice ethernet_header 72 72 )  $buffering 1
          // start: WAR dependencies for wdata
          // done: WAR dependencies for wdata
          // start:  			$volatile wdata := ( $slice ethernet_header 71 8 )  $buffering 1
          //  file nic.linked.aa, line 237
          // volatile! 
          // Source expression
          // ( $slice ethernet_header 71 8 ) 
          // ethernet_header
          // Target expression
          // (as target) wdata
          // start: WAR dependencies for wdata
          // done: WAR dependencies for wdata
          // end:  			$volatile wdata := ( $slice ethernet_header 71 8 )  $buffering 1
          // start: WAR dependencies for wkeep
          // done: WAR dependencies for wkeep
          // start:  			$volatile wkeep := ( $slice ethernet_header 7 0 )  $buffering 1
          //  file nic.linked.aa, line 238
          // volatile! 
          // Source expression
          // ( $slice ethernet_header 7 0 ) 
          // ethernet_header
          // Target expression
          // (as target) wkeep
          // start: WAR dependencies for wkeep
          // done: WAR dependencies for wkeep
          // end:  			$volatile wkeep := ( $slice ethernet_header 7 0 )  $buffering 1
          // start: 			$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b0  ) wkeep buf_position wdata ) (ignore_return ) 
          //  file nic.linked.aa, line 239
          $T[call_stmt_552_sample_start_] 
          $T[call_stmt_552_sample_completed_] 
          $T[call_stmt_552_update_start_] 
          $T[call_stmt_552_update_completed_] 
          // Call input argument 0
          // Call input argument 1
          // Call input argument 2
          // wkeep
          // Call input argument 3
          // buf_position
          // Call input argument 4
          // wdata
          // start: Forward dependencies from wkeep to transition call_stmt_552_sample_start_
          call_stmt_552_sample_start_ <-& (phi_stmt_526_update_completed_)
          // done: Forward dependencies from wkeep to transition call_stmt_552_sample_start_
          // RAW reenables for wkeep
          phi_stmt_526_update_start_ o<-& (call_stmt_552_sample_completed_ 0)
          // start: Forward dependencies from buf_position to transition call_stmt_552_sample_start_
          // non-constant expression which depends only on signals/constants?
          // done: Forward dependencies from buf_position to transition call_stmt_552_sample_start_
          // RAW reenables for buf_position
          // start: Forward dependencies from wdata to transition call_stmt_552_sample_start_
          call_stmt_552_sample_start_ <-& (phi_stmt_526_update_completed_)
          // done: Forward dependencies from wdata to transition call_stmt_552_sample_start_
          // RAW reenables for wdata
          phi_stmt_526_update_start_ o<-& (call_stmt_552_sample_completed_ 0)
          ;;[call_stmt_552_Sample] 
          {
            $T [crr] $T [cra] 
          }
          ;;[call_stmt_552_Update] 
          {
            $T [ccr] $T [cca] 
          }
          call_stmt_552_sample_start_ &-> (call_stmt_552_Sample)
          call_stmt_552_sample_completed_ <-& (call_stmt_552_Sample)
          call_stmt_552_sample_completed_ &-> ($null)
          call_stmt_552_update_start_ &-> (call_stmt_552_Update)
          call_stmt_552_update_completed_ <-& (call_stmt_552_Update)
          // Call output argument 0
          // (as target) ignore_return
          // self-release: 
          call_stmt_552_sample_start_ o<-& (call_stmt_552_sample_completed_ 1)
          $null &-> (call_stmt_552_update_start_)
          call_stmt_552_update_start_ o<-& (call_stmt_552_update_completed_ 0)
          // start: WAR dependencies for ignore_return
          // done: WAR dependencies for ignore_return
          // end: 			$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b0  ) wkeep buf_position wdata ) (ignore_return ) 
          // start: WAR dependencies for nI
          // WAR dependency: Read: nI before Write: 			$volatile nI := (I + 1 ) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for nI
          // start:  			$volatile nI := (I + 1 ) $buffering 1
          //  file nic.linked.aa, line 240
          // volatile! 
          // Source expression
          // (I + 1 )
          // I
          // Target expression
          // (as target) nI
          // start: WAR dependencies for nI
          // WAR dependency: Read: nI before Write: 			$volatile nI := (I + 1 ) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for nI
          // end:  			$volatile nI := (I + 1 ) $buffering 1
          // (nI <= 1 )
          // nI
          $T [loop_body_delay_to_condition_start] $delay
          loop_body_start &-> (loop_body_delay_to_condition_start)
          loop_body_delay_to_condition_start &-> (condition_evaluated)
          // start: Forward dependencies from (nI <= 1 ) to transition condition_evaluated
          condition_evaluated <-& (phi_stmt_521_update_completed_)
          // done: Forward dependencies from (nI <= 1 ) to transition condition_evaluated
          condition_evaluated &-> ($null)
          // load-store dependencies..
          // pipe read/write dependencies for pipe MEMORY_TO_NIC_RESPONSE
          // read-dependencies for pipe MEMORY_TO_NIC_RESPONSE
          // write-dependencies for pipe MEMORY_TO_NIC_RESPONSE
          // signal write dependencies for MEMORY_TO_NIC_RESPONSE
          // pipe read/write dependencies for pipe NIC_TO_MEMORY_REQUEST
          // read-dependencies for pipe NIC_TO_MEMORY_REQUEST
          // write-dependencies for pipe NIC_TO_MEMORY_REQUEST
          // signal write dependencies for NIC_TO_MEMORY_REQUEST
          // pipe read/write dependencies for pipe nic_rx_to_header
          // read-dependencies for pipe nic_rx_to_header
          // write-dependencies for pipe nic_rx_to_header
          // signal write dependencies for nic_rx_to_header
        }
        ( first_time_through_loop_body  back_edge_to_loop_body) 
        ( condition_evaluated )
        ;; [loop_exit] 
        {
          $T [ack] 
        }
        ;; [loop_taken] 
        {
          $T [ack] 
        }
        do_while_stmt_511__entry__ <-| ($entry)
        loop_body_done <-| ( do_while_stmt_511_loop_body ) 
        condition_done |-> (loop_exit loop_taken)
        do_while_stmt_511__exit__ |-> ($exit)
        $bind condition_done <= do_while_stmt_511_loop_body : condition_evaluated
        $bind do_while_stmt_511__entry__  => do_while_stmt_511_loop_body : first_time_through_loop_body 
        $bind loop_back  => do_while_stmt_511_loop_body : back_edge_to_loop_body 
        $terminate (loop_exit loop_taken loop_body_done) (loop_back do_while_stmt_511__exit__)
      }
      do_while_stmt_511__entry__ |-> (do_while_stmt_511)
      do_while_stmt_511__exit__ <-| (do_while_stmt_511)
      do_while_stmt_511__entry__ <-| (branch_block_stmt_510__entry__)
      do_while_stmt_511__exit__ |-> (branch_block_stmt_510__exit__)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %writeEthernetHeaderToMem%main%
    //  file nic.linked.aa, line 227
    // constant-object-declarations for block %writeEthernetHeaderToMem%main
    //  file nic.linked.aa, line 224
    // constant-object-declarations for block %writeEthernetHeaderToMem
    //  file nic.linked.aa, line 219
    // constant-declarations for block %writeEthernetHeaderToMem%main
    //  file nic.linked.aa, line 224
    // do-while statement  
    //  file nic.linked.aa, line 226
    // 1 
    $constant $W[konst_560_wire_constant] : $int<4> := _b0001// 1
    // constant-declarations for block %writeEthernetHeaderToMem%main%
    //  file nic.linked.aa, line 227
    // constant-declarations for phi:  			$phi buf_position := 			  (buf_pointer + 8 ) $on   $entry 			  (buf_position + 8 ) $on   $loopback 
    // type of target is $uint<36>
    //  file nic.linked.aa, line 228
    // 8 
    $constant $W[konst_516_wire_constant] : $int<36> := _b000000000000000000000000000000001000// 8
    // 8 
    $constant $W[konst_519_wire_constant] : $int<36> := _b000000000000000000000000000000001000// 8
    // constant-declarations for phi:  			$phi I := 			  ($bitcast ($uint<4>) _b0  ) $on   $entry 			  nI $on   $loopback 
    // type of target is $uint<4>
    //  file nic.linked.aa, line 230
    // ($bitcast ($uint<4>) _b0  )
    $constant $W[type_cast_524_wire_constant] : $int<4> := _b0000// 0
    // constant-declarations for phi:  			$phi ethernet_header := 			  nic_rx_to_header $on   $entry ,   $loopback 
    // type of target is $uint<73>
    //  file nic.linked.aa, line 232
    // 			$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b0  ) wkeep buf_position wdata ) (ignore_return ) 
    //  file nic.linked.aa, line 239
    // ($bitcast ($uint<1>) _b0  )
    $constant $W[type_cast_545_wire_constant] : $int<1> := _b0// 0
    // ($bitcast ($uint<1>) _b0  )
    $constant $W[type_cast_547_wire_constant] : $int<1> := _b0// 0
    // 1 
    $constant $W[konst_555_wire_constant] : $int<4> := _b0001// 1
    // block %writeEthernetHeaderToMem%main
    //  file nic.linked.aa, line 224
    // do-while statement  
    //  file nic.linked.aa, line 226
    // (nI <= 1 )
    $intermediate $W[ULE_u4_u1_561_wire] : $int<1>
    // merge-statement  
    //  file nic.linked.aa, line 227
    // 			$phi buf_position := 			  (buf_pointer + 8 ) $on   $entry 			  (buf_position + 8 ) $on   $loopback 
    // type of target is $uint<36>
    //  file nic.linked.aa, line 228
    // (buf_pointer + 8 )
    $intermediate $W[ADD_u36_u36_517_wire] : $int<36>
    // (buf_position + 8 )
    $intermediate $W[ADD_u36_u36_520_wire] : $int<36>
    // buf_position
    // 			$phi I := 			  ($bitcast ($uint<4>) _b0  ) $on   $entry 			  nI $on   $loopback 
    // type of target is $uint<4>
    //  file nic.linked.aa, line 230
    $W[nI_557_525_buffered] : $int<4>
    // I
    $W[I_521] : $int<4>
    // 			$phi ethernet_header := 			  nic_rx_to_header $on   $entry ,   $loopback 
    // type of target is $uint<73>
    //  file nic.linked.aa, line 232
    // nic_rx_to_header
    $W[RPIPE_nic_rx_to_header_528_wire] : $int<73>
    // ethernet_header
    $W[ethernet_header_526] : $int<73>
    // 			$volatile last_bit := ( $slice ethernet_header 72 72 )  $buffering 1
    //  file nic.linked.aa, line 236
    // last_bit
    $W[last_bit_535] : $int<1>
    // 			$volatile wdata := ( $slice ethernet_header 71 8 )  $buffering 1
    //  file nic.linked.aa, line 237
    // wdata
    $W[wdata_539] : $int<64>
    // 			$volatile wkeep := ( $slice ethernet_header 7 0 )  $buffering 1
    //  file nic.linked.aa, line 238
    // wkeep
    $W[wkeep_543] : $int<8>
    // 			$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b0  ) wkeep buf_position wdata ) (ignore_return ) 
    //  file nic.linked.aa, line 239
    // ignore_return
    $W[ignore_return_552] : $int<64>
    // 			$volatile nI := (I + 1 ) $buffering 1
    //  file nic.linked.aa, line 240
    // nI
    $W[nI_557] : $int<4>
    // datapath-instances for block %writeEthernetHeaderToMem%main
    //  file nic.linked.aa, line 224
    // datapath-instances for do-while  
    //  file nic.linked.aa, line 226
    // (nI <= 1 )
    <=[ULE_u4_u1_561_inst] (nI_557 konst_560_wire_constant) (ULE_u4_u1_561_wire)   $flowthrough 
    $delay ULE_u4_u1_561_inst 0
    ==0? [do_while_stmt_511_branch] (ULE_u4_u1_561_wire)
    $flowthrough
    // data-path instances for merge  
    //  file nic.linked.aa, line 227
    // 			$phi buf_position := 			  (buf_pointer + 8 ) $on   $entry 			  (buf_position + 8 ) $on   $loopback 
    // type of target is $uint<36>
    //  file nic.linked.aa, line 228
    // (buf_pointer + 8 )
    +[ADD_u36_u36_517_inst] (buf_pointer konst_516_wire_constant) (ADD_u36_u36_517_wire)   
    $buffering  $out ADD_u36_u36_517_inst ADD_u36_u36_517_wire 1
    $delay ADD_u36_u36_517_inst 1
    // (buf_position + 8 )
    +[ADD_u36_u36_520_inst] (buf_position konst_519_wire_constant) (ADD_u36_u36_520_wire)   
    $buffering  $out ADD_u36_u36_520_inst ADD_u36_u36_520_wire 1
    $delay ADD_u36_u36_520_inst 1
    # $phi [phi_stmt_513] (ADD_u36_u36_517_wire ADD_u36_u36_520_wire) ( buf_position ) 
    // $buffering  $out phi_stmt_513 buf_position 2
    // 			$phi I := 			  ($bitcast ($uint<4>) _b0  ) $on   $entry 			  nI $on   $loopback 
    // type of target is $uint<4>
    //  file nic.linked.aa, line 230
    # := [nI_557_525_buf] (nI_557) (nI_557_525_buffered)    
    $buffering $out nI_557_525_buf nI_557_525_buffered  1
    # $phi [phi_stmt_521] (type_cast_524_wire_constant nI_557_525_buffered) ( I_521 ) 
    // $buffering  $out phi_stmt_521 I_521 2
    // 			$phi ethernet_header := 			  nic_rx_to_header $on   $entry ,   $loopback 
    // type of target is $uint<73>
    //  file nic.linked.aa, line 232
    // nic_rx_to_header
    $ioport $in [RPIPE_nic_rx_to_header_528_inst] (nic_rx_to_header) (RPIPE_nic_rx_to_header_528_wire) 
    $buffering $out RPIPE_nic_rx_to_header_528_inst RPIPE_nic_rx_to_header_528_wire 1
    # := [ssrc_phi_stmt_526] (RPIPE_nic_rx_to_header_528_wire) (ethernet_header_526)    $flowthrough 
    // 			$volatile last_bit := ( $slice ethernet_header 72 72 )  $buffering 1
    //  file nic.linked.aa, line 236
    // ( $slice ethernet_header 72 72 ) 
    [:] [slice_534_inst] (ethernet_header_526 72 72) (last_bit_535)  $flowthrough
    $delay slice_534_inst 0
    // 			$volatile wdata := ( $slice ethernet_header 71 8 )  $buffering 1
    //  file nic.linked.aa, line 237
    // ( $slice ethernet_header 71 8 ) 
    [:] [slice_538_inst] (ethernet_header_526 71 8) (wdata_539)  $flowthrough
    $delay slice_538_inst 0
    // 			$volatile wkeep := ( $slice ethernet_header 7 0 )  $buffering 1
    //  file nic.linked.aa, line 238
    // ( $slice ethernet_header 7 0 ) 
    [:] [slice_542_inst] (ethernet_header_526 7 0) (wkeep_543)  $flowthrough
    $delay slice_542_inst 0
    // 			$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b0  ) wkeep buf_position wdata ) (ignore_return ) 
    //  file nic.linked.aa, line 239
    $call [call_stmt_552_call] $module accessMemory(type_cast_545_wire_constant type_cast_547_wire_constant wkeep_543 buf_position wdata_539) (ignore_return_552)  
    $delay call_stmt_552_call 4
    $buffering  $in call_stmt_552_call type_cast_545_wire_constant 1
    $buffering  $in call_stmt_552_call type_cast_547_wire_constant 1
    $buffering  $in call_stmt_552_call wkeep_543 1
    $buffering  $in call_stmt_552_call buf_position 1
    $buffering  $in call_stmt_552_call wdata_539 1
    $buffering  $out call_stmt_552_call ignore_return_552 1
    // 			$volatile nI := (I + 1 ) $buffering 1
    //  file nic.linked.aa, line 240
    // (I + 1 )
    +[ADD_u4_u4_556_inst] (I_521 konst_555_wire_constant) (nI_557)   $flowthrough 
    $delay ADD_u4_u4_556_inst 0
  }
  // end data-path
  // CP-DP links for do-while  do_while_stmt_511
  //  file nic.linked.aa, line 226
  phi_stmt_513 <=> (branch_block_stmt_510/do_while_stmt_511/do_while_stmt_511_loop_body/phi_stmt_513_entry_sample_req branch_block_stmt_510/do_while_stmt_511/do_while_stmt_511_loop_body/phi_stmt_513_loopback_sample_req) (branch_block_stmt_510/do_while_stmt_511/do_while_stmt_511_loop_body/phi_stmt_513_phi_mux_ack)
  // (buf_pointer + 8 )
  // buf_pointer
  ADD_u36_u36_517_inst <=> (branch_block_stmt_510/do_while_stmt_511/do_while_stmt_511_loop_body/ADD_u36_u36_517_Sample/rr branch_block_stmt_510/do_while_stmt_511/do_while_stmt_511_loop_body/ADD_u36_u36_517_Update/cr) (branch_block_stmt_510/do_while_stmt_511/do_while_stmt_511_loop_body/ADD_u36_u36_517_Sample/ra branch_block_stmt_510/do_while_stmt_511/do_while_stmt_511_loop_body/ADD_u36_u36_517_Update/ca)
  // (buf_position + 8 )
  // buf_position
  ADD_u36_u36_520_inst <=> (branch_block_stmt_510/do_while_stmt_511/do_while_stmt_511_loop_body/ADD_u36_u36_520_Sample/rr branch_block_stmt_510/do_while_stmt_511/do_while_stmt_511_loop_body/ADD_u36_u36_520_Update/cr) (branch_block_stmt_510/do_while_stmt_511/do_while_stmt_511_loop_body/ADD_u36_u36_520_Sample/ra branch_block_stmt_510/do_while_stmt_511/do_while_stmt_511_loop_body/ADD_u36_u36_520_Update/ca)
  phi_stmt_521 <=> (branch_block_stmt_510/do_while_stmt_511/do_while_stmt_511_loop_body/phi_stmt_521_entry_sample_req branch_block_stmt_510/do_while_stmt_511/do_while_stmt_511_loop_body/phi_stmt_521_loopback_sample_req) (branch_block_stmt_510/do_while_stmt_511/do_while_stmt_511_loop_body/phi_stmt_521_phi_mux_ack)
  nI_557_525_buf <=> (branch_block_stmt_510/do_while_stmt_511/do_while_stmt_511_loop_body/R_nI_525_Sample/req branch_block_stmt_510/do_while_stmt_511/do_while_stmt_511_loop_body/R_nI_525_Update/req) (branch_block_stmt_510/do_while_stmt_511/do_while_stmt_511_loop_body/R_nI_525_Sample/ack branch_block_stmt_510/do_while_stmt_511/do_while_stmt_511_loop_body/R_nI_525_Update/ack)
  // nic_rx_to_header
  RPIPE_nic_rx_to_header_528_inst <=> (branch_block_stmt_510/do_while_stmt_511/do_while_stmt_511_loop_body/RPIPE_nic_rx_to_header_528_Sample/rr branch_block_stmt_510/do_while_stmt_511/do_while_stmt_511_loop_body/RPIPE_nic_rx_to_header_528_Update/cr) (branch_block_stmt_510/do_while_stmt_511/do_while_stmt_511_loop_body/RPIPE_nic_rx_to_header_528_Sample/ra branch_block_stmt_510/do_while_stmt_511/do_while_stmt_511_loop_body/RPIPE_nic_rx_to_header_528_Update/ca)
  // 			$volatile last_bit := ( $slice ethernet_header 72 72 )  $buffering 1
  //  file nic.linked.aa, line 236
  // ethernet_header
  // 			$volatile wdata := ( $slice ethernet_header 71 8 )  $buffering 1
  //  file nic.linked.aa, line 237
  // ethernet_header
  // 			$volatile wkeep := ( $slice ethernet_header 7 0 )  $buffering 1
  //  file nic.linked.aa, line 238
  // ethernet_header
  // 			$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b0  ) wkeep buf_position wdata ) (ignore_return ) 
  //  file nic.linked.aa, line 239
  // wkeep
  // buf_position
  // wdata
  call_stmt_552_call <=> (branch_block_stmt_510/do_while_stmt_511/do_while_stmt_511_loop_body/call_stmt_552_Sample/crr branch_block_stmt_510/do_while_stmt_511/do_while_stmt_511_loop_body/call_stmt_552_Update/ccr) (branch_block_stmt_510/do_while_stmt_511/do_while_stmt_511_loop_body/call_stmt_552_Sample/cra branch_block_stmt_510/do_while_stmt_511/do_while_stmt_511_loop_body/call_stmt_552_Update/cca)
  // 			$volatile nI := (I + 1 ) $buffering 1
  //  file nic.linked.aa, line 240
  // (I + 1 )
  // I
  // (nI <= 1 )
  // nI
  do_while_stmt_511_branch <=> (branch_block_stmt_510/do_while_stmt_511/do_while_stmt_511_loop_body/condition_evaluated) (branch_block_stmt_510/do_while_stmt_511/loop_exit/ack branch_block_stmt_510/do_while_stmt_511/loop_taken/ack)
  $attribute delay => "4"
}
$module [writePayloadToMem] 
{
  $in base_buf_pointer:$int<36>
  // can point into 
  buf_pointer:$int<36>
  // can point into 
  $out packet_size_32:$int<8>
  // can point into 
  bad_packet_identifier:$int<1>
  // can point into 
  last_keep:$int<8>
  // can point into 
  // pipe-declarations for block %writePayloadToMem
  //  file nic.linked.aa, line 245
  // pipe-declarations for block %writePayloadToMem%loop
  //  file nic.linked.aa, line 250
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    <>[branch_block_stmt_570] // Branch Block  file nic.linked.aa, line 250
    {
      $P [branch_block_stmt_570__entry__]
      branch_block_stmt_570__entry__ <-| ($entry)
      $P [branch_block_stmt_570__exit__]
      branch_block_stmt_570__exit__ |-> ($exit)
      $P [do_while_stmt_571__entry__] 
      $P [do_while_stmt_571__exit__] 
      // do-while-statement  
      //  file nic.linked.aa, line 252
      <o> [do_while_stmt_571]  $depth 15 $buffering 1 
      {
        $P[do_while_stmt_571__entry__] 
        $P[do_while_stmt_571__exit__] 
        $P[loop_back] 
        $P[condition_done] 
        $P[loop_body_done] 
        $pipeline [do_while_stmt_571_loop_body] 
        {
          // Pipelined!
          $T[back_edge_to_loop_body] 
          $T[first_time_through_loop_body] 
          $T[loop_body_start] 
          $T[condition_evaluated] 
          $transitionmerge [entry_tmerge] (back_edge_to_loop_body first_time_through_loop_body) (loop_body_start)
          $entry <-& (loop_body_start)
          $T[aggregated_phi_sample_req] 
          $T[aggregated_phi_sample_ack] 
          $T[aggregated_phi_update_req] 
          $T[aggregated_phi_update_ack] 
          // do not loop-back unless all phi's have used up their triggering tokens.
          condition_evaluated <-& (aggregated_phi_update_ack)
          aggregated_phi_sample_req o<-& (aggregated_phi_update_ack 0)
          // start:  PHI statement phi_stmt_573
          // 			$phi buf_position := 			  (buf_position + 8 ) $on   $loopback 			  (buf_pointer + 8 ) $on   $entry 
          // type of target is $uint<36>
          $T[phi_stmt_573_sample_start_] 
          $T[phi_stmt_573_sample_completed_] 
          $T[phi_stmt_573_update_start_] 
          $T[phi_stmt_573_update_completed_] 
          $T[phi_stmt_573_sample_start__ps] 
          phi_stmt_573_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_573_sample_completed__ps] 
          phi_stmt_573_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_573_update_start__ps] 
          phi_stmt_573_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_573_update_completed__ps] 
          phi_stmt_573_update_completed_ <-& (phi_stmt_573_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_573_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_573_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_573_update_start_)
          $T[phi_stmt_573_loopback_trigger] 
          phi_stmt_573_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_573_loopback_sample_req] 
          $T[phi_stmt_573_loopback_sample_req_ps] 
          phi_stmt_573_loopback_sample_req <-& (phi_stmt_573_loopback_sample_req_ps)
          phi_stmt_573_loopback_sample_req &-> ($null)
          $T[phi_stmt_573_entry_trigger] 
          phi_stmt_573_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_573_entry_sample_req] 
          $T[phi_stmt_573_entry_sample_req_ps] 
          phi_stmt_573_entry_sample_req <-& (phi_stmt_573_entry_sample_req_ps)
          phi_stmt_573_entry_sample_req &-> ($null)
          phi_stmt_573_update_start_ o<-& (phi_stmt_573_update_completed_ 0)
          phi_stmt_573_sample_start_ o<-& (phi_stmt_573_sample_completed_ 1)
          $T[phi_stmt_573_merged_reqs] 
          $T[phi_stmt_573_phi_mux_ack] 
          $T[phi_stmt_573_phi_mux_ack_ps] 
          phi_stmt_573_phi_mux_ack_ps <-& (phi_stmt_573_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_573_update_completed_)
          $T[ADD_u36_u36_577_sample_start__ps] 
          $T[ADD_u36_u36_577_sample_completed__ps] 
          $T[ADD_u36_u36_577_update_start__ps] 
          $T[ADD_u36_u36_577_update_completed__ps] 
          // source expression in Phi alternative 0
          // (buf_pointer + 8 )
          $T[ADD_u36_u36_577_sample_start_] 
          $T[ADD_u36_u36_577_sample_completed_] 
          $T[ADD_u36_u36_577_update_start_] 
          $T[ADD_u36_u36_577_update_completed_] 
          // buf_pointer
          // start: Forward dependencies from buf_pointer to transition ADD_u36_u36_577_sample_start_
          // done: Forward dependencies from buf_pointer to transition ADD_u36_u36_577_sample_start_
          ;;[ADD_u36_u36_577_Sample] 
          {
            // binary expression 
            $T [rr] $T [ra]  // (split) binary operation 
          }
          ;;[ADD_u36_u36_577_Update] 
          {
            // binary expression 
            $T [cr] $T [ca] // (split) binary operation 
          }
          ADD_u36_u36_577_sample_start_ &-> (ADD_u36_u36_577_Sample)
          ADD_u36_u36_577_sample_completed_ <-& (ADD_u36_u36_577_Sample)
          ADD_u36_u36_577_sample_completed_ &-> ($null)
          ADD_u36_u36_577_update_start_ &-> (ADD_u36_u36_577_Update)
          ADD_u36_u36_577_update_completed_ <-& (ADD_u36_u36_577_Update)
          // RAW reenables for buf_pointer
          // self-release: 
          ADD_u36_u36_577_sample_start_ o<-& (ADD_u36_u36_577_sample_completed_ 1)
          $null &-> (ADD_u36_u36_577_update_start_)
          ADD_u36_u36_577_update_start_ o<-& (ADD_u36_u36_577_update_completed_ 0)
          // Phi start dependency
          ADD_u36_u36_577_sample_start_ <-& (ADD_u36_u36_577_sample_start__ps)
          ADD_u36_u36_577_update_start_ <-& (ADD_u36_u36_577_update_start__ps)
          // RAW reenables for (buf_pointer + 8 )
          // producer  and  consumer are both determined by PHI statements.
          // Phi complete dependency.
          ADD_u36_u36_577_sample_completed__ps <-& (ADD_u36_u36_577_sample_completed_)
          ADD_u36_u36_577_update_completed__ps <-& (ADD_u36_u36_577_update_completed_)
          $T[ADD_u36_u36_580_sample_start__ps] 
          $T[ADD_u36_u36_580_sample_completed__ps] 
          $T[ADD_u36_u36_580_update_start__ps] 
          $T[ADD_u36_u36_580_update_completed__ps] 
          // source expression in Phi alternative 1
          // (buf_position + 8 )
          $T[ADD_u36_u36_580_sample_start_] 
          $T[ADD_u36_u36_580_sample_completed_] 
          $T[ADD_u36_u36_580_update_start_] 
          $T[ADD_u36_u36_580_update_completed_] 
          // buf_position
          // start: Forward dependencies from buf_position to transition ADD_u36_u36_580_sample_start_
          // done: Forward dependencies from buf_position to transition ADD_u36_u36_580_sample_start_
          ;;[ADD_u36_u36_580_Sample] 
          {
            // binary expression 
            $T [rr] $T [ra]  // (split) binary operation 
          }
          ;;[ADD_u36_u36_580_Update] 
          {
            // binary expression 
            $T [cr] $T [ca] // (split) binary operation 
          }
          ADD_u36_u36_580_sample_start_ &-> (ADD_u36_u36_580_Sample)
          ADD_u36_u36_580_sample_completed_ <-& (ADD_u36_u36_580_Sample)
          ADD_u36_u36_580_sample_completed_ &-> ($null)
          ADD_u36_u36_580_update_start_ &-> (ADD_u36_u36_580_Update)
          ADD_u36_u36_580_update_completed_ <-& (ADD_u36_u36_580_Update)
          // RAW reenables for buf_position
          // self-release: 
          ADD_u36_u36_580_sample_start_ o<-& (ADD_u36_u36_580_sample_completed_ 1)
          $null &-> (ADD_u36_u36_580_update_start_)
          ADD_u36_u36_580_update_start_ o<-& (ADD_u36_u36_580_update_completed_ 0)
          // Phi start dependency
          ADD_u36_u36_580_sample_start_ <-& (ADD_u36_u36_580_sample_start__ps)
          ADD_u36_u36_580_update_start_ <-& (ADD_u36_u36_580_update_start__ps)
          // RAW reenables for (buf_position + 8 )
          // producer  and  consumer are both determined by PHI statements.
          // Phi complete dependency.
          ADD_u36_u36_580_sample_completed__ps <-& (ADD_u36_u36_580_sample_completed_)
          ADD_u36_u36_580_update_completed__ps <-& (ADD_u36_u36_580_update_completed_)
          $phisequencer [ phi_stmt_573_phi_seq] : 
          phi_stmt_573_entry_trigger ADD_u36_u36_577_sample_start__ps ADD_u36_u36_577_sample_completed__ps ADD_u36_u36_577_update_start__ps ADD_u36_u36_577_update_completed__ps phi_stmt_573_loopback_trigger ADD_u36_u36_580_sample_start__ps ADD_u36_u36_580_sample_completed__ps ADD_u36_u36_580_update_start__ps ADD_u36_u36_580_update_completed__ps :
          phi_stmt_573_sample_start__ps phi_stmt_573_sample_completed__ps phi_stmt_573_update_start__ps phi_stmt_573_update_completed__ps :
          phi_stmt_573_entry_sample_req_ps phi_stmt_573_loopback_sample_req_ps : 
          phi_stmt_573_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_573
          // start:  single source PHI statement phi_stmt_581
          // 			$phi payload_data := 			  nic_rx_to_packet $on   $entry ,   $loopback 
          // type of target is $uint<73>
          $T[phi_stmt_581_sample_start_] 
          $T[phi_stmt_581_sample_completed_] 
          $T[phi_stmt_581_update_start_] 
          $T[phi_stmt_581_update_completed_] 
          aggregated_phi_sample_req <-& (phi_stmt_581_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_581_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_581_update_start_)
          // non-implicit source expression in single-source phi
          // nic_rx_to_packet
          $T[RPIPE_nic_rx_to_packet_583_sample_start_] 
          $T[RPIPE_nic_rx_to_packet_583_sample_completed_] 
          $T[RPIPE_nic_rx_to_packet_583_update_start_] 
          $T[RPIPE_nic_rx_to_packet_583_update_completed_] 
          ;;[RPIPE_nic_rx_to_packet_583_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_nic_rx_to_packet_583_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_nic_rx_to_packet_583_sample_start_ &-> (RPIPE_nic_rx_to_packet_583_Sample)
          RPIPE_nic_rx_to_packet_583_sample_completed_ <-& (RPIPE_nic_rx_to_packet_583_Sample)
          RPIPE_nic_rx_to_packet_583_update_start_ <-& (RPIPE_nic_rx_to_packet_583_sample_completed_)
          RPIPE_nic_rx_to_packet_583_update_start_ &-> (RPIPE_nic_rx_to_packet_583_Update)
          RPIPE_nic_rx_to_packet_583_update_completed_ <-& (RPIPE_nic_rx_to_packet_583_Update)
          RPIPE_nic_rx_to_packet_583_sample_start_ o<-& (RPIPE_nic_rx_to_packet_583_update_completed_ 0)
          // RAW reenables for nic_rx_to_packet
          // producer  and  consumer are both determined by PHI statements.
          aggregated_phi_sample_req &-> (RPIPE_nic_rx_to_packet_583_sample_start_)
          aggregated_phi_sample_ack <-& (RPIPE_nic_rx_to_packet_583_sample_completed_)
          aggregated_phi_update_req &-> (RPIPE_nic_rx_to_packet_583_update_start_)
          phi_stmt_581_update_completed_ <-& (RPIPE_nic_rx_to_packet_583_update_completed_)
          aggregated_phi_update_ack <-& (phi_stmt_581_update_completed_)
          // done: PHI Statement phi_stmt_581
          // start: WAR dependencies for last_bit
          // done: WAR dependencies for last_bit
          // start:  			$volatile last_bit := ( $slice payload_data 72 72 )  $buffering 1
          //  file nic.linked.aa, line 260
          // volatile! 
          // Source expression
          // ( $slice payload_data 72 72 ) 
          // payload_data
          // Target expression
          // (as target) last_bit
          // start: WAR dependencies for last_bit
          // done: WAR dependencies for last_bit
          // end:  			$volatile last_bit := ( $slice payload_data 72 72 )  $buffering 1
          // start: WAR dependencies for wdata
          // done: WAR dependencies for wdata
          // start:  			$volatile wdata := ( $slice payload_data 71 8 )  $buffering 1
          //  file nic.linked.aa, line 261
          // volatile! 
          // Source expression
          // ( $slice payload_data 71 8 ) 
          // payload_data
          // Target expression
          // (as target) wdata
          // start: WAR dependencies for wdata
          // done: WAR dependencies for wdata
          // end:  			$volatile wdata := ( $slice payload_data 71 8 )  $buffering 1
          // start: WAR dependencies for wkeep
          // done: WAR dependencies for wkeep
          // start:  			$volatile wkeep := ( $slice payload_data 7 0 )  $buffering 1
          //  file nic.linked.aa, line 262
          // volatile! 
          // Source expression
          // ( $slice payload_data 7 0 ) 
          // payload_data
          // Target expression
          // (as target) wkeep
          // start: WAR dependencies for wkeep
          // done: WAR dependencies for wkeep
          // end:  			$volatile wkeep := ( $slice payload_data 7 0 )  $buffering 1
          // start: 			$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b0  ) wkeep buf_position wdata ) (ignore_return ) 
          //  file nic.linked.aa, line 263
          $T[call_stmt_605_sample_start_] 
          $T[call_stmt_605_sample_completed_] 
          $T[call_stmt_605_update_start_] 
          $T[call_stmt_605_update_completed_] 
          // Call input argument 0
          // Call input argument 1
          // Call input argument 2
          // wkeep
          // Call input argument 3
          // buf_position
          // Call input argument 4
          // wdata
          // start: Forward dependencies from wkeep to transition call_stmt_605_sample_start_
          call_stmt_605_sample_start_ <-& (phi_stmt_581_update_completed_)
          // done: Forward dependencies from wkeep to transition call_stmt_605_sample_start_
          // RAW reenables for wkeep
          phi_stmt_581_update_start_ o<-& (call_stmt_605_sample_completed_ 0)
          // start: Forward dependencies from buf_position to transition call_stmt_605_sample_start_
          call_stmt_605_sample_start_ <-& (phi_stmt_573_update_completed_)
          // done: Forward dependencies from buf_position to transition call_stmt_605_sample_start_
          // RAW reenables for buf_position
          phi_stmt_573_update_start_ o<-& (call_stmt_605_sample_completed_ 0)
          // start: Forward dependencies from wdata to transition call_stmt_605_sample_start_
          call_stmt_605_sample_start_ <-& (phi_stmt_581_update_completed_)
          // done: Forward dependencies from wdata to transition call_stmt_605_sample_start_
          // RAW reenables for wdata
          phi_stmt_581_update_start_ o<-& (call_stmt_605_sample_completed_ 0)
          ;;[call_stmt_605_Sample] 
          {
            $T [crr] $T [cra] 
          }
          ;;[call_stmt_605_Update] 
          {
            $T [ccr] $T [cca] 
          }
          call_stmt_605_sample_start_ &-> (call_stmt_605_Sample)
          call_stmt_605_sample_completed_ <-& (call_stmt_605_Sample)
          call_stmt_605_sample_completed_ &-> ($null)
          call_stmt_605_update_start_ &-> (call_stmt_605_Update)
          call_stmt_605_update_completed_ <-& (call_stmt_605_Update)
          // Call output argument 0
          // (as target) ignore_return
          // self-release: 
          call_stmt_605_sample_start_ o<-& (call_stmt_605_sample_completed_ 1)
          $null &-> (call_stmt_605_update_start_)
          call_stmt_605_update_start_ o<-& (call_stmt_605_update_completed_ 0)
          // start: WAR dependencies for ignore_return
          // done: WAR dependencies for ignore_return
          // end: 			$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b0  ) wkeep buf_position wdata ) (ignore_return ) 
          // ( ~ last_bit )
          // last_bit
          $T [loop_body_delay_to_condition_start] $delay
          loop_body_start &-> (loop_body_delay_to_condition_start)
          loop_body_delay_to_condition_start &-> (condition_evaluated)
          // start: Forward dependencies from ( ~ last_bit ) to transition condition_evaluated
          condition_evaluated <-& (phi_stmt_581_update_completed_)
          // done: Forward dependencies from ( ~ last_bit ) to transition condition_evaluated
          condition_evaluated &-> ($null)
          // load-store dependencies..
          // pipe read/write dependencies for pipe MEMORY_TO_NIC_RESPONSE
          // read-dependencies for pipe MEMORY_TO_NIC_RESPONSE
          // write-dependencies for pipe MEMORY_TO_NIC_RESPONSE
          // signal write dependencies for MEMORY_TO_NIC_RESPONSE
          // pipe read/write dependencies for pipe NIC_TO_MEMORY_REQUEST
          // read-dependencies for pipe NIC_TO_MEMORY_REQUEST
          // write-dependencies for pipe NIC_TO_MEMORY_REQUEST
          // signal write dependencies for NIC_TO_MEMORY_REQUEST
          // pipe read/write dependencies for pipe nic_rx_to_packet
          // read-dependencies for pipe nic_rx_to_packet
          // write-dependencies for pipe nic_rx_to_packet
          // signal write dependencies for nic_rx_to_packet
        }
        ( first_time_through_loop_body  back_edge_to_loop_body) 
        ( condition_evaluated )
        ;; [loop_exit] 
        {
          $T [ack] 
        }
        ;; [loop_taken] 
        {
          $T [ack] 
        }
        do_while_stmt_571__entry__ <-| ($entry)
        loop_body_done <-| ( do_while_stmt_571_loop_body ) 
        condition_done |-> (loop_exit loop_taken)
        do_while_stmt_571__exit__ |-> ($exit)
        $bind condition_done <= do_while_stmt_571_loop_body : condition_evaluated
        $bind do_while_stmt_571__entry__  => do_while_stmt_571_loop_body : first_time_through_loop_body 
        $bind loop_back  => do_while_stmt_571_loop_body : back_edge_to_loop_body 
        $terminate (loop_exit loop_taken loop_body_done) (loop_back do_while_stmt_571__exit__)
      }
      do_while_stmt_571__entry__ |-> (do_while_stmt_571)
      do_while_stmt_571__exit__ <-| (do_while_stmt_571)
      do_while_stmt_571__entry__ <-| (branch_block_stmt_570__entry__)
      do_while_stmt_571__exit__ |-> (branch_block_stmt_570__exit__)
    }
    ::[assign_stmt_618_to_assign_stmt_634] 
    {
      // start: WAR dependencies for bad_packet_identifier
      // ignored out-of-scope w_root 			$phi payload_data := 			  nic_rx_to_packet $on   $entry ,   $loopback 
      // type of target is $uint<73>
      // done: WAR dependencies for bad_packet_identifier
      // start:  	$volatile bad_packet_identifier := ((tdata == BAD_PACKET_DATA) & (tkeep == 0 )) $buffering 1
      //  file nic.linked.aa, line 267
      // volatile! 
      // Source expression
      // ((tdata == BAD_PACKET_DATA) & (tkeep == 0 ))
      // (tdata == BAD_PACKET_DATA)
      // tdata
      // (tkeep == 0 )
      // tkeep
      // Target expression
      // (as target) bad_packet_identifier
      // bad_packet_identifier
      // write to interface object
      // start: WAR dependencies for bad_packet_identifier
      // ignored out-of-scope w_root 			$phi payload_data := 			  nic_rx_to_packet $on   $entry ,   $loopback 
      // type of target is $uint<73>
      // done: WAR dependencies for bad_packet_identifier
      // bad_packet_identifier
      // write to interface object
      // end:  	$volatile bad_packet_identifier := ((tdata == BAD_PACKET_DATA) & (tkeep == 0 )) $buffering 1
      // start: WAR dependencies for packet_size_8
      // ignored out-of-scope w_root  base_buf_pointer : $uint<36> 
      // ignored out-of-scope w_root 			$phi buf_position := 			  (buf_position + 8 ) $on   $loopback 			  (buf_pointer + 8 ) $on   $entry 
      // type of target is $uint<36>
      // done: WAR dependencies for packet_size_8
      // start:  	$volatile packet_size_8 := ($bitcast ($uint<8>) ((buf_position - base_buf_pointer) + 1 ) ) $buffering 1
      //  file nic.linked.aa, line 268
      // volatile! 
      // Source expression
      // ($bitcast ($uint<8>) ((buf_position - base_buf_pointer) + 1 ) )
      // ((buf_position - base_buf_pointer) + 1 )
      // (buf_position - base_buf_pointer)
      // buf_position
      // base_buf_pointer
      // Target expression
      // (as target) packet_size_8
      // start: WAR dependencies for packet_size_8
      // ignored out-of-scope w_root  base_buf_pointer : $uint<36> 
      // ignored out-of-scope w_root 			$phi buf_position := 			  (buf_position + 8 ) $on   $loopback 			  (buf_pointer + 8 ) $on   $entry 
      // type of target is $uint<36>
      // done: WAR dependencies for packet_size_8
      // end:  	$volatile packet_size_8 := ($bitcast ($uint<8>) ((buf_position - base_buf_pointer) + 1 ) ) $buffering 1
      // start: WAR dependencies for packet_size_32
      // ignored out-of-scope w_root  base_buf_pointer : $uint<36> 
      // ignored out-of-scope w_root 			$phi buf_position := 			  (buf_position + 8 ) $on   $loopback 			  (buf_pointer + 8 ) $on   $entry 
      // type of target is $uint<36>
      // done: WAR dependencies for packet_size_32
      // start:  	$volatile packet_size_32 := (packet_size_8 << 2 ) $buffering 1
      //  file nic.linked.aa, line 269
      // volatile! 
      // Source expression
      // (packet_size_8 << 2 )
      // packet_size_8
      // Target expression
      // (as target) packet_size_32
      // packet_size_32
      // write to interface object
      // start: WAR dependencies for packet_size_32
      // ignored out-of-scope w_root  base_buf_pointer : $uint<36> 
      // ignored out-of-scope w_root 			$phi buf_position := 			  (buf_position + 8 ) $on   $loopback 			  (buf_pointer + 8 ) $on   $entry 
      // type of target is $uint<36>
      // done: WAR dependencies for packet_size_32
      // packet_size_32
      // write to interface object
      // end:  	$volatile packet_size_32 := (packet_size_8 << 2 ) $buffering 1
      // start: WAR dependencies for last_keep
      // ignored out-of-scope w_root 			$phi payload_data := 			  nic_rx_to_packet $on   $entry ,   $loopback 
      // type of target is $uint<73>
      // done: WAR dependencies for last_keep
      // start:  	$volatile last_keep := tkeep $buffering 1
      //  file nic.linked.aa, line 270
      // volatile! 
      // Source expression
      // tkeep
      // Target expression
      // (as target) last_keep
      // last_keep
      // write to interface object
      // start: WAR dependencies for last_keep
      // ignored out-of-scope w_root 			$phi payload_data := 			  nic_rx_to_packet $on   $entry ,   $loopback 
      // type of target is $uint<73>
      // done: WAR dependencies for last_keep
      // last_keep
      // write to interface object
      // end:  	$volatile last_keep := tkeep $buffering 1
      // load-store dependencies..
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %writePayloadToMem%loop%
    //  file nic.linked.aa, line 254
    // constant-object-declarations for block %writePayloadToMem%loop
    //  file nic.linked.aa, line 250
    // constant-object-declarations for block %writePayloadToMem
    //  file nic.linked.aa, line 245
    // constant-declarations for block %writePayloadToMem%loop
    //  file nic.linked.aa, line 250
    // do-while statement  
    //  file nic.linked.aa, line 252
    // constant-declarations for block %writePayloadToMem%loop%
    //  file nic.linked.aa, line 254
    // constant-declarations for phi:  			$phi buf_position := 			  (buf_position + 8 ) $on   $loopback 			  (buf_pointer + 8 ) $on   $entry 
    // type of target is $uint<36>
    //  file nic.linked.aa, line 255
    // 8 
    $constant $W[konst_576_wire_constant] : $int<36> := _b000000000000000000000000000000001000// 8
    // 8 
    $constant $W[konst_579_wire_constant] : $int<36> := _b000000000000000000000000000000001000// 8
    // constant-declarations for phi:  			$phi payload_data := 			  nic_rx_to_packet $on   $entry ,   $loopback 
    // type of target is $uint<73>
    //  file nic.linked.aa, line 257
    // 			$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b0  ) wkeep buf_position wdata ) (ignore_return ) 
    //  file nic.linked.aa, line 263
    // ($bitcast ($uint<1>) _b0  )
    $constant $W[type_cast_598_wire_constant] : $int<1> := _b0// 0
    // ($bitcast ($uint<1>) _b0  )
    $constant $W[type_cast_600_wire_constant] : $int<1> := _b0// 0
    // BAD_PACKET_DATA
    $constant $W[R_BAD_PACKET_DATA_612_wire_constant] : $int<64> := _b1111111111111111111111111111111111111111111111111111111111111111// -1
    // 0 
    $constant $W[konst_615_wire_constant] : $int<8> := _b00000000// 0
    // 1 
    $constant $W[konst_623_wire_constant] : $int<36> := _b000000000000000000000000000000000001// 1
    // 2 
    $constant $W[konst_629_wire_constant] : $int<8> := _b00000010// 2
    // block %writePayloadToMem%loop
    //  file nic.linked.aa, line 250
    // do-while statement  
    //  file nic.linked.aa, line 252
    // ( ~ last_bit )
    $intermediate $W[NOT_u1_u1_608_wire] : $int<1>
    // merge-statement  
    //  file nic.linked.aa, line 254
    // 			$phi buf_position := 			  (buf_position + 8 ) $on   $loopback 			  (buf_pointer + 8 ) $on   $entry 
    // type of target is $uint<36>
    //  file nic.linked.aa, line 255
    // (buf_pointer + 8 )
    $intermediate $W[ADD_u36_u36_577_wire] : $int<36>
    // (buf_position + 8 )
    $intermediate $W[ADD_u36_u36_580_wire] : $int<36>
    // buf_position
    $W[buf_position_573] : $int<36>
    // 			$phi payload_data := 			  nic_rx_to_packet $on   $entry ,   $loopback 
    // type of target is $uint<73>
    //  file nic.linked.aa, line 257
    // nic_rx_to_packet
    $W[RPIPE_nic_rx_to_packet_583_wire] : $int<73>
    // payload_data
    $W[payload_data_581] : $int<73>
    // 			$volatile last_bit := ( $slice payload_data 72 72 )  $buffering 1
    //  file nic.linked.aa, line 260
    // last_bit
    $W[last_bit_588] : $int<1>
    // 			$volatile wdata := ( $slice payload_data 71 8 )  $buffering 1
    //  file nic.linked.aa, line 261
    // wdata
    $W[wdata_592] : $int<64>
    // 			$volatile wkeep := ( $slice payload_data 7 0 )  $buffering 1
    //  file nic.linked.aa, line 262
    // wkeep
    $W[wkeep_596] : $int<8>
    // 			$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b0  ) wkeep buf_position wdata ) (ignore_return ) 
    //  file nic.linked.aa, line 263
    // ignore_return
    $W[ignore_return_605] : $int<64>
    // 	$volatile bad_packet_identifier := ((tdata == BAD_PACKET_DATA) & (tkeep == 0 )) $buffering 1
    //  file nic.linked.aa, line 267
    // (tdata == BAD_PACKET_DATA)
    $intermediate $W[EQ_u64_u1_613_wire] : $int<1>
    // (tkeep == 0 )
    $intermediate $W[EQ_u8_u1_616_wire] : $int<1>
    // bad_packet_identifier
    // 	$volatile packet_size_8 := ($bitcast ($uint<8>) ((buf_position - base_buf_pointer) + 1 ) ) $buffering 1
    //  file nic.linked.aa, line 268
    // (buf_position - base_buf_pointer)
    $intermediate $W[SUB_u36_u36_622_wire] : $int<36>
    // ((buf_position - base_buf_pointer) + 1 )
    $intermediate $W[ADD_u36_u36_624_wire] : $int<36>
    // packet_size_8
    $W[packet_size_8_626] : $int<8>
    // 	$volatile packet_size_32 := (packet_size_8 << 2 ) $buffering 1
    //  file nic.linked.aa, line 269
    // packet_size_32
    // 	$volatile last_keep := tkeep $buffering 1
    //  file nic.linked.aa, line 270
    // last_keep
    // datapath-instances for block %writePayloadToMem%loop
    //  file nic.linked.aa, line 250
    // datapath-instances for do-while  
    //  file nic.linked.aa, line 252
    // ( ~ last_bit )
    ~ [NOT_u1_u1_608_inst] (last_bit_588) (NOT_u1_u1_608_wire)   $flowthrough
    $delay NOT_u1_u1_608_inst 0
    ==0? [do_while_stmt_571_branch] (NOT_u1_u1_608_wire)
    $flowthrough
    // data-path instances for merge  
    //  file nic.linked.aa, line 254
    // 			$phi buf_position := 			  (buf_position + 8 ) $on   $loopback 			  (buf_pointer + 8 ) $on   $entry 
    // type of target is $uint<36>
    //  file nic.linked.aa, line 255
    // (buf_pointer + 8 )
    +[ADD_u36_u36_577_inst] (buf_pointer konst_576_wire_constant) (ADD_u36_u36_577_wire)    $fullrate
    $buffering  $out ADD_u36_u36_577_inst ADD_u36_u36_577_wire 1
    $delay ADD_u36_u36_577_inst 1
    // (buf_position + 8 )
    +[ADD_u36_u36_580_inst] (buf_position_573 konst_579_wire_constant) (ADD_u36_u36_580_wire)    $fullrate
    $buffering  $out ADD_u36_u36_580_inst ADD_u36_u36_580_wire 1
    $delay ADD_u36_u36_580_inst 1
    # $phi [phi_stmt_573] (ADD_u36_u36_577_wire ADD_u36_u36_580_wire) ( buf_position_573 ) $fullrate
    // $buffering  $out phi_stmt_573 buf_position_573 2
    // 			$phi payload_data := 			  nic_rx_to_packet $on   $entry ,   $loopback 
    // type of target is $uint<73>
    //  file nic.linked.aa, line 257
    // nic_rx_to_packet
    $ioport $in [RPIPE_nic_rx_to_packet_583_inst] (nic_rx_to_packet) (RPIPE_nic_rx_to_packet_583_wire)  $fullrate 
    $buffering $out RPIPE_nic_rx_to_packet_583_inst RPIPE_nic_rx_to_packet_583_wire 1
    # := [ssrc_phi_stmt_581] (RPIPE_nic_rx_to_packet_583_wire) (payload_data_581)    $flowthrough 
    // 			$volatile last_bit := ( $slice payload_data 72 72 )  $buffering 1
    //  file nic.linked.aa, line 260
    // ( $slice payload_data 72 72 ) 
    [:] [slice_587_inst] (payload_data_581 72 72) (last_bit_588)  $flowthrough
    $delay slice_587_inst 0
    // 			$volatile wdata := ( $slice payload_data 71 8 )  $buffering 1
    //  file nic.linked.aa, line 261
    // ( $slice payload_data 71 8 ) 
    [:] [slice_591_inst] (payload_data_581 71 8) (wdata_592)  $flowthrough
    $delay slice_591_inst 0
    // 			$volatile wkeep := ( $slice payload_data 7 0 )  $buffering 1
    //  file nic.linked.aa, line 262
    // ( $slice payload_data 7 0 ) 
    [:] [slice_595_inst] (payload_data_581 7 0) (wkeep_596)  $flowthrough
    $delay slice_595_inst 0
    // 			$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b0  ) wkeep buf_position wdata ) (ignore_return ) 
    //  file nic.linked.aa, line 263
    $call [call_stmt_605_call] $module accessMemory(type_cast_598_wire_constant type_cast_600_wire_constant wkeep_596 buf_position_573 wdata_592) (ignore_return_605)   $fullrate
    $delay call_stmt_605_call 4
    $buffering  $in call_stmt_605_call type_cast_598_wire_constant 1
    $buffering  $in call_stmt_605_call type_cast_600_wire_constant 1
    $buffering  $in call_stmt_605_call wkeep_596 1
    $buffering  $in call_stmt_605_call buf_position_573 1
    $buffering  $in call_stmt_605_call wdata_592 1
    $buffering  $out call_stmt_605_call ignore_return_605 1
    // 	$volatile bad_packet_identifier := ((tdata == BAD_PACKET_DATA) & (tkeep == 0 )) $buffering 1
    //  file nic.linked.aa, line 267
    // (tdata == BAD_PACKET_DATA)
    ==[EQ_u64_u1_613_inst] (wdata_592 R_BAD_PACKET_DATA_612_wire_constant) (EQ_u64_u1_613_wire)   $flowthrough 
    $delay EQ_u64_u1_613_inst 0
    // (tkeep == 0 )
    ==[EQ_u8_u1_616_inst] (wkeep_596 konst_615_wire_constant) (EQ_u8_u1_616_wire)   $flowthrough 
    $delay EQ_u8_u1_616_inst 0
    // ((tdata == BAD_PACKET_DATA) & (tkeep == 0 ))
    &[AND_u1_u1_617_inst] (EQ_u64_u1_613_wire EQ_u8_u1_616_wire) (bad_packet_identifier)   $flowthrough 
    $delay AND_u1_u1_617_inst 0
    // 	$volatile packet_size_8 := ($bitcast ($uint<8>) ((buf_position - base_buf_pointer) + 1 ) ) $buffering 1
    //  file nic.linked.aa, line 268
    // (buf_position - base_buf_pointer)
    -[SUB_u36_u36_622_inst] (buf_position_573 base_buf_pointer) (SUB_u36_u36_622_wire)   $flowthrough 
    $delay SUB_u36_u36_622_inst 0
    // ((buf_position - base_buf_pointer) + 1 )
    +[ADD_u36_u36_624_inst] (SUB_u36_u36_622_wire konst_623_wire_constant) (ADD_u36_u36_624_wire)   $flowthrough 
    $delay ADD_u36_u36_624_inst 0
    // ($bitcast ($uint<8>) ((buf_position - base_buf_pointer) + 1 ) )
    # := [type_cast_625_inst] (ADD_u36_u36_624_wire) (packet_size_8_626)   $flowthrough
    $delay type_cast_625_inst 0
    // 	$volatile packet_size_32 := (packet_size_8 << 2 ) $buffering 1
    //  file nic.linked.aa, line 269
    // (packet_size_8 << 2 )
    <<[SHL_u8_u8_630_inst] (packet_size_8_626 konst_629_wire_constant) (packet_size_32)   $flowthrough 
    $delay SHL_u8_u8_630_inst 0
    // 	$volatile last_keep := tkeep $buffering 1
    //  file nic.linked.aa, line 270
    # := [W_last_keep_632_inst] (wkeep_596) (last_keep)    $flowthrough 
  }
  // end data-path
  // CP-DP links for do-while  do_while_stmt_571
  //  file nic.linked.aa, line 252
  phi_stmt_573 <=> (branch_block_stmt_570/do_while_stmt_571/do_while_stmt_571_loop_body/phi_stmt_573_entry_sample_req branch_block_stmt_570/do_while_stmt_571/do_while_stmt_571_loop_body/phi_stmt_573_loopback_sample_req) (branch_block_stmt_570/do_while_stmt_571/do_while_stmt_571_loop_body/phi_stmt_573_phi_mux_ack)
  // (buf_pointer + 8 )
  // buf_pointer
  ADD_u36_u36_577_inst <=> (branch_block_stmt_570/do_while_stmt_571/do_while_stmt_571_loop_body/ADD_u36_u36_577_Sample/rr branch_block_stmt_570/do_while_stmt_571/do_while_stmt_571_loop_body/ADD_u36_u36_577_Update/cr) (branch_block_stmt_570/do_while_stmt_571/do_while_stmt_571_loop_body/ADD_u36_u36_577_Sample/ra branch_block_stmt_570/do_while_stmt_571/do_while_stmt_571_loop_body/ADD_u36_u36_577_Update/ca)
  // (buf_position + 8 )
  // buf_position
  ADD_u36_u36_580_inst <=> (branch_block_stmt_570/do_while_stmt_571/do_while_stmt_571_loop_body/ADD_u36_u36_580_Sample/rr branch_block_stmt_570/do_while_stmt_571/do_while_stmt_571_loop_body/ADD_u36_u36_580_Update/cr) (branch_block_stmt_570/do_while_stmt_571/do_while_stmt_571_loop_body/ADD_u36_u36_580_Sample/ra branch_block_stmt_570/do_while_stmt_571/do_while_stmt_571_loop_body/ADD_u36_u36_580_Update/ca)
  // nic_rx_to_packet
  RPIPE_nic_rx_to_packet_583_inst <=> (branch_block_stmt_570/do_while_stmt_571/do_while_stmt_571_loop_body/RPIPE_nic_rx_to_packet_583_Sample/rr branch_block_stmt_570/do_while_stmt_571/do_while_stmt_571_loop_body/RPIPE_nic_rx_to_packet_583_Update/cr) (branch_block_stmt_570/do_while_stmt_571/do_while_stmt_571_loop_body/RPIPE_nic_rx_to_packet_583_Sample/ra branch_block_stmt_570/do_while_stmt_571/do_while_stmt_571_loop_body/RPIPE_nic_rx_to_packet_583_Update/ca)
  // 			$volatile last_bit := ( $slice payload_data 72 72 )  $buffering 1
  //  file nic.linked.aa, line 260
  // payload_data
  // 			$volatile wdata := ( $slice payload_data 71 8 )  $buffering 1
  //  file nic.linked.aa, line 261
  // payload_data
  // 			$volatile wkeep := ( $slice payload_data 7 0 )  $buffering 1
  //  file nic.linked.aa, line 262
  // payload_data
  // 			$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b0  ) wkeep buf_position wdata ) (ignore_return ) 
  //  file nic.linked.aa, line 263
  // wkeep
  // buf_position
  // wdata
  call_stmt_605_call <=> (branch_block_stmt_570/do_while_stmt_571/do_while_stmt_571_loop_body/call_stmt_605_Sample/crr branch_block_stmt_570/do_while_stmt_571/do_while_stmt_571_loop_body/call_stmt_605_Update/ccr) (branch_block_stmt_570/do_while_stmt_571/do_while_stmt_571_loop_body/call_stmt_605_Sample/cra branch_block_stmt_570/do_while_stmt_571/do_while_stmt_571_loop_body/call_stmt_605_Update/cca)
  // last_bit
  do_while_stmt_571_branch <=> (branch_block_stmt_570/do_while_stmt_571/do_while_stmt_571_loop_body/condition_evaluated) (branch_block_stmt_570/do_while_stmt_571/loop_exit/ack branch_block_stmt_570/do_while_stmt_571/loop_taken/ack)
  // 	$volatile bad_packet_identifier := ((tdata == BAD_PACKET_DATA) & (tkeep == 0 )) $buffering 1
  //  file nic.linked.aa, line 267
  // ((tdata == BAD_PACKET_DATA) & (tkeep == 0 ))
  // (tdata == BAD_PACKET_DATA)
  // tdata
  // (tkeep == 0 )
  // tkeep
  // 	$volatile packet_size_8 := ($bitcast ($uint<8>) ((buf_position - base_buf_pointer) + 1 ) ) $buffering 1
  //  file nic.linked.aa, line 268
  // ((buf_position - base_buf_pointer) + 1 )
  // (buf_position - base_buf_pointer)
  // buf_position
  // base_buf_pointer
  // 	$volatile packet_size_32 := (packet_size_8 << 2 ) $buffering 1
  //  file nic.linked.aa, line 269
  // (packet_size_8 << 2 )
  // packet_size_8
  // 	$volatile last_keep := tkeep $buffering 1
  //  file nic.linked.aa, line 270
  // tkeep
}
$module [writeControlInformationToMem] 
{
  $in base_buffer_pointer:$int<36>
  // can point into 
  packet_size:$int<8>
  // can point into 
  last_keep:$int<8>
  // can point into 
  // pipe-declarations for block %writeControlInformationToMem
  //  file nic.linked.aa, line 272
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    ::[assign_stmt_645_to_call_stmt_654] 
    {
      // start: WAR dependencies for control_data
      // ignored out-of-scope w_root  packet_size : $uint<8> 
      // ignored out-of-scope w_root  last_keep : $uint<8> 
      // done: WAR dependencies for control_data
      // start:  	$volatile control_data := ($bitcast ($uint<64>) (packet_size && last_keep) ) $buffering 1
      //  file nic.linked.aa, line 277
      // volatile! 
      // Source expression
      // ($bitcast ($uint<64>) (packet_size && last_keep) )
      // (packet_size && last_keep)
      // packet_size
      // last_keep
      // Target expression
      // (as target) control_data
      // start: WAR dependencies for control_data
      // ignored out-of-scope w_root  packet_size : $uint<8> 
      // ignored out-of-scope w_root  last_keep : $uint<8> 
      // done: WAR dependencies for control_data
      // end:  	$volatile control_data := ($bitcast ($uint<64>) (packet_size && last_keep) ) $buffering 1
      // start: 	$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b0  ) FULL_BYTE_MASK base_buffer_pointer control_data ) (ignore_return ) 
      //  file nic.linked.aa, line 278
      $T[call_stmt_654_sample_start_] 
      $T[call_stmt_654_sample_completed_] 
      $T[call_stmt_654_update_start_] 
      $T[call_stmt_654_update_completed_] 
      // Call input argument 0
      // Call input argument 1
      // Call input argument 2
      // Call input argument 3
      // base_buffer_pointer
      // Call input argument 4
      // control_data
      // start: Forward dependencies from base_buffer_pointer to transition call_stmt_654_sample_start_
      // done: Forward dependencies from base_buffer_pointer to transition call_stmt_654_sample_start_
      // start: Forward dependencies from control_data to transition call_stmt_654_sample_start_
      // done: Forward dependencies from control_data to transition call_stmt_654_sample_start_
      ;;[call_stmt_654_Sample] 
      {
        $T [crr] $T [cra] 
      }
      ;;[call_stmt_654_Update] 
      {
        $T [ccr] $T [cca] 
      }
      call_stmt_654_sample_start_ &-> (call_stmt_654_Sample)
      call_stmt_654_sample_completed_ <-& (call_stmt_654_Sample)
      call_stmt_654_sample_completed_ &-> ($null)
      call_stmt_654_update_start_ &-> (call_stmt_654_Update)
      call_stmt_654_update_completed_ <-& (call_stmt_654_Update)
      // Call output argument 0
      // (as target) ignore_return
      // start: WAR dependencies for ignore_return
      // done: WAR dependencies for ignore_return
      // end: 	$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b0  ) FULL_BYTE_MASK base_buffer_pointer control_data ) (ignore_return ) 
      // load-store dependencies..
      // pipe read/write dependencies for pipe MEMORY_TO_NIC_RESPONSE
      // read-dependencies for pipe MEMORY_TO_NIC_RESPONSE
      // write-dependencies for pipe MEMORY_TO_NIC_RESPONSE
      // signal write dependencies for MEMORY_TO_NIC_RESPONSE
      // pipe read/write dependencies for pipe NIC_TO_MEMORY_REQUEST
      // read-dependencies for pipe NIC_TO_MEMORY_REQUEST
      // write-dependencies for pipe NIC_TO_MEMORY_REQUEST
      // signal write dependencies for NIC_TO_MEMORY_REQUEST
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %writeControlInformationToMem
    //  file nic.linked.aa, line 272
    // 	$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b0  ) FULL_BYTE_MASK base_buffer_pointer control_data ) (ignore_return ) 
    //  file nic.linked.aa, line 278
    // ($bitcast ($uint<1>) _b0  )
    $constant $W[type_cast_647_wire_constant] : $int<1> := _b0// 0
    // ($bitcast ($uint<1>) _b0  )
    $constant $W[type_cast_649_wire_constant] : $int<1> := _b0// 0
    // FULL_BYTE_MASK
    $constant $W[R_FULL_BYTE_MASK_650_wire_constant] : $int<8> := _b11111111// 255
    // 	$volatile control_data := ($bitcast ($uint<64>) (packet_size && last_keep) ) $buffering 1
    //  file nic.linked.aa, line 277
    // (packet_size && last_keep)
    $intermediate $W[CONCAT_u8_u16_643_wire] : $int<16>
    // control_data
    $W[control_data_645] : $int<64>
    // 	$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b0  ) FULL_BYTE_MASK base_buffer_pointer control_data ) (ignore_return ) 
    //  file nic.linked.aa, line 278
    // ignore_return
    $W[ignore_return_654] : $int<64>
    // 	$volatile control_data := ($bitcast ($uint<64>) (packet_size && last_keep) ) $buffering 1
    //  file nic.linked.aa, line 277
    // (packet_size && last_keep)
    &&[CONCAT_u8_u16_643_inst] (packet_size last_keep) (CONCAT_u8_u16_643_wire)   $flowthrough 
    $delay CONCAT_u8_u16_643_inst 0
    // ($bitcast ($uint<64>) (packet_size && last_keep) )
    # := [type_cast_644_inst] (CONCAT_u8_u16_643_wire) (control_data_645)   $flowthrough
    $delay type_cast_644_inst 0
    // 	$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b0  ) FULL_BYTE_MASK base_buffer_pointer control_data ) (ignore_return ) 
    //  file nic.linked.aa, line 278
    $call [call_stmt_654_call] $module accessMemory(type_cast_647_wire_constant type_cast_649_wire_constant R_FULL_BYTE_MASK_650_wire_constant base_buffer_pointer control_data_645) (ignore_return_654)  
    $delay call_stmt_654_call 4
    $buffering  $in call_stmt_654_call type_cast_647_wire_constant 1
    $buffering  $in call_stmt_654_call type_cast_649_wire_constant 1
    $buffering  $in call_stmt_654_call R_FULL_BYTE_MASK_650_wire_constant 1
    $buffering  $in call_stmt_654_call base_buffer_pointer 1
    $buffering  $in call_stmt_654_call control_data_645 1
    $buffering  $out call_stmt_654_call ignore_return_654 1
  }
  // end data-path
  // 	$volatile control_data := ($bitcast ($uint<64>) (packet_size && last_keep) ) $buffering 1
  //  file nic.linked.aa, line 277
  // (packet_size && last_keep)
  // packet_size
  // last_keep
  // 	$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b0  ) FULL_BYTE_MASK base_buffer_pointer control_data ) (ignore_return ) 
  //  file nic.linked.aa, line 278
  // base_buffer_pointer
  // control_data
  call_stmt_654_call <=> (assign_stmt_645_to_call_stmt_654/call_stmt_654_Sample/crr assign_stmt_645_to_call_stmt_654/call_stmt_654_Update/ccr) (assign_stmt_645_to_call_stmt_654/call_stmt_654_Sample/cra assign_stmt_645_to_call_stmt_654/call_stmt_654_Update/cca)
}
$pipeline $depth 31 $buffering 1 $module [loadBuffer] 
{
  $in rx_buffer_pointer:$int<36>
  // can point into 
  $out bad_packet_identifier:$int<1>
  // can point into 
  // pipe-declarations for block %loadBuffer
  //  file nic.linked.aa, line 280
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    // pipelined module
    :|:[call_stmt_661_to_call_stmt_672] 
    {
      $T [rx_buffer_pointer_update_enable] 
      $T [rx_buffer_pointer_update_enable_out] 
      rx_buffer_pointer_update_enable &-> (rx_buffer_pointer_update_enable_out)
      $null &-> (rx_buffer_pointer_update_enable)
      $T [bad_packet_identifier_update_enable] 
      $T [bad_packet_identifier_update_enable_in] 
      $null &-> (bad_packet_identifier_update_enable)
      $null <-& (bad_packet_identifier_update_enable_in) 
      $null &-> (bad_packet_identifier_update_enable)
      bad_packet_identifier_update_enable <-& (bad_packet_identifier_update_enable_in) 
      // start: 	$call writeEthernetHeaderToMem (rx_buffer_pointer ) (new_buf_pointer ) 
      //  file nic.linked.aa, line 285
      $T[call_stmt_661_sample_start_] 
      $T[call_stmt_661_sample_completed_] 
      $T[call_stmt_661_update_start_] 
      $T[call_stmt_661_update_completed_] 
      // Call input argument 0
      // rx_buffer_pointer
      // start: Forward dependencies from rx_buffer_pointer to transition call_stmt_661_sample_start_
      call_stmt_661_sample_start_ <-& ($entry)
      // done: Forward dependencies from rx_buffer_pointer to transition call_stmt_661_sample_start_
      // RAW reenables for rx_buffer_pointer
      rx_buffer_pointer_update_enable o<-& (call_stmt_661_sample_completed_ 0)
      ;;[call_stmt_661_Sample] 
      {
        $T [crr] $T [cra] 
      }
      ;;[call_stmt_661_Update] 
      {
        $T [ccr] $T [cca] 
      }
      call_stmt_661_sample_start_ &-> (call_stmt_661_Sample)
      call_stmt_661_sample_completed_ <-& (call_stmt_661_Sample)
      call_stmt_661_sample_completed_ &-> ($null)
      call_stmt_661_update_start_ &-> (call_stmt_661_Update)
      call_stmt_661_update_completed_ <-& (call_stmt_661_Update)
      // Call output argument 0
      // (as target) new_buf_pointer
      // self-release: 
      call_stmt_661_sample_start_ o<-& (call_stmt_661_sample_completed_ 1)
      $null &-> (call_stmt_661_update_start_)
      call_stmt_661_update_start_ o<-& (call_stmt_661_update_completed_ 0)
      // start: WAR dependencies for new_buf_pointer
      // done: WAR dependencies for new_buf_pointer
      // end: 	$call writeEthernetHeaderToMem (rx_buffer_pointer ) (new_buf_pointer ) 
      // start: 	$call writePayloadToMem (rx_buffer_pointer new_buf_pointer ) (packet_size bad_packet_identifier last_keep ) 
      //  file nic.linked.aa, line 286
      $T[call_stmt_667_sample_start_] 
      $T[call_stmt_667_sample_completed_] 
      $T[call_stmt_667_update_start_] 
      $T[call_stmt_667_update_completed_] 
      // Call input argument 0
      // rx_buffer_pointer
      // Call input argument 1
      // new_buf_pointer
      // start: Forward dependencies from rx_buffer_pointer to transition call_stmt_667_sample_start_
      call_stmt_667_sample_start_ <-& ($entry)
      // done: Forward dependencies from rx_buffer_pointer to transition call_stmt_667_sample_start_
      // RAW reenables for rx_buffer_pointer
      rx_buffer_pointer_update_enable o<-& (call_stmt_667_sample_completed_ 0)
      // start: Forward dependencies from new_buf_pointer to transition call_stmt_667_sample_start_
      call_stmt_667_sample_start_ <-& (call_stmt_661_update_completed_)
      // done: Forward dependencies from new_buf_pointer to transition call_stmt_667_sample_start_
      // RAW reenables for new_buf_pointer
      call_stmt_661_update_start_ o<-& (call_stmt_667_sample_completed_ 0)
      ;;[call_stmt_667_Sample] 
      {
        $T [crr] $T [cra] 
      }
      ;;[call_stmt_667_Update] 
      {
        $T [ccr] $T [cca] 
      }
      call_stmt_667_sample_start_ &-> (call_stmt_667_Sample)
      call_stmt_667_sample_completed_ <-& (call_stmt_667_Sample)
      call_stmt_667_sample_completed_ &-> ($null)
      call_stmt_667_update_start_ &-> (call_stmt_667_Update)
      call_stmt_667_update_completed_ <-& (call_stmt_667_Update)
      // Call output argument 0
      // (as target) packet_size
      // Call output argument 1
      // (as target) bad_packet_identifier
      // bad_packet_identifier
      // write to interface object
      // bad_packet_identifier
      // write to interface object
      call_stmt_667_update_start_ <-& (bad_packet_identifier_update_enable)
      // Call output argument 2
      // (as target) last_keep
      // self-release: 
      call_stmt_667_sample_start_ o<-& (call_stmt_667_sample_completed_ 1)
      $null &-> (call_stmt_667_update_start_)
      call_stmt_667_update_start_ o<-& (call_stmt_667_update_completed_ 0)
      // start: WAR dependencies for packet_size
      // done: WAR dependencies for packet_size
      // start: WAR dependencies for bad_packet_identifier
      // done: WAR dependencies for bad_packet_identifier
      // start: WAR dependencies for last_keep
      // done: WAR dependencies for last_keep
      // end: 	$call writePayloadToMem (rx_buffer_pointer new_buf_pointer ) (packet_size bad_packet_identifier last_keep ) 
      // start: 	$guard (~bad_packet_identifier) $call writeControlInformationToMem (rx_buffer_pointer packet_size last_keep ) () 
      //  file nic.linked.aa, line 287
      $T[call_stmt_672_sample_start_] 
      $T[call_stmt_672_sample_completed_] 
      $T[call_stmt_672_update_start_] 
      $T[call_stmt_672_update_completed_] 
      // Guard expression
      // bad_packet_identifier
      // start: Forward dependencies from bad_packet_identifier to transition call_stmt_672_sample_start_
      call_stmt_672_sample_start_ <-& (call_stmt_667_update_completed_)
      // done: Forward dependencies from bad_packet_identifier to transition call_stmt_672_sample_start_
      // RAW reenables for bad_packet_identifier
      call_stmt_667_update_start_ o<-& (call_stmt_672_sample_completed_ 0)
      // Call input argument 0
      // rx_buffer_pointer
      // Call input argument 1
      // packet_size
      // Call input argument 2
      // last_keep
      // start: Forward dependencies from rx_buffer_pointer to transition call_stmt_672_sample_start_
      call_stmt_672_sample_start_ <-& ($entry)
      // done: Forward dependencies from rx_buffer_pointer to transition call_stmt_672_sample_start_
      // RAW reenables for rx_buffer_pointer
      rx_buffer_pointer_update_enable o<-& (call_stmt_672_sample_completed_ 0)
      // start: Forward dependencies from packet_size to transition call_stmt_672_sample_start_
      call_stmt_672_sample_start_ <-& (call_stmt_667_update_completed_)
      // done: Forward dependencies from packet_size to transition call_stmt_672_sample_start_
      // RAW reenables for packet_size
      call_stmt_667_update_start_ o<-& (call_stmt_672_sample_completed_ 0)
      // start: Forward dependencies from last_keep to transition call_stmt_672_sample_start_
      call_stmt_672_sample_start_ <-& (call_stmt_667_update_completed_)
      // done: Forward dependencies from last_keep to transition call_stmt_672_sample_start_
      // RAW reenables for last_keep
      call_stmt_667_update_start_ o<-& (call_stmt_672_sample_completed_ 0)
      ;;[call_stmt_672_Sample] 
      {
        $T [crr] $T [cra] 
      }
      ;;[call_stmt_672_Update] 
      {
        $T [ccr] $T [cca] 
      }
      call_stmt_672_sample_start_ &-> (call_stmt_672_Sample)
      call_stmt_672_sample_completed_ <-& (call_stmt_672_Sample)
      call_stmt_672_sample_completed_ &-> ($null)
      call_stmt_672_update_start_ &-> (call_stmt_672_Update)
      call_stmt_672_update_completed_ <-& (call_stmt_672_Update)
      // self-release: 
      call_stmt_672_sample_start_ o<-& (call_stmt_672_sample_completed_ 1)
      $null &-> (call_stmt_672_update_start_)
      call_stmt_672_update_start_ o<-& (call_stmt_672_update_completed_ 0)
      // end: 	$guard (~bad_packet_identifier) $call writeControlInformationToMem (rx_buffer_pointer packet_size last_keep ) () 
      // load-store dependencies..
      // pipe read/write dependencies for pipe MEMORY_TO_NIC_RESPONSE
      // read-dependencies for pipe MEMORY_TO_NIC_RESPONSE
      call_stmt_667_sample_start_ <-& (call_stmt_661_update_completed_)
      call_stmt_672_sample_start_ <-& (call_stmt_667_update_completed_)
      // ring dependency in pipeline.
      call_stmt_661_update_start_ o<-& (call_stmt_672_update_completed_ 0)
      // write-dependencies for pipe MEMORY_TO_NIC_RESPONSE
      // signal write dependencies for MEMORY_TO_NIC_RESPONSE
      // pipe read/write dependencies for pipe NIC_TO_MEMORY_REQUEST
      // read-dependencies for pipe NIC_TO_MEMORY_REQUEST
      // write-dependencies for pipe NIC_TO_MEMORY_REQUEST
      call_stmt_667_sample_start_ <-& (call_stmt_661_update_completed_)
      call_stmt_672_sample_start_ <-& (call_stmt_667_update_completed_)
      // ring dependency in pipeline.
      call_stmt_661_sample_start_ o<-& (call_stmt_672_update_completed_ 0)
      // signal write dependencies for NIC_TO_MEMORY_REQUEST
      // pipe read/write dependencies for pipe nic_rx_to_header
      // read-dependencies for pipe nic_rx_to_header
      // write-dependencies for pipe nic_rx_to_header
      // signal write dependencies for nic_rx_to_header
      // pipe read/write dependencies for pipe nic_rx_to_packet
      // read-dependencies for pipe nic_rx_to_packet
      // write-dependencies for pipe nic_rx_to_packet
      // signal write dependencies for nic_rx_to_packet
    }
    ( bad_packet_identifier_update_enable_in)
    ( rx_buffer_pointer_update_enable_out)
    $P [rx_buffer_pointer_update_enable] 
    $P [bad_packet_identifier_update_enable] 
    $bind rx_buffer_pointer_update_enable <= call_stmt_661_to_call_stmt_672 : rx_buffer_pointer_update_enable_out
    $bind bad_packet_identifier_update_enable => call_stmt_661_to_call_stmt_672 : bad_packet_identifier_update_enable_in
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %loadBuffer
    //  file nic.linked.aa, line 280
    // 	$call writeEthernetHeaderToMem (rx_buffer_pointer ) (new_buf_pointer ) 
    //  file nic.linked.aa, line 285
    // 	$call writePayloadToMem (rx_buffer_pointer new_buf_pointer ) (packet_size bad_packet_identifier last_keep ) 
    //  file nic.linked.aa, line 286
    // 	$guard (~bad_packet_identifier) $call writeControlInformationToMem (rx_buffer_pointer packet_size last_keep ) () 
    //  file nic.linked.aa, line 287
    // 	$call writeEthernetHeaderToMem (rx_buffer_pointer ) (new_buf_pointer ) 
    //  file nic.linked.aa, line 285
    // new_buf_pointer
    $W[new_buf_pointer_661] : $int<36>
    // 	$call writePayloadToMem (rx_buffer_pointer new_buf_pointer ) (packet_size bad_packet_identifier last_keep ) 
    //  file nic.linked.aa, line 286
    // packet_size
    $W[packet_size_667] : $int<8>
    // bad_packet_identifier
    // last_keep
    $W[last_keep_667] : $int<8>
    // 	$guard (~bad_packet_identifier) $call writeControlInformationToMem (rx_buffer_pointer packet_size last_keep ) () 
    //  file nic.linked.aa, line 287
    // 	$call writeEthernetHeaderToMem (rx_buffer_pointer ) (new_buf_pointer ) 
    //  file nic.linked.aa, line 285
    $call [call_stmt_661_call] $module writeEthernetHeaderToMem(rx_buffer_pointer) (new_buf_pointer_661)  
    $delay call_stmt_661_call 4
    $buffering  $in call_stmt_661_call rx_buffer_pointer 1
    $buffering  $out call_stmt_661_call new_buf_pointer_661 1
    // 	$call writePayloadToMem (rx_buffer_pointer new_buf_pointer ) (packet_size bad_packet_identifier last_keep ) 
    //  file nic.linked.aa, line 286
    $call [call_stmt_667_call] $module writePayloadToMem(rx_buffer_pointer new_buf_pointer_661) (packet_size_667 bad_packet_identifier last_keep_667)  
    $delay call_stmt_667_call 4
    $buffering  $in call_stmt_667_call rx_buffer_pointer 1
    $buffering  $in call_stmt_667_call new_buf_pointer_661 1
    $buffering  $out call_stmt_667_call packet_size_667 1
    $buffering  $out call_stmt_667_call bad_packet_identifier 1
    $buffering  $out call_stmt_667_call last_keep_667 1
    // 	$guard (~bad_packet_identifier) $call writeControlInformationToMem (rx_buffer_pointer packet_size last_keep ) () 
    //  file nic.linked.aa, line 287
    $call [call_stmt_672_call] $module writeControlInformationToMem(rx_buffer_pointer packet_size_667 last_keep_667) () $guard ( ~ bad_packet_identifier )  
    $delay call_stmt_672_call 4
    $buffering  $in call_stmt_672_call rx_buffer_pointer 1
    $buffering  $in call_stmt_672_call packet_size_667 1
    $buffering  $in call_stmt_672_call last_keep_667 1
  }
  // end data-path
  // 	$call writeEthernetHeaderToMem (rx_buffer_pointer ) (new_buf_pointer ) 
  //  file nic.linked.aa, line 285
  // rx_buffer_pointer
  call_stmt_661_call <=> (call_stmt_661_to_call_stmt_672/call_stmt_661_Sample/crr call_stmt_661_to_call_stmt_672/call_stmt_661_Update/ccr) (call_stmt_661_to_call_stmt_672/call_stmt_661_Sample/cra call_stmt_661_to_call_stmt_672/call_stmt_661_Update/cca)
  // 	$call writePayloadToMem (rx_buffer_pointer new_buf_pointer ) (packet_size bad_packet_identifier last_keep ) 
  //  file nic.linked.aa, line 286
  // rx_buffer_pointer
  // new_buf_pointer
  call_stmt_667_call <=> (call_stmt_661_to_call_stmt_672/call_stmt_667_Sample/crr call_stmt_661_to_call_stmt_672/call_stmt_667_Update/ccr) (call_stmt_661_to_call_stmt_672/call_stmt_667_Sample/cra call_stmt_661_to_call_stmt_672/call_stmt_667_Update/cca)
  // 	$guard (~bad_packet_identifier) $call writeControlInformationToMem (rx_buffer_pointer packet_size last_keep ) () 
  //  file nic.linked.aa, line 287
  // rx_buffer_pointer
  // packet_size
  // last_keep
  call_stmt_672_call <=> (call_stmt_661_to_call_stmt_672/call_stmt_672_Sample/crr call_stmt_661_to_call_stmt_672/call_stmt_672_Update/ccr) (call_stmt_661_to_call_stmt_672/call_stmt_672_Sample/cra call_stmt_661_to_call_stmt_672/call_stmt_672_Update/cca)
}
$module [setQueueElement] 
{
  $in q_base_address:$int<36>
  // can point into 
  write_pointer:$int<32>
  // can point into 
  q_w_data:$int<32>
  // can point into 
  // pipe-declarations for block %setQueueElement
  //  file nic.linked.aa, line 289
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    ::[assign_stmt_683_to_call_stmt_734] 
    {
      // start: WAR dependencies for buffer_address
      // ignored out-of-scope w_root  q_base_address : $uint<36> 
      // done: WAR dependencies for buffer_address
      // start:  	$volatile buffer_address := (q_base_address + ($bitcast ($uint<36>) 16  )) $buffering 1
      //  file nic.linked.aa, line 294
      // volatile! 
      // Source expression
      // (q_base_address + ($bitcast ($uint<36>) 16  ))
      // q_base_address
      // Target expression
      // (as target) buffer_address
      // start: WAR dependencies for buffer_address
      // ignored out-of-scope w_root  q_base_address : $uint<36> 
      // done: WAR dependencies for buffer_address
      // end:  	$volatile buffer_address := (q_base_address + ($bitcast ($uint<36>) 16  )) $buffering 1
      // start: WAR dependencies for element_pair_address
      // ignored out-of-scope w_root  q_base_address : $uint<36> 
      // ignored out-of-scope w_root  write_pointer : $uint<32> 
      // done: WAR dependencies for element_pair_address
      // start:  	$volatile element_pair_address := (buffer_address + ($bitcast ($uint<36>) (( $slice write_pointer 31 1 )  && ($bitcast ($uint<3>) _b0  )) )) $buffering 1
      //  file nic.linked.aa, line 295
      // volatile! 
      // Source expression
      // (buffer_address + ($bitcast ($uint<36>) (( $slice write_pointer 31 1 )  && ($bitcast ($uint<3>) _b0  )) ))
      // buffer_address
      // ($bitcast ($uint<36>) (( $slice write_pointer 31 1 )  && ($bitcast ($uint<3>) _b0  )) )
      // (( $slice write_pointer 31 1 )  && ($bitcast ($uint<3>) _b0  ))
      // ( $slice write_pointer 31 1 ) 
      // write_pointer
      // Target expression
      // (as target) element_pair_address
      // start: WAR dependencies for element_pair_address
      // ignored out-of-scope w_root  q_base_address : $uint<36> 
      // ignored out-of-scope w_root  write_pointer : $uint<32> 
      // done: WAR dependencies for element_pair_address
      // end:  	$volatile element_pair_address := (buffer_address + ($bitcast ($uint<36>) (( $slice write_pointer 31 1 )  && ($bitcast ($uint<3>) _b0  )) )) $buffering 1
      // start: WAR dependencies for bmask
      // ignored out-of-scope w_root  write_pointer : $uint<32> 
      // done: WAR dependencies for bmask
      // start:  	$volatile bmask := ( $mux (write_pointer [] 0 ) (($bitcast ($uint<4>) _b0  ) && ( ~ ($bitcast ($uint<4>) _b0  ) ))  (( ~ ($bitcast ($uint<4>) _b0  ) ) && ($bitcast ($uint<4>) _b0  )) )  $buffering 1
      //  file nic.linked.aa, line 296
      // volatile! 
      // Source expression
      // ( $mux (write_pointer [] 0 ) (($bitcast ($uint<4>) _b0  ) && ( ~ ($bitcast ($uint<4>) _b0  ) ))  (( ~ ($bitcast ($uint<4>) _b0  ) ) && ($bitcast ($uint<4>) _b0  )) ) 
      // (write_pointer [] 0 )
      // write_pointer
      // Target expression
      // (as target) bmask
      // start: WAR dependencies for bmask
      // ignored out-of-scope w_root  write_pointer : $uint<32> 
      // done: WAR dependencies for bmask
      // end:  	$volatile bmask := ( $mux (write_pointer [] 0 ) (($bitcast ($uint<4>) _b0  ) && ( ~ ($bitcast ($uint<4>) _b0  ) ))  (( ~ ($bitcast ($uint<4>) _b0  ) ) && ($bitcast ($uint<4>) _b0  )) )  $buffering 1
      // start: WAR dependencies for wval
      // ignored out-of-scope w_root  write_pointer : $uint<32> 
      // ignored out-of-scope w_root  q_w_data : $uint<32> 
      // done: WAR dependencies for wval
      // start:  	$volatile wval := ( $mux (write_pointer [] 0 ) (($bitcast ($uint<32>) _b0  ) && q_w_data)  (q_w_data && ($bitcast ($uint<32>) _b0  )) )  $buffering 1
      //  file nic.linked.aa, line 297
      // volatile! 
      // Source expression
      // ( $mux (write_pointer [] 0 ) (($bitcast ($uint<32>) _b0  ) && q_w_data)  (q_w_data && ($bitcast ($uint<32>) _b0  )) ) 
      // (write_pointer [] 0 )
      // write_pointer
      // (($bitcast ($uint<32>) _b0  ) && q_w_data)
      // q_w_data
      // (q_w_data && ($bitcast ($uint<32>) _b0  ))
      // q_w_data
      // Target expression
      // (as target) wval
      // start: WAR dependencies for wval
      // ignored out-of-scope w_root  write_pointer : $uint<32> 
      // ignored out-of-scope w_root  q_w_data : $uint<32> 
      // done: WAR dependencies for wval
      // end:  	$volatile wval := ( $mux (write_pointer [] 0 ) (($bitcast ($uint<32>) _b0  ) && q_w_data)  (q_w_data && ($bitcast ($uint<32>) _b0  )) )  $buffering 1
      // start: 	$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b0  ) bmask element_pair_address wval ) (ignore ) 
      //  file nic.linked.aa, line 298
      $T[call_stmt_734_sample_start_] 
      $T[call_stmt_734_sample_completed_] 
      $T[call_stmt_734_update_start_] 
      $T[call_stmt_734_update_completed_] 
      // Call input argument 0
      // Call input argument 1
      // Call input argument 2
      // bmask
      // Call input argument 3
      // element_pair_address
      // Call input argument 4
      // wval
      // start: Forward dependencies from bmask to transition call_stmt_734_sample_start_
      // done: Forward dependencies from bmask to transition call_stmt_734_sample_start_
      // start: Forward dependencies from element_pair_address to transition call_stmt_734_sample_start_
      // done: Forward dependencies from element_pair_address to transition call_stmt_734_sample_start_
      // start: Forward dependencies from wval to transition call_stmt_734_sample_start_
      // done: Forward dependencies from wval to transition call_stmt_734_sample_start_
      ;;[call_stmt_734_Sample] 
      {
        $T [crr] $T [cra] 
      }
      ;;[call_stmt_734_Update] 
      {
        $T [ccr] $T [cca] 
      }
      call_stmt_734_sample_start_ &-> (call_stmt_734_Sample)
      call_stmt_734_sample_completed_ <-& (call_stmt_734_Sample)
      call_stmt_734_sample_completed_ &-> ($null)
      call_stmt_734_update_start_ &-> (call_stmt_734_Update)
      call_stmt_734_update_completed_ <-& (call_stmt_734_Update)
      // Call output argument 0
      // (as target) ignore
      // start: WAR dependencies for ignore
      // done: WAR dependencies for ignore
      // end: 	$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b0  ) bmask element_pair_address wval ) (ignore ) 
      // load-store dependencies..
      // pipe read/write dependencies for pipe MEMORY_TO_NIC_RESPONSE
      // read-dependencies for pipe MEMORY_TO_NIC_RESPONSE
      // write-dependencies for pipe MEMORY_TO_NIC_RESPONSE
      // signal write dependencies for MEMORY_TO_NIC_RESPONSE
      // pipe read/write dependencies for pipe NIC_TO_MEMORY_REQUEST
      // read-dependencies for pipe NIC_TO_MEMORY_REQUEST
      // write-dependencies for pipe NIC_TO_MEMORY_REQUEST
      // signal write dependencies for NIC_TO_MEMORY_REQUEST
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %setQueueElement
    //  file nic.linked.aa, line 289
    // ($bitcast ($uint<36>) 16  )
    $constant $W[type_cast_681_wire_constant] : $int<36> := _b000000000000000000000000000000010000// 16
    // ($bitcast ($uint<3>) _b0  )
    $constant $W[type_cast_689_wire_constant] : $int<3> := _b000// 0
    // ( $mux (write_pointer [] 0 ) (($bitcast ($uint<4>) _b0  ) && ( ~ ($bitcast ($uint<4>) _b0  ) ))  (( ~ ($bitcast ($uint<4>) _b0  ) ) && ($bitcast ($uint<4>) _b0  )) ) 
    // 0 
    $constant $W[konst_696_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // (($bitcast ($uint<4>) _b0  ) && ( ~ ($bitcast ($uint<4>) _b0  ) ))
    $constant $W[CONCAT_u4_u8_703_wire_constant] : $int<8> := _b00001111// 15
    // (( ~ ($bitcast ($uint<4>) _b0  ) ) && ($bitcast ($uint<4>) _b0  ))
    $constant $W[CONCAT_u4_u8_709_wire_constant] : $int<8> := _b11110000// 240
    // ( $mux (write_pointer [] 0 ) (($bitcast ($uint<32>) _b0  ) && q_w_data)  (q_w_data && ($bitcast ($uint<32>) _b0  )) ) 
    // 0 
    $constant $W[konst_714_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // ($bitcast ($uint<32>) _b0  )
    $constant $W[type_cast_717_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // ($bitcast ($uint<32>) _b0  )
    $constant $W[type_cast_722_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // 	$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b0  ) bmask element_pair_address wval ) (ignore ) 
    //  file nic.linked.aa, line 298
    // ($bitcast ($uint<1>) _b0  )
    $constant $W[type_cast_727_wire_constant] : $int<1> := _b0// 0
    // ($bitcast ($uint<1>) _b0  )
    $constant $W[type_cast_729_wire_constant] : $int<1> := _b0// 0
    // 	$volatile buffer_address := (q_base_address + ($bitcast ($uint<36>) 16  )) $buffering 1
    //  file nic.linked.aa, line 294
    // buffer_address
    $W[buffer_address_683] : $int<36>
    // 	$volatile element_pair_address := (buffer_address + ($bitcast ($uint<36>) (( $slice write_pointer 31 1 )  && ($bitcast ($uint<3>) _b0  )) )) $buffering 1
    //  file nic.linked.aa, line 295
    // ( $slice write_pointer 31 1 ) 
    $intermediate $W[slice_687_wire] : $int<31>
    // (( $slice write_pointer 31 1 )  && ($bitcast ($uint<3>) _b0  ))
    $intermediate $W[CONCAT_u31_u34_690_wire] : $int<34>
    // ($bitcast ($uint<36>) (( $slice write_pointer 31 1 )  && ($bitcast ($uint<3>) _b0  )) )
    $intermediate $W[type_cast_691_wire] : $int<36>
    // element_pair_address
    $W[element_pair_address_693] : $int<36>
    // 	$volatile bmask := ( $mux (write_pointer [] 0 ) (($bitcast ($uint<4>) _b0  ) && ( ~ ($bitcast ($uint<4>) _b0  ) ))  (( ~ ($bitcast ($uint<4>) _b0  ) ) && ($bitcast ($uint<4>) _b0  )) )  $buffering 1
    //  file nic.linked.aa, line 296
    // (write_pointer [] 0 )
    $intermediate $W[BITSEL_u32_u1_697_wire] : $int<1>
    // bmask
    $W[bmask_711] : $int<8>
    // 	$volatile wval := ( $mux (write_pointer [] 0 ) (($bitcast ($uint<32>) _b0  ) && q_w_data)  (q_w_data && ($bitcast ($uint<32>) _b0  )) )  $buffering 1
    //  file nic.linked.aa, line 297
    // (write_pointer [] 0 )
    $intermediate $W[BITSEL_u32_u1_715_wire] : $int<1>
    // (($bitcast ($uint<32>) _b0  ) && q_w_data)
    $intermediate $W[CONCAT_u32_u64_719_wire] : $int<64>
    // (q_w_data && ($bitcast ($uint<32>) _b0  ))
    $intermediate $W[CONCAT_u32_u64_723_wire] : $int<64>
    // wval
    $W[wval_725] : $int<64>
    // 	$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b0  ) bmask element_pair_address wval ) (ignore ) 
    //  file nic.linked.aa, line 298
    // ignore
    $W[ignore_734] : $int<64>
    // 	$volatile buffer_address := (q_base_address + ($bitcast ($uint<36>) 16  )) $buffering 1
    //  file nic.linked.aa, line 294
    // (q_base_address + ($bitcast ($uint<36>) 16  ))
    +[ADD_u36_u36_682_inst] (q_base_address type_cast_681_wire_constant) (buffer_address_683)   $flowthrough 
    $delay ADD_u36_u36_682_inst 0
    // 	$volatile element_pair_address := (buffer_address + ($bitcast ($uint<36>) (( $slice write_pointer 31 1 )  && ($bitcast ($uint<3>) _b0  )) )) $buffering 1
    //  file nic.linked.aa, line 295
    // ( $slice write_pointer 31 1 ) 
    [:] [slice_687_inst] (write_pointer 31 1) (slice_687_wire)  $flowthrough
    $delay slice_687_inst 0
    // (( $slice write_pointer 31 1 )  && ($bitcast ($uint<3>) _b0  ))
    &&[CONCAT_u31_u34_690_inst] (slice_687_wire type_cast_689_wire_constant) (CONCAT_u31_u34_690_wire)   $flowthrough 
    $delay CONCAT_u31_u34_690_inst 0
    // ($bitcast ($uint<36>) (( $slice write_pointer 31 1 )  && ($bitcast ($uint<3>) _b0  )) )
    # := [type_cast_691_inst] (CONCAT_u31_u34_690_wire) (type_cast_691_wire)   $flowthrough
    $delay type_cast_691_inst 0
    // (buffer_address + ($bitcast ($uint<36>) (( $slice write_pointer 31 1 )  && ($bitcast ($uint<3>) _b0  )) ))
    +[ADD_u36_u36_692_inst] (buffer_address_683 type_cast_691_wire) (element_pair_address_693)   $flowthrough 
    $delay ADD_u36_u36_692_inst 0
    // 	$volatile bmask := ( $mux (write_pointer [] 0 ) (($bitcast ($uint<4>) _b0  ) && ( ~ ($bitcast ($uint<4>) _b0  ) ))  (( ~ ($bitcast ($uint<4>) _b0  ) ) && ($bitcast ($uint<4>) _b0  )) )  $buffering 1
    //  file nic.linked.aa, line 296
    // (write_pointer [] 0 )
    [][BITSEL_u32_u1_697_inst] (write_pointer konst_696_wire_constant) (BITSEL_u32_u1_697_wire)   $flowthrough 
    $delay BITSEL_u32_u1_697_inst 0
    // ( $mux (write_pointer [] 0 ) (($bitcast ($uint<4>) _b0  ) && ( ~ ($bitcast ($uint<4>) _b0  ) ))  (( ~ ($bitcast ($uint<4>) _b0  ) ) && ($bitcast ($uint<4>) _b0  )) ) 
    ? [MUX_710_inst] (BITSEL_u32_u1_697_wire CONCAT_u4_u8_703_wire_constant CONCAT_u4_u8_709_wire_constant) (bmask_711)  $flowthrough
    // 	$volatile wval := ( $mux (write_pointer [] 0 ) (($bitcast ($uint<32>) _b0  ) && q_w_data)  (q_w_data && ($bitcast ($uint<32>) _b0  )) )  $buffering 1
    //  file nic.linked.aa, line 297
    // (write_pointer [] 0 )
    [][BITSEL_u32_u1_715_inst] (write_pointer konst_714_wire_constant) (BITSEL_u32_u1_715_wire)   $flowthrough 
    $delay BITSEL_u32_u1_715_inst 0
    // (($bitcast ($uint<32>) _b0  ) && q_w_data)
    &&[CONCAT_u32_u64_719_inst] (type_cast_717_wire_constant q_w_data) (CONCAT_u32_u64_719_wire)   $flowthrough 
    $delay CONCAT_u32_u64_719_inst 0
    // (q_w_data && ($bitcast ($uint<32>) _b0  ))
    &&[CONCAT_u32_u64_723_inst] (q_w_data type_cast_722_wire_constant) (CONCAT_u32_u64_723_wire)   $flowthrough 
    $delay CONCAT_u32_u64_723_inst 0
    // ( $mux (write_pointer [] 0 ) (($bitcast ($uint<32>) _b0  ) && q_w_data)  (q_w_data && ($bitcast ($uint<32>) _b0  )) ) 
    ? [MUX_724_inst] (BITSEL_u32_u1_715_wire CONCAT_u32_u64_719_wire CONCAT_u32_u64_723_wire) (wval_725)  $flowthrough
    // 	$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b0  ) bmask element_pair_address wval ) (ignore ) 
    //  file nic.linked.aa, line 298
    $call [call_stmt_734_call] $module accessMemory(type_cast_727_wire_constant type_cast_729_wire_constant bmask_711 element_pair_address_693 wval_725) (ignore_734)  
    $delay call_stmt_734_call 4
    $buffering  $in call_stmt_734_call type_cast_727_wire_constant 1
    $buffering  $in call_stmt_734_call type_cast_729_wire_constant 1
    $buffering  $in call_stmt_734_call bmask_711 1
    $buffering  $in call_stmt_734_call element_pair_address_693 1
    $buffering  $in call_stmt_734_call wval_725 1
    $buffering  $out call_stmt_734_call ignore_734 1
  }
  // end data-path
  // 	$volatile buffer_address := (q_base_address + ($bitcast ($uint<36>) 16  )) $buffering 1
  //  file nic.linked.aa, line 294
  // (q_base_address + ($bitcast ($uint<36>) 16  ))
  // q_base_address
  // 	$volatile element_pair_address := (buffer_address + ($bitcast ($uint<36>) (( $slice write_pointer 31 1 )  && ($bitcast ($uint<3>) _b0  )) )) $buffering 1
  //  file nic.linked.aa, line 295
  // (buffer_address + ($bitcast ($uint<36>) (( $slice write_pointer 31 1 )  && ($bitcast ($uint<3>) _b0  )) ))
  // buffer_address
  // (( $slice write_pointer 31 1 )  && ($bitcast ($uint<3>) _b0  ))
  // write_pointer
  // 	$volatile bmask := ( $mux (write_pointer [] 0 ) (($bitcast ($uint<4>) _b0  ) && ( ~ ($bitcast ($uint<4>) _b0  ) ))  (( ~ ($bitcast ($uint<4>) _b0  ) ) && ($bitcast ($uint<4>) _b0  )) )  $buffering 1
  //  file nic.linked.aa, line 296
  // (write_pointer [] 0 )
  // write_pointer
  // ( $mux (write_pointer [] 0 ) (($bitcast ($uint<4>) _b0  ) && ( ~ ($bitcast ($uint<4>) _b0  ) ))  (( ~ ($bitcast ($uint<4>) _b0  ) ) && ($bitcast ($uint<4>) _b0  )) ) 
  // 	$volatile wval := ( $mux (write_pointer [] 0 ) (($bitcast ($uint<32>) _b0  ) && q_w_data)  (q_w_data && ($bitcast ($uint<32>) _b0  )) )  $buffering 1
  //  file nic.linked.aa, line 297
  // (write_pointer [] 0 )
  // write_pointer
  // (($bitcast ($uint<32>) _b0  ) && q_w_data)
  // q_w_data
  // (q_w_data && ($bitcast ($uint<32>) _b0  ))
  // q_w_data
  // ( $mux (write_pointer [] 0 ) (($bitcast ($uint<32>) _b0  ) && q_w_data)  (q_w_data && ($bitcast ($uint<32>) _b0  )) ) 
  // 	$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b0  ) bmask element_pair_address wval ) (ignore ) 
  //  file nic.linked.aa, line 298
  // bmask
  // element_pair_address
  // wval
  call_stmt_734_call <=> (assign_stmt_683_to_call_stmt_734/call_stmt_734_Sample/crr assign_stmt_683_to_call_stmt_734/call_stmt_734_Update/ccr) (assign_stmt_683_to_call_stmt_734/call_stmt_734_Sample/cra assign_stmt_683_to_call_stmt_734/call_stmt_734_Update/cca)
}
$module [pushIntoQueue] 
{
  $in lock:$int<1>
  // can point into 
  q_base_address:$int<36>
  // can point into 
  q_w_data:$int<32>
  // can point into 
  $out status:$int<1>
  // can point into 
  // pipe-declarations for block %pushIntoQueue
  //  file nic.linked.aa, line 300
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    ::[call_stmt_744] 
    {
      // start: 	$guard (lock) $call acquireMutex (q_base_address ) (m_ok ) 
      //  file nic.linked.aa, line 305
      $T[call_stmt_744_sample_start_] 
      $T[call_stmt_744_sample_completed_] 
      $T[call_stmt_744_update_start_] 
      $T[call_stmt_744_update_completed_] 
      // Guard expression
      // lock
      // start: Forward dependencies from lock to transition call_stmt_744_sample_start_
      // done: Forward dependencies from lock to transition call_stmt_744_sample_start_
      // Call input argument 0
      // q_base_address
      // start: Forward dependencies from q_base_address to transition call_stmt_744_sample_start_
      // done: Forward dependencies from q_base_address to transition call_stmt_744_sample_start_
      ;;[call_stmt_744_Sample] 
      {
        $T [crr] $T [cra] 
      }
      ;;[call_stmt_744_Update] 
      {
        $T [ccr] $T [cca] 
      }
      call_stmt_744_sample_start_ &-> (call_stmt_744_Sample)
      call_stmt_744_sample_completed_ <-& (call_stmt_744_Sample)
      call_stmt_744_sample_completed_ &-> ($null)
      call_stmt_744_update_start_ &-> (call_stmt_744_Update)
      call_stmt_744_update_completed_ <-& (call_stmt_744_Update)
      // Call output argument 0
      // (as target) m_ok
      // start: WAR dependencies for m_ok
      // done: WAR dependencies for m_ok
      // end: 	$guard (lock) $call acquireMutex (q_base_address ) (m_ok ) 
      // load-store dependencies..
      // pipe read/write dependencies for pipe MEMORY_TO_NIC_RESPONSE
      // read-dependencies for pipe MEMORY_TO_NIC_RESPONSE
      // write-dependencies for pipe MEMORY_TO_NIC_RESPONSE
      // signal write dependencies for MEMORY_TO_NIC_RESPONSE
      // pipe read/write dependencies for pipe NIC_TO_MEMORY_REQUEST
      // read-dependencies for pipe NIC_TO_MEMORY_REQUEST
      // write-dependencies for pipe NIC_TO_MEMORY_REQUEST
      // signal write dependencies for NIC_TO_MEMORY_REQUEST
    }
    ::[call_stmt_749_to_call_stmt_771] 
    {
      // start: 	$call getQueuePointers (q_base_address ) (write_pointer read_pointer ) 
      //  file nic.linked.aa, line 307
      $T[call_stmt_749_sample_start_] 
      $T[call_stmt_749_sample_completed_] 
      $T[call_stmt_749_update_start_] 
      $T[call_stmt_749_update_completed_] 
      // Call input argument 0
      // q_base_address
      // start: Forward dependencies from q_base_address to transition call_stmt_749_sample_start_
      // done: Forward dependencies from q_base_address to transition call_stmt_749_sample_start_
      ;;[call_stmt_749_Sample] 
      {
        $T [crr] $T [cra] 
      }
      ;;[call_stmt_749_Update] 
      {
        $T [ccr] $T [cca] 
      }
      call_stmt_749_sample_start_ &-> (call_stmt_749_Sample)
      call_stmt_749_sample_completed_ <-& (call_stmt_749_Sample)
      call_stmt_749_sample_completed_ &-> ($null)
      call_stmt_749_update_start_ &-> (call_stmt_749_Update)
      call_stmt_749_update_completed_ <-& (call_stmt_749_Update)
      // Call output argument 0
      // (as target) write_pointer
      // Call output argument 1
      // (as target) read_pointer
      // start: WAR dependencies for write_pointer
      // done: WAR dependencies for write_pointer
      // start: WAR dependencies for read_pointer
      // done: WAR dependencies for read_pointer
      // end: 	$call getQueuePointers (q_base_address ) (write_pointer read_pointer ) 
      // start: WAR dependencies for next_wp
      // done: WAR dependencies for next_wp
      // start:  	$volatile next_wp := ((write_pointer + 1 ) & QUEUE_SIZE_MASK) $buffering 1
      //  file nic.linked.aa, line 308
      // volatile! 
      // Source expression
      // ((write_pointer + 1 ) & QUEUE_SIZE_MASK)
      // (write_pointer + 1 )
      // write_pointer
      // Target expression
      // (as target) next_wp
      // start: WAR dependencies for next_wp
      // done: WAR dependencies for next_wp
      // end:  	$volatile next_wp := ((write_pointer + 1 ) & QUEUE_SIZE_MASK) $buffering 1
      // start: WAR dependencies for q_full
      // done: WAR dependencies for q_full
      // start:  	$volatile q_full := (next_wp == read_pointer) $buffering 1
      //  file nic.linked.aa, line 309
      // volatile! 
      // Source expression
      // (next_wp == read_pointer)
      // next_wp
      // read_pointer
      // Target expression
      // (as target) q_full
      // start: WAR dependencies for q_full
      // done: WAR dependencies for q_full
      // end:  	$volatile q_full := (next_wp == read_pointer) $buffering 1
      // start: 	$guard (~q_full) $call setQueueElement (q_base_address write_pointer q_w_data ) () 
      //  file nic.linked.aa, line 310
      $T[call_stmt_766_sample_start_] 
      $T[call_stmt_766_sample_completed_] 
      $T[call_stmt_766_update_start_] 
      $T[call_stmt_766_update_completed_] 
      // Guard expression
      // q_full
      // start: Forward dependencies from q_full to transition call_stmt_766_sample_start_
      call_stmt_766_sample_start_ <-& (call_stmt_749_update_completed_)
      // done: Forward dependencies from q_full to transition call_stmt_766_sample_start_
      // Call input argument 0
      // q_base_address
      // Call input argument 1
      // write_pointer
      // Call input argument 2
      // q_w_data
      // start: Forward dependencies from q_base_address to transition call_stmt_766_sample_start_
      // done: Forward dependencies from q_base_address to transition call_stmt_766_sample_start_
      // start: Forward dependencies from write_pointer to transition call_stmt_766_sample_start_
      call_stmt_766_sample_start_ <-& (call_stmt_749_update_completed_)
      // done: Forward dependencies from write_pointer to transition call_stmt_766_sample_start_
      // start: Forward dependencies from q_w_data to transition call_stmt_766_sample_start_
      // done: Forward dependencies from q_w_data to transition call_stmt_766_sample_start_
      ;;[call_stmt_766_Sample] 
      {
        $T [crr] $T [cra] 
      }
      ;;[call_stmt_766_Update] 
      {
        $T [ccr] $T [cca] 
      }
      call_stmt_766_sample_start_ &-> (call_stmt_766_Sample)
      call_stmt_766_sample_completed_ <-& (call_stmt_766_Sample)
      call_stmt_766_sample_completed_ &-> ($null)
      call_stmt_766_update_start_ &-> (call_stmt_766_Update)
      call_stmt_766_update_completed_ <-& (call_stmt_766_Update)
      // end: 	$guard (~q_full) $call setQueueElement (q_base_address write_pointer q_w_data ) () 
      // start: 	$guard (~q_full) $call setQueuePointers (q_base_address write_pointer next_wp ) () 
      //  file nic.linked.aa, line 311
      $T[call_stmt_771_sample_start_] 
      $T[call_stmt_771_sample_completed_] 
      $T[call_stmt_771_update_start_] 
      $T[call_stmt_771_update_completed_] 
      // Guard expression
      // q_full
      // start: Forward dependencies from q_full to transition call_stmt_771_sample_start_
      call_stmt_771_sample_start_ <-& (call_stmt_749_update_completed_)
      // done: Forward dependencies from q_full to transition call_stmt_771_sample_start_
      // Call input argument 0
      // q_base_address
      // Call input argument 1
      // write_pointer
      // Call input argument 2
      // next_wp
      // start: Forward dependencies from q_base_address to transition call_stmt_771_sample_start_
      // done: Forward dependencies from q_base_address to transition call_stmt_771_sample_start_
      // start: Forward dependencies from write_pointer to transition call_stmt_771_sample_start_
      call_stmt_771_sample_start_ <-& (call_stmt_749_update_completed_)
      // done: Forward dependencies from write_pointer to transition call_stmt_771_sample_start_
      // start: Forward dependencies from next_wp to transition call_stmt_771_sample_start_
      call_stmt_771_sample_start_ <-& (call_stmt_749_update_completed_)
      // done: Forward dependencies from next_wp to transition call_stmt_771_sample_start_
      ;;[call_stmt_771_Sample] 
      {
        $T [crr] $T [cra] 
      }
      ;;[call_stmt_771_Update] 
      {
        $T [ccr] $T [cca] 
      }
      call_stmt_771_sample_start_ &-> (call_stmt_771_Sample)
      call_stmt_771_sample_completed_ <-& (call_stmt_771_Sample)
      call_stmt_771_sample_completed_ &-> ($null)
      call_stmt_771_update_start_ &-> (call_stmt_771_Update)
      call_stmt_771_update_completed_ <-& (call_stmt_771_Update)
      // end: 	$guard (~q_full) $call setQueuePointers (q_base_address write_pointer next_wp ) () 
      // load-store dependencies..
      // pipe read/write dependencies for pipe MEMORY_TO_NIC_RESPONSE
      // read-dependencies for pipe MEMORY_TO_NIC_RESPONSE
      call_stmt_766_sample_start_ <-& (call_stmt_749_update_completed_)
      call_stmt_771_sample_start_ <-& (call_stmt_766_update_completed_)
      // write-dependencies for pipe MEMORY_TO_NIC_RESPONSE
      // signal write dependencies for MEMORY_TO_NIC_RESPONSE
      // pipe read/write dependencies for pipe NIC_TO_MEMORY_REQUEST
      // read-dependencies for pipe NIC_TO_MEMORY_REQUEST
      // write-dependencies for pipe NIC_TO_MEMORY_REQUEST
      call_stmt_766_sample_start_ <-& (call_stmt_749_update_completed_)
      call_stmt_771_sample_start_ <-& (call_stmt_766_update_completed_)
      // signal write dependencies for NIC_TO_MEMORY_REQUEST
    }
    ::[call_stmt_775_to_assign_stmt_779] 
    {
      // start: 	$guard (lock) $call releaseMutex (q_base_address ) () 
      //  file nic.linked.aa, line 313
      $T[call_stmt_775_sample_start_] 
      $T[call_stmt_775_sample_completed_] 
      $T[call_stmt_775_update_start_] 
      $T[call_stmt_775_update_completed_] 
      // Guard expression
      // lock
      // start: Forward dependencies from lock to transition call_stmt_775_sample_start_
      // done: Forward dependencies from lock to transition call_stmt_775_sample_start_
      // Call input argument 0
      // q_base_address
      // start: Forward dependencies from q_base_address to transition call_stmt_775_sample_start_
      // done: Forward dependencies from q_base_address to transition call_stmt_775_sample_start_
      ;;[call_stmt_775_Sample] 
      {
        $T [crr] $T [cra] 
      }
      ;;[call_stmt_775_Update] 
      {
        $T [ccr] $T [cca] 
      }
      call_stmt_775_sample_start_ &-> (call_stmt_775_Sample)
      call_stmt_775_sample_completed_ <-& (call_stmt_775_Sample)
      call_stmt_775_sample_completed_ &-> ($null)
      call_stmt_775_update_start_ &-> (call_stmt_775_Update)
      call_stmt_775_update_completed_ <-& (call_stmt_775_Update)
      // end: 	$guard (lock) $call releaseMutex (q_base_address ) () 
      // start:  	status := ( ~ q_full ) $buffering 1// bits of buffering = 1. 
      //  file nic.linked.aa, line 314
      // Source expression
      // ( ~ q_full )
      $T[NOT_u1_u1_778_sample_start_] 
      $T[NOT_u1_u1_778_sample_completed_] 
      $T[NOT_u1_u1_778_update_start_] 
      $T[NOT_u1_u1_778_update_completed_] 
      // q_full
      // start: Forward dependencies from q_full to transition NOT_u1_u1_778_sample_start_
      // done: Forward dependencies from q_full to transition NOT_u1_u1_778_sample_start_
      ;;[NOT_u1_u1_778_Sample] 
      {
        // unary expression 
        $T [rr] $T [ra] // (split) unary operation
      }
      ;;[NOT_u1_u1_778_Update] 
      {
        // unary expression 
        $T [cr] $T [ca] //(split) unary operation
      }
      NOT_u1_u1_778_sample_start_ &-> (NOT_u1_u1_778_Sample)
      NOT_u1_u1_778_sample_completed_ <-& (NOT_u1_u1_778_Sample)
      NOT_u1_u1_778_sample_completed_ &-> ($null)
      NOT_u1_u1_778_update_start_ &-> (NOT_u1_u1_778_Update)
      NOT_u1_u1_778_update_completed_ <-& (NOT_u1_u1_778_Update)
      // Target expression
      // (as target) status
      // status
      // write to interface object
      // start: WAR dependencies for status
      // done: WAR dependencies for status
      // status
      // write to interface object
      // end:  	status := ( ~ q_full ) $buffering 1// bits of buffering = 1. 
      // load-store dependencies..
      // pipe read/write dependencies for pipe MEMORY_TO_NIC_RESPONSE
      // read-dependencies for pipe MEMORY_TO_NIC_RESPONSE
      // write-dependencies for pipe MEMORY_TO_NIC_RESPONSE
      // signal write dependencies for MEMORY_TO_NIC_RESPONSE
      // pipe read/write dependencies for pipe NIC_TO_MEMORY_REQUEST
      // read-dependencies for pipe NIC_TO_MEMORY_REQUEST
      // write-dependencies for pipe NIC_TO_MEMORY_REQUEST
      // signal write dependencies for NIC_TO_MEMORY_REQUEST
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %pushIntoQueue
    //  file nic.linked.aa, line 300
    // 	$guard (lock) $call acquireMutex (q_base_address ) (m_ok ) 
    //  file nic.linked.aa, line 305
    // 	$call getQueuePointers (q_base_address ) (write_pointer read_pointer ) 
    //  file nic.linked.aa, line 307
    // 1 
    $constant $W[konst_752_wire_constant] : $int<32> := _b00000000000000000000000000000001// 1
    // QUEUE_SIZE_MASK
    $constant $W[R_QUEUE_SIZE_MASK_754_wire_constant] : $int<32> := _b00000000000000000000000100000000// 256
    // 	$guard (~q_full) $call setQueueElement (q_base_address write_pointer q_w_data ) () 
    //  file nic.linked.aa, line 310
    // 	$guard (~q_full) $call setQueuePointers (q_base_address write_pointer next_wp ) () 
    //  file nic.linked.aa, line 311
    // 	$guard (lock) $call releaseMutex (q_base_address ) () 
    //  file nic.linked.aa, line 313
    // 	$guard (lock) $call acquireMutex (q_base_address ) (m_ok ) 
    //  file nic.linked.aa, line 305
    // m_ok
    $W[m_ok_744] : $int<1>
    // 	$call getQueuePointers (q_base_address ) (write_pointer read_pointer ) 
    //  file nic.linked.aa, line 307
    // write_pointer
    $W[write_pointer_749] : $int<32>
    // read_pointer
    $W[read_pointer_749] : $int<32>
    // 	$volatile next_wp := ((write_pointer + 1 ) & QUEUE_SIZE_MASK) $buffering 1
    //  file nic.linked.aa, line 308
    // (write_pointer + 1 )
    $intermediate $W[ADD_u32_u32_753_wire] : $int<32>
    // next_wp
    $W[next_wp_756] : $int<32>
    // 	$volatile q_full := (next_wp == read_pointer) $buffering 1
    //  file nic.linked.aa, line 309
    // q_full
    $W[q_full_761] : $int<1>
    // 	$guard (~q_full) $call setQueueElement (q_base_address write_pointer q_w_data ) () 
    //  file nic.linked.aa, line 310
    // 	$guard (~q_full) $call setQueuePointers (q_base_address write_pointer next_wp ) () 
    //  file nic.linked.aa, line 311
    // 	$guard (lock) $call releaseMutex (q_base_address ) () 
    //  file nic.linked.aa, line 313
    // 	status := ( ~ q_full ) $buffering 1// bits of buffering = 1. 
    //  file nic.linked.aa, line 314
    // status
    // 	$guard (lock) $call acquireMutex (q_base_address ) (m_ok ) 
    //  file nic.linked.aa, line 305
    $call [call_stmt_744_call] $module acquireMutex(q_base_address) (m_ok_744) $guard ( lock )  
    $delay call_stmt_744_call 4
    $buffering  $in call_stmt_744_call q_base_address 1
    $buffering  $out call_stmt_744_call m_ok_744 1
    // 	$call getQueuePointers (q_base_address ) (write_pointer read_pointer ) 
    //  file nic.linked.aa, line 307
    $call [call_stmt_749_call] $module getQueuePointers(q_base_address) (write_pointer_749 read_pointer_749)  
    $delay call_stmt_749_call 4
    $buffering  $in call_stmt_749_call q_base_address 1
    $buffering  $out call_stmt_749_call write_pointer_749 1
    $buffering  $out call_stmt_749_call read_pointer_749 1
    // 	$volatile next_wp := ((write_pointer + 1 ) & QUEUE_SIZE_MASK) $buffering 1
    //  file nic.linked.aa, line 308
    // (write_pointer + 1 )
    +[ADD_u32_u32_753_inst] (write_pointer_749 konst_752_wire_constant) (ADD_u32_u32_753_wire)   $flowthrough 
    $delay ADD_u32_u32_753_inst 0
    // ((write_pointer + 1 ) & QUEUE_SIZE_MASK)
    &[AND_u32_u32_755_inst] (ADD_u32_u32_753_wire R_QUEUE_SIZE_MASK_754_wire_constant) (next_wp_756)   $flowthrough 
    $delay AND_u32_u32_755_inst 0
    // 	$volatile q_full := (next_wp == read_pointer) $buffering 1
    //  file nic.linked.aa, line 309
    // (next_wp == read_pointer)
    ==[EQ_u32_u1_760_inst] (next_wp_756 read_pointer_749) (q_full_761)   $flowthrough 
    $delay EQ_u32_u1_760_inst 0
    // 	$guard (~q_full) $call setQueueElement (q_base_address write_pointer q_w_data ) () 
    //  file nic.linked.aa, line 310
    $call [call_stmt_766_call] $module setQueueElement(q_base_address write_pointer_749 q_w_data) () $guard ( ~ q_full_761 )  
    $delay call_stmt_766_call 4
    $buffering  $in call_stmt_766_call q_base_address 1
    $buffering  $in call_stmt_766_call write_pointer_749 1
    $buffering  $in call_stmt_766_call q_w_data 1
    // 	$guard (~q_full) $call setQueuePointers (q_base_address write_pointer next_wp ) () 
    //  file nic.linked.aa, line 311
    $call [call_stmt_771_call] $module setQueuePointers(q_base_address write_pointer_749 next_wp_756) () $guard ( ~ q_full_761 )  
    $delay call_stmt_771_call 4
    $buffering  $in call_stmt_771_call q_base_address 1
    $buffering  $in call_stmt_771_call write_pointer_749 1
    $buffering  $in call_stmt_771_call next_wp_756 1
    // 	$guard (lock) $call releaseMutex (q_base_address ) () 
    //  file nic.linked.aa, line 313
    $call [call_stmt_775_call] $module releaseMutex(q_base_address) () $guard ( lock )  
    $delay call_stmt_775_call 4
    $buffering  $in call_stmt_775_call q_base_address 1
    // 	status := ( ~ q_full ) $buffering 1// bits of buffering = 1. 
    //  file nic.linked.aa, line 314
    // ( ~ q_full )
    ~ [NOT_u1_u1_778_inst] (q_full_761) (status)  
    $buffering  $out NOT_u1_u1_778_inst status 1
    $delay NOT_u1_u1_778_inst 1
  }
  // end data-path
  // 	$guard (lock) $call acquireMutex (q_base_address ) (m_ok ) 
  //  file nic.linked.aa, line 305
  // q_base_address
  call_stmt_744_call <=> (call_stmt_744/call_stmt_744_Sample/crr call_stmt_744/call_stmt_744_Update/ccr) (call_stmt_744/call_stmt_744_Sample/cra call_stmt_744/call_stmt_744_Update/cca)
  // 	$call getQueuePointers (q_base_address ) (write_pointer read_pointer ) 
  //  file nic.linked.aa, line 307
  // q_base_address
  call_stmt_749_call <=> (call_stmt_749_to_call_stmt_771/call_stmt_749_Sample/crr call_stmt_749_to_call_stmt_771/call_stmt_749_Update/ccr) (call_stmt_749_to_call_stmt_771/call_stmt_749_Sample/cra call_stmt_749_to_call_stmt_771/call_stmt_749_Update/cca)
  // 	$volatile next_wp := ((write_pointer + 1 ) & QUEUE_SIZE_MASK) $buffering 1
  //  file nic.linked.aa, line 308
  // ((write_pointer + 1 ) & QUEUE_SIZE_MASK)
  // (write_pointer + 1 )
  // write_pointer
  // 	$volatile q_full := (next_wp == read_pointer) $buffering 1
  //  file nic.linked.aa, line 309
  // (next_wp == read_pointer)
  // next_wp
  // read_pointer
  // 	$guard (~q_full) $call setQueueElement (q_base_address write_pointer q_w_data ) () 
  //  file nic.linked.aa, line 310
  // q_base_address
  // write_pointer
  // q_w_data
  call_stmt_766_call <=> (call_stmt_749_to_call_stmt_771/call_stmt_766_Sample/crr call_stmt_749_to_call_stmt_771/call_stmt_766_Update/ccr) (call_stmt_749_to_call_stmt_771/call_stmt_766_Sample/cra call_stmt_749_to_call_stmt_771/call_stmt_766_Update/cca)
  // 	$guard (~q_full) $call setQueuePointers (q_base_address write_pointer next_wp ) () 
  //  file nic.linked.aa, line 311
  // q_base_address
  // write_pointer
  // next_wp
  call_stmt_771_call <=> (call_stmt_749_to_call_stmt_771/call_stmt_771_Sample/crr call_stmt_749_to_call_stmt_771/call_stmt_771_Update/ccr) (call_stmt_749_to_call_stmt_771/call_stmt_771_Sample/cra call_stmt_749_to_call_stmt_771/call_stmt_771_Update/cca)
  // 	$guard (lock) $call releaseMutex (q_base_address ) () 
  //  file nic.linked.aa, line 313
  // q_base_address
  call_stmt_775_call <=> (call_stmt_775_to_assign_stmt_779/call_stmt_775_Sample/crr call_stmt_775_to_assign_stmt_779/call_stmt_775_Update/ccr) (call_stmt_775_to_assign_stmt_779/call_stmt_775_Sample/cra call_stmt_775_to_assign_stmt_779/call_stmt_775_Update/cca)
  // 	status := ( ~ q_full ) $buffering 1// bits of buffering = 1. 
  //  file nic.linked.aa, line 314
  // q_full
  // ( ~ q_full )
  NOT_u1_u1_778_inst <=> (call_stmt_775_to_assign_stmt_779/NOT_u1_u1_778_Sample/rr call_stmt_775_to_assign_stmt_779/NOT_u1_u1_778_Update/cr) (call_stmt_775_to_assign_stmt_779/NOT_u1_u1_778_Sample/ra call_stmt_775_to_assign_stmt_779/NOT_u1_u1_778_Update/ca)
}
$operator $module [delay_time] 
{
  $in T:$int<32>
  // can point into 
  $out delay_done:$int<1> := _b1
  // can point into 
  // pipe-declarations for block %delay_time
  //  file nic.linked.aa, line 316
  // pipe-declarations for block %delay_time%loop
  //  file nic.linked.aa, line 321
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    <>[branch_block_stmt_784] // Branch Block  file nic.linked.aa, line 321
    {
      $P [branch_block_stmt_784__entry__]
      branch_block_stmt_784__entry__ <-| ($entry)
      $P [branch_block_stmt_784__exit__]
      branch_block_stmt_784__exit__ |-> ($exit)
      $P [do_while_stmt_785__entry__] 
      $P [do_while_stmt_785__exit__] 
      $P [assign_stmt_803__entry__] 
      $P [assign_stmt_803__exit__] 
      // do-while-statement  
      //  file nic.linked.aa, line 323
      <o> [do_while_stmt_785]  $depth 7 $buffering 1 
      {
        $P[do_while_stmt_785__entry__] 
        $P[do_while_stmt_785__exit__] 
        $P[loop_back] 
        $P[condition_done] 
        $P[loop_body_done] 
        $pipeline [do_while_stmt_785_loop_body] 
        {
          // Pipelined!
          $T[back_edge_to_loop_body] 
          $T[first_time_through_loop_body] 
          $T[loop_body_start] 
          $T[condition_evaluated] 
          $transitionmerge [entry_tmerge] (back_edge_to_loop_body first_time_through_loop_body) (loop_body_start)
          $entry <-& (loop_body_start)
          $T[aggregated_phi_sample_req] 
          $T[aggregated_phi_sample_ack] 
          $T[aggregated_phi_update_req] 
          $T[aggregated_phi_update_ack] 
          // do not loop-back unless all phi's have used up their triggering tokens.
          condition_evaluated <-& (aggregated_phi_update_ack)
          aggregated_phi_sample_req o<-& (aggregated_phi_update_ack 0)
          // start:  PHI statement phi_stmt_787
          // 			$phi R := 			  T $on   $entry 			  nR $on   $loopback 
          // type of target is $uint<32>
          $T[phi_stmt_787_sample_start_] 
          $T[phi_stmt_787_sample_completed_] 
          $T[phi_stmt_787_update_start_] 
          $T[phi_stmt_787_update_completed_] 
          $T[phi_stmt_787_sample_start__ps] 
          phi_stmt_787_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_787_sample_completed__ps] 
          phi_stmt_787_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_787_update_start__ps] 
          phi_stmt_787_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_787_update_completed__ps] 
          phi_stmt_787_update_completed_ <-& (phi_stmt_787_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_787_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_787_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_787_update_start_)
          $T[phi_stmt_787_loopback_trigger] 
          phi_stmt_787_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_787_loopback_sample_req] 
          $T[phi_stmt_787_loopback_sample_req_ps] 
          phi_stmt_787_loopback_sample_req <-& (phi_stmt_787_loopback_sample_req_ps)
          phi_stmt_787_loopback_sample_req &-> ($null)
          $T[phi_stmt_787_entry_trigger] 
          phi_stmt_787_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_787_entry_sample_req] 
          $T[phi_stmt_787_entry_sample_req_ps] 
          phi_stmt_787_entry_sample_req <-& (phi_stmt_787_entry_sample_req_ps)
          phi_stmt_787_entry_sample_req &-> ($null)
          phi_stmt_787_update_start_ o<-& (phi_stmt_787_update_completed_ 0)
          phi_stmt_787_sample_start_ o<-& (phi_stmt_787_sample_completed_ 1)
          $T[phi_stmt_787_merged_reqs] 
          $T[phi_stmt_787_phi_mux_ack] 
          $T[phi_stmt_787_phi_mux_ack_ps] 
          phi_stmt_787_phi_mux_ack_ps <-& (phi_stmt_787_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_787_update_completed_)
          $T[R_T_789_sample_start__ps] 
          $T[R_T_789_sample_completed__ps] 
          $T[R_T_789_update_start__ps] 
          $T[R_T_789_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 0
          $T[R_T_789_sample_start_] 
          $T[R_T_789_sample_completed_] 
          $T[R_T_789_update_start_] 
          $T[R_T_789_update_completed_] 
          ;;[R_T_789_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_T_789_sample_start_ &-> (R_T_789_Sample)
          R_T_789_sample_completed_ <-& (R_T_789_Sample)
          ;;[R_T_789_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_T_789_update_start_ &-> (R_T_789_Update)
          R_T_789_update_completed_ <-& (R_T_789_Update)
          // RAW reenables for T
          // Phi start dependency for implicit/constant alternative.
          R_T_789_sample_start_ <-& (R_T_789_sample_start__ps)
          R_T_789_update_start_ <-& (R_T_789_update_start__ps)
          // Phi complete dependency.
          R_T_789_sample_completed__ps <-& (R_T_789_sample_completed_)
          R_T_789_update_completed__ps <-& (R_T_789_update_completed_)
          $T[R_nR_790_sample_start__ps] 
          $T[R_nR_790_sample_completed__ps] 
          $T[R_nR_790_update_start__ps] 
          $T[R_nR_790_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_nR_790_sample_start_] 
          $T[R_nR_790_sample_completed_] 
          $T[R_nR_790_update_start_] 
          $T[R_nR_790_update_completed_] 
          ;;[R_nR_790_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_nR_790_sample_start_ &-> (R_nR_790_Sample)
          R_nR_790_sample_completed_ <-& (R_nR_790_Sample)
          ;;[R_nR_790_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_nR_790_update_start_ &-> (R_nR_790_Update)
          R_nR_790_update_completed_ <-& (R_nR_790_Update)
          // RAW reenables for nR
          // Phi start dependency for implicit/constant alternative.
          R_nR_790_sample_start_ <-& (R_nR_790_sample_start__ps)
          R_nR_790_update_start_ <-& (R_nR_790_update_start__ps)
          // Phi complete dependency.
          R_nR_790_sample_completed__ps <-& (R_nR_790_sample_completed_)
          R_nR_790_update_completed__ps <-& (R_nR_790_update_completed_)
          $phisequencer [ phi_stmt_787_phi_seq] : 
          phi_stmt_787_entry_trigger R_T_789_sample_start__ps R_T_789_sample_completed__ps R_T_789_update_start__ps R_T_789_update_completed__ps phi_stmt_787_loopback_trigger R_nR_790_sample_start__ps R_nR_790_sample_completed__ps R_nR_790_update_start__ps R_nR_790_update_completed__ps :
          phi_stmt_787_sample_start__ps phi_stmt_787_sample_completed__ps phi_stmt_787_update_start__ps phi_stmt_787_update_completed__ps :
          phi_stmt_787_entry_sample_req_ps phi_stmt_787_loopback_sample_req_ps : 
          phi_stmt_787_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_787
          // start: WAR dependencies for nR
          // WAR dependency: Read: nR before Write: 			$volatile nR := (R - 1 ) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for nR
          // start:  			$volatile nR := (R - 1 ) $buffering 1
          //  file nic.linked.aa, line 329
          // volatile! 
          // Source expression
          // (R - 1 )
          // R
          // Target expression
          // (as target) nR
          // start: WAR dependencies for nR
          // WAR dependency: Read: nR before Write: 			$volatile nR := (R - 1 ) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for nR
          // end:  			$volatile nR := (R - 1 ) $buffering 1
          // (R > 0 )
          // R
          $T [loop_body_delay_to_condition_start] $delay
          loop_body_start &-> (loop_body_delay_to_condition_start)
          loop_body_delay_to_condition_start &-> (condition_evaluated)
          // start: Forward dependencies from (R > 0 ) to transition condition_evaluated
          condition_evaluated <-& (phi_stmt_787_update_completed_)
          // done: Forward dependencies from (R > 0 ) to transition condition_evaluated
          condition_evaluated &-> ($null)
          // load-store dependencies..
        }
        ( first_time_through_loop_body  back_edge_to_loop_body) 
        ( condition_evaluated )
        ;; [loop_exit] 
        {
          $T [ack] 
        }
        ;; [loop_taken] 
        {
          $T [ack] 
        }
        do_while_stmt_785__entry__ <-| ($entry)
        loop_body_done <-| ( do_while_stmt_785_loop_body ) 
        condition_done |-> (loop_exit loop_taken)
        do_while_stmt_785__exit__ |-> ($exit)
        $bind condition_done <= do_while_stmt_785_loop_body : condition_evaluated
        $bind do_while_stmt_785__entry__  => do_while_stmt_785_loop_body : first_time_through_loop_body 
        $bind loop_back  => do_while_stmt_785_loop_body : back_edge_to_loop_body 
        $terminate (loop_exit loop_taken loop_body_done) (loop_back do_while_stmt_785__exit__)
      }
      do_while_stmt_785__entry__ |-> (do_while_stmt_785)
      do_while_stmt_785__exit__ <-| (do_while_stmt_785)
      ::[assign_stmt_803] 
      {
        // start:  		$volatile delay_done := 1  $buffering 1
        //  file nic.linked.aa, line 331
        // constant! 
        // delay_done
        // write to interface object
        // end:  		$volatile delay_done := 1  $buffering 1
        // load-store dependencies..
      }
      assign_stmt_803__entry__ |-> (assign_stmt_803)
      assign_stmt_803__exit__ <-| (assign_stmt_803)
      do_while_stmt_785__entry__ <-| (branch_block_stmt_784__entry__)
      assign_stmt_803__entry__ <-| (do_while_stmt_785__exit__)
      assign_stmt_803__exit__ |-> (branch_block_stmt_784__exit__)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %delay_time%loop%
    //  file nic.linked.aa, line 325
    // constant-object-declarations for block %delay_time%loop
    //  file nic.linked.aa, line 321
    // constant-object-declarations for block %delay_time
    //  file nic.linked.aa, line 316
    // constant-declarations for block %delay_time%loop
    //  file nic.linked.aa, line 321
    // do-while statement  
    //  file nic.linked.aa, line 323
    // 0 
    $constant $W[konst_799_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // constant-declarations for block %delay_time%loop%
    //  file nic.linked.aa, line 325
    // constant-declarations for phi:  			$phi R := 			  T $on   $entry 			  nR $on   $loopback 
    // type of target is $uint<32>
    //  file nic.linked.aa, line 326
    // 1 
    $constant $W[konst_794_wire_constant] : $int<32> := _b00000000000000000000000000000001// 1
    // 		$volatile delay_done := 1  $buffering 1
    //  file nic.linked.aa, line 331
    // block %delay_time%loop
    //  file nic.linked.aa, line 321
    // do-while statement  
    //  file nic.linked.aa, line 323
    // (R > 0 )
    $intermediate $W[UGT_u32_u1_800_wire] : $int<1>
    // merge-statement  
    //  file nic.linked.aa, line 325
    // 			$phi R := 			  T $on   $entry 			  nR $on   $loopback 
    // type of target is $uint<32>
    //  file nic.linked.aa, line 326
    $W[T_789_buffered] : $int<32>
    $W[nR_796_790_buffered] : $int<32>
    // R
    $W[R_787] : $int<32>
    // 			$volatile nR := (R - 1 ) $buffering 1
    //  file nic.linked.aa, line 329
    // nR
    $W[nR_796] : $int<32>
    // datapath-instances for block %delay_time%loop
    //  file nic.linked.aa, line 321
    // datapath-instances for do-while  
    //  file nic.linked.aa, line 323
    // (R > 0 )
    >[UGT_u32_u1_800_inst] (R_787 konst_799_wire_constant) (UGT_u32_u1_800_wire)   $flowthrough 
    $delay UGT_u32_u1_800_inst 0
    ==0? [do_while_stmt_785_branch] (UGT_u32_u1_800_wire)
    $flowthrough
    // data-path instances for merge  
    //  file nic.linked.aa, line 325
    // 			$phi R := 			  T $on   $entry 			  nR $on   $loopback 
    // type of target is $uint<32>
    //  file nic.linked.aa, line 326
    # := [T_789_buf] (T) (T_789_buffered)     $fullrate
    $buffering $out T_789_buf T_789_buffered  1
    # := [nR_796_790_buf] (nR_796) (nR_796_790_buffered)     $fullrate
    $buffering $out nR_796_790_buf nR_796_790_buffered  1
    # $phi [phi_stmt_787] (T_789_buffered nR_796_790_buffered) ( R_787 ) $fullrate
    // $buffering  $out phi_stmt_787 R_787 2
    // 			$volatile nR := (R - 1 ) $buffering 1
    //  file nic.linked.aa, line 329
    // (R - 1 )
    -[SUB_u32_u32_795_inst] (R_787 konst_794_wire_constant) (nR_796)   $flowthrough 
    $delay SUB_u32_u32_795_inst 0
  }
  // end data-path
  // CP-DP links for do-while  do_while_stmt_785
  //  file nic.linked.aa, line 323
  phi_stmt_787 <=> (branch_block_stmt_784/do_while_stmt_785/do_while_stmt_785_loop_body/phi_stmt_787_entry_sample_req branch_block_stmt_784/do_while_stmt_785/do_while_stmt_785_loop_body/phi_stmt_787_loopback_sample_req) (branch_block_stmt_784/do_while_stmt_785/do_while_stmt_785_loop_body/phi_stmt_787_phi_mux_ack)
  T_789_buf <=> (branch_block_stmt_784/do_while_stmt_785/do_while_stmt_785_loop_body/R_T_789_Sample/req branch_block_stmt_784/do_while_stmt_785/do_while_stmt_785_loop_body/R_T_789_Update/req) (branch_block_stmt_784/do_while_stmt_785/do_while_stmt_785_loop_body/R_T_789_Sample/ack branch_block_stmt_784/do_while_stmt_785/do_while_stmt_785_loop_body/R_T_789_Update/ack)
  nR_796_790_buf <=> (branch_block_stmt_784/do_while_stmt_785/do_while_stmt_785_loop_body/R_nR_790_Sample/req branch_block_stmt_784/do_while_stmt_785/do_while_stmt_785_loop_body/R_nR_790_Update/req) (branch_block_stmt_784/do_while_stmt_785/do_while_stmt_785_loop_body/R_nR_790_Sample/ack branch_block_stmt_784/do_while_stmt_785/do_while_stmt_785_loop_body/R_nR_790_Update/ack)
  // 			$volatile nR := (R - 1 ) $buffering 1
  //  file nic.linked.aa, line 329
  // (R - 1 )
  // R
  // (R > 0 )
  // R
  do_while_stmt_785_branch <=> (branch_block_stmt_784/do_while_stmt_785/do_while_stmt_785_loop_body/condition_evaluated) (branch_block_stmt_784/do_while_stmt_785/loop_exit/ack branch_block_stmt_784/do_while_stmt_785/loop_taken/ack)
}
$module [populateRxQueue] 
{
  $in rx_buffer_pointer:$int<36>
  // can point into 
  // pipe-declarations for block %populateRxQueue
  //  file nic.linked.aa, line 334
  // pipe-declarations for block %populateRxQueue%PushIntoQueue
  //  file nic.linked.aa, line 339
  // pipe-declarations for block %populateRxQueue%PushIntoQueue%
  //  file nic.linked.aa, line 341
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    <>[branch_block_stmt_808] // Branch Block  file nic.linked.aa, line 339
    {
      $P [branch_block_stmt_808__entry__]
      branch_block_stmt_808__entry__ <-| ($entry)
      $P [branch_block_stmt_808__exit__]
      branch_block_stmt_808__exit__ |-> ($exit)
      $P [merge_stmt_809__entry__] 
      $P [merge_stmt_809__exit__] 
      $P [assign_stmt_822_to_assign_stmt_854__entry__] 
      $P [assign_stmt_822_to_assign_stmt_854__exit__] 
      $P [if_stmt_855__entry__] 
      $P [if_stmt_855__exit__] 
      ::[assign_stmt_822_to_assign_stmt_854] 
      {
        // start: WAR dependencies for register_index
        // ignored out-of-scope w_root 			$phi q_index := 			  (LAST_WRITTEN_RX_QUEUE_INDEX + 1 ) $on   $entry 			  n_q_index $on   loopback 
        // type of target is $uint<6>
        // done: WAR dependencies for register_index
        // start:  		$volatile register_index := ($bitcast ($uint<6>) (q_index + RX_QUEUES_REG_START_OFFSET) ) $buffering 1
        //  file nic.linked.aa, line 345
        // volatile! 
        // Source expression
        // ($bitcast ($uint<6>) (q_index + RX_QUEUES_REG_START_OFFSET) )
        // (q_index + RX_QUEUES_REG_START_OFFSET)
        // q_index
        // Target expression
        // (as target) register_index
        // start: WAR dependencies for register_index
        // ignored out-of-scope w_root 			$phi q_index := 			  (LAST_WRITTEN_RX_QUEUE_INDEX + 1 ) $on   $entry 			  n_q_index $on   loopback 
        // type of target is $uint<6>
        // done: WAR dependencies for register_index
        // end:  		$volatile register_index := ($bitcast ($uint<6>) (q_index + RX_QUEUES_REG_START_OFFSET) ) $buffering 1
        // start: 		$call AccessRegister (($bitcast ($uint<1>) _b1  ) ($bitcast ($uint<4>) _b1  ) register_index ($bitcast ($uint<32>) _b0  ) ) (rx_queue_pointer_32 ) 
        //  file nic.linked.aa, line 346
        $T[call_stmt_831_sample_start_] 
        $T[call_stmt_831_sample_completed_] 
        $T[call_stmt_831_update_start_] 
        $T[call_stmt_831_update_completed_] 
        // Call input argument 0
        // Call input argument 1
        // Call input argument 2
        // register_index
        // Call input argument 3
        // start: Forward dependencies from register_index to transition call_stmt_831_sample_start_
        // done: Forward dependencies from register_index to transition call_stmt_831_sample_start_
        ;;[call_stmt_831_Sample] 
        {
          $T [crr] $T [cra] 
        }
        ;;[call_stmt_831_Update] 
        {
          $T [ccr] $T [cca] 
        }
        call_stmt_831_sample_start_ &-> (call_stmt_831_Sample)
        call_stmt_831_sample_completed_ <-& (call_stmt_831_Sample)
        call_stmt_831_sample_completed_ &-> ($null)
        call_stmt_831_update_start_ &-> (call_stmt_831_Update)
        call_stmt_831_update_completed_ <-& (call_stmt_831_Update)
        // Call output argument 0
        // (as target) rx_queue_pointer_32
        // start: WAR dependencies for rx_queue_pointer_32
        // done: WAR dependencies for rx_queue_pointer_32
        // end: 		$call AccessRegister (($bitcast ($uint<1>) _b1  ) ($bitcast ($uint<4>) _b1  ) register_index ($bitcast ($uint<32>) _b0  ) ) (rx_queue_pointer_32 ) 
        // start: WAR dependencies for rx_queue_pointer_36
        // done: WAR dependencies for rx_queue_pointer_36
        // start:  		$volatile rx_queue_pointer_36 := (rx_queue_pointer_32 && ($bitcast ($uint<4>) _b0  )) $buffering 1
        //  file nic.linked.aa, line 347
        // volatile! 
        // Source expression
        // (rx_queue_pointer_32 && ($bitcast ($uint<4>) _b0  ))
        // rx_queue_pointer_32
        // Target expression
        // (as target) rx_queue_pointer_36
        // start: WAR dependencies for rx_queue_pointer_36
        // done: WAR dependencies for rx_queue_pointer_36
        // end:  		$volatile rx_queue_pointer_36 := (rx_queue_pointer_32 && ($bitcast ($uint<4>) _b0  )) $buffering 1
        // start: 		$call pushIntoQueue (($bitcast ($uint<1>) _b0  ) rx_queue_pointer_36 ( $slice rx_buffer_pointer 35 4 )  ) (push_status ) 
        //  file nic.linked.aa, line 348
        $T[call_stmt_844_sample_start_] 
        $T[call_stmt_844_sample_completed_] 
        $T[call_stmt_844_update_start_] 
        $T[call_stmt_844_update_completed_] 
        // Call input argument 0
        // Call input argument 1
        // rx_queue_pointer_36
        // Call input argument 2
        // ( $slice rx_buffer_pointer 35 4 ) 
        // rx_buffer_pointer
        // start: Forward dependencies from rx_queue_pointer_36 to transition call_stmt_844_sample_start_
        call_stmt_844_sample_start_ <-& (call_stmt_831_update_completed_)
        // done: Forward dependencies from rx_queue_pointer_36 to transition call_stmt_844_sample_start_
        // start: Forward dependencies from ( $slice rx_buffer_pointer 35 4 )  to transition call_stmt_844_sample_start_
        // done: Forward dependencies from ( $slice rx_buffer_pointer 35 4 )  to transition call_stmt_844_sample_start_
        ;;[call_stmt_844_Sample] 
        {
          $T [crr] $T [cra] 
        }
        ;;[call_stmt_844_Update] 
        {
          $T [ccr] $T [cca] 
        }
        call_stmt_844_sample_start_ &-> (call_stmt_844_Sample)
        call_stmt_844_sample_completed_ <-& (call_stmt_844_Sample)
        call_stmt_844_sample_completed_ &-> ($null)
        call_stmt_844_update_start_ &-> (call_stmt_844_Update)
        call_stmt_844_update_completed_ <-& (call_stmt_844_Update)
        // Call output argument 0
        // (as target) push_status
        // start: WAR dependencies for push_status
        // done: WAR dependencies for push_status
        // end: 		$call pushIntoQueue (($bitcast ($uint<1>) _b0  ) rx_queue_pointer_36 ( $slice rx_buffer_pointer 35 4 )  ) (push_status ) 
        // start:  		n_q_index := ((q_index + 1 ) & ($bitcast ($uint<6>) (NUMBER_OF_SERVERS - 1 ) )) $buffering 1// bits of buffering = 6. 
        //  file nic.linked.aa, line 349
        // Source expression
        // ((q_index + 1 ) & ($bitcast ($uint<6>) (NUMBER_OF_SERVERS - 1 ) ))
        $T[AND_u6_u6_853_sample_start_] 
        $T[AND_u6_u6_853_sample_completed_] 
        $T[AND_u6_u6_853_update_start_] 
        $T[AND_u6_u6_853_update_completed_] 
        // (q_index + 1 )
        // q_index
        // ($bitcast ($uint<6>) (NUMBER_OF_SERVERS - 1 ) )
        // (NUMBER_OF_SERVERS - 1 )
        // NUMBER_OF_SERVERS
        // start: Forward dependencies from (q_index + 1 ) to transition AND_u6_u6_853_sample_start_
        // done: Forward dependencies from (q_index + 1 ) to transition AND_u6_u6_853_sample_start_
        // start: Forward dependencies from ($bitcast ($uint<6>) (NUMBER_OF_SERVERS - 1 ) ) to transition AND_u6_u6_853_sample_start_
        // non-constant expression which depends only on signals/constants?
        // done: Forward dependencies from ($bitcast ($uint<6>) (NUMBER_OF_SERVERS - 1 ) ) to transition AND_u6_u6_853_sample_start_
        ;;[AND_u6_u6_853_Sample] 
        {
          // binary expression 
          $T [rr] $T [ra]  // (split) binary operation 
        }
        ;;[AND_u6_u6_853_Update] 
        {
          // binary expression 
          $T [cr] $T [ca] // (split) binary operation 
        }
        AND_u6_u6_853_sample_start_ &-> (AND_u6_u6_853_Sample)
        AND_u6_u6_853_sample_completed_ <-& (AND_u6_u6_853_Sample)
        AND_u6_u6_853_sample_completed_ &-> ($null)
        AND_u6_u6_853_update_start_ &-> (AND_u6_u6_853_Update)
        AND_u6_u6_853_update_completed_ <-& (AND_u6_u6_853_Update)
        // Target expression
        // (as target) n_q_index
        // start: WAR dependencies for n_q_index
        // done: WAR dependencies for n_q_index
        // end:  		n_q_index := ((q_index + 1 ) & ($bitcast ($uint<6>) (NUMBER_OF_SERVERS - 1 ) )) $buffering 1// bits of buffering = 6. 
        // load-store dependencies..
        // pipe read/write dependencies for pipe MEMORY_TO_NIC_RESPONSE
        // read-dependencies for pipe MEMORY_TO_NIC_RESPONSE
        // write-dependencies for pipe MEMORY_TO_NIC_RESPONSE
        // signal write dependencies for MEMORY_TO_NIC_RESPONSE
        // pipe read/write dependencies for pipe NIC_REQUEST_REGISTER_ACCESS_PIPE
        // read-dependencies for pipe NIC_REQUEST_REGISTER_ACCESS_PIPE
        // write-dependencies for pipe NIC_REQUEST_REGISTER_ACCESS_PIPE
        // signal write dependencies for NIC_REQUEST_REGISTER_ACCESS_PIPE
        // pipe read/write dependencies for pipe NIC_RESPONSE_REGISTER_ACCESS_PIPE
        // read-dependencies for pipe NIC_RESPONSE_REGISTER_ACCESS_PIPE
        // write-dependencies for pipe NIC_RESPONSE_REGISTER_ACCESS_PIPE
        // signal write dependencies for NIC_RESPONSE_REGISTER_ACCESS_PIPE
        // pipe read/write dependencies for pipe NIC_TO_MEMORY_REQUEST
        // read-dependencies for pipe NIC_TO_MEMORY_REQUEST
        // write-dependencies for pipe NIC_TO_MEMORY_REQUEST
        // signal write dependencies for NIC_TO_MEMORY_REQUEST
      }
      assign_stmt_822_to_assign_stmt_854__entry__ |-> (assign_stmt_822_to_assign_stmt_854)
      assign_stmt_822_to_assign_stmt_854__exit__ <-| (assign_stmt_822_to_assign_stmt_854)
      // if-statement  
      //  file nic.linked.aa, line 350
      ;;[if_stmt_855_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      if_stmt_855__entry__ |-> (if_stmt_855_dead_link)
      if_stmt_855__exit__ <-| (if_stmt_855_dead_link)
      ;;[if_stmt_855_eval_test] 
      {
        // test expression evaluate and trigger branch 
        // ( ~ push_status )
        ;;[NOT_u1_u1_857] 
        {
          // unary expression 
          // flow-through
          ;;[SplitProtocol] 
          {
            ;;[Sample] 
            {
              $T [rr] $T [ra]
            }
            ;;[Update] 
            {
              $T [cr] $T [ca]
            }
          }
        }
        $T [branch_req] 
      }
      if_stmt_855__entry__ |-> (if_stmt_855_eval_test)
      $P [NOT_u1_u1_857_place]
      NOT_u1_u1_857_place <-| (if_stmt_855_eval_test)
      ;;[if_stmt_855_if_link] 
      {
        $T [if_choice_transition] 
      }
      ;;[if_stmt_855_else_link] 
      {
        $T [else_choice_transition] 
      }
      NOT_u1_u1_857_place |-> (if_stmt_855_if_link if_stmt_855_else_link)
      $P [call_stmt_860__entry__] 
      $P [call_stmt_860__exit__] 
      $P [if_stmt_861__entry__] 
      $P [if_stmt_861__exit__] 
      ::[call_stmt_860] 
      {
        // start: 			$call delay_time (32  ) (status ) 
        //  file nic.linked.aa, line 351
        $T[call_stmt_860_sample_start_] 
        $T[call_stmt_860_sample_completed_] 
        $T[call_stmt_860_update_start_] 
        $T[call_stmt_860_update_completed_] 
        // Call input argument 0
        ;;[call_stmt_860_Sample] 
        {
          $T [crr] $T [cra] 
        }
        ;;[call_stmt_860_Update] 
        {
          $T [ccr] $T [cca] 
        }
        call_stmt_860_sample_start_ &-> (call_stmt_860_Sample)
        call_stmt_860_sample_completed_ <-& (call_stmt_860_Sample)
        call_stmt_860_sample_completed_ &-> ($null)
        call_stmt_860_update_start_ &-> (call_stmt_860_Update)
        call_stmt_860_update_completed_ <-& (call_stmt_860_Update)
        // Call output argument 0
        // (as target) status
        // start: WAR dependencies for status
        // done: WAR dependencies for status
        // end: 			$call delay_time (32  ) (status ) 
        // load-store dependencies..
      }
      call_stmt_860__entry__ |-> (call_stmt_860)
      call_stmt_860__exit__ <-| (call_stmt_860)
      // if-statement  
      //  file nic.linked.aa, line 1611905912
      ;;[if_stmt_861_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      if_stmt_861__entry__ |-> (if_stmt_861_dead_link)
      if_stmt_861__exit__ <-| (if_stmt_861_dead_link)
      ;;[if_stmt_861_eval_test] 
      {
        // test expression evaluate and trigger branch 
        // (status == 0 )
        ;;[EQ_u1_u1_864] 
        {
          // binary expression 
          ||[EQ_u1_u1_864_inputs] 
          {
          }
          // flow-through
          ;;[SplitProtocol] 
          {
            ;;[Sample] 
            {
              $T [rr] $T [ra]
            }
            ;;[Update] 
            {
              $T [cr] $T [ca]
            }
          }
        }
        $T [branch_req] 
      }
      if_stmt_861__entry__ |-> (if_stmt_861_eval_test)
      $P [EQ_u1_u1_864_place]
      EQ_u1_u1_864_place <-| (if_stmt_861_eval_test)
      ;;[if_stmt_861_if_link] 
      {
        $T [if_choice_transition] 
      }
      ;;[if_stmt_861_else_link] 
      {
        $T [else_choice_transition] 
      }
      EQ_u1_u1_864_place |-> (if_stmt_861_if_link if_stmt_861_else_link)
      $P [loopback]
      loopback <-| (if_stmt_861_if_link)
      if_stmt_861__exit__ <-| (if_stmt_861_else_link)
      call_stmt_860__entry__ <-| (if_stmt_855_if_link)
      if_stmt_861__entry__ <-| (call_stmt_860__exit__)
      if_stmt_861__exit__ |-> (if_stmt_855__exit__)
      $P [assign_stmt_870_to_assign_stmt_873__entry__] 
      $P [assign_stmt_870_to_assign_stmt_873__exit__] 
      ::[assign_stmt_870_to_assign_stmt_873] 
      {
        // start:  			LAST_WRITTEN_RX_QUEUE_INDEX := q_index $buffering 1// bits of buffering = 6. 
        //  file nic.linked.aa, line 356
        // Source expression
        // q_index
        // Target expression
        // (as target) LAST_WRITTEN_RX_QUEUE_INDEX
        $T[WPIPE_LAST_WRITTEN_RX_QUEUE_INDEX_868_sample_start_] 
        $T[WPIPE_LAST_WRITTEN_RX_QUEUE_INDEX_868_sample_completed_] 
        $T[WPIPE_LAST_WRITTEN_RX_QUEUE_INDEX_868_update_start_] 
        $T[WPIPE_LAST_WRITTEN_RX_QUEUE_INDEX_868_update_completed_] 
        ;;[WPIPE_LAST_WRITTEN_RX_QUEUE_INDEX_868_Sample] 
        {
          // pipe write sample-start LAST_WRITTEN_RX_QUEUE_INDEX
          $T [req] $T [ack] 
        }
        ;;[WPIPE_LAST_WRITTEN_RX_QUEUE_INDEX_868_Update] 
        {
          // pipe write update (complete) LAST_WRITTEN_RX_QUEUE_INDEX
          $T [req] $T [ack] 
        }
        WPIPE_LAST_WRITTEN_RX_QUEUE_INDEX_868_sample_start_ &-> (WPIPE_LAST_WRITTEN_RX_QUEUE_INDEX_868_Sample)
        WPIPE_LAST_WRITTEN_RX_QUEUE_INDEX_868_sample_completed_ <-& (WPIPE_LAST_WRITTEN_RX_QUEUE_INDEX_868_Sample)
        WPIPE_LAST_WRITTEN_RX_QUEUE_INDEX_868_update_start_ <-& (WPIPE_LAST_WRITTEN_RX_QUEUE_INDEX_868_sample_completed_)
        WPIPE_LAST_WRITTEN_RX_QUEUE_INDEX_868_update_start_ &-> (WPIPE_LAST_WRITTEN_RX_QUEUE_INDEX_868_Update)
        WPIPE_LAST_WRITTEN_RX_QUEUE_INDEX_868_update_completed_ <-& (WPIPE_LAST_WRITTEN_RX_QUEUE_INDEX_868_Update)
        // start: Forward dependencies from q_index to transition WPIPE_LAST_WRITTEN_RX_QUEUE_INDEX_868_sample_start_
        // done: Forward dependencies from q_index to transition WPIPE_LAST_WRITTEN_RX_QUEUE_INDEX_868_sample_start_
        // end:  			LAST_WRITTEN_RX_QUEUE_INDEX := q_index $buffering 1// bits of buffering = 6. 
        // start:  			selected_q_index := q_index $buffering 1// bits of buffering = 6.  Orphaned statement with target selected_q_index ?? 
        //  file nic.linked.aa, line 357
        $T[assign_stmt_873_sample_start_] 
        $T[assign_stmt_873_sample_completed_] 
        $T[assign_stmt_873_update_start_] 
        $T[assign_stmt_873_update_completed_] 
        // Source expression
        // q_index
        // Target expression
        // (as target) selected_q_index
        // both source and target are implicit: use interlock 
        // Interlock 
        ;;[assign_stmt_873_Sample] 
        {
          $T [req] $T [ack] // interlock-sample.
        }
        ;;[assign_stmt_873_Update] 
        {
          $T [req] $T [ack] // interlock-update.
        }
        assign_stmt_873_sample_start_ &-> (assign_stmt_873_Sample)
        assign_stmt_873_sample_completed_ <-& (assign_stmt_873_Sample)
        assign_stmt_873_sample_completed_ &-> ($null)
        assign_stmt_873_update_start_ &-> (assign_stmt_873_Update)
        assign_stmt_873_update_completed_ <-& (assign_stmt_873_Update)
        // start: Forward dependencies from q_index to transition assign_stmt_873_sample_start_
        // done: Forward dependencies from q_index to transition assign_stmt_873_sample_start_
        // start: WAR dependencies for selected_q_index
        // done: WAR dependencies for selected_q_index
        // end:  			selected_q_index := q_index $buffering 1// bits of buffering = 6.  Orphaned statement with target selected_q_index ?? 
        // load-store dependencies..
        // pipe read/write dependencies for pipe LAST_WRITTEN_RX_QUEUE_INDEX
        // read-dependencies for pipe LAST_WRITTEN_RX_QUEUE_INDEX
        // write-dependencies for pipe LAST_WRITTEN_RX_QUEUE_INDEX
        // signal write dependencies for LAST_WRITTEN_RX_QUEUE_INDEX
      }
      assign_stmt_870_to_assign_stmt_873__entry__ |-> (assign_stmt_870_to_assign_stmt_873)
      assign_stmt_870_to_assign_stmt_873__exit__ <-| (assign_stmt_870_to_assign_stmt_873)
      assign_stmt_870_to_assign_stmt_873__entry__ <-| (if_stmt_855_else_link)
      assign_stmt_870_to_assign_stmt_873__exit__ |-> (if_stmt_855__exit__)
      // control-path for merge  
      //  file nic.linked.aa, line 341
      ;;[merge_stmt_809_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      merge_stmt_809__entry__ |-> (merge_stmt_809_dead_link)
      merge_stmt_809__exit__ <-| (merge_stmt_809_dead_link)
      //---------------------   merge statement  file nic.linked.aa, line 341  --------------------------
      ||[merge_stmt_809__entry___PhiReq] 
      {
        ;;[phi_stmt_810] 
        {
          ||[phi_stmt_810_sources] 
          {
            // sources for 			$phi q_index := 			  (LAST_WRITTEN_RX_QUEUE_INDEX + 1 ) $on   $entry 			  n_q_index $on   loopback 
            // type of target is $uint<6>
            // trivial non-constant source .... interlock-buffer introduced 
            // (LAST_WRITTEN_RX_QUEUE_INDEX + 1 )
            ;;[ADD_u6_u6_814] 
            {
              // binary expression 
              ||[ADD_u6_u6_814_inputs] 
              {
                // LAST_WRITTEN_RX_QUEUE_INDEX
                ;;[RPIPE_LAST_WRITTEN_RX_QUEUE_INDEX_812] 
                {
                  // pipe read
                  ;;[Sample] 
                  {
                    $T [req] $T [ack] 
                  }
                  ;;[Update] 
                  {
                    $T [req] $T [ack] 
                  }
                }
              }
              ||[SplitProtocol] 
              {
                ;;[Sample] 
                {
                  $T [rr] $T [ra]
                }
                ;;[Update] 
                {
                  $T [cr] $T [ca]
                }
              }
            }
          }
          $T [phi_stmt_810_req] 
        }
      }
      merge_stmt_809__entry__ |-> (merge_stmt_809__entry___PhiReq)
      ||[loopback_PhiReq] 
      {
        ;;[phi_stmt_810] 
        {
          ||[phi_stmt_810_sources] 
          {
            // sources for 			$phi q_index := 			  (LAST_WRITTEN_RX_QUEUE_INDEX + 1 ) $on   $entry 			  n_q_index $on   loopback 
            // type of target is $uint<6>
            // trivial non-constant source .... interlock-buffer introduced 
            || [Interlock] 
            {
              ;;[Sample] 
              {
                $T [req] $T [ack]
              }
              ;;[Update] 
              {
                $T [req] $T [ack]
              }
            }
          }
          $T [phi_stmt_810_req] 
        }
      }
      loopback |-> (loopback_PhiReq)
      $P [merge_stmt_809_PhiReqMerge] 
      merge_stmt_809_PhiReqMerge <-| ( merge_stmt_809__entry___PhiReq  loopback_PhiReq )
      ||[merge_stmt_809_PhiAck] 
      {
        $T [phi_stmt_810_ack] 
      }
      merge_stmt_809_PhiReqMerge |-> (merge_stmt_809_PhiAck)
      merge_stmt_809__exit__  <-| (merge_stmt_809_PhiAck)
      //---------------------  end of merge statement  file nic.linked.aa, line 341  --------------------------
      merge_stmt_809__entry__ <-| (branch_block_stmt_808__entry__)
      assign_stmt_822_to_assign_stmt_854__entry__ <-| (merge_stmt_809__exit__)
      if_stmt_855__entry__ <-| (assign_stmt_822_to_assign_stmt_854__exit__)
      if_stmt_855__exit__ |-> (branch_block_stmt_808__exit__)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %populateRxQueue%PushIntoQueue%
    //  file nic.linked.aa, line 341
    // constant-object-declarations for block %populateRxQueue%PushIntoQueue
    //  file nic.linked.aa, line 339
    // constant-object-declarations for block %populateRxQueue
    //  file nic.linked.aa, line 334
    // constant-declarations for block %populateRxQueue%PushIntoQueue
    //  file nic.linked.aa, line 339
    // constant-declarations for block %populateRxQueue%PushIntoQueue%
    //  file nic.linked.aa, line 341
    // constant-declarations for phi:  			$phi q_index := 			  (LAST_WRITTEN_RX_QUEUE_INDEX + 1 ) $on   $entry 			  n_q_index $on   loopback 
    // type of target is $uint<6>
    //  file nic.linked.aa, line 342
    // 1 
    $constant $W[konst_813_wire_constant] : $int<6> := _b000001// 1
    // RX_QUEUES_REG_START_OFFSET
    $constant $W[R_RX_QUEUES_REG_START_OFFSET_819_wire_constant] : $int<6> := _b000010// 2
    // 		$call AccessRegister (($bitcast ($uint<1>) _b1  ) ($bitcast ($uint<4>) _b1  ) register_index ($bitcast ($uint<32>) _b0  ) ) (rx_queue_pointer_32 ) 
    //  file nic.linked.aa, line 346
    // ($bitcast ($uint<1>) _b1  )
    $constant $W[type_cast_824_wire_constant] : $int<1> := _b1// 1
    // ($bitcast ($uint<4>) _b1  )
    $constant $W[type_cast_826_wire_constant] : $int<4> := _b0001// 1
    // ($bitcast ($uint<32>) _b0  )
    $constant $W[type_cast_829_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // ($bitcast ($uint<4>) _b0  )
    $constant $W[type_cast_835_wire_constant] : $int<4> := _b0000// 0
    // 		$call pushIntoQueue (($bitcast ($uint<1>) _b0  ) rx_queue_pointer_36 ( $slice rx_buffer_pointer 35 4 )  ) (push_status ) 
    //  file nic.linked.aa, line 348
    // ($bitcast ($uint<1>) _b0  )
    $constant $W[type_cast_839_wire_constant] : $int<1> := _b0// 0
    // 1 
    $constant $W[konst_847_wire_constant] : $int<6> := _b000001// 1
    // 1 
    $constant $W[konst_850_wire_constant] : $int<32> := _b00000000000000000000000000000001// 1
    // if-statement  
    //  file nic.linked.aa, line 350
    // 			$call delay_time (32  ) (status ) 
    //  file nic.linked.aa, line 351
    // 32 
    $constant $W[konst_858_wire_constant] : $int<32> := _b00000000000000000000000000100000// 32
    // if-statement  
    //  file nic.linked.aa, line 1611905912
    // 0 
    $constant $W[konst_863_wire_constant] : $int<1> := _b0// 0
    // block %populateRxQueue%PushIntoQueue
    //  file nic.linked.aa, line 339
    // merge-statement  
    //  file nic.linked.aa, line 341
    // 			$phi q_index := 			  (LAST_WRITTEN_RX_QUEUE_INDEX + 1 ) $on   $entry 			  n_q_index $on   loopback 
    // type of target is $uint<6>
    //  file nic.linked.aa, line 342
    // LAST_WRITTEN_RX_QUEUE_INDEX
    $W[RPIPE_LAST_WRITTEN_RX_QUEUE_INDEX_812_wire] : $int<6>
    // (LAST_WRITTEN_RX_QUEUE_INDEX + 1 )
    $intermediate $W[ADD_u6_u6_814_wire] : $int<6>
    $W[n_q_index_854_815_buffered] : $int<6>
    // q_index
    $W[q_index_810] : $int<6>
    // 		$volatile register_index := ($bitcast ($uint<6>) (q_index + RX_QUEUES_REG_START_OFFSET) ) $buffering 1
    //  file nic.linked.aa, line 345
    // (q_index + RX_QUEUES_REG_START_OFFSET)
    $intermediate $W[ADD_u6_u6_820_wire] : $int<6>
    // register_index
    $W[register_index_822] : $int<6>
    // 		$call AccessRegister (($bitcast ($uint<1>) _b1  ) ($bitcast ($uint<4>) _b1  ) register_index ($bitcast ($uint<32>) _b0  ) ) (rx_queue_pointer_32 ) 
    //  file nic.linked.aa, line 346
    // rx_queue_pointer_32
    $W[rx_queue_pointer_32_831] : $int<32>
    // 		$volatile rx_queue_pointer_36 := (rx_queue_pointer_32 && ($bitcast ($uint<4>) _b0  )) $buffering 1
    //  file nic.linked.aa, line 347
    // rx_queue_pointer_36
    $W[rx_queue_pointer_36_837] : $int<36>
    // 		$call pushIntoQueue (($bitcast ($uint<1>) _b0  ) rx_queue_pointer_36 ( $slice rx_buffer_pointer 35 4 )  ) (push_status ) 
    //  file nic.linked.aa, line 348
    // ( $slice rx_buffer_pointer 35 4 ) 
    $intermediate $W[slice_842_wire] : $int<32>
    // push_status
    $W[push_status_844] : $int<1>
    // 		n_q_index := ((q_index + 1 ) & ($bitcast ($uint<6>) (NUMBER_OF_SERVERS - 1 ) )) $buffering 1// bits of buffering = 6. 
    //  file nic.linked.aa, line 349
    // (q_index + 1 )
    $intermediate $W[ADD_u6_u6_848_wire] : $int<6>
    // NUMBER_OF_SERVERS
    $W[RPIPE_NUMBER_OF_SERVERS_849_wire] : $int<32>
    // (NUMBER_OF_SERVERS - 1 )
    $intermediate $W[SUB_u32_u32_851_wire] : $int<32>
    // ($bitcast ($uint<6>) (NUMBER_OF_SERVERS - 1 ) )
    $intermediate $W[type_cast_852_wire] : $int<6>
    // n_q_index
    $W[n_q_index_854] : $int<6>
    // if statement  
    //  file nic.linked.aa, line 350
    // ( ~ push_status )
    $intermediate $W[NOT_u1_u1_857_wire] : $int<1>
    // 			$call delay_time (32  ) (status ) 
    //  file nic.linked.aa, line 351
    // status
    $W[status_860] : $int<1>
    // if statement  
    //  file nic.linked.aa, line 1611905912
    // (status == 0 )
    $intermediate $W[EQ_u1_u1_864_wire] : $int<1>
    // 			LAST_WRITTEN_RX_QUEUE_INDEX := q_index $buffering 1// bits of buffering = 6. 
    //  file nic.linked.aa, line 356
    // LAST_WRITTEN_RX_QUEUE_INDEX
    // 			selected_q_index := q_index $buffering 1// bits of buffering = 6.  Orphaned statement with target selected_q_index ?? 
    //  file nic.linked.aa, line 357
    // selected_q_index
    $W[selected_q_index_873] : $int<6>
    // datapath-instances for block %populateRxQueue%PushIntoQueue
    //  file nic.linked.aa, line 339
    // data-path instances for merge  
    //  file nic.linked.aa, line 341
    // 			$phi q_index := 			  (LAST_WRITTEN_RX_QUEUE_INDEX + 1 ) $on   $entry 			  n_q_index $on   loopback 
    // type of target is $uint<6>
    //  file nic.linked.aa, line 342
    // LAST_WRITTEN_RX_QUEUE_INDEX
    $ioport $in [RPIPE_LAST_WRITTEN_RX_QUEUE_INDEX_812_inst] (LAST_WRITTEN_RX_QUEUE_INDEX) (RPIPE_LAST_WRITTEN_RX_QUEUE_INDEX_812_wire) 
    $buffering $out RPIPE_LAST_WRITTEN_RX_QUEUE_INDEX_812_inst RPIPE_LAST_WRITTEN_RX_QUEUE_INDEX_812_wire 1
    // (LAST_WRITTEN_RX_QUEUE_INDEX + 1 )
    +[ADD_u6_u6_814_inst] (RPIPE_LAST_WRITTEN_RX_QUEUE_INDEX_812_wire konst_813_wire_constant) (ADD_u6_u6_814_wire)   
    $buffering  $out ADD_u6_u6_814_inst ADD_u6_u6_814_wire 1
    $delay ADD_u6_u6_814_inst 1
    # := [n_q_index_854_815_buf] (n_q_index_854) (n_q_index_854_815_buffered)    
    $phi [phi_stmt_810] (ADD_u6_u6_814_wire n_q_index_854_815_buffered) ( q_index_810 ) 
    // 		$volatile register_index := ($bitcast ($uint<6>) (q_index + RX_QUEUES_REG_START_OFFSET) ) $buffering 1
    //  file nic.linked.aa, line 345
    // (q_index + RX_QUEUES_REG_START_OFFSET)
    +[ADD_u6_u6_820_inst] (q_index_810 R_RX_QUEUES_REG_START_OFFSET_819_wire_constant) (ADD_u6_u6_820_wire)   $flowthrough 
    $delay ADD_u6_u6_820_inst 0
    // ($bitcast ($uint<6>) (q_index + RX_QUEUES_REG_START_OFFSET) )
    # := [type_cast_821_inst] (ADD_u6_u6_820_wire) (register_index_822)   $flowthrough
    $delay type_cast_821_inst 0
    // 		$call AccessRegister (($bitcast ($uint<1>) _b1  ) ($bitcast ($uint<4>) _b1  ) register_index ($bitcast ($uint<32>) _b0  ) ) (rx_queue_pointer_32 ) 
    //  file nic.linked.aa, line 346
    $call [call_stmt_831_call] $module AccessRegister(type_cast_824_wire_constant type_cast_826_wire_constant register_index_822 type_cast_829_wire_constant) (rx_queue_pointer_32_831)  
    $delay call_stmt_831_call 4
    $buffering  $in call_stmt_831_call type_cast_824_wire_constant 1
    $buffering  $in call_stmt_831_call type_cast_826_wire_constant 1
    $buffering  $in call_stmt_831_call register_index_822 1
    $buffering  $in call_stmt_831_call type_cast_829_wire_constant 1
    $buffering  $out call_stmt_831_call rx_queue_pointer_32_831 1
    // 		$volatile rx_queue_pointer_36 := (rx_queue_pointer_32 && ($bitcast ($uint<4>) _b0  )) $buffering 1
    //  file nic.linked.aa, line 347
    // (rx_queue_pointer_32 && ($bitcast ($uint<4>) _b0  ))
    &&[CONCAT_u32_u36_836_inst] (rx_queue_pointer_32_831 type_cast_835_wire_constant) (rx_queue_pointer_36_837)   $flowthrough 
    $delay CONCAT_u32_u36_836_inst 0
    // 		$call pushIntoQueue (($bitcast ($uint<1>) _b0  ) rx_queue_pointer_36 ( $slice rx_buffer_pointer 35 4 )  ) (push_status ) 
    //  file nic.linked.aa, line 348
    // ( $slice rx_buffer_pointer 35 4 ) 
    [:] [slice_842_inst] (rx_buffer_pointer 35 4) (slice_842_wire)  $flowthrough
    $delay slice_842_inst 0
    $call [call_stmt_844_call] $module pushIntoQueue(type_cast_839_wire_constant rx_queue_pointer_36_837 slice_842_wire) (push_status_844)  
    $delay call_stmt_844_call 4
    $buffering  $in call_stmt_844_call type_cast_839_wire_constant 1
    $buffering  $in call_stmt_844_call rx_queue_pointer_36_837 1
    $buffering  $in call_stmt_844_call slice_842_wire 1
    $buffering  $out call_stmt_844_call push_status_844 1
    // 		n_q_index := ((q_index + 1 ) & ($bitcast ($uint<6>) (NUMBER_OF_SERVERS - 1 ) )) $buffering 1// bits of buffering = 6. 
    //  file nic.linked.aa, line 349
    // (q_index + 1 )
    +[ADD_u6_u6_848_inst] (q_index_810 konst_847_wire_constant) (ADD_u6_u6_848_wire)   $flowthrough 
    $delay ADD_u6_u6_848_inst 0
    // NUMBER_OF_SERVERS
    $ioport $in [RPIPE_NUMBER_OF_SERVERS_849_inst] (NUMBER_OF_SERVERS) (RPIPE_NUMBER_OF_SERVERS_849_wire) 
    $buffering $out RPIPE_NUMBER_OF_SERVERS_849_inst RPIPE_NUMBER_OF_SERVERS_849_wire 1
    // (NUMBER_OF_SERVERS - 1 )
    -[SUB_u32_u32_851_inst] (RPIPE_NUMBER_OF_SERVERS_849_wire konst_850_wire_constant) (SUB_u32_u32_851_wire)   $flowthrough 
    $delay SUB_u32_u32_851_inst 0
    // ($bitcast ($uint<6>) (NUMBER_OF_SERVERS - 1 ) )
    # := [type_cast_852_inst] (SUB_u32_u32_851_wire) (type_cast_852_wire)   $flowthrough
    $delay type_cast_852_inst 0
    // ((q_index + 1 ) & ($bitcast ($uint<6>) (NUMBER_OF_SERVERS - 1 ) ))
    &[AND_u6_u6_853_inst] (ADD_u6_u6_848_wire type_cast_852_wire) (n_q_index_854)   
    $buffering  $out AND_u6_u6_853_inst n_q_index_854 1
    $delay AND_u6_u6_853_inst 1
    // datapath-instances for if  
    //  file nic.linked.aa, line 350
    // ( ~ push_status )
    ~ [NOT_u1_u1_857_inst] (push_status_844) (NOT_u1_u1_857_wire)   $flowthrough
    $delay NOT_u1_u1_857_inst 0
    ==0? [if_stmt_855_branch] (NOT_u1_u1_857_wire)
    // 			$call delay_time (32  ) (status ) 
    //  file nic.linked.aa, line 351
    $call [call_stmt_860_call] $module delay_time(konst_858_wire_constant) (status_860)  
    $delay call_stmt_860_call 2
    $buffering  $in call_stmt_860_call konst_858_wire_constant 1
    $buffering  $out call_stmt_860_call status_860 1
    // datapath-instances for if  
    //  file nic.linked.aa, line 1611905912
    // (status == 0 )
    ==[EQ_u1_u1_864_inst] (status_860 konst_863_wire_constant) (EQ_u1_u1_864_wire)   $flowthrough 
    $delay EQ_u1_u1_864_inst 0
    ==0? [if_stmt_861_branch] (EQ_u1_u1_864_wire)
    // 			LAST_WRITTEN_RX_QUEUE_INDEX := q_index $buffering 1// bits of buffering = 6. 
    //  file nic.linked.aa, line 356
    // LAST_WRITTEN_RX_QUEUE_INDEX
    $ioport $out [WPIPE_LAST_WRITTEN_RX_QUEUE_INDEX_868_inst]  (q_index_810) (LAST_WRITTEN_RX_QUEUE_INDEX) 
    // 			selected_q_index := q_index $buffering 1// bits of buffering = 6.  Orphaned statement with target selected_q_index ?? 
    //  file nic.linked.aa, line 357
    # := [W_selected_q_index_871_inst] (q_index_810) (selected_q_index_873)    
  }
  // end data-path
  // CP-DP links for merge  
  //  file nic.linked.aa, line 341
  // LAST_WRITTEN_RX_QUEUE_INDEX
  // (LAST_WRITTEN_RX_QUEUE_INDEX + 1 )
  ADD_u6_u6_814_inst <=> (branch_block_stmt_808/merge_stmt_809__entry___PhiReq/phi_stmt_810/phi_stmt_810_sources/ADD_u6_u6_814/SplitProtocol/Sample/rr branch_block_stmt_808/merge_stmt_809__entry___PhiReq/phi_stmt_810/phi_stmt_810_sources/ADD_u6_u6_814/SplitProtocol/Update/cr) (branch_block_stmt_808/merge_stmt_809__entry___PhiReq/phi_stmt_810/phi_stmt_810_sources/ADD_u6_u6_814/SplitProtocol/Sample/ra branch_block_stmt_808/merge_stmt_809__entry___PhiReq/phi_stmt_810/phi_stmt_810_sources/ADD_u6_u6_814/SplitProtocol/Update/ca)
  n_q_index_854_815_buf <=> (branch_block_stmt_808/loopback_PhiReq/phi_stmt_810/phi_stmt_810_sources/Interlock/Sample/req branch_block_stmt_808/loopback_PhiReq/phi_stmt_810/phi_stmt_810_sources/Interlock/Update/req) (branch_block_stmt_808/loopback_PhiReq/phi_stmt_810/phi_stmt_810_sources/Interlock/Sample/ack branch_block_stmt_808/loopback_PhiReq/phi_stmt_810/phi_stmt_810_sources/Interlock/Update/ack)
  phi_stmt_810 <=> (branch_block_stmt_808/merge_stmt_809__entry___PhiReq/phi_stmt_810/phi_stmt_810_req branch_block_stmt_808/loopback_PhiReq/phi_stmt_810/phi_stmt_810_req) (branch_block_stmt_808/merge_stmt_809_PhiAck/phi_stmt_810_ack)
  // 		$volatile register_index := ($bitcast ($uint<6>) (q_index + RX_QUEUES_REG_START_OFFSET) ) $buffering 1
  //  file nic.linked.aa, line 345
  // (q_index + RX_QUEUES_REG_START_OFFSET)
  // q_index
  // 		$call AccessRegister (($bitcast ($uint<1>) _b1  ) ($bitcast ($uint<4>) _b1  ) register_index ($bitcast ($uint<32>) _b0  ) ) (rx_queue_pointer_32 ) 
  //  file nic.linked.aa, line 346
  // register_index
  call_stmt_831_call <=> (branch_block_stmt_808/assign_stmt_822_to_assign_stmt_854/call_stmt_831_Sample/crr branch_block_stmt_808/assign_stmt_822_to_assign_stmt_854/call_stmt_831_Update/ccr) (branch_block_stmt_808/assign_stmt_822_to_assign_stmt_854/call_stmt_831_Sample/cra branch_block_stmt_808/assign_stmt_822_to_assign_stmt_854/call_stmt_831_Update/cca)
  // 		$volatile rx_queue_pointer_36 := (rx_queue_pointer_32 && ($bitcast ($uint<4>) _b0  )) $buffering 1
  //  file nic.linked.aa, line 347
  // (rx_queue_pointer_32 && ($bitcast ($uint<4>) _b0  ))
  // rx_queue_pointer_32
  // 		$call pushIntoQueue (($bitcast ($uint<1>) _b0  ) rx_queue_pointer_36 ( $slice rx_buffer_pointer 35 4 )  ) (push_status ) 
  //  file nic.linked.aa, line 348
  // rx_queue_pointer_36
  // rx_buffer_pointer
  call_stmt_844_call <=> (branch_block_stmt_808/assign_stmt_822_to_assign_stmt_854/call_stmt_844_Sample/crr branch_block_stmt_808/assign_stmt_822_to_assign_stmt_854/call_stmt_844_Update/ccr) (branch_block_stmt_808/assign_stmt_822_to_assign_stmt_854/call_stmt_844_Sample/cra branch_block_stmt_808/assign_stmt_822_to_assign_stmt_854/call_stmt_844_Update/cca)
  // 		n_q_index := ((q_index + 1 ) & ($bitcast ($uint<6>) (NUMBER_OF_SERVERS - 1 ) )) $buffering 1// bits of buffering = 6. 
  //  file nic.linked.aa, line 349
  // ((q_index + 1 ) & ($bitcast ($uint<6>) (NUMBER_OF_SERVERS - 1 ) ))
  // (q_index + 1 )
  // q_index
  // (NUMBER_OF_SERVERS - 1 )
  // NUMBER_OF_SERVERS
  AND_u6_u6_853_inst <=> (branch_block_stmt_808/assign_stmt_822_to_assign_stmt_854/AND_u6_u6_853_Sample/rr branch_block_stmt_808/assign_stmt_822_to_assign_stmt_854/AND_u6_u6_853_Update/cr) (branch_block_stmt_808/assign_stmt_822_to_assign_stmt_854/AND_u6_u6_853_Sample/ra branch_block_stmt_808/assign_stmt_822_to_assign_stmt_854/AND_u6_u6_853_Update/ca)
  // CP-DP links for if  
  //  file nic.linked.aa, line 350
  // ( ~ push_status )
  if_stmt_855_branch <=> (branch_block_stmt_808/if_stmt_855_eval_test/branch_req) (branch_block_stmt_808/if_stmt_855_else_link/else_choice_transition branch_block_stmt_808/if_stmt_855_if_link/if_choice_transition)
  // 			$call delay_time (32  ) (status ) 
  //  file nic.linked.aa, line 351
  call_stmt_860_call <=> (branch_block_stmt_808/call_stmt_860/call_stmt_860_Sample/crr branch_block_stmt_808/call_stmt_860/call_stmt_860_Update/ccr) (branch_block_stmt_808/call_stmt_860/call_stmt_860_Sample/cra branch_block_stmt_808/call_stmt_860/call_stmt_860_Update/cca)
  // CP-DP links for if  
  //  file nic.linked.aa, line 1611905912
  // (status == 0 )
  if_stmt_861_branch <=> (branch_block_stmt_808/if_stmt_861_eval_test/branch_req) (branch_block_stmt_808/if_stmt_861_else_link/else_choice_transition branch_block_stmt_808/if_stmt_861_if_link/if_choice_transition)
  // 			LAST_WRITTEN_RX_QUEUE_INDEX := q_index $buffering 1// bits of buffering = 6. 
  //  file nic.linked.aa, line 356
  // q_index
  // LAST_WRITTEN_RX_QUEUE_INDEX
  WPIPE_LAST_WRITTEN_RX_QUEUE_INDEX_868_inst <=> (branch_block_stmt_808/assign_stmt_870_to_assign_stmt_873/WPIPE_LAST_WRITTEN_RX_QUEUE_INDEX_868_Sample/req branch_block_stmt_808/assign_stmt_870_to_assign_stmt_873/WPIPE_LAST_WRITTEN_RX_QUEUE_INDEX_868_Update/req) (branch_block_stmt_808/assign_stmt_870_to_assign_stmt_873/WPIPE_LAST_WRITTEN_RX_QUEUE_INDEX_868_Sample/ack branch_block_stmt_808/assign_stmt_870_to_assign_stmt_873/WPIPE_LAST_WRITTEN_RX_QUEUE_INDEX_868_Update/ack)
  // 			selected_q_index := q_index $buffering 1// bits of buffering = 6.  Orphaned statement with target selected_q_index ?? 
  //  file nic.linked.aa, line 357
  // q_index
  W_selected_q_index_871_inst <=> (branch_block_stmt_808/assign_stmt_870_to_assign_stmt_873/assign_stmt_873_Sample/req branch_block_stmt_808/assign_stmt_870_to_assign_stmt_873/assign_stmt_873_Update/req) (branch_block_stmt_808/assign_stmt_870_to_assign_stmt_873/assign_stmt_873_Sample/ack branch_block_stmt_808/assign_stmt_870_to_assign_stmt_873/assign_stmt_873_Update/ack)
}
$module [ReceiveEngineDaemon] 
{
  // pipe-declarations for block %ReceiveEngineDaemon
  //  file nic.linked.aa, line 361
  // pipe-declarations for block %ReceiveEngineDaemon%main
  //  file nic.linked.aa, line 367
  // pipe-declarations for block %ReceiveEngineDaemon%main%
  //  file nic.linked.aa, line 369
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    ::[assign_stmt_880] 
    {
      // start:  	LAST_WRITTEN_RX_QUEUE_INDEX := 0  $buffering 1// bits of buffering = 6. 
      //  file nic.linked.aa, line 366
      // Target expression
      // (as target) LAST_WRITTEN_RX_QUEUE_INDEX
      $T[WPIPE_LAST_WRITTEN_RX_QUEUE_INDEX_878_sample_start_] 
      $T[WPIPE_LAST_WRITTEN_RX_QUEUE_INDEX_878_sample_completed_] 
      $T[WPIPE_LAST_WRITTEN_RX_QUEUE_INDEX_878_update_start_] 
      $T[WPIPE_LAST_WRITTEN_RX_QUEUE_INDEX_878_update_completed_] 
      ;;[WPIPE_LAST_WRITTEN_RX_QUEUE_INDEX_878_Sample] 
      {
        // pipe write sample-start LAST_WRITTEN_RX_QUEUE_INDEX
        $T [req] $T [ack] 
      }
      ;;[WPIPE_LAST_WRITTEN_RX_QUEUE_INDEX_878_Update] 
      {
        // pipe write update (complete) LAST_WRITTEN_RX_QUEUE_INDEX
        $T [req] $T [ack] 
      }
      WPIPE_LAST_WRITTEN_RX_QUEUE_INDEX_878_sample_start_ &-> (WPIPE_LAST_WRITTEN_RX_QUEUE_INDEX_878_Sample)
      WPIPE_LAST_WRITTEN_RX_QUEUE_INDEX_878_sample_completed_ <-& (WPIPE_LAST_WRITTEN_RX_QUEUE_INDEX_878_Sample)
      WPIPE_LAST_WRITTEN_RX_QUEUE_INDEX_878_update_start_ <-& (WPIPE_LAST_WRITTEN_RX_QUEUE_INDEX_878_sample_completed_)
      WPIPE_LAST_WRITTEN_RX_QUEUE_INDEX_878_update_start_ &-> (WPIPE_LAST_WRITTEN_RX_QUEUE_INDEX_878_Update)
      WPIPE_LAST_WRITTEN_RX_QUEUE_INDEX_878_update_completed_ <-& (WPIPE_LAST_WRITTEN_RX_QUEUE_INDEX_878_Update)
      // end:  	LAST_WRITTEN_RX_QUEUE_INDEX := 0  $buffering 1// bits of buffering = 6. 
      // load-store dependencies..
      // pipe read/write dependencies for pipe LAST_WRITTEN_RX_QUEUE_INDEX
      // read-dependencies for pipe LAST_WRITTEN_RX_QUEUE_INDEX
      // write-dependencies for pipe LAST_WRITTEN_RX_QUEUE_INDEX
      // signal write dependencies for LAST_WRITTEN_RX_QUEUE_INDEX
    }
    <>[branch_block_stmt_881] // Branch Block  file nic.linked.aa, line 367
    {
      $P [branch_block_stmt_881__entry__]
      branch_block_stmt_881__entry__ <-| ($entry)
      $P [branch_block_stmt_881__exit__]
      branch_block_stmt_881__exit__ |-> ($exit)
      $P [merge_stmt_882__entry__] 
      $P [merge_stmt_882__exit__] 
      $P [if_stmt_884__entry__] 
      $P [if_stmt_884__exit__] 
      $P [do_while_stmt_891__entry__] 
      $P [do_while_stmt_891__exit__] 
      $P [disable_loopback]
      // if-statement  
      //  file nic.linked.aa, line 0
      ;;[if_stmt_884_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      if_stmt_884__entry__ |-> (if_stmt_884_dead_link)
      if_stmt_884__exit__ <-| (if_stmt_884_dead_link)
      ;;[if_stmt_884_eval_test] 
      {
        // test expression evaluate and trigger branch 
        // (CONTROL_REGISTER [] 0 )
        ;;[BITSEL_u32_u1_887] 
        {
          // binary expression 
          ||[BITSEL_u32_u1_887_inputs] 
          {
            // CONTROL_REGISTER
            ;;[RPIPE_CONTROL_REGISTER_885] 
            {
              // pipe read
              ;;[Sample] 
              {
                $T [req] $T [ack] 
              }
              ;;[Update] 
              {
                $T [req] $T [ack] 
              }
            }
          }
          // flow-through
          ;;[SplitProtocol] 
          {
            ;;[Sample] 
            {
              $T [rr] $T [ra]
            }
            ;;[Update] 
            {
              $T [cr] $T [ca]
            }
          }
        }
        $T [branch_req] 
      }
      if_stmt_884__entry__ |-> (if_stmt_884_eval_test)
      $P [BITSEL_u32_u1_887_place]
      BITSEL_u32_u1_887_place <-| (if_stmt_884_eval_test)
      ;;[if_stmt_884_if_link] 
      {
        $T [if_choice_transition] 
      }
      ;;[if_stmt_884_else_link] 
      {
        $T [else_choice_transition] 
      }
      BITSEL_u32_u1_887_place |-> (if_stmt_884_if_link if_stmt_884_else_link)
      $P [not_enabled_yet_loopback]
      not_enabled_yet_loopback <-| (if_stmt_884_if_link)
      if_stmt_884__exit__ <-| (if_stmt_884_else_link)
      // do-while-statement  
      //  file nic.linked.aa, line 376
      <o> [do_while_stmt_891]  $depth 31 $buffering 1 
      {
        $P[do_while_stmt_891__entry__] 
        $P[do_while_stmt_891__exit__] 
        $P[loop_back] 
        $P[condition_done] 
        $P[loop_body_done] 
        $pipeline [do_while_stmt_891_loop_body] 
        {
          // Pipelined!
          $T[back_edge_to_loop_body] 
          $T[first_time_through_loop_body] 
          $T[loop_body_start] 
          $T[condition_evaluated] 
          $transitionmerge [entry_tmerge] (back_edge_to_loop_body first_time_through_loop_body) (loop_body_start)
          $entry <-& (loop_body_start)
          // start: 			$call popFromQueue (($bitcast ($uint<1>) _b1  ) FREE_Q ) (rx_buffer_pointer_32 status ) 
          //  file nic.linked.aa, line 381
          $T[call_stmt_899_sample_start_] 
          $T[call_stmt_899_sample_completed_] 
          $T[call_stmt_899_update_start_] 
          $T[call_stmt_899_update_completed_] 
          // Call input argument 0
          // Call input argument 1
          // FREE_Q
          // start: Forward dependencies from FREE_Q to transition call_stmt_899_sample_start_
          // special case... expr is signal read, which does not involve control..
          // RAW reenables for FREE_Q
          ;;[call_stmt_899_Sample] 
          {
            $T [crr] $T [cra] 
          }
          ;;[call_stmt_899_Update] 
          {
            $T [ccr] $T [cca] 
          }
          call_stmt_899_sample_start_ &-> (call_stmt_899_Sample)
          call_stmt_899_sample_completed_ <-& (call_stmt_899_Sample)
          call_stmt_899_sample_completed_ &-> ($null)
          call_stmt_899_update_start_ &-> (call_stmt_899_Update)
          call_stmt_899_update_completed_ <-& (call_stmt_899_Update)
          // Call output argument 0
          // (as target) rx_buffer_pointer_32
          // Call output argument 1
          // (as target) status
          // self-release: 
          call_stmt_899_sample_start_ o<-& (call_stmt_899_sample_completed_ 1)
          $null &-> (call_stmt_899_update_start_)
          call_stmt_899_update_start_ o<-& (call_stmt_899_update_completed_ 0)
          // start: WAR dependencies for rx_buffer_pointer_32
          // done: WAR dependencies for rx_buffer_pointer_32
          // start: WAR dependencies for status
          // done: WAR dependencies for status
          // end: 			$call popFromQueue (($bitcast ($uint<1>) _b1  ) FREE_Q ) (rx_buffer_pointer_32 status ) 
          // start: WAR dependencies for rx_buffer_pointer_36
          // done: WAR dependencies for rx_buffer_pointer_36
          // start:  			$volatile rx_buffer_pointer_36 := (rx_buffer_pointer_32 && ($bitcast ($uint<4>) _b0  )) $buffering 1
          //  file nic.linked.aa, line 382
          // volatile! 
          // Source expression
          // (rx_buffer_pointer_32 && ($bitcast ($uint<4>) _b0  ))
          // rx_buffer_pointer_32
          // Target expression
          // (as target) rx_buffer_pointer_36
          // start: WAR dependencies for rx_buffer_pointer_36
          // done: WAR dependencies for rx_buffer_pointer_36
          // end:  			$volatile rx_buffer_pointer_36 := (rx_buffer_pointer_32 && ($bitcast ($uint<4>) _b0  )) $buffering 1
          // start: 			$guard (status) $call loadBuffer (rx_buffer_pointer_36 ) (bad_packet_identifier ) 
          //  file nic.linked.aa, line 384
          $T[call_stmt_911_sample_start_] 
          $T[call_stmt_911_sample_completed_] 
          $T[call_stmt_911_update_start_] 
          $T[call_stmt_911_update_completed_] 
          // Guard expression
          // status
          // start: Forward dependencies from status to transition call_stmt_911_sample_start_
          call_stmt_911_sample_start_ <-& (call_stmt_899_update_completed_)
          // done: Forward dependencies from status to transition call_stmt_911_sample_start_
          // RAW reenables for status
          call_stmt_899_update_start_ o<-& (call_stmt_911_sample_completed_ 0)
          // Call input argument 0
          // rx_buffer_pointer_36
          // start: Forward dependencies from rx_buffer_pointer_36 to transition call_stmt_911_sample_start_
          call_stmt_911_sample_start_ <-& (call_stmt_899_update_completed_)
          // done: Forward dependencies from rx_buffer_pointer_36 to transition call_stmt_911_sample_start_
          // RAW reenables for rx_buffer_pointer_36
          call_stmt_899_update_start_ o<-& (call_stmt_911_sample_completed_ 0)
          ;;[call_stmt_911_Sample] 
          {
            $T [crr] $T [cra] 
          }
          ;;[call_stmt_911_Update] 
          {
            $T [ccr] $T [cca] 
          }
          call_stmt_911_sample_start_ &-> (call_stmt_911_Sample)
          call_stmt_911_sample_completed_ <-& (call_stmt_911_Sample)
          call_stmt_911_sample_completed_ &-> ($null)
          call_stmt_911_update_start_ &-> (call_stmt_911_Update)
          call_stmt_911_update_completed_ <-& (call_stmt_911_Update)
          // Call output argument 0
          // (as target) bad_packet_identifier
          // self-release: 
          call_stmt_911_sample_start_ o<-& (call_stmt_911_sample_completed_ 1)
          $null &-> (call_stmt_911_update_start_)
          call_stmt_911_update_start_ o<-& (call_stmt_911_update_completed_ 0)
          // start: WAR dependencies for bad_packet_identifier
          // done: WAR dependencies for bad_packet_identifier
          // end: 			$guard (status) $call loadBuffer (rx_buffer_pointer_36 ) (bad_packet_identifier ) 
          // start: WAR dependencies for ok_flag
          // done: WAR dependencies for ok_flag
          // start:  			$volatile ok_flag := (status & ( ~ bad_packet_identifier )) $buffering 1
          //  file nic.linked.aa, line 385
          // volatile! 
          // Source expression
          // (status & ( ~ bad_packet_identifier ))
          // status
          // ( ~ bad_packet_identifier )
          // bad_packet_identifier
          // Target expression
          // (as target) ok_flag
          // start: WAR dependencies for ok_flag
          // done: WAR dependencies for ok_flag
          // end:  			$volatile ok_flag := (status & ( ~ bad_packet_identifier )) $buffering 1
          // start: WAR dependencies for free_flag
          // done: WAR dependencies for free_flag
          // start:  			$volatile free_flag := (status & bad_packet_identifier) $buffering 1
          //  file nic.linked.aa, line 386
          // volatile! 
          // Source expression
          // (status & bad_packet_identifier)
          // status
          // bad_packet_identifier
          // Target expression
          // (as target) free_flag
          // start: WAR dependencies for free_flag
          // done: WAR dependencies for free_flag
          // end:  			$volatile free_flag := (status & bad_packet_identifier) $buffering 1
          // start: 			$guard (ok_flag) $call populateRxQueue (rx_buffer_pointer_36 ) () 
          //  file nic.linked.aa, line 388
          $T[call_stmt_927_sample_start_] 
          $T[call_stmt_927_sample_completed_] 
          $T[call_stmt_927_update_start_] 
          $T[call_stmt_927_update_completed_] 
          // Guard expression
          // ok_flag
          // start: Forward dependencies from ok_flag to transition call_stmt_927_sample_start_
          call_stmt_927_sample_start_ <-& (call_stmt_899_update_completed_)
          call_stmt_927_sample_start_ <-& (call_stmt_911_update_completed_)
          // done: Forward dependencies from ok_flag to transition call_stmt_927_sample_start_
          // RAW reenables for ok_flag
          call_stmt_899_update_start_ o<-& (call_stmt_927_sample_completed_ 0)
          call_stmt_911_update_start_ o<-& (call_stmt_927_sample_completed_ 0)
          // Call input argument 0
          // rx_buffer_pointer_36
          // start: Forward dependencies from rx_buffer_pointer_36 to transition call_stmt_927_sample_start_
          call_stmt_927_sample_start_ <-& (call_stmt_899_update_completed_)
          // done: Forward dependencies from rx_buffer_pointer_36 to transition call_stmt_927_sample_start_
          // RAW reenables for rx_buffer_pointer_36
          call_stmt_899_update_start_ o<-& (call_stmt_927_sample_completed_ 0)
          ;;[call_stmt_927_Sample] 
          {
            $T [crr] $T [cra] 
          }
          ;;[call_stmt_927_Update] 
          {
            $T [ccr] $T [cca] 
          }
          call_stmt_927_sample_start_ &-> (call_stmt_927_Sample)
          call_stmt_927_sample_completed_ <-& (call_stmt_927_Sample)
          call_stmt_927_sample_completed_ &-> ($null)
          call_stmt_927_update_start_ &-> (call_stmt_927_Update)
          call_stmt_927_update_completed_ <-& (call_stmt_927_Update)
          // self-release: 
          call_stmt_927_sample_start_ o<-& (call_stmt_927_sample_completed_ 1)
          $null &-> (call_stmt_927_update_start_)
          call_stmt_927_update_start_ o<-& (call_stmt_927_update_completed_ 0)
          // end: 			$guard (ok_flag) $call populateRxQueue (rx_buffer_pointer_36 ) () 
          // start: 			$guard (free_flag) $call pushIntoQueue (($bitcast ($uint<1>) _b1  ) FREE_Q ( $slice rx_buffer_pointer_36 35 4 )  ) (push_status ) 
          //  file nic.linked.aa, line 390
          $T[call_stmt_937_sample_start_] 
          $T[call_stmt_937_sample_completed_] 
          $T[call_stmt_937_update_start_] 
          $T[call_stmt_937_update_completed_] 
          // Guard expression
          // free_flag
          // start: Forward dependencies from free_flag to transition call_stmt_937_sample_start_
          call_stmt_937_sample_start_ <-& (call_stmt_899_update_completed_)
          call_stmt_937_sample_start_ <-& (call_stmt_911_update_completed_)
          // done: Forward dependencies from free_flag to transition call_stmt_937_sample_start_
          // RAW reenables for free_flag
          call_stmt_899_update_start_ o<-& (call_stmt_937_sample_completed_ 0)
          call_stmt_911_update_start_ o<-& (call_stmt_937_sample_completed_ 0)
          // Call input argument 0
          // Call input argument 1
          // FREE_Q
          // Call input argument 2
          // ( $slice rx_buffer_pointer_36 35 4 ) 
          // rx_buffer_pointer_36
          // start: Forward dependencies from FREE_Q to transition call_stmt_937_sample_start_
          // special case... expr is signal read, which does not involve control..
          // RAW reenables for FREE_Q
          // start: Forward dependencies from ( $slice rx_buffer_pointer_36 35 4 )  to transition call_stmt_937_sample_start_
          call_stmt_937_sample_start_ <-& (call_stmt_899_update_completed_)
          // done: Forward dependencies from ( $slice rx_buffer_pointer_36 35 4 )  to transition call_stmt_937_sample_start_
          // RAW reenables for ( $slice rx_buffer_pointer_36 35 4 ) 
          call_stmt_899_update_start_ o<-& (call_stmt_937_sample_completed_ 0)
          ;;[call_stmt_937_Sample] 
          {
            $T [crr] $T [cra] 
          }
          ;;[call_stmt_937_Update] 
          {
            $T [ccr] $T [cca] 
          }
          call_stmt_937_sample_start_ &-> (call_stmt_937_Sample)
          call_stmt_937_sample_completed_ <-& (call_stmt_937_Sample)
          call_stmt_937_sample_completed_ &-> ($null)
          call_stmt_937_update_start_ &-> (call_stmt_937_Update)
          call_stmt_937_update_completed_ <-& (call_stmt_937_Update)
          // Call output argument 0
          // (as target) push_status
          // self-release: 
          call_stmt_937_sample_start_ o<-& (call_stmt_937_sample_completed_ 1)
          $null &-> (call_stmt_937_update_start_)
          call_stmt_937_update_start_ o<-& (call_stmt_937_update_completed_ 0)
          // start: WAR dependencies for push_status
          // done: WAR dependencies for push_status
          // end: 			$guard (free_flag) $call pushIntoQueue (($bitcast ($uint<1>) _b1  ) FREE_Q ( $slice rx_buffer_pointer_36 35 4 )  ) (push_status ) 
          // ( ~ (CONTROL_REGISTER [] 0 ) )
          // (CONTROL_REGISTER [] 0 )
          // CONTROL_REGISTER
          $T [loop_body_delay_to_condition_start] $delay
          loop_body_start &-> (loop_body_delay_to_condition_start)
          loop_body_delay_to_condition_start &-> (condition_evaluated)
          // start: Forward dependencies from ( ~ (CONTROL_REGISTER [] 0 ) ) to transition condition_evaluated
          // non-constant expression which depends only on signals/constants?
          // done: Forward dependencies from ( ~ (CONTROL_REGISTER [] 0 ) ) to transition condition_evaluated
          condition_evaluated &-> ($null)
          // load-store dependencies..
          // pipe read/write dependencies for pipe NUMBER_OF_SERVERS
          // read-dependencies for pipe NUMBER_OF_SERVERS
          // write-dependencies for pipe NUMBER_OF_SERVERS
          // signal write dependencies for NUMBER_OF_SERVERS
          // pipe read/write dependencies for pipe LAST_WRITTEN_RX_QUEUE_INDEX
          // read-dependencies for pipe LAST_WRITTEN_RX_QUEUE_INDEX
          // write-dependencies for pipe LAST_WRITTEN_RX_QUEUE_INDEX
          // signal write dependencies for LAST_WRITTEN_RX_QUEUE_INDEX
          // pipe read/write dependencies for pipe MEMORY_TO_NIC_RESPONSE
          // read-dependencies for pipe MEMORY_TO_NIC_RESPONSE
          call_stmt_911_sample_start_ <-& (call_stmt_899_update_completed_)
          call_stmt_927_sample_start_ <-& (call_stmt_911_update_completed_)
          call_stmt_937_sample_start_ <-& (call_stmt_927_update_completed_)
          // ring dependency in pipeline.
          call_stmt_899_update_start_ o<-& (call_stmt_937_update_completed_ 0)
          // write-dependencies for pipe MEMORY_TO_NIC_RESPONSE
          // signal write dependencies for MEMORY_TO_NIC_RESPONSE
          // pipe read/write dependencies for pipe NIC_REQUEST_REGISTER_ACCESS_PIPE
          // read-dependencies for pipe NIC_REQUEST_REGISTER_ACCESS_PIPE
          // write-dependencies for pipe NIC_REQUEST_REGISTER_ACCESS_PIPE
          // signal write dependencies for NIC_REQUEST_REGISTER_ACCESS_PIPE
          // pipe read/write dependencies for pipe NIC_RESPONSE_REGISTER_ACCESS_PIPE
          // read-dependencies for pipe NIC_RESPONSE_REGISTER_ACCESS_PIPE
          // write-dependencies for pipe NIC_RESPONSE_REGISTER_ACCESS_PIPE
          // signal write dependencies for NIC_RESPONSE_REGISTER_ACCESS_PIPE
          // pipe read/write dependencies for pipe NIC_TO_MEMORY_REQUEST
          // read-dependencies for pipe NIC_TO_MEMORY_REQUEST
          // write-dependencies for pipe NIC_TO_MEMORY_REQUEST
          call_stmt_911_sample_start_ <-& (call_stmt_899_update_completed_)
          call_stmt_927_sample_start_ <-& (call_stmt_911_update_completed_)
          call_stmt_937_sample_start_ <-& (call_stmt_927_update_completed_)
          // ring dependency in pipeline.
          call_stmt_899_sample_start_ o<-& (call_stmt_937_update_completed_ 0)
          // signal write dependencies for NIC_TO_MEMORY_REQUEST
          // pipe read/write dependencies for pipe nic_rx_to_header
          // read-dependencies for pipe nic_rx_to_header
          // write-dependencies for pipe nic_rx_to_header
          // signal write dependencies for nic_rx_to_header
          // pipe read/write dependencies for pipe nic_rx_to_packet
          // read-dependencies for pipe nic_rx_to_packet
          // write-dependencies for pipe nic_rx_to_packet
          // signal write dependencies for nic_rx_to_packet
        }
        ( first_time_through_loop_body  back_edge_to_loop_body) 
        ( condition_evaluated )
        ;; [loop_exit] 
        {
          $T [ack] 
        }
        ;; [loop_taken] 
        {
          $T [ack] 
        }
        do_while_stmt_891__entry__ <-| ($entry)
        loop_body_done <-| ( do_while_stmt_891_loop_body ) 
        condition_done |-> (loop_exit loop_taken)
        do_while_stmt_891__exit__ |-> ($exit)
        $bind condition_done <= do_while_stmt_891_loop_body : condition_evaluated
        $bind do_while_stmt_891__entry__  => do_while_stmt_891_loop_body : first_time_through_loop_body 
        $bind loop_back  => do_while_stmt_891_loop_body : back_edge_to_loop_body 
        $terminate (loop_exit loop_taken loop_body_done) (loop_back do_while_stmt_891__exit__)
      }
      do_while_stmt_891__entry__ |-> (do_while_stmt_891)
      do_while_stmt_891__exit__ <-| (do_while_stmt_891)
      // control-path for merge  
      //  file nic.linked.aa, line 369
      ;;[merge_stmt_882_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      merge_stmt_882__entry__ |-> (merge_stmt_882_dead_link)
      merge_stmt_882__exit__ <-| (merge_stmt_882_dead_link)
      //---------------------   merge statement  file nic.linked.aa, line 369  --------------------------
      ||[merge_stmt_882__entry___PhiReq] 
      {
        // no phi statements in merge..
      }
      merge_stmt_882__entry__ |-> (merge_stmt_882__entry___PhiReq)
      ||[disable_loopback_PhiReq] 
      {
        // no phi statements in merge..
      }
      disable_loopback |-> (disable_loopback_PhiReq)
      ||[not_enabled_yet_loopback_PhiReq] 
      {
        // no phi statements in merge..
      }
      not_enabled_yet_loopback |-> (not_enabled_yet_loopback_PhiReq)
      $P [merge_stmt_882_PhiReqMerge] 
      merge_stmt_882_PhiReqMerge <-| ( merge_stmt_882__entry___PhiReq  disable_loopback_PhiReq  not_enabled_yet_loopback_PhiReq )
      ||[merge_stmt_882_PhiAck] 
      {
        $T [dummy] 
      }
      merge_stmt_882_PhiReqMerge |-> (merge_stmt_882_PhiAck)
      merge_stmt_882__exit__  <-| (merge_stmt_882_PhiAck)
      //---------------------  end of merge statement  file nic.linked.aa, line 369  --------------------------
      merge_stmt_882__entry__ <-| (branch_block_stmt_881__entry__)
      if_stmt_884__entry__ <-| (merge_stmt_882__exit__)
      do_while_stmt_891__entry__ <-| (if_stmt_884__exit__)
      disable_loopback <-| (do_while_stmt_891__exit__)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %ReceiveEngineDaemon%main%
    //  file nic.linked.aa, line 369
    // constant-object-declarations for block %ReceiveEngineDaemon%main%
    //  file nic.linked.aa, line 378
    // constant-object-declarations for block %ReceiveEngineDaemon%main
    //  file nic.linked.aa, line 367
    // constant-object-declarations for block %ReceiveEngineDaemon
    //  file nic.linked.aa, line 361
    // 0 
    $constant $W[konst_879_wire_constant] : $int<6> := _b000000// 0
    // constant-declarations for block %ReceiveEngineDaemon%main
    //  file nic.linked.aa, line 367
    // constant-declarations for block %ReceiveEngineDaemon%main%
    //  file nic.linked.aa, line 369
    // if-statement  
    //  file nic.linked.aa, line 0
    // 0 
    $constant $W[konst_886_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // do-while statement  
    //  file nic.linked.aa, line 376
    // 0 
    $constant $W[konst_941_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // constant-declarations for block %ReceiveEngineDaemon%main%
    //  file nic.linked.aa, line 378
    // 			$call popFromQueue (($bitcast ($uint<1>) _b1  ) FREE_Q ) (rx_buffer_pointer_32 status ) 
    //  file nic.linked.aa, line 381
    // ($bitcast ($uint<1>) _b1  )
    $constant $W[type_cast_895_wire_constant] : $int<1> := _b1// 1
    // ($bitcast ($uint<4>) _b0  )
    $constant $W[type_cast_903_wire_constant] : $int<4> := _b0000// 0
    // 			$guard (status) $call loadBuffer (rx_buffer_pointer_36 ) (bad_packet_identifier ) 
    //  file nic.linked.aa, line 384
    // 			$guard (ok_flag) $call populateRxQueue (rx_buffer_pointer_36 ) () 
    //  file nic.linked.aa, line 388
    // 			$guard (free_flag) $call pushIntoQueue (($bitcast ($uint<1>) _b1  ) FREE_Q ( $slice rx_buffer_pointer_36 35 4 )  ) (push_status ) 
    //  file nic.linked.aa, line 390
    // ($bitcast ($uint<1>) _b1  )
    $constant $W[type_cast_932_wire_constant] : $int<1> := _b1// 1
    // 	LAST_WRITTEN_RX_QUEUE_INDEX := 0  $buffering 1// bits of buffering = 6. 
    //  file nic.linked.aa, line 366
    // LAST_WRITTEN_RX_QUEUE_INDEX
    // block %ReceiveEngineDaemon%main
    //  file nic.linked.aa, line 367
    // if statement  
    //  file nic.linked.aa, line 0
    // CONTROL_REGISTER
    $W[RPIPE_CONTROL_REGISTER_885_wire] : $int<32>
    // (CONTROL_REGISTER [] 0 )
    $intermediate $W[BITSEL_u32_u1_887_wire] : $int<1>
    // do-while statement  
    //  file nic.linked.aa, line 376
    // CONTROL_REGISTER
    $W[RPIPE_CONTROL_REGISTER_940_wire] : $int<32>
    // (CONTROL_REGISTER [] 0 )
    $intermediate $W[BITSEL_u32_u1_942_wire] : $int<1>
    // ( ~ (CONTROL_REGISTER [] 0 ) )
    $intermediate $W[NOT_u1_u1_943_wire] : $int<1>
    // 			$call popFromQueue (($bitcast ($uint<1>) _b1  ) FREE_Q ) (rx_buffer_pointer_32 status ) 
    //  file nic.linked.aa, line 381
    // FREE_Q
    $W[RPIPE_FREE_Q_896_wire] : $int<36>
    // rx_buffer_pointer_32
    $W[rx_buffer_pointer_32_899] : $int<32>
    // status
    $W[status_899] : $int<1>
    // 			$volatile rx_buffer_pointer_36 := (rx_buffer_pointer_32 && ($bitcast ($uint<4>) _b0  )) $buffering 1
    //  file nic.linked.aa, line 382
    // rx_buffer_pointer_36
    $W[rx_buffer_pointer_36_905] : $int<36>
    // 			$guard (status) $call loadBuffer (rx_buffer_pointer_36 ) (bad_packet_identifier ) 
    //  file nic.linked.aa, line 384
    // bad_packet_identifier
    $W[bad_packet_identifier_911] : $int<1>
    // 			$volatile ok_flag := (status & ( ~ bad_packet_identifier )) $buffering 1
    //  file nic.linked.aa, line 385
    // ( ~ bad_packet_identifier )
    $intermediate $W[NOT_u1_u1_915_wire] : $int<1>
    // ok_flag
    $W[ok_flag_917] : $int<1>
    // 			$volatile free_flag := (status & bad_packet_identifier) $buffering 1
    //  file nic.linked.aa, line 386
    // free_flag
    $W[free_flag_922] : $int<1>
    // 			$guard (ok_flag) $call populateRxQueue (rx_buffer_pointer_36 ) () 
    //  file nic.linked.aa, line 388
    // 			$guard (free_flag) $call pushIntoQueue (($bitcast ($uint<1>) _b1  ) FREE_Q ( $slice rx_buffer_pointer_36 35 4 )  ) (push_status ) 
    //  file nic.linked.aa, line 390
    // FREE_Q
    $W[RPIPE_FREE_Q_933_wire] : $int<36>
    // ( $slice rx_buffer_pointer_36 35 4 ) 
    $intermediate $W[slice_935_wire] : $int<32>
    // push_status
    $W[push_status_937] : $int<1>
    // 	LAST_WRITTEN_RX_QUEUE_INDEX := 0  $buffering 1// bits of buffering = 6. 
    //  file nic.linked.aa, line 366
    // LAST_WRITTEN_RX_QUEUE_INDEX
    $ioport $out [WPIPE_LAST_WRITTEN_RX_QUEUE_INDEX_878_inst]  (konst_879_wire_constant) (LAST_WRITTEN_RX_QUEUE_INDEX) 
    // datapath-instances for block %ReceiveEngineDaemon%main
    //  file nic.linked.aa, line 367
    // datapath-instances for if  
    //  file nic.linked.aa, line 0
    // CONTROL_REGISTER
    $ioport $in [RPIPE_CONTROL_REGISTER_885_inst] (CONTROL_REGISTER) (RPIPE_CONTROL_REGISTER_885_wire) 
    $buffering $out RPIPE_CONTROL_REGISTER_885_inst RPIPE_CONTROL_REGISTER_885_wire 1
    // (CONTROL_REGISTER [] 0 )
    [][BITSEL_u32_u1_887_inst] (RPIPE_CONTROL_REGISTER_885_wire konst_886_wire_constant) (BITSEL_u32_u1_887_wire)   $flowthrough 
    $delay BITSEL_u32_u1_887_inst 0
    ==0? [if_stmt_884_branch] (BITSEL_u32_u1_887_wire)
    // datapath-instances for do-while  
    //  file nic.linked.aa, line 376
    // CONTROL_REGISTER
    $ioport $in [RPIPE_CONTROL_REGISTER_940_inst] (CONTROL_REGISTER) (RPIPE_CONTROL_REGISTER_940_wire)  $fullrate 
    $buffering $out RPIPE_CONTROL_REGISTER_940_inst RPIPE_CONTROL_REGISTER_940_wire 1
    // (CONTROL_REGISTER [] 0 )
    [][BITSEL_u32_u1_942_inst] (RPIPE_CONTROL_REGISTER_940_wire konst_941_wire_constant) (BITSEL_u32_u1_942_wire)   $flowthrough 
    $delay BITSEL_u32_u1_942_inst 0
    // ( ~ (CONTROL_REGISTER [] 0 ) )
    ~ [NOT_u1_u1_943_inst] (BITSEL_u32_u1_942_wire) (NOT_u1_u1_943_wire)   $flowthrough
    $delay NOT_u1_u1_943_inst 0
    ==0? [do_while_stmt_891_branch] (NOT_u1_u1_943_wire)
    $flowthrough
    // 			$call popFromQueue (($bitcast ($uint<1>) _b1  ) FREE_Q ) (rx_buffer_pointer_32 status ) 
    //  file nic.linked.aa, line 381
    // FREE_Q
    $ioport $in [RPIPE_FREE_Q_896_inst] (FREE_Q) (RPIPE_FREE_Q_896_wire)  $fullrate 
    $buffering $out RPIPE_FREE_Q_896_inst RPIPE_FREE_Q_896_wire 1
    $call [call_stmt_899_call] $module popFromQueue(type_cast_895_wire_constant RPIPE_FREE_Q_896_wire) (rx_buffer_pointer_32_899 status_899)   $fullrate
    $delay call_stmt_899_call 4
    $buffering  $in call_stmt_899_call type_cast_895_wire_constant 1
    $buffering  $in call_stmt_899_call RPIPE_FREE_Q_896_wire 1
    $buffering  $out call_stmt_899_call rx_buffer_pointer_32_899 1
    $buffering  $out call_stmt_899_call status_899 1
    // 			$volatile rx_buffer_pointer_36 := (rx_buffer_pointer_32 && ($bitcast ($uint<4>) _b0  )) $buffering 1
    //  file nic.linked.aa, line 382
    // (rx_buffer_pointer_32 && ($bitcast ($uint<4>) _b0  ))
    &&[CONCAT_u32_u36_904_inst] (rx_buffer_pointer_32_899 type_cast_903_wire_constant) (rx_buffer_pointer_36_905)   $flowthrough 
    $delay CONCAT_u32_u36_904_inst 0
    // 			$guard (status) $call loadBuffer (rx_buffer_pointer_36 ) (bad_packet_identifier ) 
    //  file nic.linked.aa, line 384
    $call [call_stmt_911_call] $module loadBuffer(rx_buffer_pointer_36_905) (bad_packet_identifier_911) $guard ( status_899 )   $fullrate
    $delay call_stmt_911_call 4
    $buffering  $in call_stmt_911_call rx_buffer_pointer_36_905 1
    $buffering  $out call_stmt_911_call bad_packet_identifier_911 1
    // 			$volatile ok_flag := (status & ( ~ bad_packet_identifier )) $buffering 1
    //  file nic.linked.aa, line 385
    // ( ~ bad_packet_identifier )
    ~ [NOT_u1_u1_915_inst] (bad_packet_identifier_911) (NOT_u1_u1_915_wire)   $flowthrough
    $delay NOT_u1_u1_915_inst 0
    // (status & ( ~ bad_packet_identifier ))
    &[AND_u1_u1_916_inst] (status_899 NOT_u1_u1_915_wire) (ok_flag_917)   $flowthrough 
    $delay AND_u1_u1_916_inst 0
    // 			$volatile free_flag := (status & bad_packet_identifier) $buffering 1
    //  file nic.linked.aa, line 386
    // (status & bad_packet_identifier)
    &[AND_u1_u1_921_inst] (status_899 bad_packet_identifier_911) (free_flag_922)   $flowthrough 
    $delay AND_u1_u1_921_inst 0
    // 			$guard (ok_flag) $call populateRxQueue (rx_buffer_pointer_36 ) () 
    //  file nic.linked.aa, line 388
    $call [call_stmt_927_call] $module populateRxQueue(rx_buffer_pointer_36_905) () $guard ( ok_flag_917 )   $fullrate
    $delay call_stmt_927_call 4
    $buffering  $in call_stmt_927_call rx_buffer_pointer_36_905 1
    // 			$guard (free_flag) $call pushIntoQueue (($bitcast ($uint<1>) _b1  ) FREE_Q ( $slice rx_buffer_pointer_36 35 4 )  ) (push_status ) 
    //  file nic.linked.aa, line 390
    // FREE_Q
    $ioport $in [RPIPE_FREE_Q_933_inst] (FREE_Q) (RPIPE_FREE_Q_933_wire) $guard ( free_flag_922 )  $fullrate 
    $buffering $out RPIPE_FREE_Q_933_inst RPIPE_FREE_Q_933_wire 1
    // ( $slice rx_buffer_pointer_36 35 4 ) 
    [:] [slice_935_inst] (rx_buffer_pointer_36_905 35 4) (slice_935_wire) $guard ( free_flag_922 )  $flowthrough
    $delay slice_935_inst 0
    $call [call_stmt_937_call] $module pushIntoQueue(type_cast_932_wire_constant RPIPE_FREE_Q_933_wire slice_935_wire) (push_status_937) $guard ( free_flag_922 )   $fullrate
    $delay call_stmt_937_call 4
    $buffering  $in call_stmt_937_call type_cast_932_wire_constant 1
    $buffering  $in call_stmt_937_call RPIPE_FREE_Q_933_wire 1
    $buffering  $in call_stmt_937_call slice_935_wire 1
    $buffering  $out call_stmt_937_call push_status_937 1
  }
  // end data-path
  // 	LAST_WRITTEN_RX_QUEUE_INDEX := 0  $buffering 1// bits of buffering = 6. 
  //  file nic.linked.aa, line 366
  // LAST_WRITTEN_RX_QUEUE_INDEX
  WPIPE_LAST_WRITTEN_RX_QUEUE_INDEX_878_inst <=> (assign_stmt_880/WPIPE_LAST_WRITTEN_RX_QUEUE_INDEX_878_Sample/req assign_stmt_880/WPIPE_LAST_WRITTEN_RX_QUEUE_INDEX_878_Update/req) (assign_stmt_880/WPIPE_LAST_WRITTEN_RX_QUEUE_INDEX_878_Sample/ack assign_stmt_880/WPIPE_LAST_WRITTEN_RX_QUEUE_INDEX_878_Update/ack)
  // CP-DP links for merge  
  //  file nic.linked.aa, line 369
  // CP-DP links for if  
  //  file nic.linked.aa, line 0
  // CONTROL_REGISTER
  // (CONTROL_REGISTER [] 0 )
  if_stmt_884_branch <=> (branch_block_stmt_881/if_stmt_884_eval_test/branch_req) (branch_block_stmt_881/if_stmt_884_else_link/else_choice_transition branch_block_stmt_881/if_stmt_884_if_link/if_choice_transition)
  // CP-DP links for do-while  do_while_stmt_891
  //  file nic.linked.aa, line 376
  // 			$call popFromQueue (($bitcast ($uint<1>) _b1  ) FREE_Q ) (rx_buffer_pointer_32 status ) 
  //  file nic.linked.aa, line 381
  // FREE_Q
  call_stmt_899_call <=> (branch_block_stmt_881/do_while_stmt_891/do_while_stmt_891_loop_body/call_stmt_899_Sample/crr branch_block_stmt_881/do_while_stmt_891/do_while_stmt_891_loop_body/call_stmt_899_Update/ccr) (branch_block_stmt_881/do_while_stmt_891/do_while_stmt_891_loop_body/call_stmt_899_Sample/cra branch_block_stmt_881/do_while_stmt_891/do_while_stmt_891_loop_body/call_stmt_899_Update/cca)
  // 			$volatile rx_buffer_pointer_36 := (rx_buffer_pointer_32 && ($bitcast ($uint<4>) _b0  )) $buffering 1
  //  file nic.linked.aa, line 382
  // (rx_buffer_pointer_32 && ($bitcast ($uint<4>) _b0  ))
  // rx_buffer_pointer_32
  // 			$guard (status) $call loadBuffer (rx_buffer_pointer_36 ) (bad_packet_identifier ) 
  //  file nic.linked.aa, line 384
  // rx_buffer_pointer_36
  call_stmt_911_call <=> (branch_block_stmt_881/do_while_stmt_891/do_while_stmt_891_loop_body/call_stmt_911_Sample/crr branch_block_stmt_881/do_while_stmt_891/do_while_stmt_891_loop_body/call_stmt_911_Update/ccr) (branch_block_stmt_881/do_while_stmt_891/do_while_stmt_891_loop_body/call_stmt_911_Sample/cra branch_block_stmt_881/do_while_stmt_891/do_while_stmt_891_loop_body/call_stmt_911_Update/cca)
  // 			$volatile ok_flag := (status & ( ~ bad_packet_identifier )) $buffering 1
  //  file nic.linked.aa, line 385
  // (status & ( ~ bad_packet_identifier ))
  // status
  // bad_packet_identifier
  // 			$volatile free_flag := (status & bad_packet_identifier) $buffering 1
  //  file nic.linked.aa, line 386
  // (status & bad_packet_identifier)
  // status
  // bad_packet_identifier
  // 			$guard (ok_flag) $call populateRxQueue (rx_buffer_pointer_36 ) () 
  //  file nic.linked.aa, line 388
  // rx_buffer_pointer_36
  call_stmt_927_call <=> (branch_block_stmt_881/do_while_stmt_891/do_while_stmt_891_loop_body/call_stmt_927_Sample/crr branch_block_stmt_881/do_while_stmt_891/do_while_stmt_891_loop_body/call_stmt_927_Update/ccr) (branch_block_stmt_881/do_while_stmt_891/do_while_stmt_891_loop_body/call_stmt_927_Sample/cra branch_block_stmt_881/do_while_stmt_891/do_while_stmt_891_loop_body/call_stmt_927_Update/cca)
  // 			$guard (free_flag) $call pushIntoQueue (($bitcast ($uint<1>) _b1  ) FREE_Q ( $slice rx_buffer_pointer_36 35 4 )  ) (push_status ) 
  //  file nic.linked.aa, line 390
  // FREE_Q
  // rx_buffer_pointer_36
  call_stmt_937_call <=> (branch_block_stmt_881/do_while_stmt_891/do_while_stmt_891_loop_body/call_stmt_937_Sample/crr branch_block_stmt_881/do_while_stmt_891/do_while_stmt_891_loop_body/call_stmt_937_Update/ccr) (branch_block_stmt_881/do_while_stmt_891/do_while_stmt_891_loop_body/call_stmt_937_Sample/cra branch_block_stmt_881/do_while_stmt_891/do_while_stmt_891_loop_body/call_stmt_937_Update/cca)
  // (CONTROL_REGISTER [] 0 )
  // CONTROL_REGISTER
  do_while_stmt_891_branch <=> (branch_block_stmt_881/do_while_stmt_891/do_while_stmt_891_loop_body/condition_evaluated) (branch_block_stmt_881/do_while_stmt_891/loop_exit/ack branch_block_stmt_881/do_while_stmt_891/loop_taken/ack)
}
$module [SoftwareRegisterAccessDaemon] 
{
  // pipe-declarations for block %SoftwareRegisterAccessDaemon
  //  file nic.linked.aa, line 396
  // pipe-declarations for block %SoftwareRegisterAccessDaemon%loop
  //  file nic.linked.aa, line 402
  // memory-space 0 is read from.
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    <>[branch_block_stmt_949] // Branch Block  file nic.linked.aa, line 402
    {
      $P [branch_block_stmt_949__entry__]
      branch_block_stmt_949__entry__ <-| ($entry)
      $P [branch_block_stmt_949__exit__]
      branch_block_stmt_949__exit__ |-> ($exit)
      $P [do_while_stmt_950__entry__] 
      $P [do_while_stmt_950__exit__] 
      // do-while-statement  
      //  file nic.linked.aa, line 404
      <o> [do_while_stmt_950]  $depth 31 $buffering 1 
      {
        $P[do_while_stmt_950__entry__] 
        $P[do_while_stmt_950__exit__] 
        $P[loop_back] 
        $P[condition_done] 
        $P[loop_body_done] 
        $pipeline [do_while_stmt_950_loop_body] 
        {
          // Pipelined!
          $T[back_edge_to_loop_body] 
          $T[first_time_through_loop_body] 
          $T[loop_body_start] 
          $T[condition_evaluated] 
          $transitionmerge [entry_tmerge] (back_edge_to_loop_body first_time_through_loop_body) (loop_body_start)
          $entry <-& (loop_body_start)
          $T[aggregated_phi_sample_req] 
          $T[aggregated_phi_sample_ack] 
          $T[aggregated_phi_update_req] 
          $T[aggregated_phi_update_ack] 
          // do not loop-back unless all phi's have used up their triggering tokens.
          condition_evaluated <-& (aggregated_phi_update_ack)
          aggregated_phi_sample_req o<-& (aggregated_phi_update_ack 0)
          // start:  PHI statement phi_stmt_952
          // 			$phi INIT := 			  ($bitcast ($uint<1>) _b0  ) $on   $entry 			  ($bitcast ($uint<1>) _b1  ) $on   $loopback 
          // type of target is $uint<1>
          $T[phi_stmt_952_sample_start_] 
          $T[phi_stmt_952_sample_completed_] 
          $T[phi_stmt_952_update_start_] 
          $T[phi_stmt_952_update_completed_] 
          $T[phi_stmt_952_sample_start__ps] 
          phi_stmt_952_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_952_sample_completed__ps] 
          phi_stmt_952_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_952_update_start__ps] 
          phi_stmt_952_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_952_update_completed__ps] 
          phi_stmt_952_update_completed_ <-& (phi_stmt_952_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_952_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_952_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_952_update_start_)
          $T[phi_stmt_952_loopback_trigger] 
          phi_stmt_952_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_952_loopback_sample_req] 
          $T[phi_stmt_952_loopback_sample_req_ps] 
          phi_stmt_952_loopback_sample_req <-& (phi_stmt_952_loopback_sample_req_ps)
          phi_stmt_952_loopback_sample_req &-> ($null)
          $T[phi_stmt_952_entry_trigger] 
          phi_stmt_952_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_952_entry_sample_req] 
          $T[phi_stmt_952_entry_sample_req_ps] 
          phi_stmt_952_entry_sample_req <-& (phi_stmt_952_entry_sample_req_ps)
          phi_stmt_952_entry_sample_req &-> ($null)
          phi_stmt_952_update_start_ o<-& (phi_stmt_952_update_completed_ 0)
          phi_stmt_952_sample_start_ o<-& (phi_stmt_952_sample_completed_ 1)
          $T[phi_stmt_952_merged_reqs] 
          $T[phi_stmt_952_phi_mux_ack] 
          $T[phi_stmt_952_phi_mux_ack_ps] 
          phi_stmt_952_phi_mux_ack_ps <-& (phi_stmt_952_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_952_update_completed_)
          $T[type_cast_955_sample_start__ps] 
          $T[type_cast_955_sample_completed__ps] 
          $T[type_cast_955_update_start__ps] 
          $T[type_cast_955_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[type_cast_955_sample_start_] 
          $T[type_cast_955_sample_completed_] 
          type_cast_955_sample_completed_ <-& (type_cast_955_sample_start_)
          $T[type_cast_955_update_start_] 
          $T [type_cast_955_update_completed_] $delay 
          type_cast_955_update_completed_ <-& (type_cast_955_update_start_)
          // Phi start dependency for implicit/constant alternative.
          type_cast_955_sample_start_ <-& (type_cast_955_sample_start__ps)
          type_cast_955_update_start_ <-& (type_cast_955_update_start__ps)
          // Phi complete dependency.
          type_cast_955_sample_completed__ps <-& (type_cast_955_sample_completed_)
          type_cast_955_update_completed__ps <-& (type_cast_955_update_completed_)
          $T[type_cast_957_sample_start__ps] 
          $T[type_cast_957_sample_completed__ps] 
          $T[type_cast_957_update_start__ps] 
          $T[type_cast_957_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[type_cast_957_sample_start_] 
          $T[type_cast_957_sample_completed_] 
          type_cast_957_sample_completed_ <-& (type_cast_957_sample_start_)
          $T[type_cast_957_update_start_] 
          $T [type_cast_957_update_completed_] $delay 
          type_cast_957_update_completed_ <-& (type_cast_957_update_start_)
          // Phi start dependency for implicit/constant alternative.
          type_cast_957_sample_start_ <-& (type_cast_957_sample_start__ps)
          type_cast_957_update_start_ <-& (type_cast_957_update_start__ps)
          // Phi complete dependency.
          type_cast_957_sample_completed__ps <-& (type_cast_957_sample_completed_)
          type_cast_957_update_completed__ps <-& (type_cast_957_update_completed_)
          $phisequencer [ phi_stmt_952_phi_seq] : 
          phi_stmt_952_entry_trigger type_cast_955_sample_start__ps type_cast_955_sample_completed__ps type_cast_955_update_start__ps type_cast_955_update_completed__ps phi_stmt_952_loopback_trigger type_cast_957_sample_start__ps type_cast_957_sample_completed__ps type_cast_957_update_start__ps type_cast_957_update_completed__ps :
          phi_stmt_952_sample_start__ps phi_stmt_952_sample_completed__ps phi_stmt_952_update_start__ps phi_stmt_952_update_completed__ps :
          phi_stmt_952_entry_sample_req_ps phi_stmt_952_loopback_sample_req_ps : 
          phi_stmt_952_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_952
          // start:  PHI statement phi_stmt_958
          // 			$phi control_register := 			  ($bitcast ($uint<1>) _b0  ) $on   $entry 			  check_control_regsiter $on   $loopback 
          // type of target is $uint<1>
          $T[phi_stmt_958_sample_start_] 
          $T[phi_stmt_958_sample_completed_] 
          $T[phi_stmt_958_update_start_] 
          $T[phi_stmt_958_update_completed_] 
          $T[phi_stmt_958_sample_start__ps] 
          phi_stmt_958_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_958_sample_completed__ps] 
          phi_stmt_958_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_958_update_start__ps] 
          phi_stmt_958_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_958_update_completed__ps] 
          phi_stmt_958_update_completed_ <-& (phi_stmt_958_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_958_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_958_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_958_update_start_)
          $T[phi_stmt_958_loopback_trigger] 
          phi_stmt_958_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_958_loopback_sample_req] 
          $T[phi_stmt_958_loopback_sample_req_ps] 
          phi_stmt_958_loopback_sample_req <-& (phi_stmt_958_loopback_sample_req_ps)
          phi_stmt_958_loopback_sample_req &-> ($null)
          $T[phi_stmt_958_entry_trigger] 
          phi_stmt_958_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_958_entry_sample_req] 
          $T[phi_stmt_958_entry_sample_req_ps] 
          phi_stmt_958_entry_sample_req <-& (phi_stmt_958_entry_sample_req_ps)
          phi_stmt_958_entry_sample_req &-> ($null)
          phi_stmt_958_update_start_ o<-& (phi_stmt_958_update_completed_ 0)
          phi_stmt_958_sample_start_ o<-& (phi_stmt_958_sample_completed_ 1)
          $T[phi_stmt_958_merged_reqs] 
          $T[phi_stmt_958_phi_mux_ack] 
          $T[phi_stmt_958_phi_mux_ack_ps] 
          phi_stmt_958_phi_mux_ack_ps <-& (phi_stmt_958_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_958_update_completed_)
          $T[type_cast_961_sample_start__ps] 
          $T[type_cast_961_sample_completed__ps] 
          $T[type_cast_961_update_start__ps] 
          $T[type_cast_961_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[type_cast_961_sample_start_] 
          $T[type_cast_961_sample_completed_] 
          type_cast_961_sample_completed_ <-& (type_cast_961_sample_start_)
          $T[type_cast_961_update_start_] 
          $T [type_cast_961_update_completed_] $delay 
          type_cast_961_update_completed_ <-& (type_cast_961_update_start_)
          // Phi start dependency for implicit/constant alternative.
          type_cast_961_sample_start_ <-& (type_cast_961_sample_start__ps)
          type_cast_961_update_start_ <-& (type_cast_961_update_start__ps)
          // Phi complete dependency.
          type_cast_961_sample_completed__ps <-& (type_cast_961_sample_completed_)
          type_cast_961_update_completed__ps <-& (type_cast_961_update_completed_)
          $T[R_check_control_regsiter_962_sample_start__ps] 
          $T[R_check_control_regsiter_962_sample_completed__ps] 
          $T[R_check_control_regsiter_962_update_start__ps] 
          $T[R_check_control_regsiter_962_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_check_control_regsiter_962_sample_start_] 
          $T[R_check_control_regsiter_962_sample_completed_] 
          $T[R_check_control_regsiter_962_update_start_] 
          $T[R_check_control_regsiter_962_update_completed_] 
          ;;[R_check_control_regsiter_962_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_check_control_regsiter_962_sample_start_ &-> (R_check_control_regsiter_962_Sample)
          R_check_control_regsiter_962_sample_completed_ <-& (R_check_control_regsiter_962_Sample)
          ;;[R_check_control_regsiter_962_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_check_control_regsiter_962_update_start_ &-> (R_check_control_regsiter_962_Update)
          R_check_control_regsiter_962_update_completed_ <-& (R_check_control_regsiter_962_Update)
          // RAW reenables for check_control_regsiter
          // Phi start dependency for implicit/constant alternative.
          R_check_control_regsiter_962_sample_start_ <-& (R_check_control_regsiter_962_sample_start__ps)
          R_check_control_regsiter_962_update_start_ <-& (R_check_control_regsiter_962_update_start__ps)
          // Phi complete dependency.
          R_check_control_regsiter_962_sample_completed__ps <-& (R_check_control_regsiter_962_sample_completed_)
          R_check_control_regsiter_962_update_completed__ps <-& (R_check_control_regsiter_962_update_completed_)
          $phisequencer [ phi_stmt_958_phi_seq] : 
          phi_stmt_958_entry_trigger type_cast_961_sample_start__ps type_cast_961_sample_completed__ps type_cast_961_update_start__ps type_cast_961_update_completed__ps phi_stmt_958_loopback_trigger R_check_control_regsiter_962_sample_start__ps R_check_control_regsiter_962_sample_completed__ps R_check_control_regsiter_962_update_start__ps R_check_control_regsiter_962_update_completed__ps :
          phi_stmt_958_sample_start__ps phi_stmt_958_sample_completed__ps phi_stmt_958_update_start__ps phi_stmt_958_update_completed__ps :
          phi_stmt_958_entry_sample_req_ps phi_stmt_958_loopback_sample_req_ps : 
          phi_stmt_958_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_958
          // start:  PHI statement phi_stmt_963
          // 			$phi free_q := 			  ($bitcast ($uint<1>) _b0  ) $on   $entry 			  check_free_q $on   $loopback 
          // type of target is $uint<1>
          $T[phi_stmt_963_sample_start_] 
          $T[phi_stmt_963_sample_completed_] 
          $T[phi_stmt_963_update_start_] 
          $T[phi_stmt_963_update_completed_] 
          $T[phi_stmt_963_sample_start__ps] 
          phi_stmt_963_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_963_sample_completed__ps] 
          phi_stmt_963_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_963_update_start__ps] 
          phi_stmt_963_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_963_update_completed__ps] 
          phi_stmt_963_update_completed_ <-& (phi_stmt_963_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_963_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_963_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_963_update_start_)
          $T[phi_stmt_963_loopback_trigger] 
          phi_stmt_963_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_963_loopback_sample_req] 
          $T[phi_stmt_963_loopback_sample_req_ps] 
          phi_stmt_963_loopback_sample_req <-& (phi_stmt_963_loopback_sample_req_ps)
          phi_stmt_963_loopback_sample_req &-> ($null)
          $T[phi_stmt_963_entry_trigger] 
          phi_stmt_963_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_963_entry_sample_req] 
          $T[phi_stmt_963_entry_sample_req_ps] 
          phi_stmt_963_entry_sample_req <-& (phi_stmt_963_entry_sample_req_ps)
          phi_stmt_963_entry_sample_req &-> ($null)
          phi_stmt_963_update_start_ o<-& (phi_stmt_963_update_completed_ 0)
          phi_stmt_963_sample_start_ o<-& (phi_stmt_963_sample_completed_ 1)
          $T[phi_stmt_963_merged_reqs] 
          $T[phi_stmt_963_phi_mux_ack] 
          $T[phi_stmt_963_phi_mux_ack_ps] 
          phi_stmt_963_phi_mux_ack_ps <-& (phi_stmt_963_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_963_update_completed_)
          $T[type_cast_966_sample_start__ps] 
          $T[type_cast_966_sample_completed__ps] 
          $T[type_cast_966_update_start__ps] 
          $T[type_cast_966_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[type_cast_966_sample_start_] 
          $T[type_cast_966_sample_completed_] 
          type_cast_966_sample_completed_ <-& (type_cast_966_sample_start_)
          $T[type_cast_966_update_start_] 
          $T [type_cast_966_update_completed_] $delay 
          type_cast_966_update_completed_ <-& (type_cast_966_update_start_)
          // Phi start dependency for implicit/constant alternative.
          type_cast_966_sample_start_ <-& (type_cast_966_sample_start__ps)
          type_cast_966_update_start_ <-& (type_cast_966_update_start__ps)
          // Phi complete dependency.
          type_cast_966_sample_completed__ps <-& (type_cast_966_sample_completed_)
          type_cast_966_update_completed__ps <-& (type_cast_966_update_completed_)
          $T[R_check_free_q_967_sample_start__ps] 
          $T[R_check_free_q_967_sample_completed__ps] 
          $T[R_check_free_q_967_update_start__ps] 
          $T[R_check_free_q_967_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_check_free_q_967_sample_start_] 
          $T[R_check_free_q_967_sample_completed_] 
          $T[R_check_free_q_967_update_start_] 
          $T[R_check_free_q_967_update_completed_] 
          ;;[R_check_free_q_967_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_check_free_q_967_sample_start_ &-> (R_check_free_q_967_Sample)
          R_check_free_q_967_sample_completed_ <-& (R_check_free_q_967_Sample)
          ;;[R_check_free_q_967_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_check_free_q_967_update_start_ &-> (R_check_free_q_967_Update)
          R_check_free_q_967_update_completed_ <-& (R_check_free_q_967_Update)
          // RAW reenables for check_free_q
          // Phi start dependency for implicit/constant alternative.
          R_check_free_q_967_sample_start_ <-& (R_check_free_q_967_sample_start__ps)
          R_check_free_q_967_update_start_ <-& (R_check_free_q_967_update_start__ps)
          // Phi complete dependency.
          R_check_free_q_967_sample_completed__ps <-& (R_check_free_q_967_sample_completed_)
          R_check_free_q_967_update_completed__ps <-& (R_check_free_q_967_update_completed_)
          $phisequencer [ phi_stmt_963_phi_seq] : 
          phi_stmt_963_entry_trigger type_cast_966_sample_start__ps type_cast_966_sample_completed__ps type_cast_966_update_start__ps type_cast_966_update_completed__ps phi_stmt_963_loopback_trigger R_check_free_q_967_sample_start__ps R_check_free_q_967_sample_completed__ps R_check_free_q_967_update_start__ps R_check_free_q_967_update_completed__ps :
          phi_stmt_963_sample_start__ps phi_stmt_963_sample_completed__ps phi_stmt_963_update_start__ps phi_stmt_963_update_completed__ps :
          phi_stmt_963_entry_sample_req_ps phi_stmt_963_loopback_sample_req_ps : 
          phi_stmt_963_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_963
          // start:  PHI statement phi_stmt_968
          // 			$phi num_server := 			  ($bitcast ($uint<1>) _b0  ) $on   $entry 			  check_num_server $on   $loopback 
          // type of target is $uint<1>
          $T[phi_stmt_968_sample_start_] 
          $T[phi_stmt_968_sample_completed_] 
          $T[phi_stmt_968_update_start_] 
          $T[phi_stmt_968_update_completed_] 
          $T[phi_stmt_968_sample_start__ps] 
          phi_stmt_968_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_968_sample_completed__ps] 
          phi_stmt_968_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_968_update_start__ps] 
          phi_stmt_968_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_968_update_completed__ps] 
          phi_stmt_968_update_completed_ <-& (phi_stmt_968_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_968_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_968_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_968_update_start_)
          $T[phi_stmt_968_loopback_trigger] 
          phi_stmt_968_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_968_loopback_sample_req] 
          $T[phi_stmt_968_loopback_sample_req_ps] 
          phi_stmt_968_loopback_sample_req <-& (phi_stmt_968_loopback_sample_req_ps)
          phi_stmt_968_loopback_sample_req &-> ($null)
          $T[phi_stmt_968_entry_trigger] 
          phi_stmt_968_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_968_entry_sample_req] 
          $T[phi_stmt_968_entry_sample_req_ps] 
          phi_stmt_968_entry_sample_req <-& (phi_stmt_968_entry_sample_req_ps)
          phi_stmt_968_entry_sample_req &-> ($null)
          phi_stmt_968_update_start_ o<-& (phi_stmt_968_update_completed_ 0)
          phi_stmt_968_sample_start_ o<-& (phi_stmt_968_sample_completed_ 1)
          $T[phi_stmt_968_merged_reqs] 
          $T[phi_stmt_968_phi_mux_ack] 
          $T[phi_stmt_968_phi_mux_ack_ps] 
          phi_stmt_968_phi_mux_ack_ps <-& (phi_stmt_968_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_968_update_completed_)
          $T[type_cast_971_sample_start__ps] 
          $T[type_cast_971_sample_completed__ps] 
          $T[type_cast_971_update_start__ps] 
          $T[type_cast_971_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[type_cast_971_sample_start_] 
          $T[type_cast_971_sample_completed_] 
          type_cast_971_sample_completed_ <-& (type_cast_971_sample_start_)
          $T[type_cast_971_update_start_] 
          $T [type_cast_971_update_completed_] $delay 
          type_cast_971_update_completed_ <-& (type_cast_971_update_start_)
          // Phi start dependency for implicit/constant alternative.
          type_cast_971_sample_start_ <-& (type_cast_971_sample_start__ps)
          type_cast_971_update_start_ <-& (type_cast_971_update_start__ps)
          // Phi complete dependency.
          type_cast_971_sample_completed__ps <-& (type_cast_971_sample_completed_)
          type_cast_971_update_completed__ps <-& (type_cast_971_update_completed_)
          $T[R_check_num_server_972_sample_start__ps] 
          $T[R_check_num_server_972_sample_completed__ps] 
          $T[R_check_num_server_972_update_start__ps] 
          $T[R_check_num_server_972_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_check_num_server_972_sample_start_] 
          $T[R_check_num_server_972_sample_completed_] 
          $T[R_check_num_server_972_update_start_] 
          $T[R_check_num_server_972_update_completed_] 
          ;;[R_check_num_server_972_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_check_num_server_972_sample_start_ &-> (R_check_num_server_972_Sample)
          R_check_num_server_972_sample_completed_ <-& (R_check_num_server_972_Sample)
          ;;[R_check_num_server_972_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_check_num_server_972_update_start_ &-> (R_check_num_server_972_Update)
          R_check_num_server_972_update_completed_ <-& (R_check_num_server_972_Update)
          // RAW reenables for check_num_server
          // Phi start dependency for implicit/constant alternative.
          R_check_num_server_972_sample_start_ <-& (R_check_num_server_972_sample_start__ps)
          R_check_num_server_972_update_start_ <-& (R_check_num_server_972_update_start__ps)
          // Phi complete dependency.
          R_check_num_server_972_sample_completed__ps <-& (R_check_num_server_972_sample_completed_)
          R_check_num_server_972_update_completed__ps <-& (R_check_num_server_972_update_completed_)
          $phisequencer [ phi_stmt_968_phi_seq] : 
          phi_stmt_968_entry_trigger type_cast_971_sample_start__ps type_cast_971_sample_completed__ps type_cast_971_update_start__ps type_cast_971_update_completed__ps phi_stmt_968_loopback_trigger R_check_num_server_972_sample_start__ps R_check_num_server_972_sample_completed__ps R_check_num_server_972_update_start__ps R_check_num_server_972_update_completed__ps :
          phi_stmt_968_sample_start__ps phi_stmt_968_sample_completed__ps phi_stmt_968_update_start__ps phi_stmt_968_update_completed__ps :
          phi_stmt_968_entry_sample_req_ps phi_stmt_968_loopback_sample_req_ps : 
          phi_stmt_968_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_968
          // start: WAR dependencies for update_control_register_pipe
          // done: WAR dependencies for update_control_register_pipe
          // start:  			$volatile update_control_register_pipe := (( ~ INIT ) | (INIT & control_register)) $buffering 1
          //  file nic.linked.aa, line 417
          // volatile! 
          // Source expression
          // (( ~ INIT ) | (INIT & control_register))
          // ( ~ INIT )
          // INIT
          // (INIT & control_register)
          // INIT
          // control_register
          // Target expression
          // (as target) update_control_register_pipe
          // start: WAR dependencies for update_control_register_pipe
          // done: WAR dependencies for update_control_register_pipe
          // end:  			$volatile update_control_register_pipe := (( ~ INIT ) | (INIT & control_register)) $buffering 1
          // start: WAR dependencies for update_free_q_pipe
          // done: WAR dependencies for update_free_q_pipe
          // start:  			$volatile update_free_q_pipe := (( ~ INIT ) | (INIT & free_q)) $buffering 1
          //  file nic.linked.aa, line 418
          // volatile! 
          // Source expression
          // (( ~ INIT ) | (INIT & free_q))
          // ( ~ INIT )
          // INIT
          // (INIT & free_q)
          // INIT
          // free_q
          // Target expression
          // (as target) update_free_q_pipe
          // start: WAR dependencies for update_free_q_pipe
          // done: WAR dependencies for update_free_q_pipe
          // end:  			$volatile update_free_q_pipe := (( ~ INIT ) | (INIT & free_q)) $buffering 1
          // start: WAR dependencies for update_server_num
          // done: WAR dependencies for update_server_num
          // start:  			$volatile update_server_num := (( ~ INIT ) | (INIT & num_server)) $buffering 1
          //  file nic.linked.aa, line 419
          // volatile! 
          // Source expression
          // (( ~ INIT ) | (INIT & num_server))
          // ( ~ INIT )
          // INIT
          // (INIT & num_server)
          // INIT
          // num_server
          // Target expression
          // (as target) update_server_num
          // start: WAR dependencies for update_server_num
          // done: WAR dependencies for update_server_num
          // end:  			$volatile update_server_num := (( ~ INIT ) | (INIT & num_server)) $buffering 1
          // start:  			$guard (update_control_register_pipe) CONTROL_REGISTER := nic_registers[0 ] $buffering 1// bits of buffering = 32. 
          //  file nic.linked.aa, line 420
          // Guard expression 
          // update_control_register_pipe
          // Source expression
          // nic_registers[0 ]
          $T[array_obj_ref_1002_base_address_calculated] 
          $T[array_obj_ref_1002_sample_start_] 
          $T[array_obj_ref_1002_sample_completed_] 
          $T[array_obj_ref_1002_update_start_] 
          $T[array_obj_ref_1002_update_completed_] 
          $T[array_obj_ref_1002_word_address_calculated] 
          $T[array_obj_ref_1002_root_address_calculated] 
          array_obj_ref_1002_word_address_calculated <-& (array_obj_ref_1002_root_address_calculated)
          ;;[array_obj_ref_1002_Sample] 
          {
            ||[word_access_start] 
            {
              ;;[word_0] 
              {
                $T [rr] $T [ra] 
              }
            }
          }
          ;;[array_obj_ref_1002_Update] 
          {
            ||[word_access_complete] 
            {
              ;;[word_0] 
              {
                $T [cr] $T [ca] 
              }
            }
            ;;[array_obj_ref_1002_Merge] 
            {
              $T [merge_req] $T [merge_ack]
            }
          }
          array_obj_ref_1002_sample_start_ <-& (array_obj_ref_1002_word_address_calculated)
          // reenable-joins
          array_obj_ref_1002_sample_start_ &-> (array_obj_ref_1002_Sample)
          array_obj_ref_1002_sample_completed_ <-& (array_obj_ref_1002_Sample)
          array_obj_ref_1002_sample_completed_ &-> ($null)
          array_obj_ref_1002_update_start_ &-> (array_obj_ref_1002_Update)
          array_obj_ref_1002_update_completed_ <-& (array_obj_ref_1002_Update)
          // self-release: 
          array_obj_ref_1002_sample_start_ o<-& (array_obj_ref_1002_sample_completed_ 1)
          $null &-> (array_obj_ref_1002_update_start_)
          array_obj_ref_1002_update_start_ o<-& (array_obj_ref_1002_update_completed_ 0)
          // Guard dependency for expression array_obj_ref_1002 with guard R_update_control_register_pipe_999
          array_obj_ref_1002_sample_start_ <-& (phi_stmt_952_update_completed_)
          array_obj_ref_1002_sample_start_ <-& (phi_stmt_958_update_completed_)
          // RAW reenables for update_control_register_pipe
          phi_stmt_952_update_start_ o<-& (array_obj_ref_1002_sample_completed_ 0)
          phi_stmt_958_update_start_ o<-& (array_obj_ref_1002_sample_completed_ 0)
          // Target expression
          // (as target) CONTROL_REGISTER
          $T[WPIPE_CONTROL_REGISTER_1000_sample_start_] 
          $T[WPIPE_CONTROL_REGISTER_1000_sample_completed_] 
          $T[WPIPE_CONTROL_REGISTER_1000_update_start_] 
          $T[WPIPE_CONTROL_REGISTER_1000_update_completed_] 
          // Guard dependency for expression WPIPE_CONTROL_REGISTER_1000 with guard R_update_control_register_pipe_999
          WPIPE_CONTROL_REGISTER_1000_sample_start_ <-& (phi_stmt_952_update_completed_)
          WPIPE_CONTROL_REGISTER_1000_sample_start_ <-& (phi_stmt_958_update_completed_)
          // RAW reenables for update_control_register_pipe
          phi_stmt_952_update_start_ o<-& (WPIPE_CONTROL_REGISTER_1000_sample_completed_ 0)
          phi_stmt_958_update_start_ o<-& (WPIPE_CONTROL_REGISTER_1000_sample_completed_ 0)
          ;;[WPIPE_CONTROL_REGISTER_1000_Sample] 
          {
            // pipe write sample-start CONTROL_REGISTER
            $T [req] $T [ack] 
          }
          ;;[WPIPE_CONTROL_REGISTER_1000_Update] 
          {
            // pipe write update (complete) CONTROL_REGISTER
            $T [req] $T [ack] 
          }
          WPIPE_CONTROL_REGISTER_1000_sample_start_ &-> (WPIPE_CONTROL_REGISTER_1000_Sample)
          WPIPE_CONTROL_REGISTER_1000_sample_completed_ <-& (WPIPE_CONTROL_REGISTER_1000_Sample)
          WPIPE_CONTROL_REGISTER_1000_update_start_ <-& (WPIPE_CONTROL_REGISTER_1000_sample_completed_)
          WPIPE_CONTROL_REGISTER_1000_update_start_ &-> (WPIPE_CONTROL_REGISTER_1000_Update)
          WPIPE_CONTROL_REGISTER_1000_update_completed_ <-& (WPIPE_CONTROL_REGISTER_1000_Update)
          WPIPE_CONTROL_REGISTER_1000_sample_start_ o<-& (WPIPE_CONTROL_REGISTER_1000_update_completed_ 0)
          // start: Forward dependencies from nic_registers[0 ] to transition WPIPE_CONTROL_REGISTER_1000_sample_start_
          WPIPE_CONTROL_REGISTER_1000_sample_start_ <-& (array_obj_ref_1002_update_completed_)
          // done: Forward dependencies from nic_registers[0 ] to transition WPIPE_CONTROL_REGISTER_1000_sample_start_
          // RAW reenables for nic_registers[0 ]
          array_obj_ref_1002_update_start_ o<-& (WPIPE_CONTROL_REGISTER_1000_sample_completed_ 0)
          // end:  			$guard (update_control_register_pipe) CONTROL_REGISTER := nic_registers[0 ] $buffering 1// bits of buffering = 32. 
          // start:  			$guard (update_free_q_pipe) FREE_Q_32 := nic_registers[18 ] $buffering 1// bits of buffering = 32. 
          //  file nic.linked.aa, line 421
          // Guard expression 
          // update_free_q_pipe
          // Source expression
          // nic_registers[18 ]
          $T[array_obj_ref_1007_base_address_calculated] 
          $T[array_obj_ref_1007_sample_start_] 
          $T[array_obj_ref_1007_sample_completed_] 
          $T[array_obj_ref_1007_update_start_] 
          $T[array_obj_ref_1007_update_completed_] 
          $T[array_obj_ref_1007_word_address_calculated] 
          $T[array_obj_ref_1007_root_address_calculated] 
          array_obj_ref_1007_word_address_calculated <-& (array_obj_ref_1007_root_address_calculated)
          ;;[array_obj_ref_1007_Sample] 
          {
            ||[word_access_start] 
            {
              ;;[word_0] 
              {
                $T [rr] $T [ra] 
              }
            }
          }
          ;;[array_obj_ref_1007_Update] 
          {
            ||[word_access_complete] 
            {
              ;;[word_0] 
              {
                $T [cr] $T [ca] 
              }
            }
            ;;[array_obj_ref_1007_Merge] 
            {
              $T [merge_req] $T [merge_ack]
            }
          }
          array_obj_ref_1007_sample_start_ <-& (array_obj_ref_1007_word_address_calculated)
          // reenable-joins
          array_obj_ref_1007_sample_start_ &-> (array_obj_ref_1007_Sample)
          array_obj_ref_1007_sample_completed_ <-& (array_obj_ref_1007_Sample)
          array_obj_ref_1007_sample_completed_ &-> ($null)
          array_obj_ref_1007_update_start_ &-> (array_obj_ref_1007_Update)
          array_obj_ref_1007_update_completed_ <-& (array_obj_ref_1007_Update)
          // self-release: 
          array_obj_ref_1007_sample_start_ o<-& (array_obj_ref_1007_sample_completed_ 1)
          $null &-> (array_obj_ref_1007_update_start_)
          array_obj_ref_1007_update_start_ o<-& (array_obj_ref_1007_update_completed_ 0)
          // Guard dependency for expression array_obj_ref_1007 with guard R_update_free_q_pipe_1004
          array_obj_ref_1007_sample_start_ <-& (phi_stmt_952_update_completed_)
          array_obj_ref_1007_sample_start_ <-& (phi_stmt_963_update_completed_)
          // RAW reenables for update_free_q_pipe
          phi_stmt_952_update_start_ o<-& (array_obj_ref_1007_sample_completed_ 0)
          phi_stmt_963_update_start_ o<-& (array_obj_ref_1007_sample_completed_ 0)
          // Target expression
          // (as target) FREE_Q_32
          // start: WAR dependencies for FREE_Q_32
          // done: WAR dependencies for FREE_Q_32
          // end:  			$guard (update_free_q_pipe) FREE_Q_32 := nic_registers[18 ] $buffering 1// bits of buffering = 32. 
          // start:  			$guard (update_free_q_pipe) FREE_Q := ($bitcast ($uint<36>) (FREE_Q_32 && ($bitcast ($uint<3>) _b0  )) ) $buffering 1// bits of buffering = 36. 
          //  file nic.linked.aa, line 422
          // Guard expression 
          // update_free_q_pipe
          // Source expression
          // ($bitcast ($uint<36>) (FREE_Q_32 && ($bitcast ($uint<3>) _b0  )) )
          $T[type_cast_1015_sample_start_] 
          $T[type_cast_1015_sample_completed_] 
          $T[type_cast_1015_update_start_] 
          $T[type_cast_1015_update_completed_] 
          // Guard dependency for expression type_cast_1015 with guard R_update_free_q_pipe_1009
          type_cast_1015_sample_start_ <-& (phi_stmt_952_update_completed_)
          type_cast_1015_sample_start_ <-& (phi_stmt_963_update_completed_)
          // RAW reenables for update_free_q_pipe
          phi_stmt_952_update_start_ o<-& (type_cast_1015_sample_completed_ 0)
          phi_stmt_963_update_start_ o<-& (type_cast_1015_sample_completed_ 0)
          // (FREE_Q_32 && ($bitcast ($uint<3>) _b0  ))
          // FREE_Q_32
          // start: Forward dependencies from (FREE_Q_32 && ($bitcast ($uint<3>) _b0  )) to transition type_cast_1015_sample_start_
          type_cast_1015_sample_start_ <-& (array_obj_ref_1007_update_completed_)
          // done: Forward dependencies from (FREE_Q_32 && ($bitcast ($uint<3>) _b0  )) to transition type_cast_1015_sample_start_
          ;;[type_cast_1015_Sample] 
          {
            // unary expression 
            $T [rr] $T [ra] // (split) unary operation
          }
          ;;[type_cast_1015_Update] 
          {
            // unary expression 
            $T [cr] $T [ca] //(split) unary operation
          }
          type_cast_1015_sample_start_ &-> (type_cast_1015_Sample)
          type_cast_1015_sample_completed_ <-& (type_cast_1015_Sample)
          type_cast_1015_sample_completed_ &-> ($null)
          type_cast_1015_update_start_ &-> (type_cast_1015_Update)
          type_cast_1015_update_completed_ <-& (type_cast_1015_Update)
          // RAW reenables for (FREE_Q_32 && ($bitcast ($uint<3>) _b0  ))
          array_obj_ref_1007_update_start_ o<-& (type_cast_1015_sample_completed_ 0)
          // self-release: 
          type_cast_1015_sample_start_ o<-& (type_cast_1015_sample_completed_ 1)
          $null &-> (type_cast_1015_update_start_)
          type_cast_1015_update_start_ o<-& (type_cast_1015_update_completed_ 0)
          // Target expression
          // (as target) FREE_Q
          $T[WPIPE_FREE_Q_1010_sample_start_] 
          $T[WPIPE_FREE_Q_1010_sample_completed_] 
          $T[WPIPE_FREE_Q_1010_update_start_] 
          $T[WPIPE_FREE_Q_1010_update_completed_] 
          // Guard dependency for expression WPIPE_FREE_Q_1010 with guard R_update_free_q_pipe_1009
          WPIPE_FREE_Q_1010_sample_start_ <-& (phi_stmt_952_update_completed_)
          WPIPE_FREE_Q_1010_sample_start_ <-& (phi_stmt_963_update_completed_)
          // RAW reenables for update_free_q_pipe
          phi_stmt_952_update_start_ o<-& (WPIPE_FREE_Q_1010_sample_completed_ 0)
          phi_stmt_963_update_start_ o<-& (WPIPE_FREE_Q_1010_sample_completed_ 0)
          ;;[WPIPE_FREE_Q_1010_Sample] 
          {
            // pipe write sample-start FREE_Q
            $T [req] $T [ack] 
          }
          ;;[WPIPE_FREE_Q_1010_Update] 
          {
            // pipe write update (complete) FREE_Q
            $T [req] $T [ack] 
          }
          WPIPE_FREE_Q_1010_sample_start_ &-> (WPIPE_FREE_Q_1010_Sample)
          WPIPE_FREE_Q_1010_sample_completed_ <-& (WPIPE_FREE_Q_1010_Sample)
          WPIPE_FREE_Q_1010_update_start_ <-& (WPIPE_FREE_Q_1010_sample_completed_)
          WPIPE_FREE_Q_1010_update_start_ &-> (WPIPE_FREE_Q_1010_Update)
          WPIPE_FREE_Q_1010_update_completed_ <-& (WPIPE_FREE_Q_1010_Update)
          WPIPE_FREE_Q_1010_sample_start_ o<-& (WPIPE_FREE_Q_1010_update_completed_ 0)
          // start: Forward dependencies from ($bitcast ($uint<36>) (FREE_Q_32 && ($bitcast ($uint<3>) _b0  )) ) to transition WPIPE_FREE_Q_1010_sample_start_
          WPIPE_FREE_Q_1010_sample_start_ <-& (type_cast_1015_update_completed_)
          // done: Forward dependencies from ($bitcast ($uint<36>) (FREE_Q_32 && ($bitcast ($uint<3>) _b0  )) ) to transition WPIPE_FREE_Q_1010_sample_start_
          // RAW reenables for ($bitcast ($uint<36>) (FREE_Q_32 && ($bitcast ($uint<3>) _b0  )) )
          type_cast_1015_update_start_ o<-& (WPIPE_FREE_Q_1010_sample_completed_ 0)
          // end:  			$guard (update_free_q_pipe) FREE_Q := ($bitcast ($uint<36>) (FREE_Q_32 && ($bitcast ($uint<3>) _b0  )) ) $buffering 1// bits of buffering = 36. 
          // start:  			$guard (update_server_num) NUMBER_OF_SERVERS := nic_registers[1 ] $buffering 1// bits of buffering = 32. 
          //  file nic.linked.aa, line 423
          // Guard expression 
          // update_server_num
          // Source expression
          // nic_registers[1 ]
          $T[array_obj_ref_1020_base_address_calculated] 
          $T[array_obj_ref_1020_sample_start_] 
          $T[array_obj_ref_1020_sample_completed_] 
          $T[array_obj_ref_1020_update_start_] 
          $T[array_obj_ref_1020_update_completed_] 
          $T[array_obj_ref_1020_word_address_calculated] 
          $T[array_obj_ref_1020_root_address_calculated] 
          array_obj_ref_1020_word_address_calculated <-& (array_obj_ref_1020_root_address_calculated)
          ;;[array_obj_ref_1020_Sample] 
          {
            ||[word_access_start] 
            {
              ;;[word_0] 
              {
                $T [rr] $T [ra] 
              }
            }
          }
          ;;[array_obj_ref_1020_Update] 
          {
            ||[word_access_complete] 
            {
              ;;[word_0] 
              {
                $T [cr] $T [ca] 
              }
            }
            ;;[array_obj_ref_1020_Merge] 
            {
              $T [merge_req] $T [merge_ack]
            }
          }
          array_obj_ref_1020_sample_start_ <-& (array_obj_ref_1020_word_address_calculated)
          // reenable-joins
          array_obj_ref_1020_sample_start_ &-> (array_obj_ref_1020_Sample)
          array_obj_ref_1020_sample_completed_ <-& (array_obj_ref_1020_Sample)
          array_obj_ref_1020_sample_completed_ &-> ($null)
          array_obj_ref_1020_update_start_ &-> (array_obj_ref_1020_Update)
          array_obj_ref_1020_update_completed_ <-& (array_obj_ref_1020_Update)
          // self-release: 
          array_obj_ref_1020_sample_start_ o<-& (array_obj_ref_1020_sample_completed_ 1)
          $null &-> (array_obj_ref_1020_update_start_)
          array_obj_ref_1020_update_start_ o<-& (array_obj_ref_1020_update_completed_ 0)
          // Guard dependency for expression array_obj_ref_1020 with guard R_update_server_num_1017
          array_obj_ref_1020_sample_start_ <-& (phi_stmt_952_update_completed_)
          array_obj_ref_1020_sample_start_ <-& (phi_stmt_968_update_completed_)
          // RAW reenables for update_server_num
          phi_stmt_952_update_start_ o<-& (array_obj_ref_1020_sample_completed_ 0)
          phi_stmt_968_update_start_ o<-& (array_obj_ref_1020_sample_completed_ 0)
          // Target expression
          // (as target) NUMBER_OF_SERVERS
          $T[WPIPE_NUMBER_OF_SERVERS_1018_sample_start_] 
          $T[WPIPE_NUMBER_OF_SERVERS_1018_sample_completed_] 
          $T[WPIPE_NUMBER_OF_SERVERS_1018_update_start_] 
          $T[WPIPE_NUMBER_OF_SERVERS_1018_update_completed_] 
          // Guard dependency for expression WPIPE_NUMBER_OF_SERVERS_1018 with guard R_update_server_num_1017
          WPIPE_NUMBER_OF_SERVERS_1018_sample_start_ <-& (phi_stmt_952_update_completed_)
          WPIPE_NUMBER_OF_SERVERS_1018_sample_start_ <-& (phi_stmt_968_update_completed_)
          // RAW reenables for update_server_num
          phi_stmt_952_update_start_ o<-& (WPIPE_NUMBER_OF_SERVERS_1018_sample_completed_ 0)
          phi_stmt_968_update_start_ o<-& (WPIPE_NUMBER_OF_SERVERS_1018_sample_completed_ 0)
          ;;[WPIPE_NUMBER_OF_SERVERS_1018_Sample] 
          {
            // pipe write sample-start NUMBER_OF_SERVERS
            $T [req] $T [ack] 
          }
          ;;[WPIPE_NUMBER_OF_SERVERS_1018_Update] 
          {
            // pipe write update (complete) NUMBER_OF_SERVERS
            $T [req] $T [ack] 
          }
          WPIPE_NUMBER_OF_SERVERS_1018_sample_start_ &-> (WPIPE_NUMBER_OF_SERVERS_1018_Sample)
          WPIPE_NUMBER_OF_SERVERS_1018_sample_completed_ <-& (WPIPE_NUMBER_OF_SERVERS_1018_Sample)
          WPIPE_NUMBER_OF_SERVERS_1018_update_start_ <-& (WPIPE_NUMBER_OF_SERVERS_1018_sample_completed_)
          WPIPE_NUMBER_OF_SERVERS_1018_update_start_ &-> (WPIPE_NUMBER_OF_SERVERS_1018_Update)
          WPIPE_NUMBER_OF_SERVERS_1018_update_completed_ <-& (WPIPE_NUMBER_OF_SERVERS_1018_Update)
          WPIPE_NUMBER_OF_SERVERS_1018_sample_start_ o<-& (WPIPE_NUMBER_OF_SERVERS_1018_update_completed_ 0)
          // start: Forward dependencies from nic_registers[1 ] to transition WPIPE_NUMBER_OF_SERVERS_1018_sample_start_
          WPIPE_NUMBER_OF_SERVERS_1018_sample_start_ <-& (array_obj_ref_1020_update_completed_)
          // done: Forward dependencies from nic_registers[1 ] to transition WPIPE_NUMBER_OF_SERVERS_1018_sample_start_
          // RAW reenables for nic_registers[1 ]
          array_obj_ref_1020_update_start_ o<-& (WPIPE_NUMBER_OF_SERVERS_1018_sample_completed_ 0)
          // end:  			$guard (update_server_num) NUMBER_OF_SERVERS := nic_registers[1 ] $buffering 1// bits of buffering = 32. 
          // start:  			req := AFB_NIC_REQUEST $buffering 1// bits of buffering = 74. 
          //  file nic.linked.aa, line 424
          // Source expression
          // AFB_NIC_REQUEST
          $T[RPIPE_AFB_NIC_REQUEST_1023_sample_start_] 
          $T[RPIPE_AFB_NIC_REQUEST_1023_sample_completed_] 
          $T[RPIPE_AFB_NIC_REQUEST_1023_update_start_] 
          $T[RPIPE_AFB_NIC_REQUEST_1023_update_completed_] 
          ;;[RPIPE_AFB_NIC_REQUEST_1023_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_AFB_NIC_REQUEST_1023_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_AFB_NIC_REQUEST_1023_sample_start_ &-> (RPIPE_AFB_NIC_REQUEST_1023_Sample)
          RPIPE_AFB_NIC_REQUEST_1023_sample_completed_ <-& (RPIPE_AFB_NIC_REQUEST_1023_Sample)
          RPIPE_AFB_NIC_REQUEST_1023_update_start_ <-& (RPIPE_AFB_NIC_REQUEST_1023_sample_completed_)
          RPIPE_AFB_NIC_REQUEST_1023_update_start_ &-> (RPIPE_AFB_NIC_REQUEST_1023_Update)
          RPIPE_AFB_NIC_REQUEST_1023_update_completed_ <-& (RPIPE_AFB_NIC_REQUEST_1023_Update)
          RPIPE_AFB_NIC_REQUEST_1023_sample_start_ o<-& (RPIPE_AFB_NIC_REQUEST_1023_update_completed_ 0)
          // Target expression
          // (as target) req
          // start: WAR dependencies for req
          // done: WAR dependencies for req
          // end:  			req := AFB_NIC_REQUEST $buffering 1// bits of buffering = 74. 
          // start: WAR dependencies for lock
          // done: WAR dependencies for lock
          // start:  			$volatile lock := ( $slice req 73 73 )  $buffering 1
          //  file nic.linked.aa, line 426
          // volatile! 
          // Source expression
          // ( $slice req 73 73 ) 
          // req
          // Target expression
          // (as target) lock
          // start: WAR dependencies for lock
          // done: WAR dependencies for lock
          // end:  			$volatile lock := ( $slice req 73 73 )  $buffering 1
          // start: WAR dependencies for rwbar
          // done: WAR dependencies for rwbar
          // start:  			$volatile rwbar := ( $slice req 72 72 )  $buffering 1
          //  file nic.linked.aa, line 427
          // volatile! 
          // Source expression
          // ( $slice req 72 72 ) 
          // req
          // Target expression
          // (as target) rwbar
          // start: WAR dependencies for rwbar
          // done: WAR dependencies for rwbar
          // end:  			$volatile rwbar := ( $slice req 72 72 )  $buffering 1
          // start: WAR dependencies for bmask
          // done: WAR dependencies for bmask
          // start:  			$volatile bmask := ( $slice req 71 68 )  $buffering 1
          //  file nic.linked.aa, line 428
          // volatile! 
          // Source expression
          // ( $slice req 71 68 ) 
          // req
          // Target expression
          // (as target) bmask
          // start: WAR dependencies for bmask
          // done: WAR dependencies for bmask
          // end:  			$volatile bmask := ( $slice req 71 68 )  $buffering 1
          // start: WAR dependencies for addr
          // done: WAR dependencies for addr
          // start:  			$volatile addr := ( $slice req 67 32 )  $buffering 1
          //  file nic.linked.aa, line 429
          // volatile! 
          // Source expression
          // ( $slice req 67 32 ) 
          // req
          // Target expression
          // (as target) addr
          // start: WAR dependencies for addr
          // done: WAR dependencies for addr
          // end:  			$volatile addr := ( $slice req 67 32 )  $buffering 1
          // start: WAR dependencies for wdata
          // done: WAR dependencies for wdata
          // start:  			$volatile wdata := ( $slice req 31 0 )  $buffering 1
          //  file nic.linked.aa, line 430
          // volatile! 
          // Source expression
          // ( $slice req 31 0 ) 
          // req
          // Target expression
          // (as target) wdata
          // start: WAR dependencies for wdata
          // done: WAR dependencies for wdata
          // end:  			$volatile wdata := ( $slice req 31 0 )  $buffering 1
          // start: WAR dependencies for index
          // done: WAR dependencies for index
          // start:  			$volatile index := ( $slice addr 5 0 )  $buffering 1
          //  file nic.linked.aa, line 431
          // volatile! 
          // Source expression
          // ( $slice addr 5 0 ) 
          // addr
          // Target expression
          // (as target) index
          // start: WAR dependencies for index
          // done: WAR dependencies for index
          // end:  			$volatile index := ( $slice addr 5 0 )  $buffering 1
          // start: WAR dependencies for check_control_regsiter
          // WAR dependency: Read: check_control_regsiter before Write: 			$volatile check_control_regsiter := ((index == 0 ) & (rwbar == 0 )) $buffering 1
          RPIPE_AFB_NIC_REQUEST_1023_update_start_ <-& (phi_stmt_958_sample_completed_)
          phi_stmt_958_sample_start_ o<-& (RPIPE_AFB_NIC_REQUEST_1023_update_completed_ 0)
          // WAR dependency: release  Read: check_control_regsiter with Write: 			req := AFB_NIC_REQUEST $buffering 1// bits of buffering = 74. 
          // done: WAR dependencies for check_control_regsiter
          // start:  			$volatile check_control_regsiter := ((index == 0 ) & (rwbar == 0 )) $buffering 1
          //  file nic.linked.aa, line 432
          // volatile! 
          // Source expression
          // ((index == 0 ) & (rwbar == 0 ))
          // (index == 0 )
          // index
          // (rwbar == 0 )
          // rwbar
          // Target expression
          // (as target) check_control_regsiter
          // start: WAR dependencies for check_control_regsiter
          // WAR dependency: Read: check_control_regsiter before Write: 			$volatile check_control_regsiter := ((index == 0 ) & (rwbar == 0 )) $buffering 1
          RPIPE_AFB_NIC_REQUEST_1023_update_start_ <-& (phi_stmt_958_sample_completed_)
          phi_stmt_958_sample_start_ o<-& (RPIPE_AFB_NIC_REQUEST_1023_update_completed_ 0)
          // WAR dependency: release  Read: check_control_regsiter with Write: 			req := AFB_NIC_REQUEST $buffering 2// bits of buffering = 148. 
          // done: WAR dependencies for check_control_regsiter
          // end:  			$volatile check_control_regsiter := ((index == 0 ) & (rwbar == 0 )) $buffering 1
          // start: WAR dependencies for check_free_q
          // WAR dependency: Read: check_free_q before Write: 			$volatile check_free_q := ((index == 18 ) & (rwbar == 0 )) $buffering 1
          RPIPE_AFB_NIC_REQUEST_1023_update_start_ <-& (phi_stmt_963_sample_completed_)
          phi_stmt_963_sample_start_ o<-& (RPIPE_AFB_NIC_REQUEST_1023_update_completed_ 0)
          // WAR dependency: release  Read: check_free_q with Write: 			req := AFB_NIC_REQUEST $buffering 2// bits of buffering = 148. 
          // done: WAR dependencies for check_free_q
          // start:  			$volatile check_free_q := ((index == 18 ) & (rwbar == 0 )) $buffering 1
          //  file nic.linked.aa, line 433
          // volatile! 
          // Source expression
          // ((index == 18 ) & (rwbar == 0 ))
          // (index == 18 )
          // index
          // (rwbar == 0 )
          // rwbar
          // Target expression
          // (as target) check_free_q
          // start: WAR dependencies for check_free_q
          // WAR dependency: Read: check_free_q before Write: 			$volatile check_free_q := ((index == 18 ) & (rwbar == 0 )) $buffering 1
          RPIPE_AFB_NIC_REQUEST_1023_update_start_ <-& (phi_stmt_963_sample_completed_)
          phi_stmt_963_sample_start_ o<-& (RPIPE_AFB_NIC_REQUEST_1023_update_completed_ 0)
          // WAR dependency: release  Read: check_free_q with Write: 			req := AFB_NIC_REQUEST $buffering 2// bits of buffering = 148. 
          // done: WAR dependencies for check_free_q
          // end:  			$volatile check_free_q := ((index == 18 ) & (rwbar == 0 )) $buffering 1
          // start: WAR dependencies for check_num_server
          // WAR dependency: Read: check_num_server before Write: 			$volatile check_num_server := ((index == 1 ) & (rwbar == 0 )) $buffering 1
          RPIPE_AFB_NIC_REQUEST_1023_update_start_ <-& (phi_stmt_968_sample_completed_)
          phi_stmt_968_sample_start_ o<-& (RPIPE_AFB_NIC_REQUEST_1023_update_completed_ 0)
          // WAR dependency: release  Read: check_num_server with Write: 			req := AFB_NIC_REQUEST $buffering 2// bits of buffering = 148. 
          // done: WAR dependencies for check_num_server
          // start:  			$volatile check_num_server := ((index == 1 ) & (rwbar == 0 )) $buffering 1
          //  file nic.linked.aa, line 434
          // volatile! 
          // Source expression
          // ((index == 1 ) & (rwbar == 0 ))
          // (index == 1 )
          // index
          // (rwbar == 0 )
          // rwbar
          // Target expression
          // (as target) check_num_server
          // start: WAR dependencies for check_num_server
          // WAR dependency: Read: check_num_server before Write: 			$volatile check_num_server := ((index == 1 ) & (rwbar == 0 )) $buffering 1
          RPIPE_AFB_NIC_REQUEST_1023_update_start_ <-& (phi_stmt_968_sample_completed_)
          phi_stmt_968_sample_start_ o<-& (RPIPE_AFB_NIC_REQUEST_1023_update_completed_ 0)
          // WAR dependency: release  Read: check_num_server with Write: 			req := AFB_NIC_REQUEST $buffering 2// bits of buffering = 148. 
          // done: WAR dependencies for check_num_server
          // end:  			$volatile check_num_server := ((index == 1 ) & (rwbar == 0 )) $buffering 1
          // start:  			rval := nic_registers[index] $buffering 1// bits of buffering = 32. 
          //  file nic.linked.aa, line 435
          // Source expression
          // nic_registers[index]
          $T[array_obj_ref_1079_base_address_calculated] 
          $T[array_obj_ref_1079_sample_start_] 
          $T[array_obj_ref_1079_sample_completed_] 
          $T[array_obj_ref_1079_update_start_] 
          $T[array_obj_ref_1079_update_completed_] 
          $T[array_obj_ref_1079_word_address_calculated] 
          $T[array_obj_ref_1079_root_address_calculated] 
          $T[array_obj_ref_1079_offset_calculated] 
          $T[array_obj_ref_1079_index_resized_0] 
          $T[array_obj_ref_1079_index_scaled_0] 
          $T[array_obj_ref_1079_index_computed_0] 
          // index
          // start: Forward dependencies from index to transition array_obj_ref_1079_index_computed_0
          array_obj_ref_1079_index_computed_0 <-& (RPIPE_AFB_NIC_REQUEST_1023_update_completed_)
          // done: Forward dependencies from index to transition array_obj_ref_1079_index_computed_0
          ;;[array_obj_ref_1079_index_resize_0] 
          {
            $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
          }
          array_obj_ref_1079_index_computed_0 &-> (array_obj_ref_1079_index_resize_0)
          array_obj_ref_1079_index_resized_0 <-& (array_obj_ref_1079_index_resize_0)
          ;;[array_obj_ref_1079_index_scale_0] 
          {
            $T [scale_rename_req] $T [scale_rename_ack] // rename 
          }
          array_obj_ref_1079_index_resized_0 &-> (array_obj_ref_1079_index_scale_0)
          array_obj_ref_1079_index_scaled_0 <-& (array_obj_ref_1079_index_scale_0)
          ;;[array_obj_ref_1079_final_index_sum_regn] 
          {
            $T [req] $T [ack] // rename
          }
          array_obj_ref_1079_index_scaled_0 &-> (array_obj_ref_1079_final_index_sum_regn)
          array_obj_ref_1079_offset_calculated <-& (array_obj_ref_1079_final_index_sum_regn)
          ;;[array_obj_ref_1079_base_plus_offset] 
          {
            $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
          }
          array_obj_ref_1079_offset_calculated &-> (array_obj_ref_1079_base_plus_offset)
          array_obj_ref_1079_root_address_calculated <-& (array_obj_ref_1079_base_plus_offset)
          ;;[array_obj_ref_1079_word_addrgen] 
          {
            $T [root_register_req] $T [root_register_ack]
          }
          array_obj_ref_1079_root_address_calculated &-> (array_obj_ref_1079_word_addrgen)
          array_obj_ref_1079_word_address_calculated <-& (array_obj_ref_1079_word_addrgen)
          ;;[array_obj_ref_1079_Sample] 
          {
            ||[word_access_start] 
            {
              ;;[word_0] 
              {
                $T [rr] $T [ra] 
              }
            }
          }
          ;;[array_obj_ref_1079_Update] 
          {
            ||[word_access_complete] 
            {
              ;;[word_0] 
              {
                $T [cr] $T [ca] 
              }
            }
            ;;[array_obj_ref_1079_Merge] 
            {
              $T [merge_req] $T [merge_ack]
            }
          }
          array_obj_ref_1079_sample_start_ <-& (array_obj_ref_1079_word_address_calculated)
          // reenable-joins
          RPIPE_AFB_NIC_REQUEST_1023_update_start_ o<-& (array_obj_ref_1079_sample_completed_ 0)
          array_obj_ref_1079_sample_start_ &-> (array_obj_ref_1079_Sample)
          array_obj_ref_1079_sample_completed_ <-& (array_obj_ref_1079_Sample)
          array_obj_ref_1079_sample_completed_ &-> ($null)
          array_obj_ref_1079_update_start_ &-> (array_obj_ref_1079_Update)
          array_obj_ref_1079_update_completed_ <-& (array_obj_ref_1079_Update)
          // self-release: 
          array_obj_ref_1079_sample_start_ o<-& (array_obj_ref_1079_sample_completed_ 1)
          $null &-> (array_obj_ref_1079_update_start_)
          array_obj_ref_1079_update_start_ o<-& (array_obj_ref_1079_update_completed_ 0)
          // Target expression
          // (as target) rval
          // start: WAR dependencies for rval
          // done: WAR dependencies for rval
          // end:  			rval := nic_registers[index] $buffering 1// bits of buffering = 32. 
          // start: 			$guard (~rwbar) $call UpdateRegister (bmask rval wdata index ) (wval ) 
          //  file nic.linked.aa, line 436
          $T[call_stmt_1087_sample_start_] 
          $T[call_stmt_1087_sample_completed_] 
          $T[call_stmt_1087_update_start_] 
          $T[call_stmt_1087_update_completed_] 
          // Guard expression
          // rwbar
          // start: Forward dependencies from rwbar to transition call_stmt_1087_sample_start_
          call_stmt_1087_sample_start_ <-& (RPIPE_AFB_NIC_REQUEST_1023_update_completed_)
          // done: Forward dependencies from rwbar to transition call_stmt_1087_sample_start_
          // RAW reenables for rwbar
          RPIPE_AFB_NIC_REQUEST_1023_update_start_ o<-& (call_stmt_1087_sample_completed_ 0)
          // Call input argument 0
          // bmask
          // Call input argument 1
          // rval
          // Call input argument 2
          // wdata
          // Call input argument 3
          // index
          // start: Forward dependencies from bmask to transition call_stmt_1087_sample_start_
          call_stmt_1087_sample_start_ <-& (RPIPE_AFB_NIC_REQUEST_1023_update_completed_)
          // done: Forward dependencies from bmask to transition call_stmt_1087_sample_start_
          // RAW reenables for bmask
          RPIPE_AFB_NIC_REQUEST_1023_update_start_ o<-& (call_stmt_1087_sample_completed_ 0)
          // start: Forward dependencies from rval to transition call_stmt_1087_sample_start_
          call_stmt_1087_sample_start_ <-& (array_obj_ref_1079_update_completed_)
          // done: Forward dependencies from rval to transition call_stmt_1087_sample_start_
          // RAW reenables for rval
          array_obj_ref_1079_update_start_ o<-& (call_stmt_1087_sample_completed_ 0)
          // start: Forward dependencies from wdata to transition call_stmt_1087_sample_start_
          call_stmt_1087_sample_start_ <-& (RPIPE_AFB_NIC_REQUEST_1023_update_completed_)
          // done: Forward dependencies from wdata to transition call_stmt_1087_sample_start_
          // RAW reenables for wdata
          RPIPE_AFB_NIC_REQUEST_1023_update_start_ o<-& (call_stmt_1087_sample_completed_ 0)
          // start: Forward dependencies from index to transition call_stmt_1087_sample_start_
          call_stmt_1087_sample_start_ <-& (RPIPE_AFB_NIC_REQUEST_1023_update_completed_)
          // done: Forward dependencies from index to transition call_stmt_1087_sample_start_
          // RAW reenables for index
          RPIPE_AFB_NIC_REQUEST_1023_update_start_ o<-& (call_stmt_1087_sample_completed_ 0)
          ;;[call_stmt_1087_Sample] 
          {
            $T [crr] $T [cra] 
          }
          ;;[call_stmt_1087_Update] 
          {
            $T [ccr] $T [cca] 
          }
          call_stmt_1087_sample_start_ &-> (call_stmt_1087_Sample)
          call_stmt_1087_sample_completed_ <-& (call_stmt_1087_Sample)
          call_stmt_1087_sample_completed_ &-> ($null)
          call_stmt_1087_update_start_ &-> (call_stmt_1087_Update)
          call_stmt_1087_update_completed_ <-& (call_stmt_1087_Update)
          // Call output argument 0
          // (as target) wval
          // self-release: 
          call_stmt_1087_sample_start_ o<-& (call_stmt_1087_sample_completed_ 1)
          $null &-> (call_stmt_1087_update_start_)
          call_stmt_1087_update_start_ o<-& (call_stmt_1087_update_completed_ 0)
          // start: WAR dependencies for wval
          // done: WAR dependencies for wval
          // end: 			$guard (~rwbar) $call UpdateRegister (bmask rval wdata index ) (wval ) 
          // start: WAR dependencies for rdata
          // done: WAR dependencies for rdata
          // start:  			$volatile rdata := ( $mux rwbar rval  ($bitcast ($uint<32>) _b0  ) )  $buffering 1
          //  file nic.linked.aa, line 437
          // volatile! 
          // Source expression
          // ( $mux rwbar rval  ($bitcast ($uint<32>) _b0  ) ) 
          // rwbar
          // rval
          // Target expression
          // (as target) rdata
          // start: WAR dependencies for rdata
          // done: WAR dependencies for rdata
          // end:  			$volatile rdata := ( $mux rwbar rval  ($bitcast ($uint<32>) _b0  ) )  $buffering 1
          // start: WAR dependencies for resp
          // done: WAR dependencies for resp
          // start:  			$volatile resp := (($bitcast ($uint<1>) _b0  ) && rdata) $buffering 1
          //  file nic.linked.aa, line 438
          // volatile! 
          // Source expression
          // (($bitcast ($uint<1>) _b0  ) && rdata)
          // rdata
          // Target expression
          // (as target) resp
          // start: WAR dependencies for resp
          // done: WAR dependencies for resp
          // end:  			$volatile resp := (($bitcast ($uint<1>) _b0  ) && rdata) $buffering 1
          // start:  			AFB_NIC_RESPONSE := resp $buffering 1// bits of buffering = 33. 
          //  file nic.linked.aa, line 439
          // Source expression
          // resp
          // Target expression
          // (as target) AFB_NIC_RESPONSE
          $T[WPIPE_AFB_NIC_RESPONSE_1101_sample_start_] 
          $T[WPIPE_AFB_NIC_RESPONSE_1101_sample_completed_] 
          $T[WPIPE_AFB_NIC_RESPONSE_1101_update_start_] 
          $T[WPIPE_AFB_NIC_RESPONSE_1101_update_completed_] 
          ;;[WPIPE_AFB_NIC_RESPONSE_1101_Sample] 
          {
            // pipe write sample-start AFB_NIC_RESPONSE
            $T [req] $T [ack] 
          }
          ;;[WPIPE_AFB_NIC_RESPONSE_1101_Update] 
          {
            // pipe write update (complete) AFB_NIC_RESPONSE
            $T [req] $T [ack] 
          }
          WPIPE_AFB_NIC_RESPONSE_1101_sample_start_ &-> (WPIPE_AFB_NIC_RESPONSE_1101_Sample)
          WPIPE_AFB_NIC_RESPONSE_1101_sample_completed_ <-& (WPIPE_AFB_NIC_RESPONSE_1101_Sample)
          WPIPE_AFB_NIC_RESPONSE_1101_update_start_ <-& (WPIPE_AFB_NIC_RESPONSE_1101_sample_completed_)
          WPIPE_AFB_NIC_RESPONSE_1101_update_start_ &-> (WPIPE_AFB_NIC_RESPONSE_1101_Update)
          WPIPE_AFB_NIC_RESPONSE_1101_update_completed_ <-& (WPIPE_AFB_NIC_RESPONSE_1101_Update)
          WPIPE_AFB_NIC_RESPONSE_1101_sample_start_ o<-& (WPIPE_AFB_NIC_RESPONSE_1101_update_completed_ 0)
          // start: Forward dependencies from resp to transition WPIPE_AFB_NIC_RESPONSE_1101_sample_start_
          WPIPE_AFB_NIC_RESPONSE_1101_sample_start_ <-& (RPIPE_AFB_NIC_REQUEST_1023_update_completed_)
          WPIPE_AFB_NIC_RESPONSE_1101_sample_start_ <-& (array_obj_ref_1079_update_completed_)
          // done: Forward dependencies from resp to transition WPIPE_AFB_NIC_RESPONSE_1101_sample_start_
          // RAW reenables for resp
          RPIPE_AFB_NIC_REQUEST_1023_update_start_ o<-& (WPIPE_AFB_NIC_RESPONSE_1101_sample_completed_ 0)
          array_obj_ref_1079_update_start_ o<-& (WPIPE_AFB_NIC_RESPONSE_1101_sample_completed_ 0)
          // end:  			AFB_NIC_RESPONSE := resp $buffering 1// bits of buffering = 33. 
          $T [loop_body_delay_to_condition_start] $delay
          loop_body_start &-> (loop_body_delay_to_condition_start)
          loop_body_delay_to_condition_start &-> (condition_evaluated)
          condition_evaluated &-> ($null)
          // load-store dependencies..
          // memory-space  memory_space_0
          //  array_obj_ref_1002 load
          //  array_obj_ref_1007 load
          //  array_obj_ref_1020 load
          //  array_obj_ref_1079 load
          //  call_stmt_1087 store
          $T [array_obj_ref_1002_call_stmt_1087_delay] $delay
          // array_obj_ref_1002(load) -> call_stmt_1087(store)
          call_stmt_1087_sample_start_ <-& (array_obj_ref_1002_call_stmt_1087_delay)
          array_obj_ref_1002_call_stmt_1087_delay <-& (array_obj_ref_1002_sample_completed_)
          $T [array_obj_ref_1007_call_stmt_1087_delay] $delay
          // array_obj_ref_1007(load) -> call_stmt_1087(store)
          call_stmt_1087_sample_start_ <-& (array_obj_ref_1007_call_stmt_1087_delay)
          array_obj_ref_1007_call_stmt_1087_delay <-& (array_obj_ref_1007_sample_completed_)
          $T [array_obj_ref_1020_call_stmt_1087_delay] $delay
          // array_obj_ref_1020(load) -> call_stmt_1087(store)
          call_stmt_1087_sample_start_ <-& (array_obj_ref_1020_call_stmt_1087_delay)
          array_obj_ref_1020_call_stmt_1087_delay <-& (array_obj_ref_1020_sample_completed_)
          $T [array_obj_ref_1079_call_stmt_1087_delay] $delay
          // array_obj_ref_1079(load) -> call_stmt_1087(store)
          call_stmt_1087_sample_start_ <-& (array_obj_ref_1079_call_stmt_1087_delay)
          array_obj_ref_1079_call_stmt_1087_delay <-& (array_obj_ref_1079_sample_completed_)
          // reenable across ring for memory space memory_space_0
          $T[ring_reenable_memory_space_0] 
          ring_reenable_memory_space_0 <-& (call_stmt_1087_update_completed_)
          array_obj_ref_1002_sample_start_ o<-& (ring_reenable_memory_space_0 1)
          array_obj_ref_1007_sample_start_ o<-& (ring_reenable_memory_space_0 1)
          array_obj_ref_1020_sample_start_ o<-& (ring_reenable_memory_space_0 1)
          array_obj_ref_1079_sample_start_ o<-& (ring_reenable_memory_space_0 1)
          // pipe read/write dependencies for pipe AFB_NIC_REQUEST
          // read-dependencies for pipe AFB_NIC_REQUEST
          // write-dependencies for pipe AFB_NIC_REQUEST
          // signal write dependencies for AFB_NIC_REQUEST
          // pipe read/write dependencies for pipe CONTROL_REGISTER
          // read-dependencies for pipe CONTROL_REGISTER
          // write-dependencies for pipe CONTROL_REGISTER
          // signal write dependencies for CONTROL_REGISTER
          // pipe read/write dependencies for pipe AFB_NIC_RESPONSE
          // read-dependencies for pipe AFB_NIC_RESPONSE
          // write-dependencies for pipe AFB_NIC_RESPONSE
          // signal write dependencies for AFB_NIC_RESPONSE
          // pipe read/write dependencies for pipe FREE_Q
          // read-dependencies for pipe FREE_Q
          // write-dependencies for pipe FREE_Q
          // signal write dependencies for FREE_Q
          // pipe read/write dependencies for pipe NUMBER_OF_SERVERS
          // read-dependencies for pipe NUMBER_OF_SERVERS
          // write-dependencies for pipe NUMBER_OF_SERVERS
          // signal write dependencies for NUMBER_OF_SERVERS
        }
        ( first_time_through_loop_body  back_edge_to_loop_body) 
        ( condition_evaluated )
        ;; [loop_exit] 
        {
          $T [ack] 
        }
        ;; [loop_taken] 
        {
          $T [ack] 
        }
        do_while_stmt_950__entry__ <-| ($entry)
        loop_body_done <-| ( do_while_stmt_950_loop_body ) 
        condition_done |-> (loop_exit loop_taken)
        do_while_stmt_950__exit__ |-> ($exit)
        $bind condition_done <= do_while_stmt_950_loop_body : condition_evaluated
        $bind do_while_stmt_950__entry__  => do_while_stmt_950_loop_body : first_time_through_loop_body 
        $bind loop_back  => do_while_stmt_950_loop_body : back_edge_to_loop_body 
        $terminate (loop_exit loop_taken loop_body_done) (loop_back do_while_stmt_950__exit__)
      }
      do_while_stmt_950__entry__ |-> (do_while_stmt_950)
      do_while_stmt_950__exit__ <-| (do_while_stmt_950)
      do_while_stmt_950__entry__ <-| (branch_block_stmt_949__entry__)
      do_while_stmt_950__exit__ |-> (branch_block_stmt_949__exit__)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %SoftwareRegisterAccessDaemon%loop%
    //  file nic.linked.aa, line 406
    // constant-object-declarations for block %SoftwareRegisterAccessDaemon%loop
    //  file nic.linked.aa, line 402
    // constant-object-declarations for block %SoftwareRegisterAccessDaemon
    //  file nic.linked.aa, line 396
    // constant-declarations for block %SoftwareRegisterAccessDaemon%loop
    //  file nic.linked.aa, line 402
    // do-while statement  
    //  file nic.linked.aa, line 404
    // 1 
    $constant $W[konst_1105_wire_constant] : $int<1> := _b1// 1
    // constant-declarations for block %SoftwareRegisterAccessDaemon%loop%
    //  file nic.linked.aa, line 406
    // constant-declarations for phi:  			$phi INIT := 			  ($bitcast ($uint<1>) _b0  ) $on   $entry 			  ($bitcast ($uint<1>) _b1  ) $on   $loopback 
    // type of target is $uint<1>
    //  file nic.linked.aa, line 407
    // ($bitcast ($uint<1>) _b0  )
    $constant $W[type_cast_955_wire_constant] : $int<1> := _b0// 0
    // ($bitcast ($uint<1>) _b1  )
    $constant $W[type_cast_957_wire_constant] : $int<1> := _b1// 1
    // constant-declarations for phi:  			$phi control_register := 			  ($bitcast ($uint<1>) _b0  ) $on   $entry 			  check_control_regsiter $on   $loopback 
    // type of target is $uint<1>
    //  file nic.linked.aa, line 409
    // ($bitcast ($uint<1>) _b0  )
    $constant $W[type_cast_961_wire_constant] : $int<1> := _b0// 0
    // constant-declarations for phi:  			$phi free_q := 			  ($bitcast ($uint<1>) _b0  ) $on   $entry 			  check_free_q $on   $loopback 
    // type of target is $uint<1>
    //  file nic.linked.aa, line 411
    // ($bitcast ($uint<1>) _b0  )
    $constant $W[type_cast_966_wire_constant] : $int<1> := _b0// 0
    // constant-declarations for phi:  			$phi num_server := 			  ($bitcast ($uint<1>) _b0  ) $on   $entry 			  check_num_server $on   $loopback 
    // type of target is $uint<1>
    //  file nic.linked.aa, line 413
    // ($bitcast ($uint<1>) _b0  )
    $constant $W[type_cast_971_wire_constant] : $int<1> := _b0// 0
    // nic_registers[0 ]
    $constant $W[array_obj_ref_1002_word_address_0] : $pointer<memory_space_0> := _b000000
    // nic_registers[18 ]
    $constant $W[array_obj_ref_1007_word_address_0] : $pointer<memory_space_0> := _b010010
    // ($bitcast ($uint<3>) _b0  )
    $constant $W[type_cast_1013_wire_constant] : $int<3> := _b000// 0
    // nic_registers[1 ]
    $constant $W[array_obj_ref_1020_word_address_0] : $pointer<memory_space_0> := _b000001
    // 0 
    $constant $W[konst_1052_wire_constant] : $int<6> := _b000000// 0
    // 0 
    $constant $W[konst_1055_wire_constant] : $int<1> := _b0// 0
    // 18 
    $constant $W[konst_1061_wire_constant] : $int<6> := _b010010// 18
    // 0 
    $constant $W[konst_1064_wire_constant] : $int<1> := _b0// 0
    // 1 
    $constant $W[konst_1070_wire_constant] : $int<6> := _b000001// 1
    // 0 
    $constant $W[konst_1073_wire_constant] : $int<1> := _b0// 0
    // nic_registers[index]
    $constant $W[array_obj_ref_1079_resized_base_address] : $int<6> := _b000000// 0
    $constant $W[array_obj_ref_1079_offset_scale_factor_0] : $int<6> := _b000001// 1
    $constant $W[array_obj_ref_1079_word_offset_0] : $int<6> := _b000000// 0
    // 			$guard (~rwbar) $call UpdateRegister (bmask rval wdata index ) (wval ) 
    //  file nic.linked.aa, line 436
    // ( $mux rwbar rval  ($bitcast ($uint<32>) _b0  ) ) 
    // ($bitcast ($uint<32>) _b0  )
    $constant $W[type_cast_1092_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // ($bitcast ($uint<1>) _b0  )
    $constant $W[type_cast_1097_wire_constant] : $int<1> := _b0// 0
    // block %SoftwareRegisterAccessDaemon%loop
    //  file nic.linked.aa, line 402
    // do-while statement  
    //  file nic.linked.aa, line 404
    // merge-statement  
    //  file nic.linked.aa, line 406
    // 			$phi INIT := 			  ($bitcast ($uint<1>) _b0  ) $on   $entry 			  ($bitcast ($uint<1>) _b1  ) $on   $loopback 
    // type of target is $uint<1>
    //  file nic.linked.aa, line 407
    // INIT
    $W[INIT_952] : $int<1>
    // 			$phi control_register := 			  ($bitcast ($uint<1>) _b0  ) $on   $entry 			  check_control_regsiter $on   $loopback 
    // type of target is $uint<1>
    //  file nic.linked.aa, line 409
    $W[check_control_regsiter_1058_962_buffered] : $int<1>
    // control_register
    $W[control_register_958] : $int<1>
    // 			$phi free_q := 			  ($bitcast ($uint<1>) _b0  ) $on   $entry 			  check_free_q $on   $loopback 
    // type of target is $uint<1>
    //  file nic.linked.aa, line 411
    $W[check_free_q_1067_967_buffered] : $int<1>
    // free_q
    $W[free_q_963] : $int<1>
    // 			$phi num_server := 			  ($bitcast ($uint<1>) _b0  ) $on   $entry 			  check_num_server $on   $loopback 
    // type of target is $uint<1>
    //  file nic.linked.aa, line 413
    $W[check_num_server_1076_972_buffered] : $int<1>
    // num_server
    $W[num_server_968] : $int<1>
    // 			$volatile update_control_register_pipe := (( ~ INIT ) | (INIT & control_register)) $buffering 1
    //  file nic.linked.aa, line 417
    // ( ~ INIT )
    $intermediate $W[NOT_u1_u1_977_wire] : $int<1>
    // (INIT & control_register)
    $intermediate $W[AND_u1_u1_980_wire] : $int<1>
    // update_control_register_pipe
    $W[update_control_register_pipe_982] : $int<1>
    // 			$volatile update_free_q_pipe := (( ~ INIT ) | (INIT & free_q)) $buffering 1
    //  file nic.linked.aa, line 418
    // ( ~ INIT )
    $intermediate $W[NOT_u1_u1_985_wire] : $int<1>
    // (INIT & free_q)
    $intermediate $W[AND_u1_u1_988_wire] : $int<1>
    // update_free_q_pipe
    $W[update_free_q_pipe_990] : $int<1>
    // 			$volatile update_server_num := (( ~ INIT ) | (INIT & num_server)) $buffering 1
    //  file nic.linked.aa, line 419
    // ( ~ INIT )
    $intermediate $W[NOT_u1_u1_993_wire] : $int<1>
    // (INIT & num_server)
    $intermediate $W[AND_u1_u1_996_wire] : $int<1>
    // update_server_num
    $W[update_server_num_998] : $int<1>
    // 			$guard (update_control_register_pipe) CONTROL_REGISTER := nic_registers[0 ] $buffering 1// bits of buffering = 32. 
    //  file nic.linked.aa, line 420
    // nic_registers[0 ]
    $W[array_obj_ref_1002_data_0] : $int<32>
    $W[array_obj_ref_1002_wire] : $int<32>
    // CONTROL_REGISTER
    // 			$guard (update_free_q_pipe) FREE_Q_32 := nic_registers[18 ] $buffering 1// bits of buffering = 32. 
    //  file nic.linked.aa, line 421
    // nic_registers[18 ]
    $W[array_obj_ref_1007_data_0] : $int<32>
    // FREE_Q_32
    $W[FREE_Q_32_1008] : $int<32>
    // 			$guard (update_free_q_pipe) FREE_Q := ($bitcast ($uint<36>) (FREE_Q_32 && ($bitcast ($uint<3>) _b0  )) ) $buffering 1// bits of buffering = 36. 
    //  file nic.linked.aa, line 422
    // (FREE_Q_32 && ($bitcast ($uint<3>) _b0  ))
    $intermediate $W[CONCAT_u32_u35_1014_wire] : $int<35>
    // ($bitcast ($uint<36>) (FREE_Q_32 && ($bitcast ($uint<3>) _b0  )) )
    $intermediate $W[type_cast_1015_wire] : $int<36>
    // FREE_Q
    // 			$guard (update_server_num) NUMBER_OF_SERVERS := nic_registers[1 ] $buffering 1// bits of buffering = 32. 
    //  file nic.linked.aa, line 423
    // nic_registers[1 ]
    $W[array_obj_ref_1020_data_0] : $int<32>
    $W[array_obj_ref_1020_wire] : $int<32>
    // NUMBER_OF_SERVERS
    // 			req := AFB_NIC_REQUEST $buffering 2// bits of buffering = 148. 
    //  file nic.linked.aa, line 424
    // req
    $W[req_1024] : $int<74>
    // 			$volatile lock := ( $slice req 73 73 )  $buffering 1
    //  file nic.linked.aa, line 426
    // lock
    $W[lock_1029] : $int<1>
    // 			$volatile rwbar := ( $slice req 72 72 )  $buffering 1
    //  file nic.linked.aa, line 427
    // rwbar
    $W[rwbar_1033] : $int<1>
    // 			$volatile bmask := ( $slice req 71 68 )  $buffering 1
    //  file nic.linked.aa, line 428
    // bmask
    $W[bmask_1037] : $int<4>
    // 			$volatile addr := ( $slice req 67 32 )  $buffering 1
    //  file nic.linked.aa, line 429
    // addr
    $W[addr_1041] : $int<36>
    // 			$volatile wdata := ( $slice req 31 0 )  $buffering 1
    //  file nic.linked.aa, line 430
    // wdata
    $W[wdata_1045] : $int<32>
    // 			$volatile index := ( $slice addr 5 0 )  $buffering 1
    //  file nic.linked.aa, line 431
    // index
    $W[index_1049] : $int<6>
    // 			$volatile check_control_regsiter := ((index == 0 ) & (rwbar == 0 )) $buffering 1
    //  file nic.linked.aa, line 432
    // (index == 0 )
    $intermediate $W[EQ_u6_u1_1053_wire] : $int<1>
    // (rwbar == 0 )
    $intermediate $W[EQ_u1_u1_1056_wire] : $int<1>
    // check_control_regsiter
    $W[check_control_regsiter_1058] : $int<1>
    // 			$volatile check_free_q := ((index == 18 ) & (rwbar == 0 )) $buffering 1
    //  file nic.linked.aa, line 433
    // (index == 18 )
    $intermediate $W[EQ_u6_u1_1062_wire] : $int<1>
    // (rwbar == 0 )
    $intermediate $W[EQ_u1_u1_1065_wire] : $int<1>
    // check_free_q
    $W[check_free_q_1067] : $int<1>
    // 			$volatile check_num_server := ((index == 1 ) & (rwbar == 0 )) $buffering 1
    //  file nic.linked.aa, line 434
    // (index == 1 )
    $intermediate $W[EQ_u6_u1_1071_wire] : $int<1>
    // (rwbar == 0 )
    $intermediate $W[EQ_u1_u1_1074_wire] : $int<1>
    // check_num_server
    $W[check_num_server_1076] : $int<1>
    // 			rval := nic_registers[index] $buffering 1// bits of buffering = 32. 
    //  file nic.linked.aa, line 435
    // nic_registers[index]
    $intermediate $W[R_index_1078_resized] : $int<6>
    $intermediate $W[R_index_1078_scaled] : $int<6>
    $intermediate $W[array_obj_ref_1079_final_offset] : $int<6>
    $intermediate $W[array_obj_ref_1079_root_address] : $int<6>
    $W[array_obj_ref_1079_word_address_0] : $pointer<memory_space_0>
    $W[array_obj_ref_1079_data_0] : $int<32>
    // rval
    $W[rval_1080] : $int<32>
    // 			$guard (~rwbar) $call UpdateRegister (bmask rval wdata index ) (wval ) 
    //  file nic.linked.aa, line 436
    // wval
    $W[wval_1087] : $int<32>
    // 			$volatile rdata := ( $mux rwbar rval  ($bitcast ($uint<32>) _b0  ) )  $buffering 1
    //  file nic.linked.aa, line 437
    // rdata
    $W[rdata_1094] : $int<32>
    // 			$volatile resp := (($bitcast ($uint<1>) _b0  ) && rdata) $buffering 1
    //  file nic.linked.aa, line 438
    // resp
    $W[resp_1100] : $int<33>
    // 			AFB_NIC_RESPONSE := resp $buffering 1// bits of buffering = 33. 
    //  file nic.linked.aa, line 439
    // AFB_NIC_RESPONSE
    // datapath-instances for block %SoftwareRegisterAccessDaemon%loop
    //  file nic.linked.aa, line 402
    // datapath-instances for do-while  
    //  file nic.linked.aa, line 404
    ==0? [do_while_stmt_950_branch] (konst_1105_wire_constant)
    $flowthrough
    // data-path instances for merge  
    //  file nic.linked.aa, line 406
    // 			$phi INIT := 			  ($bitcast ($uint<1>) _b0  ) $on   $entry 			  ($bitcast ($uint<1>) _b1  ) $on   $loopback 
    // type of target is $uint<1>
    //  file nic.linked.aa, line 407
    # $phi [phi_stmt_952] (type_cast_955_wire_constant type_cast_957_wire_constant) ( INIT_952 ) $fullrate
    // $buffering  $out phi_stmt_952 INIT_952 2
    // 			$phi control_register := 			  ($bitcast ($uint<1>) _b0  ) $on   $entry 			  check_control_regsiter $on   $loopback 
    // type of target is $uint<1>
    //  file nic.linked.aa, line 409
    # := [check_control_regsiter_1058_962_buf] (check_control_regsiter_1058) (check_control_regsiter_1058_962_buffered)     $fullrate
    $buffering $out check_control_regsiter_1058_962_buf check_control_regsiter_1058_962_buffered  1
    # $phi [phi_stmt_958] (type_cast_961_wire_constant check_control_regsiter_1058_962_buffered) ( control_register_958 ) $fullrate
    // $buffering  $out phi_stmt_958 control_register_958 2
    // 			$phi free_q := 			  ($bitcast ($uint<1>) _b0  ) $on   $entry 			  check_free_q $on   $loopback 
    // type of target is $uint<1>
    //  file nic.linked.aa, line 411
    # := [check_free_q_1067_967_buf] (check_free_q_1067) (check_free_q_1067_967_buffered)     $fullrate
    $buffering $out check_free_q_1067_967_buf check_free_q_1067_967_buffered  1
    # $phi [phi_stmt_963] (type_cast_966_wire_constant check_free_q_1067_967_buffered) ( free_q_963 ) $fullrate
    // $buffering  $out phi_stmt_963 free_q_963 2
    // 			$phi num_server := 			  ($bitcast ($uint<1>) _b0  ) $on   $entry 			  check_num_server $on   $loopback 
    // type of target is $uint<1>
    //  file nic.linked.aa, line 413
    # := [check_num_server_1076_972_buf] (check_num_server_1076) (check_num_server_1076_972_buffered)     $fullrate
    $buffering $out check_num_server_1076_972_buf check_num_server_1076_972_buffered  1
    # $phi [phi_stmt_968] (type_cast_971_wire_constant check_num_server_1076_972_buffered) ( num_server_968 ) $fullrate
    // $buffering  $out phi_stmt_968 num_server_968 2
    // 			$volatile update_control_register_pipe := (( ~ INIT ) | (INIT & control_register)) $buffering 1
    //  file nic.linked.aa, line 417
    // ( ~ INIT )
    ~ [NOT_u1_u1_977_inst] (INIT_952) (NOT_u1_u1_977_wire)   $flowthrough
    $delay NOT_u1_u1_977_inst 0
    // (INIT & control_register)
    &[AND_u1_u1_980_inst] (INIT_952 control_register_958) (AND_u1_u1_980_wire)   $flowthrough 
    $delay AND_u1_u1_980_inst 0
    // (( ~ INIT ) | (INIT & control_register))
    |[OR_u1_u1_981_inst] (NOT_u1_u1_977_wire AND_u1_u1_980_wire) (update_control_register_pipe_982)   $flowthrough 
    $delay OR_u1_u1_981_inst 0
    // 			$volatile update_free_q_pipe := (( ~ INIT ) | (INIT & free_q)) $buffering 1
    //  file nic.linked.aa, line 418
    // ( ~ INIT )
    ~ [NOT_u1_u1_985_inst] (INIT_952) (NOT_u1_u1_985_wire)   $flowthrough
    $delay NOT_u1_u1_985_inst 0
    // (INIT & free_q)
    &[AND_u1_u1_988_inst] (INIT_952 free_q_963) (AND_u1_u1_988_wire)   $flowthrough 
    $delay AND_u1_u1_988_inst 0
    // (( ~ INIT ) | (INIT & free_q))
    |[OR_u1_u1_989_inst] (NOT_u1_u1_985_wire AND_u1_u1_988_wire) (update_free_q_pipe_990)   $flowthrough 
    $delay OR_u1_u1_989_inst 0
    // 			$volatile update_server_num := (( ~ INIT ) | (INIT & num_server)) $buffering 1
    //  file nic.linked.aa, line 419
    // ( ~ INIT )
    ~ [NOT_u1_u1_993_inst] (INIT_952) (NOT_u1_u1_993_wire)   $flowthrough
    $delay NOT_u1_u1_993_inst 0
    // (INIT & num_server)
    &[AND_u1_u1_996_inst] (INIT_952 num_server_968) (AND_u1_u1_996_wire)   $flowthrough 
    $delay AND_u1_u1_996_inst 0
    // (( ~ INIT ) | (INIT & num_server))
    |[OR_u1_u1_997_inst] (NOT_u1_u1_993_wire AND_u1_u1_996_wire) (update_server_num_998)   $flowthrough 
    $delay OR_u1_u1_997_inst 0
    // 			$guard (update_control_register_pipe) CONTROL_REGISTER := nic_registers[0 ] $buffering 1// bits of buffering = 32. 
    //  file nic.linked.aa, line 420
    // nic_registers[0 ]
    $load [array_obj_ref_1002_load_0] $from memory_space_0 (array_obj_ref_1002_word_address_0) (array_obj_ref_1002_data_0) $guard ( update_control_register_pipe_982 ) 
    $buffering  $in array_obj_ref_1002_load_0 array_obj_ref_1002_word_address_0 2
    $buffering  $out array_obj_ref_1002_load_0 array_obj_ref_1002_data_0 2
    $delay array_obj_ref_1002_load_0 5
    &/ [array_obj_ref_1002_gather_scatter] (array_obj_ref_1002_data_0) (array_obj_ref_1002_wire) $guard ( update_control_register_pipe_982 ) 
    $flowthrough 
    // CONTROL_REGISTER
    $ioport $out [WPIPE_CONTROL_REGISTER_1000_inst]  (array_obj_ref_1002_wire) (CONTROL_REGISTER) $guard ( update_control_register_pipe_982 )  $fullrate 
    // 			$guard (update_free_q_pipe) FREE_Q_32 := nic_registers[18 ] $buffering 1// bits of buffering = 32. 
    //  file nic.linked.aa, line 421
    // nic_registers[18 ]
    $load [array_obj_ref_1007_load_0] $from memory_space_0 (array_obj_ref_1007_word_address_0) (array_obj_ref_1007_data_0) $guard ( update_free_q_pipe_990 ) 
    $buffering  $in array_obj_ref_1007_load_0 array_obj_ref_1007_word_address_0 2
    $buffering  $out array_obj_ref_1007_load_0 array_obj_ref_1007_data_0 2
    $delay array_obj_ref_1007_load_0 5
    &/ [array_obj_ref_1007_gather_scatter] (array_obj_ref_1007_data_0) (FREE_Q_32_1008) $guard ( update_free_q_pipe_990 ) 
    $flowthrough 
    // 			$guard (update_free_q_pipe) FREE_Q := ($bitcast ($uint<36>) (FREE_Q_32 && ($bitcast ($uint<3>) _b0  )) ) $buffering 1// bits of buffering = 36. 
    //  file nic.linked.aa, line 422
    // (FREE_Q_32 && ($bitcast ($uint<3>) _b0  ))
    &&[CONCAT_u32_u35_1014_inst] (FREE_Q_32_1008 type_cast_1013_wire_constant) (CONCAT_u32_u35_1014_wire) $guard ( update_free_q_pipe_990 )   $flowthrough 
    $delay CONCAT_u32_u35_1014_inst 0
    // ($bitcast ($uint<36>) (FREE_Q_32 && ($bitcast ($uint<3>) _b0  )) )
    # := [type_cast_1015_inst] (CONCAT_u32_u35_1014_wire) (type_cast_1015_wire)  $guard ( update_free_q_pipe_990 )    $fullrate
    $buffering  $out type_cast_1015_inst type_cast_1015_wire 1
    $delay type_cast_1015_inst 1
    // FREE_Q
    $ioport $out [WPIPE_FREE_Q_1010_inst]  (type_cast_1015_wire) (FREE_Q) $guard ( update_free_q_pipe_990 )  $fullrate 
    // 			$guard (update_server_num) NUMBER_OF_SERVERS := nic_registers[1 ] $buffering 1// bits of buffering = 32. 
    //  file nic.linked.aa, line 423
    // nic_registers[1 ]
    $load [array_obj_ref_1020_load_0] $from memory_space_0 (array_obj_ref_1020_word_address_0) (array_obj_ref_1020_data_0) $guard ( update_server_num_998 ) 
    $buffering  $in array_obj_ref_1020_load_0 array_obj_ref_1020_word_address_0 2
    $buffering  $out array_obj_ref_1020_load_0 array_obj_ref_1020_data_0 2
    $delay array_obj_ref_1020_load_0 5
    &/ [array_obj_ref_1020_gather_scatter] (array_obj_ref_1020_data_0) (array_obj_ref_1020_wire) $guard ( update_server_num_998 ) 
    $flowthrough 
    // NUMBER_OF_SERVERS
    $ioport $out [WPIPE_NUMBER_OF_SERVERS_1018_inst]  (array_obj_ref_1020_wire) (NUMBER_OF_SERVERS) $guard ( update_server_num_998 )  $fullrate 
    // 			req := AFB_NIC_REQUEST $buffering 2// bits of buffering = 148. 
    //  file nic.linked.aa, line 424
    // AFB_NIC_REQUEST
    $ioport $in [RPIPE_AFB_NIC_REQUEST_1023_inst] (AFB_NIC_REQUEST) (req_1024)  $fullrate 
    $buffering $out RPIPE_AFB_NIC_REQUEST_1023_inst req_1024 1
    // 			$volatile lock := ( $slice req 73 73 )  $buffering 1
    //  file nic.linked.aa, line 426
    // ( $slice req 73 73 ) 
    [:] [slice_1028_inst] (req_1024 73 73) (lock_1029)  $flowthrough
    $delay slice_1028_inst 0
    // 			$volatile rwbar := ( $slice req 72 72 )  $buffering 1
    //  file nic.linked.aa, line 427
    // ( $slice req 72 72 ) 
    [:] [slice_1032_inst] (req_1024 72 72) (rwbar_1033)  $flowthrough
    $delay slice_1032_inst 0
    // 			$volatile bmask := ( $slice req 71 68 )  $buffering 1
    //  file nic.linked.aa, line 428
    // ( $slice req 71 68 ) 
    [:] [slice_1036_inst] (req_1024 71 68) (bmask_1037)  $flowthrough
    $delay slice_1036_inst 0
    // 			$volatile addr := ( $slice req 67 32 )  $buffering 1
    //  file nic.linked.aa, line 429
    // ( $slice req 67 32 ) 
    [:] [slice_1040_inst] (req_1024 67 32) (addr_1041)  $flowthrough
    $delay slice_1040_inst 0
    // 			$volatile wdata := ( $slice req 31 0 )  $buffering 1
    //  file nic.linked.aa, line 430
    // ( $slice req 31 0 ) 
    [:] [slice_1044_inst] (req_1024 31 0) (wdata_1045)  $flowthrough
    $delay slice_1044_inst 0
    // 			$volatile index := ( $slice addr 5 0 )  $buffering 1
    //  file nic.linked.aa, line 431
    // ( $slice addr 5 0 ) 
    [:] [slice_1048_inst] (addr_1041 5 0) (index_1049)  $flowthrough
    $delay slice_1048_inst 0
    // 			$volatile check_control_regsiter := ((index == 0 ) & (rwbar == 0 )) $buffering 1
    //  file nic.linked.aa, line 432
    // (index == 0 )
    ==[EQ_u6_u1_1053_inst] (index_1049 konst_1052_wire_constant) (EQ_u6_u1_1053_wire)   $flowthrough 
    $delay EQ_u6_u1_1053_inst 0
    // (rwbar == 0 )
    ==[EQ_u1_u1_1056_inst] (rwbar_1033 konst_1055_wire_constant) (EQ_u1_u1_1056_wire)   $flowthrough 
    $delay EQ_u1_u1_1056_inst 0
    // ((index == 0 ) & (rwbar == 0 ))
    &[AND_u1_u1_1057_inst] (EQ_u6_u1_1053_wire EQ_u1_u1_1056_wire) (check_control_regsiter_1058)   $flowthrough 
    $delay AND_u1_u1_1057_inst 0
    // 			$volatile check_free_q := ((index == 18 ) & (rwbar == 0 )) $buffering 1
    //  file nic.linked.aa, line 433
    // (index == 18 )
    ==[EQ_u6_u1_1062_inst] (index_1049 konst_1061_wire_constant) (EQ_u6_u1_1062_wire)   $flowthrough 
    $delay EQ_u6_u1_1062_inst 0
    // (rwbar == 0 )
    ==[EQ_u1_u1_1065_inst] (rwbar_1033 konst_1064_wire_constant) (EQ_u1_u1_1065_wire)   $flowthrough 
    $delay EQ_u1_u1_1065_inst 0
    // ((index == 18 ) & (rwbar == 0 ))
    &[AND_u1_u1_1066_inst] (EQ_u6_u1_1062_wire EQ_u1_u1_1065_wire) (check_free_q_1067)   $flowthrough 
    $delay AND_u1_u1_1066_inst 0
    // 			$volatile check_num_server := ((index == 1 ) & (rwbar == 0 )) $buffering 1
    //  file nic.linked.aa, line 434
    // (index == 1 )
    ==[EQ_u6_u1_1071_inst] (index_1049 konst_1070_wire_constant) (EQ_u6_u1_1071_wire)   $flowthrough 
    $delay EQ_u6_u1_1071_inst 0
    // (rwbar == 0 )
    ==[EQ_u1_u1_1074_inst] (rwbar_1033 konst_1073_wire_constant) (EQ_u1_u1_1074_wire)   $flowthrough 
    $delay EQ_u1_u1_1074_inst 0
    // ((index == 1 ) & (rwbar == 0 ))
    &[AND_u1_u1_1075_inst] (EQ_u6_u1_1071_wire EQ_u1_u1_1074_wire) (check_num_server_1076)   $flowthrough 
    $delay AND_u1_u1_1075_inst 0
    // 			rval := nic_registers[index] $buffering 1// bits of buffering = 32. 
    //  file nic.linked.aa, line 435
    // nic_registers[index]
    &/ [array_obj_ref_1079_index_0_resize] (index_1049) (R_index_1078_resized) 
    $flowthrough 
    &/ [array_obj_ref_1079_index_0_rename] (R_index_1078_resized) (R_index_1078_scaled) 
    $flowthrough 
    &/ [array_obj_ref_1079_index_offset] (R_index_1078_scaled) (array_obj_ref_1079_final_offset) 
    $flowthrough 
    &/ [array_obj_ref_1079_root_address_inst] (array_obj_ref_1079_final_offset) (array_obj_ref_1079_root_address) 
    $flowthrough 
    &/ [array_obj_ref_1079_addr_0] (array_obj_ref_1079_root_address) (array_obj_ref_1079_word_address_0) 
    $flowthrough 
    $load [array_obj_ref_1079_load_0] $from memory_space_0 (array_obj_ref_1079_word_address_0) (array_obj_ref_1079_data_0) 
    $buffering  $in array_obj_ref_1079_load_0 array_obj_ref_1079_word_address_0 2
    $buffering  $out array_obj_ref_1079_load_0 array_obj_ref_1079_data_0 2
    $delay array_obj_ref_1079_load_0 5
    &/ [array_obj_ref_1079_gather_scatter] (array_obj_ref_1079_data_0) (rval_1080) 
    $flowthrough 
    // 			$guard (~rwbar) $call UpdateRegister (bmask rval wdata index ) (wval ) 
    //  file nic.linked.aa, line 436
    $call [call_stmt_1087_call] $module UpdateRegister(bmask_1037 rval_1080 wdata_1045 index_1049) (wval_1087) $guard ( ~ rwbar_1033 )   $fullrate
    $delay call_stmt_1087_call 4
    $buffering  $in call_stmt_1087_call bmask_1037 1
    $buffering  $in call_stmt_1087_call rval_1080 1
    $buffering  $in call_stmt_1087_call wdata_1045 1
    $buffering  $in call_stmt_1087_call index_1049 1
    $buffering  $out call_stmt_1087_call wval_1087 1
    // 			$volatile rdata := ( $mux rwbar rval  ($bitcast ($uint<32>) _b0  ) )  $buffering 1
    //  file nic.linked.aa, line 437
    // ( $mux rwbar rval  ($bitcast ($uint<32>) _b0  ) ) 
    ? [MUX_1093_inst] (rwbar_1033 rval_1080 type_cast_1092_wire_constant) (rdata_1094)  $flowthrough
    // 			$volatile resp := (($bitcast ($uint<1>) _b0  ) && rdata) $buffering 1
    //  file nic.linked.aa, line 438
    // (($bitcast ($uint<1>) _b0  ) && rdata)
    &&[CONCAT_u1_u33_1099_inst] (type_cast_1097_wire_constant rdata_1094) (resp_1100)   $flowthrough 
    $delay CONCAT_u1_u33_1099_inst 0
    // 			AFB_NIC_RESPONSE := resp $buffering 1// bits of buffering = 33. 
    //  file nic.linked.aa, line 439
    // AFB_NIC_RESPONSE
    $ioport $out [WPIPE_AFB_NIC_RESPONSE_1101_inst]  (resp_1100) (AFB_NIC_RESPONSE)  $fullrate 
  }
  // end data-path
  // CP-DP links for do-while  do_while_stmt_950
  //  file nic.linked.aa, line 404
  phi_stmt_952 <=> (branch_block_stmt_949/do_while_stmt_950/do_while_stmt_950_loop_body/phi_stmt_952_entry_sample_req branch_block_stmt_949/do_while_stmt_950/do_while_stmt_950_loop_body/phi_stmt_952_loopback_sample_req) (branch_block_stmt_949/do_while_stmt_950/do_while_stmt_950_loop_body/phi_stmt_952_phi_mux_ack)
  phi_stmt_958 <=> (branch_block_stmt_949/do_while_stmt_950/do_while_stmt_950_loop_body/phi_stmt_958_entry_sample_req branch_block_stmt_949/do_while_stmt_950/do_while_stmt_950_loop_body/phi_stmt_958_loopback_sample_req) (branch_block_stmt_949/do_while_stmt_950/do_while_stmt_950_loop_body/phi_stmt_958_phi_mux_ack)
  check_control_regsiter_1058_962_buf <=> (branch_block_stmt_949/do_while_stmt_950/do_while_stmt_950_loop_body/R_check_control_regsiter_962_Sample/req branch_block_stmt_949/do_while_stmt_950/do_while_stmt_950_loop_body/R_check_control_regsiter_962_Update/req) (branch_block_stmt_949/do_while_stmt_950/do_while_stmt_950_loop_body/R_check_control_regsiter_962_Sample/ack branch_block_stmt_949/do_while_stmt_950/do_while_stmt_950_loop_body/R_check_control_regsiter_962_Update/ack)
  phi_stmt_963 <=> (branch_block_stmt_949/do_while_stmt_950/do_while_stmt_950_loop_body/phi_stmt_963_entry_sample_req branch_block_stmt_949/do_while_stmt_950/do_while_stmt_950_loop_body/phi_stmt_963_loopback_sample_req) (branch_block_stmt_949/do_while_stmt_950/do_while_stmt_950_loop_body/phi_stmt_963_phi_mux_ack)
  check_free_q_1067_967_buf <=> (branch_block_stmt_949/do_while_stmt_950/do_while_stmt_950_loop_body/R_check_free_q_967_Sample/req branch_block_stmt_949/do_while_stmt_950/do_while_stmt_950_loop_body/R_check_free_q_967_Update/req) (branch_block_stmt_949/do_while_stmt_950/do_while_stmt_950_loop_body/R_check_free_q_967_Sample/ack branch_block_stmt_949/do_while_stmt_950/do_while_stmt_950_loop_body/R_check_free_q_967_Update/ack)
  phi_stmt_968 <=> (branch_block_stmt_949/do_while_stmt_950/do_while_stmt_950_loop_body/phi_stmt_968_entry_sample_req branch_block_stmt_949/do_while_stmt_950/do_while_stmt_950_loop_body/phi_stmt_968_loopback_sample_req) (branch_block_stmt_949/do_while_stmt_950/do_while_stmt_950_loop_body/phi_stmt_968_phi_mux_ack)
  check_num_server_1076_972_buf <=> (branch_block_stmt_949/do_while_stmt_950/do_while_stmt_950_loop_body/R_check_num_server_972_Sample/req branch_block_stmt_949/do_while_stmt_950/do_while_stmt_950_loop_body/R_check_num_server_972_Update/req) (branch_block_stmt_949/do_while_stmt_950/do_while_stmt_950_loop_body/R_check_num_server_972_Sample/ack branch_block_stmt_949/do_while_stmt_950/do_while_stmt_950_loop_body/R_check_num_server_972_Update/ack)
  // 			$volatile update_control_register_pipe := (( ~ INIT ) | (INIT & control_register)) $buffering 1
  //  file nic.linked.aa, line 417
  // (( ~ INIT ) | (INIT & control_register))
  // INIT
  // (INIT & control_register)
  // INIT
  // control_register
  // 			$volatile update_free_q_pipe := (( ~ INIT ) | (INIT & free_q)) $buffering 1
  //  file nic.linked.aa, line 418
  // (( ~ INIT ) | (INIT & free_q))
  // INIT
  // (INIT & free_q)
  // INIT
  // free_q
  // 			$volatile update_server_num := (( ~ INIT ) | (INIT & num_server)) $buffering 1
  //  file nic.linked.aa, line 419
  // (( ~ INIT ) | (INIT & num_server))
  // INIT
  // (INIT & num_server)
  // INIT
  // num_server
  // 			$guard (update_control_register_pipe) CONTROL_REGISTER := nic_registers[0 ] $buffering 1// bits of buffering = 32. 
  //  file nic.linked.aa, line 420
  // nic_registers[0 ]
  array_obj_ref_1002_gather_scatter <=> (branch_block_stmt_949/do_while_stmt_950/do_while_stmt_950_loop_body/array_obj_ref_1002_Update/array_obj_ref_1002_Merge/merge_req) (branch_block_stmt_949/do_while_stmt_950/do_while_stmt_950_loop_body/array_obj_ref_1002_Update/array_obj_ref_1002_Merge/merge_ack)
  array_obj_ref_1002_load_0 <=> (branch_block_stmt_949/do_while_stmt_950/do_while_stmt_950_loop_body/array_obj_ref_1002_Sample/word_access_start/word_0/rr branch_block_stmt_949/do_while_stmt_950/do_while_stmt_950_loop_body/array_obj_ref_1002_Update/word_access_complete/word_0/cr) (branch_block_stmt_949/do_while_stmt_950/do_while_stmt_950_loop_body/array_obj_ref_1002_Sample/word_access_start/word_0/ra branch_block_stmt_949/do_while_stmt_950/do_while_stmt_950_loop_body/array_obj_ref_1002_Update/word_access_complete/word_0/ca)
  // CONTROL_REGISTER
  WPIPE_CONTROL_REGISTER_1000_inst <=> (branch_block_stmt_949/do_while_stmt_950/do_while_stmt_950_loop_body/WPIPE_CONTROL_REGISTER_1000_Sample/req branch_block_stmt_949/do_while_stmt_950/do_while_stmt_950_loop_body/WPIPE_CONTROL_REGISTER_1000_Update/req) (branch_block_stmt_949/do_while_stmt_950/do_while_stmt_950_loop_body/WPIPE_CONTROL_REGISTER_1000_Sample/ack branch_block_stmt_949/do_while_stmt_950/do_while_stmt_950_loop_body/WPIPE_CONTROL_REGISTER_1000_Update/ack)
  // 			$guard (update_free_q_pipe) FREE_Q_32 := nic_registers[18 ] $buffering 1// bits of buffering = 32. 
  //  file nic.linked.aa, line 421
  // nic_registers[18 ]
  array_obj_ref_1007_gather_scatter <=> (branch_block_stmt_949/do_while_stmt_950/do_while_stmt_950_loop_body/array_obj_ref_1007_Update/array_obj_ref_1007_Merge/merge_req) (branch_block_stmt_949/do_while_stmt_950/do_while_stmt_950_loop_body/array_obj_ref_1007_Update/array_obj_ref_1007_Merge/merge_ack)
  array_obj_ref_1007_load_0 <=> (branch_block_stmt_949/do_while_stmt_950/do_while_stmt_950_loop_body/array_obj_ref_1007_Sample/word_access_start/word_0/rr branch_block_stmt_949/do_while_stmt_950/do_while_stmt_950_loop_body/array_obj_ref_1007_Update/word_access_complete/word_0/cr) (branch_block_stmt_949/do_while_stmt_950/do_while_stmt_950_loop_body/array_obj_ref_1007_Sample/word_access_start/word_0/ra branch_block_stmt_949/do_while_stmt_950/do_while_stmt_950_loop_body/array_obj_ref_1007_Update/word_access_complete/word_0/ca)
  // 			$guard (update_free_q_pipe) FREE_Q := ($bitcast ($uint<36>) (FREE_Q_32 && ($bitcast ($uint<3>) _b0  )) ) $buffering 1// bits of buffering = 36. 
  //  file nic.linked.aa, line 422
  // (FREE_Q_32 && ($bitcast ($uint<3>) _b0  ))
  // FREE_Q_32
  // ($bitcast ($uint<36>) (FREE_Q_32 && ($bitcast ($uint<3>) _b0  )) )
  type_cast_1015_inst <=> (branch_block_stmt_949/do_while_stmt_950/do_while_stmt_950_loop_body/type_cast_1015_Sample/rr branch_block_stmt_949/do_while_stmt_950/do_while_stmt_950_loop_body/type_cast_1015_Update/cr) (branch_block_stmt_949/do_while_stmt_950/do_while_stmt_950_loop_body/type_cast_1015_Sample/ra branch_block_stmt_949/do_while_stmt_950/do_while_stmt_950_loop_body/type_cast_1015_Update/ca)
  // FREE_Q
  WPIPE_FREE_Q_1010_inst <=> (branch_block_stmt_949/do_while_stmt_950/do_while_stmt_950_loop_body/WPIPE_FREE_Q_1010_Sample/req branch_block_stmt_949/do_while_stmt_950/do_while_stmt_950_loop_body/WPIPE_FREE_Q_1010_Update/req) (branch_block_stmt_949/do_while_stmt_950/do_while_stmt_950_loop_body/WPIPE_FREE_Q_1010_Sample/ack branch_block_stmt_949/do_while_stmt_950/do_while_stmt_950_loop_body/WPIPE_FREE_Q_1010_Update/ack)
  // 			$guard (update_server_num) NUMBER_OF_SERVERS := nic_registers[1 ] $buffering 1// bits of buffering = 32. 
  //  file nic.linked.aa, line 423
  // nic_registers[1 ]
  array_obj_ref_1020_gather_scatter <=> (branch_block_stmt_949/do_while_stmt_950/do_while_stmt_950_loop_body/array_obj_ref_1020_Update/array_obj_ref_1020_Merge/merge_req) (branch_block_stmt_949/do_while_stmt_950/do_while_stmt_950_loop_body/array_obj_ref_1020_Update/array_obj_ref_1020_Merge/merge_ack)
  array_obj_ref_1020_load_0 <=> (branch_block_stmt_949/do_while_stmt_950/do_while_stmt_950_loop_body/array_obj_ref_1020_Sample/word_access_start/word_0/rr branch_block_stmt_949/do_while_stmt_950/do_while_stmt_950_loop_body/array_obj_ref_1020_Update/word_access_complete/word_0/cr) (branch_block_stmt_949/do_while_stmt_950/do_while_stmt_950_loop_body/array_obj_ref_1020_Sample/word_access_start/word_0/ra branch_block_stmt_949/do_while_stmt_950/do_while_stmt_950_loop_body/array_obj_ref_1020_Update/word_access_complete/word_0/ca)
  // NUMBER_OF_SERVERS
  WPIPE_NUMBER_OF_SERVERS_1018_inst <=> (branch_block_stmt_949/do_while_stmt_950/do_while_stmt_950_loop_body/WPIPE_NUMBER_OF_SERVERS_1018_Sample/req branch_block_stmt_949/do_while_stmt_950/do_while_stmt_950_loop_body/WPIPE_NUMBER_OF_SERVERS_1018_Update/req) (branch_block_stmt_949/do_while_stmt_950/do_while_stmt_950_loop_body/WPIPE_NUMBER_OF_SERVERS_1018_Sample/ack branch_block_stmt_949/do_while_stmt_950/do_while_stmt_950_loop_body/WPIPE_NUMBER_OF_SERVERS_1018_Update/ack)
  // 			req := AFB_NIC_REQUEST $buffering 2// bits of buffering = 148. 
  //  file nic.linked.aa, line 424
  // AFB_NIC_REQUEST
  RPIPE_AFB_NIC_REQUEST_1023_inst <=> (branch_block_stmt_949/do_while_stmt_950/do_while_stmt_950_loop_body/RPIPE_AFB_NIC_REQUEST_1023_Sample/rr branch_block_stmt_949/do_while_stmt_950/do_while_stmt_950_loop_body/RPIPE_AFB_NIC_REQUEST_1023_Update/cr) (branch_block_stmt_949/do_while_stmt_950/do_while_stmt_950_loop_body/RPIPE_AFB_NIC_REQUEST_1023_Sample/ra branch_block_stmt_949/do_while_stmt_950/do_while_stmt_950_loop_body/RPIPE_AFB_NIC_REQUEST_1023_Update/ca)
  // 			$volatile lock := ( $slice req 73 73 )  $buffering 1
  //  file nic.linked.aa, line 426
  // req
  // 			$volatile rwbar := ( $slice req 72 72 )  $buffering 1
  //  file nic.linked.aa, line 427
  // req
  // 			$volatile bmask := ( $slice req 71 68 )  $buffering 1
  //  file nic.linked.aa, line 428
  // req
  // 			$volatile addr := ( $slice req 67 32 )  $buffering 1
  //  file nic.linked.aa, line 429
  // req
  // 			$volatile wdata := ( $slice req 31 0 )  $buffering 1
  //  file nic.linked.aa, line 430
  // req
  // 			$volatile index := ( $slice addr 5 0 )  $buffering 1
  //  file nic.linked.aa, line 431
  // addr
  // 			$volatile check_control_regsiter := ((index == 0 ) & (rwbar == 0 )) $buffering 1
  //  file nic.linked.aa, line 432
  // ((index == 0 ) & (rwbar == 0 ))
  // (index == 0 )
  // index
  // (rwbar == 0 )
  // rwbar
  // 			$volatile check_free_q := ((index == 18 ) & (rwbar == 0 )) $buffering 1
  //  file nic.linked.aa, line 433
  // ((index == 18 ) & (rwbar == 0 ))
  // (index == 18 )
  // index
  // (rwbar == 0 )
  // rwbar
  // 			$volatile check_num_server := ((index == 1 ) & (rwbar == 0 )) $buffering 1
  //  file nic.linked.aa, line 434
  // ((index == 1 ) & (rwbar == 0 ))
  // (index == 1 )
  // index
  // (rwbar == 0 )
  // rwbar
  // 			rval := nic_registers[index] $buffering 1// bits of buffering = 32. 
  //  file nic.linked.aa, line 435
  // nic_registers[index]
  // index
  array_obj_ref_1079_index_0_resize <=> (branch_block_stmt_949/do_while_stmt_950/do_while_stmt_950_loop_body/array_obj_ref_1079_index_resize_0/index_resize_req) (branch_block_stmt_949/do_while_stmt_950/do_while_stmt_950_loop_body/array_obj_ref_1079_index_resize_0/index_resize_ack)
  array_obj_ref_1079_index_0_rename <=> (branch_block_stmt_949/do_while_stmt_950/do_while_stmt_950_loop_body/array_obj_ref_1079_index_scale_0/scale_rename_req) (branch_block_stmt_949/do_while_stmt_950/do_while_stmt_950_loop_body/array_obj_ref_1079_index_scale_0/scale_rename_ack)
  array_obj_ref_1079_index_offset <=> (branch_block_stmt_949/do_while_stmt_950/do_while_stmt_950_loop_body/array_obj_ref_1079_final_index_sum_regn/req) (branch_block_stmt_949/do_while_stmt_950/do_while_stmt_950_loop_body/array_obj_ref_1079_final_index_sum_regn/ack)
  array_obj_ref_1079_root_address_inst <=> (branch_block_stmt_949/do_while_stmt_950/do_while_stmt_950_loop_body/array_obj_ref_1079_base_plus_offset/sum_rename_req) (branch_block_stmt_949/do_while_stmt_950/do_while_stmt_950_loop_body/array_obj_ref_1079_base_plus_offset/sum_rename_ack)
  array_obj_ref_1079_addr_0 <=> (branch_block_stmt_949/do_while_stmt_950/do_while_stmt_950_loop_body/array_obj_ref_1079_word_addrgen/root_register_req) (branch_block_stmt_949/do_while_stmt_950/do_while_stmt_950_loop_body/array_obj_ref_1079_word_addrgen/root_register_ack)
  array_obj_ref_1079_gather_scatter <=> (branch_block_stmt_949/do_while_stmt_950/do_while_stmt_950_loop_body/array_obj_ref_1079_Update/array_obj_ref_1079_Merge/merge_req) (branch_block_stmt_949/do_while_stmt_950/do_while_stmt_950_loop_body/array_obj_ref_1079_Update/array_obj_ref_1079_Merge/merge_ack)
  array_obj_ref_1079_load_0 <=> (branch_block_stmt_949/do_while_stmt_950/do_while_stmt_950_loop_body/array_obj_ref_1079_Sample/word_access_start/word_0/rr branch_block_stmt_949/do_while_stmt_950/do_while_stmt_950_loop_body/array_obj_ref_1079_Update/word_access_complete/word_0/cr) (branch_block_stmt_949/do_while_stmt_950/do_while_stmt_950_loop_body/array_obj_ref_1079_Sample/word_access_start/word_0/ra branch_block_stmt_949/do_while_stmt_950/do_while_stmt_950_loop_body/array_obj_ref_1079_Update/word_access_complete/word_0/ca)
  // 			$guard (~rwbar) $call UpdateRegister (bmask rval wdata index ) (wval ) 
  //  file nic.linked.aa, line 436
  // bmask
  // rval
  // wdata
  // index
  call_stmt_1087_call <=> (branch_block_stmt_949/do_while_stmt_950/do_while_stmt_950_loop_body/call_stmt_1087_Sample/crr branch_block_stmt_949/do_while_stmt_950/do_while_stmt_950_loop_body/call_stmt_1087_Update/ccr) (branch_block_stmt_949/do_while_stmt_950/do_while_stmt_950_loop_body/call_stmt_1087_Sample/cra branch_block_stmt_949/do_while_stmt_950/do_while_stmt_950_loop_body/call_stmt_1087_Update/cca)
  // 			$volatile rdata := ( $mux rwbar rval  ($bitcast ($uint<32>) _b0  ) )  $buffering 1
  //  file nic.linked.aa, line 437
  // rwbar
  // rval
  // ( $mux rwbar rval  ($bitcast ($uint<32>) _b0  ) ) 
  // 			$volatile resp := (($bitcast ($uint<1>) _b0  ) && rdata) $buffering 1
  //  file nic.linked.aa, line 438
  // (($bitcast ($uint<1>) _b0  ) && rdata)
  // rdata
  // 			AFB_NIC_RESPONSE := resp $buffering 1// bits of buffering = 33. 
  //  file nic.linked.aa, line 439
  // resp
  // AFB_NIC_RESPONSE
  WPIPE_AFB_NIC_RESPONSE_1101_inst <=> (branch_block_stmt_949/do_while_stmt_950/do_while_stmt_950_loop_body/WPIPE_AFB_NIC_RESPONSE_1101_Sample/req branch_block_stmt_949/do_while_stmt_950/do_while_stmt_950_loop_body/WPIPE_AFB_NIC_RESPONSE_1101_Update/req) (branch_block_stmt_949/do_while_stmt_950/do_while_stmt_950_loop_body/WPIPE_AFB_NIC_RESPONSE_1101_Sample/ack branch_block_stmt_949/do_while_stmt_950/do_while_stmt_950_loop_body/WPIPE_AFB_NIC_RESPONSE_1101_Update/ack)
  do_while_stmt_950_branch <=> (branch_block_stmt_949/do_while_stmt_950/do_while_stmt_950_loop_body/condition_evaluated) (branch_block_stmt_949/do_while_stmt_950/loop_exit/ack branch_block_stmt_949/do_while_stmt_950/loop_taken/ack)
}
$pipeline $depth 7 $buffering 1 $module [getTxPacketPointerFromServer] 
{
  $in queue_index:$int<6>
  // can point into 
  $out pkt_pointer:$int<32>
  // can point into 
  status:$int<1>
  // can point into 
  // pipe-declarations for block %getTxPacketPointerFromServer
  //  file nic.linked.aa, line 443
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    // pipelined module
    :|:[assign_stmt_1117_to_call_stmt_1138] 
    {
      $T [queue_index_update_enable] 
      $T [queue_index_update_enable_out] 
      queue_index_update_enable &-> (queue_index_update_enable_out)
      $null &-> (queue_index_update_enable)
      $T [pkt_pointer_update_enable] 
      $T [pkt_pointer_update_enable_in] 
      $null &-> (pkt_pointer_update_enable)
      $null <-& (pkt_pointer_update_enable_in) 
      $null &-> (pkt_pointer_update_enable)
      pkt_pointer_update_enable <-& (pkt_pointer_update_enable_in) 
      $T [status_update_enable] 
      $T [status_update_enable_in] 
      $null &-> (status_update_enable)
      $null <-& (status_update_enable_in) 
      $null &-> (status_update_enable)
      status_update_enable <-& (status_update_enable_in) 
      // start: WAR dependencies for register_index
      // done: WAR dependencies for register_index
      // start:  	$volatile register_index := ($bitcast ($uint<6>) (queue_index + TX_QUEUES_REG_START_OFFSET) ) $buffering 1
      //  file nic.linked.aa, line 448
      // volatile! 
      // Source expression
      // ($bitcast ($uint<6>) (queue_index + TX_QUEUES_REG_START_OFFSET) )
      // (queue_index + TX_QUEUES_REG_START_OFFSET)
      // queue_index
      // Target expression
      // (as target) register_index
      // start: WAR dependencies for register_index
      // done: WAR dependencies for register_index
      // end:  	$volatile register_index := ($bitcast ($uint<6>) (queue_index + TX_QUEUES_REG_START_OFFSET) ) $buffering 1
      // start: 	$call AccessRegister (($bitcast ($uint<1>) _b1  ) ($bitcast ($uint<4>) _b1  ) register_index ($bitcast ($uint<32>) _b0  ) ) (tx_queue_pointer_32 ) 
      //  file nic.linked.aa, line 449
      $T[call_stmt_1126_sample_start_] 
      $T[call_stmt_1126_sample_completed_] 
      $T[call_stmt_1126_update_start_] 
      $T[call_stmt_1126_update_completed_] 
      // Call input argument 0
      // Call input argument 1
      // Call input argument 2
      // register_index
      // Call input argument 3
      // start: Forward dependencies from register_index to transition call_stmt_1126_sample_start_
      call_stmt_1126_sample_start_ <-& ($entry)
      // done: Forward dependencies from register_index to transition call_stmt_1126_sample_start_
      // RAW reenables for register_index
      queue_index_update_enable o<-& (call_stmt_1126_sample_completed_ 0)
      ;;[call_stmt_1126_Sample] 
      {
        $T [crr] $T [cra] 
      }
      ;;[call_stmt_1126_Update] 
      {
        $T [ccr] $T [cca] 
      }
      call_stmt_1126_sample_start_ &-> (call_stmt_1126_Sample)
      call_stmt_1126_sample_completed_ <-& (call_stmt_1126_Sample)
      call_stmt_1126_sample_completed_ &-> ($null)
      call_stmt_1126_update_start_ &-> (call_stmt_1126_Update)
      call_stmt_1126_update_completed_ <-& (call_stmt_1126_Update)
      // Call output argument 0
      // (as target) tx_queue_pointer_32
      // self-release: 
      call_stmt_1126_sample_start_ o<-& (call_stmt_1126_sample_completed_ 1)
      $null &-> (call_stmt_1126_update_start_)
      call_stmt_1126_update_start_ o<-& (call_stmt_1126_update_completed_ 0)
      // start: WAR dependencies for tx_queue_pointer_32
      // done: WAR dependencies for tx_queue_pointer_32
      // end: 	$call AccessRegister (($bitcast ($uint<1>) _b1  ) ($bitcast ($uint<4>) _b1  ) register_index ($bitcast ($uint<32>) _b0  ) ) (tx_queue_pointer_32 ) 
      // start: WAR dependencies for tx_queue_pointer_36
      // done: WAR dependencies for tx_queue_pointer_36
      // start:  	$volatile tx_queue_pointer_36 := (tx_queue_pointer_32 && ($bitcast ($uint<4>) _b0  )) $buffering 1
      //  file nic.linked.aa, line 450
      // volatile! 
      // Source expression
      // (tx_queue_pointer_32 && ($bitcast ($uint<4>) _b0  ))
      // tx_queue_pointer_32
      // Target expression
      // (as target) tx_queue_pointer_36
      // start: WAR dependencies for tx_queue_pointer_36
      // done: WAR dependencies for tx_queue_pointer_36
      // end:  	$volatile tx_queue_pointer_36 := (tx_queue_pointer_32 && ($bitcast ($uint<4>) _b0  )) $buffering 1
      // start: 	$call popFromQueue (($bitcast ($uint<1>) _b0  ) tx_queue_pointer_36 ) (pkt_pointer status ) 
      //  file nic.linked.aa, line 451
      $T[call_stmt_1138_sample_start_] 
      $T[call_stmt_1138_sample_completed_] 
      $T[call_stmt_1138_update_start_] 
      $T[call_stmt_1138_update_completed_] 
      // Call input argument 0
      // Call input argument 1
      // tx_queue_pointer_36
      // start: Forward dependencies from tx_queue_pointer_36 to transition call_stmt_1138_sample_start_
      call_stmt_1138_sample_start_ <-& (call_stmt_1126_update_completed_)
      // done: Forward dependencies from tx_queue_pointer_36 to transition call_stmt_1138_sample_start_
      // RAW reenables for tx_queue_pointer_36
      call_stmt_1126_update_start_ o<-& (call_stmt_1138_sample_completed_ 0)
      ;;[call_stmt_1138_Sample] 
      {
        $T [crr] $T [cra] 
      }
      ;;[call_stmt_1138_Update] 
      {
        $T [ccr] $T [cca] 
      }
      call_stmt_1138_sample_start_ &-> (call_stmt_1138_Sample)
      call_stmt_1138_sample_completed_ <-& (call_stmt_1138_Sample)
      call_stmt_1138_sample_completed_ &-> ($null)
      call_stmt_1138_update_start_ &-> (call_stmt_1138_Update)
      call_stmt_1138_update_completed_ <-& (call_stmt_1138_Update)
      // Call output argument 0
      // (as target) pkt_pointer
      // pkt_pointer
      // write to interface object
      // pkt_pointer
      // write to interface object
      call_stmt_1138_update_start_ <-& (pkt_pointer_update_enable)
      // Call output argument 1
      // (as target) status
      // status
      // write to interface object
      // status
      // write to interface object
      call_stmt_1138_update_start_ <-& (status_update_enable)
      // self-release: 
      call_stmt_1138_sample_start_ o<-& (call_stmt_1138_sample_completed_ 1)
      $null &-> (call_stmt_1138_update_start_)
      call_stmt_1138_update_start_ o<-& (call_stmt_1138_update_completed_ 0)
      // start: WAR dependencies for pkt_pointer
      // done: WAR dependencies for pkt_pointer
      // start: WAR dependencies for status
      // done: WAR dependencies for status
      // end: 	$call popFromQueue (($bitcast ($uint<1>) _b0  ) tx_queue_pointer_36 ) (pkt_pointer status ) 
      // load-store dependencies..
      // pipe read/write dependencies for pipe MEMORY_TO_NIC_RESPONSE
      // read-dependencies for pipe MEMORY_TO_NIC_RESPONSE
      // write-dependencies for pipe MEMORY_TO_NIC_RESPONSE
      // signal write dependencies for MEMORY_TO_NIC_RESPONSE
      // pipe read/write dependencies for pipe NIC_REQUEST_REGISTER_ACCESS_PIPE
      // read-dependencies for pipe NIC_REQUEST_REGISTER_ACCESS_PIPE
      // write-dependencies for pipe NIC_REQUEST_REGISTER_ACCESS_PIPE
      // signal write dependencies for NIC_REQUEST_REGISTER_ACCESS_PIPE
      // pipe read/write dependencies for pipe NIC_RESPONSE_REGISTER_ACCESS_PIPE
      // read-dependencies for pipe NIC_RESPONSE_REGISTER_ACCESS_PIPE
      // write-dependencies for pipe NIC_RESPONSE_REGISTER_ACCESS_PIPE
      // signal write dependencies for NIC_RESPONSE_REGISTER_ACCESS_PIPE
      // pipe read/write dependencies for pipe NIC_TO_MEMORY_REQUEST
      // read-dependencies for pipe NIC_TO_MEMORY_REQUEST
      // write-dependencies for pipe NIC_TO_MEMORY_REQUEST
      // signal write dependencies for NIC_TO_MEMORY_REQUEST
    }
    ( pkt_pointer_update_enable_in status_update_enable_in)
    ( queue_index_update_enable_out)
    $P [queue_index_update_enable] 
    $P [pkt_pointer_update_enable] 
    $P [status_update_enable] 
    $bind queue_index_update_enable <= assign_stmt_1117_to_call_stmt_1138 : queue_index_update_enable_out
    $bind pkt_pointer_update_enable => assign_stmt_1117_to_call_stmt_1138 : pkt_pointer_update_enable_in
    $bind status_update_enable => assign_stmt_1117_to_call_stmt_1138 : status_update_enable_in
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %getTxPacketPointerFromServer
    //  file nic.linked.aa, line 443
    // TX_QUEUES_REG_START_OFFSET
    $constant $W[R_TX_QUEUES_REG_START_OFFSET_1114_wire_constant] : $int<6> := _b001010// 10
    // 	$call AccessRegister (($bitcast ($uint<1>) _b1  ) ($bitcast ($uint<4>) _b1  ) register_index ($bitcast ($uint<32>) _b0  ) ) (tx_queue_pointer_32 ) 
    //  file nic.linked.aa, line 449
    // ($bitcast ($uint<1>) _b1  )
    $constant $W[type_cast_1119_wire_constant] : $int<1> := _b1// 1
    // ($bitcast ($uint<4>) _b1  )
    $constant $W[type_cast_1121_wire_constant] : $int<4> := _b0001// 1
    // ($bitcast ($uint<32>) _b0  )
    $constant $W[type_cast_1124_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // ($bitcast ($uint<4>) _b0  )
    $constant $W[type_cast_1130_wire_constant] : $int<4> := _b0000// 0
    // 	$call popFromQueue (($bitcast ($uint<1>) _b0  ) tx_queue_pointer_36 ) (pkt_pointer status ) 
    //  file nic.linked.aa, line 451
    // ($bitcast ($uint<1>) _b0  )
    $constant $W[type_cast_1134_wire_constant] : $int<1> := _b0// 0
    // 	$volatile register_index := ($bitcast ($uint<6>) (queue_index + TX_QUEUES_REG_START_OFFSET) ) $buffering 1
    //  file nic.linked.aa, line 448
    // (queue_index + TX_QUEUES_REG_START_OFFSET)
    $intermediate $W[ADD_u6_u6_1115_wire] : $int<6>
    // register_index
    $W[register_index_1117] : $int<6>
    // 	$call AccessRegister (($bitcast ($uint<1>) _b1  ) ($bitcast ($uint<4>) _b1  ) register_index ($bitcast ($uint<32>) _b0  ) ) (tx_queue_pointer_32 ) 
    //  file nic.linked.aa, line 449
    // tx_queue_pointer_32
    $W[tx_queue_pointer_32_1126] : $int<32>
    // 	$volatile tx_queue_pointer_36 := (tx_queue_pointer_32 && ($bitcast ($uint<4>) _b0  )) $buffering 1
    //  file nic.linked.aa, line 450
    // tx_queue_pointer_36
    $W[tx_queue_pointer_36_1132] : $int<36>
    // 	$call popFromQueue (($bitcast ($uint<1>) _b0  ) tx_queue_pointer_36 ) (pkt_pointer status ) 
    //  file nic.linked.aa, line 451
    // pkt_pointer
    // status
    // 	$volatile register_index := ($bitcast ($uint<6>) (queue_index + TX_QUEUES_REG_START_OFFSET) ) $buffering 1
    //  file nic.linked.aa, line 448
    // (queue_index + TX_QUEUES_REG_START_OFFSET)
    +[ADD_u6_u6_1115_inst] (queue_index R_TX_QUEUES_REG_START_OFFSET_1114_wire_constant) (ADD_u6_u6_1115_wire)   $flowthrough 
    $delay ADD_u6_u6_1115_inst 0
    // ($bitcast ($uint<6>) (queue_index + TX_QUEUES_REG_START_OFFSET) )
    # := [type_cast_1116_inst] (ADD_u6_u6_1115_wire) (register_index_1117)   $flowthrough
    $delay type_cast_1116_inst 0
    // 	$call AccessRegister (($bitcast ($uint<1>) _b1  ) ($bitcast ($uint<4>) _b1  ) register_index ($bitcast ($uint<32>) _b0  ) ) (tx_queue_pointer_32 ) 
    //  file nic.linked.aa, line 449
    $call [call_stmt_1126_call] $module AccessRegister(type_cast_1119_wire_constant type_cast_1121_wire_constant register_index_1117 type_cast_1124_wire_constant) (tx_queue_pointer_32_1126)  
    $delay call_stmt_1126_call 4
    $buffering  $in call_stmt_1126_call type_cast_1119_wire_constant 1
    $buffering  $in call_stmt_1126_call type_cast_1121_wire_constant 1
    $buffering  $in call_stmt_1126_call register_index_1117 1
    $buffering  $in call_stmt_1126_call type_cast_1124_wire_constant 1
    $buffering  $out call_stmt_1126_call tx_queue_pointer_32_1126 1
    // 	$volatile tx_queue_pointer_36 := (tx_queue_pointer_32 && ($bitcast ($uint<4>) _b0  )) $buffering 1
    //  file nic.linked.aa, line 450
    // (tx_queue_pointer_32 && ($bitcast ($uint<4>) _b0  ))
    &&[CONCAT_u32_u36_1131_inst] (tx_queue_pointer_32_1126 type_cast_1130_wire_constant) (tx_queue_pointer_36_1132)   $flowthrough 
    $delay CONCAT_u32_u36_1131_inst 0
    // 	$call popFromQueue (($bitcast ($uint<1>) _b0  ) tx_queue_pointer_36 ) (pkt_pointer status ) 
    //  file nic.linked.aa, line 451
    $call [call_stmt_1138_call] $module popFromQueue(type_cast_1134_wire_constant tx_queue_pointer_36_1132) (pkt_pointer status)  
    $delay call_stmt_1138_call 4
    $buffering  $in call_stmt_1138_call type_cast_1134_wire_constant 1
    $buffering  $in call_stmt_1138_call tx_queue_pointer_36_1132 1
    $buffering  $out call_stmt_1138_call pkt_pointer 1
    $buffering  $out call_stmt_1138_call status 1
  }
  // end data-path
  // 	$volatile register_index := ($bitcast ($uint<6>) (queue_index + TX_QUEUES_REG_START_OFFSET) ) $buffering 1
  //  file nic.linked.aa, line 448
  // (queue_index + TX_QUEUES_REG_START_OFFSET)
  // queue_index
  // 	$call AccessRegister (($bitcast ($uint<1>) _b1  ) ($bitcast ($uint<4>) _b1  ) register_index ($bitcast ($uint<32>) _b0  ) ) (tx_queue_pointer_32 ) 
  //  file nic.linked.aa, line 449
  // register_index
  call_stmt_1126_call <=> (assign_stmt_1117_to_call_stmt_1138/call_stmt_1126_Sample/crr assign_stmt_1117_to_call_stmt_1138/call_stmt_1126_Update/ccr) (assign_stmt_1117_to_call_stmt_1138/call_stmt_1126_Sample/cra assign_stmt_1117_to_call_stmt_1138/call_stmt_1126_Update/cca)
  // 	$volatile tx_queue_pointer_36 := (tx_queue_pointer_32 && ($bitcast ($uint<4>) _b0  )) $buffering 1
  //  file nic.linked.aa, line 450
  // (tx_queue_pointer_32 && ($bitcast ($uint<4>) _b0  ))
  // tx_queue_pointer_32
  // 	$call popFromQueue (($bitcast ($uint<1>) _b0  ) tx_queue_pointer_36 ) (pkt_pointer status ) 
  //  file nic.linked.aa, line 451
  // tx_queue_pointer_36
  call_stmt_1138_call <=> (assign_stmt_1117_to_call_stmt_1138/call_stmt_1138_Sample/crr assign_stmt_1117_to_call_stmt_1138/call_stmt_1138_Update/ccr) (assign_stmt_1117_to_call_stmt_1138/call_stmt_1138_Sample/cra assign_stmt_1117_to_call_stmt_1138/call_stmt_1138_Update/cca)
}
$module [global_storage_initializer_] 
{
  // pipe-declarations for block %global_storage_initializer_
  //  file nic.linked.aa, line 453
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %global_storage_initializer_
    //  file nic.linked.aa, line 453
  }
  // end data-path
}
$module [macToNicInterface] 
{
  // pipe-declarations for block %macToNicInterface
  //  file nic.linked.aa, line 460
  // pipe-declarations for block %macToNicInterface%loop
  //  file nic.linked.aa, line 465
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    <>[branch_block_stmt_1144] // Branch Block  file nic.linked.aa, line 465
    {
      $P [branch_block_stmt_1144__entry__]
      branch_block_stmt_1144__entry__ <-| ($entry)
      $P [branch_block_stmt_1144__exit__]
      branch_block_stmt_1144__exit__ |-> ($exit)
      $P [do_while_stmt_1145__entry__] 
      $P [do_while_stmt_1145__exit__] 
      // do-while-statement  
      //  file nic.linked.aa, line 467
      <o> [do_while_stmt_1145]  $depth 7 $buffering 1 
      {
        $P[do_while_stmt_1145__entry__] 
        $P[do_while_stmt_1145__exit__] 
        $P[loop_back] 
        $P[condition_done] 
        $P[loop_body_done] 
        $pipeline [do_while_stmt_1145_loop_body] 
        {
          // Pipelined!
          $T[back_edge_to_loop_body] 
          $T[first_time_through_loop_body] 
          $T[loop_body_start] 
          $T[condition_evaluated] 
          $transitionmerge [entry_tmerge] (back_edge_to_loop_body first_time_through_loop_body) (loop_body_start)
          $entry <-& (loop_body_start)
          $T[aggregated_phi_sample_req] 
          $T[aggregated_phi_sample_ack] 
          $T[aggregated_phi_update_req] 
          $T[aggregated_phi_update_ack] 
          // do not loop-back unless all phi's have used up their triggering tokens.
          condition_evaluated <-& (aggregated_phi_update_ack)
          aggregated_phi_sample_req o<-& (aggregated_phi_update_ack 0)
          // start:  single source PHI statement phi_stmt_1147
          // 			$phi rdata0 := 			  mac_to_nic_data_0 $on   $entry ,   $loopback 
          // type of target is $uint<64>
          $T[phi_stmt_1147_sample_start_] 
          $T[phi_stmt_1147_sample_completed_] 
          $T[phi_stmt_1147_update_start_] 
          $T[phi_stmt_1147_update_completed_] 
          aggregated_phi_sample_req <-& (phi_stmt_1147_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_1147_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_1147_update_start_)
          // non-implicit source expression in single-source phi
          // mac_to_nic_data_0
          $T[RPIPE_mac_to_nic_data_0_1149_sample_start_] 
          $T[RPIPE_mac_to_nic_data_0_1149_sample_completed_] 
          $T[RPIPE_mac_to_nic_data_0_1149_update_start_] 
          $T[RPIPE_mac_to_nic_data_0_1149_update_completed_] 
          ;;[RPIPE_mac_to_nic_data_0_1149_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_mac_to_nic_data_0_1149_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_mac_to_nic_data_0_1149_sample_start_ &-> (RPIPE_mac_to_nic_data_0_1149_Sample)
          RPIPE_mac_to_nic_data_0_1149_sample_completed_ <-& (RPIPE_mac_to_nic_data_0_1149_Sample)
          RPIPE_mac_to_nic_data_0_1149_update_start_ <-& (RPIPE_mac_to_nic_data_0_1149_sample_completed_)
          RPIPE_mac_to_nic_data_0_1149_update_start_ &-> (RPIPE_mac_to_nic_data_0_1149_Update)
          RPIPE_mac_to_nic_data_0_1149_update_completed_ <-& (RPIPE_mac_to_nic_data_0_1149_Update)
          RPIPE_mac_to_nic_data_0_1149_sample_start_ o<-& (RPIPE_mac_to_nic_data_0_1149_update_completed_ 0)
          // RAW reenables for mac_to_nic_data_0
          // producer  and  consumer are both determined by PHI statements.
          aggregated_phi_sample_req &-> (RPIPE_mac_to_nic_data_0_1149_sample_start_)
          aggregated_phi_sample_ack <-& (RPIPE_mac_to_nic_data_0_1149_sample_completed_)
          aggregated_phi_update_req &-> (RPIPE_mac_to_nic_data_0_1149_update_start_)
          phi_stmt_1147_update_completed_ <-& (RPIPE_mac_to_nic_data_0_1149_update_completed_)
          aggregated_phi_update_ack <-& (phi_stmt_1147_update_completed_)
          // done: PHI Statement phi_stmt_1147
          // start:  single source PHI statement phi_stmt_1150
          // 			$phi rdata1 := 			  mac_to_nic_data_1 $on   $entry ,   $loopback 
          // type of target is $uint<16>
          $T[phi_stmt_1150_sample_start_] 
          $T[phi_stmt_1150_sample_completed_] 
          $T[phi_stmt_1150_update_start_] 
          $T[phi_stmt_1150_update_completed_] 
          aggregated_phi_sample_req <-& (phi_stmt_1150_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_1150_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_1150_update_start_)
          // non-implicit source expression in single-source phi
          // mac_to_nic_data_1
          $T[RPIPE_mac_to_nic_data_1_1152_sample_start_] 
          $T[RPIPE_mac_to_nic_data_1_1152_sample_completed_] 
          $T[RPIPE_mac_to_nic_data_1_1152_update_start_] 
          $T[RPIPE_mac_to_nic_data_1_1152_update_completed_] 
          ;;[RPIPE_mac_to_nic_data_1_1152_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_mac_to_nic_data_1_1152_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_mac_to_nic_data_1_1152_sample_start_ &-> (RPIPE_mac_to_nic_data_1_1152_Sample)
          RPIPE_mac_to_nic_data_1_1152_sample_completed_ <-& (RPIPE_mac_to_nic_data_1_1152_Sample)
          RPIPE_mac_to_nic_data_1_1152_update_start_ <-& (RPIPE_mac_to_nic_data_1_1152_sample_completed_)
          RPIPE_mac_to_nic_data_1_1152_update_start_ &-> (RPIPE_mac_to_nic_data_1_1152_Update)
          RPIPE_mac_to_nic_data_1_1152_update_completed_ <-& (RPIPE_mac_to_nic_data_1_1152_Update)
          RPIPE_mac_to_nic_data_1_1152_sample_start_ o<-& (RPIPE_mac_to_nic_data_1_1152_update_completed_ 0)
          // RAW reenables for mac_to_nic_data_1
          // producer  and  consumer are both determined by PHI statements.
          aggregated_phi_sample_req &-> (RPIPE_mac_to_nic_data_1_1152_sample_start_)
          aggregated_phi_sample_ack <-& (RPIPE_mac_to_nic_data_1_1152_sample_completed_)
          aggregated_phi_update_req &-> (RPIPE_mac_to_nic_data_1_1152_update_start_)
          phi_stmt_1150_update_completed_ <-& (RPIPE_mac_to_nic_data_1_1152_update_completed_)
          aggregated_phi_update_ack <-& (phi_stmt_1150_update_completed_)
          // done: PHI Statement phi_stmt_1150
          // start:  			mac_to_nic_data := (( $slice rdata1 8 0 )  && rdata0) $buffering 1// bits of buffering = 73. 
          //  file nic.linked.aa, line 476
          // Source expression
          // (( $slice rdata1 8 0 )  && rdata0)
          $T[CONCAT_u9_u73_1162_sample_start_] 
          $T[CONCAT_u9_u73_1162_sample_completed_] 
          $T[CONCAT_u9_u73_1162_update_start_] 
          $T[CONCAT_u9_u73_1162_update_completed_] 
          // ( $slice rdata1 8 0 ) 
          // rdata1
          // rdata0
          // start: Forward dependencies from ( $slice rdata1 8 0 )  to transition CONCAT_u9_u73_1162_sample_start_
          CONCAT_u9_u73_1162_sample_start_ <-& (phi_stmt_1150_update_completed_)
          // done: Forward dependencies from ( $slice rdata1 8 0 )  to transition CONCAT_u9_u73_1162_sample_start_
          // start: Forward dependencies from rdata0 to transition CONCAT_u9_u73_1162_sample_start_
          CONCAT_u9_u73_1162_sample_start_ <-& (phi_stmt_1147_update_completed_)
          // done: Forward dependencies from rdata0 to transition CONCAT_u9_u73_1162_sample_start_
          ;;[CONCAT_u9_u73_1162_Sample] 
          {
            // binary expression 
            $T [rr] $T [ra]  // (split) binary operation 
          }
          ;;[CONCAT_u9_u73_1162_Update] 
          {
            // binary expression 
            $T [cr] $T [ca] // (split) binary operation 
          }
          CONCAT_u9_u73_1162_sample_start_ &-> (CONCAT_u9_u73_1162_Sample)
          CONCAT_u9_u73_1162_sample_completed_ <-& (CONCAT_u9_u73_1162_Sample)
          CONCAT_u9_u73_1162_sample_completed_ &-> ($null)
          CONCAT_u9_u73_1162_update_start_ &-> (CONCAT_u9_u73_1162_Update)
          CONCAT_u9_u73_1162_update_completed_ <-& (CONCAT_u9_u73_1162_Update)
          // RAW reenables for ( $slice rdata1 8 0 ) 
          phi_stmt_1150_update_start_ o<-& (CONCAT_u9_u73_1162_sample_completed_ 0)
          // RAW reenables for rdata0
          phi_stmt_1147_update_start_ o<-& (CONCAT_u9_u73_1162_sample_completed_ 0)
          // self-release: 
          CONCAT_u9_u73_1162_sample_start_ o<-& (CONCAT_u9_u73_1162_sample_completed_ 1)
          $null &-> (CONCAT_u9_u73_1162_update_start_)
          CONCAT_u9_u73_1162_update_start_ o<-& (CONCAT_u9_u73_1162_update_completed_ 0)
          // Target expression
          // (as target) mac_to_nic_data
          $T[WPIPE_mac_to_nic_data_1157_sample_start_] 
          $T[WPIPE_mac_to_nic_data_1157_sample_completed_] 
          $T[WPIPE_mac_to_nic_data_1157_update_start_] 
          $T[WPIPE_mac_to_nic_data_1157_update_completed_] 
          ;;[WPIPE_mac_to_nic_data_1157_Sample] 
          {
            // pipe write sample-start mac_to_nic_data
            $T [req] $T [ack] 
          }
          ;;[WPIPE_mac_to_nic_data_1157_Update] 
          {
            // pipe write update (complete) mac_to_nic_data
            $T [req] $T [ack] 
          }
          WPIPE_mac_to_nic_data_1157_sample_start_ &-> (WPIPE_mac_to_nic_data_1157_Sample)
          WPIPE_mac_to_nic_data_1157_sample_completed_ <-& (WPIPE_mac_to_nic_data_1157_Sample)
          WPIPE_mac_to_nic_data_1157_update_start_ <-& (WPIPE_mac_to_nic_data_1157_sample_completed_)
          WPIPE_mac_to_nic_data_1157_update_start_ &-> (WPIPE_mac_to_nic_data_1157_Update)
          WPIPE_mac_to_nic_data_1157_update_completed_ <-& (WPIPE_mac_to_nic_data_1157_Update)
          WPIPE_mac_to_nic_data_1157_sample_start_ o<-& (WPIPE_mac_to_nic_data_1157_update_completed_ 0)
          // start: Forward dependencies from (( $slice rdata1 8 0 )  && rdata0) to transition WPIPE_mac_to_nic_data_1157_sample_start_
          WPIPE_mac_to_nic_data_1157_sample_start_ <-& (CONCAT_u9_u73_1162_update_completed_)
          // done: Forward dependencies from (( $slice rdata1 8 0 )  && rdata0) to transition WPIPE_mac_to_nic_data_1157_sample_start_
          // RAW reenables for (( $slice rdata1 8 0 )  && rdata0)
          CONCAT_u9_u73_1162_update_start_ o<-& (WPIPE_mac_to_nic_data_1157_sample_completed_ 0)
          // end:  			mac_to_nic_data := (( $slice rdata1 8 0 )  && rdata0) $buffering 1// bits of buffering = 73. 
          $T [loop_body_delay_to_condition_start] $delay
          loop_body_start &-> (loop_body_delay_to_condition_start)
          loop_body_delay_to_condition_start &-> (condition_evaluated)
          condition_evaluated &-> ($null)
          // load-store dependencies..
          // pipe read/write dependencies for pipe mac_to_nic_data
          // read-dependencies for pipe mac_to_nic_data
          // write-dependencies for pipe mac_to_nic_data
          // signal write dependencies for mac_to_nic_data
          // pipe read/write dependencies for pipe mac_to_nic_data_0
          // read-dependencies for pipe mac_to_nic_data_0
          // write-dependencies for pipe mac_to_nic_data_0
          // signal write dependencies for mac_to_nic_data_0
          // pipe read/write dependencies for pipe mac_to_nic_data_1
          // read-dependencies for pipe mac_to_nic_data_1
          // write-dependencies for pipe mac_to_nic_data_1
          // signal write dependencies for mac_to_nic_data_1
        }
        ( first_time_through_loop_body  back_edge_to_loop_body) 
        ( condition_evaluated )
        ;; [loop_exit] 
        {
          $T [ack] 
        }
        ;; [loop_taken] 
        {
          $T [ack] 
        }
        do_while_stmt_1145__entry__ <-| ($entry)
        loop_body_done <-| ( do_while_stmt_1145_loop_body ) 
        condition_done |-> (loop_exit loop_taken)
        do_while_stmt_1145__exit__ |-> ($exit)
        $bind condition_done <= do_while_stmt_1145_loop_body : condition_evaluated
        $bind do_while_stmt_1145__entry__  => do_while_stmt_1145_loop_body : first_time_through_loop_body 
        $bind loop_back  => do_while_stmt_1145_loop_body : back_edge_to_loop_body 
        $terminate (loop_exit loop_taken loop_body_done) (loop_back do_while_stmt_1145__exit__)
      }
      do_while_stmt_1145__entry__ |-> (do_while_stmt_1145)
      do_while_stmt_1145__exit__ <-| (do_while_stmt_1145)
      do_while_stmt_1145__entry__ <-| (branch_block_stmt_1144__entry__)
      do_while_stmt_1145__exit__ |-> (branch_block_stmt_1144__exit__)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %macToNicInterface%loop%
    //  file nic.linked.aa, line 469
    // constant-object-declarations for block %macToNicInterface%loop
    //  file nic.linked.aa, line 465
    // constant-object-declarations for block %macToNicInterface
    //  file nic.linked.aa, line 460
    // constant-declarations for block %macToNicInterface%loop
    //  file nic.linked.aa, line 465
    // do-while statement  
    //  file nic.linked.aa, line 467
    // 1 
    $constant $W[konst_1165_wire_constant] : $int<1> := _b1// 1
    // constant-declarations for block %macToNicInterface%loop%
    //  file nic.linked.aa, line 469
    // constant-declarations for phi:  			$phi rdata0 := 			  mac_to_nic_data_0 $on   $entry ,   $loopback 
    // type of target is $uint<64>
    //  file nic.linked.aa, line 470
    // constant-declarations for phi:  			$phi rdata1 := 			  mac_to_nic_data_1 $on   $entry ,   $loopback 
    // type of target is $uint<16>
    //  file nic.linked.aa, line 472
    // block %macToNicInterface%loop
    //  file nic.linked.aa, line 465
    // do-while statement  
    //  file nic.linked.aa, line 467
    // merge-statement  
    //  file nic.linked.aa, line 469
    // 			$phi rdata0 := 			  mac_to_nic_data_0 $on   $entry ,   $loopback 
    // type of target is $uint<64>
    //  file nic.linked.aa, line 470
    // mac_to_nic_data_0
    $W[RPIPE_mac_to_nic_data_0_1149_wire] : $int<64>
    // rdata0
    $W[rdata0_1147] : $int<64>
    // 			$phi rdata1 := 			  mac_to_nic_data_1 $on   $entry ,   $loopback 
    // type of target is $uint<16>
    //  file nic.linked.aa, line 472
    // mac_to_nic_data_1
    $W[RPIPE_mac_to_nic_data_1_1152_wire] : $int<16>
    // rdata1
    $W[rdata1_1150] : $int<16>
    // 			mac_to_nic_data := (( $slice rdata1 8 0 )  && rdata0) $buffering 1// bits of buffering = 73. 
    //  file nic.linked.aa, line 476
    // ( $slice rdata1 8 0 ) 
    $intermediate $W[slice_1160_wire] : $int<9>
    // (( $slice rdata1 8 0 )  && rdata0)
    $intermediate $W[CONCAT_u9_u73_1162_wire] : $int<73>
    // mac_to_nic_data
    // datapath-instances for block %macToNicInterface%loop
    //  file nic.linked.aa, line 465
    // datapath-instances for do-while  
    //  file nic.linked.aa, line 467
    ==0? [do_while_stmt_1145_branch] (konst_1165_wire_constant)
    $flowthrough
    // data-path instances for merge  
    //  file nic.linked.aa, line 469
    // 			$phi rdata0 := 			  mac_to_nic_data_0 $on   $entry ,   $loopback 
    // type of target is $uint<64>
    //  file nic.linked.aa, line 470
    // mac_to_nic_data_0
    $ioport $in [RPIPE_mac_to_nic_data_0_1149_inst] (mac_to_nic_data_0) (RPIPE_mac_to_nic_data_0_1149_wire)  $fullrate 
    $buffering $out RPIPE_mac_to_nic_data_0_1149_inst RPIPE_mac_to_nic_data_0_1149_wire 1
    # := [ssrc_phi_stmt_1147] (RPIPE_mac_to_nic_data_0_1149_wire) (rdata0_1147)    $flowthrough 
    // 			$phi rdata1 := 			  mac_to_nic_data_1 $on   $entry ,   $loopback 
    // type of target is $uint<16>
    //  file nic.linked.aa, line 472
    // mac_to_nic_data_1
    $ioport $in [RPIPE_mac_to_nic_data_1_1152_inst] (mac_to_nic_data_1) (RPIPE_mac_to_nic_data_1_1152_wire)  $fullrate 
    $buffering $out RPIPE_mac_to_nic_data_1_1152_inst RPIPE_mac_to_nic_data_1_1152_wire 1
    # := [ssrc_phi_stmt_1150] (RPIPE_mac_to_nic_data_1_1152_wire) (rdata1_1150)    $flowthrough 
    // 			mac_to_nic_data := (( $slice rdata1 8 0 )  && rdata0) $buffering 1// bits of buffering = 73. 
    //  file nic.linked.aa, line 476
    // ( $slice rdata1 8 0 ) 
    [:] [slice_1160_inst] (rdata1_1150 8 0) (slice_1160_wire)  $flowthrough
    $delay slice_1160_inst 0
    // (( $slice rdata1 8 0 )  && rdata0)
    &&[CONCAT_u9_u73_1162_inst] (slice_1160_wire rdata0_1147) (CONCAT_u9_u73_1162_wire)    $fullrate
    $buffering  $out CONCAT_u9_u73_1162_inst CONCAT_u9_u73_1162_wire 1
    $delay CONCAT_u9_u73_1162_inst 1
    // mac_to_nic_data
    $ioport $out [WPIPE_mac_to_nic_data_1157_inst]  (CONCAT_u9_u73_1162_wire) (mac_to_nic_data)  $fullrate 
  }
  // end data-path
  // CP-DP links for do-while  do_while_stmt_1145
  //  file nic.linked.aa, line 467
  // mac_to_nic_data_0
  RPIPE_mac_to_nic_data_0_1149_inst <=> (branch_block_stmt_1144/do_while_stmt_1145/do_while_stmt_1145_loop_body/RPIPE_mac_to_nic_data_0_1149_Sample/rr branch_block_stmt_1144/do_while_stmt_1145/do_while_stmt_1145_loop_body/RPIPE_mac_to_nic_data_0_1149_Update/cr) (branch_block_stmt_1144/do_while_stmt_1145/do_while_stmt_1145_loop_body/RPIPE_mac_to_nic_data_0_1149_Sample/ra branch_block_stmt_1144/do_while_stmt_1145/do_while_stmt_1145_loop_body/RPIPE_mac_to_nic_data_0_1149_Update/ca)
  // mac_to_nic_data_1
  RPIPE_mac_to_nic_data_1_1152_inst <=> (branch_block_stmt_1144/do_while_stmt_1145/do_while_stmt_1145_loop_body/RPIPE_mac_to_nic_data_1_1152_Sample/rr branch_block_stmt_1144/do_while_stmt_1145/do_while_stmt_1145_loop_body/RPIPE_mac_to_nic_data_1_1152_Update/cr) (branch_block_stmt_1144/do_while_stmt_1145/do_while_stmt_1145_loop_body/RPIPE_mac_to_nic_data_1_1152_Sample/ra branch_block_stmt_1144/do_while_stmt_1145/do_while_stmt_1145_loop_body/RPIPE_mac_to_nic_data_1_1152_Update/ca)
  // 			mac_to_nic_data := (( $slice rdata1 8 0 )  && rdata0) $buffering 1// bits of buffering = 73. 
  //  file nic.linked.aa, line 476
  // (( $slice rdata1 8 0 )  && rdata0)
  // rdata1
  // rdata0
  CONCAT_u9_u73_1162_inst <=> (branch_block_stmt_1144/do_while_stmt_1145/do_while_stmt_1145_loop_body/CONCAT_u9_u73_1162_Sample/rr branch_block_stmt_1144/do_while_stmt_1145/do_while_stmt_1145_loop_body/CONCAT_u9_u73_1162_Update/cr) (branch_block_stmt_1144/do_while_stmt_1145/do_while_stmt_1145_loop_body/CONCAT_u9_u73_1162_Sample/ra branch_block_stmt_1144/do_while_stmt_1145/do_while_stmt_1145_loop_body/CONCAT_u9_u73_1162_Update/ca)
  // mac_to_nic_data
  WPIPE_mac_to_nic_data_1157_inst <=> (branch_block_stmt_1144/do_while_stmt_1145/do_while_stmt_1145_loop_body/WPIPE_mac_to_nic_data_1157_Sample/req branch_block_stmt_1144/do_while_stmt_1145/do_while_stmt_1145_loop_body/WPIPE_mac_to_nic_data_1157_Update/req) (branch_block_stmt_1144/do_while_stmt_1145/do_while_stmt_1145_loop_body/WPIPE_mac_to_nic_data_1157_Sample/ack branch_block_stmt_1144/do_while_stmt_1145/do_while_stmt_1145_loop_body/WPIPE_mac_to_nic_data_1157_Update/ack)
  do_while_stmt_1145_branch <=> (branch_block_stmt_1144/do_while_stmt_1145/do_while_stmt_1145_loop_body/condition_evaluated) (branch_block_stmt_1144/do_while_stmt_1145/loop_exit/ack branch_block_stmt_1144/do_while_stmt_1145/loop_taken/ack)
}
$module [memoryToNicInterface] 
{
  // pipe-declarations for block %memoryToNicInterface
  //  file nic.linked.aa, line 480
  // pipe-declarations for block %memoryToNicInterface%loop
  //  file nic.linked.aa, line 485
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    <>[branch_block_stmt_1169] // Branch Block  file nic.linked.aa, line 485
    {
      $P [branch_block_stmt_1169__entry__]
      branch_block_stmt_1169__entry__ <-| ($entry)
      $P [branch_block_stmt_1169__exit__]
      branch_block_stmt_1169__exit__ |-> ($exit)
      $P [do_while_stmt_1170__entry__] 
      $P [do_while_stmt_1170__exit__] 
      // do-while-statement  
      //  file nic.linked.aa, line 487
      <o> [do_while_stmt_1170]  $depth 7 $buffering 1 
      {
        $P[do_while_stmt_1170__entry__] 
        $P[do_while_stmt_1170__exit__] 
        $P[loop_back] 
        $P[condition_done] 
        $P[loop_body_done] 
        $pipeline [do_while_stmt_1170_loop_body] 
        {
          // Pipelined!
          $T[back_edge_to_loop_body] 
          $T[first_time_through_loop_body] 
          $T[loop_body_start] 
          $T[condition_evaluated] 
          $transitionmerge [entry_tmerge] (back_edge_to_loop_body first_time_through_loop_body) (loop_body_start)
          $entry <-& (loop_body_start)
          $T[aggregated_phi_sample_req] 
          $T[aggregated_phi_sample_ack] 
          $T[aggregated_phi_update_req] 
          $T[aggregated_phi_update_ack] 
          // do not loop-back unless all phi's have used up their triggering tokens.
          condition_evaluated <-& (aggregated_phi_update_ack)
          aggregated_phi_sample_req o<-& (aggregated_phi_update_ack 0)
          // start:  single source PHI statement phi_stmt_1172
          // 			$phi rdata0 := 			  mem_resp0_pipe0 $on   $entry ,   $loopback 
          // type of target is $uint<64>
          $T[phi_stmt_1172_sample_start_] 
          $T[phi_stmt_1172_sample_completed_] 
          $T[phi_stmt_1172_update_start_] 
          $T[phi_stmt_1172_update_completed_] 
          aggregated_phi_sample_req <-& (phi_stmt_1172_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_1172_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_1172_update_start_)
          // non-implicit source expression in single-source phi
          // mem_resp0_pipe0
          $T[RPIPE_mem_resp0_pipe0_1174_sample_start_] 
          $T[RPIPE_mem_resp0_pipe0_1174_sample_completed_] 
          $T[RPIPE_mem_resp0_pipe0_1174_update_start_] 
          $T[RPIPE_mem_resp0_pipe0_1174_update_completed_] 
          ;;[RPIPE_mem_resp0_pipe0_1174_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_mem_resp0_pipe0_1174_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_mem_resp0_pipe0_1174_sample_start_ &-> (RPIPE_mem_resp0_pipe0_1174_Sample)
          RPIPE_mem_resp0_pipe0_1174_sample_completed_ <-& (RPIPE_mem_resp0_pipe0_1174_Sample)
          RPIPE_mem_resp0_pipe0_1174_update_start_ <-& (RPIPE_mem_resp0_pipe0_1174_sample_completed_)
          RPIPE_mem_resp0_pipe0_1174_update_start_ &-> (RPIPE_mem_resp0_pipe0_1174_Update)
          RPIPE_mem_resp0_pipe0_1174_update_completed_ <-& (RPIPE_mem_resp0_pipe0_1174_Update)
          RPIPE_mem_resp0_pipe0_1174_sample_start_ o<-& (RPIPE_mem_resp0_pipe0_1174_update_completed_ 0)
          // RAW reenables for mem_resp0_pipe0
          // producer  and  consumer are both determined by PHI statements.
          aggregated_phi_sample_req &-> (RPIPE_mem_resp0_pipe0_1174_sample_start_)
          aggregated_phi_sample_ack <-& (RPIPE_mem_resp0_pipe0_1174_sample_completed_)
          aggregated_phi_update_req &-> (RPIPE_mem_resp0_pipe0_1174_update_start_)
          phi_stmt_1172_update_completed_ <-& (RPIPE_mem_resp0_pipe0_1174_update_completed_)
          aggregated_phi_update_ack <-& (phi_stmt_1172_update_completed_)
          // done: PHI Statement phi_stmt_1172
          // start:  single source PHI statement phi_stmt_1175
          // 			$phi rdata1 := 			  mem_resp0_pipe1 $on   $entry ,   $loopback 
          // type of target is $uint<8>
          $T[phi_stmt_1175_sample_start_] 
          $T[phi_stmt_1175_sample_completed_] 
          $T[phi_stmt_1175_update_start_] 
          $T[phi_stmt_1175_update_completed_] 
          aggregated_phi_sample_req <-& (phi_stmt_1175_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_1175_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_1175_update_start_)
          // non-implicit source expression in single-source phi
          // mem_resp0_pipe1
          $T[RPIPE_mem_resp0_pipe1_1177_sample_start_] 
          $T[RPIPE_mem_resp0_pipe1_1177_sample_completed_] 
          $T[RPIPE_mem_resp0_pipe1_1177_update_start_] 
          $T[RPIPE_mem_resp0_pipe1_1177_update_completed_] 
          ;;[RPIPE_mem_resp0_pipe1_1177_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_mem_resp0_pipe1_1177_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_mem_resp0_pipe1_1177_sample_start_ &-> (RPIPE_mem_resp0_pipe1_1177_Sample)
          RPIPE_mem_resp0_pipe1_1177_sample_completed_ <-& (RPIPE_mem_resp0_pipe1_1177_Sample)
          RPIPE_mem_resp0_pipe1_1177_update_start_ <-& (RPIPE_mem_resp0_pipe1_1177_sample_completed_)
          RPIPE_mem_resp0_pipe1_1177_update_start_ &-> (RPIPE_mem_resp0_pipe1_1177_Update)
          RPIPE_mem_resp0_pipe1_1177_update_completed_ <-& (RPIPE_mem_resp0_pipe1_1177_Update)
          RPIPE_mem_resp0_pipe1_1177_sample_start_ o<-& (RPIPE_mem_resp0_pipe1_1177_update_completed_ 0)
          // RAW reenables for mem_resp0_pipe1
          // producer  and  consumer are both determined by PHI statements.
          aggregated_phi_sample_req &-> (RPIPE_mem_resp0_pipe1_1177_sample_start_)
          aggregated_phi_sample_ack <-& (RPIPE_mem_resp0_pipe1_1177_sample_completed_)
          aggregated_phi_update_req &-> (RPIPE_mem_resp0_pipe1_1177_update_start_)
          phi_stmt_1175_update_completed_ <-& (RPIPE_mem_resp0_pipe1_1177_update_completed_)
          aggregated_phi_update_ack <-& (phi_stmt_1175_update_completed_)
          // done: PHI Statement phi_stmt_1175
          // start:  			MEMORY_TO_NIC_RESPONSE := ((rdata1 [] 0 ) && rdata0) $buffering 1// bits of buffering = 65. 
          //  file nic.linked.aa, line 495
          // Source expression
          // ((rdata1 [] 0 ) && rdata0)
          $T[CONCAT_u1_u65_1184_sample_start_] 
          $T[CONCAT_u1_u65_1184_sample_completed_] 
          $T[CONCAT_u1_u65_1184_update_start_] 
          $T[CONCAT_u1_u65_1184_update_completed_] 
          // (rdata1 [] 0 )
          // rdata1
          // rdata0
          // start: Forward dependencies from (rdata1 [] 0 ) to transition CONCAT_u1_u65_1184_sample_start_
          CONCAT_u1_u65_1184_sample_start_ <-& (phi_stmt_1175_update_completed_)
          // done: Forward dependencies from (rdata1 [] 0 ) to transition CONCAT_u1_u65_1184_sample_start_
          // start: Forward dependencies from rdata0 to transition CONCAT_u1_u65_1184_sample_start_
          CONCAT_u1_u65_1184_sample_start_ <-& (phi_stmt_1172_update_completed_)
          // done: Forward dependencies from rdata0 to transition CONCAT_u1_u65_1184_sample_start_
          ;;[CONCAT_u1_u65_1184_Sample] 
          {
            // binary expression 
            $T [rr] $T [ra]  // (split) binary operation 
          }
          ;;[CONCAT_u1_u65_1184_Update] 
          {
            // binary expression 
            $T [cr] $T [ca] // (split) binary operation 
          }
          CONCAT_u1_u65_1184_sample_start_ &-> (CONCAT_u1_u65_1184_Sample)
          CONCAT_u1_u65_1184_sample_completed_ <-& (CONCAT_u1_u65_1184_Sample)
          CONCAT_u1_u65_1184_sample_completed_ &-> ($null)
          CONCAT_u1_u65_1184_update_start_ &-> (CONCAT_u1_u65_1184_Update)
          CONCAT_u1_u65_1184_update_completed_ <-& (CONCAT_u1_u65_1184_Update)
          // RAW reenables for (rdata1 [] 0 )
          phi_stmt_1175_update_start_ o<-& (CONCAT_u1_u65_1184_sample_completed_ 0)
          // RAW reenables for rdata0
          phi_stmt_1172_update_start_ o<-& (CONCAT_u1_u65_1184_sample_completed_ 0)
          // self-release: 
          CONCAT_u1_u65_1184_sample_start_ o<-& (CONCAT_u1_u65_1184_sample_completed_ 1)
          $null &-> (CONCAT_u1_u65_1184_update_start_)
          CONCAT_u1_u65_1184_update_start_ o<-& (CONCAT_u1_u65_1184_update_completed_ 0)
          // Target expression
          // (as target) MEMORY_TO_NIC_RESPONSE
          $T[WPIPE_MEMORY_TO_NIC_RESPONSE_1179_sample_start_] 
          $T[WPIPE_MEMORY_TO_NIC_RESPONSE_1179_sample_completed_] 
          $T[WPIPE_MEMORY_TO_NIC_RESPONSE_1179_update_start_] 
          $T[WPIPE_MEMORY_TO_NIC_RESPONSE_1179_update_completed_] 
          ;;[WPIPE_MEMORY_TO_NIC_RESPONSE_1179_Sample] 
          {
            // pipe write sample-start MEMORY_TO_NIC_RESPONSE
            $T [req] $T [ack] 
          }
          ;;[WPIPE_MEMORY_TO_NIC_RESPONSE_1179_Update] 
          {
            // pipe write update (complete) MEMORY_TO_NIC_RESPONSE
            $T [req] $T [ack] 
          }
          WPIPE_MEMORY_TO_NIC_RESPONSE_1179_sample_start_ &-> (WPIPE_MEMORY_TO_NIC_RESPONSE_1179_Sample)
          WPIPE_MEMORY_TO_NIC_RESPONSE_1179_sample_completed_ <-& (WPIPE_MEMORY_TO_NIC_RESPONSE_1179_Sample)
          WPIPE_MEMORY_TO_NIC_RESPONSE_1179_update_start_ <-& (WPIPE_MEMORY_TO_NIC_RESPONSE_1179_sample_completed_)
          WPIPE_MEMORY_TO_NIC_RESPONSE_1179_update_start_ &-> (WPIPE_MEMORY_TO_NIC_RESPONSE_1179_Update)
          WPIPE_MEMORY_TO_NIC_RESPONSE_1179_update_completed_ <-& (WPIPE_MEMORY_TO_NIC_RESPONSE_1179_Update)
          WPIPE_MEMORY_TO_NIC_RESPONSE_1179_sample_start_ o<-& (WPIPE_MEMORY_TO_NIC_RESPONSE_1179_update_completed_ 0)
          // start: Forward dependencies from ((rdata1 [] 0 ) && rdata0) to transition WPIPE_MEMORY_TO_NIC_RESPONSE_1179_sample_start_
          WPIPE_MEMORY_TO_NIC_RESPONSE_1179_sample_start_ <-& (CONCAT_u1_u65_1184_update_completed_)
          // done: Forward dependencies from ((rdata1 [] 0 ) && rdata0) to transition WPIPE_MEMORY_TO_NIC_RESPONSE_1179_sample_start_
          // RAW reenables for ((rdata1 [] 0 ) && rdata0)
          CONCAT_u1_u65_1184_update_start_ o<-& (WPIPE_MEMORY_TO_NIC_RESPONSE_1179_sample_completed_ 0)
          // end:  			MEMORY_TO_NIC_RESPONSE := ((rdata1 [] 0 ) && rdata0) $buffering 1// bits of buffering = 65. 
          $T [loop_body_delay_to_condition_start] $delay
          loop_body_start &-> (loop_body_delay_to_condition_start)
          loop_body_delay_to_condition_start &-> (condition_evaluated)
          condition_evaluated &-> ($null)
          // load-store dependencies..
          // pipe read/write dependencies for pipe MEMORY_TO_NIC_RESPONSE
          // read-dependencies for pipe MEMORY_TO_NIC_RESPONSE
          // write-dependencies for pipe MEMORY_TO_NIC_RESPONSE
          // signal write dependencies for MEMORY_TO_NIC_RESPONSE
          // pipe read/write dependencies for pipe mem_resp0_pipe1
          // read-dependencies for pipe mem_resp0_pipe1
          // write-dependencies for pipe mem_resp0_pipe1
          // signal write dependencies for mem_resp0_pipe1
          // pipe read/write dependencies for pipe mem_resp0_pipe0
          // read-dependencies for pipe mem_resp0_pipe0
          // write-dependencies for pipe mem_resp0_pipe0
          // signal write dependencies for mem_resp0_pipe0
        }
        ( first_time_through_loop_body  back_edge_to_loop_body) 
        ( condition_evaluated )
        ;; [loop_exit] 
        {
          $T [ack] 
        }
        ;; [loop_taken] 
        {
          $T [ack] 
        }
        do_while_stmt_1170__entry__ <-| ($entry)
        loop_body_done <-| ( do_while_stmt_1170_loop_body ) 
        condition_done |-> (loop_exit loop_taken)
        do_while_stmt_1170__exit__ |-> ($exit)
        $bind condition_done <= do_while_stmt_1170_loop_body : condition_evaluated
        $bind do_while_stmt_1170__entry__  => do_while_stmt_1170_loop_body : first_time_through_loop_body 
        $bind loop_back  => do_while_stmt_1170_loop_body : back_edge_to_loop_body 
        $terminate (loop_exit loop_taken loop_body_done) (loop_back do_while_stmt_1170__exit__)
      }
      do_while_stmt_1170__entry__ |-> (do_while_stmt_1170)
      do_while_stmt_1170__exit__ <-| (do_while_stmt_1170)
      do_while_stmt_1170__entry__ <-| (branch_block_stmt_1169__entry__)
      do_while_stmt_1170__exit__ |-> (branch_block_stmt_1169__exit__)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %memoryToNicInterface%loop%
    //  file nic.linked.aa, line 489
    // constant-object-declarations for block %memoryToNicInterface%loop
    //  file nic.linked.aa, line 485
    // constant-object-declarations for block %memoryToNicInterface
    //  file nic.linked.aa, line 480
    // constant-declarations for block %memoryToNicInterface%loop
    //  file nic.linked.aa, line 485
    // do-while statement  
    //  file nic.linked.aa, line 487
    // 1 
    $constant $W[konst_1187_wire_constant] : $int<1> := _b1// 1
    // constant-declarations for block %memoryToNicInterface%loop%
    //  file nic.linked.aa, line 489
    // constant-declarations for phi:  			$phi rdata0 := 			  mem_resp0_pipe0 $on   $entry ,   $loopback 
    // type of target is $uint<64>
    //  file nic.linked.aa, line 490
    // constant-declarations for phi:  			$phi rdata1 := 			  mem_resp0_pipe1 $on   $entry ,   $loopback 
    // type of target is $uint<8>
    //  file nic.linked.aa, line 492
    // 0 
    $constant $W[konst_1181_wire_constant] : $int<8> := _b00000000// 0
    // block %memoryToNicInterface%loop
    //  file nic.linked.aa, line 485
    // do-while statement  
    //  file nic.linked.aa, line 487
    // merge-statement  
    //  file nic.linked.aa, line 489
    // 			$phi rdata0 := 			  mem_resp0_pipe0 $on   $entry ,   $loopback 
    // type of target is $uint<64>
    //  file nic.linked.aa, line 490
    // mem_resp0_pipe0
    $W[RPIPE_mem_resp0_pipe0_1174_wire] : $int<64>
    // rdata0
    $W[rdata0_1172] : $int<64>
    // 			$phi rdata1 := 			  mem_resp0_pipe1 $on   $entry ,   $loopback 
    // type of target is $uint<8>
    //  file nic.linked.aa, line 492
    // mem_resp0_pipe1
    $W[RPIPE_mem_resp0_pipe1_1177_wire] : $int<8>
    // rdata1
    $W[rdata1_1175] : $int<8>
    // 			MEMORY_TO_NIC_RESPONSE := ((rdata1 [] 0 ) && rdata0) $buffering 1// bits of buffering = 65. 
    //  file nic.linked.aa, line 495
    // (rdata1 [] 0 )
    $intermediate $W[BITSEL_u8_u1_1182_wire] : $int<1>
    // ((rdata1 [] 0 ) && rdata0)
    $intermediate $W[CONCAT_u1_u65_1184_wire] : $int<65>
    // MEMORY_TO_NIC_RESPONSE
    // datapath-instances for block %memoryToNicInterface%loop
    //  file nic.linked.aa, line 485
    // datapath-instances for do-while  
    //  file nic.linked.aa, line 487
    ==0? [do_while_stmt_1170_branch] (konst_1187_wire_constant)
    $flowthrough
    // data-path instances for merge  
    //  file nic.linked.aa, line 489
    // 			$phi rdata0 := 			  mem_resp0_pipe0 $on   $entry ,   $loopback 
    // type of target is $uint<64>
    //  file nic.linked.aa, line 490
    // mem_resp0_pipe0
    $ioport $in [RPIPE_mem_resp0_pipe0_1174_inst] (mem_resp0_pipe0) (RPIPE_mem_resp0_pipe0_1174_wire)  $fullrate 
    $buffering $out RPIPE_mem_resp0_pipe0_1174_inst RPIPE_mem_resp0_pipe0_1174_wire 1
    # := [ssrc_phi_stmt_1172] (RPIPE_mem_resp0_pipe0_1174_wire) (rdata0_1172)    $flowthrough 
    // 			$phi rdata1 := 			  mem_resp0_pipe1 $on   $entry ,   $loopback 
    // type of target is $uint<8>
    //  file nic.linked.aa, line 492
    // mem_resp0_pipe1
    $ioport $in [RPIPE_mem_resp0_pipe1_1177_inst] (mem_resp0_pipe1) (RPIPE_mem_resp0_pipe1_1177_wire)  $fullrate 
    $buffering $out RPIPE_mem_resp0_pipe1_1177_inst RPIPE_mem_resp0_pipe1_1177_wire 1
    # := [ssrc_phi_stmt_1175] (RPIPE_mem_resp0_pipe1_1177_wire) (rdata1_1175)    $flowthrough 
    // 			MEMORY_TO_NIC_RESPONSE := ((rdata1 [] 0 ) && rdata0) $buffering 1// bits of buffering = 65. 
    //  file nic.linked.aa, line 495
    // (rdata1 [] 0 )
    [][BITSEL_u8_u1_1182_inst] (rdata1_1175 konst_1181_wire_constant) (BITSEL_u8_u1_1182_wire)   $flowthrough 
    $delay BITSEL_u8_u1_1182_inst 0
    // ((rdata1 [] 0 ) && rdata0)
    &&[CONCAT_u1_u65_1184_inst] (BITSEL_u8_u1_1182_wire rdata0_1172) (CONCAT_u1_u65_1184_wire)    $fullrate
    $buffering  $out CONCAT_u1_u65_1184_inst CONCAT_u1_u65_1184_wire 1
    $delay CONCAT_u1_u65_1184_inst 1
    // MEMORY_TO_NIC_RESPONSE
    $ioport $out [WPIPE_MEMORY_TO_NIC_RESPONSE_1179_inst]  (CONCAT_u1_u65_1184_wire) (MEMORY_TO_NIC_RESPONSE)  $fullrate 
  }
  // end data-path
  // CP-DP links for do-while  do_while_stmt_1170
  //  file nic.linked.aa, line 487
  // mem_resp0_pipe0
  RPIPE_mem_resp0_pipe0_1174_inst <=> (branch_block_stmt_1169/do_while_stmt_1170/do_while_stmt_1170_loop_body/RPIPE_mem_resp0_pipe0_1174_Sample/rr branch_block_stmt_1169/do_while_stmt_1170/do_while_stmt_1170_loop_body/RPIPE_mem_resp0_pipe0_1174_Update/cr) (branch_block_stmt_1169/do_while_stmt_1170/do_while_stmt_1170_loop_body/RPIPE_mem_resp0_pipe0_1174_Sample/ra branch_block_stmt_1169/do_while_stmt_1170/do_while_stmt_1170_loop_body/RPIPE_mem_resp0_pipe0_1174_Update/ca)
  // mem_resp0_pipe1
  RPIPE_mem_resp0_pipe1_1177_inst <=> (branch_block_stmt_1169/do_while_stmt_1170/do_while_stmt_1170_loop_body/RPIPE_mem_resp0_pipe1_1177_Sample/rr branch_block_stmt_1169/do_while_stmt_1170/do_while_stmt_1170_loop_body/RPIPE_mem_resp0_pipe1_1177_Update/cr) (branch_block_stmt_1169/do_while_stmt_1170/do_while_stmt_1170_loop_body/RPIPE_mem_resp0_pipe1_1177_Sample/ra branch_block_stmt_1169/do_while_stmt_1170/do_while_stmt_1170_loop_body/RPIPE_mem_resp0_pipe1_1177_Update/ca)
  // 			MEMORY_TO_NIC_RESPONSE := ((rdata1 [] 0 ) && rdata0) $buffering 1// bits of buffering = 65. 
  //  file nic.linked.aa, line 495
  // ((rdata1 [] 0 ) && rdata0)
  // (rdata1 [] 0 )
  // rdata1
  // rdata0
  CONCAT_u1_u65_1184_inst <=> (branch_block_stmt_1169/do_while_stmt_1170/do_while_stmt_1170_loop_body/CONCAT_u1_u65_1184_Sample/rr branch_block_stmt_1169/do_while_stmt_1170/do_while_stmt_1170_loop_body/CONCAT_u1_u65_1184_Update/cr) (branch_block_stmt_1169/do_while_stmt_1170/do_while_stmt_1170_loop_body/CONCAT_u1_u65_1184_Sample/ra branch_block_stmt_1169/do_while_stmt_1170/do_while_stmt_1170_loop_body/CONCAT_u1_u65_1184_Update/ca)
  // MEMORY_TO_NIC_RESPONSE
  WPIPE_MEMORY_TO_NIC_RESPONSE_1179_inst <=> (branch_block_stmt_1169/do_while_stmt_1170/do_while_stmt_1170_loop_body/WPIPE_MEMORY_TO_NIC_RESPONSE_1179_Sample/req branch_block_stmt_1169/do_while_stmt_1170/do_while_stmt_1170_loop_body/WPIPE_MEMORY_TO_NIC_RESPONSE_1179_Update/req) (branch_block_stmt_1169/do_while_stmt_1170/do_while_stmt_1170_loop_body/WPIPE_MEMORY_TO_NIC_RESPONSE_1179_Sample/ack branch_block_stmt_1169/do_while_stmt_1170/do_while_stmt_1170_loop_body/WPIPE_MEMORY_TO_NIC_RESPONSE_1179_Update/ack)
  do_while_stmt_1170_branch <=> (branch_block_stmt_1169/do_while_stmt_1170/do_while_stmt_1170_loop_body/condition_evaluated) (branch_block_stmt_1169/do_while_stmt_1170/loop_exit/ack branch_block_stmt_1169/do_while_stmt_1170/loop_taken/ack)
}
$volatile $module [nextLSTATE] 
{
  $in RX:$int<73>
  // can point into 
  LSTATE:$int<2>
  // can point into 
  $out nLSTATE:$int<2>
  // can point into 
  // pipe-declarations for block %nextLSTATE
  //  file nic.linked.aa, line 499
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    // Volatile! CP is left blank 
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %nextLSTATE
    //  file nic.linked.aa, line 499
    // 1 
    $constant $W[konst_1208_wire_constant] : $int<1> := _b1// 1
    // ( $mux (LSTATE == S0) S1  _b0  ) 
    // S0
    $constant $W[R_S0_1213_wire_constant] : $int<2> := _b00// 0
    // S1
    $constant $W[R_S1_1215_wire_constant] : $int<2> := _b01// 1
    // _b0 
    $constant $W[konst_1216_wire_constant] : $int<2> := _b00// 0
    // ( $mux (LSTATE == S1) S2  _b0  ) 
    // S1
    $constant $W[R_S1_1219_wire_constant] : $int<2> := _b01// 1
    // S2
    $constant $W[R_S2_1221_wire_constant] : $int<2> := _b10// 2
    // _b0 
    $constant $W[konst_1222_wire_constant] : $int<2> := _b00// 0
    // ( $mux ((LSTATE == S2) & ( ~ last_word )) S2  _b0  ) 
    // S2
    $constant $W[R_S2_1226_wire_constant] : $int<2> := _b10// 2
    // S2
    $constant $W[R_S2_1231_wire_constant] : $int<2> := _b10// 2
    // _b0 
    $constant $W[konst_1232_wire_constant] : $int<2> := _b00// 0
    // ( $mux ((LSTATE == S2) & last_word) S0  _b0  ) 
    // S2
    $constant $W[R_S2_1235_wire_constant] : $int<2> := _b10// 2
    // S0
    $constant $W[R_S0_1239_wire_constant] : $int<2> := _b00// 0
    // _b0 
    $constant $W[konst_1240_wire_constant] : $int<2> := _b00// 0
    // 	$volatile tlast := ( $slice RX 72 72 )  $buffering 1
    //  file nic.linked.aa, line 504
    // tlast
    $W[tlast_1197] : $int<1>
    // 	$volatile tdata := ( $slice RX 71 8 )  $buffering 1
    //  file nic.linked.aa, line 505
    // tdata
    $W[tdata_1201] : $int<64>
    // 	$volatile tkeep := ( $slice RX 7 0 )  $buffering 1
    //  file nic.linked.aa, line 506
    // tkeep
    $W[tkeep_1205] : $int<8>
    // 	$volatile last_word := (tlast == 1 ) $buffering 1
    //  file nic.linked.aa, line 507
    // last_word
    $W[last_word_1210] : $int<1>
    // 	nLSTATE := ((( $mux (LSTATE == S0) S1  _b0  )  | ( $mux (LSTATE == S1) S2  _b0  ) ) | (( $mux ((LSTATE == S2) & ( ~ last_word )) S2  _b0  )  | ( $mux ((LSTATE == S2) & last_word) S0  _b0  ) )) $buffering 1
    //  file nic.linked.aa, line 508
    // (LSTATE == S0)
    $intermediate $W[EQ_u2_u1_1214_wire] : $int<1>
    // ( $mux (LSTATE == S0) S1  _b0  ) 
    $intermediate $W[MUX_1217_wire] : $int<2>
    // (LSTATE == S1)
    $intermediate $W[EQ_u2_u1_1220_wire] : $int<1>
    // ( $mux (LSTATE == S1) S2  _b0  ) 
    $intermediate $W[MUX_1223_wire] : $int<2>
    // (( $mux (LSTATE == S0) S1  _b0  )  | ( $mux (LSTATE == S1) S2  _b0  ) )
    $intermediate $W[OR_u2_u2_1224_wire] : $int<2>
    // (LSTATE == S2)
    $intermediate $W[EQ_u2_u1_1227_wire] : $int<1>
    // ( ~ last_word )
    $intermediate $W[NOT_u1_u1_1229_wire] : $int<1>
    // ((LSTATE == S2) & ( ~ last_word ))
    $intermediate $W[AND_u1_u1_1230_wire] : $int<1>
    // ( $mux ((LSTATE == S2) & ( ~ last_word )) S2  _b0  ) 
    $intermediate $W[MUX_1233_wire] : $int<2>
    // (LSTATE == S2)
    $intermediate $W[EQ_u2_u1_1236_wire] : $int<1>
    // ((LSTATE == S2) & last_word)
    $intermediate $W[AND_u1_u1_1238_wire] : $int<1>
    // ( $mux ((LSTATE == S2) & last_word) S0  _b0  ) 
    $intermediate $W[MUX_1241_wire] : $int<2>
    // (( $mux ((LSTATE == S2) & ( ~ last_word )) S2  _b0  )  | ( $mux ((LSTATE == S2) & last_word) S0  _b0  ) )
    $intermediate $W[OR_u2_u2_1242_wire] : $int<2>
    // nLSTATE
    // 	$volatile tlast := ( $slice RX 72 72 )  $buffering 1
    //  file nic.linked.aa, line 504
    // ( $slice RX 72 72 ) 
    [:] [slice_1196_inst] (RX 72 72) (tlast_1197)  $flowthrough
    $delay slice_1196_inst 0
    // 	$volatile tdata := ( $slice RX 71 8 )  $buffering 1
    //  file nic.linked.aa, line 505
    // ( $slice RX 71 8 ) 
    [:] [slice_1200_inst] (RX 71 8) (tdata_1201)  $flowthrough
    $delay slice_1200_inst 0
    // 	$volatile tkeep := ( $slice RX 7 0 )  $buffering 1
    //  file nic.linked.aa, line 506
    // ( $slice RX 7 0 ) 
    [:] [slice_1204_inst] (RX 7 0) (tkeep_1205)  $flowthrough
    $delay slice_1204_inst 0
    // 	$volatile last_word := (tlast == 1 ) $buffering 1
    //  file nic.linked.aa, line 507
    // (tlast == 1 )
    ==[EQ_u1_u1_1209_inst] (tlast_1197 konst_1208_wire_constant) (last_word_1210)   $flowthrough 
    $delay EQ_u1_u1_1209_inst 0
    // 	nLSTATE := ((( $mux (LSTATE == S0) S1  _b0  )  | ( $mux (LSTATE == S1) S2  _b0  ) ) | (( $mux ((LSTATE == S2) & ( ~ last_word )) S2  _b0  )  | ( $mux ((LSTATE == S2) & last_word) S0  _b0  ) )) $buffering 1
    //  file nic.linked.aa, line 508
    // (LSTATE == S0)
    ==[EQ_u2_u1_1214_inst] (LSTATE R_S0_1213_wire_constant) (EQ_u2_u1_1214_wire)   $flowthrough 
    $delay EQ_u2_u1_1214_inst 0
    // ( $mux (LSTATE == S0) S1  _b0  ) 
    ? [MUX_1217_inst] (EQ_u2_u1_1214_wire R_S1_1215_wire_constant konst_1216_wire_constant) (MUX_1217_wire)  $flowthrough
    // (LSTATE == S1)
    ==[EQ_u2_u1_1220_inst] (LSTATE R_S1_1219_wire_constant) (EQ_u2_u1_1220_wire)   $flowthrough 
    $delay EQ_u2_u1_1220_inst 0
    // ( $mux (LSTATE == S1) S2  _b0  ) 
    ? [MUX_1223_inst] (EQ_u2_u1_1220_wire R_S2_1221_wire_constant konst_1222_wire_constant) (MUX_1223_wire)  $flowthrough
    // (( $mux (LSTATE == S0) S1  _b0  )  | ( $mux (LSTATE == S1) S2  _b0  ) )
    |[OR_u2_u2_1224_inst] (MUX_1217_wire MUX_1223_wire) (OR_u2_u2_1224_wire)   $flowthrough 
    $delay OR_u2_u2_1224_inst 0
    // (LSTATE == S2)
    ==[EQ_u2_u1_1227_inst] (LSTATE R_S2_1226_wire_constant) (EQ_u2_u1_1227_wire)   $flowthrough 
    $delay EQ_u2_u1_1227_inst 0
    // ( ~ last_word )
    ~ [NOT_u1_u1_1229_inst] (last_word_1210) (NOT_u1_u1_1229_wire)   $flowthrough
    $delay NOT_u1_u1_1229_inst 0
    // ((LSTATE == S2) & ( ~ last_word ))
    &[AND_u1_u1_1230_inst] (EQ_u2_u1_1227_wire NOT_u1_u1_1229_wire) (AND_u1_u1_1230_wire)   $flowthrough 
    $delay AND_u1_u1_1230_inst 0
    // ( $mux ((LSTATE == S2) & ( ~ last_word )) S2  _b0  ) 
    ? [MUX_1233_inst] (AND_u1_u1_1230_wire R_S2_1231_wire_constant konst_1232_wire_constant) (MUX_1233_wire)  $flowthrough
    // (LSTATE == S2)
    ==[EQ_u2_u1_1236_inst] (LSTATE R_S2_1235_wire_constant) (EQ_u2_u1_1236_wire)   $flowthrough 
    $delay EQ_u2_u1_1236_inst 0
    // ((LSTATE == S2) & last_word)
    &[AND_u1_u1_1238_inst] (EQ_u2_u1_1236_wire last_word_1210) (AND_u1_u1_1238_wire)   $flowthrough 
    $delay AND_u1_u1_1238_inst 0
    // ( $mux ((LSTATE == S2) & last_word) S0  _b0  ) 
    ? [MUX_1241_inst] (AND_u1_u1_1238_wire R_S0_1239_wire_constant konst_1240_wire_constant) (MUX_1241_wire)  $flowthrough
    // (( $mux ((LSTATE == S2) & ( ~ last_word )) S2  _b0  )  | ( $mux ((LSTATE == S2) & last_word) S0  _b0  ) )
    |[OR_u2_u2_1242_inst] (MUX_1233_wire MUX_1241_wire) (OR_u2_u2_1242_wire)   $flowthrough 
    $delay OR_u2_u2_1242_inst 0
    // ((( $mux (LSTATE == S0) S1  _b0  )  | ( $mux (LSTATE == S1) S2  _b0  ) ) | (( $mux ((LSTATE == S2) & ( ~ last_word )) S2  _b0  )  | ( $mux ((LSTATE == S2) & last_word) S0  _b0  ) ))
    |[OR_u2_u2_1243_inst] (OR_u2_u2_1224_wire OR_u2_u2_1242_wire) (nLSTATE)   
    $buffering  $out OR_u2_u2_1243_inst nLSTATE 1
    $delay OR_u2_u2_1243_inst 1
  }
  // end data-path
  // Volatile module.. no links.
}
$module [nicRxFromMacDaemon] 
{
  // pipe-declarations for block %nicRxFromMacDaemon
  //  file nic.linked.aa, line 510
  // pipe-declarations for block %nicRxFromMacDaemon%loop
  //  file nic.linked.aa, line 515
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    <>[branch_block_stmt_1247] // Branch Block  file nic.linked.aa, line 515
    {
      $P [branch_block_stmt_1247__entry__]
      branch_block_stmt_1247__entry__ <-| ($entry)
      $P [branch_block_stmt_1247__exit__]
      branch_block_stmt_1247__exit__ |-> ($exit)
      $P [do_while_stmt_1248__entry__] 
      $P [do_while_stmt_1248__exit__] 
      // do-while-statement  
      //  file nic.linked.aa, line 517
      <o> [do_while_stmt_1248]  $depth 7 $buffering 1 
      {
        $P[do_while_stmt_1248__entry__] 
        $P[do_while_stmt_1248__exit__] 
        $P[loop_back] 
        $P[condition_done] 
        $P[loop_body_done] 
        $pipeline [do_while_stmt_1248_loop_body] 
        {
          // Pipelined!
          $T[back_edge_to_loop_body] 
          $T[first_time_through_loop_body] 
          $T[loop_body_start] 
          $T[condition_evaluated] 
          $transitionmerge [entry_tmerge] (back_edge_to_loop_body first_time_through_loop_body) (loop_body_start)
          $entry <-& (loop_body_start)
          $T[aggregated_phi_sample_req] 
          $T[aggregated_phi_sample_ack] 
          $T[aggregated_phi_update_req] 
          $T[aggregated_phi_update_ack] 
          // do not loop-back unless all phi's have used up their triggering tokens.
          condition_evaluated <-& (aggregated_phi_update_ack)
          aggregated_phi_sample_req o<-& (aggregated_phi_update_ack 0)
          // start:  PHI statement phi_stmt_1250
          // 			$phi LSTATE := 			  nLSTATE $on   $loopback 			  S0 $on   $entry 
          // type of target is $uint<2>
          $T[phi_stmt_1250_sample_start_] 
          $T[phi_stmt_1250_sample_completed_] 
          $T[phi_stmt_1250_update_start_] 
          $T[phi_stmt_1250_update_completed_] 
          $T[phi_stmt_1250_sample_start__ps] 
          phi_stmt_1250_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_1250_sample_completed__ps] 
          phi_stmt_1250_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_1250_update_start__ps] 
          phi_stmt_1250_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_1250_update_completed__ps] 
          phi_stmt_1250_update_completed_ <-& (phi_stmt_1250_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_1250_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_1250_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_1250_update_start_)
          $T[phi_stmt_1250_loopback_trigger] 
          phi_stmt_1250_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_1250_loopback_sample_req] 
          $T[phi_stmt_1250_loopback_sample_req_ps] 
          phi_stmt_1250_loopback_sample_req <-& (phi_stmt_1250_loopback_sample_req_ps)
          phi_stmt_1250_loopback_sample_req &-> ($null)
          $T[phi_stmt_1250_entry_trigger] 
          phi_stmt_1250_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_1250_entry_sample_req] 
          $T[phi_stmt_1250_entry_sample_req_ps] 
          phi_stmt_1250_entry_sample_req <-& (phi_stmt_1250_entry_sample_req_ps)
          phi_stmt_1250_entry_sample_req &-> ($null)
          phi_stmt_1250_update_start_ o<-& (phi_stmt_1250_update_completed_ 0)
          phi_stmt_1250_sample_start_ o<-& (phi_stmt_1250_sample_completed_ 1)
          $T[phi_stmt_1250_merged_reqs] 
          $T[phi_stmt_1250_phi_mux_ack] 
          $T[phi_stmt_1250_phi_mux_ack_ps] 
          phi_stmt_1250_phi_mux_ack_ps <-& (phi_stmt_1250_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_1250_update_completed_)
          $T[R_nLSTATE_1252_sample_start__ps] 
          $T[R_nLSTATE_1252_sample_completed__ps] 
          $T[R_nLSTATE_1252_update_start__ps] 
          $T[R_nLSTATE_1252_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 0
          $T[R_nLSTATE_1252_sample_start_] 
          $T[R_nLSTATE_1252_sample_completed_] 
          $T[R_nLSTATE_1252_update_start_] 
          $T[R_nLSTATE_1252_update_completed_] 
          ;;[R_nLSTATE_1252_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_nLSTATE_1252_sample_start_ &-> (R_nLSTATE_1252_Sample)
          R_nLSTATE_1252_sample_completed_ <-& (R_nLSTATE_1252_Sample)
          ;;[R_nLSTATE_1252_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_nLSTATE_1252_update_start_ &-> (R_nLSTATE_1252_Update)
          R_nLSTATE_1252_update_completed_ <-& (R_nLSTATE_1252_Update)
          // RAW reenables for nLSTATE
          // Phi start dependency for implicit/constant alternative.
          R_nLSTATE_1252_sample_start_ <-& (R_nLSTATE_1252_sample_start__ps)
          R_nLSTATE_1252_update_start_ <-& (R_nLSTATE_1252_update_start__ps)
          // Phi complete dependency.
          R_nLSTATE_1252_sample_completed__ps <-& (R_nLSTATE_1252_sample_completed_)
          R_nLSTATE_1252_update_completed__ps <-& (R_nLSTATE_1252_update_completed_)
          $T[R_S0_1253_sample_start__ps] 
          $T[R_S0_1253_sample_completed__ps] 
          $T[R_S0_1253_update_start__ps] 
          $T[R_S0_1253_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[R_S0_1253_sample_start_] 
          $T[R_S0_1253_sample_completed_] 
          R_S0_1253_sample_completed_ <-& (R_S0_1253_sample_start_)
          $T[R_S0_1253_update_start_] 
          $T [R_S0_1253_update_completed_] $delay 
          R_S0_1253_update_completed_ <-& (R_S0_1253_update_start_)
          // Phi start dependency for implicit/constant alternative.
          R_S0_1253_sample_start_ <-& (R_S0_1253_sample_start__ps)
          R_S0_1253_update_start_ <-& (R_S0_1253_update_start__ps)
          // Phi complete dependency.
          R_S0_1253_sample_completed__ps <-& (R_S0_1253_sample_completed_)
          R_S0_1253_update_completed__ps <-& (R_S0_1253_update_completed_)
          $phisequencer [ phi_stmt_1250_phi_seq] : 
          phi_stmt_1250_loopback_trigger R_nLSTATE_1252_sample_start__ps R_nLSTATE_1252_sample_completed__ps R_nLSTATE_1252_update_start__ps R_nLSTATE_1252_update_completed__ps phi_stmt_1250_entry_trigger R_S0_1253_sample_start__ps R_S0_1253_sample_completed__ps R_S0_1253_update_start__ps R_S0_1253_update_completed__ps :
          phi_stmt_1250_sample_start__ps phi_stmt_1250_sample_completed__ps phi_stmt_1250_update_start__ps phi_stmt_1250_update_completed__ps :
          phi_stmt_1250_loopback_sample_req_ps phi_stmt_1250_entry_sample_req_ps : 
          phi_stmt_1250_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_1250
          // start:  single source PHI statement phi_stmt_1254
          // 			$phi RX := 			  mac_to_nic_data $on   $entry ,   $loopback 
          // type of target is $uint<73>
          $T[phi_stmt_1254_sample_start_] 
          $T[phi_stmt_1254_sample_completed_] 
          $T[phi_stmt_1254_update_start_] 
          $T[phi_stmt_1254_update_completed_] 
          aggregated_phi_sample_req <-& (phi_stmt_1254_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_1254_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_1254_update_start_)
          // non-implicit source expression in single-source phi
          // mac_to_nic_data
          $T[RPIPE_mac_to_nic_data_1256_sample_start_] 
          $T[RPIPE_mac_to_nic_data_1256_sample_completed_] 
          $T[RPIPE_mac_to_nic_data_1256_update_start_] 
          $T[RPIPE_mac_to_nic_data_1256_update_completed_] 
          ;;[RPIPE_mac_to_nic_data_1256_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_mac_to_nic_data_1256_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_mac_to_nic_data_1256_sample_start_ &-> (RPIPE_mac_to_nic_data_1256_Sample)
          RPIPE_mac_to_nic_data_1256_sample_completed_ <-& (RPIPE_mac_to_nic_data_1256_Sample)
          RPIPE_mac_to_nic_data_1256_update_start_ <-& (RPIPE_mac_to_nic_data_1256_sample_completed_)
          RPIPE_mac_to_nic_data_1256_update_start_ &-> (RPIPE_mac_to_nic_data_1256_Update)
          RPIPE_mac_to_nic_data_1256_update_completed_ <-& (RPIPE_mac_to_nic_data_1256_Update)
          RPIPE_mac_to_nic_data_1256_sample_start_ o<-& (RPIPE_mac_to_nic_data_1256_update_completed_ 0)
          // RAW reenables for mac_to_nic_data
          // producer  and  consumer are both determined by PHI statements.
          aggregated_phi_sample_req &-> (RPIPE_mac_to_nic_data_1256_sample_start_)
          aggregated_phi_sample_ack <-& (RPIPE_mac_to_nic_data_1256_sample_completed_)
          aggregated_phi_update_req &-> (RPIPE_mac_to_nic_data_1256_update_start_)
          phi_stmt_1254_update_completed_ <-& (RPIPE_mac_to_nic_data_1256_update_completed_)
          aggregated_phi_update_ack <-& (phi_stmt_1254_update_completed_)
          // done: PHI Statement phi_stmt_1254
          // start: WAR dependencies for nLSTATE
          // WAR dependency: Read: nLSTATE before Write:  $volatile 			$call nextLSTATE (RX LSTATE ) (nLSTATE ) 
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for nLSTATE
          // start:  $volatile 			$call nextLSTATE (RX LSTATE ) (nLSTATE ) 
          //  file nic.linked.aa, line 526
          // volatile! 
          // Call input argument 0
          // RX
          // Call input argument 1
          // LSTATE
          // Call output argument 0
          // (as target) nLSTATE
          // start: WAR dependencies for nLSTATE
          // WAR dependency: Read: nLSTATE before Write:  $volatile 			$call nextLSTATE (RX LSTATE ) (nLSTATE ) 
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for nLSTATE
          // end:  $volatile 			$call nextLSTATE (RX LSTATE ) (nLSTATE ) 
          // start: WAR dependencies for write_to_header
          // done: WAR dependencies for write_to_header
          // start:  			$volatile write_to_header := ((LSTATE == S0) | (LSTATE == S1)) $buffering 1
          //  file nic.linked.aa, line 527
          // volatile! 
          // Source expression
          // ((LSTATE == S0) | (LSTATE == S1))
          // (LSTATE == S0)
          // LSTATE
          // (LSTATE == S1)
          // LSTATE
          // Target expression
          // (as target) write_to_header
          // start: WAR dependencies for write_to_header
          // done: WAR dependencies for write_to_header
          // end:  			$volatile write_to_header := ((LSTATE == S0) | (LSTATE == S1)) $buffering 1
          // start:  			$guard (write_to_header) nic_rx_to_header := ( $mux (LSTATE == S1) (( $slice RX 72 8 )  && HEADER_TKEEP)  RX )  $buffering 1// bits of buffering = 73. 
          //  file nic.linked.aa, line 528
          // Guard expression 
          // write_to_header
          // Source expression
          // ( $mux (LSTATE == S1) (( $slice RX 72 8 )  && HEADER_TKEEP)  RX ) 
          $T[MUX_1284_sample_start_] 
          $T[MUX_1284_sample_completed_] 
          $T[MUX_1284_update_start_] 
          $T[MUX_1284_update_completed_] 
          // Guard dependency for expression MUX_1284 with guard R_write_to_header_1274
          MUX_1284_sample_start_ <-& (phi_stmt_1250_update_completed_)
          // RAW reenables for write_to_header
          phi_stmt_1250_update_start_ o<-& (MUX_1284_sample_completed_ 0)
          // (LSTATE == S1)
          // LSTATE
          // (( $slice RX 72 8 )  && HEADER_TKEEP)
          // ( $slice RX 72 8 ) 
          // RX
          // RX
          // start: Forward dependencies from (LSTATE == S1) to transition MUX_1284_sample_start_
          MUX_1284_sample_start_ <-& (phi_stmt_1250_update_completed_)
          // done: Forward dependencies from (LSTATE == S1) to transition MUX_1284_sample_start_
          // start: Forward dependencies from (( $slice RX 72 8 )  && HEADER_TKEEP) to transition MUX_1284_sample_start_
          MUX_1284_sample_start_ <-& (phi_stmt_1254_update_completed_)
          // done: Forward dependencies from (( $slice RX 72 8 )  && HEADER_TKEEP) to transition MUX_1284_sample_start_
          // start: Forward dependencies from RX to transition MUX_1284_sample_start_
          MUX_1284_sample_start_ <-& (phi_stmt_1254_update_completed_)
          // done: Forward dependencies from RX to transition MUX_1284_sample_start_
          ;;[MUX_1284_start] 
          {
            // ternary expression: 
            $T [req] $T [ack] // sample req/ack
          }
          ;;[MUX_1284_complete] 
          {
            // ternary expression: 
            $T [req] $T [ack] // update req/ack
          }
          MUX_1284_sample_start_ &-> (MUX_1284_start)
          MUX_1284_sample_completed_ <-& (MUX_1284_start)
          MUX_1284_sample_completed_ &-> ($null)
          MUX_1284_update_start_ &-> (MUX_1284_complete)
          MUX_1284_update_completed_ <-& (MUX_1284_complete)
          // RAW reenables for (LSTATE == S1)
          phi_stmt_1250_update_start_ o<-& (MUX_1284_sample_completed_ 0)
          // RAW reenables for (( $slice RX 72 8 )  && HEADER_TKEEP)
          phi_stmt_1254_update_start_ o<-& (MUX_1284_sample_completed_ 0)
          // RAW reenables for RX
          phi_stmt_1254_update_start_ o<-& (MUX_1284_sample_completed_ 0)
          // self-release: 
          MUX_1284_sample_start_ o<-& (MUX_1284_sample_completed_ 1)
          $null &-> (MUX_1284_update_start_)
          MUX_1284_update_start_ o<-& (MUX_1284_update_completed_ 0)
          // Target expression
          // (as target) nic_rx_to_header
          $T[WPIPE_nic_rx_to_header_1275_sample_start_] 
          $T[WPIPE_nic_rx_to_header_1275_sample_completed_] 
          $T[WPIPE_nic_rx_to_header_1275_update_start_] 
          $T[WPIPE_nic_rx_to_header_1275_update_completed_] 
          // Guard dependency for expression WPIPE_nic_rx_to_header_1275 with guard R_write_to_header_1274
          WPIPE_nic_rx_to_header_1275_sample_start_ <-& (phi_stmt_1250_update_completed_)
          // RAW reenables for write_to_header
          phi_stmt_1250_update_start_ o<-& (WPIPE_nic_rx_to_header_1275_sample_completed_ 0)
          ;;[WPIPE_nic_rx_to_header_1275_Sample] 
          {
            // pipe write sample-start nic_rx_to_header
            $T [req] $T [ack] 
          }
          ;;[WPIPE_nic_rx_to_header_1275_Update] 
          {
            // pipe write update (complete) nic_rx_to_header
            $T [req] $T [ack] 
          }
          WPIPE_nic_rx_to_header_1275_sample_start_ &-> (WPIPE_nic_rx_to_header_1275_Sample)
          WPIPE_nic_rx_to_header_1275_sample_completed_ <-& (WPIPE_nic_rx_to_header_1275_Sample)
          WPIPE_nic_rx_to_header_1275_update_start_ <-& (WPIPE_nic_rx_to_header_1275_sample_completed_)
          WPIPE_nic_rx_to_header_1275_update_start_ &-> (WPIPE_nic_rx_to_header_1275_Update)
          WPIPE_nic_rx_to_header_1275_update_completed_ <-& (WPIPE_nic_rx_to_header_1275_Update)
          WPIPE_nic_rx_to_header_1275_sample_start_ o<-& (WPIPE_nic_rx_to_header_1275_update_completed_ 0)
          // start: Forward dependencies from ( $mux (LSTATE == S1) (( $slice RX 72 8 )  && HEADER_TKEEP)  RX )  to transition WPIPE_nic_rx_to_header_1275_sample_start_
          WPIPE_nic_rx_to_header_1275_sample_start_ <-& (MUX_1284_update_completed_)
          // done: Forward dependencies from ( $mux (LSTATE == S1) (( $slice RX 72 8 )  && HEADER_TKEEP)  RX )  to transition WPIPE_nic_rx_to_header_1275_sample_start_
          // RAW reenables for ( $mux (LSTATE == S1) (( $slice RX 72 8 )  && HEADER_TKEEP)  RX ) 
          MUX_1284_update_start_ o<-& (WPIPE_nic_rx_to_header_1275_sample_completed_ 0)
          // end:  			$guard (write_to_header) nic_rx_to_header := ( $mux (LSTATE == S1) (( $slice RX 72 8 )  && HEADER_TKEEP)  RX )  $buffering 1// bits of buffering = 73. 
          // start:  			nic_rx_to_packet := RX $buffering 1// bits of buffering = 73. 
          //  file nic.linked.aa, line 529
          // Source expression
          // RX
          // Target expression
          // (as target) nic_rx_to_packet
          $T[WPIPE_nic_rx_to_packet_1286_sample_start_] 
          $T[WPIPE_nic_rx_to_packet_1286_sample_completed_] 
          $T[WPIPE_nic_rx_to_packet_1286_update_start_] 
          $T[WPIPE_nic_rx_to_packet_1286_update_completed_] 
          ;;[WPIPE_nic_rx_to_packet_1286_Sample] 
          {
            // pipe write sample-start nic_rx_to_packet
            $T [req] $T [ack] 
          }
          ;;[WPIPE_nic_rx_to_packet_1286_Update] 
          {
            // pipe write update (complete) nic_rx_to_packet
            $T [req] $T [ack] 
          }
          WPIPE_nic_rx_to_packet_1286_sample_start_ &-> (WPIPE_nic_rx_to_packet_1286_Sample)
          WPIPE_nic_rx_to_packet_1286_sample_completed_ <-& (WPIPE_nic_rx_to_packet_1286_Sample)
          WPIPE_nic_rx_to_packet_1286_update_start_ <-& (WPIPE_nic_rx_to_packet_1286_sample_completed_)
          WPIPE_nic_rx_to_packet_1286_update_start_ &-> (WPIPE_nic_rx_to_packet_1286_Update)
          WPIPE_nic_rx_to_packet_1286_update_completed_ <-& (WPIPE_nic_rx_to_packet_1286_Update)
          WPIPE_nic_rx_to_packet_1286_sample_start_ o<-& (WPIPE_nic_rx_to_packet_1286_update_completed_ 0)
          // start: Forward dependencies from RX to transition WPIPE_nic_rx_to_packet_1286_sample_start_
          WPIPE_nic_rx_to_packet_1286_sample_start_ <-& (phi_stmt_1254_update_completed_)
          // done: Forward dependencies from RX to transition WPIPE_nic_rx_to_packet_1286_sample_start_
          // RAW reenables for RX
          phi_stmt_1254_update_start_ o<-& (WPIPE_nic_rx_to_packet_1286_sample_completed_ 0)
          // end:  			nic_rx_to_packet := RX $buffering 1// bits of buffering = 73. 
          $T [loop_body_delay_to_condition_start] $delay
          loop_body_start &-> (loop_body_delay_to_condition_start)
          loop_body_delay_to_condition_start &-> (condition_evaluated)
          condition_evaluated &-> ($null)
          // load-store dependencies..
          // pipe read/write dependencies for pipe mac_to_nic_data
          // read-dependencies for pipe mac_to_nic_data
          // write-dependencies for pipe mac_to_nic_data
          // signal write dependencies for mac_to_nic_data
          // pipe read/write dependencies for pipe nic_rx_to_header
          // read-dependencies for pipe nic_rx_to_header
          // write-dependencies for pipe nic_rx_to_header
          // signal write dependencies for nic_rx_to_header
          // pipe read/write dependencies for pipe nic_rx_to_packet
          // read-dependencies for pipe nic_rx_to_packet
          // write-dependencies for pipe nic_rx_to_packet
          // signal write dependencies for nic_rx_to_packet
        }
        ( first_time_through_loop_body  back_edge_to_loop_body) 
        ( condition_evaluated )
        ;; [loop_exit] 
        {
          $T [ack] 
        }
        ;; [loop_taken] 
        {
          $T [ack] 
        }
        do_while_stmt_1248__entry__ <-| ($entry)
        loop_body_done <-| ( do_while_stmt_1248_loop_body ) 
        condition_done |-> (loop_exit loop_taken)
        do_while_stmt_1248__exit__ |-> ($exit)
        $bind condition_done <= do_while_stmt_1248_loop_body : condition_evaluated
        $bind do_while_stmt_1248__entry__  => do_while_stmt_1248_loop_body : first_time_through_loop_body 
        $bind loop_back  => do_while_stmt_1248_loop_body : back_edge_to_loop_body 
        $terminate (loop_exit loop_taken loop_body_done) (loop_back do_while_stmt_1248__exit__)
      }
      do_while_stmt_1248__entry__ |-> (do_while_stmt_1248)
      do_while_stmt_1248__exit__ <-| (do_while_stmt_1248)
      do_while_stmt_1248__entry__ <-| (branch_block_stmt_1247__entry__)
      do_while_stmt_1248__exit__ |-> (branch_block_stmt_1247__exit__)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %nicRxFromMacDaemon%loop%
    //  file nic.linked.aa, line 519
    // constant-object-declarations for block %nicRxFromMacDaemon%loop
    //  file nic.linked.aa, line 515
    // constant-object-declarations for block %nicRxFromMacDaemon
    //  file nic.linked.aa, line 510
    // constant-declarations for block %nicRxFromMacDaemon%loop
    //  file nic.linked.aa, line 515
    // do-while statement  
    //  file nic.linked.aa, line 517
    // 1 
    $constant $W[konst_1292_wire_constant] : $int<1> := _b1// 1
    // constant-declarations for block %nicRxFromMacDaemon%loop%
    //  file nic.linked.aa, line 519
    // constant-declarations for phi:  			$phi LSTATE := 			  nLSTATE $on   $loopback 			  S0 $on   $entry 
    // type of target is $uint<2>
    //  file nic.linked.aa, line 520
    // S0
    $constant $W[R_S0_1253_wire_constant] : $int<2> := _b00// 0
    // constant-declarations for phi:  			$phi RX := 			  mac_to_nic_data $on   $entry ,   $loopback 
    // type of target is $uint<73>
    //  file nic.linked.aa, line 522
    //  $volatile 			$call nextLSTATE (RX LSTATE ) (nLSTATE ) 
    //  file nic.linked.aa, line 526
    // S0
    $constant $W[R_S0_1267_wire_constant] : $int<2> := _b00// 0
    // S1
    $constant $W[R_S1_1270_wire_constant] : $int<2> := _b01// 1
    // ( $mux (LSTATE == S1) (( $slice RX 72 8 )  && HEADER_TKEEP)  RX ) 
    // S1
    $constant $W[R_S1_1277_wire_constant] : $int<2> := _b01// 1
    // HEADER_TKEEP
    $constant $W[R_HEADER_TKEEP_1281_wire_constant] : $int<8> := _b00111111// 63
    // block %nicRxFromMacDaemon%loop
    //  file nic.linked.aa, line 515
    // do-while statement  
    //  file nic.linked.aa, line 517
    // merge-statement  
    //  file nic.linked.aa, line 519
    // 			$phi LSTATE := 			  nLSTATE $on   $loopback 			  S0 $on   $entry 
    // type of target is $uint<2>
    //  file nic.linked.aa, line 520
    $W[nLSTATE_1264_1252_buffered] : $int<2>
    // LSTATE
    $W[LSTATE_1250] : $int<2>
    // 			$phi RX := 			  mac_to_nic_data $on   $entry ,   $loopback 
    // type of target is $uint<73>
    //  file nic.linked.aa, line 522
    // mac_to_nic_data
    $W[RPIPE_mac_to_nic_data_1256_wire] : $int<73>
    // RX
    $W[RX_1254] : $int<73>
    //  $volatile 			$call nextLSTATE (RX LSTATE ) (nLSTATE ) 
    //  file nic.linked.aa, line 526
    // nLSTATE
    $W[nLSTATE_1264] : $int<2>
    // 			$volatile write_to_header := ((LSTATE == S0) | (LSTATE == S1)) $buffering 1
    //  file nic.linked.aa, line 527
    // (LSTATE == S0)
    $intermediate $W[EQ_u2_u1_1268_wire] : $int<1>
    // (LSTATE == S1)
    $intermediate $W[EQ_u2_u1_1271_wire] : $int<1>
    // write_to_header
    $W[write_to_header_1273] : $int<1>
    // 			$guard (write_to_header) nic_rx_to_header := ( $mux (LSTATE == S1) (( $slice RX 72 8 )  && HEADER_TKEEP)  RX )  $buffering 1// bits of buffering = 73. 
    //  file nic.linked.aa, line 528
    // (LSTATE == S1)
    $intermediate $W[EQ_u2_u1_1278_wire] : $int<1>
    // ( $slice RX 72 8 ) 
    $intermediate $W[slice_1280_wire] : $int<65>
    // (( $slice RX 72 8 )  && HEADER_TKEEP)
    $intermediate $W[CONCAT_u65_u73_1282_wire] : $int<73>
    // ( $mux (LSTATE == S1) (( $slice RX 72 8 )  && HEADER_TKEEP)  RX ) 
    $intermediate $W[MUX_1284_wire] : $int<73>
    // nic_rx_to_header
    // 			nic_rx_to_packet := RX $buffering 1// bits of buffering = 73. 
    //  file nic.linked.aa, line 529
    // nic_rx_to_packet
    // datapath-instances for block %nicRxFromMacDaemon%loop
    //  file nic.linked.aa, line 515
    // datapath-instances for do-while  
    //  file nic.linked.aa, line 517
    ==0? [do_while_stmt_1248_branch] (konst_1292_wire_constant)
    $flowthrough
    // data-path instances for merge  
    //  file nic.linked.aa, line 519
    // 			$phi LSTATE := 			  nLSTATE $on   $loopback 			  S0 $on   $entry 
    // type of target is $uint<2>
    //  file nic.linked.aa, line 520
    # := [nLSTATE_1264_1252_buf] (nLSTATE_1264) (nLSTATE_1264_1252_buffered)     $fullrate
    $buffering $out nLSTATE_1264_1252_buf nLSTATE_1264_1252_buffered  1
    # $phi [phi_stmt_1250] (nLSTATE_1264_1252_buffered R_S0_1253_wire_constant) ( LSTATE_1250 ) $fullrate
    // $buffering  $out phi_stmt_1250 LSTATE_1250 2
    // 			$phi RX := 			  mac_to_nic_data $on   $entry ,   $loopback 
    // type of target is $uint<73>
    //  file nic.linked.aa, line 522
    // mac_to_nic_data
    $ioport $in [RPIPE_mac_to_nic_data_1256_inst] (mac_to_nic_data) (RPIPE_mac_to_nic_data_1256_wire)  $fullrate 
    $buffering $out RPIPE_mac_to_nic_data_1256_inst RPIPE_mac_to_nic_data_1256_wire 1
    # := [ssrc_phi_stmt_1254] (RPIPE_mac_to_nic_data_1256_wire) (RX_1254)    $flowthrough 
    //  $volatile 			$call nextLSTATE (RX LSTATE ) (nLSTATE ) 
    //  file nic.linked.aa, line 526
    $call [call_stmt_1264_call] $module nextLSTATE(RX_1254 LSTATE_1250) (nLSTATE_1264)   $flowthrough $fullrate
    // 			$volatile write_to_header := ((LSTATE == S0) | (LSTATE == S1)) $buffering 1
    //  file nic.linked.aa, line 527
    // (LSTATE == S0)
    ==[EQ_u2_u1_1268_inst] (LSTATE_1250 R_S0_1267_wire_constant) (EQ_u2_u1_1268_wire)   $flowthrough 
    $delay EQ_u2_u1_1268_inst 0
    // (LSTATE == S1)
    ==[EQ_u2_u1_1271_inst] (LSTATE_1250 R_S1_1270_wire_constant) (EQ_u2_u1_1271_wire)   $flowthrough 
    $delay EQ_u2_u1_1271_inst 0
    // ((LSTATE == S0) | (LSTATE == S1))
    |[OR_u1_u1_1272_inst] (EQ_u2_u1_1268_wire EQ_u2_u1_1271_wire) (write_to_header_1273)   $flowthrough 
    $delay OR_u1_u1_1272_inst 0
    // 			$guard (write_to_header) nic_rx_to_header := ( $mux (LSTATE == S1) (( $slice RX 72 8 )  && HEADER_TKEEP)  RX )  $buffering 1// bits of buffering = 73. 
    //  file nic.linked.aa, line 528
    // (LSTATE == S1)
    ==[EQ_u2_u1_1278_inst] (LSTATE_1250 R_S1_1277_wire_constant) (EQ_u2_u1_1278_wire) $guard ( write_to_header_1273 )   $flowthrough 
    $delay EQ_u2_u1_1278_inst 0
    // ( $slice RX 72 8 ) 
    [:] [slice_1280_inst] (RX_1254 72 8) (slice_1280_wire) $guard ( write_to_header_1273 )  $flowthrough
    $delay slice_1280_inst 0
    // (( $slice RX 72 8 )  && HEADER_TKEEP)
    &&[CONCAT_u65_u73_1282_inst] (slice_1280_wire R_HEADER_TKEEP_1281_wire_constant) (CONCAT_u65_u73_1282_wire) $guard ( write_to_header_1273 )   $flowthrough 
    $delay CONCAT_u65_u73_1282_inst 0
    // ( $mux (LSTATE == S1) (( $slice RX 72 8 )  && HEADER_TKEEP)  RX ) 
    ? [MUX_1284_inst] (EQ_u2_u1_1278_wire CONCAT_u65_u73_1282_wire RX_1254) (MUX_1284_wire) $guard ( write_to_header_1273 )  $fullrate
    $buffering  $out MUX_1284_inst MUX_1284_wire 1
    // nic_rx_to_header
    $ioport $out [WPIPE_nic_rx_to_header_1275_inst]  (MUX_1284_wire) (nic_rx_to_header) $guard ( write_to_header_1273 )  $fullrate 
    // 			nic_rx_to_packet := RX $buffering 1// bits of buffering = 73. 
    //  file nic.linked.aa, line 529
    // nic_rx_to_packet
    $ioport $out [WPIPE_nic_rx_to_packet_1286_inst]  (RX_1254) (nic_rx_to_packet)  $fullrate 
  }
  // end data-path
  // CP-DP links for do-while  do_while_stmt_1248
  //  file nic.linked.aa, line 517
  phi_stmt_1250 <=> (branch_block_stmt_1247/do_while_stmt_1248/do_while_stmt_1248_loop_body/phi_stmt_1250_loopback_sample_req branch_block_stmt_1247/do_while_stmt_1248/do_while_stmt_1248_loop_body/phi_stmt_1250_entry_sample_req) (branch_block_stmt_1247/do_while_stmt_1248/do_while_stmt_1248_loop_body/phi_stmt_1250_phi_mux_ack)
  nLSTATE_1264_1252_buf <=> (branch_block_stmt_1247/do_while_stmt_1248/do_while_stmt_1248_loop_body/R_nLSTATE_1252_Sample/req branch_block_stmt_1247/do_while_stmt_1248/do_while_stmt_1248_loop_body/R_nLSTATE_1252_Update/req) (branch_block_stmt_1247/do_while_stmt_1248/do_while_stmt_1248_loop_body/R_nLSTATE_1252_Sample/ack branch_block_stmt_1247/do_while_stmt_1248/do_while_stmt_1248_loop_body/R_nLSTATE_1252_Update/ack)
  // mac_to_nic_data
  RPIPE_mac_to_nic_data_1256_inst <=> (branch_block_stmt_1247/do_while_stmt_1248/do_while_stmt_1248_loop_body/RPIPE_mac_to_nic_data_1256_Sample/rr branch_block_stmt_1247/do_while_stmt_1248/do_while_stmt_1248_loop_body/RPIPE_mac_to_nic_data_1256_Update/cr) (branch_block_stmt_1247/do_while_stmt_1248/do_while_stmt_1248_loop_body/RPIPE_mac_to_nic_data_1256_Sample/ra branch_block_stmt_1247/do_while_stmt_1248/do_while_stmt_1248_loop_body/RPIPE_mac_to_nic_data_1256_Update/ca)
  //  $volatile 			$call nextLSTATE (RX LSTATE ) (nLSTATE ) 
  //  file nic.linked.aa, line 526
  // RX
  // LSTATE
  // 			$volatile write_to_header := ((LSTATE == S0) | (LSTATE == S1)) $buffering 1
  //  file nic.linked.aa, line 527
  // ((LSTATE == S0) | (LSTATE == S1))
  // (LSTATE == S0)
  // LSTATE
  // (LSTATE == S1)
  // LSTATE
  // 			$guard (write_to_header) nic_rx_to_header := ( $mux (LSTATE == S1) (( $slice RX 72 8 )  && HEADER_TKEEP)  RX )  $buffering 1// bits of buffering = 73. 
  //  file nic.linked.aa, line 528
  // (LSTATE == S1)
  // LSTATE
  // (( $slice RX 72 8 )  && HEADER_TKEEP)
  // RX
  // RX
  // ( $mux (LSTATE == S1) (( $slice RX 72 8 )  && HEADER_TKEEP)  RX ) 
  MUX_1284_inst <=> (branch_block_stmt_1247/do_while_stmt_1248/do_while_stmt_1248_loop_body/MUX_1284_start/req branch_block_stmt_1247/do_while_stmt_1248/do_while_stmt_1248_loop_body/MUX_1284_complete/req) (branch_block_stmt_1247/do_while_stmt_1248/do_while_stmt_1248_loop_body/MUX_1284_start/ack branch_block_stmt_1247/do_while_stmt_1248/do_while_stmt_1248_loop_body/MUX_1284_complete/ack)
  // nic_rx_to_header
  WPIPE_nic_rx_to_header_1275_inst <=> (branch_block_stmt_1247/do_while_stmt_1248/do_while_stmt_1248_loop_body/WPIPE_nic_rx_to_header_1275_Sample/req branch_block_stmt_1247/do_while_stmt_1248/do_while_stmt_1248_loop_body/WPIPE_nic_rx_to_header_1275_Update/req) (branch_block_stmt_1247/do_while_stmt_1248/do_while_stmt_1248_loop_body/WPIPE_nic_rx_to_header_1275_Sample/ack branch_block_stmt_1247/do_while_stmt_1248/do_while_stmt_1248_loop_body/WPIPE_nic_rx_to_header_1275_Update/ack)
  // 			nic_rx_to_packet := RX $buffering 1// bits of buffering = 73. 
  //  file nic.linked.aa, line 529
  // RX
  // nic_rx_to_packet
  WPIPE_nic_rx_to_packet_1286_inst <=> (branch_block_stmt_1247/do_while_stmt_1248/do_while_stmt_1248_loop_body/WPIPE_nic_rx_to_packet_1286_Sample/req branch_block_stmt_1247/do_while_stmt_1248/do_while_stmt_1248_loop_body/WPIPE_nic_rx_to_packet_1286_Update/req) (branch_block_stmt_1247/do_while_stmt_1248/do_while_stmt_1248_loop_body/WPIPE_nic_rx_to_packet_1286_Sample/ack branch_block_stmt_1247/do_while_stmt_1248/do_while_stmt_1248_loop_body/WPIPE_nic_rx_to_packet_1286_Update/ack)
  do_while_stmt_1248_branch <=> (branch_block_stmt_1247/do_while_stmt_1248/do_while_stmt_1248_loop_body/condition_evaluated) (branch_block_stmt_1247/do_while_stmt_1248/loop_exit/ack branch_block_stmt_1247/do_while_stmt_1248/loop_taken/ack)
}
$module [nicToMacInterface] 
{
  // pipe-declarations for block %nicToMacInterface
  //  file nic.linked.aa, line 534
  // pipe-declarations for block %nicToMacInterface%loop
  //  file nic.linked.aa, line 539
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    <>[branch_block_stmt_1296] // Branch Block  file nic.linked.aa, line 539
    {
      $P [branch_block_stmt_1296__entry__]
      branch_block_stmt_1296__entry__ <-| ($entry)
      $P [branch_block_stmt_1296__exit__]
      branch_block_stmt_1296__exit__ |-> ($exit)
      $P [do_while_stmt_1297__entry__] 
      $P [do_while_stmt_1297__exit__] 
      // do-while-statement  
      //  file nic.linked.aa, line 541
      <o> [do_while_stmt_1297]  $depth 7 $buffering 1 
      {
        $P[do_while_stmt_1297__entry__] 
        $P[do_while_stmt_1297__exit__] 
        $P[loop_back] 
        $P[condition_done] 
        $P[loop_body_done] 
        $pipeline [do_while_stmt_1297_loop_body] 
        {
          // Pipelined!
          $T[back_edge_to_loop_body] 
          $T[first_time_through_loop_body] 
          $T[loop_body_start] 
          $T[condition_evaluated] 
          $transitionmerge [entry_tmerge] (back_edge_to_loop_body first_time_through_loop_body) (loop_body_start)
          $entry <-& (loop_body_start)
          $T[aggregated_phi_sample_req] 
          $T[aggregated_phi_sample_ack] 
          $T[aggregated_phi_update_req] 
          $T[aggregated_phi_update_ack] 
          // do not loop-back unless all phi's have used up their triggering tokens.
          condition_evaluated <-& (aggregated_phi_update_ack)
          aggregated_phi_sample_req o<-& (aggregated_phi_update_ack 0)
          // start:  single source PHI statement phi_stmt_1299
          // 			$phi rdata := 			  nic_to_mac_transmit_pipe $on   $entry ,   $loopback 
          // type of target is $uint<73>
          $T[phi_stmt_1299_sample_start_] 
          $T[phi_stmt_1299_sample_completed_] 
          $T[phi_stmt_1299_update_start_] 
          $T[phi_stmt_1299_update_completed_] 
          aggregated_phi_sample_req <-& (phi_stmt_1299_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_1299_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_1299_update_start_)
          // non-implicit source expression in single-source phi
          // nic_to_mac_transmit_pipe
          $T[RPIPE_nic_to_mac_transmit_pipe_1301_sample_start_] 
          $T[RPIPE_nic_to_mac_transmit_pipe_1301_sample_completed_] 
          $T[RPIPE_nic_to_mac_transmit_pipe_1301_update_start_] 
          $T[RPIPE_nic_to_mac_transmit_pipe_1301_update_completed_] 
          ;;[RPIPE_nic_to_mac_transmit_pipe_1301_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_nic_to_mac_transmit_pipe_1301_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_nic_to_mac_transmit_pipe_1301_sample_start_ &-> (RPIPE_nic_to_mac_transmit_pipe_1301_Sample)
          RPIPE_nic_to_mac_transmit_pipe_1301_sample_completed_ <-& (RPIPE_nic_to_mac_transmit_pipe_1301_Sample)
          RPIPE_nic_to_mac_transmit_pipe_1301_update_start_ <-& (RPIPE_nic_to_mac_transmit_pipe_1301_sample_completed_)
          RPIPE_nic_to_mac_transmit_pipe_1301_update_start_ &-> (RPIPE_nic_to_mac_transmit_pipe_1301_Update)
          RPIPE_nic_to_mac_transmit_pipe_1301_update_completed_ <-& (RPIPE_nic_to_mac_transmit_pipe_1301_Update)
          RPIPE_nic_to_mac_transmit_pipe_1301_sample_start_ o<-& (RPIPE_nic_to_mac_transmit_pipe_1301_update_completed_ 0)
          // RAW reenables for nic_to_mac_transmit_pipe
          // producer  and  consumer are both determined by PHI statements.
          aggregated_phi_sample_req &-> (RPIPE_nic_to_mac_transmit_pipe_1301_sample_start_)
          aggregated_phi_sample_ack <-& (RPIPE_nic_to_mac_transmit_pipe_1301_sample_completed_)
          aggregated_phi_update_req &-> (RPIPE_nic_to_mac_transmit_pipe_1301_update_start_)
          phi_stmt_1299_update_completed_ <-& (RPIPE_nic_to_mac_transmit_pipe_1301_update_completed_)
          aggregated_phi_update_ack <-& (phi_stmt_1299_update_completed_)
          // done: PHI Statement phi_stmt_1299
          // start:  			nic_to_mac_data0 := ( $slice rdata 63 0 )  $buffering 1// bits of buffering = 64.  Orphaned statement with target nic_to_mac_data0 ?? 
          //  file nic.linked.aa, line 547
          // Source expression
          // ( $slice rdata 63 0 ) 
          $T[slice_1305_sample_start_] 
          $T[slice_1305_sample_completed_] 
          $T[slice_1305_update_start_] 
          $T[slice_1305_update_completed_] 
          // rdata
          // start: Forward dependencies from rdata to transition slice_1305_sample_start_
          slice_1305_sample_start_ <-& (phi_stmt_1299_update_completed_)
          // done: Forward dependencies from rdata to transition slice_1305_sample_start_
          ;;[slice_1305_Sample] 
          {
            // unary expression 
            $T [rr] $T [ra] // (split) unary operation
          }
          ;;[slice_1305_Update] 
          {
            // unary expression 
            $T [cr] $T [ca] //(split) unary operation
          }
          slice_1305_sample_start_ &-> (slice_1305_Sample)
          slice_1305_sample_completed_ <-& (slice_1305_Sample)
          slice_1305_sample_completed_ &-> ($null)
          slice_1305_update_start_ &-> (slice_1305_Update)
          slice_1305_update_completed_ <-& (slice_1305_Update)
          // RAW reenables for rdata
          phi_stmt_1299_update_start_ o<-& (slice_1305_sample_completed_ 0)
          // self-release: 
          slice_1305_sample_start_ o<-& (slice_1305_sample_completed_ 1)
          $null &-> (slice_1305_update_start_)
          slice_1305_update_start_ o<-& (slice_1305_update_completed_ 0)
          // Target expression
          // (as target) nic_to_mac_data0
          // start: WAR dependencies for nic_to_mac_data0
          // done: WAR dependencies for nic_to_mac_data0
          // end:  			nic_to_mac_data0 := ( $slice rdata 63 0 )  $buffering 1// bits of buffering = 64.  Orphaned statement with target nic_to_mac_data0 ?? 
          // start:  			nic_to_mac_data1 := ($bitcast ($uint<16>) ( $slice rdata 8 0 )  ) $buffering 1// bits of buffering = 16.  Orphaned statement with target nic_to_mac_data1 ?? 
          //  file nic.linked.aa, line 548
          // Source expression
          // ($bitcast ($uint<16>) ( $slice rdata 8 0 )  )
          $T[type_cast_1310_sample_start_] 
          $T[type_cast_1310_sample_completed_] 
          $T[type_cast_1310_update_start_] 
          $T[type_cast_1310_update_completed_] 
          // ( $slice rdata 8 0 ) 
          // rdata
          // start: Forward dependencies from ( $slice rdata 8 0 )  to transition type_cast_1310_sample_start_
          type_cast_1310_sample_start_ <-& (phi_stmt_1299_update_completed_)
          // done: Forward dependencies from ( $slice rdata 8 0 )  to transition type_cast_1310_sample_start_
          ;;[type_cast_1310_Sample] 
          {
            // unary expression 
            $T [rr] $T [ra] // (split) unary operation
          }
          ;;[type_cast_1310_Update] 
          {
            // unary expression 
            $T [cr] $T [ca] //(split) unary operation
          }
          type_cast_1310_sample_start_ &-> (type_cast_1310_Sample)
          type_cast_1310_sample_completed_ <-& (type_cast_1310_Sample)
          type_cast_1310_sample_completed_ &-> ($null)
          type_cast_1310_update_start_ &-> (type_cast_1310_Update)
          type_cast_1310_update_completed_ <-& (type_cast_1310_Update)
          // RAW reenables for ( $slice rdata 8 0 ) 
          phi_stmt_1299_update_start_ o<-& (type_cast_1310_sample_completed_ 0)
          // self-release: 
          type_cast_1310_sample_start_ o<-& (type_cast_1310_sample_completed_ 1)
          $null &-> (type_cast_1310_update_start_)
          type_cast_1310_update_start_ o<-& (type_cast_1310_update_completed_ 0)
          // Target expression
          // (as target) nic_to_mac_data1
          // start: WAR dependencies for nic_to_mac_data1
          // done: WAR dependencies for nic_to_mac_data1
          // end:  			nic_to_mac_data1 := ($bitcast ($uint<16>) ( $slice rdata 8 0 )  ) $buffering 1// bits of buffering = 16.  Orphaned statement with target nic_to_mac_data1 ?? 
          $T [loop_body_delay_to_condition_start] $delay
          loop_body_start &-> (loop_body_delay_to_condition_start)
          loop_body_delay_to_condition_start &-> (condition_evaluated)
          condition_evaluated &-> ($null)
          // load-store dependencies..
          // pipe read/write dependencies for pipe nic_to_mac_transmit_pipe
          // read-dependencies for pipe nic_to_mac_transmit_pipe
          // write-dependencies for pipe nic_to_mac_transmit_pipe
          // signal write dependencies for nic_to_mac_transmit_pipe
        }
        ( first_time_through_loop_body  back_edge_to_loop_body) 
        ( condition_evaluated )
        ;; [loop_exit] 
        {
          $T [ack] 
        }
        ;; [loop_taken] 
        {
          $T [ack] 
        }
        do_while_stmt_1297__entry__ <-| ($entry)
        loop_body_done <-| ( do_while_stmt_1297_loop_body ) 
        condition_done |-> (loop_exit loop_taken)
        do_while_stmt_1297__exit__ |-> ($exit)
        $bind condition_done <= do_while_stmt_1297_loop_body : condition_evaluated
        $bind do_while_stmt_1297__entry__  => do_while_stmt_1297_loop_body : first_time_through_loop_body 
        $bind loop_back  => do_while_stmt_1297_loop_body : back_edge_to_loop_body 
        $terminate (loop_exit loop_taken loop_body_done) (loop_back do_while_stmt_1297__exit__)
      }
      do_while_stmt_1297__entry__ |-> (do_while_stmt_1297)
      do_while_stmt_1297__exit__ <-| (do_while_stmt_1297)
      do_while_stmt_1297__entry__ <-| (branch_block_stmt_1296__entry__)
      do_while_stmt_1297__exit__ |-> (branch_block_stmt_1296__exit__)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %nicToMacInterface%loop%
    //  file nic.linked.aa, line 543
    // constant-object-declarations for block %nicToMacInterface%loop
    //  file nic.linked.aa, line 539
    // constant-object-declarations for block %nicToMacInterface
    //  file nic.linked.aa, line 534
    // constant-declarations for block %nicToMacInterface%loop
    //  file nic.linked.aa, line 539
    // do-while statement  
    //  file nic.linked.aa, line 541
    // 1 
    $constant $W[konst_1313_wire_constant] : $int<1> := _b1// 1
    // constant-declarations for block %nicToMacInterface%loop%
    //  file nic.linked.aa, line 543
    // constant-declarations for phi:  			$phi rdata := 			  nic_to_mac_transmit_pipe $on   $entry ,   $loopback 
    // type of target is $uint<73>
    //  file nic.linked.aa, line 544
    // block %nicToMacInterface%loop
    //  file nic.linked.aa, line 539
    // do-while statement  
    //  file nic.linked.aa, line 541
    // merge-statement  
    //  file nic.linked.aa, line 543
    // 			$phi rdata := 			  nic_to_mac_transmit_pipe $on   $entry ,   $loopback 
    // type of target is $uint<73>
    //  file nic.linked.aa, line 544
    // nic_to_mac_transmit_pipe
    $W[RPIPE_nic_to_mac_transmit_pipe_1301_wire] : $int<73>
    // rdata
    $W[rdata_1299] : $int<73>
    // 			nic_to_mac_data0 := ( $slice rdata 63 0 )  $buffering 1// bits of buffering = 64.  Orphaned statement with target nic_to_mac_data0 ?? 
    //  file nic.linked.aa, line 547
    // nic_to_mac_data0
    $W[nic_to_mac_data0_1306] : $int<64>
    // 			nic_to_mac_data1 := ($bitcast ($uint<16>) ( $slice rdata 8 0 )  ) $buffering 1// bits of buffering = 16.  Orphaned statement with target nic_to_mac_data1 ?? 
    //  file nic.linked.aa, line 548
    // ( $slice rdata 8 0 ) 
    $intermediate $W[slice_1309_wire] : $int<9>
    // nic_to_mac_data1
    $W[nic_to_mac_data1_1311] : $int<16>
    // datapath-instances for block %nicToMacInterface%loop
    //  file nic.linked.aa, line 539
    // datapath-instances for do-while  
    //  file nic.linked.aa, line 541
    ==0? [do_while_stmt_1297_branch] (konst_1313_wire_constant)
    $flowthrough
    // data-path instances for merge  
    //  file nic.linked.aa, line 543
    // 			$phi rdata := 			  nic_to_mac_transmit_pipe $on   $entry ,   $loopback 
    // type of target is $uint<73>
    //  file nic.linked.aa, line 544
    // nic_to_mac_transmit_pipe
    $ioport $in [RPIPE_nic_to_mac_transmit_pipe_1301_inst] (nic_to_mac_transmit_pipe) (RPIPE_nic_to_mac_transmit_pipe_1301_wire)  $fullrate 
    $buffering $out RPIPE_nic_to_mac_transmit_pipe_1301_inst RPIPE_nic_to_mac_transmit_pipe_1301_wire 1
    # := [ssrc_phi_stmt_1299] (RPIPE_nic_to_mac_transmit_pipe_1301_wire) (rdata_1299)    $flowthrough 
    // 			nic_to_mac_data0 := ( $slice rdata 63 0 )  $buffering 1// bits of buffering = 64.  Orphaned statement with target nic_to_mac_data0 ?? 
    //  file nic.linked.aa, line 547
    // ( $slice rdata 63 0 ) 
    [:] [slice_1305_inst] (rdata_1299 63 0) (nic_to_mac_data0_1306)  $fullrate
    $buffering  $out slice_1305_inst nic_to_mac_data0_1306 1
    $delay slice_1305_inst 1
    // 			nic_to_mac_data1 := ($bitcast ($uint<16>) ( $slice rdata 8 0 )  ) $buffering 1// bits of buffering = 16.  Orphaned statement with target nic_to_mac_data1 ?? 
    //  file nic.linked.aa, line 548
    // ( $slice rdata 8 0 ) 
    [:] [slice_1309_inst] (rdata_1299 8 0) (slice_1309_wire)  $flowthrough
    $delay slice_1309_inst 0
    // ($bitcast ($uint<16>) ( $slice rdata 8 0 )  )
    # := [type_cast_1310_inst] (slice_1309_wire) (nic_to_mac_data1_1311)     $fullrate
    $buffering  $out type_cast_1310_inst nic_to_mac_data1_1311 1
    $delay type_cast_1310_inst 1
  }
  // end data-path
  // CP-DP links for do-while  do_while_stmt_1297
  //  file nic.linked.aa, line 541
  // nic_to_mac_transmit_pipe
  RPIPE_nic_to_mac_transmit_pipe_1301_inst <=> (branch_block_stmt_1296/do_while_stmt_1297/do_while_stmt_1297_loop_body/RPIPE_nic_to_mac_transmit_pipe_1301_Sample/rr branch_block_stmt_1296/do_while_stmt_1297/do_while_stmt_1297_loop_body/RPIPE_nic_to_mac_transmit_pipe_1301_Update/cr) (branch_block_stmt_1296/do_while_stmt_1297/do_while_stmt_1297_loop_body/RPIPE_nic_to_mac_transmit_pipe_1301_Sample/ra branch_block_stmt_1296/do_while_stmt_1297/do_while_stmt_1297_loop_body/RPIPE_nic_to_mac_transmit_pipe_1301_Update/ca)
  // 			nic_to_mac_data0 := ( $slice rdata 63 0 )  $buffering 1// bits of buffering = 64.  Orphaned statement with target nic_to_mac_data0 ?? 
  //  file nic.linked.aa, line 547
  // rdata
  // ( $slice rdata 63 0 ) 
  slice_1305_inst <=> (branch_block_stmt_1296/do_while_stmt_1297/do_while_stmt_1297_loop_body/slice_1305_Sample/rr branch_block_stmt_1296/do_while_stmt_1297/do_while_stmt_1297_loop_body/slice_1305_Update/cr) (branch_block_stmt_1296/do_while_stmt_1297/do_while_stmt_1297_loop_body/slice_1305_Sample/ra branch_block_stmt_1296/do_while_stmt_1297/do_while_stmt_1297_loop_body/slice_1305_Update/ca)
  // 			nic_to_mac_data1 := ($bitcast ($uint<16>) ( $slice rdata 8 0 )  ) $buffering 1// bits of buffering = 16.  Orphaned statement with target nic_to_mac_data1 ?? 
  //  file nic.linked.aa, line 548
  // rdata
  // ($bitcast ($uint<16>) ( $slice rdata 8 0 )  )
  type_cast_1310_inst <=> (branch_block_stmt_1296/do_while_stmt_1297/do_while_stmt_1297_loop_body/type_cast_1310_Sample/rr branch_block_stmt_1296/do_while_stmt_1297/do_while_stmt_1297_loop_body/type_cast_1310_Update/cr) (branch_block_stmt_1296/do_while_stmt_1297/do_while_stmt_1297_loop_body/type_cast_1310_Sample/ra branch_block_stmt_1296/do_while_stmt_1297/do_while_stmt_1297_loop_body/type_cast_1310_Update/ca)
  do_while_stmt_1297_branch <=> (branch_block_stmt_1296/do_while_stmt_1297/do_while_stmt_1297_loop_body/condition_evaluated) (branch_block_stmt_1296/do_while_stmt_1297/loop_exit/ack branch_block_stmt_1296/do_while_stmt_1297/loop_taken/ack)
}
$module [nicToMemoryInterface] 
{
  // pipe-declarations for block %nicToMemoryInterface
  //  file nic.linked.aa, line 552
  // pipe-declarations for block %nicToMemoryInterface%loop
  //  file nic.linked.aa, line 557
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    <>[branch_block_stmt_1317] // Branch Block  file nic.linked.aa, line 557
    {
      $P [branch_block_stmt_1317__entry__]
      branch_block_stmt_1317__entry__ <-| ($entry)
      $P [branch_block_stmt_1317__exit__]
      branch_block_stmt_1317__exit__ |-> ($exit)
      $P [do_while_stmt_1318__entry__] 
      $P [do_while_stmt_1318__exit__] 
      // do-while-statement  
      //  file nic.linked.aa, line 559
      <o> [do_while_stmt_1318]  $depth 7 $buffering 1 
      {
        $P[do_while_stmt_1318__entry__] 
        $P[do_while_stmt_1318__exit__] 
        $P[loop_back] 
        $P[condition_done] 
        $P[loop_body_done] 
        $pipeline [do_while_stmt_1318_loop_body] 
        {
          // Pipelined!
          $T[back_edge_to_loop_body] 
          $T[first_time_through_loop_body] 
          $T[loop_body_start] 
          $T[condition_evaluated] 
          $transitionmerge [entry_tmerge] (back_edge_to_loop_body first_time_through_loop_body) (loop_body_start)
          $entry <-& (loop_body_start)
          $T[aggregated_phi_sample_req] 
          $T[aggregated_phi_sample_ack] 
          $T[aggregated_phi_update_req] 
          $T[aggregated_phi_update_ack] 
          // do not loop-back unless all phi's have used up their triggering tokens.
          condition_evaluated <-& (aggregated_phi_update_ack)
          aggregated_phi_sample_req o<-& (aggregated_phi_update_ack 0)
          // start:  single source PHI statement phi_stmt_1320
          // 			$phi rdata := 			  NIC_TO_MEMORY_REQUEST $on   $entry ,   $loopback 
          // type of target is $uint<110>
          $T[phi_stmt_1320_sample_start_] 
          $T[phi_stmt_1320_sample_completed_] 
          $T[phi_stmt_1320_update_start_] 
          $T[phi_stmt_1320_update_completed_] 
          aggregated_phi_sample_req <-& (phi_stmt_1320_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_1320_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_1320_update_start_)
          // non-implicit source expression in single-source phi
          // NIC_TO_MEMORY_REQUEST
          $T[RPIPE_NIC_TO_MEMORY_REQUEST_1322_sample_start_] 
          $T[RPIPE_NIC_TO_MEMORY_REQUEST_1322_sample_completed_] 
          $T[RPIPE_NIC_TO_MEMORY_REQUEST_1322_update_start_] 
          $T[RPIPE_NIC_TO_MEMORY_REQUEST_1322_update_completed_] 
          ;;[RPIPE_NIC_TO_MEMORY_REQUEST_1322_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_NIC_TO_MEMORY_REQUEST_1322_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_NIC_TO_MEMORY_REQUEST_1322_sample_start_ &-> (RPIPE_NIC_TO_MEMORY_REQUEST_1322_Sample)
          RPIPE_NIC_TO_MEMORY_REQUEST_1322_sample_completed_ <-& (RPIPE_NIC_TO_MEMORY_REQUEST_1322_Sample)
          RPIPE_NIC_TO_MEMORY_REQUEST_1322_update_start_ <-& (RPIPE_NIC_TO_MEMORY_REQUEST_1322_sample_completed_)
          RPIPE_NIC_TO_MEMORY_REQUEST_1322_update_start_ &-> (RPIPE_NIC_TO_MEMORY_REQUEST_1322_Update)
          RPIPE_NIC_TO_MEMORY_REQUEST_1322_update_completed_ <-& (RPIPE_NIC_TO_MEMORY_REQUEST_1322_Update)
          RPIPE_NIC_TO_MEMORY_REQUEST_1322_sample_start_ o<-& (RPIPE_NIC_TO_MEMORY_REQUEST_1322_update_completed_ 0)
          // RAW reenables for NIC_TO_MEMORY_REQUEST
          // producer  and  consumer are both determined by PHI statements.
          aggregated_phi_sample_req &-> (RPIPE_NIC_TO_MEMORY_REQUEST_1322_sample_start_)
          aggregated_phi_sample_ack <-& (RPIPE_NIC_TO_MEMORY_REQUEST_1322_sample_completed_)
          aggregated_phi_update_req &-> (RPIPE_NIC_TO_MEMORY_REQUEST_1322_update_start_)
          phi_stmt_1320_update_completed_ <-& (RPIPE_NIC_TO_MEMORY_REQUEST_1322_update_completed_)
          aggregated_phi_update_ack <-& (phi_stmt_1320_update_completed_)
          // done: PHI Statement phi_stmt_1320
          // start:  			mem_req0_pipe0 := ( $slice rdata 63 0 )  $buffering 1// bits of buffering = 64. 
          //  file nic.linked.aa, line 565
          // Source expression
          // ( $slice rdata 63 0 ) 
          $T[slice_1326_sample_start_] 
          $T[slice_1326_sample_completed_] 
          $T[slice_1326_update_start_] 
          $T[slice_1326_update_completed_] 
          // rdata
          // start: Forward dependencies from rdata to transition slice_1326_sample_start_
          slice_1326_sample_start_ <-& (phi_stmt_1320_update_completed_)
          // done: Forward dependencies from rdata to transition slice_1326_sample_start_
          ;;[slice_1326_Sample] 
          {
            // unary expression 
            $T [rr] $T [ra] // (split) unary operation
          }
          ;;[slice_1326_Update] 
          {
            // unary expression 
            $T [cr] $T [ca] //(split) unary operation
          }
          slice_1326_sample_start_ &-> (slice_1326_Sample)
          slice_1326_sample_completed_ <-& (slice_1326_Sample)
          slice_1326_sample_completed_ &-> ($null)
          slice_1326_update_start_ &-> (slice_1326_Update)
          slice_1326_update_completed_ <-& (slice_1326_Update)
          // RAW reenables for rdata
          phi_stmt_1320_update_start_ o<-& (slice_1326_sample_completed_ 0)
          // self-release: 
          slice_1326_sample_start_ o<-& (slice_1326_sample_completed_ 1)
          $null &-> (slice_1326_update_start_)
          slice_1326_update_start_ o<-& (slice_1326_update_completed_ 0)
          // Target expression
          // (as target) mem_req0_pipe0
          $T[WPIPE_mem_req0_pipe0_1324_sample_start_] 
          $T[WPIPE_mem_req0_pipe0_1324_sample_completed_] 
          $T[WPIPE_mem_req0_pipe0_1324_update_start_] 
          $T[WPIPE_mem_req0_pipe0_1324_update_completed_] 
          ;;[WPIPE_mem_req0_pipe0_1324_Sample] 
          {
            // pipe write sample-start mem_req0_pipe0
            $T [req] $T [ack] 
          }
          ;;[WPIPE_mem_req0_pipe0_1324_Update] 
          {
            // pipe write update (complete) mem_req0_pipe0
            $T [req] $T [ack] 
          }
          WPIPE_mem_req0_pipe0_1324_sample_start_ &-> (WPIPE_mem_req0_pipe0_1324_Sample)
          WPIPE_mem_req0_pipe0_1324_sample_completed_ <-& (WPIPE_mem_req0_pipe0_1324_Sample)
          WPIPE_mem_req0_pipe0_1324_update_start_ <-& (WPIPE_mem_req0_pipe0_1324_sample_completed_)
          WPIPE_mem_req0_pipe0_1324_update_start_ &-> (WPIPE_mem_req0_pipe0_1324_Update)
          WPIPE_mem_req0_pipe0_1324_update_completed_ <-& (WPIPE_mem_req0_pipe0_1324_Update)
          WPIPE_mem_req0_pipe0_1324_sample_start_ o<-& (WPIPE_mem_req0_pipe0_1324_update_completed_ 0)
          // start: Forward dependencies from ( $slice rdata 63 0 )  to transition WPIPE_mem_req0_pipe0_1324_sample_start_
          WPIPE_mem_req0_pipe0_1324_sample_start_ <-& (slice_1326_update_completed_)
          // done: Forward dependencies from ( $slice rdata 63 0 )  to transition WPIPE_mem_req0_pipe0_1324_sample_start_
          // RAW reenables for ( $slice rdata 63 0 ) 
          slice_1326_update_start_ o<-& (WPIPE_mem_req0_pipe0_1324_sample_completed_ 0)
          // end:  			mem_req0_pipe0 := ( $slice rdata 63 0 )  $buffering 1// bits of buffering = 64. 
          // start:  			mem_req0_pipe1 := ($bitcast ($uint<64>) ( $slice rdata 45 0 )  ) $buffering 1// bits of buffering = 64. 
          //  file nic.linked.aa, line 566
          // Source expression
          // ($bitcast ($uint<64>) ( $slice rdata 45 0 )  )
          $T[type_cast_1332_sample_start_] 
          $T[type_cast_1332_sample_completed_] 
          $T[type_cast_1332_update_start_] 
          $T[type_cast_1332_update_completed_] 
          // ( $slice rdata 45 0 ) 
          // rdata
          // start: Forward dependencies from ( $slice rdata 45 0 )  to transition type_cast_1332_sample_start_
          type_cast_1332_sample_start_ <-& (phi_stmt_1320_update_completed_)
          // done: Forward dependencies from ( $slice rdata 45 0 )  to transition type_cast_1332_sample_start_
          ;;[type_cast_1332_Sample] 
          {
            // unary expression 
            $T [rr] $T [ra] // (split) unary operation
          }
          ;;[type_cast_1332_Update] 
          {
            // unary expression 
            $T [cr] $T [ca] //(split) unary operation
          }
          type_cast_1332_sample_start_ &-> (type_cast_1332_Sample)
          type_cast_1332_sample_completed_ <-& (type_cast_1332_Sample)
          type_cast_1332_sample_completed_ &-> ($null)
          type_cast_1332_update_start_ &-> (type_cast_1332_Update)
          type_cast_1332_update_completed_ <-& (type_cast_1332_Update)
          // RAW reenables for ( $slice rdata 45 0 ) 
          phi_stmt_1320_update_start_ o<-& (type_cast_1332_sample_completed_ 0)
          // self-release: 
          type_cast_1332_sample_start_ o<-& (type_cast_1332_sample_completed_ 1)
          $null &-> (type_cast_1332_update_start_)
          type_cast_1332_update_start_ o<-& (type_cast_1332_update_completed_ 0)
          // Target expression
          // (as target) mem_req0_pipe1
          $T[WPIPE_mem_req0_pipe1_1328_sample_start_] 
          $T[WPIPE_mem_req0_pipe1_1328_sample_completed_] 
          $T[WPIPE_mem_req0_pipe1_1328_update_start_] 
          $T[WPIPE_mem_req0_pipe1_1328_update_completed_] 
          ;;[WPIPE_mem_req0_pipe1_1328_Sample] 
          {
            // pipe write sample-start mem_req0_pipe1
            $T [req] $T [ack] 
          }
          ;;[WPIPE_mem_req0_pipe1_1328_Update] 
          {
            // pipe write update (complete) mem_req0_pipe1
            $T [req] $T [ack] 
          }
          WPIPE_mem_req0_pipe1_1328_sample_start_ &-> (WPIPE_mem_req0_pipe1_1328_Sample)
          WPIPE_mem_req0_pipe1_1328_sample_completed_ <-& (WPIPE_mem_req0_pipe1_1328_Sample)
          WPIPE_mem_req0_pipe1_1328_update_start_ <-& (WPIPE_mem_req0_pipe1_1328_sample_completed_)
          WPIPE_mem_req0_pipe1_1328_update_start_ &-> (WPIPE_mem_req0_pipe1_1328_Update)
          WPIPE_mem_req0_pipe1_1328_update_completed_ <-& (WPIPE_mem_req0_pipe1_1328_Update)
          WPIPE_mem_req0_pipe1_1328_sample_start_ o<-& (WPIPE_mem_req0_pipe1_1328_update_completed_ 0)
          // start: Forward dependencies from ($bitcast ($uint<64>) ( $slice rdata 45 0 )  ) to transition WPIPE_mem_req0_pipe1_1328_sample_start_
          WPIPE_mem_req0_pipe1_1328_sample_start_ <-& (type_cast_1332_update_completed_)
          // done: Forward dependencies from ($bitcast ($uint<64>) ( $slice rdata 45 0 )  ) to transition WPIPE_mem_req0_pipe1_1328_sample_start_
          // RAW reenables for ($bitcast ($uint<64>) ( $slice rdata 45 0 )  )
          type_cast_1332_update_start_ o<-& (WPIPE_mem_req0_pipe1_1328_sample_completed_ 0)
          // end:  			mem_req0_pipe1 := ($bitcast ($uint<64>) ( $slice rdata 45 0 )  ) $buffering 1// bits of buffering = 64. 
          $T [loop_body_delay_to_condition_start] $delay
          loop_body_start &-> (loop_body_delay_to_condition_start)
          loop_body_delay_to_condition_start &-> (condition_evaluated)
          condition_evaluated &-> ($null)
          // load-store dependencies..
          // pipe read/write dependencies for pipe NIC_TO_MEMORY_REQUEST
          // read-dependencies for pipe NIC_TO_MEMORY_REQUEST
          // write-dependencies for pipe NIC_TO_MEMORY_REQUEST
          // signal write dependencies for NIC_TO_MEMORY_REQUEST
          // pipe read/write dependencies for pipe mem_req0_pipe0
          // read-dependencies for pipe mem_req0_pipe0
          // write-dependencies for pipe mem_req0_pipe0
          // signal write dependencies for mem_req0_pipe0
          // pipe read/write dependencies for pipe mem_req0_pipe1
          // read-dependencies for pipe mem_req0_pipe1
          // write-dependencies for pipe mem_req0_pipe1
          // signal write dependencies for mem_req0_pipe1
        }
        ( first_time_through_loop_body  back_edge_to_loop_body) 
        ( condition_evaluated )
        ;; [loop_exit] 
        {
          $T [ack] 
        }
        ;; [loop_taken] 
        {
          $T [ack] 
        }
        do_while_stmt_1318__entry__ <-| ($entry)
        loop_body_done <-| ( do_while_stmt_1318_loop_body ) 
        condition_done |-> (loop_exit loop_taken)
        do_while_stmt_1318__exit__ |-> ($exit)
        $bind condition_done <= do_while_stmt_1318_loop_body : condition_evaluated
        $bind do_while_stmt_1318__entry__  => do_while_stmt_1318_loop_body : first_time_through_loop_body 
        $bind loop_back  => do_while_stmt_1318_loop_body : back_edge_to_loop_body 
        $terminate (loop_exit loop_taken loop_body_done) (loop_back do_while_stmt_1318__exit__)
      }
      do_while_stmt_1318__entry__ |-> (do_while_stmt_1318)
      do_while_stmt_1318__exit__ <-| (do_while_stmt_1318)
      do_while_stmt_1318__entry__ <-| (branch_block_stmt_1317__entry__)
      do_while_stmt_1318__exit__ |-> (branch_block_stmt_1317__exit__)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %nicToMemoryInterface%loop%
    //  file nic.linked.aa, line 561
    // constant-object-declarations for block %nicToMemoryInterface%loop
    //  file nic.linked.aa, line 557
    // constant-object-declarations for block %nicToMemoryInterface
    //  file nic.linked.aa, line 552
    // constant-declarations for block %nicToMemoryInterface%loop
    //  file nic.linked.aa, line 557
    // do-while statement  
    //  file nic.linked.aa, line 559
    // 1 
    $constant $W[konst_1335_wire_constant] : $int<1> := _b1// 1
    // constant-declarations for block %nicToMemoryInterface%loop%
    //  file nic.linked.aa, line 561
    // constant-declarations for phi:  			$phi rdata := 			  NIC_TO_MEMORY_REQUEST $on   $entry ,   $loopback 
    // type of target is $uint<110>
    //  file nic.linked.aa, line 562
    // block %nicToMemoryInterface%loop
    //  file nic.linked.aa, line 557
    // do-while statement  
    //  file nic.linked.aa, line 559
    // merge-statement  
    //  file nic.linked.aa, line 561
    // 			$phi rdata := 			  NIC_TO_MEMORY_REQUEST $on   $entry ,   $loopback 
    // type of target is $uint<110>
    //  file nic.linked.aa, line 562
    // NIC_TO_MEMORY_REQUEST
    $W[RPIPE_NIC_TO_MEMORY_REQUEST_1322_wire] : $int<110>
    // rdata
    $W[rdata_1320] : $int<110>
    // 			mem_req0_pipe0 := ( $slice rdata 63 0 )  $buffering 1// bits of buffering = 64. 
    //  file nic.linked.aa, line 565
    // ( $slice rdata 63 0 ) 
    $intermediate $W[slice_1326_wire] : $int<64>
    // mem_req0_pipe0
    // 			mem_req0_pipe1 := ($bitcast ($uint<64>) ( $slice rdata 45 0 )  ) $buffering 1// bits of buffering = 64. 
    //  file nic.linked.aa, line 566
    // ( $slice rdata 45 0 ) 
    $intermediate $W[slice_1331_wire] : $int<46>
    // ($bitcast ($uint<64>) ( $slice rdata 45 0 )  )
    $intermediate $W[type_cast_1332_wire] : $int<64>
    // mem_req0_pipe1
    // datapath-instances for block %nicToMemoryInterface%loop
    //  file nic.linked.aa, line 557
    // datapath-instances for do-while  
    //  file nic.linked.aa, line 559
    ==0? [do_while_stmt_1318_branch] (konst_1335_wire_constant)
    $flowthrough
    // data-path instances for merge  
    //  file nic.linked.aa, line 561
    // 			$phi rdata := 			  NIC_TO_MEMORY_REQUEST $on   $entry ,   $loopback 
    // type of target is $uint<110>
    //  file nic.linked.aa, line 562
    // NIC_TO_MEMORY_REQUEST
    $ioport $in [RPIPE_NIC_TO_MEMORY_REQUEST_1322_inst] (NIC_TO_MEMORY_REQUEST) (RPIPE_NIC_TO_MEMORY_REQUEST_1322_wire)  $fullrate 
    $buffering $out RPIPE_NIC_TO_MEMORY_REQUEST_1322_inst RPIPE_NIC_TO_MEMORY_REQUEST_1322_wire 1
    # := [ssrc_phi_stmt_1320] (RPIPE_NIC_TO_MEMORY_REQUEST_1322_wire) (rdata_1320)    $flowthrough 
    // 			mem_req0_pipe0 := ( $slice rdata 63 0 )  $buffering 1// bits of buffering = 64. 
    //  file nic.linked.aa, line 565
    // ( $slice rdata 63 0 ) 
    [:] [slice_1326_inst] (rdata_1320 63 0) (slice_1326_wire)  $fullrate
    $buffering  $out slice_1326_inst slice_1326_wire 1
    $delay slice_1326_inst 1
    // mem_req0_pipe0
    $ioport $out [WPIPE_mem_req0_pipe0_1324_inst]  (slice_1326_wire) (mem_req0_pipe0)  $fullrate 
    // 			mem_req0_pipe1 := ($bitcast ($uint<64>) ( $slice rdata 45 0 )  ) $buffering 1// bits of buffering = 64. 
    //  file nic.linked.aa, line 566
    // ( $slice rdata 45 0 ) 
    [:] [slice_1331_inst] (rdata_1320 45 0) (slice_1331_wire)  $flowthrough
    $delay slice_1331_inst 0
    // ($bitcast ($uint<64>) ( $slice rdata 45 0 )  )
    # := [type_cast_1332_inst] (slice_1331_wire) (type_cast_1332_wire)     $fullrate
    $buffering  $out type_cast_1332_inst type_cast_1332_wire 1
    $delay type_cast_1332_inst 1
    // mem_req0_pipe1
    $ioport $out [WPIPE_mem_req0_pipe1_1328_inst]  (type_cast_1332_wire) (mem_req0_pipe1)  $fullrate 
  }
  // end data-path
  // CP-DP links for do-while  do_while_stmt_1318
  //  file nic.linked.aa, line 559
  // NIC_TO_MEMORY_REQUEST
  RPIPE_NIC_TO_MEMORY_REQUEST_1322_inst <=> (branch_block_stmt_1317/do_while_stmt_1318/do_while_stmt_1318_loop_body/RPIPE_NIC_TO_MEMORY_REQUEST_1322_Sample/rr branch_block_stmt_1317/do_while_stmt_1318/do_while_stmt_1318_loop_body/RPIPE_NIC_TO_MEMORY_REQUEST_1322_Update/cr) (branch_block_stmt_1317/do_while_stmt_1318/do_while_stmt_1318_loop_body/RPIPE_NIC_TO_MEMORY_REQUEST_1322_Sample/ra branch_block_stmt_1317/do_while_stmt_1318/do_while_stmt_1318_loop_body/RPIPE_NIC_TO_MEMORY_REQUEST_1322_Update/ca)
  // 			mem_req0_pipe0 := ( $slice rdata 63 0 )  $buffering 1// bits of buffering = 64. 
  //  file nic.linked.aa, line 565
  // rdata
  // ( $slice rdata 63 0 ) 
  slice_1326_inst <=> (branch_block_stmt_1317/do_while_stmt_1318/do_while_stmt_1318_loop_body/slice_1326_Sample/rr branch_block_stmt_1317/do_while_stmt_1318/do_while_stmt_1318_loop_body/slice_1326_Update/cr) (branch_block_stmt_1317/do_while_stmt_1318/do_while_stmt_1318_loop_body/slice_1326_Sample/ra branch_block_stmt_1317/do_while_stmt_1318/do_while_stmt_1318_loop_body/slice_1326_Update/ca)
  // mem_req0_pipe0
  WPIPE_mem_req0_pipe0_1324_inst <=> (branch_block_stmt_1317/do_while_stmt_1318/do_while_stmt_1318_loop_body/WPIPE_mem_req0_pipe0_1324_Sample/req branch_block_stmt_1317/do_while_stmt_1318/do_while_stmt_1318_loop_body/WPIPE_mem_req0_pipe0_1324_Update/req) (branch_block_stmt_1317/do_while_stmt_1318/do_while_stmt_1318_loop_body/WPIPE_mem_req0_pipe0_1324_Sample/ack branch_block_stmt_1317/do_while_stmt_1318/do_while_stmt_1318_loop_body/WPIPE_mem_req0_pipe0_1324_Update/ack)
  // 			mem_req0_pipe1 := ($bitcast ($uint<64>) ( $slice rdata 45 0 )  ) $buffering 1// bits of buffering = 64. 
  //  file nic.linked.aa, line 566
  // rdata
  // ($bitcast ($uint<64>) ( $slice rdata 45 0 )  )
  type_cast_1332_inst <=> (branch_block_stmt_1317/do_while_stmt_1318/do_while_stmt_1318_loop_body/type_cast_1332_Sample/rr branch_block_stmt_1317/do_while_stmt_1318/do_while_stmt_1318_loop_body/type_cast_1332_Update/cr) (branch_block_stmt_1317/do_while_stmt_1318/do_while_stmt_1318_loop_body/type_cast_1332_Sample/ra branch_block_stmt_1317/do_while_stmt_1318/do_while_stmt_1318_loop_body/type_cast_1332_Update/ca)
  // mem_req0_pipe1
  WPIPE_mem_req0_pipe1_1328_inst <=> (branch_block_stmt_1317/do_while_stmt_1318/do_while_stmt_1318_loop_body/WPIPE_mem_req0_pipe1_1328_Sample/req branch_block_stmt_1317/do_while_stmt_1318/do_while_stmt_1318_loop_body/WPIPE_mem_req0_pipe1_1328_Update/req) (branch_block_stmt_1317/do_while_stmt_1318/do_while_stmt_1318_loop_body/WPIPE_mem_req0_pipe1_1328_Sample/ack branch_block_stmt_1317/do_while_stmt_1318/do_while_stmt_1318_loop_body/WPIPE_mem_req0_pipe1_1328_Update/ack)
  do_while_stmt_1318_branch <=> (branch_block_stmt_1317/do_while_stmt_1318/do_while_stmt_1318_loop_body/condition_evaluated) (branch_block_stmt_1317/do_while_stmt_1318/loop_exit/ack branch_block_stmt_1317/do_while_stmt_1318/loop_taken/ack)
}
$module [nicToProcessorInterface] 
{
  // pipe-declarations for block %nicToProcessorInterface
  //  file nic.linked.aa, line 570
  // pipe-declarations for block %nicToProcessorInterface%loop
  //  file nic.linked.aa, line 575
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    <>[branch_block_stmt_1339] // Branch Block  file nic.linked.aa, line 575
    {
      $P [branch_block_stmt_1339__entry__]
      branch_block_stmt_1339__entry__ <-| ($entry)
      $P [branch_block_stmt_1339__exit__]
      branch_block_stmt_1339__exit__ |-> ($exit)
      $P [do_while_stmt_1340__entry__] 
      $P [do_while_stmt_1340__exit__] 
      // do-while-statement  
      //  file nic.linked.aa, line 577
      <o> [do_while_stmt_1340]  $depth 7 $buffering 1 
      {
        $P[do_while_stmt_1340__entry__] 
        $P[do_while_stmt_1340__exit__] 
        $P[loop_back] 
        $P[condition_done] 
        $P[loop_body_done] 
        $pipeline [do_while_stmt_1340_loop_body] 
        {
          // Pipelined!
          $T[back_edge_to_loop_body] 
          $T[first_time_through_loop_body] 
          $T[loop_body_start] 
          $T[condition_evaluated] 
          $transitionmerge [entry_tmerge] (back_edge_to_loop_body first_time_through_loop_body) (loop_body_start)
          $entry <-& (loop_body_start)
          $T[aggregated_phi_sample_req] 
          $T[aggregated_phi_sample_ack] 
          $T[aggregated_phi_update_req] 
          $T[aggregated_phi_update_ack] 
          // do not loop-back unless all phi's have used up their triggering tokens.
          condition_evaluated <-& (aggregated_phi_update_ack)
          aggregated_phi_sample_req o<-& (aggregated_phi_update_ack 0)
          // start:  single source PHI statement phi_stmt_1342
          // 			$phi rdata := 			  AFB_NIC_RESPONSE $on   $entry ,   $loopback 
          // type of target is $uint<33>
          $T[phi_stmt_1342_sample_start_] 
          $T[phi_stmt_1342_sample_completed_] 
          $T[phi_stmt_1342_update_start_] 
          $T[phi_stmt_1342_update_completed_] 
          aggregated_phi_sample_req <-& (phi_stmt_1342_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_1342_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_1342_update_start_)
          // non-implicit source expression in single-source phi
          // AFB_NIC_RESPONSE
          $T[RPIPE_AFB_NIC_RESPONSE_1344_sample_start_] 
          $T[RPIPE_AFB_NIC_RESPONSE_1344_sample_completed_] 
          $T[RPIPE_AFB_NIC_RESPONSE_1344_update_start_] 
          $T[RPIPE_AFB_NIC_RESPONSE_1344_update_completed_] 
          ;;[RPIPE_AFB_NIC_RESPONSE_1344_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_AFB_NIC_RESPONSE_1344_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_AFB_NIC_RESPONSE_1344_sample_start_ &-> (RPIPE_AFB_NIC_RESPONSE_1344_Sample)
          RPIPE_AFB_NIC_RESPONSE_1344_sample_completed_ <-& (RPIPE_AFB_NIC_RESPONSE_1344_Sample)
          RPIPE_AFB_NIC_RESPONSE_1344_update_start_ <-& (RPIPE_AFB_NIC_RESPONSE_1344_sample_completed_)
          RPIPE_AFB_NIC_RESPONSE_1344_update_start_ &-> (RPIPE_AFB_NIC_RESPONSE_1344_Update)
          RPIPE_AFB_NIC_RESPONSE_1344_update_completed_ <-& (RPIPE_AFB_NIC_RESPONSE_1344_Update)
          RPIPE_AFB_NIC_RESPONSE_1344_sample_start_ o<-& (RPIPE_AFB_NIC_RESPONSE_1344_update_completed_ 0)
          // RAW reenables for AFB_NIC_RESPONSE
          // producer  and  consumer are both determined by PHI statements.
          aggregated_phi_sample_req &-> (RPIPE_AFB_NIC_RESPONSE_1344_sample_start_)
          aggregated_phi_sample_ack <-& (RPIPE_AFB_NIC_RESPONSE_1344_sample_completed_)
          aggregated_phi_update_req &-> (RPIPE_AFB_NIC_RESPONSE_1344_update_start_)
          phi_stmt_1342_update_completed_ <-& (RPIPE_AFB_NIC_RESPONSE_1344_update_completed_)
          aggregated_phi_update_ack <-& (phi_stmt_1342_update_completed_)
          // done: PHI Statement phi_stmt_1342
          // start:  			control_word_response_pipe := ($bitcast ($uint<64>) rdata ) $buffering 1// bits of buffering = 64. 
          //  file nic.linked.aa, line 583
          // Source expression
          // ($bitcast ($uint<64>) rdata )
          $T[type_cast_1348_sample_start_] 
          $T[type_cast_1348_sample_completed_] 
          $T[type_cast_1348_update_start_] 
          $T[type_cast_1348_update_completed_] 
          // rdata
          // start: Forward dependencies from rdata to transition type_cast_1348_sample_start_
          type_cast_1348_sample_start_ <-& (phi_stmt_1342_update_completed_)
          // done: Forward dependencies from rdata to transition type_cast_1348_sample_start_
          ;;[type_cast_1348_Sample] 
          {
            // unary expression 
            $T [rr] $T [ra] // (split) unary operation
          }
          ;;[type_cast_1348_Update] 
          {
            // unary expression 
            $T [cr] $T [ca] //(split) unary operation
          }
          type_cast_1348_sample_start_ &-> (type_cast_1348_Sample)
          type_cast_1348_sample_completed_ <-& (type_cast_1348_Sample)
          type_cast_1348_sample_completed_ &-> ($null)
          type_cast_1348_update_start_ &-> (type_cast_1348_Update)
          type_cast_1348_update_completed_ <-& (type_cast_1348_Update)
          // RAW reenables for rdata
          phi_stmt_1342_update_start_ o<-& (type_cast_1348_sample_completed_ 0)
          // self-release: 
          type_cast_1348_sample_start_ o<-& (type_cast_1348_sample_completed_ 1)
          $null &-> (type_cast_1348_update_start_)
          type_cast_1348_update_start_ o<-& (type_cast_1348_update_completed_ 0)
          // Target expression
          // (as target) control_word_response_pipe
          $T[WPIPE_control_word_response_pipe_1346_sample_start_] 
          $T[WPIPE_control_word_response_pipe_1346_sample_completed_] 
          $T[WPIPE_control_word_response_pipe_1346_update_start_] 
          $T[WPIPE_control_word_response_pipe_1346_update_completed_] 
          ;;[WPIPE_control_word_response_pipe_1346_Sample] 
          {
            // pipe write sample-start control_word_response_pipe
            $T [req] $T [ack] 
          }
          ;;[WPIPE_control_word_response_pipe_1346_Update] 
          {
            // pipe write update (complete) control_word_response_pipe
            $T [req] $T [ack] 
          }
          WPIPE_control_word_response_pipe_1346_sample_start_ &-> (WPIPE_control_word_response_pipe_1346_Sample)
          WPIPE_control_word_response_pipe_1346_sample_completed_ <-& (WPIPE_control_word_response_pipe_1346_Sample)
          WPIPE_control_word_response_pipe_1346_update_start_ <-& (WPIPE_control_word_response_pipe_1346_sample_completed_)
          WPIPE_control_word_response_pipe_1346_update_start_ &-> (WPIPE_control_word_response_pipe_1346_Update)
          WPIPE_control_word_response_pipe_1346_update_completed_ <-& (WPIPE_control_word_response_pipe_1346_Update)
          WPIPE_control_word_response_pipe_1346_sample_start_ o<-& (WPIPE_control_word_response_pipe_1346_update_completed_ 0)
          // start: Forward dependencies from ($bitcast ($uint<64>) rdata ) to transition WPIPE_control_word_response_pipe_1346_sample_start_
          WPIPE_control_word_response_pipe_1346_sample_start_ <-& (type_cast_1348_update_completed_)
          // done: Forward dependencies from ($bitcast ($uint<64>) rdata ) to transition WPIPE_control_word_response_pipe_1346_sample_start_
          // RAW reenables for ($bitcast ($uint<64>) rdata )
          type_cast_1348_update_start_ o<-& (WPIPE_control_word_response_pipe_1346_sample_completed_ 0)
          // end:  			control_word_response_pipe := ($bitcast ($uint<64>) rdata ) $buffering 1// bits of buffering = 64. 
          $T [loop_body_delay_to_condition_start] $delay
          loop_body_start &-> (loop_body_delay_to_condition_start)
          loop_body_delay_to_condition_start &-> (condition_evaluated)
          condition_evaluated &-> ($null)
          // load-store dependencies..
          // pipe read/write dependencies for pipe AFB_NIC_RESPONSE
          // read-dependencies for pipe AFB_NIC_RESPONSE
          // write-dependencies for pipe AFB_NIC_RESPONSE
          // signal write dependencies for AFB_NIC_RESPONSE
          // pipe read/write dependencies for pipe control_word_response_pipe
          // read-dependencies for pipe control_word_response_pipe
          // write-dependencies for pipe control_word_response_pipe
          // signal write dependencies for control_word_response_pipe
        }
        ( first_time_through_loop_body  back_edge_to_loop_body) 
        ( condition_evaluated )
        ;; [loop_exit] 
        {
          $T [ack] 
        }
        ;; [loop_taken] 
        {
          $T [ack] 
        }
        do_while_stmt_1340__entry__ <-| ($entry)
        loop_body_done <-| ( do_while_stmt_1340_loop_body ) 
        condition_done |-> (loop_exit loop_taken)
        do_while_stmt_1340__exit__ |-> ($exit)
        $bind condition_done <= do_while_stmt_1340_loop_body : condition_evaluated
        $bind do_while_stmt_1340__entry__  => do_while_stmt_1340_loop_body : first_time_through_loop_body 
        $bind loop_back  => do_while_stmt_1340_loop_body : back_edge_to_loop_body 
        $terminate (loop_exit loop_taken loop_body_done) (loop_back do_while_stmt_1340__exit__)
      }
      do_while_stmt_1340__entry__ |-> (do_while_stmt_1340)
      do_while_stmt_1340__exit__ <-| (do_while_stmt_1340)
      do_while_stmt_1340__entry__ <-| (branch_block_stmt_1339__entry__)
      do_while_stmt_1340__exit__ |-> (branch_block_stmt_1339__exit__)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %nicToProcessorInterface%loop%
    //  file nic.linked.aa, line 579
    // constant-object-declarations for block %nicToProcessorInterface%loop
    //  file nic.linked.aa, line 575
    // constant-object-declarations for block %nicToProcessorInterface
    //  file nic.linked.aa, line 570
    // constant-declarations for block %nicToProcessorInterface%loop
    //  file nic.linked.aa, line 575
    // do-while statement  
    //  file nic.linked.aa, line 577
    // 1 
    $constant $W[konst_1351_wire_constant] : $int<1> := _b1// 1
    // constant-declarations for block %nicToProcessorInterface%loop%
    //  file nic.linked.aa, line 579
    // constant-declarations for phi:  			$phi rdata := 			  AFB_NIC_RESPONSE $on   $entry ,   $loopback 
    // type of target is $uint<33>
    //  file nic.linked.aa, line 580
    // block %nicToProcessorInterface%loop
    //  file nic.linked.aa, line 575
    // do-while statement  
    //  file nic.linked.aa, line 577
    // merge-statement  
    //  file nic.linked.aa, line 579
    // 			$phi rdata := 			  AFB_NIC_RESPONSE $on   $entry ,   $loopback 
    // type of target is $uint<33>
    //  file nic.linked.aa, line 580
    // AFB_NIC_RESPONSE
    $W[RPIPE_AFB_NIC_RESPONSE_1344_wire] : $int<33>
    // rdata
    $W[rdata_1342] : $int<33>
    // 			control_word_response_pipe := ($bitcast ($uint<64>) rdata ) $buffering 1// bits of buffering = 64. 
    //  file nic.linked.aa, line 583
    // ($bitcast ($uint<64>) rdata )
    $intermediate $W[type_cast_1348_wire] : $int<64>
    // control_word_response_pipe
    // datapath-instances for block %nicToProcessorInterface%loop
    //  file nic.linked.aa, line 575
    // datapath-instances for do-while  
    //  file nic.linked.aa, line 577
    ==0? [do_while_stmt_1340_branch] (konst_1351_wire_constant)
    $flowthrough
    // data-path instances for merge  
    //  file nic.linked.aa, line 579
    // 			$phi rdata := 			  AFB_NIC_RESPONSE $on   $entry ,   $loopback 
    // type of target is $uint<33>
    //  file nic.linked.aa, line 580
    // AFB_NIC_RESPONSE
    $ioport $in [RPIPE_AFB_NIC_RESPONSE_1344_inst] (AFB_NIC_RESPONSE) (RPIPE_AFB_NIC_RESPONSE_1344_wire)  $fullrate 
    $buffering $out RPIPE_AFB_NIC_RESPONSE_1344_inst RPIPE_AFB_NIC_RESPONSE_1344_wire 1
    # := [ssrc_phi_stmt_1342] (RPIPE_AFB_NIC_RESPONSE_1344_wire) (rdata_1342)    $flowthrough 
    // 			control_word_response_pipe := ($bitcast ($uint<64>) rdata ) $buffering 1// bits of buffering = 64. 
    //  file nic.linked.aa, line 583
    // ($bitcast ($uint<64>) rdata )
    # := [type_cast_1348_inst] (rdata_1342) (type_cast_1348_wire)     $fullrate
    $buffering  $out type_cast_1348_inst type_cast_1348_wire 1
    $delay type_cast_1348_inst 1
    // control_word_response_pipe
    $ioport $out [WPIPE_control_word_response_pipe_1346_inst]  (type_cast_1348_wire) (control_word_response_pipe)  $fullrate 
  }
  // end data-path
  // CP-DP links for do-while  do_while_stmt_1340
  //  file nic.linked.aa, line 577
  // AFB_NIC_RESPONSE
  RPIPE_AFB_NIC_RESPONSE_1344_inst <=> (branch_block_stmt_1339/do_while_stmt_1340/do_while_stmt_1340_loop_body/RPIPE_AFB_NIC_RESPONSE_1344_Sample/rr branch_block_stmt_1339/do_while_stmt_1340/do_while_stmt_1340_loop_body/RPIPE_AFB_NIC_RESPONSE_1344_Update/cr) (branch_block_stmt_1339/do_while_stmt_1340/do_while_stmt_1340_loop_body/RPIPE_AFB_NIC_RESPONSE_1344_Sample/ra branch_block_stmt_1339/do_while_stmt_1340/do_while_stmt_1340_loop_body/RPIPE_AFB_NIC_RESPONSE_1344_Update/ca)
  // 			control_word_response_pipe := ($bitcast ($uint<64>) rdata ) $buffering 1// bits of buffering = 64. 
  //  file nic.linked.aa, line 583
  // rdata
  // ($bitcast ($uint<64>) rdata )
  type_cast_1348_inst <=> (branch_block_stmt_1339/do_while_stmt_1340/do_while_stmt_1340_loop_body/type_cast_1348_Sample/rr branch_block_stmt_1339/do_while_stmt_1340/do_while_stmt_1340_loop_body/type_cast_1348_Update/cr) (branch_block_stmt_1339/do_while_stmt_1340/do_while_stmt_1340_loop_body/type_cast_1348_Sample/ra branch_block_stmt_1339/do_while_stmt_1340/do_while_stmt_1340_loop_body/type_cast_1348_Update/ca)
  // control_word_response_pipe
  WPIPE_control_word_response_pipe_1346_inst <=> (branch_block_stmt_1339/do_while_stmt_1340/do_while_stmt_1340_loop_body/WPIPE_control_word_response_pipe_1346_Sample/req branch_block_stmt_1339/do_while_stmt_1340/do_while_stmt_1340_loop_body/WPIPE_control_word_response_pipe_1346_Update/req) (branch_block_stmt_1339/do_while_stmt_1340/do_while_stmt_1340_loop_body/WPIPE_control_word_response_pipe_1346_Sample/ack branch_block_stmt_1339/do_while_stmt_1340/do_while_stmt_1340_loop_body/WPIPE_control_word_response_pipe_1346_Update/ack)
  do_while_stmt_1340_branch <=> (branch_block_stmt_1339/do_while_stmt_1340/do_while_stmt_1340_loop_body/condition_evaluated) (branch_block_stmt_1339/do_while_stmt_1340/loop_exit/ack branch_block_stmt_1339/do_while_stmt_1340/loop_taken/ack)
}
$module [processorToNicInterface] 
{
  // pipe-declarations for block %processorToNicInterface
  //  file nic.linked.aa, line 587
  // pipe-declarations for block %processorToNicInterface%loop
  //  file nic.linked.aa, line 592
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    <>[branch_block_stmt_1355] // Branch Block  file nic.linked.aa, line 592
    {
      $P [branch_block_stmt_1355__entry__]
      branch_block_stmt_1355__entry__ <-| ($entry)
      $P [branch_block_stmt_1355__exit__]
      branch_block_stmt_1355__exit__ |-> ($exit)
      $P [do_while_stmt_1356__entry__] 
      $P [do_while_stmt_1356__exit__] 
      // do-while-statement  
      //  file nic.linked.aa, line 594
      <o> [do_while_stmt_1356]  $depth 7 $buffering 1 
      {
        $P[do_while_stmt_1356__entry__] 
        $P[do_while_stmt_1356__exit__] 
        $P[loop_back] 
        $P[condition_done] 
        $P[loop_body_done] 
        $pipeline [do_while_stmt_1356_loop_body] 
        {
          // Pipelined!
          $T[back_edge_to_loop_body] 
          $T[first_time_through_loop_body] 
          $T[loop_body_start] 
          $T[condition_evaluated] 
          $transitionmerge [entry_tmerge] (back_edge_to_loop_body first_time_through_loop_body) (loop_body_start)
          $entry <-& (loop_body_start)
          $T[aggregated_phi_sample_req] 
          $T[aggregated_phi_sample_ack] 
          $T[aggregated_phi_update_req] 
          $T[aggregated_phi_update_ack] 
          // do not loop-back unless all phi's have used up their triggering tokens.
          condition_evaluated <-& (aggregated_phi_update_ack)
          aggregated_phi_sample_req o<-& (aggregated_phi_update_ack 0)
          // start:  single source PHI statement phi_stmt_1358
          // 			$phi rdata0 := 			  control_word_request_pipe_0 $on   $entry ,   $loopback 
          // type of target is $uint<32>
          $T[phi_stmt_1358_sample_start_] 
          $T[phi_stmt_1358_sample_completed_] 
          $T[phi_stmt_1358_update_start_] 
          $T[phi_stmt_1358_update_completed_] 
          aggregated_phi_sample_req <-& (phi_stmt_1358_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_1358_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_1358_update_start_)
          // non-implicit source expression in single-source phi
          // control_word_request_pipe_0
          $T[RPIPE_control_word_request_pipe_0_1360_sample_start_] 
          $T[RPIPE_control_word_request_pipe_0_1360_sample_completed_] 
          $T[RPIPE_control_word_request_pipe_0_1360_update_start_] 
          $T[RPIPE_control_word_request_pipe_0_1360_update_completed_] 
          ;;[RPIPE_control_word_request_pipe_0_1360_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_control_word_request_pipe_0_1360_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_control_word_request_pipe_0_1360_sample_start_ &-> (RPIPE_control_word_request_pipe_0_1360_Sample)
          RPIPE_control_word_request_pipe_0_1360_sample_completed_ <-& (RPIPE_control_word_request_pipe_0_1360_Sample)
          RPIPE_control_word_request_pipe_0_1360_update_start_ <-& (RPIPE_control_word_request_pipe_0_1360_sample_completed_)
          RPIPE_control_word_request_pipe_0_1360_update_start_ &-> (RPIPE_control_word_request_pipe_0_1360_Update)
          RPIPE_control_word_request_pipe_0_1360_update_completed_ <-& (RPIPE_control_word_request_pipe_0_1360_Update)
          RPIPE_control_word_request_pipe_0_1360_sample_start_ o<-& (RPIPE_control_word_request_pipe_0_1360_update_completed_ 0)
          // RAW reenables for control_word_request_pipe_0
          // producer  and  consumer are both determined by PHI statements.
          aggregated_phi_sample_req &-> (RPIPE_control_word_request_pipe_0_1360_sample_start_)
          aggregated_phi_sample_ack <-& (RPIPE_control_word_request_pipe_0_1360_sample_completed_)
          aggregated_phi_update_req &-> (RPIPE_control_word_request_pipe_0_1360_update_start_)
          phi_stmt_1358_update_completed_ <-& (RPIPE_control_word_request_pipe_0_1360_update_completed_)
          aggregated_phi_update_ack <-& (phi_stmt_1358_update_completed_)
          // done: PHI Statement phi_stmt_1358
          // start:  single source PHI statement phi_stmt_1361
          // 			$phi rdata1 := 			  control_word_request_pipe_1 $on   $entry ,   $loopback 
          // type of target is $uint<64>
          $T[phi_stmt_1361_sample_start_] 
          $T[phi_stmt_1361_sample_completed_] 
          $T[phi_stmt_1361_update_start_] 
          $T[phi_stmt_1361_update_completed_] 
          aggregated_phi_sample_req <-& (phi_stmt_1361_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_1361_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_1361_update_start_)
          // non-implicit source expression in single-source phi
          // control_word_request_pipe_1
          $T[RPIPE_control_word_request_pipe_1_1363_sample_start_] 
          $T[RPIPE_control_word_request_pipe_1_1363_sample_completed_] 
          $T[RPIPE_control_word_request_pipe_1_1363_update_start_] 
          $T[RPIPE_control_word_request_pipe_1_1363_update_completed_] 
          ;;[RPIPE_control_word_request_pipe_1_1363_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_control_word_request_pipe_1_1363_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_control_word_request_pipe_1_1363_sample_start_ &-> (RPIPE_control_word_request_pipe_1_1363_Sample)
          RPIPE_control_word_request_pipe_1_1363_sample_completed_ <-& (RPIPE_control_word_request_pipe_1_1363_Sample)
          RPIPE_control_word_request_pipe_1_1363_update_start_ <-& (RPIPE_control_word_request_pipe_1_1363_sample_completed_)
          RPIPE_control_word_request_pipe_1_1363_update_start_ &-> (RPIPE_control_word_request_pipe_1_1363_Update)
          RPIPE_control_word_request_pipe_1_1363_update_completed_ <-& (RPIPE_control_word_request_pipe_1_1363_Update)
          RPIPE_control_word_request_pipe_1_1363_sample_start_ o<-& (RPIPE_control_word_request_pipe_1_1363_update_completed_ 0)
          // RAW reenables for control_word_request_pipe_1
          // producer  and  consumer are both determined by PHI statements.
          aggregated_phi_sample_req &-> (RPIPE_control_word_request_pipe_1_1363_sample_start_)
          aggregated_phi_sample_ack <-& (RPIPE_control_word_request_pipe_1_1363_sample_completed_)
          aggregated_phi_update_req &-> (RPIPE_control_word_request_pipe_1_1363_update_start_)
          phi_stmt_1361_update_completed_ <-& (RPIPE_control_word_request_pipe_1_1363_update_completed_)
          aggregated_phi_update_ack <-& (phi_stmt_1361_update_completed_)
          // done: PHI Statement phi_stmt_1361
          // start:  			AFB_NIC_REQUEST := (( $slice rdata1 41 0 )  && rdata0) $buffering 1// bits of buffering = 74. 
          //  file nic.linked.aa, line 603
          // Source expression
          // (( $slice rdata1 41 0 )  && rdata0)
          $T[CONCAT_u42_u74_1373_sample_start_] 
          $T[CONCAT_u42_u74_1373_sample_completed_] 
          $T[CONCAT_u42_u74_1373_update_start_] 
          $T[CONCAT_u42_u74_1373_update_completed_] 
          // ( $slice rdata1 41 0 ) 
          // rdata1
          // rdata0
          // start: Forward dependencies from ( $slice rdata1 41 0 )  to transition CONCAT_u42_u74_1373_sample_start_
          CONCAT_u42_u74_1373_sample_start_ <-& (phi_stmt_1361_update_completed_)
          // done: Forward dependencies from ( $slice rdata1 41 0 )  to transition CONCAT_u42_u74_1373_sample_start_
          // start: Forward dependencies from rdata0 to transition CONCAT_u42_u74_1373_sample_start_
          CONCAT_u42_u74_1373_sample_start_ <-& (phi_stmt_1358_update_completed_)
          // done: Forward dependencies from rdata0 to transition CONCAT_u42_u74_1373_sample_start_
          ;;[CONCAT_u42_u74_1373_Sample] 
          {
            // binary expression 
            $T [rr] $T [ra]  // (split) binary operation 
          }
          ;;[CONCAT_u42_u74_1373_Update] 
          {
            // binary expression 
            $T [cr] $T [ca] // (split) binary operation 
          }
          CONCAT_u42_u74_1373_sample_start_ &-> (CONCAT_u42_u74_1373_Sample)
          CONCAT_u42_u74_1373_sample_completed_ <-& (CONCAT_u42_u74_1373_Sample)
          CONCAT_u42_u74_1373_sample_completed_ &-> ($null)
          CONCAT_u42_u74_1373_update_start_ &-> (CONCAT_u42_u74_1373_Update)
          CONCAT_u42_u74_1373_update_completed_ <-& (CONCAT_u42_u74_1373_Update)
          // RAW reenables for ( $slice rdata1 41 0 ) 
          phi_stmt_1361_update_start_ o<-& (CONCAT_u42_u74_1373_sample_completed_ 0)
          // RAW reenables for rdata0
          phi_stmt_1358_update_start_ o<-& (CONCAT_u42_u74_1373_sample_completed_ 0)
          // self-release: 
          CONCAT_u42_u74_1373_sample_start_ o<-& (CONCAT_u42_u74_1373_sample_completed_ 1)
          $null &-> (CONCAT_u42_u74_1373_update_start_)
          CONCAT_u42_u74_1373_update_start_ o<-& (CONCAT_u42_u74_1373_update_completed_ 0)
          // Target expression
          // (as target) AFB_NIC_REQUEST
          $T[WPIPE_AFB_NIC_REQUEST_1368_sample_start_] 
          $T[WPIPE_AFB_NIC_REQUEST_1368_sample_completed_] 
          $T[WPIPE_AFB_NIC_REQUEST_1368_update_start_] 
          $T[WPIPE_AFB_NIC_REQUEST_1368_update_completed_] 
          ;;[WPIPE_AFB_NIC_REQUEST_1368_Sample] 
          {
            // pipe write sample-start AFB_NIC_REQUEST
            $T [req] $T [ack] 
          }
          ;;[WPIPE_AFB_NIC_REQUEST_1368_Update] 
          {
            // pipe write update (complete) AFB_NIC_REQUEST
            $T [req] $T [ack] 
          }
          WPIPE_AFB_NIC_REQUEST_1368_sample_start_ &-> (WPIPE_AFB_NIC_REQUEST_1368_Sample)
          WPIPE_AFB_NIC_REQUEST_1368_sample_completed_ <-& (WPIPE_AFB_NIC_REQUEST_1368_Sample)
          WPIPE_AFB_NIC_REQUEST_1368_update_start_ <-& (WPIPE_AFB_NIC_REQUEST_1368_sample_completed_)
          WPIPE_AFB_NIC_REQUEST_1368_update_start_ &-> (WPIPE_AFB_NIC_REQUEST_1368_Update)
          WPIPE_AFB_NIC_REQUEST_1368_update_completed_ <-& (WPIPE_AFB_NIC_REQUEST_1368_Update)
          WPIPE_AFB_NIC_REQUEST_1368_sample_start_ o<-& (WPIPE_AFB_NIC_REQUEST_1368_update_completed_ 0)
          // start: Forward dependencies from (( $slice rdata1 41 0 )  && rdata0) to transition WPIPE_AFB_NIC_REQUEST_1368_sample_start_
          WPIPE_AFB_NIC_REQUEST_1368_sample_start_ <-& (CONCAT_u42_u74_1373_update_completed_)
          // done: Forward dependencies from (( $slice rdata1 41 0 )  && rdata0) to transition WPIPE_AFB_NIC_REQUEST_1368_sample_start_
          // RAW reenables for (( $slice rdata1 41 0 )  && rdata0)
          CONCAT_u42_u74_1373_update_start_ o<-& (WPIPE_AFB_NIC_REQUEST_1368_sample_completed_ 0)
          // end:  			AFB_NIC_REQUEST := (( $slice rdata1 41 0 )  && rdata0) $buffering 1// bits of buffering = 74. 
          $T [loop_body_delay_to_condition_start] $delay
          loop_body_start &-> (loop_body_delay_to_condition_start)
          loop_body_delay_to_condition_start &-> (condition_evaluated)
          condition_evaluated &-> ($null)
          // load-store dependencies..
          // pipe read/write dependencies for pipe AFB_NIC_REQUEST
          // read-dependencies for pipe AFB_NIC_REQUEST
          // write-dependencies for pipe AFB_NIC_REQUEST
          // signal write dependencies for AFB_NIC_REQUEST
          // pipe read/write dependencies for pipe control_word_request_pipe_0
          // read-dependencies for pipe control_word_request_pipe_0
          // write-dependencies for pipe control_word_request_pipe_0
          // signal write dependencies for control_word_request_pipe_0
          // pipe read/write dependencies for pipe control_word_request_pipe_1
          // read-dependencies for pipe control_word_request_pipe_1
          // write-dependencies for pipe control_word_request_pipe_1
          // signal write dependencies for control_word_request_pipe_1
        }
        ( first_time_through_loop_body  back_edge_to_loop_body) 
        ( condition_evaluated )
        ;; [loop_exit] 
        {
          $T [ack] 
        }
        ;; [loop_taken] 
        {
          $T [ack] 
        }
        do_while_stmt_1356__entry__ <-| ($entry)
        loop_body_done <-| ( do_while_stmt_1356_loop_body ) 
        condition_done |-> (loop_exit loop_taken)
        do_while_stmt_1356__exit__ |-> ($exit)
        $bind condition_done <= do_while_stmt_1356_loop_body : condition_evaluated
        $bind do_while_stmt_1356__entry__  => do_while_stmt_1356_loop_body : first_time_through_loop_body 
        $bind loop_back  => do_while_stmt_1356_loop_body : back_edge_to_loop_body 
        $terminate (loop_exit loop_taken loop_body_done) (loop_back do_while_stmt_1356__exit__)
      }
      do_while_stmt_1356__entry__ |-> (do_while_stmt_1356)
      do_while_stmt_1356__exit__ <-| (do_while_stmt_1356)
      do_while_stmt_1356__entry__ <-| (branch_block_stmt_1355__entry__)
      do_while_stmt_1356__exit__ |-> (branch_block_stmt_1355__exit__)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %processorToNicInterface%loop%
    //  file nic.linked.aa, line 596
    // constant-object-declarations for block %processorToNicInterface%loop
    //  file nic.linked.aa, line 592
    // constant-object-declarations for block %processorToNicInterface
    //  file nic.linked.aa, line 587
    // constant-declarations for block %processorToNicInterface%loop
    //  file nic.linked.aa, line 592
    // do-while statement  
    //  file nic.linked.aa, line 594
    // 1 
    $constant $W[konst_1376_wire_constant] : $int<1> := _b1// 1
    // constant-declarations for block %processorToNicInterface%loop%
    //  file nic.linked.aa, line 596
    // constant-declarations for phi:  			$phi rdata0 := 			  control_word_request_pipe_0 $on   $entry ,   $loopback 
    // type of target is $uint<32>
    //  file nic.linked.aa, line 597
    // constant-declarations for phi:  			$phi rdata1 := 			  control_word_request_pipe_1 $on   $entry ,   $loopback 
    // type of target is $uint<64>
    //  file nic.linked.aa, line 599
    // block %processorToNicInterface%loop
    //  file nic.linked.aa, line 592
    // do-while statement  
    //  file nic.linked.aa, line 594
    // merge-statement  
    //  file nic.linked.aa, line 596
    // 			$phi rdata0 := 			  control_word_request_pipe_0 $on   $entry ,   $loopback 
    // type of target is $uint<32>
    //  file nic.linked.aa, line 597
    // control_word_request_pipe_0
    $W[RPIPE_control_word_request_pipe_0_1360_wire] : $int<32>
    // rdata0
    $W[rdata0_1358] : $int<32>
    // 			$phi rdata1 := 			  control_word_request_pipe_1 $on   $entry ,   $loopback 
    // type of target is $uint<64>
    //  file nic.linked.aa, line 599
    // control_word_request_pipe_1
    $W[RPIPE_control_word_request_pipe_1_1363_wire] : $int<64>
    // rdata1
    $W[rdata1_1361] : $int<64>
    // 			AFB_NIC_REQUEST := (( $slice rdata1 41 0 )  && rdata0) $buffering 1// bits of buffering = 74. 
    //  file nic.linked.aa, line 603
    // ( $slice rdata1 41 0 ) 
    $intermediate $W[slice_1371_wire] : $int<42>
    // (( $slice rdata1 41 0 )  && rdata0)
    $intermediate $W[CONCAT_u42_u74_1373_wire] : $int<74>
    // AFB_NIC_REQUEST
    // datapath-instances for block %processorToNicInterface%loop
    //  file nic.linked.aa, line 592
    // datapath-instances for do-while  
    //  file nic.linked.aa, line 594
    ==0? [do_while_stmt_1356_branch] (konst_1376_wire_constant)
    $flowthrough
    // data-path instances for merge  
    //  file nic.linked.aa, line 596
    // 			$phi rdata0 := 			  control_word_request_pipe_0 $on   $entry ,   $loopback 
    // type of target is $uint<32>
    //  file nic.linked.aa, line 597
    // control_word_request_pipe_0
    $ioport $in [RPIPE_control_word_request_pipe_0_1360_inst] (control_word_request_pipe_0) (RPIPE_control_word_request_pipe_0_1360_wire)  $fullrate 
    $buffering $out RPIPE_control_word_request_pipe_0_1360_inst RPIPE_control_word_request_pipe_0_1360_wire 1
    # := [ssrc_phi_stmt_1358] (RPIPE_control_word_request_pipe_0_1360_wire) (rdata0_1358)    $flowthrough 
    // 			$phi rdata1 := 			  control_word_request_pipe_1 $on   $entry ,   $loopback 
    // type of target is $uint<64>
    //  file nic.linked.aa, line 599
    // control_word_request_pipe_1
    $ioport $in [RPIPE_control_word_request_pipe_1_1363_inst] (control_word_request_pipe_1) (RPIPE_control_word_request_pipe_1_1363_wire)  $fullrate 
    $buffering $out RPIPE_control_word_request_pipe_1_1363_inst RPIPE_control_word_request_pipe_1_1363_wire 1
    # := [ssrc_phi_stmt_1361] (RPIPE_control_word_request_pipe_1_1363_wire) (rdata1_1361)    $flowthrough 
    // 			AFB_NIC_REQUEST := (( $slice rdata1 41 0 )  && rdata0) $buffering 1// bits of buffering = 74. 
    //  file nic.linked.aa, line 603
    // ( $slice rdata1 41 0 ) 
    [:] [slice_1371_inst] (rdata1_1361 41 0) (slice_1371_wire)  $flowthrough
    $delay slice_1371_inst 0
    // (( $slice rdata1 41 0 )  && rdata0)
    &&[CONCAT_u42_u74_1373_inst] (slice_1371_wire rdata0_1358) (CONCAT_u42_u74_1373_wire)    $fullrate
    $buffering  $out CONCAT_u42_u74_1373_inst CONCAT_u42_u74_1373_wire 1
    $delay CONCAT_u42_u74_1373_inst 1
    // AFB_NIC_REQUEST
    $ioport $out [WPIPE_AFB_NIC_REQUEST_1368_inst]  (CONCAT_u42_u74_1373_wire) (AFB_NIC_REQUEST)  $fullrate 
  }
  // end data-path
  // CP-DP links for do-while  do_while_stmt_1356
  //  file nic.linked.aa, line 594
  // control_word_request_pipe_0
  RPIPE_control_word_request_pipe_0_1360_inst <=> (branch_block_stmt_1355/do_while_stmt_1356/do_while_stmt_1356_loop_body/RPIPE_control_word_request_pipe_0_1360_Sample/rr branch_block_stmt_1355/do_while_stmt_1356/do_while_stmt_1356_loop_body/RPIPE_control_word_request_pipe_0_1360_Update/cr) (branch_block_stmt_1355/do_while_stmt_1356/do_while_stmt_1356_loop_body/RPIPE_control_word_request_pipe_0_1360_Sample/ra branch_block_stmt_1355/do_while_stmt_1356/do_while_stmt_1356_loop_body/RPIPE_control_word_request_pipe_0_1360_Update/ca)
  // control_word_request_pipe_1
  RPIPE_control_word_request_pipe_1_1363_inst <=> (branch_block_stmt_1355/do_while_stmt_1356/do_while_stmt_1356_loop_body/RPIPE_control_word_request_pipe_1_1363_Sample/rr branch_block_stmt_1355/do_while_stmt_1356/do_while_stmt_1356_loop_body/RPIPE_control_word_request_pipe_1_1363_Update/cr) (branch_block_stmt_1355/do_while_stmt_1356/do_while_stmt_1356_loop_body/RPIPE_control_word_request_pipe_1_1363_Sample/ra branch_block_stmt_1355/do_while_stmt_1356/do_while_stmt_1356_loop_body/RPIPE_control_word_request_pipe_1_1363_Update/ca)
  // 			AFB_NIC_REQUEST := (( $slice rdata1 41 0 )  && rdata0) $buffering 1// bits of buffering = 74. 
  //  file nic.linked.aa, line 603
  // (( $slice rdata1 41 0 )  && rdata0)
  // rdata1
  // rdata0
  CONCAT_u42_u74_1373_inst <=> (branch_block_stmt_1355/do_while_stmt_1356/do_while_stmt_1356_loop_body/CONCAT_u42_u74_1373_Sample/rr branch_block_stmt_1355/do_while_stmt_1356/do_while_stmt_1356_loop_body/CONCAT_u42_u74_1373_Update/cr) (branch_block_stmt_1355/do_while_stmt_1356/do_while_stmt_1356_loop_body/CONCAT_u42_u74_1373_Sample/ra branch_block_stmt_1355/do_while_stmt_1356/do_while_stmt_1356_loop_body/CONCAT_u42_u74_1373_Update/ca)
  // AFB_NIC_REQUEST
  WPIPE_AFB_NIC_REQUEST_1368_inst <=> (branch_block_stmt_1355/do_while_stmt_1356/do_while_stmt_1356_loop_body/WPIPE_AFB_NIC_REQUEST_1368_Sample/req branch_block_stmt_1355/do_while_stmt_1356/do_while_stmt_1356_loop_body/WPIPE_AFB_NIC_REQUEST_1368_Update/req) (branch_block_stmt_1355/do_while_stmt_1356/do_while_stmt_1356_loop_body/WPIPE_AFB_NIC_REQUEST_1368_Sample/ack branch_block_stmt_1355/do_while_stmt_1356/do_while_stmt_1356_loop_body/WPIPE_AFB_NIC_REQUEST_1368_Update/ack)
  do_while_stmt_1356_branch <=> (branch_block_stmt_1355/do_while_stmt_1356/do_while_stmt_1356_loop_body/condition_evaluated) (branch_block_stmt_1355/do_while_stmt_1356/loop_exit/ack branch_block_stmt_1355/do_while_stmt_1356/loop_taken/ack)
}
$module [transmitPacket] 
{
  $in packet_pointer:$int<32>
  // can point into 
  $out status:$int<1>
  // can point into 
  // pipe-declarations for block %transmitPacket
  //  file nic.linked.aa, line 607
  // pipe-declarations for block %transmitPacket%loop
  //  file nic.linked.aa, line 617
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    ::[assign_stmt_1389_to_assign_stmt_1413] 
    {
      // start: WAR dependencies for control_data_addr
      // ignored out-of-scope w_root  packet_pointer : $uint<32> 
      // done: WAR dependencies for control_data_addr
      // start:  	$volatile control_data_addr := ($bitcast ($uint<36>) (( $slice packet_pointer 31 1 )  && ($bitcast ($uint<3>) _b0  )) ) $buffering 1
      //  file nic.linked.aa, line 612
      // volatile! 
      // Source expression
      // ($bitcast ($uint<36>) (( $slice packet_pointer 31 1 )  && ($bitcast ($uint<3>) _b0  )) )
      // (( $slice packet_pointer 31 1 )  && ($bitcast ($uint<3>) _b0  ))
      // ( $slice packet_pointer 31 1 ) 
      // packet_pointer
      // Target expression
      // (as target) control_data_addr
      // start: WAR dependencies for control_data_addr
      // ignored out-of-scope w_root  packet_pointer : $uint<32> 
      // done: WAR dependencies for control_data_addr
      // end:  	$volatile control_data_addr := ($bitcast ($uint<36>) (( $slice packet_pointer 31 1 )  && ($bitcast ($uint<3>) _b0  )) ) $buffering 1
      // start: 	$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b1  ) FULL_BYTE_MASK control_data_addr ($bitcast ($uint<64>) _b0  ) ) (control_data ) 
      //  file nic.linked.aa, line 613
      $T[call_stmt_1399_sample_start_] 
      $T[call_stmt_1399_sample_completed_] 
      $T[call_stmt_1399_update_start_] 
      $T[call_stmt_1399_update_completed_] 
      // Call input argument 0
      // Call input argument 1
      // Call input argument 2
      // Call input argument 3
      // control_data_addr
      // Call input argument 4
      // start: Forward dependencies from control_data_addr to transition call_stmt_1399_sample_start_
      // done: Forward dependencies from control_data_addr to transition call_stmt_1399_sample_start_
      ;;[call_stmt_1399_Sample] 
      {
        $T [crr] $T [cra] 
      }
      ;;[call_stmt_1399_Update] 
      {
        $T [ccr] $T [cca] 
      }
      call_stmt_1399_sample_start_ &-> (call_stmt_1399_Sample)
      call_stmt_1399_sample_completed_ <-& (call_stmt_1399_Sample)
      call_stmt_1399_sample_completed_ &-> ($null)
      call_stmt_1399_update_start_ &-> (call_stmt_1399_Update)
      call_stmt_1399_update_completed_ <-& (call_stmt_1399_Update)
      // Call output argument 0
      // (as target) control_data
      // start: WAR dependencies for control_data
      // done: WAR dependencies for control_data
      // end: 	$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b1  ) FULL_BYTE_MASK control_data_addr ($bitcast ($uint<64>) _b0  ) ) (control_data ) 
      // start: WAR dependencies for unused
      // done: WAR dependencies for unused
      // start:  	$volatile unused := ( $slice control_data 63 20 )  $buffering 1
      //  file nic.linked.aa, line 614
      // volatile! 
      // Source expression
      // ( $slice control_data 63 20 ) 
      // control_data
      // Target expression
      // (as target) unused
      // start: WAR dependencies for unused
      // done: WAR dependencies for unused
      // end:  	$volatile unused := ( $slice control_data 63 20 )  $buffering 1
      // start: WAR dependencies for packet_size
      // done: WAR dependencies for packet_size
      // start:  	$volatile packet_size := ( $slice control_data 19 8 )  $buffering 1
      //  file nic.linked.aa, line 615
      // volatile! 
      // Source expression
      // ( $slice control_data 19 8 ) 
      // control_data
      // Target expression
      // (as target) packet_size
      // start: WAR dependencies for packet_size
      // done: WAR dependencies for packet_size
      // end:  	$volatile packet_size := ( $slice control_data 19 8 )  $buffering 1
      // start: WAR dependencies for last_tkeep
      // done: WAR dependencies for last_tkeep
      // start:  	$volatile last_tkeep := ( $slice control_data 7 0 )  $buffering 1
      //  file nic.linked.aa, line 616
      // volatile! 
      // Source expression
      // ( $slice control_data 7 0 ) 
      // control_data
      // Target expression
      // (as target) last_tkeep
      // start: WAR dependencies for last_tkeep
      // done: WAR dependencies for last_tkeep
      // end:  	$volatile last_tkeep := ( $slice control_data 7 0 )  $buffering 1
      // load-store dependencies..
      // pipe read/write dependencies for pipe MEMORY_TO_NIC_RESPONSE
      // read-dependencies for pipe MEMORY_TO_NIC_RESPONSE
      // write-dependencies for pipe MEMORY_TO_NIC_RESPONSE
      // signal write dependencies for MEMORY_TO_NIC_RESPONSE
      // pipe read/write dependencies for pipe NIC_TO_MEMORY_REQUEST
      // read-dependencies for pipe NIC_TO_MEMORY_REQUEST
      // write-dependencies for pipe NIC_TO_MEMORY_REQUEST
      // signal write dependencies for NIC_TO_MEMORY_REQUEST
    }
    <>[branch_block_stmt_1414] // Branch Block  file nic.linked.aa, line 617
    {
      $P [branch_block_stmt_1414__entry__]
      branch_block_stmt_1414__entry__ <-| ($entry)
      $P [branch_block_stmt_1414__exit__]
      branch_block_stmt_1414__exit__ |-> ($exit)
      $P [do_while_stmt_1415__entry__] 
      $P [do_while_stmt_1415__exit__] 
      $P [call_stmt_1472_to_assign_stmt_1488__entry__] 
      $P [call_stmt_1472_to_assign_stmt_1488__exit__] 
      // do-while-statement  
      //  file nic.linked.aa, line 619
      <o> [do_while_stmt_1415]  $depth 31 $buffering 1 
      {
        $P[do_while_stmt_1415__entry__] 
        $P[do_while_stmt_1415__exit__] 
        $P[loop_back] 
        $P[condition_done] 
        $P[loop_body_done] 
        $pipeline [do_while_stmt_1415_loop_body] 
        {
          // Pipelined!
          $T[back_edge_to_loop_body] 
          $T[first_time_through_loop_body] 
          $T[loop_body_start] 
          $T[condition_evaluated] 
          $transitionmerge [entry_tmerge] (back_edge_to_loop_body first_time_through_loop_body) (loop_body_start)
          $entry <-& (loop_body_start)
          $T[aggregated_phi_sample_req] 
          $T[aggregated_phi_sample_ack] 
          $T[aggregated_phi_update_req] 
          $T[aggregated_phi_update_ack] 
          // do not loop-back unless all phi's have used up their triggering tokens.
          condition_evaluated <-& (aggregated_phi_update_ack)
          aggregated_phi_sample_req o<-& (aggregated_phi_update_ack 0)
          // start:  PHI statement phi_stmt_1417
          // 			$phi count_down := 			  packet_size $on   $entry 			  ncount_down $on   $loopback 
          // type of target is $uint<12>
          $T[phi_stmt_1417_sample_start_] 
          $T[phi_stmt_1417_sample_completed_] 
          $T[phi_stmt_1417_update_start_] 
          $T[phi_stmt_1417_update_completed_] 
          $T[phi_stmt_1417_sample_start__ps] 
          phi_stmt_1417_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_1417_sample_completed__ps] 
          phi_stmt_1417_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_1417_update_start__ps] 
          phi_stmt_1417_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_1417_update_completed__ps] 
          phi_stmt_1417_update_completed_ <-& (phi_stmt_1417_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_1417_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_1417_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_1417_update_start_)
          $T[phi_stmt_1417_loopback_trigger] 
          phi_stmt_1417_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_1417_loopback_sample_req] 
          $T[phi_stmt_1417_loopback_sample_req_ps] 
          phi_stmt_1417_loopback_sample_req <-& (phi_stmt_1417_loopback_sample_req_ps)
          phi_stmt_1417_loopback_sample_req &-> ($null)
          $T[phi_stmt_1417_entry_trigger] 
          phi_stmt_1417_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_1417_entry_sample_req] 
          $T[phi_stmt_1417_entry_sample_req_ps] 
          phi_stmt_1417_entry_sample_req <-& (phi_stmt_1417_entry_sample_req_ps)
          phi_stmt_1417_entry_sample_req &-> ($null)
          phi_stmt_1417_update_start_ o<-& (phi_stmt_1417_update_completed_ 0)
          phi_stmt_1417_sample_start_ o<-& (phi_stmt_1417_sample_completed_ 1)
          $T[phi_stmt_1417_merged_reqs] 
          $T[phi_stmt_1417_phi_mux_ack] 
          $T[phi_stmt_1417_phi_mux_ack_ps] 
          phi_stmt_1417_phi_mux_ack_ps <-& (phi_stmt_1417_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_1417_update_completed_)
          $T[R_packet_size_1419_sample_start__ps] 
          $T[R_packet_size_1419_sample_completed__ps] 
          $T[R_packet_size_1419_update_start__ps] 
          $T[R_packet_size_1419_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 0
          $T[R_packet_size_1419_sample_start_] 
          $T[R_packet_size_1419_sample_completed_] 
          $T[R_packet_size_1419_update_start_] 
          $T[R_packet_size_1419_update_completed_] 
          ;;[R_packet_size_1419_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_packet_size_1419_sample_start_ &-> (R_packet_size_1419_Sample)
          R_packet_size_1419_sample_completed_ <-& (R_packet_size_1419_Sample)
          ;;[R_packet_size_1419_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_packet_size_1419_update_start_ &-> (R_packet_size_1419_Update)
          R_packet_size_1419_update_completed_ <-& (R_packet_size_1419_Update)
          // RAW reenables for packet_size
          // Phi start dependency for implicit/constant alternative.
          R_packet_size_1419_sample_start_ <-& (R_packet_size_1419_sample_start__ps)
          R_packet_size_1419_update_start_ <-& (R_packet_size_1419_update_start__ps)
          // Phi complete dependency.
          R_packet_size_1419_sample_completed__ps <-& (R_packet_size_1419_sample_completed_)
          R_packet_size_1419_update_completed__ps <-& (R_packet_size_1419_update_completed_)
          $T[R_ncount_down_1420_sample_start__ps] 
          $T[R_ncount_down_1420_sample_completed__ps] 
          $T[R_ncount_down_1420_update_start__ps] 
          $T[R_ncount_down_1420_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_ncount_down_1420_sample_start_] 
          $T[R_ncount_down_1420_sample_completed_] 
          $T[R_ncount_down_1420_update_start_] 
          $T[R_ncount_down_1420_update_completed_] 
          ;;[R_ncount_down_1420_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_ncount_down_1420_sample_start_ &-> (R_ncount_down_1420_Sample)
          R_ncount_down_1420_sample_completed_ <-& (R_ncount_down_1420_Sample)
          ;;[R_ncount_down_1420_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_ncount_down_1420_update_start_ &-> (R_ncount_down_1420_Update)
          R_ncount_down_1420_update_completed_ <-& (R_ncount_down_1420_Update)
          // RAW reenables for ncount_down
          // Phi start dependency for implicit/constant alternative.
          R_ncount_down_1420_sample_start_ <-& (R_ncount_down_1420_sample_start__ps)
          R_ncount_down_1420_update_start_ <-& (R_ncount_down_1420_update_start__ps)
          // Phi complete dependency.
          R_ncount_down_1420_sample_completed__ps <-& (R_ncount_down_1420_sample_completed_)
          R_ncount_down_1420_update_completed__ps <-& (R_ncount_down_1420_update_completed_)
          $phisequencer [ phi_stmt_1417_phi_seq] : 
          phi_stmt_1417_entry_trigger R_packet_size_1419_sample_start__ps R_packet_size_1419_sample_completed__ps R_packet_size_1419_update_start__ps R_packet_size_1419_update_completed__ps phi_stmt_1417_loopback_trigger R_ncount_down_1420_sample_start__ps R_ncount_down_1420_sample_completed__ps R_ncount_down_1420_update_start__ps R_ncount_down_1420_update_completed__ps :
          phi_stmt_1417_sample_start__ps phi_stmt_1417_sample_completed__ps phi_stmt_1417_update_start__ps phi_stmt_1417_update_completed__ps :
          phi_stmt_1417_entry_sample_req_ps phi_stmt_1417_loopback_sample_req_ps : 
          phi_stmt_1417_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_1417
          // start:  PHI statement phi_stmt_1421
          // 			$phi mem_addr := 			  (control_data_addr + 16 ) $on   $entry 			  nmem_addr $on   $loopback 
          // type of target is $uint<36>
          $T[phi_stmt_1421_sample_start_] 
          $T[phi_stmt_1421_sample_completed_] 
          $T[phi_stmt_1421_update_start_] 
          $T[phi_stmt_1421_update_completed_] 
          $T[phi_stmt_1421_sample_start__ps] 
          phi_stmt_1421_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_1421_sample_completed__ps] 
          phi_stmt_1421_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_1421_update_start__ps] 
          phi_stmt_1421_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_1421_update_completed__ps] 
          phi_stmt_1421_update_completed_ <-& (phi_stmt_1421_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_1421_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_1421_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_1421_update_start_)
          $T[phi_stmt_1421_loopback_trigger] 
          phi_stmt_1421_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_1421_loopback_sample_req] 
          $T[phi_stmt_1421_loopback_sample_req_ps] 
          phi_stmt_1421_loopback_sample_req <-& (phi_stmt_1421_loopback_sample_req_ps)
          phi_stmt_1421_loopback_sample_req &-> ($null)
          $T[phi_stmt_1421_entry_trigger] 
          phi_stmt_1421_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_1421_entry_sample_req] 
          $T[phi_stmt_1421_entry_sample_req_ps] 
          phi_stmt_1421_entry_sample_req <-& (phi_stmt_1421_entry_sample_req_ps)
          phi_stmt_1421_entry_sample_req &-> ($null)
          phi_stmt_1421_update_start_ o<-& (phi_stmt_1421_update_completed_ 0)
          phi_stmt_1421_sample_start_ o<-& (phi_stmt_1421_sample_completed_ 1)
          $T[phi_stmt_1421_merged_reqs] 
          $T[phi_stmt_1421_phi_mux_ack] 
          $T[phi_stmt_1421_phi_mux_ack_ps] 
          phi_stmt_1421_phi_mux_ack_ps <-& (phi_stmt_1421_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_1421_update_completed_)
          $T[ADD_u36_u36_1425_sample_start__ps] 
          $T[ADD_u36_u36_1425_sample_completed__ps] 
          $T[ADD_u36_u36_1425_update_start__ps] 
          $T[ADD_u36_u36_1425_update_completed__ps] 
          // source expression in Phi alternative 0
          // (control_data_addr + 16 )
          $T[ADD_u36_u36_1425_sample_start_] 
          $T[ADD_u36_u36_1425_sample_completed_] 
          $T[ADD_u36_u36_1425_update_start_] 
          $T[ADD_u36_u36_1425_update_completed_] 
          // control_data_addr
          // start: Forward dependencies from control_data_addr to transition ADD_u36_u36_1425_sample_start_
          // done: Forward dependencies from control_data_addr to transition ADD_u36_u36_1425_sample_start_
          ;;[ADD_u36_u36_1425_Sample] 
          {
            // binary expression 
            $T [rr] $T [ra]  // (split) binary operation 
          }
          ;;[ADD_u36_u36_1425_Update] 
          {
            // binary expression 
            $T [cr] $T [ca] // (split) binary operation 
          }
          ADD_u36_u36_1425_sample_start_ &-> (ADD_u36_u36_1425_Sample)
          ADD_u36_u36_1425_sample_completed_ <-& (ADD_u36_u36_1425_Sample)
          ADD_u36_u36_1425_sample_completed_ &-> ($null)
          ADD_u36_u36_1425_update_start_ &-> (ADD_u36_u36_1425_Update)
          ADD_u36_u36_1425_update_completed_ <-& (ADD_u36_u36_1425_Update)
          // RAW reenables for control_data_addr
          // self-release: 
          ADD_u36_u36_1425_sample_start_ o<-& (ADD_u36_u36_1425_sample_completed_ 1)
          $null &-> (ADD_u36_u36_1425_update_start_)
          ADD_u36_u36_1425_update_start_ o<-& (ADD_u36_u36_1425_update_completed_ 0)
          // Phi start dependency
          ADD_u36_u36_1425_sample_start_ <-& (ADD_u36_u36_1425_sample_start__ps)
          ADD_u36_u36_1425_update_start_ <-& (ADD_u36_u36_1425_update_start__ps)
          // RAW reenables for (control_data_addr + 16 )
          // producer  and  consumer are both determined by PHI statements.
          // Phi complete dependency.
          ADD_u36_u36_1425_sample_completed__ps <-& (ADD_u36_u36_1425_sample_completed_)
          ADD_u36_u36_1425_update_completed__ps <-& (ADD_u36_u36_1425_update_completed_)
          $T[R_nmem_addr_1426_sample_start__ps] 
          $T[R_nmem_addr_1426_sample_completed__ps] 
          $T[R_nmem_addr_1426_update_start__ps] 
          $T[R_nmem_addr_1426_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_nmem_addr_1426_sample_start_] 
          $T[R_nmem_addr_1426_sample_completed_] 
          $T[R_nmem_addr_1426_update_start_] 
          $T[R_nmem_addr_1426_update_completed_] 
          ;;[R_nmem_addr_1426_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_nmem_addr_1426_sample_start_ &-> (R_nmem_addr_1426_Sample)
          R_nmem_addr_1426_sample_completed_ <-& (R_nmem_addr_1426_Sample)
          ;;[R_nmem_addr_1426_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_nmem_addr_1426_update_start_ &-> (R_nmem_addr_1426_Update)
          R_nmem_addr_1426_update_completed_ <-& (R_nmem_addr_1426_Update)
          // RAW reenables for nmem_addr
          // Phi start dependency for implicit/constant alternative.
          R_nmem_addr_1426_sample_start_ <-& (R_nmem_addr_1426_sample_start__ps)
          R_nmem_addr_1426_update_start_ <-& (R_nmem_addr_1426_update_start__ps)
          // Phi complete dependency.
          R_nmem_addr_1426_sample_completed__ps <-& (R_nmem_addr_1426_sample_completed_)
          R_nmem_addr_1426_update_completed__ps <-& (R_nmem_addr_1426_update_completed_)
          $phisequencer [ phi_stmt_1421_phi_seq] : 
          phi_stmt_1421_entry_trigger ADD_u36_u36_1425_sample_start__ps ADD_u36_u36_1425_sample_completed__ps ADD_u36_u36_1425_update_start__ps ADD_u36_u36_1425_update_completed__ps phi_stmt_1421_loopback_trigger R_nmem_addr_1426_sample_start__ps R_nmem_addr_1426_sample_completed__ps R_nmem_addr_1426_update_start__ps R_nmem_addr_1426_update_completed__ps :
          phi_stmt_1421_sample_start__ps phi_stmt_1421_sample_completed__ps phi_stmt_1421_update_start__ps phi_stmt_1421_update_completed__ps :
          phi_stmt_1421_entry_sample_req_ps phi_stmt_1421_loopback_sample_req_ps : 
          phi_stmt_1421_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_1421
          // start: 			$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b1  ) FULL_BYTE_MASK mem_addr ($bitcast ($uint<64>) _b0  ) ) (data ) 
          //  file nic.linked.aa, line 627
          $T[call_stmt_1437_sample_start_] 
          $T[call_stmt_1437_sample_completed_] 
          $T[call_stmt_1437_update_start_] 
          $T[call_stmt_1437_update_completed_] 
          // Call input argument 0
          // Call input argument 1
          // Call input argument 2
          // Call input argument 3
          // mem_addr
          // Call input argument 4
          // start: Forward dependencies from mem_addr to transition call_stmt_1437_sample_start_
          call_stmt_1437_sample_start_ <-& (phi_stmt_1421_update_completed_)
          // done: Forward dependencies from mem_addr to transition call_stmt_1437_sample_start_
          // RAW reenables for mem_addr
          phi_stmt_1421_update_start_ o<-& (call_stmt_1437_sample_completed_ 0)
          ;;[call_stmt_1437_Sample] 
          {
            $T [crr] $T [cra] 
          }
          ;;[call_stmt_1437_Update] 
          {
            $T [ccr] $T [cca] 
          }
          call_stmt_1437_sample_start_ &-> (call_stmt_1437_Sample)
          call_stmt_1437_sample_completed_ <-& (call_stmt_1437_Sample)
          call_stmt_1437_sample_completed_ &-> ($null)
          call_stmt_1437_update_start_ &-> (call_stmt_1437_Update)
          call_stmt_1437_update_completed_ <-& (call_stmt_1437_Update)
          // Call output argument 0
          // (as target) data
          // self-release: 
          call_stmt_1437_sample_start_ o<-& (call_stmt_1437_sample_completed_ 1)
          $null &-> (call_stmt_1437_update_start_)
          call_stmt_1437_update_start_ o<-& (call_stmt_1437_update_completed_ 0)
          // start: WAR dependencies for data
          // done: WAR dependencies for data
          // end: 			$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b1  ) FULL_BYTE_MASK mem_addr ($bitcast ($uint<64>) _b0  ) ) (data ) 
          // start:  			nic_to_mac_transmit_pipe := ((($bitcast ($uint<1>) _b1  ) && data) && FULL_BYTE_MASK) $buffering 1// bits of buffering = 73. 
          //  file nic.linked.aa, line 628
          // Source expression
          // ((($bitcast ($uint<1>) _b1  ) && data) && FULL_BYTE_MASK)
          $T[CONCAT_u65_u73_1444_sample_start_] 
          $T[CONCAT_u65_u73_1444_sample_completed_] 
          $T[CONCAT_u65_u73_1444_update_start_] 
          $T[CONCAT_u65_u73_1444_update_completed_] 
          // (($bitcast ($uint<1>) _b1  ) && data)
          // data
          // start: Forward dependencies from (($bitcast ($uint<1>) _b1  ) && data) to transition CONCAT_u65_u73_1444_sample_start_
          CONCAT_u65_u73_1444_sample_start_ <-& (call_stmt_1437_update_completed_)
          // done: Forward dependencies from (($bitcast ($uint<1>) _b1  ) && data) to transition CONCAT_u65_u73_1444_sample_start_
          ;;[CONCAT_u65_u73_1444_Sample] 
          {
            // binary expression 
            $T [rr] $T [ra]  // (split) binary operation 
          }
          ;;[CONCAT_u65_u73_1444_Update] 
          {
            // binary expression 
            $T [cr] $T [ca] // (split) binary operation 
          }
          CONCAT_u65_u73_1444_sample_start_ &-> (CONCAT_u65_u73_1444_Sample)
          CONCAT_u65_u73_1444_sample_completed_ <-& (CONCAT_u65_u73_1444_Sample)
          CONCAT_u65_u73_1444_sample_completed_ &-> ($null)
          CONCAT_u65_u73_1444_update_start_ &-> (CONCAT_u65_u73_1444_Update)
          CONCAT_u65_u73_1444_update_completed_ <-& (CONCAT_u65_u73_1444_Update)
          // RAW reenables for (($bitcast ($uint<1>) _b1  ) && data)
          call_stmt_1437_update_start_ o<-& (CONCAT_u65_u73_1444_sample_completed_ 0)
          // self-release: 
          CONCAT_u65_u73_1444_sample_start_ o<-& (CONCAT_u65_u73_1444_sample_completed_ 1)
          $null &-> (CONCAT_u65_u73_1444_update_start_)
          CONCAT_u65_u73_1444_update_start_ o<-& (CONCAT_u65_u73_1444_update_completed_ 0)
          // Target expression
          // (as target) nic_to_mac_transmit_pipe
          $T[WPIPE_nic_to_mac_transmit_pipe_1438_sample_start_] 
          $T[WPIPE_nic_to_mac_transmit_pipe_1438_sample_completed_] 
          $T[WPIPE_nic_to_mac_transmit_pipe_1438_update_start_] 
          $T[WPIPE_nic_to_mac_transmit_pipe_1438_update_completed_] 
          ;;[WPIPE_nic_to_mac_transmit_pipe_1438_Sample] 
          {
            // pipe write sample-start nic_to_mac_transmit_pipe
            $T [req] $T [ack] 
          }
          ;;[WPIPE_nic_to_mac_transmit_pipe_1438_Update] 
          {
            // pipe write update (complete) nic_to_mac_transmit_pipe
            $T [req] $T [ack] 
          }
          WPIPE_nic_to_mac_transmit_pipe_1438_sample_start_ &-> (WPIPE_nic_to_mac_transmit_pipe_1438_Sample)
          WPIPE_nic_to_mac_transmit_pipe_1438_sample_completed_ <-& (WPIPE_nic_to_mac_transmit_pipe_1438_Sample)
          WPIPE_nic_to_mac_transmit_pipe_1438_update_start_ <-& (WPIPE_nic_to_mac_transmit_pipe_1438_sample_completed_)
          WPIPE_nic_to_mac_transmit_pipe_1438_update_start_ &-> (WPIPE_nic_to_mac_transmit_pipe_1438_Update)
          WPIPE_nic_to_mac_transmit_pipe_1438_update_completed_ <-& (WPIPE_nic_to_mac_transmit_pipe_1438_Update)
          WPIPE_nic_to_mac_transmit_pipe_1438_sample_start_ o<-& (WPIPE_nic_to_mac_transmit_pipe_1438_update_completed_ 0)
          // start: Forward dependencies from ((($bitcast ($uint<1>) _b1  ) && data) && FULL_BYTE_MASK) to transition WPIPE_nic_to_mac_transmit_pipe_1438_sample_start_
          WPIPE_nic_to_mac_transmit_pipe_1438_sample_start_ <-& (CONCAT_u65_u73_1444_update_completed_)
          // done: Forward dependencies from ((($bitcast ($uint<1>) _b1  ) && data) && FULL_BYTE_MASK) to transition WPIPE_nic_to_mac_transmit_pipe_1438_sample_start_
          // RAW reenables for ((($bitcast ($uint<1>) _b1  ) && data) && FULL_BYTE_MASK)
          CONCAT_u65_u73_1444_update_start_ o<-& (WPIPE_nic_to_mac_transmit_pipe_1438_sample_completed_ 0)
          // end:  			nic_to_mac_transmit_pipe := ((($bitcast ($uint<1>) _b1  ) && data) && FULL_BYTE_MASK) $buffering 1// bits of buffering = 73. 
          // start: WAR dependencies for ncount_down
          // WAR dependency: Read: ncount_down before Write: 			$volatile ncount_down := (count_down - 8 ) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for ncount_down
          // start:  			$volatile ncount_down := (count_down - 8 ) $buffering 1
          //  file nic.linked.aa, line 629
          // volatile! 
          // Source expression
          // (count_down - 8 )
          // count_down
          // Target expression
          // (as target) ncount_down
          // start: WAR dependencies for ncount_down
          // WAR dependency: Read: ncount_down before Write: 			$volatile ncount_down := (count_down - 8 ) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for ncount_down
          // end:  			$volatile ncount_down := (count_down - 8 ) $buffering 1
          // start: WAR dependencies for nmem_addr
          // WAR dependency: Read: nmem_addr before Write: 			$volatile nmem_addr := (mem_addr + 8 ) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for nmem_addr
          // start:  			$volatile nmem_addr := (mem_addr + 8 ) $buffering 1
          //  file nic.linked.aa, line 630
          // volatile! 
          // Source expression
          // (mem_addr + 8 )
          // mem_addr
          // Target expression
          // (as target) nmem_addr
          // start: WAR dependencies for nmem_addr
          // WAR dependency: Read: nmem_addr before Write: 			$volatile nmem_addr := (mem_addr + 8 ) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for nmem_addr
          // end:  			$volatile nmem_addr := (mem_addr + 8 ) $buffering 1
          // start: WAR dependencies for not_last_word
          // done: WAR dependencies for not_last_word
          // start:  			$volatile not_last_word := (ncount_down > 8 ) $buffering 1
          //  file nic.linked.aa, line 631
          // volatile! 
          // Source expression
          // (ncount_down > 8 )
          // ncount_down
          // Target expression
          // (as target) not_last_word
          // start: WAR dependencies for not_last_word
          // done: WAR dependencies for not_last_word
          // end:  			$volatile not_last_word := (ncount_down > 8 ) $buffering 1
          // not_last_word
          $T [loop_body_delay_to_condition_start] $delay
          loop_body_start &-> (loop_body_delay_to_condition_start)
          loop_body_delay_to_condition_start &-> (condition_evaluated)
          // start: Forward dependencies from not_last_word to transition condition_evaluated
          condition_evaluated <-& (phi_stmt_1417_update_completed_)
          // done: Forward dependencies from not_last_word to transition condition_evaluated
          condition_evaluated &-> ($null)
          // load-store dependencies..
          // pipe read/write dependencies for pipe MEMORY_TO_NIC_RESPONSE
          // read-dependencies for pipe MEMORY_TO_NIC_RESPONSE
          // write-dependencies for pipe MEMORY_TO_NIC_RESPONSE
          // signal write dependencies for MEMORY_TO_NIC_RESPONSE
          // pipe read/write dependencies for pipe NIC_TO_MEMORY_REQUEST
          // read-dependencies for pipe NIC_TO_MEMORY_REQUEST
          // write-dependencies for pipe NIC_TO_MEMORY_REQUEST
          // signal write dependencies for NIC_TO_MEMORY_REQUEST
          // pipe read/write dependencies for pipe nic_to_mac_transmit_pipe
          // read-dependencies for pipe nic_to_mac_transmit_pipe
          // write-dependencies for pipe nic_to_mac_transmit_pipe
          // signal write dependencies for nic_to_mac_transmit_pipe
        }
        ( first_time_through_loop_body  back_edge_to_loop_body) 
        ( condition_evaluated )
        ;; [loop_exit] 
        {
          $T [ack] 
        }
        ;; [loop_taken] 
        {
          $T [ack] 
        }
        do_while_stmt_1415__entry__ <-| ($entry)
        loop_body_done <-| ( do_while_stmt_1415_loop_body ) 
        condition_done |-> (loop_exit loop_taken)
        do_while_stmt_1415__exit__ |-> ($exit)
        $bind condition_done <= do_while_stmt_1415_loop_body : condition_evaluated
        $bind do_while_stmt_1415__entry__  => do_while_stmt_1415_loop_body : first_time_through_loop_body 
        $bind loop_back  => do_while_stmt_1415_loop_body : back_edge_to_loop_body 
        $terminate (loop_exit loop_taken loop_body_done) (loop_back do_while_stmt_1415__exit__)
      }
      do_while_stmt_1415__entry__ |-> (do_while_stmt_1415)
      do_while_stmt_1415__exit__ <-| (do_while_stmt_1415)
      ::[call_stmt_1472_to_assign_stmt_1488] 
      {
        // start: 		$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b1  ) FULL_BYTE_MASK nmem_addr ($bitcast ($uint<64>) _b0  ) ) (last_word ) 
        //  file nic.linked.aa, line 633
        $T[call_stmt_1472_sample_start_] 
        $T[call_stmt_1472_sample_completed_] 
        $T[call_stmt_1472_update_start_] 
        $T[call_stmt_1472_update_completed_] 
        // Call input argument 0
        // Call input argument 1
        // Call input argument 2
        // Call input argument 3
        // nmem_addr
        // Call input argument 4
        // start: Forward dependencies from nmem_addr to transition call_stmt_1472_sample_start_
        // done: Forward dependencies from nmem_addr to transition call_stmt_1472_sample_start_
        ;;[call_stmt_1472_Sample] 
        {
          $T [crr] $T [cra] 
        }
        ;;[call_stmt_1472_Update] 
        {
          $T [ccr] $T [cca] 
        }
        call_stmt_1472_sample_start_ &-> (call_stmt_1472_Sample)
        call_stmt_1472_sample_completed_ <-& (call_stmt_1472_Sample)
        call_stmt_1472_sample_completed_ &-> ($null)
        call_stmt_1472_update_start_ &-> (call_stmt_1472_Update)
        call_stmt_1472_update_completed_ <-& (call_stmt_1472_Update)
        // Call output argument 0
        // (as target) last_word
        // start: WAR dependencies for last_word
        // done: WAR dependencies for last_word
        // end: 		$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b1  ) FULL_BYTE_MASK nmem_addr ($bitcast ($uint<64>) _b0  ) ) (last_word ) 
        // start:  		nic_to_mac_transmit_ppe := ((($bitcast ($uint<1>) _b1  ) && last_word) && last_tkeep) $buffering 1// bits of buffering = 73.  Orphaned statement with target nic_to_mac_transmit_ppe ?? 
        //  file nic.linked.aa, line 634
        // Source expression
        // ((($bitcast ($uint<1>) _b1  ) && last_word) && last_tkeep)
        $T[CONCAT_u65_u73_1479_sample_start_] 
        $T[CONCAT_u65_u73_1479_sample_completed_] 
        $T[CONCAT_u65_u73_1479_update_start_] 
        $T[CONCAT_u65_u73_1479_update_completed_] 
        // (($bitcast ($uint<1>) _b1  ) && last_word)
        // last_word
        // last_tkeep
        // start: Forward dependencies from (($bitcast ($uint<1>) _b1  ) && last_word) to transition CONCAT_u65_u73_1479_sample_start_
        CONCAT_u65_u73_1479_sample_start_ <-& (call_stmt_1472_update_completed_)
        // done: Forward dependencies from (($bitcast ($uint<1>) _b1  ) && last_word) to transition CONCAT_u65_u73_1479_sample_start_
        // start: Forward dependencies from last_tkeep to transition CONCAT_u65_u73_1479_sample_start_
        // done: Forward dependencies from last_tkeep to transition CONCAT_u65_u73_1479_sample_start_
        ;;[CONCAT_u65_u73_1479_Sample] 
        {
          // binary expression 
          $T [rr] $T [ra]  // (split) binary operation 
        }
        ;;[CONCAT_u65_u73_1479_Update] 
        {
          // binary expression 
          $T [cr] $T [ca] // (split) binary operation 
        }
        CONCAT_u65_u73_1479_sample_start_ &-> (CONCAT_u65_u73_1479_Sample)
        CONCAT_u65_u73_1479_sample_completed_ <-& (CONCAT_u65_u73_1479_Sample)
        CONCAT_u65_u73_1479_sample_completed_ &-> ($null)
        CONCAT_u65_u73_1479_update_start_ &-> (CONCAT_u65_u73_1479_Update)
        CONCAT_u65_u73_1479_update_completed_ <-& (CONCAT_u65_u73_1479_Update)
        // Target expression
        // (as target) nic_to_mac_transmit_ppe
        // start: WAR dependencies for nic_to_mac_transmit_ppe
        // done: WAR dependencies for nic_to_mac_transmit_ppe
        // end:  		nic_to_mac_transmit_ppe := ((($bitcast ($uint<1>) _b1  ) && last_word) && last_tkeep) $buffering 1// bits of buffering = 73.  Orphaned statement with target nic_to_mac_transmit_ppe ?? 
        // start:  		status := (packet_size == ($bitcast ($uint<12>) (nmem_addr - control_data_addr) )) $buffering 1// bits of buffering = 1. 
        //  file nic.linked.aa, line 635
        // Source expression
        // (packet_size == ($bitcast ($uint<12>) (nmem_addr - control_data_addr) ))
        $T[EQ_u12_u1_1487_sample_start_] 
        $T[EQ_u12_u1_1487_sample_completed_] 
        $T[EQ_u12_u1_1487_update_start_] 
        $T[EQ_u12_u1_1487_update_completed_] 
        // packet_size
        // ($bitcast ($uint<12>) (nmem_addr - control_data_addr) )
        // (nmem_addr - control_data_addr)
        // nmem_addr
        // control_data_addr
        // start: Forward dependencies from packet_size to transition EQ_u12_u1_1487_sample_start_
        // done: Forward dependencies from packet_size to transition EQ_u12_u1_1487_sample_start_
        // start: Forward dependencies from ($bitcast ($uint<12>) (nmem_addr - control_data_addr) ) to transition EQ_u12_u1_1487_sample_start_
        // done: Forward dependencies from ($bitcast ($uint<12>) (nmem_addr - control_data_addr) ) to transition EQ_u12_u1_1487_sample_start_
        ;;[EQ_u12_u1_1487_Sample] 
        {
          // binary expression 
          $T [rr] $T [ra]  // (split) binary operation 
        }
        ;;[EQ_u12_u1_1487_Update] 
        {
          // binary expression 
          $T [cr] $T [ca] // (split) binary operation 
        }
        EQ_u12_u1_1487_sample_start_ &-> (EQ_u12_u1_1487_Sample)
        EQ_u12_u1_1487_sample_completed_ <-& (EQ_u12_u1_1487_Sample)
        EQ_u12_u1_1487_sample_completed_ &-> ($null)
        EQ_u12_u1_1487_update_start_ &-> (EQ_u12_u1_1487_Update)
        EQ_u12_u1_1487_update_completed_ <-& (EQ_u12_u1_1487_Update)
        // Target expression
        // (as target) status
        // status
        // write to interface object
        // start: WAR dependencies for status
        // done: WAR dependencies for status
        // status
        // write to interface object
        // end:  		status := (packet_size == ($bitcast ($uint<12>) (nmem_addr - control_data_addr) )) $buffering 1// bits of buffering = 1. 
        // load-store dependencies..
        // pipe read/write dependencies for pipe MEMORY_TO_NIC_RESPONSE
        // read-dependencies for pipe MEMORY_TO_NIC_RESPONSE
        // write-dependencies for pipe MEMORY_TO_NIC_RESPONSE
        // signal write dependencies for MEMORY_TO_NIC_RESPONSE
        // pipe read/write dependencies for pipe NIC_TO_MEMORY_REQUEST
        // read-dependencies for pipe NIC_TO_MEMORY_REQUEST
        // write-dependencies for pipe NIC_TO_MEMORY_REQUEST
        // signal write dependencies for NIC_TO_MEMORY_REQUEST
      }
      call_stmt_1472_to_assign_stmt_1488__entry__ |-> (call_stmt_1472_to_assign_stmt_1488)
      call_stmt_1472_to_assign_stmt_1488__exit__ <-| (call_stmt_1472_to_assign_stmt_1488)
      do_while_stmt_1415__entry__ <-| (branch_block_stmt_1414__entry__)
      call_stmt_1472_to_assign_stmt_1488__entry__ <-| (do_while_stmt_1415__exit__)
      call_stmt_1472_to_assign_stmt_1488__exit__ |-> (branch_block_stmt_1414__exit__)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %transmitPacket%loop%
    //  file nic.linked.aa, line 621
    // constant-object-declarations for block %transmitPacket%loop
    //  file nic.linked.aa, line 617
    // constant-object-declarations for block %transmitPacket
    //  file nic.linked.aa, line 607
    // ($bitcast ($uint<3>) _b0  )
    $constant $W[type_cast_1386_wire_constant] : $int<3> := _b000// 0
    // 	$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b1  ) FULL_BYTE_MASK control_data_addr ($bitcast ($uint<64>) _b0  ) ) (control_data ) 
    //  file nic.linked.aa, line 613
    // ($bitcast ($uint<1>) _b0  )
    $constant $W[type_cast_1391_wire_constant] : $int<1> := _b0// 0
    // ($bitcast ($uint<1>) _b1  )
    $constant $W[type_cast_1393_wire_constant] : $int<1> := _b1// 1
    // FULL_BYTE_MASK
    $constant $W[R_FULL_BYTE_MASK_1394_wire_constant] : $int<8> := _b11111111// 255
    // ($bitcast ($uint<64>) _b0  )
    $constant $W[type_cast_1397_wire_constant] : $int<64> := _b0000000000000000000000000000000000000000000000000000000000000000// 0
    // constant-declarations for block %transmitPacket%loop
    //  file nic.linked.aa, line 617
    // do-while statement  
    //  file nic.linked.aa, line 619
    // constant-declarations for block %transmitPacket%loop%
    //  file nic.linked.aa, line 621
    // constant-declarations for phi:  			$phi count_down := 			  packet_size $on   $entry 			  ncount_down $on   $loopback 
    // type of target is $uint<12>
    //  file nic.linked.aa, line 622
    // constant-declarations for phi:  			$phi mem_addr := 			  (control_data_addr + 16 ) $on   $entry 			  nmem_addr $on   $loopback 
    // type of target is $uint<36>
    //  file nic.linked.aa, line 624
    // 16 
    $constant $W[konst_1424_wire_constant] : $int<36> := _b000000000000000000000000000000010000// 16
    // 			$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b1  ) FULL_BYTE_MASK mem_addr ($bitcast ($uint<64>) _b0  ) ) (data ) 
    //  file nic.linked.aa, line 627
    // ($bitcast ($uint<1>) _b0  )
    $constant $W[type_cast_1429_wire_constant] : $int<1> := _b0// 0
    // ($bitcast ($uint<1>) _b1  )
    $constant $W[type_cast_1431_wire_constant] : $int<1> := _b1// 1
    // FULL_BYTE_MASK
    $constant $W[R_FULL_BYTE_MASK_1432_wire_constant] : $int<8> := _b11111111// 255
    // ($bitcast ($uint<64>) _b0  )
    $constant $W[type_cast_1435_wire_constant] : $int<64> := _b0000000000000000000000000000000000000000000000000000000000000000// 0
    // ($bitcast ($uint<1>) _b1  )
    $constant $W[type_cast_1440_wire_constant] : $int<1> := _b1// 1
    // FULL_BYTE_MASK
    $constant $W[R_FULL_BYTE_MASK_1443_wire_constant] : $int<8> := _b11111111// 255
    // 8 
    $constant $W[konst_1448_wire_constant] : $int<12> := _b000000001000// 8
    // 8 
    $constant $W[konst_1453_wire_constant] : $int<36> := _b000000000000000000000000000000001000// 8
    // 8 
    $constant $W[konst_1458_wire_constant] : $int<12> := _b000000001000// 8
    // 		$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b1  ) FULL_BYTE_MASK nmem_addr ($bitcast ($uint<64>) _b0  ) ) (last_word ) 
    //  file nic.linked.aa, line 633
    // ($bitcast ($uint<1>) _b0  )
    $constant $W[type_cast_1464_wire_constant] : $int<1> := _b0// 0
    // ($bitcast ($uint<1>) _b1  )
    $constant $W[type_cast_1466_wire_constant] : $int<1> := _b1// 1
    // FULL_BYTE_MASK
    $constant $W[R_FULL_BYTE_MASK_1467_wire_constant] : $int<8> := _b11111111// 255
    // ($bitcast ($uint<64>) _b0  )
    $constant $W[type_cast_1470_wire_constant] : $int<64> := _b0000000000000000000000000000000000000000000000000000000000000000// 0
    // ($bitcast ($uint<1>) _b1  )
    $constant $W[type_cast_1475_wire_constant] : $int<1> := _b1// 1
    // 	$volatile control_data_addr := ($bitcast ($uint<36>) (( $slice packet_pointer 31 1 )  && ($bitcast ($uint<3>) _b0  )) ) $buffering 1
    //  file nic.linked.aa, line 612
    // ( $slice packet_pointer 31 1 ) 
    $intermediate $W[slice_1384_wire] : $int<31>
    // (( $slice packet_pointer 31 1 )  && ($bitcast ($uint<3>) _b0  ))
    $intermediate $W[CONCAT_u31_u34_1387_wire] : $int<34>
    // control_data_addr
    $W[control_data_addr_1389] : $int<36>
    // 	$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b1  ) FULL_BYTE_MASK control_data_addr ($bitcast ($uint<64>) _b0  ) ) (control_data ) 
    //  file nic.linked.aa, line 613
    // control_data
    $W[control_data_1399] : $int<64>
    // 	$volatile unused := ( $slice control_data 63 20 )  $buffering 1
    //  file nic.linked.aa, line 614
    // unused
    $W[unused_1404] : $int<44>
    // 	$volatile packet_size := ( $slice control_data 19 8 )  $buffering 1
    //  file nic.linked.aa, line 615
    // packet_size
    $W[packet_size_1409] : $int<12>
    // 	$volatile last_tkeep := ( $slice control_data 7 0 )  $buffering 1
    //  file nic.linked.aa, line 616
    // last_tkeep
    $W[last_tkeep_1413] : $int<8>
    // block %transmitPacket%loop
    //  file nic.linked.aa, line 617
    // do-while statement  
    //  file nic.linked.aa, line 619
    // merge-statement  
    //  file nic.linked.aa, line 621
    // 			$phi count_down := 			  packet_size $on   $entry 			  ncount_down $on   $loopback 
    // type of target is $uint<12>
    //  file nic.linked.aa, line 622
    $W[packet_size_1409_1419_buffered] : $int<12>
    $W[ncount_down_1450_1420_buffered] : $int<12>
    // count_down
    $W[count_down_1417] : $int<12>
    // 			$phi mem_addr := 			  (control_data_addr + 16 ) $on   $entry 			  nmem_addr $on   $loopback 
    // type of target is $uint<36>
    //  file nic.linked.aa, line 624
    // (control_data_addr + 16 )
    $intermediate $W[ADD_u36_u36_1425_wire] : $int<36>
    $W[nmem_addr_1455_1426_buffered] : $int<36>
    // mem_addr
    $W[mem_addr_1421] : $int<36>
    // 			$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b1  ) FULL_BYTE_MASK mem_addr ($bitcast ($uint<64>) _b0  ) ) (data ) 
    //  file nic.linked.aa, line 627
    // data
    $W[data_1437] : $int<64>
    // 			nic_to_mac_transmit_pipe := ((($bitcast ($uint<1>) _b1  ) && data) && FULL_BYTE_MASK) $buffering 1// bits of buffering = 73. 
    //  file nic.linked.aa, line 628
    // (($bitcast ($uint<1>) _b1  ) && data)
    $intermediate $W[CONCAT_u1_u65_1442_wire] : $int<65>
    // ((($bitcast ($uint<1>) _b1  ) && data) && FULL_BYTE_MASK)
    $intermediate $W[CONCAT_u65_u73_1444_wire] : $int<73>
    // nic_to_mac_transmit_pipe
    // 			$volatile ncount_down := (count_down - 8 ) $buffering 1
    //  file nic.linked.aa, line 629
    // ncount_down
    $W[ncount_down_1450] : $int<12>
    // 			$volatile nmem_addr := (mem_addr + 8 ) $buffering 1
    //  file nic.linked.aa, line 630
    // nmem_addr
    $W[nmem_addr_1455] : $int<36>
    // 			$volatile not_last_word := (ncount_down > 8 ) $buffering 1
    //  file nic.linked.aa, line 631
    // not_last_word
    $W[not_last_word_1460] : $int<1>
    // 		$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b1  ) FULL_BYTE_MASK nmem_addr ($bitcast ($uint<64>) _b0  ) ) (last_word ) 
    //  file nic.linked.aa, line 633
    // last_word
    $W[last_word_1472] : $int<64>
    // 		nic_to_mac_transmit_ppe := ((($bitcast ($uint<1>) _b1  ) && last_word) && last_tkeep) $buffering 1// bits of buffering = 73.  Orphaned statement with target nic_to_mac_transmit_ppe ?? 
    //  file nic.linked.aa, line 634
    // (($bitcast ($uint<1>) _b1  ) && last_word)
    $intermediate $W[CONCAT_u1_u65_1477_wire] : $int<65>
    // nic_to_mac_transmit_ppe
    $W[nic_to_mac_transmit_ppe_1480] : $int<73>
    // 		status := (packet_size == ($bitcast ($uint<12>) (nmem_addr - control_data_addr) )) $buffering 1// bits of buffering = 1. 
    //  file nic.linked.aa, line 635
    // (nmem_addr - control_data_addr)
    $intermediate $W[SUB_u36_u36_1485_wire] : $int<36>
    // ($bitcast ($uint<12>) (nmem_addr - control_data_addr) )
    $intermediate $W[type_cast_1486_wire] : $int<12>
    // status
    // 	$volatile control_data_addr := ($bitcast ($uint<36>) (( $slice packet_pointer 31 1 )  && ($bitcast ($uint<3>) _b0  )) ) $buffering 1
    //  file nic.linked.aa, line 612
    // ( $slice packet_pointer 31 1 ) 
    [:] [slice_1384_inst] (packet_pointer 31 1) (slice_1384_wire)  $flowthrough
    $delay slice_1384_inst 0
    // (( $slice packet_pointer 31 1 )  && ($bitcast ($uint<3>) _b0  ))
    &&[CONCAT_u31_u34_1387_inst] (slice_1384_wire type_cast_1386_wire_constant) (CONCAT_u31_u34_1387_wire)   $flowthrough 
    $delay CONCAT_u31_u34_1387_inst 0
    // ($bitcast ($uint<36>) (( $slice packet_pointer 31 1 )  && ($bitcast ($uint<3>) _b0  )) )
    # := [type_cast_1388_inst] (CONCAT_u31_u34_1387_wire) (control_data_addr_1389)   $flowthrough
    $delay type_cast_1388_inst 0
    // 	$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b1  ) FULL_BYTE_MASK control_data_addr ($bitcast ($uint<64>) _b0  ) ) (control_data ) 
    //  file nic.linked.aa, line 613
    $call [call_stmt_1399_call] $module accessMemory(type_cast_1391_wire_constant type_cast_1393_wire_constant R_FULL_BYTE_MASK_1394_wire_constant control_data_addr_1389 type_cast_1397_wire_constant) (control_data_1399)  
    $delay call_stmt_1399_call 4
    $buffering  $in call_stmt_1399_call type_cast_1391_wire_constant 1
    $buffering  $in call_stmt_1399_call type_cast_1393_wire_constant 1
    $buffering  $in call_stmt_1399_call R_FULL_BYTE_MASK_1394_wire_constant 1
    $buffering  $in call_stmt_1399_call control_data_addr_1389 1
    $buffering  $in call_stmt_1399_call type_cast_1397_wire_constant 1
    $buffering  $out call_stmt_1399_call control_data_1399 1
    // 	$volatile unused := ( $slice control_data 63 20 )  $buffering 1
    //  file nic.linked.aa, line 614
    // ( $slice control_data 63 20 ) 
    [:] [slice_1403_inst] (control_data_1399 63 20) (unused_1404)  $flowthrough
    $delay slice_1403_inst 0
    // 	$volatile packet_size := ( $slice control_data 19 8 )  $buffering 1
    //  file nic.linked.aa, line 615
    // ( $slice control_data 19 8 ) 
    [:] [slice_1408_inst] (control_data_1399 19 8) (packet_size_1409)  $flowthrough
    $delay slice_1408_inst 0
    // 	$volatile last_tkeep := ( $slice control_data 7 0 )  $buffering 1
    //  file nic.linked.aa, line 616
    // ( $slice control_data 7 0 ) 
    [:] [slice_1412_inst] (control_data_1399 7 0) (last_tkeep_1413)  $flowthrough
    $delay slice_1412_inst 0
    // datapath-instances for block %transmitPacket%loop
    //  file nic.linked.aa, line 617
    // datapath-instances for do-while  
    //  file nic.linked.aa, line 619
    ==0? [do_while_stmt_1415_branch] (not_last_word_1460)
    $flowthrough
    // data-path instances for merge  
    //  file nic.linked.aa, line 621
    // 			$phi count_down := 			  packet_size $on   $entry 			  ncount_down $on   $loopback 
    // type of target is $uint<12>
    //  file nic.linked.aa, line 622
    # := [packet_size_1409_1419_buf] (packet_size_1409) (packet_size_1409_1419_buffered)     $fullrate
    $buffering $out packet_size_1409_1419_buf packet_size_1409_1419_buffered  1
    # := [ncount_down_1450_1420_buf] (ncount_down_1450) (ncount_down_1450_1420_buffered)     $fullrate
    $buffering $out ncount_down_1450_1420_buf ncount_down_1450_1420_buffered  1
    # $phi [phi_stmt_1417] (packet_size_1409_1419_buffered ncount_down_1450_1420_buffered) ( count_down_1417 ) $fullrate
    // $buffering  $out phi_stmt_1417 count_down_1417 2
    // 			$phi mem_addr := 			  (control_data_addr + 16 ) $on   $entry 			  nmem_addr $on   $loopback 
    // type of target is $uint<36>
    //  file nic.linked.aa, line 624
    // (control_data_addr + 16 )
    +[ADD_u36_u36_1425_inst] (control_data_addr_1389 konst_1424_wire_constant) (ADD_u36_u36_1425_wire)    $fullrate
    $buffering  $out ADD_u36_u36_1425_inst ADD_u36_u36_1425_wire 1
    $delay ADD_u36_u36_1425_inst 1
    # := [nmem_addr_1455_1426_buf] (nmem_addr_1455) (nmem_addr_1455_1426_buffered)     $fullrate
    $buffering $out nmem_addr_1455_1426_buf nmem_addr_1455_1426_buffered  1
    # $phi [phi_stmt_1421] (ADD_u36_u36_1425_wire nmem_addr_1455_1426_buffered) ( mem_addr_1421 ) $fullrate
    // $buffering  $out phi_stmt_1421 mem_addr_1421 2
    // 			$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b1  ) FULL_BYTE_MASK mem_addr ($bitcast ($uint<64>) _b0  ) ) (data ) 
    //  file nic.linked.aa, line 627
    $call [call_stmt_1437_call] $module accessMemory(type_cast_1429_wire_constant type_cast_1431_wire_constant R_FULL_BYTE_MASK_1432_wire_constant mem_addr_1421 type_cast_1435_wire_constant) (data_1437)   $fullrate
    $delay call_stmt_1437_call 4
    $buffering  $in call_stmt_1437_call type_cast_1429_wire_constant 1
    $buffering  $in call_stmt_1437_call type_cast_1431_wire_constant 1
    $buffering  $in call_stmt_1437_call R_FULL_BYTE_MASK_1432_wire_constant 1
    $buffering  $in call_stmt_1437_call mem_addr_1421 1
    $buffering  $in call_stmt_1437_call type_cast_1435_wire_constant 1
    $buffering  $out call_stmt_1437_call data_1437 1
    // 			nic_to_mac_transmit_pipe := ((($bitcast ($uint<1>) _b1  ) && data) && FULL_BYTE_MASK) $buffering 1// bits of buffering = 73. 
    //  file nic.linked.aa, line 628
    // (($bitcast ($uint<1>) _b1  ) && data)
    &&[CONCAT_u1_u65_1442_inst] (type_cast_1440_wire_constant data_1437) (CONCAT_u1_u65_1442_wire)   $flowthrough 
    $delay CONCAT_u1_u65_1442_inst 0
    // ((($bitcast ($uint<1>) _b1  ) && data) && FULL_BYTE_MASK)
    &&[CONCAT_u65_u73_1444_inst] (CONCAT_u1_u65_1442_wire R_FULL_BYTE_MASK_1443_wire_constant) (CONCAT_u65_u73_1444_wire)    $fullrate
    $buffering  $out CONCAT_u65_u73_1444_inst CONCAT_u65_u73_1444_wire 1
    $delay CONCAT_u65_u73_1444_inst 1
    // nic_to_mac_transmit_pipe
    $ioport $out [WPIPE_nic_to_mac_transmit_pipe_1438_inst]  (CONCAT_u65_u73_1444_wire) (nic_to_mac_transmit_pipe)  $fullrate 
    // 			$volatile ncount_down := (count_down - 8 ) $buffering 1
    //  file nic.linked.aa, line 629
    // (count_down - 8 )
    -[SUB_u12_u12_1449_inst] (count_down_1417 konst_1448_wire_constant) (ncount_down_1450)   $flowthrough 
    $delay SUB_u12_u12_1449_inst 0
    // 			$volatile nmem_addr := (mem_addr + 8 ) $buffering 1
    //  file nic.linked.aa, line 630
    // (mem_addr + 8 )
    +[ADD_u36_u36_1454_inst] (mem_addr_1421 konst_1453_wire_constant) (nmem_addr_1455)   $flowthrough 
    $delay ADD_u36_u36_1454_inst 0
    // 			$volatile not_last_word := (ncount_down > 8 ) $buffering 1
    //  file nic.linked.aa, line 631
    // (ncount_down > 8 )
    >[UGT_u12_u1_1459_inst] (ncount_down_1450 konst_1458_wire_constant) (not_last_word_1460)   $flowthrough 
    $delay UGT_u12_u1_1459_inst 0
    // 		$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b1  ) FULL_BYTE_MASK nmem_addr ($bitcast ($uint<64>) _b0  ) ) (last_word ) 
    //  file nic.linked.aa, line 633
    $call [call_stmt_1472_call] $module accessMemory(type_cast_1464_wire_constant type_cast_1466_wire_constant R_FULL_BYTE_MASK_1467_wire_constant nmem_addr_1455 type_cast_1470_wire_constant) (last_word_1472)  
    $delay call_stmt_1472_call 4
    $buffering  $in call_stmt_1472_call type_cast_1464_wire_constant 1
    $buffering  $in call_stmt_1472_call type_cast_1466_wire_constant 1
    $buffering  $in call_stmt_1472_call R_FULL_BYTE_MASK_1467_wire_constant 1
    $buffering  $in call_stmt_1472_call nmem_addr_1455 1
    $buffering  $in call_stmt_1472_call type_cast_1470_wire_constant 1
    $buffering  $out call_stmt_1472_call last_word_1472 1
    // 		nic_to_mac_transmit_ppe := ((($bitcast ($uint<1>) _b1  ) && last_word) && last_tkeep) $buffering 1// bits of buffering = 73.  Orphaned statement with target nic_to_mac_transmit_ppe ?? 
    //  file nic.linked.aa, line 634
    // (($bitcast ($uint<1>) _b1  ) && last_word)
    &&[CONCAT_u1_u65_1477_inst] (type_cast_1475_wire_constant last_word_1472) (CONCAT_u1_u65_1477_wire)   $flowthrough 
    $delay CONCAT_u1_u65_1477_inst 0
    // ((($bitcast ($uint<1>) _b1  ) && last_word) && last_tkeep)
    &&[CONCAT_u65_u73_1479_inst] (CONCAT_u1_u65_1477_wire last_tkeep_1413) (nic_to_mac_transmit_ppe_1480)   
    $buffering  $out CONCAT_u65_u73_1479_inst nic_to_mac_transmit_ppe_1480 1
    $delay CONCAT_u65_u73_1479_inst 1
    // 		status := (packet_size == ($bitcast ($uint<12>) (nmem_addr - control_data_addr) )) $buffering 1// bits of buffering = 1. 
    //  file nic.linked.aa, line 635
    // (nmem_addr - control_data_addr)
    -[SUB_u36_u36_1485_inst] (nmem_addr_1455 control_data_addr_1389) (SUB_u36_u36_1485_wire)   $flowthrough 
    $delay SUB_u36_u36_1485_inst 0
    // ($bitcast ($uint<12>) (nmem_addr - control_data_addr) )
    # := [type_cast_1486_inst] (SUB_u36_u36_1485_wire) (type_cast_1486_wire)   $flowthrough
    $delay type_cast_1486_inst 0
    // (packet_size == ($bitcast ($uint<12>) (nmem_addr - control_data_addr) ))
    ==[EQ_u12_u1_1487_inst] (packet_size_1409 type_cast_1486_wire) (status)   
    $buffering  $out EQ_u12_u1_1487_inst status 1
    $delay EQ_u12_u1_1487_inst 1
  }
  // end data-path
  // 	$volatile control_data_addr := ($bitcast ($uint<36>) (( $slice packet_pointer 31 1 )  && ($bitcast ($uint<3>) _b0  )) ) $buffering 1
  //  file nic.linked.aa, line 612
  // (( $slice packet_pointer 31 1 )  && ($bitcast ($uint<3>) _b0  ))
  // packet_pointer
  // 	$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b1  ) FULL_BYTE_MASK control_data_addr ($bitcast ($uint<64>) _b0  ) ) (control_data ) 
  //  file nic.linked.aa, line 613
  // control_data_addr
  call_stmt_1399_call <=> (assign_stmt_1389_to_assign_stmt_1413/call_stmt_1399_Sample/crr assign_stmt_1389_to_assign_stmt_1413/call_stmt_1399_Update/ccr) (assign_stmt_1389_to_assign_stmt_1413/call_stmt_1399_Sample/cra assign_stmt_1389_to_assign_stmt_1413/call_stmt_1399_Update/cca)
  // 	$volatile unused := ( $slice control_data 63 20 )  $buffering 1
  //  file nic.linked.aa, line 614
  // control_data
  // 	$volatile packet_size := ( $slice control_data 19 8 )  $buffering 1
  //  file nic.linked.aa, line 615
  // control_data
  // 	$volatile last_tkeep := ( $slice control_data 7 0 )  $buffering 1
  //  file nic.linked.aa, line 616
  // control_data
  // CP-DP links for do-while  do_while_stmt_1415
  //  file nic.linked.aa, line 619
  phi_stmt_1417 <=> (branch_block_stmt_1414/do_while_stmt_1415/do_while_stmt_1415_loop_body/phi_stmt_1417_entry_sample_req branch_block_stmt_1414/do_while_stmt_1415/do_while_stmt_1415_loop_body/phi_stmt_1417_loopback_sample_req) (branch_block_stmt_1414/do_while_stmt_1415/do_while_stmt_1415_loop_body/phi_stmt_1417_phi_mux_ack)
  packet_size_1409_1419_buf <=> (branch_block_stmt_1414/do_while_stmt_1415/do_while_stmt_1415_loop_body/R_packet_size_1419_Sample/req branch_block_stmt_1414/do_while_stmt_1415/do_while_stmt_1415_loop_body/R_packet_size_1419_Update/req) (branch_block_stmt_1414/do_while_stmt_1415/do_while_stmt_1415_loop_body/R_packet_size_1419_Sample/ack branch_block_stmt_1414/do_while_stmt_1415/do_while_stmt_1415_loop_body/R_packet_size_1419_Update/ack)
  ncount_down_1450_1420_buf <=> (branch_block_stmt_1414/do_while_stmt_1415/do_while_stmt_1415_loop_body/R_ncount_down_1420_Sample/req branch_block_stmt_1414/do_while_stmt_1415/do_while_stmt_1415_loop_body/R_ncount_down_1420_Update/req) (branch_block_stmt_1414/do_while_stmt_1415/do_while_stmt_1415_loop_body/R_ncount_down_1420_Sample/ack branch_block_stmt_1414/do_while_stmt_1415/do_while_stmt_1415_loop_body/R_ncount_down_1420_Update/ack)
  phi_stmt_1421 <=> (branch_block_stmt_1414/do_while_stmt_1415/do_while_stmt_1415_loop_body/phi_stmt_1421_entry_sample_req branch_block_stmt_1414/do_while_stmt_1415/do_while_stmt_1415_loop_body/phi_stmt_1421_loopback_sample_req) (branch_block_stmt_1414/do_while_stmt_1415/do_while_stmt_1415_loop_body/phi_stmt_1421_phi_mux_ack)
  // (control_data_addr + 16 )
  // control_data_addr
  ADD_u36_u36_1425_inst <=> (branch_block_stmt_1414/do_while_stmt_1415/do_while_stmt_1415_loop_body/ADD_u36_u36_1425_Sample/rr branch_block_stmt_1414/do_while_stmt_1415/do_while_stmt_1415_loop_body/ADD_u36_u36_1425_Update/cr) (branch_block_stmt_1414/do_while_stmt_1415/do_while_stmt_1415_loop_body/ADD_u36_u36_1425_Sample/ra branch_block_stmt_1414/do_while_stmt_1415/do_while_stmt_1415_loop_body/ADD_u36_u36_1425_Update/ca)
  nmem_addr_1455_1426_buf <=> (branch_block_stmt_1414/do_while_stmt_1415/do_while_stmt_1415_loop_body/R_nmem_addr_1426_Sample/req branch_block_stmt_1414/do_while_stmt_1415/do_while_stmt_1415_loop_body/R_nmem_addr_1426_Update/req) (branch_block_stmt_1414/do_while_stmt_1415/do_while_stmt_1415_loop_body/R_nmem_addr_1426_Sample/ack branch_block_stmt_1414/do_while_stmt_1415/do_while_stmt_1415_loop_body/R_nmem_addr_1426_Update/ack)
  // 			$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b1  ) FULL_BYTE_MASK mem_addr ($bitcast ($uint<64>) _b0  ) ) (data ) 
  //  file nic.linked.aa, line 627
  // mem_addr
  call_stmt_1437_call <=> (branch_block_stmt_1414/do_while_stmt_1415/do_while_stmt_1415_loop_body/call_stmt_1437_Sample/crr branch_block_stmt_1414/do_while_stmt_1415/do_while_stmt_1415_loop_body/call_stmt_1437_Update/ccr) (branch_block_stmt_1414/do_while_stmt_1415/do_while_stmt_1415_loop_body/call_stmt_1437_Sample/cra branch_block_stmt_1414/do_while_stmt_1415/do_while_stmt_1415_loop_body/call_stmt_1437_Update/cca)
  // 			nic_to_mac_transmit_pipe := ((($bitcast ($uint<1>) _b1  ) && data) && FULL_BYTE_MASK) $buffering 1// bits of buffering = 73. 
  //  file nic.linked.aa, line 628
  // ((($bitcast ($uint<1>) _b1  ) && data) && FULL_BYTE_MASK)
  // (($bitcast ($uint<1>) _b1  ) && data)
  // data
  CONCAT_u65_u73_1444_inst <=> (branch_block_stmt_1414/do_while_stmt_1415/do_while_stmt_1415_loop_body/CONCAT_u65_u73_1444_Sample/rr branch_block_stmt_1414/do_while_stmt_1415/do_while_stmt_1415_loop_body/CONCAT_u65_u73_1444_Update/cr) (branch_block_stmt_1414/do_while_stmt_1415/do_while_stmt_1415_loop_body/CONCAT_u65_u73_1444_Sample/ra branch_block_stmt_1414/do_while_stmt_1415/do_while_stmt_1415_loop_body/CONCAT_u65_u73_1444_Update/ca)
  // nic_to_mac_transmit_pipe
  WPIPE_nic_to_mac_transmit_pipe_1438_inst <=> (branch_block_stmt_1414/do_while_stmt_1415/do_while_stmt_1415_loop_body/WPIPE_nic_to_mac_transmit_pipe_1438_Sample/req branch_block_stmt_1414/do_while_stmt_1415/do_while_stmt_1415_loop_body/WPIPE_nic_to_mac_transmit_pipe_1438_Update/req) (branch_block_stmt_1414/do_while_stmt_1415/do_while_stmt_1415_loop_body/WPIPE_nic_to_mac_transmit_pipe_1438_Sample/ack branch_block_stmt_1414/do_while_stmt_1415/do_while_stmt_1415_loop_body/WPIPE_nic_to_mac_transmit_pipe_1438_Update/ack)
  // 			$volatile ncount_down := (count_down - 8 ) $buffering 1
  //  file nic.linked.aa, line 629
  // (count_down - 8 )
  // count_down
  // 			$volatile nmem_addr := (mem_addr + 8 ) $buffering 1
  //  file nic.linked.aa, line 630
  // (mem_addr + 8 )
  // mem_addr
  // 			$volatile not_last_word := (ncount_down > 8 ) $buffering 1
  //  file nic.linked.aa, line 631
  // (ncount_down > 8 )
  // ncount_down
  // not_last_word
  do_while_stmt_1415_branch <=> (branch_block_stmt_1414/do_while_stmt_1415/do_while_stmt_1415_loop_body/condition_evaluated) (branch_block_stmt_1414/do_while_stmt_1415/loop_exit/ack branch_block_stmt_1414/do_while_stmt_1415/loop_taken/ack)
  // 		$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b1  ) FULL_BYTE_MASK nmem_addr ($bitcast ($uint<64>) _b0  ) ) (last_word ) 
  //  file nic.linked.aa, line 633
  // nmem_addr
  call_stmt_1472_call <=> (branch_block_stmt_1414/call_stmt_1472_to_assign_stmt_1488/call_stmt_1472_Sample/crr branch_block_stmt_1414/call_stmt_1472_to_assign_stmt_1488/call_stmt_1472_Update/ccr) (branch_block_stmt_1414/call_stmt_1472_to_assign_stmt_1488/call_stmt_1472_Sample/cra branch_block_stmt_1414/call_stmt_1472_to_assign_stmt_1488/call_stmt_1472_Update/cca)
  // 		nic_to_mac_transmit_ppe := ((($bitcast ($uint<1>) _b1  ) && last_word) && last_tkeep) $buffering 1// bits of buffering = 73.  Orphaned statement with target nic_to_mac_transmit_ppe ?? 
  //  file nic.linked.aa, line 634
  // ((($bitcast ($uint<1>) _b1  ) && last_word) && last_tkeep)
  // (($bitcast ($uint<1>) _b1  ) && last_word)
  // last_word
  // last_tkeep
  CONCAT_u65_u73_1479_inst <=> (branch_block_stmt_1414/call_stmt_1472_to_assign_stmt_1488/CONCAT_u65_u73_1479_Sample/rr branch_block_stmt_1414/call_stmt_1472_to_assign_stmt_1488/CONCAT_u65_u73_1479_Update/cr) (branch_block_stmt_1414/call_stmt_1472_to_assign_stmt_1488/CONCAT_u65_u73_1479_Sample/ra branch_block_stmt_1414/call_stmt_1472_to_assign_stmt_1488/CONCAT_u65_u73_1479_Update/ca)
  // 		status := (packet_size == ($bitcast ($uint<12>) (nmem_addr - control_data_addr) )) $buffering 1// bits of buffering = 1. 
  //  file nic.linked.aa, line 635
  // (packet_size == ($bitcast ($uint<12>) (nmem_addr - control_data_addr) ))
  // packet_size
  // (nmem_addr - control_data_addr)
  // nmem_addr
  // control_data_addr
  EQ_u12_u1_1487_inst <=> (branch_block_stmt_1414/call_stmt_1472_to_assign_stmt_1488/EQ_u12_u1_1487_Sample/rr branch_block_stmt_1414/call_stmt_1472_to_assign_stmt_1488/EQ_u12_u1_1487_Update/cr) (branch_block_stmt_1414/call_stmt_1472_to_assign_stmt_1488/EQ_u12_u1_1487_Sample/ra branch_block_stmt_1414/call_stmt_1472_to_assign_stmt_1488/EQ_u12_u1_1487_Update/ca)
}
$module [transmitEngineDaemon] 
{
  // pipe-declarations for block %transmitEngineDaemon
  //  file nic.linked.aa, line 638
  // pipe-declarations for block %transmitEngineDaemon%main
  //  file nic.linked.aa, line 644
  // pipe-declarations for block %transmitEngineDaemon%main%
  //  file nic.linked.aa, line 646
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    ::[assign_stmt_1494] 
    {
      // start:  	LAST_READ_TX_QUEUE_INDEX := 0  $buffering 1// bits of buffering = 6. 
      //  file nic.linked.aa, line 643
      // Target expression
      // (as target) LAST_READ_TX_QUEUE_INDEX
      $T[WPIPE_LAST_READ_TX_QUEUE_INDEX_1492_sample_start_] 
      $T[WPIPE_LAST_READ_TX_QUEUE_INDEX_1492_sample_completed_] 
      $T[WPIPE_LAST_READ_TX_QUEUE_INDEX_1492_update_start_] 
      $T[WPIPE_LAST_READ_TX_QUEUE_INDEX_1492_update_completed_] 
      ;;[WPIPE_LAST_READ_TX_QUEUE_INDEX_1492_Sample] 
      {
        // pipe write sample-start LAST_READ_TX_QUEUE_INDEX
        $T [req] $T [ack] 
      }
      ;;[WPIPE_LAST_READ_TX_QUEUE_INDEX_1492_Update] 
      {
        // pipe write update (complete) LAST_READ_TX_QUEUE_INDEX
        $T [req] $T [ack] 
      }
      WPIPE_LAST_READ_TX_QUEUE_INDEX_1492_sample_start_ &-> (WPIPE_LAST_READ_TX_QUEUE_INDEX_1492_Sample)
      WPIPE_LAST_READ_TX_QUEUE_INDEX_1492_sample_completed_ <-& (WPIPE_LAST_READ_TX_QUEUE_INDEX_1492_Sample)
      WPIPE_LAST_READ_TX_QUEUE_INDEX_1492_update_start_ <-& (WPIPE_LAST_READ_TX_QUEUE_INDEX_1492_sample_completed_)
      WPIPE_LAST_READ_TX_QUEUE_INDEX_1492_update_start_ &-> (WPIPE_LAST_READ_TX_QUEUE_INDEX_1492_Update)
      WPIPE_LAST_READ_TX_QUEUE_INDEX_1492_update_completed_ <-& (WPIPE_LAST_READ_TX_QUEUE_INDEX_1492_Update)
      // end:  	LAST_READ_TX_QUEUE_INDEX := 0  $buffering 1// bits of buffering = 6. 
      // load-store dependencies..
      // pipe read/write dependencies for pipe LAST_READ_TX_QUEUE_INDEX
      // read-dependencies for pipe LAST_READ_TX_QUEUE_INDEX
      // write-dependencies for pipe LAST_READ_TX_QUEUE_INDEX
      // signal write dependencies for LAST_READ_TX_QUEUE_INDEX
    }
    <>[branch_block_stmt_1495] // Branch Block  file nic.linked.aa, line 644
    {
      $P [branch_block_stmt_1495__entry__]
      branch_block_stmt_1495__entry__ <-| ($entry)
      $P [branch_block_stmt_1495__exit__]
      branch_block_stmt_1495__exit__ |-> ($exit)
      $P [merge_stmt_1496__entry__] 
      $P [merge_stmt_1496__exit__] 
      $P [if_stmt_1497__entry__] 
      $P [if_stmt_1497__exit__] 
      $P [do_while_stmt_1504__entry__] 
      $P [do_while_stmt_1504__exit__] 
      $P [disable_loopback]
      // if-statement  
      //  file nic.linked.aa, line 0
      ;;[if_stmt_1497_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      if_stmt_1497__entry__ |-> (if_stmt_1497_dead_link)
      if_stmt_1497__exit__ <-| (if_stmt_1497_dead_link)
      ;;[if_stmt_1497_eval_test] 
      {
        // test expression evaluate and trigger branch 
        // ( ~ (CONTROL_REGISTER [] 0 ) )
        ;;[NOT_u1_u1_1501] 
        {
          // unary expression 
          // (CONTROL_REGISTER [] 0 )
          ;;[BITSEL_u32_u1_1500] 
          {
            // binary expression 
            ||[BITSEL_u32_u1_1500_inputs] 
            {
              // CONTROL_REGISTER
              ;;[RPIPE_CONTROL_REGISTER_1498] 
              {
                // pipe read
                ;;[Sample] 
                {
                  $T [req] $T [ack] 
                }
                ;;[Update] 
                {
                  $T [req] $T [ack] 
                }
              }
            }
            // flow-through
            ;;[SplitProtocol] 
            {
              ;;[Sample] 
              {
                $T [rr] $T [ra]
              }
              ;;[Update] 
              {
                $T [cr] $T [ca]
              }
            }
          }
          // flow-through
          ;;[SplitProtocol] 
          {
            ;;[Sample] 
            {
              $T [rr] $T [ra]
            }
            ;;[Update] 
            {
              $T [cr] $T [ca]
            }
          }
        }
        $T [branch_req] 
      }
      if_stmt_1497__entry__ |-> (if_stmt_1497_eval_test)
      $P [NOT_u1_u1_1501_place]
      NOT_u1_u1_1501_place <-| (if_stmt_1497_eval_test)
      ;;[if_stmt_1497_if_link] 
      {
        $T [if_choice_transition] 
      }
      ;;[if_stmt_1497_else_link] 
      {
        $T [else_choice_transition] 
      }
      NOT_u1_u1_1501_place |-> (if_stmt_1497_if_link if_stmt_1497_else_link)
      $P [not_enabled_yet_loopback]
      not_enabled_yet_loopback <-| (if_stmt_1497_if_link)
      if_stmt_1497__exit__ <-| (if_stmt_1497_else_link)
      // do-while-statement  
      //  file nic.linked.aa, line 651
      <o> [do_while_stmt_1504]  $depth 31 $buffering 1 
      {
        $P[do_while_stmt_1504__entry__] 
        $P[do_while_stmt_1504__exit__] 
        $P[loop_back] 
        $P[condition_done] 
        $P[loop_body_done] 
        $pipeline [do_while_stmt_1504_loop_body] 
        {
          // Pipelined!
          $T[back_edge_to_loop_body] 
          $T[first_time_through_loop_body] 
          $T[loop_body_start] 
          $T[condition_evaluated] 
          $transitionmerge [entry_tmerge] (back_edge_to_loop_body first_time_through_loop_body) (loop_body_start)
          $entry <-& (loop_body_start)
          $T[aggregated_phi_sample_req] 
          $T[aggregated_phi_sample_ack] 
          $T[aggregated_phi_update_req] 
          $T[aggregated_phi_update_ack] 
          // do not loop-back unless all phi's have used up their triggering tokens.
          condition_evaluated <-& (aggregated_phi_update_ack)
          aggregated_phi_sample_req o<-& (aggregated_phi_update_ack 0)
          // start:  single source PHI statement phi_stmt_1506
          // 			$phi tx_q_index := 			  ((LAST_READ_TX_QUEUE_INDEX + 1 ) & ($bitcast ($uint<6>) (NUMBER_OF_SERVERS - 1 ) )) $on   $entry ,   $loopback 
          // type of target is $uint<6>
          $T[phi_stmt_1506_sample_start_] 
          $T[phi_stmt_1506_sample_completed_] 
          $T[phi_stmt_1506_update_start_] 
          $T[phi_stmt_1506_update_completed_] 
          aggregated_phi_sample_req <-& (phi_stmt_1506_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_1506_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_1506_update_start_)
          // non-implicit source expression in single-source phi
          // ((LAST_READ_TX_QUEUE_INDEX + 1 ) & ($bitcast ($uint<6>) (NUMBER_OF_SERVERS - 1 ) ))
          $T[AND_u6_u6_1515_sample_start_] 
          $T[AND_u6_u6_1515_sample_completed_] 
          $T[AND_u6_u6_1515_update_start_] 
          $T[AND_u6_u6_1515_update_completed_] 
          // (LAST_READ_TX_QUEUE_INDEX + 1 )
          // LAST_READ_TX_QUEUE_INDEX
          // ($bitcast ($uint<6>) (NUMBER_OF_SERVERS - 1 ) )
          // (NUMBER_OF_SERVERS - 1 )
          // NUMBER_OF_SERVERS
          // start: Forward dependencies from (LAST_READ_TX_QUEUE_INDEX + 1 ) to transition AND_u6_u6_1515_sample_start_
          // non-constant expression which depends only on signals/constants?
          // done: Forward dependencies from (LAST_READ_TX_QUEUE_INDEX + 1 ) to transition AND_u6_u6_1515_sample_start_
          // start: Forward dependencies from ($bitcast ($uint<6>) (NUMBER_OF_SERVERS - 1 ) ) to transition AND_u6_u6_1515_sample_start_
          // non-constant expression which depends only on signals/constants?
          // done: Forward dependencies from ($bitcast ($uint<6>) (NUMBER_OF_SERVERS - 1 ) ) to transition AND_u6_u6_1515_sample_start_
          ;;[AND_u6_u6_1515_Sample] 
          {
            // binary expression 
            $T [rr] $T [ra]  // (split) binary operation 
          }
          ;;[AND_u6_u6_1515_Update] 
          {
            // binary expression 
            $T [cr] $T [ca] // (split) binary operation 
          }
          AND_u6_u6_1515_sample_start_ &-> (AND_u6_u6_1515_Sample)
          AND_u6_u6_1515_sample_completed_ <-& (AND_u6_u6_1515_Sample)
          AND_u6_u6_1515_sample_completed_ &-> ($null)
          AND_u6_u6_1515_update_start_ &-> (AND_u6_u6_1515_Update)
          AND_u6_u6_1515_update_completed_ <-& (AND_u6_u6_1515_Update)
          // RAW reenables for (LAST_READ_TX_QUEUE_INDEX + 1 )
          // RAW reenables for ($bitcast ($uint<6>) (NUMBER_OF_SERVERS - 1 ) )
          // self-release: 
          AND_u6_u6_1515_sample_start_ o<-& (AND_u6_u6_1515_sample_completed_ 1)
          $null &-> (AND_u6_u6_1515_update_start_)
          AND_u6_u6_1515_update_start_ o<-& (AND_u6_u6_1515_update_completed_ 0)
          // RAW reenables for ((LAST_READ_TX_QUEUE_INDEX + 1 ) & ($bitcast ($uint<6>) (NUMBER_OF_SERVERS - 1 ) ))
          // producer  and  consumer are both determined by PHI statements.
          aggregated_phi_sample_req &-> (AND_u6_u6_1515_sample_start_)
          aggregated_phi_sample_ack <-& (AND_u6_u6_1515_sample_completed_)
          aggregated_phi_update_req &-> (AND_u6_u6_1515_update_start_)
          phi_stmt_1506_update_completed_ <-& (AND_u6_u6_1515_update_completed_)
          aggregated_phi_update_ack <-& (phi_stmt_1506_update_completed_)
          // done: PHI Statement phi_stmt_1506
          // start: 			$call getTxPacketPointerFromServer (tx_q_index ) (pkt_pointer tx_flag ) 
          //  file nic.linked.aa, line 657
          $T[call_stmt_1520_sample_start_] 
          $T[call_stmt_1520_sample_completed_] 
          $T[call_stmt_1520_update_start_] 
          $T[call_stmt_1520_update_completed_] 
          // Call input argument 0
          // tx_q_index
          // start: Forward dependencies from tx_q_index to transition call_stmt_1520_sample_start_
          call_stmt_1520_sample_start_ <-& (phi_stmt_1506_update_completed_)
          // done: Forward dependencies from tx_q_index to transition call_stmt_1520_sample_start_
          // RAW reenables for tx_q_index
          phi_stmt_1506_update_start_ o<-& (call_stmt_1520_sample_completed_ 0)
          ;;[call_stmt_1520_Sample] 
          {
            $T [crr] $T [cra] 
          }
          ;;[call_stmt_1520_Update] 
          {
            $T [ccr] $T [cca] 
          }
          call_stmt_1520_sample_start_ &-> (call_stmt_1520_Sample)
          call_stmt_1520_sample_completed_ <-& (call_stmt_1520_Sample)
          call_stmt_1520_sample_completed_ &-> ($null)
          call_stmt_1520_update_start_ &-> (call_stmt_1520_Update)
          call_stmt_1520_update_completed_ <-& (call_stmt_1520_Update)
          // Call output argument 0
          // (as target) pkt_pointer
          // Call output argument 1
          // (as target) tx_flag
          // self-release: 
          call_stmt_1520_sample_start_ o<-& (call_stmt_1520_sample_completed_ 1)
          $null &-> (call_stmt_1520_update_start_)
          call_stmt_1520_update_start_ o<-& (call_stmt_1520_update_completed_ 0)
          // start: WAR dependencies for pkt_pointer
          // done: WAR dependencies for pkt_pointer
          // start: WAR dependencies for tx_flag
          // done: WAR dependencies for tx_flag
          // end: 			$call getTxPacketPointerFromServer (tx_q_index ) (pkt_pointer tx_flag ) 
          // start: 			$guard (tx_flag) $call transmitPacket (pkt_pointer ) (transmitted_flag ) 
          //  file nic.linked.aa, line 658
          $T[call_stmt_1524_sample_start_] 
          $T[call_stmt_1524_sample_completed_] 
          $T[call_stmt_1524_update_start_] 
          $T[call_stmt_1524_update_completed_] 
          // Guard expression
          // tx_flag
          // start: Forward dependencies from tx_flag to transition call_stmt_1524_sample_start_
          call_stmt_1524_sample_start_ <-& (call_stmt_1520_update_completed_)
          // done: Forward dependencies from tx_flag to transition call_stmt_1524_sample_start_
          // RAW reenables for tx_flag
          call_stmt_1520_update_start_ o<-& (call_stmt_1524_sample_completed_ 0)
          // Call input argument 0
          // pkt_pointer
          // start: Forward dependencies from pkt_pointer to transition call_stmt_1524_sample_start_
          call_stmt_1524_sample_start_ <-& (call_stmt_1520_update_completed_)
          // done: Forward dependencies from pkt_pointer to transition call_stmt_1524_sample_start_
          // RAW reenables for pkt_pointer
          call_stmt_1520_update_start_ o<-& (call_stmt_1524_sample_completed_ 0)
          ;;[call_stmt_1524_Sample] 
          {
            $T [crr] $T [cra] 
          }
          ;;[call_stmt_1524_Update] 
          {
            $T [ccr] $T [cca] 
          }
          call_stmt_1524_sample_start_ &-> (call_stmt_1524_Sample)
          call_stmt_1524_sample_completed_ <-& (call_stmt_1524_Sample)
          call_stmt_1524_sample_completed_ &-> ($null)
          call_stmt_1524_update_start_ &-> (call_stmt_1524_Update)
          call_stmt_1524_update_completed_ <-& (call_stmt_1524_Update)
          // Call output argument 0
          // (as target) transmitted_flag
          // self-release: 
          call_stmt_1524_sample_start_ o<-& (call_stmt_1524_sample_completed_ 1)
          $null &-> (call_stmt_1524_update_start_)
          call_stmt_1524_update_start_ o<-& (call_stmt_1524_update_completed_ 0)
          // start: WAR dependencies for transmitted_flag
          // done: WAR dependencies for transmitted_flag
          // end: 			$guard (tx_flag) $call transmitPacket (pkt_pointer ) (transmitted_flag ) 
          // start: WAR dependencies for push_pointer_back_to_free_Q
          // done: WAR dependencies for push_pointer_back_to_free_Q
          // start:  			$volatile push_pointer_back_to_free_Q := (tx_flag & transmitted_flag) $buffering 1
          //  file nic.linked.aa, line 659
          // volatile! 
          // Source expression
          // (tx_flag & transmitted_flag)
          // tx_flag
          // transmitted_flag
          // Target expression
          // (as target) push_pointer_back_to_free_Q
          // start: WAR dependencies for push_pointer_back_to_free_Q
          // done: WAR dependencies for push_pointer_back_to_free_Q
          // end:  			$volatile push_pointer_back_to_free_Q := (tx_flag & transmitted_flag) $buffering 1
          // start: 			$guard (push_pointer_back_to_free_Q) $call pushIntoQueue (($bitcast ($uint<1>) _b1  ) FREE_Q pkt_pointer ) (push_status ) 
          //  file nic.linked.aa, line 660
          $T[call_stmt_1536_sample_start_] 
          $T[call_stmt_1536_sample_completed_] 
          $T[call_stmt_1536_update_start_] 
          $T[call_stmt_1536_update_completed_] 
          // Guard expression
          // push_pointer_back_to_free_Q
          // start: Forward dependencies from push_pointer_back_to_free_Q to transition call_stmt_1536_sample_start_
          call_stmt_1536_sample_start_ <-& (call_stmt_1520_update_completed_)
          call_stmt_1536_sample_start_ <-& (call_stmt_1524_update_completed_)
          // done: Forward dependencies from push_pointer_back_to_free_Q to transition call_stmt_1536_sample_start_
          // RAW reenables for push_pointer_back_to_free_Q
          call_stmt_1520_update_start_ o<-& (call_stmt_1536_sample_completed_ 0)
          call_stmt_1524_update_start_ o<-& (call_stmt_1536_sample_completed_ 0)
          // Call input argument 0
          // Call input argument 1
          // FREE_Q
          // Call input argument 2
          // pkt_pointer
          // start: Forward dependencies from FREE_Q to transition call_stmt_1536_sample_start_
          // special case... expr is signal read, which does not involve control..
          // RAW reenables for FREE_Q
          // start: Forward dependencies from pkt_pointer to transition call_stmt_1536_sample_start_
          call_stmt_1536_sample_start_ <-& (call_stmt_1520_update_completed_)
          // done: Forward dependencies from pkt_pointer to transition call_stmt_1536_sample_start_
          // RAW reenables for pkt_pointer
          call_stmt_1520_update_start_ o<-& (call_stmt_1536_sample_completed_ 0)
          ;;[call_stmt_1536_Sample] 
          {
            $T [crr] $T [cra] 
          }
          ;;[call_stmt_1536_Update] 
          {
            $T [ccr] $T [cca] 
          }
          call_stmt_1536_sample_start_ &-> (call_stmt_1536_Sample)
          call_stmt_1536_sample_completed_ <-& (call_stmt_1536_Sample)
          call_stmt_1536_sample_completed_ &-> ($null)
          call_stmt_1536_update_start_ &-> (call_stmt_1536_Update)
          call_stmt_1536_update_completed_ <-& (call_stmt_1536_Update)
          // Call output argument 0
          // (as target) push_status
          // self-release: 
          call_stmt_1536_sample_start_ o<-& (call_stmt_1536_sample_completed_ 1)
          $null &-> (call_stmt_1536_update_start_)
          call_stmt_1536_update_start_ o<-& (call_stmt_1536_update_completed_ 0)
          // start: WAR dependencies for push_status
          // done: WAR dependencies for push_status
          // end: 			$guard (push_pointer_back_to_free_Q) $call pushIntoQueue (($bitcast ($uint<1>) _b1  ) FREE_Q pkt_pointer ) (push_status ) 
          // start:  			LAST_READ_TX_QUEUE_INDEX := tx_q_index $buffering 1// bits of buffering = 6. 
          //  file nic.linked.aa, line 661
          // Source expression
          // tx_q_index
          // Target expression
          // (as target) LAST_READ_TX_QUEUE_INDEX
          $T[WPIPE_LAST_READ_TX_QUEUE_INDEX_1537_sample_start_] 
          $T[WPIPE_LAST_READ_TX_QUEUE_INDEX_1537_sample_completed_] 
          $T[WPIPE_LAST_READ_TX_QUEUE_INDEX_1537_update_start_] 
          $T[WPIPE_LAST_READ_TX_QUEUE_INDEX_1537_update_completed_] 
          ;;[WPIPE_LAST_READ_TX_QUEUE_INDEX_1537_Sample] 
          {
            // pipe write sample-start LAST_READ_TX_QUEUE_INDEX
            $T [req] $T [ack] 
          }
          ;;[WPIPE_LAST_READ_TX_QUEUE_INDEX_1537_Update] 
          {
            // pipe write update (complete) LAST_READ_TX_QUEUE_INDEX
            $T [req] $T [ack] 
          }
          WPIPE_LAST_READ_TX_QUEUE_INDEX_1537_sample_start_ &-> (WPIPE_LAST_READ_TX_QUEUE_INDEX_1537_Sample)
          WPIPE_LAST_READ_TX_QUEUE_INDEX_1537_sample_completed_ <-& (WPIPE_LAST_READ_TX_QUEUE_INDEX_1537_Sample)
          WPIPE_LAST_READ_TX_QUEUE_INDEX_1537_update_start_ <-& (WPIPE_LAST_READ_TX_QUEUE_INDEX_1537_sample_completed_)
          WPIPE_LAST_READ_TX_QUEUE_INDEX_1537_update_start_ &-> (WPIPE_LAST_READ_TX_QUEUE_INDEX_1537_Update)
          WPIPE_LAST_READ_TX_QUEUE_INDEX_1537_update_completed_ <-& (WPIPE_LAST_READ_TX_QUEUE_INDEX_1537_Update)
          WPIPE_LAST_READ_TX_QUEUE_INDEX_1537_sample_start_ o<-& (WPIPE_LAST_READ_TX_QUEUE_INDEX_1537_update_completed_ 0)
          // start: Forward dependencies from tx_q_index to transition WPIPE_LAST_READ_TX_QUEUE_INDEX_1537_sample_start_
          WPIPE_LAST_READ_TX_QUEUE_INDEX_1537_sample_start_ <-& (phi_stmt_1506_update_completed_)
          // done: Forward dependencies from tx_q_index to transition WPIPE_LAST_READ_TX_QUEUE_INDEX_1537_sample_start_
          // RAW reenables for tx_q_index
          phi_stmt_1506_update_start_ o<-& (WPIPE_LAST_READ_TX_QUEUE_INDEX_1537_sample_completed_ 0)
          // end:  			LAST_READ_TX_QUEUE_INDEX := tx_q_index $buffering 1// bits of buffering = 6. 
          // (CONTROL_REGISTER [] 0 )
          // CONTROL_REGISTER
          $T [loop_body_delay_to_condition_start] $delay
          loop_body_start &-> (loop_body_delay_to_condition_start)
          loop_body_delay_to_condition_start &-> (condition_evaluated)
          // start: Forward dependencies from (CONTROL_REGISTER [] 0 ) to transition condition_evaluated
          // non-constant expression which depends only on signals/constants?
          // done: Forward dependencies from (CONTROL_REGISTER [] 0 ) to transition condition_evaluated
          condition_evaluated &-> ($null)
          // load-store dependencies..
          // pipe read/write dependencies for pipe LAST_READ_TX_QUEUE_INDEX
          // read-dependencies for pipe LAST_READ_TX_QUEUE_INDEX
          // write-dependencies for pipe LAST_READ_TX_QUEUE_INDEX
          // signal write dependencies for LAST_READ_TX_QUEUE_INDEX
          // pipe read/write dependencies for pipe MEMORY_TO_NIC_RESPONSE
          // read-dependencies for pipe MEMORY_TO_NIC_RESPONSE
          call_stmt_1524_sample_start_ <-& (call_stmt_1520_update_completed_)
          call_stmt_1536_sample_start_ <-& (call_stmt_1524_update_completed_)
          // ring dependency in pipeline.
          call_stmt_1520_update_start_ o<-& (call_stmt_1536_update_completed_ 0)
          // write-dependencies for pipe MEMORY_TO_NIC_RESPONSE
          // signal write dependencies for MEMORY_TO_NIC_RESPONSE
          // pipe read/write dependencies for pipe NIC_REQUEST_REGISTER_ACCESS_PIPE
          // read-dependencies for pipe NIC_REQUEST_REGISTER_ACCESS_PIPE
          // write-dependencies for pipe NIC_REQUEST_REGISTER_ACCESS_PIPE
          // signal write dependencies for NIC_REQUEST_REGISTER_ACCESS_PIPE
          // pipe read/write dependencies for pipe NIC_RESPONSE_REGISTER_ACCESS_PIPE
          // read-dependencies for pipe NIC_RESPONSE_REGISTER_ACCESS_PIPE
          // write-dependencies for pipe NIC_RESPONSE_REGISTER_ACCESS_PIPE
          // signal write dependencies for NIC_RESPONSE_REGISTER_ACCESS_PIPE
          // pipe read/write dependencies for pipe NIC_TO_MEMORY_REQUEST
          // read-dependencies for pipe NIC_TO_MEMORY_REQUEST
          // write-dependencies for pipe NIC_TO_MEMORY_REQUEST
          call_stmt_1524_sample_start_ <-& (call_stmt_1520_update_completed_)
          call_stmt_1536_sample_start_ <-& (call_stmt_1524_update_completed_)
          // ring dependency in pipeline.
          call_stmt_1520_sample_start_ o<-& (call_stmt_1536_update_completed_ 0)
          // signal write dependencies for NIC_TO_MEMORY_REQUEST
          // pipe read/write dependencies for pipe nic_to_mac_transmit_pipe
          // read-dependencies for pipe nic_to_mac_transmit_pipe
          // write-dependencies for pipe nic_to_mac_transmit_pipe
          // signal write dependencies for nic_to_mac_transmit_pipe
        }
        ( first_time_through_loop_body  back_edge_to_loop_body) 
        ( condition_evaluated )
        ;; [loop_exit] 
        {
          $T [ack] 
        }
        ;; [loop_taken] 
        {
          $T [ack] 
        }
        do_while_stmt_1504__entry__ <-| ($entry)
        loop_body_done <-| ( do_while_stmt_1504_loop_body ) 
        condition_done |-> (loop_exit loop_taken)
        do_while_stmt_1504__exit__ |-> ($exit)
        $bind condition_done <= do_while_stmt_1504_loop_body : condition_evaluated
        $bind do_while_stmt_1504__entry__  => do_while_stmt_1504_loop_body : first_time_through_loop_body 
        $bind loop_back  => do_while_stmt_1504_loop_body : back_edge_to_loop_body 
        $terminate (loop_exit loop_taken loop_body_done) (loop_back do_while_stmt_1504__exit__)
      }
      do_while_stmt_1504__entry__ |-> (do_while_stmt_1504)
      do_while_stmt_1504__exit__ <-| (do_while_stmt_1504)
      // control-path for merge  
      //  file nic.linked.aa, line 646
      ;;[merge_stmt_1496_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      merge_stmt_1496__entry__ |-> (merge_stmt_1496_dead_link)
      merge_stmt_1496__exit__ <-| (merge_stmt_1496_dead_link)
      //---------------------   merge statement  file nic.linked.aa, line 646  --------------------------
      ||[merge_stmt_1496__entry___PhiReq] 
      {
        // no phi statements in merge..
      }
      merge_stmt_1496__entry__ |-> (merge_stmt_1496__entry___PhiReq)
      ||[disable_loopback_PhiReq] 
      {
        // no phi statements in merge..
      }
      disable_loopback |-> (disable_loopback_PhiReq)
      ||[not_enabled_yet_loopback_PhiReq] 
      {
        // no phi statements in merge..
      }
      not_enabled_yet_loopback |-> (not_enabled_yet_loopback_PhiReq)
      $P [merge_stmt_1496_PhiReqMerge] 
      merge_stmt_1496_PhiReqMerge <-| ( merge_stmt_1496__entry___PhiReq  disable_loopback_PhiReq  not_enabled_yet_loopback_PhiReq )
      ||[merge_stmt_1496_PhiAck] 
      {
        $T [dummy] 
      }
      merge_stmt_1496_PhiReqMerge |-> (merge_stmt_1496_PhiAck)
      merge_stmt_1496__exit__  <-| (merge_stmt_1496_PhiAck)
      //---------------------  end of merge statement  file nic.linked.aa, line 646  --------------------------
      merge_stmt_1496__entry__ <-| (branch_block_stmt_1495__entry__)
      if_stmt_1497__entry__ <-| (merge_stmt_1496__exit__)
      do_while_stmt_1504__entry__ <-| (if_stmt_1497__exit__)
      disable_loopback <-| (do_while_stmt_1504__exit__)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %transmitEngineDaemon%main%
    //  file nic.linked.aa, line 646
    // constant-object-declarations for block %transmitEngineDaemon%main%
    //  file nic.linked.aa, line 653
    // constant-object-declarations for block %transmitEngineDaemon%main
    //  file nic.linked.aa, line 644
    // constant-object-declarations for block %transmitEngineDaemon
    //  file nic.linked.aa, line 638
    // 0 
    $constant $W[konst_1493_wire_constant] : $int<6> := _b000000// 0
    // constant-declarations for block %transmitEngineDaemon%main
    //  file nic.linked.aa, line 644
    // constant-declarations for block %transmitEngineDaemon%main%
    //  file nic.linked.aa, line 646
    // if-statement  
    //  file nic.linked.aa, line 0
    // 0 
    $constant $W[konst_1499_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // do-while statement  
    //  file nic.linked.aa, line 651
    // 0 
    $constant $W[konst_1542_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // constant-declarations for block %transmitEngineDaemon%main%
    //  file nic.linked.aa, line 653
    // constant-declarations for phi:  			$phi tx_q_index := 			  ((LAST_READ_TX_QUEUE_INDEX + 1 ) & ($bitcast ($uint<6>) (NUMBER_OF_SERVERS - 1 ) )) $on   $entry ,   $loopback 
    // type of target is $uint<6>
    //  file nic.linked.aa, line 654
    // 1 
    $constant $W[konst_1509_wire_constant] : $int<6> := _b000001// 1
    // 1 
    $constant $W[konst_1512_wire_constant] : $int<32> := _b00000000000000000000000000000001// 1
    // 			$call getTxPacketPointerFromServer (tx_q_index ) (pkt_pointer tx_flag ) 
    //  file nic.linked.aa, line 657
    // 			$guard (tx_flag) $call transmitPacket (pkt_pointer ) (transmitted_flag ) 
    //  file nic.linked.aa, line 658
    // 			$guard (push_pointer_back_to_free_Q) $call pushIntoQueue (($bitcast ($uint<1>) _b1  ) FREE_Q pkt_pointer ) (push_status ) 
    //  file nic.linked.aa, line 660
    // ($bitcast ($uint<1>) _b1  )
    $constant $W[type_cast_1532_wire_constant] : $int<1> := _b1// 1
    // 	LAST_READ_TX_QUEUE_INDEX := 0  $buffering 1// bits of buffering = 6. 
    //  file nic.linked.aa, line 643
    // LAST_READ_TX_QUEUE_INDEX
    // block %transmitEngineDaemon%main
    //  file nic.linked.aa, line 644
    // if statement  
    //  file nic.linked.aa, line 0
    // CONTROL_REGISTER
    $W[RPIPE_CONTROL_REGISTER_1498_wire] : $int<32>
    // (CONTROL_REGISTER [] 0 )
    $intermediate $W[BITSEL_u32_u1_1500_wire] : $int<1>
    // ( ~ (CONTROL_REGISTER [] 0 ) )
    $intermediate $W[NOT_u1_u1_1501_wire] : $int<1>
    // do-while statement  
    //  file nic.linked.aa, line 651
    // CONTROL_REGISTER
    $W[RPIPE_CONTROL_REGISTER_1541_wire] : $int<32>
    // (CONTROL_REGISTER [] 0 )
    $intermediate $W[BITSEL_u32_u1_1543_wire] : $int<1>
    // merge-statement  
    //  file nic.linked.aa, line 653
    // 			$phi tx_q_index := 			  ((LAST_READ_TX_QUEUE_INDEX + 1 ) & ($bitcast ($uint<6>) (NUMBER_OF_SERVERS - 1 ) )) $on   $entry ,   $loopback 
    // type of target is $uint<6>
    //  file nic.linked.aa, line 654
    // LAST_READ_TX_QUEUE_INDEX
    $W[RPIPE_LAST_READ_TX_QUEUE_INDEX_1508_wire] : $int<6>
    // (LAST_READ_TX_QUEUE_INDEX + 1 )
    $intermediate $W[ADD_u6_u6_1510_wire] : $int<6>
    // NUMBER_OF_SERVERS
    $W[RPIPE_NUMBER_OF_SERVERS_1511_wire] : $int<32>
    // (NUMBER_OF_SERVERS - 1 )
    $intermediate $W[SUB_u32_u32_1513_wire] : $int<32>
    // ($bitcast ($uint<6>) (NUMBER_OF_SERVERS - 1 ) )
    $intermediate $W[type_cast_1514_wire] : $int<6>
    // ((LAST_READ_TX_QUEUE_INDEX + 1 ) & ($bitcast ($uint<6>) (NUMBER_OF_SERVERS - 1 ) ))
    $intermediate $W[AND_u6_u6_1515_wire] : $int<6>
    // tx_q_index
    $W[tx_q_index_1506] : $int<6>
    // 			$call getTxPacketPointerFromServer (tx_q_index ) (pkt_pointer tx_flag ) 
    //  file nic.linked.aa, line 657
    // pkt_pointer
    $W[pkt_pointer_1520] : $int<32>
    // tx_flag
    $W[tx_flag_1520] : $int<1>
    // 			$guard (tx_flag) $call transmitPacket (pkt_pointer ) (transmitted_flag ) 
    //  file nic.linked.aa, line 658
    // transmitted_flag
    $W[transmitted_flag_1524] : $int<1>
    // 			$volatile push_pointer_back_to_free_Q := (tx_flag & transmitted_flag) $buffering 1
    //  file nic.linked.aa, line 659
    // push_pointer_back_to_free_Q
    $W[push_pointer_back_to_free_Q_1529] : $int<1>
    // 			$guard (push_pointer_back_to_free_Q) $call pushIntoQueue (($bitcast ($uint<1>) _b1  ) FREE_Q pkt_pointer ) (push_status ) 
    //  file nic.linked.aa, line 660
    // FREE_Q
    $W[RPIPE_FREE_Q_1533_wire] : $int<36>
    // push_status
    $W[push_status_1536] : $int<1>
    // 			LAST_READ_TX_QUEUE_INDEX := tx_q_index $buffering 1// bits of buffering = 6. 
    //  file nic.linked.aa, line 661
    // LAST_READ_TX_QUEUE_INDEX
    // 	LAST_READ_TX_QUEUE_INDEX := 0  $buffering 1// bits of buffering = 6. 
    //  file nic.linked.aa, line 643
    // LAST_READ_TX_QUEUE_INDEX
    $ioport $out [WPIPE_LAST_READ_TX_QUEUE_INDEX_1492_inst]  (konst_1493_wire_constant) (LAST_READ_TX_QUEUE_INDEX) 
    // datapath-instances for block %transmitEngineDaemon%main
    //  file nic.linked.aa, line 644
    // datapath-instances for if  
    //  file nic.linked.aa, line 0
    // CONTROL_REGISTER
    $ioport $in [RPIPE_CONTROL_REGISTER_1498_inst] (CONTROL_REGISTER) (RPIPE_CONTROL_REGISTER_1498_wire) 
    $buffering $out RPIPE_CONTROL_REGISTER_1498_inst RPIPE_CONTROL_REGISTER_1498_wire 1
    // (CONTROL_REGISTER [] 0 )
    [][BITSEL_u32_u1_1500_inst] (RPIPE_CONTROL_REGISTER_1498_wire konst_1499_wire_constant) (BITSEL_u32_u1_1500_wire)   $flowthrough 
    $delay BITSEL_u32_u1_1500_inst 0
    // ( ~ (CONTROL_REGISTER [] 0 ) )
    ~ [NOT_u1_u1_1501_inst] (BITSEL_u32_u1_1500_wire) (NOT_u1_u1_1501_wire)   $flowthrough
    $delay NOT_u1_u1_1501_inst 0
    ==0? [if_stmt_1497_branch] (NOT_u1_u1_1501_wire)
    // datapath-instances for do-while  
    //  file nic.linked.aa, line 651
    // CONTROL_REGISTER
    $ioport $in [RPIPE_CONTROL_REGISTER_1541_inst] (CONTROL_REGISTER) (RPIPE_CONTROL_REGISTER_1541_wire)  $fullrate 
    $buffering $out RPIPE_CONTROL_REGISTER_1541_inst RPIPE_CONTROL_REGISTER_1541_wire 1
    // (CONTROL_REGISTER [] 0 )
    [][BITSEL_u32_u1_1543_inst] (RPIPE_CONTROL_REGISTER_1541_wire konst_1542_wire_constant) (BITSEL_u32_u1_1543_wire)   $flowthrough 
    $delay BITSEL_u32_u1_1543_inst 0
    ==0? [do_while_stmt_1504_branch] (BITSEL_u32_u1_1543_wire)
    $flowthrough
    // data-path instances for merge  
    //  file nic.linked.aa, line 653
    // 			$phi tx_q_index := 			  ((LAST_READ_TX_QUEUE_INDEX + 1 ) & ($bitcast ($uint<6>) (NUMBER_OF_SERVERS - 1 ) )) $on   $entry ,   $loopback 
    // type of target is $uint<6>
    //  file nic.linked.aa, line 654
    // LAST_READ_TX_QUEUE_INDEX
    $ioport $in [RPIPE_LAST_READ_TX_QUEUE_INDEX_1508_inst] (LAST_READ_TX_QUEUE_INDEX) (RPIPE_LAST_READ_TX_QUEUE_INDEX_1508_wire)  $fullrate 
    $buffering $out RPIPE_LAST_READ_TX_QUEUE_INDEX_1508_inst RPIPE_LAST_READ_TX_QUEUE_INDEX_1508_wire 1
    // (LAST_READ_TX_QUEUE_INDEX + 1 )
    +[ADD_u6_u6_1510_inst] (RPIPE_LAST_READ_TX_QUEUE_INDEX_1508_wire konst_1509_wire_constant) (ADD_u6_u6_1510_wire)   $flowthrough 
    $delay ADD_u6_u6_1510_inst 0
    // NUMBER_OF_SERVERS
    $ioport $in [RPIPE_NUMBER_OF_SERVERS_1511_inst] (NUMBER_OF_SERVERS) (RPIPE_NUMBER_OF_SERVERS_1511_wire)  $fullrate 
    $buffering $out RPIPE_NUMBER_OF_SERVERS_1511_inst RPIPE_NUMBER_OF_SERVERS_1511_wire 1
    // (NUMBER_OF_SERVERS - 1 )
    -[SUB_u32_u32_1513_inst] (RPIPE_NUMBER_OF_SERVERS_1511_wire konst_1512_wire_constant) (SUB_u32_u32_1513_wire)   $flowthrough 
    $delay SUB_u32_u32_1513_inst 0
    // ($bitcast ($uint<6>) (NUMBER_OF_SERVERS - 1 ) )
    # := [type_cast_1514_inst] (SUB_u32_u32_1513_wire) (type_cast_1514_wire)   $flowthrough
    $delay type_cast_1514_inst 0
    // ((LAST_READ_TX_QUEUE_INDEX + 1 ) & ($bitcast ($uint<6>) (NUMBER_OF_SERVERS - 1 ) ))
    &[AND_u6_u6_1515_inst] (ADD_u6_u6_1510_wire type_cast_1514_wire) (AND_u6_u6_1515_wire)    $fullrate
    $buffering  $out AND_u6_u6_1515_inst AND_u6_u6_1515_wire 1
    $delay AND_u6_u6_1515_inst 1
    # := [ssrc_phi_stmt_1506] (AND_u6_u6_1515_wire) (tx_q_index_1506)    $flowthrough 
    // 			$call getTxPacketPointerFromServer (tx_q_index ) (pkt_pointer tx_flag ) 
    //  file nic.linked.aa, line 657
    $call [call_stmt_1520_call] $module getTxPacketPointerFromServer(tx_q_index_1506) (pkt_pointer_1520 tx_flag_1520)   $fullrate
    $delay call_stmt_1520_call 4
    $buffering  $in call_stmt_1520_call tx_q_index_1506 1
    $buffering  $out call_stmt_1520_call pkt_pointer_1520 1
    $buffering  $out call_stmt_1520_call tx_flag_1520 1
    // 			$guard (tx_flag) $call transmitPacket (pkt_pointer ) (transmitted_flag ) 
    //  file nic.linked.aa, line 658
    $call [call_stmt_1524_call] $module transmitPacket(pkt_pointer_1520) (transmitted_flag_1524) $guard ( tx_flag_1520 )   $fullrate
    $delay call_stmt_1524_call 4
    $buffering  $in call_stmt_1524_call pkt_pointer_1520 1
    $buffering  $out call_stmt_1524_call transmitted_flag_1524 1
    // 			$volatile push_pointer_back_to_free_Q := (tx_flag & transmitted_flag) $buffering 1
    //  file nic.linked.aa, line 659
    // (tx_flag & transmitted_flag)
    &[AND_u1_u1_1528_inst] (tx_flag_1520 transmitted_flag_1524) (push_pointer_back_to_free_Q_1529)   $flowthrough 
    $delay AND_u1_u1_1528_inst 0
    // 			$guard (push_pointer_back_to_free_Q) $call pushIntoQueue (($bitcast ($uint<1>) _b1  ) FREE_Q pkt_pointer ) (push_status ) 
    //  file nic.linked.aa, line 660
    // FREE_Q
    $ioport $in [RPIPE_FREE_Q_1533_inst] (FREE_Q) (RPIPE_FREE_Q_1533_wire) $guard ( push_pointer_back_to_free_Q_1529 )  $fullrate 
    $buffering $out RPIPE_FREE_Q_1533_inst RPIPE_FREE_Q_1533_wire 1
    $call [call_stmt_1536_call] $module pushIntoQueue(type_cast_1532_wire_constant RPIPE_FREE_Q_1533_wire pkt_pointer_1520) (push_status_1536) $guard ( push_pointer_back_to_free_Q_1529 )   $fullrate
    $delay call_stmt_1536_call 4
    $buffering  $in call_stmt_1536_call type_cast_1532_wire_constant 1
    $buffering  $in call_stmt_1536_call RPIPE_FREE_Q_1533_wire 1
    $buffering  $in call_stmt_1536_call pkt_pointer_1520 1
    $buffering  $out call_stmt_1536_call push_status_1536 1
    // 			LAST_READ_TX_QUEUE_INDEX := tx_q_index $buffering 1// bits of buffering = 6. 
    //  file nic.linked.aa, line 661
    // LAST_READ_TX_QUEUE_INDEX
    $ioport $out [WPIPE_LAST_READ_TX_QUEUE_INDEX_1537_inst]  (tx_q_index_1506) (LAST_READ_TX_QUEUE_INDEX)  $fullrate 
  }
  // end data-path
  // 	LAST_READ_TX_QUEUE_INDEX := 0  $buffering 1// bits of buffering = 6. 
  //  file nic.linked.aa, line 643
  // LAST_READ_TX_QUEUE_INDEX
  WPIPE_LAST_READ_TX_QUEUE_INDEX_1492_inst <=> (assign_stmt_1494/WPIPE_LAST_READ_TX_QUEUE_INDEX_1492_Sample/req assign_stmt_1494/WPIPE_LAST_READ_TX_QUEUE_INDEX_1492_Update/req) (assign_stmt_1494/WPIPE_LAST_READ_TX_QUEUE_INDEX_1492_Sample/ack assign_stmt_1494/WPIPE_LAST_READ_TX_QUEUE_INDEX_1492_Update/ack)
  // CP-DP links for merge  
  //  file nic.linked.aa, line 646
  // CP-DP links for if  
  //  file nic.linked.aa, line 0
  // CONTROL_REGISTER
  // (CONTROL_REGISTER [] 0 )
  // ( ~ (CONTROL_REGISTER [] 0 ) )
  if_stmt_1497_branch <=> (branch_block_stmt_1495/if_stmt_1497_eval_test/branch_req) (branch_block_stmt_1495/if_stmt_1497_else_link/else_choice_transition branch_block_stmt_1495/if_stmt_1497_if_link/if_choice_transition)
  // CP-DP links for do-while  do_while_stmt_1504
  //  file nic.linked.aa, line 651
  // ((LAST_READ_TX_QUEUE_INDEX + 1 ) & ($bitcast ($uint<6>) (NUMBER_OF_SERVERS - 1 ) ))
  // (LAST_READ_TX_QUEUE_INDEX + 1 )
  // LAST_READ_TX_QUEUE_INDEX
  // (NUMBER_OF_SERVERS - 1 )
  // NUMBER_OF_SERVERS
  AND_u6_u6_1515_inst <=> (branch_block_stmt_1495/do_while_stmt_1504/do_while_stmt_1504_loop_body/AND_u6_u6_1515_Sample/rr branch_block_stmt_1495/do_while_stmt_1504/do_while_stmt_1504_loop_body/AND_u6_u6_1515_Update/cr) (branch_block_stmt_1495/do_while_stmt_1504/do_while_stmt_1504_loop_body/AND_u6_u6_1515_Sample/ra branch_block_stmt_1495/do_while_stmt_1504/do_while_stmt_1504_loop_body/AND_u6_u6_1515_Update/ca)
  // 			$call getTxPacketPointerFromServer (tx_q_index ) (pkt_pointer tx_flag ) 
  //  file nic.linked.aa, line 657
  // tx_q_index
  call_stmt_1520_call <=> (branch_block_stmt_1495/do_while_stmt_1504/do_while_stmt_1504_loop_body/call_stmt_1520_Sample/crr branch_block_stmt_1495/do_while_stmt_1504/do_while_stmt_1504_loop_body/call_stmt_1520_Update/ccr) (branch_block_stmt_1495/do_while_stmt_1504/do_while_stmt_1504_loop_body/call_stmt_1520_Sample/cra branch_block_stmt_1495/do_while_stmt_1504/do_while_stmt_1504_loop_body/call_stmt_1520_Update/cca)
  // 			$guard (tx_flag) $call transmitPacket (pkt_pointer ) (transmitted_flag ) 
  //  file nic.linked.aa, line 658
  // pkt_pointer
  call_stmt_1524_call <=> (branch_block_stmt_1495/do_while_stmt_1504/do_while_stmt_1504_loop_body/call_stmt_1524_Sample/crr branch_block_stmt_1495/do_while_stmt_1504/do_while_stmt_1504_loop_body/call_stmt_1524_Update/ccr) (branch_block_stmt_1495/do_while_stmt_1504/do_while_stmt_1504_loop_body/call_stmt_1524_Sample/cra branch_block_stmt_1495/do_while_stmt_1504/do_while_stmt_1504_loop_body/call_stmt_1524_Update/cca)
  // 			$volatile push_pointer_back_to_free_Q := (tx_flag & transmitted_flag) $buffering 1
  //  file nic.linked.aa, line 659
  // (tx_flag & transmitted_flag)
  // tx_flag
  // transmitted_flag
  // 			$guard (push_pointer_back_to_free_Q) $call pushIntoQueue (($bitcast ($uint<1>) _b1  ) FREE_Q pkt_pointer ) (push_status ) 
  //  file nic.linked.aa, line 660
  // FREE_Q
  // pkt_pointer
  call_stmt_1536_call <=> (branch_block_stmt_1495/do_while_stmt_1504/do_while_stmt_1504_loop_body/call_stmt_1536_Sample/crr branch_block_stmt_1495/do_while_stmt_1504/do_while_stmt_1504_loop_body/call_stmt_1536_Update/ccr) (branch_block_stmt_1495/do_while_stmt_1504/do_while_stmt_1504_loop_body/call_stmt_1536_Sample/cra branch_block_stmt_1495/do_while_stmt_1504/do_while_stmt_1504_loop_body/call_stmt_1536_Update/cca)
  // 			LAST_READ_TX_QUEUE_INDEX := tx_q_index $buffering 1// bits of buffering = 6. 
  //  file nic.linked.aa, line 661
  // tx_q_index
  // LAST_READ_TX_QUEUE_INDEX
  WPIPE_LAST_READ_TX_QUEUE_INDEX_1537_inst <=> (branch_block_stmt_1495/do_while_stmt_1504/do_while_stmt_1504_loop_body/WPIPE_LAST_READ_TX_QUEUE_INDEX_1537_Sample/req branch_block_stmt_1495/do_while_stmt_1504/do_while_stmt_1504_loop_body/WPIPE_LAST_READ_TX_QUEUE_INDEX_1537_Update/req) (branch_block_stmt_1495/do_while_stmt_1504/do_while_stmt_1504_loop_body/WPIPE_LAST_READ_TX_QUEUE_INDEX_1537_Sample/ack branch_block_stmt_1495/do_while_stmt_1504/do_while_stmt_1504_loop_body/WPIPE_LAST_READ_TX_QUEUE_INDEX_1537_Update/ack)
  // (CONTROL_REGISTER [] 0 )
  // CONTROL_REGISTER
  do_while_stmt_1504_branch <=> (branch_block_stmt_1495/do_while_stmt_1504/do_while_stmt_1504_loop_body/condition_evaluated) (branch_block_stmt_1495/do_while_stmt_1504/loop_exit/ack branch_block_stmt_1495/do_while_stmt_1504/loop_taken/ack)
}
