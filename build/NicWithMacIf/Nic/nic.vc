// Virtual circuit produced from Aa description by Aa2VC 
// $pipe  AFB_NIC_REQUEST : $uint<74>  $depth 8 
// can point into 
// in scope  top-level
$pipe [AFB_NIC_REQUEST] 74 $depth 8 
// $pipe  AFB_NIC_RESPONSE : $uint<33>  $depth 8 
// can point into 
// in scope  top-level
$pipe [AFB_NIC_RESPONSE] 33 $depth 8 
// $pipe  CONTROL_REGISTER : $uint<32>  $depth 1  $signal 
// can point into 
// in scope  top-level
$pipe [CONTROL_REGISTER] 32 $depth 1 $signal 
// $pipe  FREE_Q : $uint<36>  $depth 1  $signal 
// can point into 
// in scope  top-level
$pipe [FREE_Q] 36 $depth 1 $signal 
// $pipe  LAST_READ_TX_QUEUE_INDEX : $uint<6>  $depth 1  $signal 
// can point into 
// in scope  top-level
$pipe [LAST_READ_TX_QUEUE_INDEX] 6 $depth 1 $signal 
// $pipe  LAST_WRITTEN_RX_QUEUE_INDEX : $uint<6>  $depth 1  $signal 
// can point into 
// in scope  top-level
$pipe [LAST_WRITTEN_RX_QUEUE_INDEX] 6 $depth 1 $signal 
// $pipe  MEMORY_TO_NIC_RESPONSE : $uint<65>  $depth 2048 
// can point into 
// in scope  top-level
$pipe [MEMORY_TO_NIC_RESPONSE] 65 $depth 2048 
// $pipe  NIC_REQUEST_REGISTER_ACCESS_PIPE : $uint<43>  $depth 8 
// can point into 
// in scope  top-level
$pipe [NIC_REQUEST_REGISTER_ACCESS_PIPE] 43 $depth 8 
// $pipe  NIC_RESPONSE_REGISTER_ACCESS_PIPE : $uint<33>  $depth 8 
// can point into 
// in scope  top-level
$pipe [NIC_RESPONSE_REGISTER_ACCESS_PIPE] 33 $depth 8 
// $pipe  NIC_TO_MEMORY_REQUEST : $uint<110>  $depth 2048 
// can point into 
// in scope  top-level
$pipe [NIC_TO_MEMORY_REQUEST] 110 $depth 2048 
// $pipe  NUMBER_OF_SERVERS : $uint<32>  $depth 1  $signal 
// can point into 
// in scope  top-level
$pipe [NUMBER_OF_SERVERS] 32 $depth 1 $signal 
// $pipe  control_word_request_pipe_0 : $uint<32>  $depth 16 
// can point into 
// in scope  top-level
$pipe [control_word_request_pipe_0] 32 $depth 16 
// $pipe  control_word_request_pipe_1 : $uint<64>  $depth 16 
// can point into 
// in scope  top-level
$pipe [control_word_request_pipe_1] 64 $depth 16 
// $pipe  control_word_response_pipe : $uint<64>  $depth 16 
// can point into 
// in scope  top-level
$pipe [control_word_response_pipe] 64 $depth 16 
// $pipe  mac_to_nic_data : $uint<73>  $depth 2048 
// can point into 
// in scope  top-level
$pipe [mac_to_nic_data] 73 $depth 2048 
// $pipe  mac_to_nic_data_0 : $uint<64>  $depth 2048 
// can point into 
// in scope  top-level
$pipe [mac_to_nic_data_0] 64 $depth 2048 
// $pipe  mac_to_nic_data_1 : $uint<16>  $depth 2048 
// can point into 
// in scope  top-level
$pipe [mac_to_nic_data_1] 16 $depth 2048 
// $pipe  mem_req0_pipe0 : $uint<64>  $depth 1024 
// can point into 
// in scope  top-level
$pipe [mem_req0_pipe0] 64 $depth 1024 
// $pipe  mem_req0_pipe1 : $uint<64>  $depth 1024 
// can point into 
// in scope  top-level
$pipe [mem_req0_pipe1] 64 $depth 1024 
// $pipe  mem_req1_pipe0 : $uint<64>  $depth 1024 
// can point into 
// in scope  top-level
$pipe [mem_req1_pipe0] 64 $depth 1024 
// $pipe  mem_req1_pipe1 : $uint<64>  $depth 1024 
// can point into 
// in scope  top-level
$pipe [mem_req1_pipe1] 64 $depth 1024 
// $pipe  mem_resp0_pipe0 : $uint<64>  $depth 1024 
// can point into 
// in scope  top-level
$pipe [mem_resp0_pipe0] 64 $depth 1024 
// $pipe  mem_resp0_pipe1 : $uint<8>  $depth 1024 
// can point into 
// in scope  top-level
$pipe [mem_resp0_pipe1] 8 $depth 1024 
// $pipe  mem_resp1_pipe0 : $uint<64>  $depth 1024 
// can point into 
// in scope  top-level
$pipe [mem_resp1_pipe0] 64 $depth 1024 
// $pipe  mem_resp1_pipe1 : $uint<8>  $depth 1024 
// can point into 
// in scope  top-level
$pipe [mem_resp1_pipe1] 8 $depth 1024 
// $pipe  nic_rx_to_header : $uint<73>  $depth 2048 
// can point into 
// in scope  top-level
$pipe [nic_rx_to_header] 73 $depth 2048 
// $pipe  nic_rx_to_packet : $uint<73>  $depth 2048 
// can point into 
// in scope  top-level
$pipe [nic_rx_to_packet] 73 $depth 2048 
// $pipe  nic_to_mac_data_0 : $uint<64>  $depth 2048 
// can point into 
// in scope  top-level
$pipe [nic_to_mac_data_0] 64 $depth 2048 
// $pipe  nic_to_mac_data_1 : $uint<16>  $depth 2048 
// can point into 
// in scope  top-level
$pipe [nic_to_mac_data_1] 16 $depth 2048 
// $pipe  nic_to_mac_transmit_pipe : $uint<73>  $depth 10 
// can point into 
// in scope  top-level
$pipe [nic_to_mac_transmit_pipe] 73 $depth 10 
$constant $W[BAD_PACKET_DATA] : $int<64> := _b1111111111111111111111111111111111111111111111111111111111111111// -1
$constant $W[FULL_BYTE_MASK] : $int<8> := _b11111111// 255
$constant $W[HEADER_TKEEP] : $int<8> := _b00111111// 63
$constant $W[QUEUE_SIZE_MASK] : $int<32> := _b00000000000000000000000000000011// 3
$constant $W[RX_QUEUES_REG_START_OFFSET] : $int<6> := _b000010// 2
$constant $W[S0] : $int<2> := _b00// 0
$constant $W[S1] : $int<2> := _b01// 1
$constant $W[S2] : $int<2> := _b10// 2
$constant $W[TX_QUEUES_REG_START_OFFSET] : $int<6> := _b001010// 10
$constant $W[WAIT_TIME] : $int<10> := _b0000001010// 10
// load store constants for object nic_registers
$constant $W[nic_registers_base_address] : $int<6> := _b000000
$memoryspace [memory_space_0] 
{
  $capacity 64
  $datawidth 32
  $addrwidth 6
  $maxaccesswidth 32
  // $storage  nic_registers : $array[64] $of $uint<32> // memory space index = 0  base address = 0  word size = 32
  // can point into 
  // in scope  top-level
  $object [nic_registers] : $array[64] $of $int<32>
}
$module [AccessRegister] 
{
  $in rwbar:$int<1>
  // can point into 
  bmask:$int<4>
  // can point into 
  register_index:$int<6>
  // can point into 
  wdata:$int<32>
  // can point into 
  $out rdata:$int<32>
  // can point into 
  // pipe-declarations for block %AccessRegister
  //  file nic.linked.aa, line 73
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    ::[assign_stmt_93_to_assign_stmt_115] 
    {
      // start: WAR dependencies for request
      // ignored out-of-scope w_root  rwbar : $uint<1> 
      // ignored out-of-scope w_root  bmask : $uint<4> 
      // ignored out-of-scope w_root  register_index : $uint<6> 
      // ignored out-of-scope w_root  wdata : $uint<32> 
      // done: WAR dependencies for request
      // start:  	$volatile request := ((rwbar && bmask) && (register_index && wdata)) $buffering 1
      //  file nic.linked.aa, line 79
      // volatile! 
      // Source expression
      // ((rwbar && bmask) && (register_index && wdata))
      // (rwbar && bmask)
      // rwbar
      // bmask
      // (register_index && wdata)
      // register_index
      // wdata
      // Target expression
      // (as target) request
      // start: WAR dependencies for request
      // ignored out-of-scope w_root  rwbar : $uint<1> 
      // ignored out-of-scope w_root  bmask : $uint<4> 
      // ignored out-of-scope w_root  register_index : $uint<6> 
      // ignored out-of-scope w_root  wdata : $uint<32> 
      // done: WAR dependencies for request
      // end:  	$volatile request := ((rwbar && bmask) && (register_index && wdata)) $buffering 1
      // start:  	NIC_REQUEST_REGISTER_ACCESS_PIPE := request $buffering 1// bits of buffering = 43. 
      //  file nic.linked.aa, line 81
      // Source expression
      // request
      // Target expression
      // (as target) NIC_REQUEST_REGISTER_ACCESS_PIPE
      $T[WPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_99_sample_start_] 
      $T[WPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_99_sample_completed_] 
      $T[WPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_99_update_start_] 
      $T[WPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_99_update_completed_] 
      ;;[WPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_99_Sample] 
      {
        // pipe write sample-start NIC_REQUEST_REGISTER_ACCESS_PIPE
        $T [req] $T [ack] 
      }
      ;;[WPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_99_Update] 
      {
        // pipe write update (complete) NIC_REQUEST_REGISTER_ACCESS_PIPE
        $T [req] $T [ack] 
      }
      WPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_99_sample_start_ &-> (WPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_99_Sample)
      WPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_99_sample_completed_ <-& (WPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_99_Sample)
      WPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_99_update_start_ <-& (WPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_99_sample_completed_)
      WPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_99_update_start_ &-> (WPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_99_Update)
      WPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_99_update_completed_ <-& (WPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_99_Update)
      // start: Forward dependencies from request to transition WPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_99_sample_start_
      // done: Forward dependencies from request to transition WPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_99_sample_start_
      // end:  	NIC_REQUEST_REGISTER_ACCESS_PIPE := request $buffering 1// bits of buffering = 43. 
      // start:  	response := NIC_RESPONSE_REGISTER_ACCESS_PIPE $buffering 1// bits of buffering = 33. 
      //  file nic.linked.aa, line 83
      // Source expression
      // NIC_RESPONSE_REGISTER_ACCESS_PIPE
      $T[RPIPE_NIC_RESPONSE_REGISTER_ACCESS_PIPE_104_sample_start_] 
      $T[RPIPE_NIC_RESPONSE_REGISTER_ACCESS_PIPE_104_sample_completed_] 
      $T[RPIPE_NIC_RESPONSE_REGISTER_ACCESS_PIPE_104_update_start_] 
      $T[RPIPE_NIC_RESPONSE_REGISTER_ACCESS_PIPE_104_update_completed_] 
      ;;[RPIPE_NIC_RESPONSE_REGISTER_ACCESS_PIPE_104_Sample] 
      {
        // pipe read sample
        $T [rr] $T [ra] 
      }
      ;;[RPIPE_NIC_RESPONSE_REGISTER_ACCESS_PIPE_104_Update] 
      {
        // pipe read update
        $T [cr] $T [ca] 
      }
      RPIPE_NIC_RESPONSE_REGISTER_ACCESS_PIPE_104_sample_start_ &-> (RPIPE_NIC_RESPONSE_REGISTER_ACCESS_PIPE_104_Sample)
      RPIPE_NIC_RESPONSE_REGISTER_ACCESS_PIPE_104_sample_completed_ <-& (RPIPE_NIC_RESPONSE_REGISTER_ACCESS_PIPE_104_Sample)
      RPIPE_NIC_RESPONSE_REGISTER_ACCESS_PIPE_104_update_start_ <-& (RPIPE_NIC_RESPONSE_REGISTER_ACCESS_PIPE_104_sample_completed_)
      RPIPE_NIC_RESPONSE_REGISTER_ACCESS_PIPE_104_update_start_ &-> (RPIPE_NIC_RESPONSE_REGISTER_ACCESS_PIPE_104_Update)
      RPIPE_NIC_RESPONSE_REGISTER_ACCESS_PIPE_104_update_completed_ <-& (RPIPE_NIC_RESPONSE_REGISTER_ACCESS_PIPE_104_Update)
      // Target expression
      // (as target) response
      // start: WAR dependencies for response
      // done: WAR dependencies for response
      // end:  	response := NIC_RESPONSE_REGISTER_ACCESS_PIPE $buffering 1// bits of buffering = 33. 
      // start: WAR dependencies for status
      // done: WAR dependencies for status
      // start:  	$volatile status := ( $slice response 32 32 )  $buffering 1
      //  file nic.linked.aa, line 85
      // volatile! 
      // Source expression
      // ( $slice response 32 32 ) 
      // response
      // Target expression
      // (as target) status
      // start: WAR dependencies for status
      // done: WAR dependencies for status
      // end:  	$volatile status := ( $slice response 32 32 )  $buffering 1
      // start: WAR dependencies for rdata
      // done: WAR dependencies for rdata
      // start:  	$volatile rdata := ( $slice response 31 0 )  $buffering 1
      //  file nic.linked.aa, line 86
      // volatile! 
      // Source expression
      // ( $slice response 31 0 ) 
      // response
      // Target expression
      // (as target) rdata
      // rdata
      // write to interface object
      // start: WAR dependencies for rdata
      // done: WAR dependencies for rdata
      // rdata
      // write to interface object
      // end:  	$volatile rdata := ( $slice response 31 0 )  $buffering 1
      // load-store dependencies..
      // pipe read/write dependencies for pipe NIC_REQUEST_REGISTER_ACCESS_PIPE
      // read-dependencies for pipe NIC_REQUEST_REGISTER_ACCESS_PIPE
      // write-dependencies for pipe NIC_REQUEST_REGISTER_ACCESS_PIPE
      // signal write dependencies for NIC_REQUEST_REGISTER_ACCESS_PIPE
      // pipe read/write dependencies for pipe NIC_RESPONSE_REGISTER_ACCESS_PIPE
      // read-dependencies for pipe NIC_RESPONSE_REGISTER_ACCESS_PIPE
      // write-dependencies for pipe NIC_RESPONSE_REGISTER_ACCESS_PIPE
      // signal write dependencies for NIC_RESPONSE_REGISTER_ACCESS_PIPE
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %AccessRegister
    //  file nic.linked.aa, line 73
    // 	$volatile request := ((rwbar && bmask) && (register_index && wdata)) $buffering 1
    //  file nic.linked.aa, line 79
    // (rwbar && bmask)
    $intermediate $W[CONCAT_u1_u5_88_wire] : $int<5>
    // (register_index && wdata)
    $intermediate $W[CONCAT_u6_u38_91_wire] : $int<38>
    // request
    $W[request_93] : $int<43>
    // 	NIC_REQUEST_REGISTER_ACCESS_PIPE := request $buffering 1// bits of buffering = 43. 
    //  file nic.linked.aa, line 81
    // NIC_REQUEST_REGISTER_ACCESS_PIPE
    // 	response := NIC_RESPONSE_REGISTER_ACCESS_PIPE $buffering 1// bits of buffering = 33. 
    //  file nic.linked.aa, line 83
    // response
    $W[response_105] : $int<33>
    // 	$volatile status := ( $slice response 32 32 )  $buffering 1
    //  file nic.linked.aa, line 85
    // status
    $W[status_111] : $int<1>
    // 	$volatile rdata := ( $slice response 31 0 )  $buffering 1
    //  file nic.linked.aa, line 86
    // rdata
    // 	$volatile request := ((rwbar && bmask) && (register_index && wdata)) $buffering 1
    //  file nic.linked.aa, line 79
    // (rwbar && bmask)
    &&[CONCAT_u1_u5_88_inst] (rwbar bmask) (CONCAT_u1_u5_88_wire)   $flowthrough 
    $delay CONCAT_u1_u5_88_inst 0
    // (register_index && wdata)
    &&[CONCAT_u6_u38_91_inst] (register_index wdata) (CONCAT_u6_u38_91_wire)   $flowthrough 
    $delay CONCAT_u6_u38_91_inst 0
    // ((rwbar && bmask) && (register_index && wdata))
    &&[CONCAT_u5_u43_92_inst] (CONCAT_u1_u5_88_wire CONCAT_u6_u38_91_wire) (request_93)   $flowthrough 
    $delay CONCAT_u5_u43_92_inst 0
    // 	NIC_REQUEST_REGISTER_ACCESS_PIPE := request $buffering 1// bits of buffering = 43. 
    //  file nic.linked.aa, line 81
    // NIC_REQUEST_REGISTER_ACCESS_PIPE
    $ioport $out [WPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_99_inst]  (request_93) (NIC_REQUEST_REGISTER_ACCESS_PIPE) 
    // 	response := NIC_RESPONSE_REGISTER_ACCESS_PIPE $buffering 1// bits of buffering = 33. 
    //  file nic.linked.aa, line 83
    // NIC_RESPONSE_REGISTER_ACCESS_PIPE
    $ioport $in [RPIPE_NIC_RESPONSE_REGISTER_ACCESS_PIPE_104_inst] (NIC_RESPONSE_REGISTER_ACCESS_PIPE) (response_105) 
    $buffering $out RPIPE_NIC_RESPONSE_REGISTER_ACCESS_PIPE_104_inst response_105 1
    // 	$volatile status := ( $slice response 32 32 )  $buffering 1
    //  file nic.linked.aa, line 85
    // ( $slice response 32 32 ) 
    [:] [slice_110_inst] (response_105 32 32) (status_111)  $flowthrough
    $delay slice_110_inst 0
    // 	$volatile rdata := ( $slice response 31 0 )  $buffering 1
    //  file nic.linked.aa, line 86
    // ( $slice response 31 0 ) 
    [:] [slice_114_inst] (response_105 31 0) (rdata)  $flowthrough
    $delay slice_114_inst 0
  }
  // end data-path
  // 	$volatile request := ((rwbar && bmask) && (register_index && wdata)) $buffering 1
  //  file nic.linked.aa, line 79
  // ((rwbar && bmask) && (register_index && wdata))
  // (rwbar && bmask)
  // rwbar
  // bmask
  // (register_index && wdata)
  // register_index
  // wdata
  // 	NIC_REQUEST_REGISTER_ACCESS_PIPE := request $buffering 1// bits of buffering = 43. 
  //  file nic.linked.aa, line 81
  // request
  // NIC_REQUEST_REGISTER_ACCESS_PIPE
  WPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_99_inst <=> (assign_stmt_93_to_assign_stmt_115/WPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_99_Sample/req assign_stmt_93_to_assign_stmt_115/WPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_99_Update/req) (assign_stmt_93_to_assign_stmt_115/WPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_99_Sample/ack assign_stmt_93_to_assign_stmt_115/WPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_99_Update/ack)
  // 	response := NIC_RESPONSE_REGISTER_ACCESS_PIPE $buffering 1// bits of buffering = 33. 
  //  file nic.linked.aa, line 83
  // NIC_RESPONSE_REGISTER_ACCESS_PIPE
  RPIPE_NIC_RESPONSE_REGISTER_ACCESS_PIPE_104_inst <=> (assign_stmt_93_to_assign_stmt_115/RPIPE_NIC_RESPONSE_REGISTER_ACCESS_PIPE_104_Sample/rr assign_stmt_93_to_assign_stmt_115/RPIPE_NIC_RESPONSE_REGISTER_ACCESS_PIPE_104_Update/cr) (assign_stmt_93_to_assign_stmt_115/RPIPE_NIC_RESPONSE_REGISTER_ACCESS_PIPE_104_Sample/ra assign_stmt_93_to_assign_stmt_115/RPIPE_NIC_RESPONSE_REGISTER_ACCESS_PIPE_104_Update/ca)
  // 	$volatile status := ( $slice response 32 32 )  $buffering 1
  //  file nic.linked.aa, line 85
  // response
  // 	$volatile rdata := ( $slice response 31 0 )  $buffering 1
  //  file nic.linked.aa, line 86
  // response
}
$module [UpdateRegister] 
{
  $in bmask:$int<4>
  // can point into 
  rval:$int<32>
  // can point into 
  wdata:$int<32>
  // can point into 
  index:$int<6>
  // can point into 
  $out wval:$int<32>
  // can point into 
  // pipe-declarations for block %UpdateRegister
  //  file nic.linked.aa, line 88
  // memory-space 0 is written into.
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    ::[assign_stmt_126_to_assign_stmt_195] 
    {
      // start: WAR dependencies for b0
      // ignored out-of-scope w_root  bmask : $uint<4> 
      // done: WAR dependencies for b0
      // start:  	$volatile b0 := ( $slice bmask 3 3 )  $buffering 1
      //  file nic.linked.aa, line 93
      // volatile! 
      // Source expression
      // ( $slice bmask 3 3 ) 
      // bmask
      // Target expression
      // (as target) b0
      // start: WAR dependencies for b0
      // ignored out-of-scope w_root  bmask : $uint<4> 
      // done: WAR dependencies for b0
      // end:  	$volatile b0 := ( $slice bmask 3 3 )  $buffering 1
      // start: WAR dependencies for b1
      // ignored out-of-scope w_root  bmask : $uint<4> 
      // done: WAR dependencies for b1
      // start:  	$volatile b1 := ( $slice bmask 2 2 )  $buffering 1
      //  file nic.linked.aa, line 94
      // volatile! 
      // Source expression
      // ( $slice bmask 2 2 ) 
      // bmask
      // Target expression
      // (as target) b1
      // start: WAR dependencies for b1
      // ignored out-of-scope w_root  bmask : $uint<4> 
      // done: WAR dependencies for b1
      // end:  	$volatile b1 := ( $slice bmask 2 2 )  $buffering 1
      // start: WAR dependencies for b2
      // ignored out-of-scope w_root  bmask : $uint<4> 
      // done: WAR dependencies for b2
      // start:  	$volatile b2 := ( $slice bmask 1 1 )  $buffering 1
      //  file nic.linked.aa, line 95
      // volatile! 
      // Source expression
      // ( $slice bmask 1 1 ) 
      // bmask
      // Target expression
      // (as target) b2
      // start: WAR dependencies for b2
      // ignored out-of-scope w_root  bmask : $uint<4> 
      // done: WAR dependencies for b2
      // end:  	$volatile b2 := ( $slice bmask 1 1 )  $buffering 1
      // start: WAR dependencies for b3
      // ignored out-of-scope w_root  bmask : $uint<4> 
      // done: WAR dependencies for b3
      // start:  	$volatile b3 := ( $slice bmask 0 0 )  $buffering 1
      //  file nic.linked.aa, line 96
      // volatile! 
      // Source expression
      // ( $slice bmask 0 0 ) 
      // bmask
      // Target expression
      // (as target) b3
      // start: WAR dependencies for b3
      // ignored out-of-scope w_root  bmask : $uint<4> 
      // done: WAR dependencies for b3
      // end:  	$volatile b3 := ( $slice bmask 0 0 )  $buffering 1
      // start: WAR dependencies for r0
      // ignored out-of-scope w_root  rval : $uint<32> 
      // done: WAR dependencies for r0
      // start:  	$volatile r0 := ( $slice rval 31 24 )  $buffering 1
      //  file nic.linked.aa, line 97
      // volatile! 
      // Source expression
      // ( $slice rval 31 24 ) 
      // rval
      // Target expression
      // (as target) r0
      // start: WAR dependencies for r0
      // ignored out-of-scope w_root  rval : $uint<32> 
      // done: WAR dependencies for r0
      // end:  	$volatile r0 := ( $slice rval 31 24 )  $buffering 1
      // start: WAR dependencies for r1
      // ignored out-of-scope w_root  rval : $uint<32> 
      // done: WAR dependencies for r1
      // start:  	$volatile r1 := ( $slice rval 23 16 )  $buffering 1
      //  file nic.linked.aa, line 98
      // volatile! 
      // Source expression
      // ( $slice rval 23 16 ) 
      // rval
      // Target expression
      // (as target) r1
      // start: WAR dependencies for r1
      // ignored out-of-scope w_root  rval : $uint<32> 
      // done: WAR dependencies for r1
      // end:  	$volatile r1 := ( $slice rval 23 16 )  $buffering 1
      // start: WAR dependencies for r2
      // ignored out-of-scope w_root  rval : $uint<32> 
      // done: WAR dependencies for r2
      // start:  	$volatile r2 := ( $slice rval 15 8 )  $buffering 1
      //  file nic.linked.aa, line 99
      // volatile! 
      // Source expression
      // ( $slice rval 15 8 ) 
      // rval
      // Target expression
      // (as target) r2
      // start: WAR dependencies for r2
      // ignored out-of-scope w_root  rval : $uint<32> 
      // done: WAR dependencies for r2
      // end:  	$volatile r2 := ( $slice rval 15 8 )  $buffering 1
      // start: WAR dependencies for r3
      // ignored out-of-scope w_root  rval : $uint<32> 
      // done: WAR dependencies for r3
      // start:  	$volatile r3 := ( $slice rval 7 0 )  $buffering 1
      //  file nic.linked.aa, line 100
      // volatile! 
      // Source expression
      // ( $slice rval 7 0 ) 
      // rval
      // Target expression
      // (as target) r3
      // start: WAR dependencies for r3
      // ignored out-of-scope w_root  rval : $uint<32> 
      // done: WAR dependencies for r3
      // end:  	$volatile r3 := ( $slice rval 7 0 )  $buffering 1
      // start: WAR dependencies for w0
      // ignored out-of-scope w_root  wdata : $uint<32> 
      // done: WAR dependencies for w0
      // start:  	$volatile w0 := ( $slice wdata 31 24 )  $buffering 1
      //  file nic.linked.aa, line 101
      // volatile! 
      // Source expression
      // ( $slice wdata 31 24 ) 
      // wdata
      // Target expression
      // (as target) w0
      // start: WAR dependencies for w0
      // ignored out-of-scope w_root  wdata : $uint<32> 
      // done: WAR dependencies for w0
      // end:  	$volatile w0 := ( $slice wdata 31 24 )  $buffering 1
      // start: WAR dependencies for w1
      // ignored out-of-scope w_root  wdata : $uint<32> 
      // done: WAR dependencies for w1
      // start:  	$volatile w1 := ( $slice wdata 23 16 )  $buffering 1
      //  file nic.linked.aa, line 102
      // volatile! 
      // Source expression
      // ( $slice wdata 23 16 ) 
      // wdata
      // Target expression
      // (as target) w1
      // start: WAR dependencies for w1
      // ignored out-of-scope w_root  wdata : $uint<32> 
      // done: WAR dependencies for w1
      // end:  	$volatile w1 := ( $slice wdata 23 16 )  $buffering 1
      // start: WAR dependencies for w2
      // ignored out-of-scope w_root  wdata : $uint<32> 
      // done: WAR dependencies for w2
      // start:  	$volatile w2 := ( $slice wdata 15 8 )  $buffering 1
      //  file nic.linked.aa, line 103
      // volatile! 
      // Source expression
      // ( $slice wdata 15 8 ) 
      // wdata
      // Target expression
      // (as target) w2
      // start: WAR dependencies for w2
      // ignored out-of-scope w_root  wdata : $uint<32> 
      // done: WAR dependencies for w2
      // end:  	$volatile w2 := ( $slice wdata 15 8 )  $buffering 1
      // start: WAR dependencies for w3
      // ignored out-of-scope w_root  wdata : $uint<32> 
      // done: WAR dependencies for w3
      // start:  	$volatile w3 := ( $slice wdata 7 0 )  $buffering 1
      //  file nic.linked.aa, line 104
      // volatile! 
      // Source expression
      // ( $slice wdata 7 0 ) 
      // wdata
      // Target expression
      // (as target) w3
      // start: WAR dependencies for w3
      // ignored out-of-scope w_root  wdata : $uint<32> 
      // done: WAR dependencies for w3
      // end:  	$volatile w3 := ( $slice wdata 7 0 )  $buffering 1
      // start:  	wval := ((( $mux b0 w0  r0 )  && ( $mux b1 w1  r1 ) ) && (( $mux b2 w2  r2 )  && ( $mux b3 w3  r3 ) )) $buffering 1// bits of buffering = 32. 
      //  file nic.linked.aa, line 105
      // Source expression
      // ((( $mux b0 w0  r0 )  && ( $mux b1 w1  r1 ) ) && (( $mux b2 w2  r2 )  && ( $mux b3 w3  r3 ) ))
      $T[CONCAT_u16_u32_190_sample_start_] 
      $T[CONCAT_u16_u32_190_sample_completed_] 
      $T[CONCAT_u16_u32_190_update_start_] 
      $T[CONCAT_u16_u32_190_update_completed_] 
      // (( $mux b0 w0  r0 )  && ( $mux b1 w1  r1 ) )
      // ( $mux b0 w0  r0 ) 
      // b0
      // w0
      // r0
      // ( $mux b1 w1  r1 ) 
      // b1
      // w1
      // r1
      // (( $mux b2 w2  r2 )  && ( $mux b3 w3  r3 ) )
      // ( $mux b2 w2  r2 ) 
      // b2
      // w2
      // r2
      // ( $mux b3 w3  r3 ) 
      // b3
      // w3
      // r3
      // start: Forward dependencies from (( $mux b0 w0  r0 )  && ( $mux b1 w1  r1 ) ) to transition CONCAT_u16_u32_190_sample_start_
      // done: Forward dependencies from (( $mux b0 w0  r0 )  && ( $mux b1 w1  r1 ) ) to transition CONCAT_u16_u32_190_sample_start_
      // start: Forward dependencies from (( $mux b2 w2  r2 )  && ( $mux b3 w3  r3 ) ) to transition CONCAT_u16_u32_190_sample_start_
      // done: Forward dependencies from (( $mux b2 w2  r2 )  && ( $mux b3 w3  r3 ) ) to transition CONCAT_u16_u32_190_sample_start_
      ;;[CONCAT_u16_u32_190_Sample] 
      {
        // binary expression 
        $T [rr] $T [ra]  // (split) binary operation 
      }
      ;;[CONCAT_u16_u32_190_Update] 
      {
        // binary expression 
        $T [cr] $T [ca] // (split) binary operation 
      }
      CONCAT_u16_u32_190_sample_start_ &-> (CONCAT_u16_u32_190_Sample)
      CONCAT_u16_u32_190_sample_completed_ <-& (CONCAT_u16_u32_190_Sample)
      CONCAT_u16_u32_190_sample_completed_ &-> ($null)
      CONCAT_u16_u32_190_update_start_ &-> (CONCAT_u16_u32_190_Update)
      CONCAT_u16_u32_190_update_completed_ <-& (CONCAT_u16_u32_190_Update)
      // Target expression
      // (as target) wval
      // wval
      // write to interface object
      // start: WAR dependencies for wval
      // done: WAR dependencies for wval
      // wval
      // write to interface object
      // end:  	wval := ((( $mux b0 w0  r0 )  && ( $mux b1 w1  r1 ) ) && (( $mux b2 w2  r2 )  && ( $mux b3 w3  r3 ) )) $buffering 1// bits of buffering = 32. 
      // start:  	nic_registers[index] := wval $buffering 1// bits of buffering = 32. 
      //  file nic.linked.aa, line 106
      // Source expression
      // wval
      // Target expression
      // nic_registers[index]
      $T[array_obj_ref_193_sample_start_] 
      $T[array_obj_ref_193_sample_completed_] 
      $T[array_obj_ref_193_update_start_] 
      $T[array_obj_ref_193_update_completed_] 
      $T[array_obj_ref_193_word_address_calculated] 
      $T[array_obj_ref_193_root_address_calculated] 
      $T[array_obj_ref_193_offset_calculated] 
      $T[array_obj_ref_193_index_resized_0] 
      $T[array_obj_ref_193_index_scaled_0] 
      $T[array_obj_ref_193_index_computed_0] 
      // index
      // start: Forward dependencies from index to transition array_obj_ref_193_index_computed_0
      // done: Forward dependencies from index to transition array_obj_ref_193_index_computed_0
      ;;[array_obj_ref_193_index_resize_0] 
      {
        $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
      }
      array_obj_ref_193_index_computed_0 &-> (array_obj_ref_193_index_resize_0)
      array_obj_ref_193_index_resized_0 <-& (array_obj_ref_193_index_resize_0)
      ;;[array_obj_ref_193_index_scale_0] 
      {
        $T [scale_rename_req] $T [scale_rename_ack] // rename 
      }
      array_obj_ref_193_index_resized_0 &-> (array_obj_ref_193_index_scale_0)
      array_obj_ref_193_index_scaled_0 <-& (array_obj_ref_193_index_scale_0)
      ;;[array_obj_ref_193_final_index_sum_regn] 
      {
        $T [req] $T [ack] // rename
      }
      array_obj_ref_193_index_scaled_0 &-> (array_obj_ref_193_final_index_sum_regn)
      array_obj_ref_193_offset_calculated <-& (array_obj_ref_193_final_index_sum_regn)
      ;;[array_obj_ref_193_base_plus_offset] 
      {
        $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
      }
      array_obj_ref_193_offset_calculated &-> (array_obj_ref_193_base_plus_offset)
      array_obj_ref_193_root_address_calculated <-& (array_obj_ref_193_base_plus_offset)
      ;;[array_obj_ref_193_word_addrgen] 
      {
        $T [root_register_req] $T [root_register_ack]
      }
      array_obj_ref_193_root_address_calculated &-> (array_obj_ref_193_word_addrgen)
      array_obj_ref_193_word_address_calculated <-& (array_obj_ref_193_word_addrgen)
      ;;[array_obj_ref_193_Sample] 
      {
        ;;[array_obj_ref_193_Split] 
        {
          $T [split_req] $T [split_ack]
        }
        ||[word_access_start] 
        {
          ;;[word_0] 
          {
            $T [rr] $T [ra] 
          }
        }
      }
      ;;[array_obj_ref_193_Update] 
      {
        ||[word_access_complete] 
        {
          ;;[word_0] 
          {
            $T [cr] $T [ca] 
          }
        }
      }
      array_obj_ref_193_sample_start_ <-& (array_obj_ref_193_word_address_calculated)
      array_obj_ref_193_sample_start_ &-> (array_obj_ref_193_Sample)
      array_obj_ref_193_sample_completed_ <-& (array_obj_ref_193_Sample)
      array_obj_ref_193_sample_completed_ &-> ($null)
      array_obj_ref_193_update_start_ &-> (array_obj_ref_193_Update)
      array_obj_ref_193_update_completed_ <-& (array_obj_ref_193_Update)
      // start: Forward dependencies from wval to transition array_obj_ref_193_sample_start_
      array_obj_ref_193_sample_start_ <-& (CONCAT_u16_u32_190_update_completed_)
      // done: Forward dependencies from wval to transition array_obj_ref_193_sample_start_
      // end:  	nic_registers[index] := wval $buffering 1// bits of buffering = 32. 
      // load-store dependencies..
      // memory-space  memory_space_0
      //  array_obj_ref_193 store
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %UpdateRegister
    //  file nic.linked.aa, line 88
    // ( $mux b0 w0  r0 ) 
    // ( $mux b1 w1  r1 ) 
    // ( $mux b2 w2  r2 ) 
    // ( $mux b3 w3  r3 ) 
    // nic_registers[index]
    $constant $W[array_obj_ref_193_resized_base_address] : $int<6> := _b000000// 0
    $constant $W[array_obj_ref_193_offset_scale_factor_0] : $int<6> := _b000001// 1
    $constant $W[array_obj_ref_193_word_offset_0] : $int<6> := _b000000// 0
    // 	$volatile b0 := ( $slice bmask 3 3 )  $buffering 1
    //  file nic.linked.aa, line 93
    // b0
    $W[b0_126] : $int<1>
    // 	$volatile b1 := ( $slice bmask 2 2 )  $buffering 1
    //  file nic.linked.aa, line 94
    // b1
    $W[b1_130] : $int<1>
    // 	$volatile b2 := ( $slice bmask 1 1 )  $buffering 1
    //  file nic.linked.aa, line 95
    // b2
    $W[b2_134] : $int<1>
    // 	$volatile b3 := ( $slice bmask 0 0 )  $buffering 1
    //  file nic.linked.aa, line 96
    // b3
    $W[b3_138] : $int<1>
    // 	$volatile r0 := ( $slice rval 31 24 )  $buffering 1
    //  file nic.linked.aa, line 97
    // r0
    $W[r0_142] : $int<8>
    // 	$volatile r1 := ( $slice rval 23 16 )  $buffering 1
    //  file nic.linked.aa, line 98
    // r1
    $W[r1_146] : $int<8>
    // 	$volatile r2 := ( $slice rval 15 8 )  $buffering 1
    //  file nic.linked.aa, line 99
    // r2
    $W[r2_150] : $int<8>
    // 	$volatile r3 := ( $slice rval 7 0 )  $buffering 1
    //  file nic.linked.aa, line 100
    // r3
    $W[r3_154] : $int<8>
    // 	$volatile w0 := ( $slice wdata 31 24 )  $buffering 1
    //  file nic.linked.aa, line 101
    // w0
    $W[w0_158] : $int<8>
    // 	$volatile w1 := ( $slice wdata 23 16 )  $buffering 1
    //  file nic.linked.aa, line 102
    // w1
    $W[w1_162] : $int<8>
    // 	$volatile w2 := ( $slice wdata 15 8 )  $buffering 1
    //  file nic.linked.aa, line 103
    // w2
    $W[w2_166] : $int<8>
    // 	$volatile w3 := ( $slice wdata 7 0 )  $buffering 1
    //  file nic.linked.aa, line 104
    // w3
    $W[w3_170] : $int<8>
    // 	wval := ((( $mux b0 w0  r0 )  && ( $mux b1 w1  r1 ) ) && (( $mux b2 w2  r2 )  && ( $mux b3 w3  r3 ) )) $buffering 1// bits of buffering = 32. 
    //  file nic.linked.aa, line 105
    // ( $mux b0 w0  r0 ) 
    $intermediate $W[MUX_175_wire] : $int<8>
    // ( $mux b1 w1  r1 ) 
    $intermediate $W[MUX_179_wire] : $int<8>
    // (( $mux b0 w0  r0 )  && ( $mux b1 w1  r1 ) )
    $intermediate $W[CONCAT_u8_u16_180_wire] : $int<16>
    // ( $mux b2 w2  r2 ) 
    $intermediate $W[MUX_184_wire] : $int<8>
    // ( $mux b3 w3  r3 ) 
    $intermediate $W[MUX_188_wire] : $int<8>
    // (( $mux b2 w2  r2 )  && ( $mux b3 w3  r3 ) )
    $intermediate $W[CONCAT_u8_u16_189_wire] : $int<16>
    // wval
    // 	nic_registers[index] := wval $buffering 1// bits of buffering = 32. 
    //  file nic.linked.aa, line 106
    // nic_registers[index]
    $intermediate $W[R_index_192_resized] : $int<6>
    $intermediate $W[R_index_192_scaled] : $int<6>
    $intermediate $W[array_obj_ref_193_final_offset] : $int<6>
    $intermediate $W[array_obj_ref_193_root_address] : $int<6>
    $W[array_obj_ref_193_word_address_0] : $pointer<memory_space_0>
    $W[array_obj_ref_193_data_0] : $int<32>
    // 	$volatile b0 := ( $slice bmask 3 3 )  $buffering 1
    //  file nic.linked.aa, line 93
    // ( $slice bmask 3 3 ) 
    [:] [slice_125_inst] (bmask 3 3) (b0_126)  $flowthrough
    $delay slice_125_inst 0
    // 	$volatile b1 := ( $slice bmask 2 2 )  $buffering 1
    //  file nic.linked.aa, line 94
    // ( $slice bmask 2 2 ) 
    [:] [slice_129_inst] (bmask 2 2) (b1_130)  $flowthrough
    $delay slice_129_inst 0
    // 	$volatile b2 := ( $slice bmask 1 1 )  $buffering 1
    //  file nic.linked.aa, line 95
    // ( $slice bmask 1 1 ) 
    [:] [slice_133_inst] (bmask 1 1) (b2_134)  $flowthrough
    $delay slice_133_inst 0
    // 	$volatile b3 := ( $slice bmask 0 0 )  $buffering 1
    //  file nic.linked.aa, line 96
    // ( $slice bmask 0 0 ) 
    [:] [slice_137_inst] (bmask 0 0) (b3_138)  $flowthrough
    $delay slice_137_inst 0
    // 	$volatile r0 := ( $slice rval 31 24 )  $buffering 1
    //  file nic.linked.aa, line 97
    // ( $slice rval 31 24 ) 
    [:] [slice_141_inst] (rval 31 24) (r0_142)  $flowthrough
    $delay slice_141_inst 0
    // 	$volatile r1 := ( $slice rval 23 16 )  $buffering 1
    //  file nic.linked.aa, line 98
    // ( $slice rval 23 16 ) 
    [:] [slice_145_inst] (rval 23 16) (r1_146)  $flowthrough
    $delay slice_145_inst 0
    // 	$volatile r2 := ( $slice rval 15 8 )  $buffering 1
    //  file nic.linked.aa, line 99
    // ( $slice rval 15 8 ) 
    [:] [slice_149_inst] (rval 15 8) (r2_150)  $flowthrough
    $delay slice_149_inst 0
    // 	$volatile r3 := ( $slice rval 7 0 )  $buffering 1
    //  file nic.linked.aa, line 100
    // ( $slice rval 7 0 ) 
    [:] [slice_153_inst] (rval 7 0) (r3_154)  $flowthrough
    $delay slice_153_inst 0
    // 	$volatile w0 := ( $slice wdata 31 24 )  $buffering 1
    //  file nic.linked.aa, line 101
    // ( $slice wdata 31 24 ) 
    [:] [slice_157_inst] (wdata 31 24) (w0_158)  $flowthrough
    $delay slice_157_inst 0
    // 	$volatile w1 := ( $slice wdata 23 16 )  $buffering 1
    //  file nic.linked.aa, line 102
    // ( $slice wdata 23 16 ) 
    [:] [slice_161_inst] (wdata 23 16) (w1_162)  $flowthrough
    $delay slice_161_inst 0
    // 	$volatile w2 := ( $slice wdata 15 8 )  $buffering 1
    //  file nic.linked.aa, line 103
    // ( $slice wdata 15 8 ) 
    [:] [slice_165_inst] (wdata 15 8) (w2_166)  $flowthrough
    $delay slice_165_inst 0
    // 	$volatile w3 := ( $slice wdata 7 0 )  $buffering 1
    //  file nic.linked.aa, line 104
    // ( $slice wdata 7 0 ) 
    [:] [slice_169_inst] (wdata 7 0) (w3_170)  $flowthrough
    $delay slice_169_inst 0
    // 	wval := ((( $mux b0 w0  r0 )  && ( $mux b1 w1  r1 ) ) && (( $mux b2 w2  r2 )  && ( $mux b3 w3  r3 ) )) $buffering 1// bits of buffering = 32. 
    //  file nic.linked.aa, line 105
    // ( $mux b0 w0  r0 ) 
    ? [MUX_175_inst] (b0_126 w0_158 r0_142) (MUX_175_wire)  $flowthrough
    // ( $mux b1 w1  r1 ) 
    ? [MUX_179_inst] (b1_130 w1_162 r1_146) (MUX_179_wire)  $flowthrough
    // (( $mux b0 w0  r0 )  && ( $mux b1 w1  r1 ) )
    &&[CONCAT_u8_u16_180_inst] (MUX_175_wire MUX_179_wire) (CONCAT_u8_u16_180_wire)   $flowthrough 
    $delay CONCAT_u8_u16_180_inst 0
    // ( $mux b2 w2  r2 ) 
    ? [MUX_184_inst] (b2_134 w2_166 r2_150) (MUX_184_wire)  $flowthrough
    // ( $mux b3 w3  r3 ) 
    ? [MUX_188_inst] (b3_138 w3_170 r3_154) (MUX_188_wire)  $flowthrough
    // (( $mux b2 w2  r2 )  && ( $mux b3 w3  r3 ) )
    &&[CONCAT_u8_u16_189_inst] (MUX_184_wire MUX_188_wire) (CONCAT_u8_u16_189_wire)   $flowthrough 
    $delay CONCAT_u8_u16_189_inst 0
    // ((( $mux b0 w0  r0 )  && ( $mux b1 w1  r1 ) ) && (( $mux b2 w2  r2 )  && ( $mux b3 w3  r3 ) ))
    &&[CONCAT_u16_u32_190_inst] (CONCAT_u8_u16_180_wire CONCAT_u8_u16_189_wire) (wval)   
    $buffering  $out CONCAT_u16_u32_190_inst wval 1
    $delay CONCAT_u16_u32_190_inst 1
    // 	nic_registers[index] := wval $buffering 1// bits of buffering = 32. 
    //  file nic.linked.aa, line 106
    // nic_registers[index]
    &/ [array_obj_ref_193_index_0_resize] (index) (R_index_192_resized) 
    $flowthrough 
    &/ [array_obj_ref_193_index_0_rename] (R_index_192_resized) (R_index_192_scaled) 
    $flowthrough 
    &/ [array_obj_ref_193_index_offset] (R_index_192_scaled) (array_obj_ref_193_final_offset) 
    $flowthrough 
    &/ [array_obj_ref_193_root_address_inst] (array_obj_ref_193_final_offset) (array_obj_ref_193_root_address) 
    $flowthrough 
    &/ [array_obj_ref_193_addr_0] (array_obj_ref_193_root_address) (array_obj_ref_193_word_address_0) 
    $flowthrough 
    $store [array_obj_ref_193_store_0] $to memory_space_0 (array_obj_ref_193_word_address_0 array_obj_ref_193_data_0) 
    $delay array_obj_ref_193_store_0 4
    &/ [array_obj_ref_193_gather_scatter] (wval) (array_obj_ref_193_data_0) 
    $flowthrough 
  }
  // end data-path
  // 	$volatile b0 := ( $slice bmask 3 3 )  $buffering 1
  //  file nic.linked.aa, line 93
  // bmask
  // 	$volatile b1 := ( $slice bmask 2 2 )  $buffering 1
  //  file nic.linked.aa, line 94
  // bmask
  // 	$volatile b2 := ( $slice bmask 1 1 )  $buffering 1
  //  file nic.linked.aa, line 95
  // bmask
  // 	$volatile b3 := ( $slice bmask 0 0 )  $buffering 1
  //  file nic.linked.aa, line 96
  // bmask
  // 	$volatile r0 := ( $slice rval 31 24 )  $buffering 1
  //  file nic.linked.aa, line 97
  // rval
  // 	$volatile r1 := ( $slice rval 23 16 )  $buffering 1
  //  file nic.linked.aa, line 98
  // rval
  // 	$volatile r2 := ( $slice rval 15 8 )  $buffering 1
  //  file nic.linked.aa, line 99
  // rval
  // 	$volatile r3 := ( $slice rval 7 0 )  $buffering 1
  //  file nic.linked.aa, line 100
  // rval
  // 	$volatile w0 := ( $slice wdata 31 24 )  $buffering 1
  //  file nic.linked.aa, line 101
  // wdata
  // 	$volatile w1 := ( $slice wdata 23 16 )  $buffering 1
  //  file nic.linked.aa, line 102
  // wdata
  // 	$volatile w2 := ( $slice wdata 15 8 )  $buffering 1
  //  file nic.linked.aa, line 103
  // wdata
  // 	$volatile w3 := ( $slice wdata 7 0 )  $buffering 1
  //  file nic.linked.aa, line 104
  // wdata
  // 	wval := ((( $mux b0 w0  r0 )  && ( $mux b1 w1  r1 ) ) && (( $mux b2 w2  r2 )  && ( $mux b3 w3  r3 ) )) $buffering 1// bits of buffering = 32. 
  //  file nic.linked.aa, line 105
  // ((( $mux b0 w0  r0 )  && ( $mux b1 w1  r1 ) ) && (( $mux b2 w2  r2 )  && ( $mux b3 w3  r3 ) ))
  // (( $mux b0 w0  r0 )  && ( $mux b1 w1  r1 ) )
  // b0
  // w0
  // r0
  // ( $mux b0 w0  r0 ) 
  // b1
  // w1
  // r1
  // ( $mux b1 w1  r1 ) 
  // (( $mux b2 w2  r2 )  && ( $mux b3 w3  r3 ) )
  // b2
  // w2
  // r2
  // ( $mux b2 w2  r2 ) 
  // b3
  // w3
  // r3
  // ( $mux b3 w3  r3 ) 
  CONCAT_u16_u32_190_inst <=> (assign_stmt_126_to_assign_stmt_195/CONCAT_u16_u32_190_Sample/rr assign_stmt_126_to_assign_stmt_195/CONCAT_u16_u32_190_Update/cr) (assign_stmt_126_to_assign_stmt_195/CONCAT_u16_u32_190_Sample/ra assign_stmt_126_to_assign_stmt_195/CONCAT_u16_u32_190_Update/ca)
  // 	nic_registers[index] := wval $buffering 1// bits of buffering = 32. 
  //  file nic.linked.aa, line 106
  // wval
  // index
  array_obj_ref_193_index_0_resize <=> (assign_stmt_126_to_assign_stmt_195/array_obj_ref_193_index_resize_0/index_resize_req) (assign_stmt_126_to_assign_stmt_195/array_obj_ref_193_index_resize_0/index_resize_ack)
  array_obj_ref_193_index_0_rename <=> (assign_stmt_126_to_assign_stmt_195/array_obj_ref_193_index_scale_0/scale_rename_req) (assign_stmt_126_to_assign_stmt_195/array_obj_ref_193_index_scale_0/scale_rename_ack)
  array_obj_ref_193_index_offset <=> (assign_stmt_126_to_assign_stmt_195/array_obj_ref_193_final_index_sum_regn/req) (assign_stmt_126_to_assign_stmt_195/array_obj_ref_193_final_index_sum_regn/ack)
  array_obj_ref_193_root_address_inst <=> (assign_stmt_126_to_assign_stmt_195/array_obj_ref_193_base_plus_offset/sum_rename_req) (assign_stmt_126_to_assign_stmt_195/array_obj_ref_193_base_plus_offset/sum_rename_ack)
  array_obj_ref_193_addr_0 <=> (assign_stmt_126_to_assign_stmt_195/array_obj_ref_193_word_addrgen/root_register_req) (assign_stmt_126_to_assign_stmt_195/array_obj_ref_193_word_addrgen/root_register_ack)
  array_obj_ref_193_gather_scatter <=> (assign_stmt_126_to_assign_stmt_195/array_obj_ref_193_Sample/array_obj_ref_193_Split/split_req) (assign_stmt_126_to_assign_stmt_195/array_obj_ref_193_Sample/array_obj_ref_193_Split/split_ack)
  array_obj_ref_193_store_0 <=> (assign_stmt_126_to_assign_stmt_195/array_obj_ref_193_Sample/word_access_start/word_0/rr assign_stmt_126_to_assign_stmt_195/array_obj_ref_193_Update/word_access_complete/word_0/cr) (assign_stmt_126_to_assign_stmt_195/array_obj_ref_193_Sample/word_access_start/word_0/ra assign_stmt_126_to_assign_stmt_195/array_obj_ref_193_Update/word_access_complete/word_0/ca)
}
$module [NicRegisterAccessDaemon] 
{
  // pipe-declarations for block %NicRegisterAccessDaemon
  //  file nic.linked.aa, line 108
  // pipe-declarations for block %NicRegisterAccessDaemon%loop
  //  file nic.linked.aa, line 113
  // memory-space 0 is read from.
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    <>[branch_block_stmt_198] // Branch Block  file nic.linked.aa, line 113
    {
      $P [branch_block_stmt_198__entry__]
      branch_block_stmt_198__entry__ <-| ($entry)
      $P [branch_block_stmt_198__exit__]
      branch_block_stmt_198__exit__ |-> ($exit)
      $P [do_while_stmt_199__entry__] 
      $P [do_while_stmt_199__exit__] 
      // do-while-statement  
      //  file nic.linked.aa, line 115
      <o> [do_while_stmt_199]  $depth 31 $buffering 1 
      {
        $P[do_while_stmt_199__entry__] 
        $P[do_while_stmt_199__exit__] 
        $P[loop_back] 
        $P[condition_done] 
        $P[loop_body_done] 
        $pipeline [do_while_stmt_199_loop_body] 
        {
          // Pipelined!
          $T[back_edge_to_loop_body] 
          $T[first_time_through_loop_body] 
          $T[loop_body_start] 
          $T[condition_evaluated] 
          $transitionmerge [entry_tmerge] (back_edge_to_loop_body first_time_through_loop_body) (loop_body_start)
          $entry <-& (loop_body_start)
          // start:  			req := NIC_REQUEST_REGISTER_ACCESS_PIPE $buffering 1// bits of buffering = 43. 
          //  file nic.linked.aa, line 119
          // Source expression
          // NIC_REQUEST_REGISTER_ACCESS_PIPE
          $T[RPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_202_sample_start_] 
          $T[RPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_202_sample_completed_] 
          $T[RPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_202_update_start_] 
          $T[RPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_202_update_completed_] 
          ;;[RPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_202_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_202_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_202_sample_start_ &-> (RPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_202_Sample)
          RPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_202_sample_completed_ <-& (RPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_202_Sample)
          RPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_202_update_start_ <-& (RPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_202_sample_completed_)
          RPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_202_update_start_ &-> (RPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_202_Update)
          RPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_202_update_completed_ <-& (RPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_202_Update)
          RPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_202_sample_start_ o<-& (RPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_202_update_completed_ 0)
          // Target expression
          // (as target) req
          // start: WAR dependencies for req
          // done: WAR dependencies for req
          // end:  			req := NIC_REQUEST_REGISTER_ACCESS_PIPE $buffering 1// bits of buffering = 43. 
          // start: WAR dependencies for rwbar
          // done: WAR dependencies for rwbar
          // start:  			$volatile rwbar := ( $slice req 42 42 )  $buffering 1
          //  file nic.linked.aa, line 121
          // volatile! 
          // Source expression
          // ( $slice req 42 42 ) 
          // req
          // Target expression
          // (as target) rwbar
          // start: WAR dependencies for rwbar
          // done: WAR dependencies for rwbar
          // end:  			$volatile rwbar := ( $slice req 42 42 )  $buffering 1
          // start: WAR dependencies for bmask
          // done: WAR dependencies for bmask
          // start:  			$volatile bmask := ( $slice req 41 38 )  $buffering 1
          //  file nic.linked.aa, line 122
          // volatile! 
          // Source expression
          // ( $slice req 41 38 ) 
          // req
          // Target expression
          // (as target) bmask
          // start: WAR dependencies for bmask
          // done: WAR dependencies for bmask
          // end:  			$volatile bmask := ( $slice req 41 38 )  $buffering 1
          // start: WAR dependencies for index
          // done: WAR dependencies for index
          // start:  			$volatile index := ( $slice req 37 32 )  $buffering 1
          //  file nic.linked.aa, line 123
          // volatile! 
          // Source expression
          // ( $slice req 37 32 ) 
          // req
          // Target expression
          // (as target) index
          // start: WAR dependencies for index
          // done: WAR dependencies for index
          // end:  			$volatile index := ( $slice req 37 32 )  $buffering 1
          // start: WAR dependencies for wdata
          // done: WAR dependencies for wdata
          // start:  			$volatile wdata := ( $slice req 31 0 )  $buffering 1
          //  file nic.linked.aa, line 124
          // volatile! 
          // Source expression
          // ( $slice req 31 0 ) 
          // req
          // Target expression
          // (as target) wdata
          // start: WAR dependencies for wdata
          // done: WAR dependencies for wdata
          // end:  			$volatile wdata := ( $slice req 31 0 )  $buffering 1
          // start:  			rval := nic_registers[index] $buffering 1// bits of buffering = 32. 
          //  file nic.linked.aa, line 125
          // Source expression
          // nic_registers[index]
          $T[array_obj_ref_223_base_address_calculated] 
          $T[array_obj_ref_223_sample_start_] 
          $T[array_obj_ref_223_sample_completed_] 
          $T[array_obj_ref_223_update_start_] 
          $T[array_obj_ref_223_update_completed_] 
          $T[array_obj_ref_223_word_address_calculated] 
          $T[array_obj_ref_223_root_address_calculated] 
          $T[array_obj_ref_223_offset_calculated] 
          $T[array_obj_ref_223_index_resized_0] 
          $T[array_obj_ref_223_index_scaled_0] 
          $T[array_obj_ref_223_index_computed_0] 
          // index
          // start: Forward dependencies from index to transition array_obj_ref_223_index_computed_0
          array_obj_ref_223_index_computed_0 <-& (RPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_202_update_completed_)
          // done: Forward dependencies from index to transition array_obj_ref_223_index_computed_0
          ;;[array_obj_ref_223_index_resize_0] 
          {
            $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
          }
          array_obj_ref_223_index_computed_0 &-> (array_obj_ref_223_index_resize_0)
          array_obj_ref_223_index_resized_0 <-& (array_obj_ref_223_index_resize_0)
          ;;[array_obj_ref_223_index_scale_0] 
          {
            $T [scale_rename_req] $T [scale_rename_ack] // rename 
          }
          array_obj_ref_223_index_resized_0 &-> (array_obj_ref_223_index_scale_0)
          array_obj_ref_223_index_scaled_0 <-& (array_obj_ref_223_index_scale_0)
          ;;[array_obj_ref_223_final_index_sum_regn] 
          {
            $T [req] $T [ack] // rename
          }
          array_obj_ref_223_index_scaled_0 &-> (array_obj_ref_223_final_index_sum_regn)
          array_obj_ref_223_offset_calculated <-& (array_obj_ref_223_final_index_sum_regn)
          ;;[array_obj_ref_223_base_plus_offset] 
          {
            $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
          }
          array_obj_ref_223_offset_calculated &-> (array_obj_ref_223_base_plus_offset)
          array_obj_ref_223_root_address_calculated <-& (array_obj_ref_223_base_plus_offset)
          ;;[array_obj_ref_223_word_addrgen] 
          {
            $T [root_register_req] $T [root_register_ack]
          }
          array_obj_ref_223_root_address_calculated &-> (array_obj_ref_223_word_addrgen)
          array_obj_ref_223_word_address_calculated <-& (array_obj_ref_223_word_addrgen)
          ;;[array_obj_ref_223_Sample] 
          {
            ||[word_access_start] 
            {
              ;;[word_0] 
              {
                $T [rr] $T [ra] 
              }
            }
          }
          ;;[array_obj_ref_223_Update] 
          {
            ||[word_access_complete] 
            {
              ;;[word_0] 
              {
                $T [cr] $T [ca] 
              }
            }
            ;;[array_obj_ref_223_Merge] 
            {
              $T [merge_req] $T [merge_ack]
            }
          }
          array_obj_ref_223_sample_start_ <-& (array_obj_ref_223_word_address_calculated)
          // reenable-joins
          RPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_202_update_start_ o<-& (array_obj_ref_223_sample_completed_ 0)
          array_obj_ref_223_sample_start_ &-> (array_obj_ref_223_Sample)
          array_obj_ref_223_sample_completed_ <-& (array_obj_ref_223_Sample)
          array_obj_ref_223_sample_completed_ &-> ($null)
          array_obj_ref_223_update_start_ &-> (array_obj_ref_223_Update)
          array_obj_ref_223_update_completed_ <-& (array_obj_ref_223_Update)
          // self-release: 
          array_obj_ref_223_sample_start_ o<-& (array_obj_ref_223_sample_completed_ 1)
          $null &-> (array_obj_ref_223_update_start_)
          array_obj_ref_223_update_start_ o<-& (array_obj_ref_223_update_completed_ 0)
          // Target expression
          // (as target) rval
          // start: WAR dependencies for rval
          // done: WAR dependencies for rval
          // end:  			rval := nic_registers[index] $buffering 1// bits of buffering = 32. 
          // start: 			$guard (~rwbar) $call UpdateRegister (bmask rval wdata index ) (wval ) 
          //  file nic.linked.aa, line 127
          $T[call_stmt_234_sample_start_] 
          $T[call_stmt_234_sample_completed_] 
          $T[call_stmt_234_update_start_] 
          $T[call_stmt_234_update_completed_] 
          // Guard expression
          // rwbar
          // start: Forward dependencies from rwbar to transition call_stmt_234_sample_start_
          call_stmt_234_sample_start_ <-& (RPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_202_update_completed_)
          // done: Forward dependencies from rwbar to transition call_stmt_234_sample_start_
          // RAW reenables for rwbar
          RPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_202_update_start_ o<-& (call_stmt_234_sample_completed_ 0)
          // Call input argument 0
          // bmask
          // Call input argument 1
          // rval
          // Call input argument 2
          // wdata
          // Call input argument 3
          // index
          // start: Forward dependencies from bmask to transition call_stmt_234_sample_start_
          call_stmt_234_sample_start_ <-& (RPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_202_update_completed_)
          // done: Forward dependencies from bmask to transition call_stmt_234_sample_start_
          // RAW reenables for bmask
          RPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_202_update_start_ o<-& (call_stmt_234_sample_completed_ 0)
          // start: Forward dependencies from rval to transition call_stmt_234_sample_start_
          call_stmt_234_sample_start_ <-& (array_obj_ref_223_update_completed_)
          // done: Forward dependencies from rval to transition call_stmt_234_sample_start_
          // RAW reenables for rval
          array_obj_ref_223_update_start_ o<-& (call_stmt_234_sample_completed_ 0)
          // start: Forward dependencies from wdata to transition call_stmt_234_sample_start_
          call_stmt_234_sample_start_ <-& (RPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_202_update_completed_)
          // done: Forward dependencies from wdata to transition call_stmt_234_sample_start_
          // RAW reenables for wdata
          RPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_202_update_start_ o<-& (call_stmt_234_sample_completed_ 0)
          // start: Forward dependencies from index to transition call_stmt_234_sample_start_
          call_stmt_234_sample_start_ <-& (RPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_202_update_completed_)
          // done: Forward dependencies from index to transition call_stmt_234_sample_start_
          // RAW reenables for index
          RPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_202_update_start_ o<-& (call_stmt_234_sample_completed_ 0)
          ;;[call_stmt_234_Sample] 
          {
            $T [crr] $T [cra] 
          }
          ;;[call_stmt_234_Update] 
          {
            $T [ccr] $T [cca] 
          }
          call_stmt_234_sample_start_ &-> (call_stmt_234_Sample)
          call_stmt_234_sample_completed_ <-& (call_stmt_234_Sample)
          call_stmt_234_sample_completed_ &-> ($null)
          call_stmt_234_update_start_ &-> (call_stmt_234_Update)
          call_stmt_234_update_completed_ <-& (call_stmt_234_Update)
          // Call output argument 0
          // (as target) wval
          // self-release: 
          call_stmt_234_sample_start_ o<-& (call_stmt_234_sample_completed_ 1)
          $null &-> (call_stmt_234_update_start_)
          call_stmt_234_update_start_ o<-& (call_stmt_234_update_completed_ 0)
          // start: WAR dependencies for wval
          // done: WAR dependencies for wval
          // end: 			$guard (~rwbar) $call UpdateRegister (bmask rval wdata index ) (wval ) 
          // start: WAR dependencies for rdata
          // done: WAR dependencies for rdata
          // start:  			$volatile rdata := ( $mux rwbar rval  ($bitcast ($uint<32>) _b0  ) )  $buffering 1
          //  file nic.linked.aa, line 128
          // volatile! 
          // Source expression
          // ( $mux rwbar rval  ($bitcast ($uint<32>) _b0  ) ) 
          // rwbar
          // rval
          // Target expression
          // (as target) rdata
          // start: WAR dependencies for rdata
          // done: WAR dependencies for rdata
          // end:  			$volatile rdata := ( $mux rwbar rval  ($bitcast ($uint<32>) _b0  ) )  $buffering 1
          // start: WAR dependencies for resp
          // done: WAR dependencies for resp
          // start:  			$volatile resp := (($bitcast ($uint<1>) _b0  ) && rdata) $buffering 1
          //  file nic.linked.aa, line 129
          // volatile! 
          // Source expression
          // (($bitcast ($uint<1>) _b0  ) && rdata)
          // rdata
          // Target expression
          // (as target) resp
          // start: WAR dependencies for resp
          // done: WAR dependencies for resp
          // end:  			$volatile resp := (($bitcast ($uint<1>) _b0  ) && rdata) $buffering 1
          // start:  			NIC_RESPONSE_REGISTER_ACCESS_PIPE := resp $buffering 1// bits of buffering = 33. 
          //  file nic.linked.aa, line 130
          // Source expression
          // resp
          // Target expression
          // (as target) NIC_RESPONSE_REGISTER_ACCESS_PIPE
          $T[WPIPE_NIC_RESPONSE_REGISTER_ACCESS_PIPE_248_sample_start_] 
          $T[WPIPE_NIC_RESPONSE_REGISTER_ACCESS_PIPE_248_sample_completed_] 
          $T[WPIPE_NIC_RESPONSE_REGISTER_ACCESS_PIPE_248_update_start_] 
          $T[WPIPE_NIC_RESPONSE_REGISTER_ACCESS_PIPE_248_update_completed_] 
          ;;[WPIPE_NIC_RESPONSE_REGISTER_ACCESS_PIPE_248_Sample] 
          {
            // pipe write sample-start NIC_RESPONSE_REGISTER_ACCESS_PIPE
            $T [req] $T [ack] 
          }
          ;;[WPIPE_NIC_RESPONSE_REGISTER_ACCESS_PIPE_248_Update] 
          {
            // pipe write update (complete) NIC_RESPONSE_REGISTER_ACCESS_PIPE
            $T [req] $T [ack] 
          }
          WPIPE_NIC_RESPONSE_REGISTER_ACCESS_PIPE_248_sample_start_ &-> (WPIPE_NIC_RESPONSE_REGISTER_ACCESS_PIPE_248_Sample)
          WPIPE_NIC_RESPONSE_REGISTER_ACCESS_PIPE_248_sample_completed_ <-& (WPIPE_NIC_RESPONSE_REGISTER_ACCESS_PIPE_248_Sample)
          WPIPE_NIC_RESPONSE_REGISTER_ACCESS_PIPE_248_update_start_ <-& (WPIPE_NIC_RESPONSE_REGISTER_ACCESS_PIPE_248_sample_completed_)
          WPIPE_NIC_RESPONSE_REGISTER_ACCESS_PIPE_248_update_start_ &-> (WPIPE_NIC_RESPONSE_REGISTER_ACCESS_PIPE_248_Update)
          WPIPE_NIC_RESPONSE_REGISTER_ACCESS_PIPE_248_update_completed_ <-& (WPIPE_NIC_RESPONSE_REGISTER_ACCESS_PIPE_248_Update)
          WPIPE_NIC_RESPONSE_REGISTER_ACCESS_PIPE_248_sample_start_ o<-& (WPIPE_NIC_RESPONSE_REGISTER_ACCESS_PIPE_248_update_completed_ 0)
          // start: Forward dependencies from resp to transition WPIPE_NIC_RESPONSE_REGISTER_ACCESS_PIPE_248_sample_start_
          WPIPE_NIC_RESPONSE_REGISTER_ACCESS_PIPE_248_sample_start_ <-& (RPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_202_update_completed_)
          WPIPE_NIC_RESPONSE_REGISTER_ACCESS_PIPE_248_sample_start_ <-& (array_obj_ref_223_update_completed_)
          // done: Forward dependencies from resp to transition WPIPE_NIC_RESPONSE_REGISTER_ACCESS_PIPE_248_sample_start_
          // RAW reenables for resp
          RPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_202_update_start_ o<-& (WPIPE_NIC_RESPONSE_REGISTER_ACCESS_PIPE_248_sample_completed_ 0)
          array_obj_ref_223_update_start_ o<-& (WPIPE_NIC_RESPONSE_REGISTER_ACCESS_PIPE_248_sample_completed_ 0)
          // end:  			NIC_RESPONSE_REGISTER_ACCESS_PIPE := resp $buffering 1// bits of buffering = 33. 
          $T [loop_body_delay_to_condition_start] $delay
          loop_body_start &-> (loop_body_delay_to_condition_start)
          loop_body_delay_to_condition_start &-> (condition_evaluated)
          condition_evaluated &-> ($null)
          // load-store dependencies..
          // memory-space  memory_space_0
          //  array_obj_ref_223 load
          //  call_stmt_234 store
          $T [array_obj_ref_223_call_stmt_234_delay] $delay
          // array_obj_ref_223(load) -> call_stmt_234(store)
          call_stmt_234_sample_start_ <-& (array_obj_ref_223_call_stmt_234_delay)
          array_obj_ref_223_call_stmt_234_delay <-& (array_obj_ref_223_sample_completed_)
          // reenable across ring for memory space memory_space_0
          $T[ring_reenable_memory_space_0] 
          ring_reenable_memory_space_0 <-& (call_stmt_234_update_completed_)
          array_obj_ref_223_sample_start_ o<-& (ring_reenable_memory_space_0 1)
          // pipe read/write dependencies for pipe NIC_REQUEST_REGISTER_ACCESS_PIPE
          // read-dependencies for pipe NIC_REQUEST_REGISTER_ACCESS_PIPE
          // write-dependencies for pipe NIC_REQUEST_REGISTER_ACCESS_PIPE
          // signal write dependencies for NIC_REQUEST_REGISTER_ACCESS_PIPE
          // pipe read/write dependencies for pipe NIC_RESPONSE_REGISTER_ACCESS_PIPE
          // read-dependencies for pipe NIC_RESPONSE_REGISTER_ACCESS_PIPE
          // write-dependencies for pipe NIC_RESPONSE_REGISTER_ACCESS_PIPE
          // signal write dependencies for NIC_RESPONSE_REGISTER_ACCESS_PIPE
        }
        ( first_time_through_loop_body  back_edge_to_loop_body) 
        ( condition_evaluated )
        ;; [loop_exit] 
        {
          $T [ack] 
        }
        ;; [loop_taken] 
        {
          $T [ack] 
        }
        do_while_stmt_199__entry__ <-| ($entry)
        loop_body_done <-| ( do_while_stmt_199_loop_body ) 
        condition_done |-> (loop_exit loop_taken)
        do_while_stmt_199__exit__ |-> ($exit)
        $bind condition_done <= do_while_stmt_199_loop_body : condition_evaluated
        $bind do_while_stmt_199__entry__  => do_while_stmt_199_loop_body : first_time_through_loop_body 
        $bind loop_back  => do_while_stmt_199_loop_body : back_edge_to_loop_body 
        $terminate (loop_exit loop_taken loop_body_done) (loop_back do_while_stmt_199__exit__)
      }
      do_while_stmt_199__entry__ |-> (do_while_stmt_199)
      do_while_stmt_199__exit__ <-| (do_while_stmt_199)
      do_while_stmt_199__entry__ <-| (branch_block_stmt_198__entry__)
      do_while_stmt_199__exit__ |-> (branch_block_stmt_198__exit__)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %NicRegisterAccessDaemon%loop%
    //  file nic.linked.aa, line 117
    // constant-object-declarations for block %NicRegisterAccessDaemon%loop
    //  file nic.linked.aa, line 113
    // constant-object-declarations for block %NicRegisterAccessDaemon
    //  file nic.linked.aa, line 108
    // constant-declarations for block %NicRegisterAccessDaemon%loop
    //  file nic.linked.aa, line 113
    // do-while statement  
    //  file nic.linked.aa, line 115
    // 1 
    $constant $W[konst_252_wire_constant] : $int<1> := _b1// 1
    // constant-declarations for block %NicRegisterAccessDaemon%loop%
    //  file nic.linked.aa, line 117
    // nic_registers[index]
    $constant $W[array_obj_ref_223_resized_base_address] : $int<6> := _b000000// 0
    $constant $W[array_obj_ref_223_offset_scale_factor_0] : $int<6> := _b000001// 1
    $constant $W[array_obj_ref_223_word_offset_0] : $int<6> := _b000000// 0
    // 			$guard (~rwbar) $call UpdateRegister (bmask rval wdata index ) (wval ) 
    //  file nic.linked.aa, line 127
    // ( $mux rwbar rval  ($bitcast ($uint<32>) _b0  ) ) 
    // ($bitcast ($uint<32>) _b0  )
    $constant $W[type_cast_239_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // ($bitcast ($uint<1>) _b0  )
    $constant $W[type_cast_244_wire_constant] : $int<1> := _b0// 0
    // block %NicRegisterAccessDaemon%loop
    //  file nic.linked.aa, line 113
    // do-while statement  
    //  file nic.linked.aa, line 115
    // 			req := NIC_REQUEST_REGISTER_ACCESS_PIPE $buffering 1// bits of buffering = 43. 
    //  file nic.linked.aa, line 119
    // req
    $W[req_203] : $int<43>
    // 			$volatile rwbar := ( $slice req 42 42 )  $buffering 1
    //  file nic.linked.aa, line 121
    // rwbar
    $W[rwbar_208] : $int<1>
    // 			$volatile bmask := ( $slice req 41 38 )  $buffering 1
    //  file nic.linked.aa, line 122
    // bmask
    $W[bmask_212] : $int<4>
    // 			$volatile index := ( $slice req 37 32 )  $buffering 1
    //  file nic.linked.aa, line 123
    // index
    $W[index_216] : $int<6>
    // 			$volatile wdata := ( $slice req 31 0 )  $buffering 1
    //  file nic.linked.aa, line 124
    // wdata
    $W[wdata_220] : $int<32>
    // 			rval := nic_registers[index] $buffering 1// bits of buffering = 32. 
    //  file nic.linked.aa, line 125
    // nic_registers[index]
    $intermediate $W[R_index_222_resized] : $int<6>
    $intermediate $W[R_index_222_scaled] : $int<6>
    $intermediate $W[array_obj_ref_223_final_offset] : $int<6>
    $intermediate $W[array_obj_ref_223_root_address] : $int<6>
    $W[array_obj_ref_223_word_address_0] : $pointer<memory_space_0>
    $W[array_obj_ref_223_data_0] : $int<32>
    // rval
    $W[rval_224] : $int<32>
    // 			$guard (~rwbar) $call UpdateRegister (bmask rval wdata index ) (wval ) 
    //  file nic.linked.aa, line 127
    // wval
    $W[wval_234] : $int<32>
    // 			$volatile rdata := ( $mux rwbar rval  ($bitcast ($uint<32>) _b0  ) )  $buffering 1
    //  file nic.linked.aa, line 128
    // rdata
    $W[rdata_241] : $int<32>
    // 			$volatile resp := (($bitcast ($uint<1>) _b0  ) && rdata) $buffering 1
    //  file nic.linked.aa, line 129
    // resp
    $W[resp_247] : $int<33>
    // 			NIC_RESPONSE_REGISTER_ACCESS_PIPE := resp $buffering 1// bits of buffering = 33. 
    //  file nic.linked.aa, line 130
    // NIC_RESPONSE_REGISTER_ACCESS_PIPE
    // datapath-instances for block %NicRegisterAccessDaemon%loop
    //  file nic.linked.aa, line 113
    // datapath-instances for do-while  
    //  file nic.linked.aa, line 115
    ==0? [do_while_stmt_199_branch] (konst_252_wire_constant)
    $flowthrough
    // 			req := NIC_REQUEST_REGISTER_ACCESS_PIPE $buffering 1// bits of buffering = 43. 
    //  file nic.linked.aa, line 119
    // NIC_REQUEST_REGISTER_ACCESS_PIPE
    $ioport $in [RPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_202_inst] (NIC_REQUEST_REGISTER_ACCESS_PIPE) (req_203)  $fullrate 
    $buffering $out RPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_202_inst req_203 1
    // 			$volatile rwbar := ( $slice req 42 42 )  $buffering 1
    //  file nic.linked.aa, line 121
    // ( $slice req 42 42 ) 
    [:] [slice_207_inst] (req_203 42 42) (rwbar_208)  $flowthrough
    $delay slice_207_inst 0
    // 			$volatile bmask := ( $slice req 41 38 )  $buffering 1
    //  file nic.linked.aa, line 122
    // ( $slice req 41 38 ) 
    [:] [slice_211_inst] (req_203 41 38) (bmask_212)  $flowthrough
    $delay slice_211_inst 0
    // 			$volatile index := ( $slice req 37 32 )  $buffering 1
    //  file nic.linked.aa, line 123
    // ( $slice req 37 32 ) 
    [:] [slice_215_inst] (req_203 37 32) (index_216)  $flowthrough
    $delay slice_215_inst 0
    // 			$volatile wdata := ( $slice req 31 0 )  $buffering 1
    //  file nic.linked.aa, line 124
    // ( $slice req 31 0 ) 
    [:] [slice_219_inst] (req_203 31 0) (wdata_220)  $flowthrough
    $delay slice_219_inst 0
    // 			rval := nic_registers[index] $buffering 1// bits of buffering = 32. 
    //  file nic.linked.aa, line 125
    // nic_registers[index]
    &/ [array_obj_ref_223_index_0_resize] (index_216) (R_index_222_resized) 
    $flowthrough 
    &/ [array_obj_ref_223_index_0_rename] (R_index_222_resized) (R_index_222_scaled) 
    $flowthrough 
    &/ [array_obj_ref_223_index_offset] (R_index_222_scaled) (array_obj_ref_223_final_offset) 
    $flowthrough 
    &/ [array_obj_ref_223_root_address_inst] (array_obj_ref_223_final_offset) (array_obj_ref_223_root_address) 
    $flowthrough 
    &/ [array_obj_ref_223_addr_0] (array_obj_ref_223_root_address) (array_obj_ref_223_word_address_0) 
    $flowthrough 
    $load [array_obj_ref_223_load_0] $from memory_space_0 (array_obj_ref_223_word_address_0) (array_obj_ref_223_data_0) 
    $buffering  $in array_obj_ref_223_load_0 array_obj_ref_223_word_address_0 2
    $buffering  $out array_obj_ref_223_load_0 array_obj_ref_223_data_0 2
    $delay array_obj_ref_223_load_0 5
    &/ [array_obj_ref_223_gather_scatter] (array_obj_ref_223_data_0) (rval_224) 
    $flowthrough 
    // 			$guard (~rwbar) $call UpdateRegister (bmask rval wdata index ) (wval ) 
    //  file nic.linked.aa, line 127
    $call [call_stmt_234_call] $module UpdateRegister(bmask_212 rval_224 wdata_220 index_216) (wval_234) $guard ( ~ rwbar_208 )   $fullrate
    $delay call_stmt_234_call 4
    $buffering  $in call_stmt_234_call bmask_212 1
    $buffering  $in call_stmt_234_call rval_224 1
    $buffering  $in call_stmt_234_call wdata_220 1
    $buffering  $in call_stmt_234_call index_216 1
    $buffering  $out call_stmt_234_call wval_234 1
    // 			$volatile rdata := ( $mux rwbar rval  ($bitcast ($uint<32>) _b0  ) )  $buffering 1
    //  file nic.linked.aa, line 128
    // ( $mux rwbar rval  ($bitcast ($uint<32>) _b0  ) ) 
    ? [MUX_240_inst] (rwbar_208 rval_224 type_cast_239_wire_constant) (rdata_241)  $flowthrough
    // 			$volatile resp := (($bitcast ($uint<1>) _b0  ) && rdata) $buffering 1
    //  file nic.linked.aa, line 129
    // (($bitcast ($uint<1>) _b0  ) && rdata)
    &&[CONCAT_u1_u33_246_inst] (type_cast_244_wire_constant rdata_241) (resp_247)   $flowthrough 
    $delay CONCAT_u1_u33_246_inst 0
    // 			NIC_RESPONSE_REGISTER_ACCESS_PIPE := resp $buffering 1// bits of buffering = 33. 
    //  file nic.linked.aa, line 130
    // NIC_RESPONSE_REGISTER_ACCESS_PIPE
    $ioport $out [WPIPE_NIC_RESPONSE_REGISTER_ACCESS_PIPE_248_inst]  (resp_247) (NIC_RESPONSE_REGISTER_ACCESS_PIPE)  $fullrate 
  }
  // end data-path
  // CP-DP links for do-while  do_while_stmt_199
  //  file nic.linked.aa, line 115
  // 			req := NIC_REQUEST_REGISTER_ACCESS_PIPE $buffering 1// bits of buffering = 43. 
  //  file nic.linked.aa, line 119
  // NIC_REQUEST_REGISTER_ACCESS_PIPE
  RPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_202_inst <=> (branch_block_stmt_198/do_while_stmt_199/do_while_stmt_199_loop_body/RPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_202_Sample/rr branch_block_stmt_198/do_while_stmt_199/do_while_stmt_199_loop_body/RPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_202_Update/cr) (branch_block_stmt_198/do_while_stmt_199/do_while_stmt_199_loop_body/RPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_202_Sample/ra branch_block_stmt_198/do_while_stmt_199/do_while_stmt_199_loop_body/RPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_202_Update/ca)
  // 			$volatile rwbar := ( $slice req 42 42 )  $buffering 1
  //  file nic.linked.aa, line 121
  // req
  // 			$volatile bmask := ( $slice req 41 38 )  $buffering 1
  //  file nic.linked.aa, line 122
  // req
  // 			$volatile index := ( $slice req 37 32 )  $buffering 1
  //  file nic.linked.aa, line 123
  // req
  // 			$volatile wdata := ( $slice req 31 0 )  $buffering 1
  //  file nic.linked.aa, line 124
  // req
  // 			rval := nic_registers[index] $buffering 1// bits of buffering = 32. 
  //  file nic.linked.aa, line 125
  // nic_registers[index]
  // index
  array_obj_ref_223_index_0_resize <=> (branch_block_stmt_198/do_while_stmt_199/do_while_stmt_199_loop_body/array_obj_ref_223_index_resize_0/index_resize_req) (branch_block_stmt_198/do_while_stmt_199/do_while_stmt_199_loop_body/array_obj_ref_223_index_resize_0/index_resize_ack)
  array_obj_ref_223_index_0_rename <=> (branch_block_stmt_198/do_while_stmt_199/do_while_stmt_199_loop_body/array_obj_ref_223_index_scale_0/scale_rename_req) (branch_block_stmt_198/do_while_stmt_199/do_while_stmt_199_loop_body/array_obj_ref_223_index_scale_0/scale_rename_ack)
  array_obj_ref_223_index_offset <=> (branch_block_stmt_198/do_while_stmt_199/do_while_stmt_199_loop_body/array_obj_ref_223_final_index_sum_regn/req) (branch_block_stmt_198/do_while_stmt_199/do_while_stmt_199_loop_body/array_obj_ref_223_final_index_sum_regn/ack)
  array_obj_ref_223_root_address_inst <=> (branch_block_stmt_198/do_while_stmt_199/do_while_stmt_199_loop_body/array_obj_ref_223_base_plus_offset/sum_rename_req) (branch_block_stmt_198/do_while_stmt_199/do_while_stmt_199_loop_body/array_obj_ref_223_base_plus_offset/sum_rename_ack)
  array_obj_ref_223_addr_0 <=> (branch_block_stmt_198/do_while_stmt_199/do_while_stmt_199_loop_body/array_obj_ref_223_word_addrgen/root_register_req) (branch_block_stmt_198/do_while_stmt_199/do_while_stmt_199_loop_body/array_obj_ref_223_word_addrgen/root_register_ack)
  array_obj_ref_223_gather_scatter <=> (branch_block_stmt_198/do_while_stmt_199/do_while_stmt_199_loop_body/array_obj_ref_223_Update/array_obj_ref_223_Merge/merge_req) (branch_block_stmt_198/do_while_stmt_199/do_while_stmt_199_loop_body/array_obj_ref_223_Update/array_obj_ref_223_Merge/merge_ack)
  array_obj_ref_223_load_0 <=> (branch_block_stmt_198/do_while_stmt_199/do_while_stmt_199_loop_body/array_obj_ref_223_Sample/word_access_start/word_0/rr branch_block_stmt_198/do_while_stmt_199/do_while_stmt_199_loop_body/array_obj_ref_223_Update/word_access_complete/word_0/cr) (branch_block_stmt_198/do_while_stmt_199/do_while_stmt_199_loop_body/array_obj_ref_223_Sample/word_access_start/word_0/ra branch_block_stmt_198/do_while_stmt_199/do_while_stmt_199_loop_body/array_obj_ref_223_Update/word_access_complete/word_0/ca)
  // 			$guard (~rwbar) $call UpdateRegister (bmask rval wdata index ) (wval ) 
  //  file nic.linked.aa, line 127
  // bmask
  // rval
  // wdata
  // index
  call_stmt_234_call <=> (branch_block_stmt_198/do_while_stmt_199/do_while_stmt_199_loop_body/call_stmt_234_Sample/crr branch_block_stmt_198/do_while_stmt_199/do_while_stmt_199_loop_body/call_stmt_234_Update/ccr) (branch_block_stmt_198/do_while_stmt_199/do_while_stmt_199_loop_body/call_stmt_234_Sample/cra branch_block_stmt_198/do_while_stmt_199/do_while_stmt_199_loop_body/call_stmt_234_Update/cca)
  // 			$volatile rdata := ( $mux rwbar rval  ($bitcast ($uint<32>) _b0  ) )  $buffering 1
  //  file nic.linked.aa, line 128
  // rwbar
  // rval
  // ( $mux rwbar rval  ($bitcast ($uint<32>) _b0  ) ) 
  // 			$volatile resp := (($bitcast ($uint<1>) _b0  ) && rdata) $buffering 1
  //  file nic.linked.aa, line 129
  // (($bitcast ($uint<1>) _b0  ) && rdata)
  // rdata
  // 			NIC_RESPONSE_REGISTER_ACCESS_PIPE := resp $buffering 1// bits of buffering = 33. 
  //  file nic.linked.aa, line 130
  // resp
  // NIC_RESPONSE_REGISTER_ACCESS_PIPE
  WPIPE_NIC_RESPONSE_REGISTER_ACCESS_PIPE_248_inst <=> (branch_block_stmt_198/do_while_stmt_199/do_while_stmt_199_loop_body/WPIPE_NIC_RESPONSE_REGISTER_ACCESS_PIPE_248_Sample/req branch_block_stmt_198/do_while_stmt_199/do_while_stmt_199_loop_body/WPIPE_NIC_RESPONSE_REGISTER_ACCESS_PIPE_248_Update/req) (branch_block_stmt_198/do_while_stmt_199/do_while_stmt_199_loop_body/WPIPE_NIC_RESPONSE_REGISTER_ACCESS_PIPE_248_Sample/ack branch_block_stmt_198/do_while_stmt_199/do_while_stmt_199_loop_body/WPIPE_NIC_RESPONSE_REGISTER_ACCESS_PIPE_248_Update/ack)
  do_while_stmt_199_branch <=> (branch_block_stmt_198/do_while_stmt_199/do_while_stmt_199_loop_body/condition_evaluated) (branch_block_stmt_198/do_while_stmt_199/loop_exit/ack branch_block_stmt_198/do_while_stmt_199/loop_taken/ack)
}
$pipeline $depth 15 $buffering 1 $fullrate $module [accessMemory] 
{
  $in lock:$int<1>
  // can point into 
  rwbar:$int<1>
  // can point into 
  bmask:$int<8>
  // can point into 
  addr:$int<36>
  // can point into 
  wdata:$int<64>
  // can point into 
  $out rdata:$int<64>
  // can point into 
  // pipe-declarations for block %accessMemory
  //  file nic.linked.aa, line 134
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    // pipelined module
    :|:[assign_stmt_272_to_assign_stmt_291] 
    {
      $T [lock_update_enable] 
      $T [lock_update_enable_out] 
      lock_update_enable &-> (lock_update_enable_out)
      $null &-> (lock_update_enable)
      $T [rwbar_update_enable] 
      $T [rwbar_update_enable_out] 
      rwbar_update_enable &-> (rwbar_update_enable_out)
      $null &-> (rwbar_update_enable)
      $T [bmask_update_enable] 
      $T [bmask_update_enable_out] 
      bmask_update_enable &-> (bmask_update_enable_out)
      $null &-> (bmask_update_enable)
      $T [addr_update_enable] 
      $T [addr_update_enable_out] 
      addr_update_enable &-> (addr_update_enable_out)
      $null &-> (addr_update_enable)
      $T [wdata_update_enable] 
      $T [wdata_update_enable_out] 
      wdata_update_enable &-> (wdata_update_enable_out)
      $null &-> (wdata_update_enable)
      $T [rdata_update_enable] 
      $T [rdata_update_enable_in] 
      $null &-> (rdata_update_enable)
      $null <-& (rdata_update_enable_in) 
      $null &-> (rdata_update_enable)
      rdata_update_enable <-& (rdata_update_enable_in) 
      // start: WAR dependencies for request
      // done: WAR dependencies for request
      // start:  	$volatile request := (((lock && rwbar) && bmask) && (addr && wdata)) $buffering 1
      //  file nic.linked.aa, line 139
      // volatile! 
      // Source expression
      // (((lock && rwbar) && bmask) && (addr && wdata))
      // ((lock && rwbar) && bmask)
      // (lock && rwbar)
      // lock
      // rwbar
      // bmask
      // (addr && wdata)
      // addr
      // wdata
      // Target expression
      // (as target) request
      // start: WAR dependencies for request
      // done: WAR dependencies for request
      // end:  	$volatile request := (((lock && rwbar) && bmask) && (addr && wdata)) $buffering 1
      // start:  	NIC_TO_MEMORY_REQUEST := request $buffering 1// bits of buffering = 110. 
      //  file nic.linked.aa, line 141
      // Source expression
      // request
      // Target expression
      // (as target) NIC_TO_MEMORY_REQUEST
      $T[WPIPE_NIC_TO_MEMORY_REQUEST_278_sample_start_] 
      $T[WPIPE_NIC_TO_MEMORY_REQUEST_278_sample_completed_] 
      $T[WPIPE_NIC_TO_MEMORY_REQUEST_278_update_start_] 
      $T[WPIPE_NIC_TO_MEMORY_REQUEST_278_update_completed_] 
      ;;[WPIPE_NIC_TO_MEMORY_REQUEST_278_Sample] 
      {
        // pipe write sample-start NIC_TO_MEMORY_REQUEST
        $T [req] $T [ack] 
      }
      ;;[WPIPE_NIC_TO_MEMORY_REQUEST_278_Update] 
      {
        // pipe write update (complete) NIC_TO_MEMORY_REQUEST
        $T [req] $T [ack] 
      }
      WPIPE_NIC_TO_MEMORY_REQUEST_278_sample_start_ &-> (WPIPE_NIC_TO_MEMORY_REQUEST_278_Sample)
      WPIPE_NIC_TO_MEMORY_REQUEST_278_sample_completed_ <-& (WPIPE_NIC_TO_MEMORY_REQUEST_278_Sample)
      WPIPE_NIC_TO_MEMORY_REQUEST_278_update_start_ <-& (WPIPE_NIC_TO_MEMORY_REQUEST_278_sample_completed_)
      WPIPE_NIC_TO_MEMORY_REQUEST_278_update_start_ &-> (WPIPE_NIC_TO_MEMORY_REQUEST_278_Update)
      WPIPE_NIC_TO_MEMORY_REQUEST_278_update_completed_ <-& (WPIPE_NIC_TO_MEMORY_REQUEST_278_Update)
      WPIPE_NIC_TO_MEMORY_REQUEST_278_sample_start_ o<-& (WPIPE_NIC_TO_MEMORY_REQUEST_278_update_completed_ 0)
      // start: Forward dependencies from request to transition WPIPE_NIC_TO_MEMORY_REQUEST_278_sample_start_
      WPIPE_NIC_TO_MEMORY_REQUEST_278_sample_start_ <-& ($entry)
      WPIPE_NIC_TO_MEMORY_REQUEST_278_sample_start_ <-& ($entry)
      WPIPE_NIC_TO_MEMORY_REQUEST_278_sample_start_ <-& ($entry)
      WPIPE_NIC_TO_MEMORY_REQUEST_278_sample_start_ <-& ($entry)
      WPIPE_NIC_TO_MEMORY_REQUEST_278_sample_start_ <-& ($entry)
      // done: Forward dependencies from request to transition WPIPE_NIC_TO_MEMORY_REQUEST_278_sample_start_
      // RAW reenables for request
      lock_update_enable o<-& (WPIPE_NIC_TO_MEMORY_REQUEST_278_sample_completed_ 0)
      rwbar_update_enable o<-& (WPIPE_NIC_TO_MEMORY_REQUEST_278_sample_completed_ 0)
      bmask_update_enable o<-& (WPIPE_NIC_TO_MEMORY_REQUEST_278_sample_completed_ 0)
      addr_update_enable o<-& (WPIPE_NIC_TO_MEMORY_REQUEST_278_sample_completed_ 0)
      wdata_update_enable o<-& (WPIPE_NIC_TO_MEMORY_REQUEST_278_sample_completed_ 0)
      // end:  	NIC_TO_MEMORY_REQUEST := request $buffering 1// bits of buffering = 110. 
      // start:  	response := MEMORY_TO_NIC_RESPONSE $buffering 1// bits of buffering = 65. 
      //  file nic.linked.aa, line 142
      // Source expression
      // MEMORY_TO_NIC_RESPONSE
      $T[RPIPE_MEMORY_TO_NIC_RESPONSE_282_sample_start_] 
      $T[RPIPE_MEMORY_TO_NIC_RESPONSE_282_sample_completed_] 
      $T[RPIPE_MEMORY_TO_NIC_RESPONSE_282_update_start_] 
      $T[RPIPE_MEMORY_TO_NIC_RESPONSE_282_update_completed_] 
      ;;[RPIPE_MEMORY_TO_NIC_RESPONSE_282_Sample] 
      {
        // pipe read sample
        $T [rr] $T [ra] 
      }
      ;;[RPIPE_MEMORY_TO_NIC_RESPONSE_282_Update] 
      {
        // pipe read update
        $T [cr] $T [ca] 
      }
      RPIPE_MEMORY_TO_NIC_RESPONSE_282_sample_start_ &-> (RPIPE_MEMORY_TO_NIC_RESPONSE_282_Sample)
      RPIPE_MEMORY_TO_NIC_RESPONSE_282_sample_completed_ <-& (RPIPE_MEMORY_TO_NIC_RESPONSE_282_Sample)
      RPIPE_MEMORY_TO_NIC_RESPONSE_282_update_start_ <-& (RPIPE_MEMORY_TO_NIC_RESPONSE_282_sample_completed_)
      RPIPE_MEMORY_TO_NIC_RESPONSE_282_update_start_ &-> (RPIPE_MEMORY_TO_NIC_RESPONSE_282_Update)
      RPIPE_MEMORY_TO_NIC_RESPONSE_282_update_completed_ <-& (RPIPE_MEMORY_TO_NIC_RESPONSE_282_Update)
      RPIPE_MEMORY_TO_NIC_RESPONSE_282_sample_start_ o<-& (RPIPE_MEMORY_TO_NIC_RESPONSE_282_update_completed_ 0)
      // Target expression
      // (as target) response
      // start: WAR dependencies for response
      // done: WAR dependencies for response
      // end:  	response := MEMORY_TO_NIC_RESPONSE $buffering 1// bits of buffering = 65. 
      // start: WAR dependencies for err
      // done: WAR dependencies for err
      // start:  	$volatile err := ( $slice response 64 64 )  $buffering 1
      //  file nic.linked.aa, line 143
      // volatile! 
      // Source expression
      // ( $slice response 64 64 ) 
      // response
      // Target expression
      // (as target) err
      // start: WAR dependencies for err
      // done: WAR dependencies for err
      // end:  	$volatile err := ( $slice response 64 64 )  $buffering 1
      // start: WAR dependencies for rdata
      // done: WAR dependencies for rdata
      // start:  	$volatile rdata := ( $slice response 63 0 )  $buffering 1
      //  file nic.linked.aa, line 144
      // volatile! 
      // Source expression
      // ( $slice response 63 0 ) 
      // response
      // Target expression
      // (as target) rdata
      // rdata
      // write to interface object
      // start: WAR dependencies for rdata
      // done: WAR dependencies for rdata
      // rdata
      // write to interface object
      RPIPE_MEMORY_TO_NIC_RESPONSE_282_update_start_ <-& (rdata_update_enable)
      // end:  	$volatile rdata := ( $slice response 63 0 )  $buffering 1
      // load-store dependencies..
      // pipe read/write dependencies for pipe MEMORY_TO_NIC_RESPONSE
      // read-dependencies for pipe MEMORY_TO_NIC_RESPONSE
      // write-dependencies for pipe MEMORY_TO_NIC_RESPONSE
      // signal write dependencies for MEMORY_TO_NIC_RESPONSE
      // pipe read/write dependencies for pipe NIC_TO_MEMORY_REQUEST
      // read-dependencies for pipe NIC_TO_MEMORY_REQUEST
      // write-dependencies for pipe NIC_TO_MEMORY_REQUEST
      // signal write dependencies for NIC_TO_MEMORY_REQUEST
    }
    ( rdata_update_enable_in)
    ( lock_update_enable_out rwbar_update_enable_out bmask_update_enable_out addr_update_enable_out wdata_update_enable_out)
    $P [lock_update_enable] 
    $P [rwbar_update_enable] 
    $P [bmask_update_enable] 
    $P [addr_update_enable] 
    $P [wdata_update_enable] 
    $P [rdata_update_enable] 
    $bind lock_update_enable <= assign_stmt_272_to_assign_stmt_291 : lock_update_enable_out
    $bind rwbar_update_enable <= assign_stmt_272_to_assign_stmt_291 : rwbar_update_enable_out
    $bind bmask_update_enable <= assign_stmt_272_to_assign_stmt_291 : bmask_update_enable_out
    $bind addr_update_enable <= assign_stmt_272_to_assign_stmt_291 : addr_update_enable_out
    $bind wdata_update_enable <= assign_stmt_272_to_assign_stmt_291 : wdata_update_enable_out
    $bind rdata_update_enable => assign_stmt_272_to_assign_stmt_291 : rdata_update_enable_in
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %accessMemory
    //  file nic.linked.aa, line 134
    // 	$volatile request := (((lock && rwbar) && bmask) && (addr && wdata)) $buffering 1
    //  file nic.linked.aa, line 139
    // (lock && rwbar)
    $intermediate $W[CONCAT_u1_u2_265_wire] : $int<2>
    // ((lock && rwbar) && bmask)
    $intermediate $W[CONCAT_u2_u10_267_wire] : $int<10>
    // (addr && wdata)
    $intermediate $W[CONCAT_u36_u100_270_wire] : $int<100>
    // request
    $W[request_272] : $int<110>
    // 	NIC_TO_MEMORY_REQUEST := request $buffering 1// bits of buffering = 110. 
    //  file nic.linked.aa, line 141
    // NIC_TO_MEMORY_REQUEST
    // 	response := MEMORY_TO_NIC_RESPONSE $buffering 1// bits of buffering = 65. 
    //  file nic.linked.aa, line 142
    // response
    $W[response_283] : $int<65>
    // 	$volatile err := ( $slice response 64 64 )  $buffering 1
    //  file nic.linked.aa, line 143
    // err
    $W[err_287] : $int<1>
    // 	$volatile rdata := ( $slice response 63 0 )  $buffering 1
    //  file nic.linked.aa, line 144
    // rdata
    // 	$volatile request := (((lock && rwbar) && bmask) && (addr && wdata)) $buffering 1
    //  file nic.linked.aa, line 139
    // (lock && rwbar)
    &&[CONCAT_u1_u2_265_inst] (lock rwbar) (CONCAT_u1_u2_265_wire)   $flowthrough 
    $delay CONCAT_u1_u2_265_inst 0
    // ((lock && rwbar) && bmask)
    &&[CONCAT_u2_u10_267_inst] (CONCAT_u1_u2_265_wire bmask) (CONCAT_u2_u10_267_wire)   $flowthrough 
    $delay CONCAT_u2_u10_267_inst 0
    // (addr && wdata)
    &&[CONCAT_u36_u100_270_inst] (addr wdata) (CONCAT_u36_u100_270_wire)   $flowthrough 
    $delay CONCAT_u36_u100_270_inst 0
    // (((lock && rwbar) && bmask) && (addr && wdata))
    &&[CONCAT_u10_u110_271_inst] (CONCAT_u2_u10_267_wire CONCAT_u36_u100_270_wire) (request_272)   $flowthrough 
    $delay CONCAT_u10_u110_271_inst 0
    // 	NIC_TO_MEMORY_REQUEST := request $buffering 1// bits of buffering = 110. 
    //  file nic.linked.aa, line 141
    // NIC_TO_MEMORY_REQUEST
    $ioport $out [WPIPE_NIC_TO_MEMORY_REQUEST_278_inst]  (request_272) (NIC_TO_MEMORY_REQUEST)  $fullrate 
    // 	response := MEMORY_TO_NIC_RESPONSE $buffering 1// bits of buffering = 65. 
    //  file nic.linked.aa, line 142
    // MEMORY_TO_NIC_RESPONSE
    $ioport $in [RPIPE_MEMORY_TO_NIC_RESPONSE_282_inst] (MEMORY_TO_NIC_RESPONSE) (response_283)  $fullrate 
    $buffering $out RPIPE_MEMORY_TO_NIC_RESPONSE_282_inst response_283 1
    // 	$volatile err := ( $slice response 64 64 )  $buffering 1
    //  file nic.linked.aa, line 143
    // ( $slice response 64 64 ) 
    [:] [slice_286_inst] (response_283 64 64) (err_287)  $flowthrough
    $delay slice_286_inst 0
    // 	$volatile rdata := ( $slice response 63 0 )  $buffering 1
    //  file nic.linked.aa, line 144
    // ( $slice response 63 0 ) 
    [:] [slice_290_inst] (response_283 63 0) (rdata)  $flowthrough
    $delay slice_290_inst 0
  }
  // end data-path
  // 	$volatile request := (((lock && rwbar) && bmask) && (addr && wdata)) $buffering 1
  //  file nic.linked.aa, line 139
  // (((lock && rwbar) && bmask) && (addr && wdata))
  // ((lock && rwbar) && bmask)
  // (lock && rwbar)
  // lock
  // rwbar
  // bmask
  // (addr && wdata)
  // addr
  // wdata
  // 	NIC_TO_MEMORY_REQUEST := request $buffering 1// bits of buffering = 110. 
  //  file nic.linked.aa, line 141
  // request
  // NIC_TO_MEMORY_REQUEST
  WPIPE_NIC_TO_MEMORY_REQUEST_278_inst <=> (assign_stmt_272_to_assign_stmt_291/WPIPE_NIC_TO_MEMORY_REQUEST_278_Sample/req assign_stmt_272_to_assign_stmt_291/WPIPE_NIC_TO_MEMORY_REQUEST_278_Update/req) (assign_stmt_272_to_assign_stmt_291/WPIPE_NIC_TO_MEMORY_REQUEST_278_Sample/ack assign_stmt_272_to_assign_stmt_291/WPIPE_NIC_TO_MEMORY_REQUEST_278_Update/ack)
  // 	response := MEMORY_TO_NIC_RESPONSE $buffering 1// bits of buffering = 65. 
  //  file nic.linked.aa, line 142
  // MEMORY_TO_NIC_RESPONSE
  RPIPE_MEMORY_TO_NIC_RESPONSE_282_inst <=> (assign_stmt_272_to_assign_stmt_291/RPIPE_MEMORY_TO_NIC_RESPONSE_282_Sample/rr assign_stmt_272_to_assign_stmt_291/RPIPE_MEMORY_TO_NIC_RESPONSE_282_Update/cr) (assign_stmt_272_to_assign_stmt_291/RPIPE_MEMORY_TO_NIC_RESPONSE_282_Sample/ra assign_stmt_272_to_assign_stmt_291/RPIPE_MEMORY_TO_NIC_RESPONSE_282_Update/ca)
  // 	$volatile err := ( $slice response 64 64 )  $buffering 1
  //  file nic.linked.aa, line 143
  // response
  // 	$volatile rdata := ( $slice response 63 0 )  $buffering 1
  //  file nic.linked.aa, line 144
  // response
}
$module [acquireMutex] 
{
  $in q_base_address:$int<36>
  // can point into 
  $out m_ok:$int<1> := _b1
  // can point into 
  // pipe-declarations for block %acquireMutex
  //  file nic.linked.aa, line 146
  // pipe-declarations for block %acquireMutex%loop
  //  file nic.linked.aa, line 151
  // pipe-declarations for block %acquireMutex%loop%
  //  file nic.linked.aa, line 154
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    <>[branch_block_stmt_296] // Branch Block  file nic.linked.aa, line 151
    {
      $P [branch_block_stmt_296__entry__]
      branch_block_stmt_296__entry__ <-| ($entry)
      $P [branch_block_stmt_296__exit__]
      branch_block_stmt_296__exit__ |-> ($exit)
      $P [assign_stmt_299__entry__] 
      $P [assign_stmt_299__exit__] 
      $P [merge_stmt_300__entry__] 
      $P [merge_stmt_300__exit__] 
      $P [call_stmt_312_to_assign_stmt_316__entry__] 
      $P [call_stmt_312_to_assign_stmt_316__exit__] 
      $P [if_stmt_317__entry__] 
      $P [if_stmt_317__exit__] 
      $P [assign_stmt_329_to_call_stmt_340__entry__] 
      $P [assign_stmt_329_to_call_stmt_340__exit__] 
      ::[assign_stmt_299] 
      {
        // start: WAR dependencies for mutex_address
        // ignored out-of-scope w_root  q_base_address : $uint<36> 
        // done: WAR dependencies for mutex_address
        // start:  		$volatile mutex_address := q_base_address $buffering 1
        //  file nic.linked.aa, line 153
        // volatile! 
        // Source expression
        // q_base_address
        // Target expression
        // (as target) mutex_address
        // start: WAR dependencies for mutex_address
        // ignored out-of-scope w_root  q_base_address : $uint<36> 
        // done: WAR dependencies for mutex_address
        // end:  		$volatile mutex_address := q_base_address $buffering 1
        // load-store dependencies..
      }
      assign_stmt_299__entry__ |-> (assign_stmt_299)
      assign_stmt_299__exit__ <-| (assign_stmt_299)
      ::[call_stmt_312_to_assign_stmt_316] 
      {
        // start: 		$call accessMemory (($bitcast ($uint<1>) _b1  ) ($bitcast ($uint<1>) _b1  ) ( ~ ($bitcast ($uint<8>) _b0  ) ) mutex_address ($bitcast ($uint<64>) _b0  ) ) (mutex_plus_nentries ) 
        //  file nic.linked.aa, line 156
        $T[call_stmt_312_sample_start_] 
        $T[call_stmt_312_sample_completed_] 
        $T[call_stmt_312_update_start_] 
        $T[call_stmt_312_update_completed_] 
        // Call input argument 0
        // Call input argument 1
        // Call input argument 2
        // Call input argument 3
        // mutex_address
        // Call input argument 4
        // start: Forward dependencies from mutex_address to transition call_stmt_312_sample_start_
        // done: Forward dependencies from mutex_address to transition call_stmt_312_sample_start_
        ;;[call_stmt_312_Sample] 
        {
          $T [crr] $T [cra] 
        }
        ;;[call_stmt_312_Update] 
        {
          $T [ccr] $T [cca] 
        }
        call_stmt_312_sample_start_ &-> (call_stmt_312_Sample)
        call_stmt_312_sample_completed_ <-& (call_stmt_312_Sample)
        call_stmt_312_sample_completed_ &-> ($null)
        call_stmt_312_update_start_ &-> (call_stmt_312_Update)
        call_stmt_312_update_completed_ <-& (call_stmt_312_Update)
        // Call output argument 0
        // (as target) mutex_plus_nentries
        // start: WAR dependencies for mutex_plus_nentries
        // done: WAR dependencies for mutex_plus_nentries
        // end: 		$call accessMemory (($bitcast ($uint<1>) _b1  ) ($bitcast ($uint<1>) _b1  ) ( ~ ($bitcast ($uint<8>) _b0  ) ) mutex_address ($bitcast ($uint<64>) _b0  ) ) (mutex_plus_nentries ) 
        // start: WAR dependencies for mutex_val
        // done: WAR dependencies for mutex_val
        // start:  		$volatile mutex_val := ( $slice mutex_plus_nentries 63 32 )  $buffering 1
        //  file nic.linked.aa, line 157
        // volatile! 
        // Source expression
        // ( $slice mutex_plus_nentries 63 32 ) 
        // mutex_plus_nentries
        // Target expression
        // (as target) mutex_val
        // start: WAR dependencies for mutex_val
        // done: WAR dependencies for mutex_val
        // end:  		$volatile mutex_val := ( $slice mutex_plus_nentries 63 32 )  $buffering 1
        // load-store dependencies..
        // pipe read/write dependencies for pipe MEMORY_TO_NIC_RESPONSE
        // read-dependencies for pipe MEMORY_TO_NIC_RESPONSE
        // write-dependencies for pipe MEMORY_TO_NIC_RESPONSE
        // signal write dependencies for MEMORY_TO_NIC_RESPONSE
        // pipe read/write dependencies for pipe NIC_TO_MEMORY_REQUEST
        // read-dependencies for pipe NIC_TO_MEMORY_REQUEST
        // write-dependencies for pipe NIC_TO_MEMORY_REQUEST
        // signal write dependencies for NIC_TO_MEMORY_REQUEST
      }
      call_stmt_312_to_assign_stmt_316__entry__ |-> (call_stmt_312_to_assign_stmt_316)
      call_stmt_312_to_assign_stmt_316__exit__ <-| (call_stmt_312_to_assign_stmt_316)
      // if-statement  
      //  file nic.linked.aa, line 0
      ;;[if_stmt_317_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      if_stmt_317__entry__ |-> (if_stmt_317_dead_link)
      if_stmt_317__exit__ <-| (if_stmt_317_dead_link)
      ;;[if_stmt_317_eval_test] 
      {
        // test expression evaluate and trigger branch 
        // (mutex_val == 1 )
        ;;[EQ_u32_u1_320] 
        {
          // binary expression 
          ||[EQ_u32_u1_320_inputs] 
          {
          }
          // flow-through
          ;;[SplitProtocol] 
          {
            ;;[Sample] 
            {
              $T [rr] $T [ra]
            }
            ;;[Update] 
            {
              $T [cr] $T [ca]
            }
          }
        }
        $T [branch_req] 
      }
      if_stmt_317__entry__ |-> (if_stmt_317_eval_test)
      $P [EQ_u32_u1_320_place]
      EQ_u32_u1_320_place <-| (if_stmt_317_eval_test)
      ;;[if_stmt_317_if_link] 
      {
        $T [if_choice_transition] 
      }
      ;;[if_stmt_317_else_link] 
      {
        $T [else_choice_transition] 
      }
      EQ_u32_u1_320_place |-> (if_stmt_317_if_link if_stmt_317_else_link)
      $P [loopback]
      loopback <-| (if_stmt_317_if_link)
      if_stmt_317__exit__ <-| (if_stmt_317_else_link)
      ::[assign_stmt_329_to_call_stmt_340] 
      {
        // start: WAR dependencies for wval
        // ignored out-of-scope w_root 		$call accessMemory (($bitcast ($uint<1>) _b1  ) ($bitcast ($uint<1>) _b1  ) ( ~ ($bitcast ($uint<8>) _b0  ) ) mutex_address ($bitcast ($uint<64>) _b0  ) ) (mutex_plus_nentries ) 
        // done: WAR dependencies for wval
        // start:  		$volatile wval := (($bitcast ($uint<32>) _b1  ) && ( $slice mutex_plus_nentries 31 0 ) ) $buffering 1
        //  file nic.linked.aa, line 161
        // volatile! 
        // Source expression
        // (($bitcast ($uint<32>) _b1  ) && ( $slice mutex_plus_nentries 31 0 ) )
        // ( $slice mutex_plus_nentries 31 0 ) 
        // mutex_plus_nentries
        // Target expression
        // (as target) wval
        // start: WAR dependencies for wval
        // ignored out-of-scope w_root 		$call accessMemory (($bitcast ($uint<1>) _b1  ) ($bitcast ($uint<1>) _b1  ) ( ~ ($bitcast ($uint<8>) _b0  ) ) mutex_address ($bitcast ($uint<64>) _b0  ) ) (mutex_plus_nentries ) 
        // done: WAR dependencies for wval
        // end:  		$volatile wval := (($bitcast ($uint<32>) _b1  ) && ( $slice mutex_plus_nentries 31 0 ) ) $buffering 1
        // start: 		$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b0  ) ( ~ ($bitcast ($uint<8>) _b0  ) ) mutex_address wval ) (ignore ) 
        //  file nic.linked.aa, line 162
        $T[call_stmt_340_sample_start_] 
        $T[call_stmt_340_sample_completed_] 
        $T[call_stmt_340_update_start_] 
        $T[call_stmt_340_update_completed_] 
        // Call input argument 0
        // Call input argument 1
        // Call input argument 2
        // Call input argument 3
        // mutex_address
        // Call input argument 4
        // wval
        // start: Forward dependencies from mutex_address to transition call_stmt_340_sample_start_
        // done: Forward dependencies from mutex_address to transition call_stmt_340_sample_start_
        // start: Forward dependencies from wval to transition call_stmt_340_sample_start_
        // done: Forward dependencies from wval to transition call_stmt_340_sample_start_
        ;;[call_stmt_340_Sample] 
        {
          $T [crr] $T [cra] 
        }
        ;;[call_stmt_340_Update] 
        {
          $T [ccr] $T [cca] 
        }
        call_stmt_340_sample_start_ &-> (call_stmt_340_Sample)
        call_stmt_340_sample_completed_ <-& (call_stmt_340_Sample)
        call_stmt_340_sample_completed_ &-> ($null)
        call_stmt_340_update_start_ &-> (call_stmt_340_Update)
        call_stmt_340_update_completed_ <-& (call_stmt_340_Update)
        // Call output argument 0
        // (as target) ignore
        // start: WAR dependencies for ignore
        // done: WAR dependencies for ignore
        // end: 		$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b0  ) ( ~ ($bitcast ($uint<8>) _b0  ) ) mutex_address wval ) (ignore ) 
        // load-store dependencies..
        // pipe read/write dependencies for pipe MEMORY_TO_NIC_RESPONSE
        // read-dependencies for pipe MEMORY_TO_NIC_RESPONSE
        // write-dependencies for pipe MEMORY_TO_NIC_RESPONSE
        // signal write dependencies for MEMORY_TO_NIC_RESPONSE
        // pipe read/write dependencies for pipe NIC_TO_MEMORY_REQUEST
        // read-dependencies for pipe NIC_TO_MEMORY_REQUEST
        // write-dependencies for pipe NIC_TO_MEMORY_REQUEST
        // signal write dependencies for NIC_TO_MEMORY_REQUEST
      }
      assign_stmt_329_to_call_stmt_340__entry__ |-> (assign_stmt_329_to_call_stmt_340)
      assign_stmt_329_to_call_stmt_340__exit__ <-| (assign_stmt_329_to_call_stmt_340)
      // control-path for merge  
      //  file nic.linked.aa, line 154
      ;;[merge_stmt_300_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      merge_stmt_300__entry__ |-> (merge_stmt_300_dead_link)
      merge_stmt_300__exit__ <-| (merge_stmt_300_dead_link)
      //---------------------   merge statement  file nic.linked.aa, line 154  --------------------------
      ||[merge_stmt_300__entry___PhiReq] 
      {
        // no phi statements in merge..
      }
      merge_stmt_300__entry__ |-> (merge_stmt_300__entry___PhiReq)
      ||[loopback_PhiReq] 
      {
        // no phi statements in merge..
      }
      loopback |-> (loopback_PhiReq)
      $P [merge_stmt_300_PhiReqMerge] 
      merge_stmt_300_PhiReqMerge <-| ( merge_stmt_300__entry___PhiReq  loopback_PhiReq )
      ||[merge_stmt_300_PhiAck] 
      {
        $T [dummy] 
      }
      merge_stmt_300_PhiReqMerge |-> (merge_stmt_300_PhiAck)
      merge_stmt_300__exit__  <-| (merge_stmt_300_PhiAck)
      //---------------------  end of merge statement  file nic.linked.aa, line 154  --------------------------
      assign_stmt_299__entry__ <-| (branch_block_stmt_296__entry__)
      merge_stmt_300__entry__ <-| (assign_stmt_299__exit__)
      call_stmt_312_to_assign_stmt_316__entry__ <-| (merge_stmt_300__exit__)
      if_stmt_317__entry__ <-| (call_stmt_312_to_assign_stmt_316__exit__)
      assign_stmt_329_to_call_stmt_340__entry__ <-| (if_stmt_317__exit__)
      assign_stmt_329_to_call_stmt_340__exit__ |-> (branch_block_stmt_296__exit__)
    }
    ::[assign_stmt_345] 
    {
      // start:  	m_ok := ($bitcast ($uint<1>) _b1  ) $buffering 1// bits of buffering = 1. 
      //  file nic.linked.aa, line 164
      // constant! 
      // m_ok
      // write to interface object
      // end:  	m_ok := ($bitcast ($uint<1>) _b1  ) $buffering 1// bits of buffering = 1. 
      // load-store dependencies..
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %acquireMutex%loop%
    //  file nic.linked.aa, line 154
    // constant-object-declarations for block %acquireMutex%loop
    //  file nic.linked.aa, line 151
    // constant-object-declarations for block %acquireMutex
    //  file nic.linked.aa, line 146
    // constant-declarations for block %acquireMutex%loop
    //  file nic.linked.aa, line 151
    // constant-declarations for block %acquireMutex%loop%
    //  file nic.linked.aa, line 154
    // 		$call accessMemory (($bitcast ($uint<1>) _b1  ) ($bitcast ($uint<1>) _b1  ) ( ~ ($bitcast ($uint<8>) _b0  ) ) mutex_address ($bitcast ($uint<64>) _b0  ) ) (mutex_plus_nentries ) 
    //  file nic.linked.aa, line 156
    // ($bitcast ($uint<1>) _b1  )
    $constant $W[type_cast_302_wire_constant] : $int<1> := _b1// 1
    // ($bitcast ($uint<1>) _b1  )
    $constant $W[type_cast_304_wire_constant] : $int<1> := _b1// 1
    // ( ~ ($bitcast ($uint<8>) _b0  ) )
    $constant $W[NOT_u8_u8_307_wire_constant] : $int<8> := _b11111111// -1
    // ($bitcast ($uint<64>) _b0  )
    $constant $W[type_cast_310_wire_constant] : $int<64> := _b0000000000000000000000000000000000000000000000000000000000000000// 0
    // if-statement  
    //  file nic.linked.aa, line 0
    // 1 
    $constant $W[konst_319_wire_constant] : $int<32> := _b00000000000000000000000000000001// 1
    // ($bitcast ($uint<32>) _b1  )
    $constant $W[type_cast_325_wire_constant] : $int<32> := _b00000000000000000000000000000001// 1
    // 		$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b0  ) ( ~ ($bitcast ($uint<8>) _b0  ) ) mutex_address wval ) (ignore ) 
    //  file nic.linked.aa, line 162
    // ($bitcast ($uint<1>) _b0  )
    $constant $W[type_cast_331_wire_constant] : $int<1> := _b0// 0
    // ($bitcast ($uint<1>) _b0  )
    $constant $W[type_cast_333_wire_constant] : $int<1> := _b0// 0
    // ( ~ ($bitcast ($uint<8>) _b0  ) )
    $constant $W[NOT_u8_u8_336_wire_constant] : $int<8> := _b11111111// -1
    // 	m_ok := ($bitcast ($uint<1>) _b1  ) $buffering 1// bits of buffering = 1. 
    //  file nic.linked.aa, line 164
    // block %acquireMutex%loop
    //  file nic.linked.aa, line 151
    // 		$volatile mutex_address := q_base_address $buffering 1
    //  file nic.linked.aa, line 153
    // mutex_address
    $W[mutex_address_299] : $int<36>
    // 		$call accessMemory (($bitcast ($uint<1>) _b1  ) ($bitcast ($uint<1>) _b1  ) ( ~ ($bitcast ($uint<8>) _b0  ) ) mutex_address ($bitcast ($uint<64>) _b0  ) ) (mutex_plus_nentries ) 
    //  file nic.linked.aa, line 156
    // mutex_plus_nentries
    $W[mutex_plus_nentries_312] : $int<64>
    // 		$volatile mutex_val := ( $slice mutex_plus_nentries 63 32 )  $buffering 1
    //  file nic.linked.aa, line 157
    // mutex_val
    $W[mutex_val_316] : $int<32>
    // if statement  
    //  file nic.linked.aa, line 0
    // (mutex_val == 1 )
    $intermediate $W[EQ_u32_u1_320_wire] : $int<1>
    // 		$volatile wval := (($bitcast ($uint<32>) _b1  ) && ( $slice mutex_plus_nentries 31 0 ) ) $buffering 1
    //  file nic.linked.aa, line 161
    // ( $slice mutex_plus_nentries 31 0 ) 
    $intermediate $W[slice_327_wire] : $int<32>
    // wval
    $W[wval_329] : $int<64>
    // 		$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b0  ) ( ~ ($bitcast ($uint<8>) _b0  ) ) mutex_address wval ) (ignore ) 
    //  file nic.linked.aa, line 162
    // ignore
    $W[ignore_340] : $int<64>
    // datapath-instances for block %acquireMutex%loop
    //  file nic.linked.aa, line 151
    // 		$volatile mutex_address := q_base_address $buffering 1
    //  file nic.linked.aa, line 153
    # := [W_mutex_address_297_inst] (q_base_address) (mutex_address_299)    $flowthrough 
    // 		$call accessMemory (($bitcast ($uint<1>) _b1  ) ($bitcast ($uint<1>) _b1  ) ( ~ ($bitcast ($uint<8>) _b0  ) ) mutex_address ($bitcast ($uint<64>) _b0  ) ) (mutex_plus_nentries ) 
    //  file nic.linked.aa, line 156
    $call [call_stmt_312_call] $module accessMemory(type_cast_302_wire_constant type_cast_304_wire_constant NOT_u8_u8_307_wire_constant mutex_address_299 type_cast_310_wire_constant) (mutex_plus_nentries_312)  
    $delay call_stmt_312_call 4
    $buffering  $in call_stmt_312_call type_cast_302_wire_constant 1
    $buffering  $in call_stmt_312_call type_cast_304_wire_constant 1
    $buffering  $in call_stmt_312_call NOT_u8_u8_307_wire_constant 1
    $buffering  $in call_stmt_312_call mutex_address_299 1
    $buffering  $in call_stmt_312_call type_cast_310_wire_constant 1
    $buffering  $out call_stmt_312_call mutex_plus_nentries_312 1
    // 		$volatile mutex_val := ( $slice mutex_plus_nentries 63 32 )  $buffering 1
    //  file nic.linked.aa, line 157
    // ( $slice mutex_plus_nentries 63 32 ) 
    [:] [slice_315_inst] (mutex_plus_nentries_312 63 32) (mutex_val_316)  $flowthrough
    $delay slice_315_inst 0
    // datapath-instances for if  
    //  file nic.linked.aa, line 0
    // (mutex_val == 1 )
    ==[EQ_u32_u1_320_inst] (mutex_val_316 konst_319_wire_constant) (EQ_u32_u1_320_wire)   $flowthrough 
    $delay EQ_u32_u1_320_inst 0
    ==0? [if_stmt_317_branch] (EQ_u32_u1_320_wire)
    // 		$volatile wval := (($bitcast ($uint<32>) _b1  ) && ( $slice mutex_plus_nentries 31 0 ) ) $buffering 1
    //  file nic.linked.aa, line 161
    // ( $slice mutex_plus_nentries 31 0 ) 
    [:] [slice_327_inst] (mutex_plus_nentries_312 31 0) (slice_327_wire)  $flowthrough
    $delay slice_327_inst 0
    // (($bitcast ($uint<32>) _b1  ) && ( $slice mutex_plus_nentries 31 0 ) )
    &&[CONCAT_u32_u64_328_inst] (type_cast_325_wire_constant slice_327_wire) (wval_329)   $flowthrough 
    $delay CONCAT_u32_u64_328_inst 0
    // 		$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b0  ) ( ~ ($bitcast ($uint<8>) _b0  ) ) mutex_address wval ) (ignore ) 
    //  file nic.linked.aa, line 162
    $call [call_stmt_340_call] $module accessMemory(type_cast_331_wire_constant type_cast_333_wire_constant NOT_u8_u8_336_wire_constant mutex_address_299 wval_329) (ignore_340)  
    $delay call_stmt_340_call 4
    $buffering  $in call_stmt_340_call type_cast_331_wire_constant 1
    $buffering  $in call_stmt_340_call type_cast_333_wire_constant 1
    $buffering  $in call_stmt_340_call NOT_u8_u8_336_wire_constant 1
    $buffering  $in call_stmt_340_call mutex_address_299 1
    $buffering  $in call_stmt_340_call wval_329 1
    $buffering  $out call_stmt_340_call ignore_340 1
  }
  // end data-path
  // 		$volatile mutex_address := q_base_address $buffering 1
  //  file nic.linked.aa, line 153
  // q_base_address
  // CP-DP links for merge  
  //  file nic.linked.aa, line 154
  // 		$call accessMemory (($bitcast ($uint<1>) _b1  ) ($bitcast ($uint<1>) _b1  ) ( ~ ($bitcast ($uint<8>) _b0  ) ) mutex_address ($bitcast ($uint<64>) _b0  ) ) (mutex_plus_nentries ) 
  //  file nic.linked.aa, line 156
  // mutex_address
  call_stmt_312_call <=> (branch_block_stmt_296/call_stmt_312_to_assign_stmt_316/call_stmt_312_Sample/crr branch_block_stmt_296/call_stmt_312_to_assign_stmt_316/call_stmt_312_Update/ccr) (branch_block_stmt_296/call_stmt_312_to_assign_stmt_316/call_stmt_312_Sample/cra branch_block_stmt_296/call_stmt_312_to_assign_stmt_316/call_stmt_312_Update/cca)
  // 		$volatile mutex_val := ( $slice mutex_plus_nentries 63 32 )  $buffering 1
  //  file nic.linked.aa, line 157
  // mutex_plus_nentries
  // CP-DP links for if  
  //  file nic.linked.aa, line 0
  // (mutex_val == 1 )
  if_stmt_317_branch <=> (branch_block_stmt_296/if_stmt_317_eval_test/branch_req) (branch_block_stmt_296/if_stmt_317_else_link/else_choice_transition branch_block_stmt_296/if_stmt_317_if_link/if_choice_transition)
  // 		$volatile wval := (($bitcast ($uint<32>) _b1  ) && ( $slice mutex_plus_nentries 31 0 ) ) $buffering 1
  //  file nic.linked.aa, line 161
  // (($bitcast ($uint<32>) _b1  ) && ( $slice mutex_plus_nentries 31 0 ) )
  // mutex_plus_nentries
  // 		$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b0  ) ( ~ ($bitcast ($uint<8>) _b0  ) ) mutex_address wval ) (ignore ) 
  //  file nic.linked.aa, line 162
  // mutex_address
  // wval
  call_stmt_340_call <=> (branch_block_stmt_296/assign_stmt_329_to_call_stmt_340/call_stmt_340_Sample/crr branch_block_stmt_296/assign_stmt_329_to_call_stmt_340/call_stmt_340_Update/ccr) (branch_block_stmt_296/assign_stmt_329_to_call_stmt_340/call_stmt_340_Sample/cra branch_block_stmt_296/assign_stmt_329_to_call_stmt_340/call_stmt_340_Update/cca)
}
$module [getQueuePointers] 
{
  $in q_base_address:$int<36>
  // can point into 
  $out wp:$int<32>
  // can point into 
  rp:$int<32>
  // can point into 
  // pipe-declarations for block %getQueuePointers
  //  file nic.linked.aa, line 166
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    ::[call_stmt_364_to_assign_stmt_372] 
    {
      // start: 	$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b1  ) ( ~ ($bitcast ($uint<8>) _b0  ) ) (q_base_address + 8 ) ($bitcast ($uint<64>) _b0  ) ) (wp_rp ) 
      //  file nic.linked.aa, line 171
      $T[call_stmt_364_sample_start_] 
      $T[call_stmt_364_sample_completed_] 
      $T[call_stmt_364_update_start_] 
      $T[call_stmt_364_update_completed_] 
      // Call input argument 0
      // Call input argument 1
      // Call input argument 2
      // Call input argument 3
      // (q_base_address + 8 )
      // q_base_address
      // Call input argument 4
      // start: Forward dependencies from (q_base_address + 8 ) to transition call_stmt_364_sample_start_
      // done: Forward dependencies from (q_base_address + 8 ) to transition call_stmt_364_sample_start_
      ;;[call_stmt_364_Sample] 
      {
        $T [crr] $T [cra] 
      }
      ;;[call_stmt_364_Update] 
      {
        $T [ccr] $T [cca] 
      }
      call_stmt_364_sample_start_ &-> (call_stmt_364_Sample)
      call_stmt_364_sample_completed_ <-& (call_stmt_364_Sample)
      call_stmt_364_sample_completed_ &-> ($null)
      call_stmt_364_update_start_ &-> (call_stmt_364_Update)
      call_stmt_364_update_completed_ <-& (call_stmt_364_Update)
      // Call output argument 0
      // (as target) wp_rp
      // start: WAR dependencies for wp_rp
      // done: WAR dependencies for wp_rp
      // end: 	$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b1  ) ( ~ ($bitcast ($uint<8>) _b0  ) ) (q_base_address + 8 ) ($bitcast ($uint<64>) _b0  ) ) (wp_rp ) 
      // start: WAR dependencies for wp
      // done: WAR dependencies for wp
      // start:  	$volatile wp := ( $slice wp_rp 63 32 )  $buffering 1
      //  file nic.linked.aa, line 172
      // volatile! 
      // Source expression
      // ( $slice wp_rp 63 32 ) 
      // wp_rp
      // Target expression
      // (as target) wp
      // wp
      // write to interface object
      // start: WAR dependencies for wp
      // done: WAR dependencies for wp
      // wp
      // write to interface object
      // end:  	$volatile wp := ( $slice wp_rp 63 32 )  $buffering 1
      // start: WAR dependencies for rp
      // done: WAR dependencies for rp
      // start:  	$volatile rp := ( $slice wp_rp 31 0 )  $buffering 1
      //  file nic.linked.aa, line 173
      // volatile! 
      // Source expression
      // ( $slice wp_rp 31 0 ) 
      // wp_rp
      // Target expression
      // (as target) rp
      // rp
      // write to interface object
      // start: WAR dependencies for rp
      // done: WAR dependencies for rp
      // rp
      // write to interface object
      // end:  	$volatile rp := ( $slice wp_rp 31 0 )  $buffering 1
      // load-store dependencies..
      // pipe read/write dependencies for pipe MEMORY_TO_NIC_RESPONSE
      // read-dependencies for pipe MEMORY_TO_NIC_RESPONSE
      // write-dependencies for pipe MEMORY_TO_NIC_RESPONSE
      // signal write dependencies for MEMORY_TO_NIC_RESPONSE
      // pipe read/write dependencies for pipe NIC_TO_MEMORY_REQUEST
      // read-dependencies for pipe NIC_TO_MEMORY_REQUEST
      // write-dependencies for pipe NIC_TO_MEMORY_REQUEST
      // signal write dependencies for NIC_TO_MEMORY_REQUEST
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %getQueuePointers
    //  file nic.linked.aa, line 166
    // 	$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b1  ) ( ~ ($bitcast ($uint<8>) _b0  ) ) (q_base_address + 8 ) ($bitcast ($uint<64>) _b0  ) ) (wp_rp ) 
    //  file nic.linked.aa, line 171
    // ($bitcast ($uint<1>) _b0  )
    $constant $W[type_cast_352_wire_constant] : $int<1> := _b0// 0
    // ($bitcast ($uint<1>) _b1  )
    $constant $W[type_cast_354_wire_constant] : $int<1> := _b1// 1
    // ( ~ ($bitcast ($uint<8>) _b0  ) )
    $constant $W[NOT_u8_u8_357_wire_constant] : $int<8> := _b11111111// -1
    // 8 
    $constant $W[konst_359_wire_constant] : $int<36> := _b000000000000000000000000000000001000// 8
    // ($bitcast ($uint<64>) _b0  )
    $constant $W[type_cast_362_wire_constant] : $int<64> := _b0000000000000000000000000000000000000000000000000000000000000000// 0
    // 	$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b1  ) ( ~ ($bitcast ($uint<8>) _b0  ) ) (q_base_address + 8 ) ($bitcast ($uint<64>) _b0  ) ) (wp_rp ) 
    //  file nic.linked.aa, line 171
    // (q_base_address + 8 )
    $intermediate $W[ADD_u36_u36_360_wire] : $int<36>
    // wp_rp
    $W[wp_rp_364] : $int<64>
    // 	$volatile wp := ( $slice wp_rp 63 32 )  $buffering 1
    //  file nic.linked.aa, line 172
    // wp
    // 	$volatile rp := ( $slice wp_rp 31 0 )  $buffering 1
    //  file nic.linked.aa, line 173
    // rp
    // 	$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b1  ) ( ~ ($bitcast ($uint<8>) _b0  ) ) (q_base_address + 8 ) ($bitcast ($uint<64>) _b0  ) ) (wp_rp ) 
    //  file nic.linked.aa, line 171
    // (q_base_address + 8 )
    +[ADD_u36_u36_360_inst] (q_base_address konst_359_wire_constant) (ADD_u36_u36_360_wire)   $flowthrough 
    $delay ADD_u36_u36_360_inst 0
    $call [call_stmt_364_call] $module accessMemory(type_cast_352_wire_constant type_cast_354_wire_constant NOT_u8_u8_357_wire_constant ADD_u36_u36_360_wire type_cast_362_wire_constant) (wp_rp_364)  
    $delay call_stmt_364_call 4
    $buffering  $in call_stmt_364_call type_cast_352_wire_constant 1
    $buffering  $in call_stmt_364_call type_cast_354_wire_constant 1
    $buffering  $in call_stmt_364_call NOT_u8_u8_357_wire_constant 1
    $buffering  $in call_stmt_364_call ADD_u36_u36_360_wire 1
    $buffering  $in call_stmt_364_call type_cast_362_wire_constant 1
    $buffering  $out call_stmt_364_call wp_rp_364 1
    // 	$volatile wp := ( $slice wp_rp 63 32 )  $buffering 1
    //  file nic.linked.aa, line 172
    // ( $slice wp_rp 63 32 ) 
    [:] [slice_367_inst] (wp_rp_364 63 32) (wp)  $flowthrough
    $delay slice_367_inst 0
    // 	$volatile rp := ( $slice wp_rp 31 0 )  $buffering 1
    //  file nic.linked.aa, line 173
    // ( $slice wp_rp 31 0 ) 
    [:] [slice_371_inst] (wp_rp_364 31 0) (rp)  $flowthrough
    $delay slice_371_inst 0
  }
  // end data-path
  // 	$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b1  ) ( ~ ($bitcast ($uint<8>) _b0  ) ) (q_base_address + 8 ) ($bitcast ($uint<64>) _b0  ) ) (wp_rp ) 
  //  file nic.linked.aa, line 171
  // (q_base_address + 8 )
  // q_base_address
  call_stmt_364_call <=> (call_stmt_364_to_assign_stmt_372/call_stmt_364_Sample/crr call_stmt_364_to_assign_stmt_372/call_stmt_364_Update/ccr) (call_stmt_364_to_assign_stmt_372/call_stmt_364_Sample/cra call_stmt_364_to_assign_stmt_372/call_stmt_364_Update/cca)
  // 	$volatile wp := ( $slice wp_rp 63 32 )  $buffering 1
  //  file nic.linked.aa, line 172
  // wp_rp
  // 	$volatile rp := ( $slice wp_rp 31 0 )  $buffering 1
  //  file nic.linked.aa, line 173
  // wp_rp
}
$module [getQueueElement] 
{
  $in q_base_address:$int<36>
  // can point into 
  read_pointer:$int<32>
  // can point into 
  $out q_r_data:$int<32>
  // can point into 
  // pipe-declarations for block %getQueueElement
  //  file nic.linked.aa, line 175
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    ::[assign_stmt_383_to_assign_stmt_424] 
    {
      // start: WAR dependencies for buffer_address
      // ignored out-of-scope w_root  q_base_address : $uint<36> 
      // done: WAR dependencies for buffer_address
      // start:  	$volatile buffer_address := (q_base_address + ($bitcast ($uint<36>) 16  )) $buffering 1
      //  file nic.linked.aa, line 180
      // volatile! 
      // Source expression
      // (q_base_address + ($bitcast ($uint<36>) 16  ))
      // q_base_address
      // Target expression
      // (as target) buffer_address
      // start: WAR dependencies for buffer_address
      // ignored out-of-scope w_root  q_base_address : $uint<36> 
      // done: WAR dependencies for buffer_address
      // end:  	$volatile buffer_address := (q_base_address + ($bitcast ($uint<36>) 16  )) $buffering 1
      // start: WAR dependencies for element_pair_address
      // ignored out-of-scope w_root  q_base_address : $uint<36> 
      // ignored out-of-scope w_root  read_pointer : $uint<32> 
      // done: WAR dependencies for element_pair_address
      // start:  	$volatile element_pair_address := (buffer_address + ($bitcast ($uint<36>) (( $slice read_pointer 31 1 )  && ($bitcast ($uint<3>) _b0  )) )) $buffering 1
      //  file nic.linked.aa, line 181
      // volatile! 
      // Source expression
      // (buffer_address + ($bitcast ($uint<36>) (( $slice read_pointer 31 1 )  && ($bitcast ($uint<3>) _b0  )) ))
      // buffer_address
      // ($bitcast ($uint<36>) (( $slice read_pointer 31 1 )  && ($bitcast ($uint<3>) _b0  )) )
      // (( $slice read_pointer 31 1 )  && ($bitcast ($uint<3>) _b0  ))
      // ( $slice read_pointer 31 1 ) 
      // read_pointer
      // Target expression
      // (as target) element_pair_address
      // start: WAR dependencies for element_pair_address
      // ignored out-of-scope w_root  q_base_address : $uint<36> 
      // ignored out-of-scope w_root  read_pointer : $uint<32> 
      // done: WAR dependencies for element_pair_address
      // end:  	$volatile element_pair_address := (buffer_address + ($bitcast ($uint<36>) (( $slice read_pointer 31 1 )  && ($bitcast ($uint<3>) _b0  )) )) $buffering 1
      // start: 	$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b1  ) ( ~ ($bitcast ($uint<8>) _b0  ) ) element_pair_address ($bitcast ($uint<64>) _b0  ) ) (element_pair ) 
      //  file nic.linked.aa, line 182
      $T[call_stmt_408_sample_start_] 
      $T[call_stmt_408_sample_completed_] 
      $T[call_stmt_408_update_start_] 
      $T[call_stmt_408_update_completed_] 
      // Call input argument 0
      // Call input argument 1
      // Call input argument 2
      // Call input argument 3
      // element_pair_address
      // Call input argument 4
      // start: Forward dependencies from element_pair_address to transition call_stmt_408_sample_start_
      // done: Forward dependencies from element_pair_address to transition call_stmt_408_sample_start_
      ;;[call_stmt_408_Sample] 
      {
        $T [crr] $T [cra] 
      }
      ;;[call_stmt_408_Update] 
      {
        $T [ccr] $T [cca] 
      }
      call_stmt_408_sample_start_ &-> (call_stmt_408_Sample)
      call_stmt_408_sample_completed_ <-& (call_stmt_408_Sample)
      call_stmt_408_sample_completed_ &-> ($null)
      call_stmt_408_update_start_ &-> (call_stmt_408_Update)
      call_stmt_408_update_completed_ <-& (call_stmt_408_Update)
      // Call output argument 0
      // (as target) element_pair
      // start: WAR dependencies for element_pair
      // done: WAR dependencies for element_pair
      // end: 	$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b1  ) ( ~ ($bitcast ($uint<8>) _b0  ) ) element_pair_address ($bitcast ($uint<64>) _b0  ) ) (element_pair ) 
      // start: WAR dependencies for e0
      // done: WAR dependencies for e0
      // start:  	$volatile e0 := ( $slice element_pair 63 32 )  $buffering 1
      //  file nic.linked.aa, line 183
      // volatile! 
      // Source expression
      // ( $slice element_pair 63 32 ) 
      // element_pair
      // Target expression
      // (as target) e0
      // start: WAR dependencies for e0
      // done: WAR dependencies for e0
      // end:  	$volatile e0 := ( $slice element_pair 63 32 )  $buffering 1
      // start: WAR dependencies for e1
      // done: WAR dependencies for e1
      // start:  	$volatile e1 := ( $slice element_pair 31 0 )  $buffering 1
      //  file nic.linked.aa, line 184
      // volatile! 
      // Source expression
      // ( $slice element_pair 31 0 ) 
      // element_pair
      // Target expression
      // (as target) e1
      // start: WAR dependencies for e1
      // done: WAR dependencies for e1
      // end:  	$volatile e1 := ( $slice element_pair 31 0 )  $buffering 1
      // start:  	q_r_data := ( $mux (read_pointer [] 0 ) e1  e0 )  $buffering 1// bits of buffering = 32. 
      //  file nic.linked.aa, line 185
      // Source expression
      // ( $mux (read_pointer [] 0 ) e1  e0 ) 
      $T[MUX_423_sample_start_] 
      $T[MUX_423_sample_completed_] 
      $T[MUX_423_update_start_] 
      $T[MUX_423_update_completed_] 
      // (read_pointer [] 0 )
      // read_pointer
      // e1
      // e0
      // start: Forward dependencies from (read_pointer [] 0 ) to transition MUX_423_sample_start_
      // done: Forward dependencies from (read_pointer [] 0 ) to transition MUX_423_sample_start_
      // start: Forward dependencies from e1 to transition MUX_423_sample_start_
      MUX_423_sample_start_ <-& (call_stmt_408_update_completed_)
      // done: Forward dependencies from e1 to transition MUX_423_sample_start_
      // start: Forward dependencies from e0 to transition MUX_423_sample_start_
      MUX_423_sample_start_ <-& (call_stmt_408_update_completed_)
      // done: Forward dependencies from e0 to transition MUX_423_sample_start_
      ;;[MUX_423_start] 
      {
        // ternary expression: 
        $T [req] $T [ack] // sample req/ack
      }
      ;;[MUX_423_complete] 
      {
        // ternary expression: 
        $T [req] $T [ack] // update req/ack
      }
      MUX_423_sample_start_ &-> (MUX_423_start)
      MUX_423_sample_completed_ <-& (MUX_423_start)
      MUX_423_sample_completed_ &-> ($null)
      MUX_423_update_start_ &-> (MUX_423_complete)
      MUX_423_update_completed_ <-& (MUX_423_complete)
      // Target expression
      // (as target) q_r_data
      // q_r_data
      // write to interface object
      // start: WAR dependencies for q_r_data
      // done: WAR dependencies for q_r_data
      // q_r_data
      // write to interface object
      // end:  	q_r_data := ( $mux (read_pointer [] 0 ) e1  e0 )  $buffering 1// bits of buffering = 32. 
      // load-store dependencies..
      // pipe read/write dependencies for pipe MEMORY_TO_NIC_RESPONSE
      // read-dependencies for pipe MEMORY_TO_NIC_RESPONSE
      // write-dependencies for pipe MEMORY_TO_NIC_RESPONSE
      // signal write dependencies for MEMORY_TO_NIC_RESPONSE
      // pipe read/write dependencies for pipe NIC_TO_MEMORY_REQUEST
      // read-dependencies for pipe NIC_TO_MEMORY_REQUEST
      // write-dependencies for pipe NIC_TO_MEMORY_REQUEST
      // signal write dependencies for NIC_TO_MEMORY_REQUEST
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %getQueueElement
    //  file nic.linked.aa, line 175
    // ($bitcast ($uint<36>) 16  )
    $constant $W[type_cast_381_wire_constant] : $int<36> := _b000000000000000000000000000000010000// 16
    // ($bitcast ($uint<3>) _b0  )
    $constant $W[type_cast_391_wire_constant] : $int<3> := _b000// 0
    // 	$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b1  ) ( ~ ($bitcast ($uint<8>) _b0  ) ) element_pair_address ($bitcast ($uint<64>) _b0  ) ) (element_pair ) 
    //  file nic.linked.aa, line 182
    // ($bitcast ($uint<1>) _b0  )
    $constant $W[type_cast_398_wire_constant] : $int<1> := _b0// 0
    // ($bitcast ($uint<1>) _b1  )
    $constant $W[type_cast_400_wire_constant] : $int<1> := _b1// 1
    // ( ~ ($bitcast ($uint<8>) _b0  ) )
    $constant $W[NOT_u8_u8_403_wire_constant] : $int<8> := _b11111111// -1
    // ($bitcast ($uint<64>) _b0  )
    $constant $W[type_cast_406_wire_constant] : $int<64> := _b0000000000000000000000000000000000000000000000000000000000000000// 0
    // ( $mux (read_pointer [] 0 ) e1  e0 ) 
    // 0 
    $constant $W[konst_419_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // 	$volatile buffer_address := (q_base_address + ($bitcast ($uint<36>) 16  )) $buffering 1
    //  file nic.linked.aa, line 180
    // buffer_address
    $W[buffer_address_383] : $int<36>
    // 	$volatile element_pair_address := (buffer_address + ($bitcast ($uint<36>) (( $slice read_pointer 31 1 )  && ($bitcast ($uint<3>) _b0  )) )) $buffering 1
    //  file nic.linked.aa, line 181
    // ( $slice read_pointer 31 1 ) 
    $intermediate $W[slice_388_wire] : $int<31>
    // (( $slice read_pointer 31 1 )  && ($bitcast ($uint<3>) _b0  ))
    $intermediate $W[CONCAT_u31_u34_392_wire] : $int<34>
    // ($bitcast ($uint<36>) (( $slice read_pointer 31 1 )  && ($bitcast ($uint<3>) _b0  )) )
    $intermediate $W[type_cast_394_wire] : $int<36>
    // element_pair_address
    $W[element_pair_address_396] : $int<36>
    // 	$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b1  ) ( ~ ($bitcast ($uint<8>) _b0  ) ) element_pair_address ($bitcast ($uint<64>) _b0  ) ) (element_pair ) 
    //  file nic.linked.aa, line 182
    // element_pair
    $W[element_pair_408] : $int<64>
    // 	$volatile e0 := ( $slice element_pair 63 32 )  $buffering 1
    //  file nic.linked.aa, line 183
    // e0
    $W[e0_412] : $int<32>
    // 	$volatile e1 := ( $slice element_pair 31 0 )  $buffering 1
    //  file nic.linked.aa, line 184
    // e1
    $W[e1_416] : $int<32>
    // 	q_r_data := ( $mux (read_pointer [] 0 ) e1  e0 )  $buffering 1// bits of buffering = 32. 
    //  file nic.linked.aa, line 185
    // (read_pointer [] 0 )
    $intermediate $W[BITSEL_u32_u1_420_wire] : $int<1>
    // q_r_data
    // 	$volatile buffer_address := (q_base_address + ($bitcast ($uint<36>) 16  )) $buffering 1
    //  file nic.linked.aa, line 180
    // (q_base_address + ($bitcast ($uint<36>) 16  ))
    +[ADD_u36_u36_382_inst] (q_base_address type_cast_381_wire_constant) (buffer_address_383)   $flowthrough 
    $delay ADD_u36_u36_382_inst 0
    // 	$volatile element_pair_address := (buffer_address + ($bitcast ($uint<36>) (( $slice read_pointer 31 1 )  && ($bitcast ($uint<3>) _b0  )) )) $buffering 1
    //  file nic.linked.aa, line 181
    // ( $slice read_pointer 31 1 ) 
    [:] [slice_388_inst] (read_pointer 31 1) (slice_388_wire)  $flowthrough
    $delay slice_388_inst 0
    // (( $slice read_pointer 31 1 )  && ($bitcast ($uint<3>) _b0  ))
    &&[CONCAT_u31_u34_392_inst] (slice_388_wire type_cast_391_wire_constant) (CONCAT_u31_u34_392_wire)   $flowthrough 
    $delay CONCAT_u31_u34_392_inst 0
    // ($bitcast ($uint<36>) (( $slice read_pointer 31 1 )  && ($bitcast ($uint<3>) _b0  )) )
    # := [type_cast_394_inst] (CONCAT_u31_u34_392_wire) (type_cast_394_wire)   $flowthrough
    $delay type_cast_394_inst 0
    // (buffer_address + ($bitcast ($uint<36>) (( $slice read_pointer 31 1 )  && ($bitcast ($uint<3>) _b0  )) ))
    +[ADD_u36_u36_395_inst] (buffer_address_383 type_cast_394_wire) (element_pair_address_396)   $flowthrough 
    $delay ADD_u36_u36_395_inst 0
    // 	$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b1  ) ( ~ ($bitcast ($uint<8>) _b0  ) ) element_pair_address ($bitcast ($uint<64>) _b0  ) ) (element_pair ) 
    //  file nic.linked.aa, line 182
    $call [call_stmt_408_call] $module accessMemory(type_cast_398_wire_constant type_cast_400_wire_constant NOT_u8_u8_403_wire_constant element_pair_address_396 type_cast_406_wire_constant) (element_pair_408)  
    $delay call_stmt_408_call 4
    $buffering  $in call_stmt_408_call type_cast_398_wire_constant 1
    $buffering  $in call_stmt_408_call type_cast_400_wire_constant 1
    $buffering  $in call_stmt_408_call NOT_u8_u8_403_wire_constant 1
    $buffering  $in call_stmt_408_call element_pair_address_396 1
    $buffering  $in call_stmt_408_call type_cast_406_wire_constant 1
    $buffering  $out call_stmt_408_call element_pair_408 1
    // 	$volatile e0 := ( $slice element_pair 63 32 )  $buffering 1
    //  file nic.linked.aa, line 183
    // ( $slice element_pair 63 32 ) 
    [:] [slice_411_inst] (element_pair_408 63 32) (e0_412)  $flowthrough
    $delay slice_411_inst 0
    // 	$volatile e1 := ( $slice element_pair 31 0 )  $buffering 1
    //  file nic.linked.aa, line 184
    // ( $slice element_pair 31 0 ) 
    [:] [slice_415_inst] (element_pair_408 31 0) (e1_416)  $flowthrough
    $delay slice_415_inst 0
    // 	q_r_data := ( $mux (read_pointer [] 0 ) e1  e0 )  $buffering 1// bits of buffering = 32. 
    //  file nic.linked.aa, line 185
    // (read_pointer [] 0 )
    [][BITSEL_u32_u1_420_inst] (read_pointer konst_419_wire_constant) (BITSEL_u32_u1_420_wire)   $flowthrough 
    $delay BITSEL_u32_u1_420_inst 0
    // ( $mux (read_pointer [] 0 ) e1  e0 ) 
    ? [MUX_423_inst] (BITSEL_u32_u1_420_wire e1_416 e0_412) (q_r_data) 
    $buffering  $out MUX_423_inst q_r_data 1
  }
  // end data-path
  // 	$volatile buffer_address := (q_base_address + ($bitcast ($uint<36>) 16  )) $buffering 1
  //  file nic.linked.aa, line 180
  // (q_base_address + ($bitcast ($uint<36>) 16  ))
  // q_base_address
  // 	$volatile element_pair_address := (buffer_address + ($bitcast ($uint<36>) (( $slice read_pointer 31 1 )  && ($bitcast ($uint<3>) _b0  )) )) $buffering 1
  //  file nic.linked.aa, line 181
  // (buffer_address + ($bitcast ($uint<36>) (( $slice read_pointer 31 1 )  && ($bitcast ($uint<3>) _b0  )) ))
  // buffer_address
  // (( $slice read_pointer 31 1 )  && ($bitcast ($uint<3>) _b0  ))
  // read_pointer
  // 	$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b1  ) ( ~ ($bitcast ($uint<8>) _b0  ) ) element_pair_address ($bitcast ($uint<64>) _b0  ) ) (element_pair ) 
  //  file nic.linked.aa, line 182
  // element_pair_address
  call_stmt_408_call <=> (assign_stmt_383_to_assign_stmt_424/call_stmt_408_Sample/crr assign_stmt_383_to_assign_stmt_424/call_stmt_408_Update/ccr) (assign_stmt_383_to_assign_stmt_424/call_stmt_408_Sample/cra assign_stmt_383_to_assign_stmt_424/call_stmt_408_Update/cca)
  // 	$volatile e0 := ( $slice element_pair 63 32 )  $buffering 1
  //  file nic.linked.aa, line 183
  // element_pair
  // 	$volatile e1 := ( $slice element_pair 31 0 )  $buffering 1
  //  file nic.linked.aa, line 184
  // element_pair
  // 	q_r_data := ( $mux (read_pointer [] 0 ) e1  e0 )  $buffering 1// bits of buffering = 32. 
  //  file nic.linked.aa, line 185
  // (read_pointer [] 0 )
  // read_pointer
  // e1
  // e0
  // ( $mux (read_pointer [] 0 ) e1  e0 ) 
  MUX_423_inst <=> (assign_stmt_383_to_assign_stmt_424/MUX_423_start/req assign_stmt_383_to_assign_stmt_424/MUX_423_complete/req) (assign_stmt_383_to_assign_stmt_424/MUX_423_start/ack assign_stmt_383_to_assign_stmt_424/MUX_423_complete/ack)
}
$module [setQueuePointers] 
{
  $in q_base_address:$int<36>
  // can point into 
  wp:$int<32>
  // can point into 
  rp:$int<32>
  // can point into 
  // pipe-declarations for block %setQueuePointers
  //  file nic.linked.aa, line 188
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    ::[call_stmt_453] 
    {
      // start: 	$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b0  ) ( ~ ($bitcast ($uint<8>) _b0  ) ) (q_base_address + 8 ) (wp && rp) ) (ignore ) 
      //  file nic.linked.aa, line 194
      $T[call_stmt_453_sample_start_] 
      $T[call_stmt_453_sample_completed_] 
      $T[call_stmt_453_update_start_] 
      $T[call_stmt_453_update_completed_] 
      // Call input argument 0
      // Call input argument 1
      // Call input argument 2
      // Call input argument 3
      // (q_base_address + 8 )
      // q_base_address
      // Call input argument 4
      // (wp && rp)
      // wp
      // rp
      // start: Forward dependencies from (q_base_address + 8 ) to transition call_stmt_453_sample_start_
      // done: Forward dependencies from (q_base_address + 8 ) to transition call_stmt_453_sample_start_
      // start: Forward dependencies from (wp && rp) to transition call_stmt_453_sample_start_
      // done: Forward dependencies from (wp && rp) to transition call_stmt_453_sample_start_
      ;;[call_stmt_453_Sample] 
      {
        $T [crr] $T [cra] 
      }
      ;;[call_stmt_453_Update] 
      {
        $T [ccr] $T [cca] 
      }
      call_stmt_453_sample_start_ &-> (call_stmt_453_Sample)
      call_stmt_453_sample_completed_ <-& (call_stmt_453_Sample)
      call_stmt_453_sample_completed_ &-> ($null)
      call_stmt_453_update_start_ &-> (call_stmt_453_Update)
      call_stmt_453_update_completed_ <-& (call_stmt_453_Update)
      // Call output argument 0
      // (as target) ignore
      // start: WAR dependencies for ignore
      // done: WAR dependencies for ignore
      // end: 	$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b0  ) ( ~ ($bitcast ($uint<8>) _b0  ) ) (q_base_address + 8 ) (wp && rp) ) (ignore ) 
      // load-store dependencies..
      // pipe read/write dependencies for pipe MEMORY_TO_NIC_RESPONSE
      // read-dependencies for pipe MEMORY_TO_NIC_RESPONSE
      // write-dependencies for pipe MEMORY_TO_NIC_RESPONSE
      // signal write dependencies for MEMORY_TO_NIC_RESPONSE
      // pipe read/write dependencies for pipe NIC_TO_MEMORY_REQUEST
      // read-dependencies for pipe NIC_TO_MEMORY_REQUEST
      // write-dependencies for pipe NIC_TO_MEMORY_REQUEST
      // signal write dependencies for NIC_TO_MEMORY_REQUEST
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %setQueuePointers
    //  file nic.linked.aa, line 188
    // 	$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b0  ) ( ~ ($bitcast ($uint<8>) _b0  ) ) (q_base_address + 8 ) (wp && rp) ) (ignore ) 
    //  file nic.linked.aa, line 194
    // ($bitcast ($uint<1>) _b0  )
    $constant $W[type_cast_440_wire_constant] : $int<1> := _b0// 0
    // ($bitcast ($uint<1>) _b0  )
    $constant $W[type_cast_442_wire_constant] : $int<1> := _b0// 0
    // ( ~ ($bitcast ($uint<8>) _b0  ) )
    $constant $W[NOT_u8_u8_445_wire_constant] : $int<8> := _b11111111// -1
    // 8 
    $constant $W[konst_447_wire_constant] : $int<36> := _b000000000000000000000000000000001000// 8
    // 	$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b0  ) ( ~ ($bitcast ($uint<8>) _b0  ) ) (q_base_address + 8 ) (wp && rp) ) (ignore ) 
    //  file nic.linked.aa, line 194
    // (q_base_address + 8 )
    $intermediate $W[ADD_u36_u36_448_wire] : $int<36>
    // (wp && rp)
    $intermediate $W[CONCAT_u32_u64_451_wire] : $int<64>
    // ignore
    $W[ignore_453] : $int<64>
    // 	$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b0  ) ( ~ ($bitcast ($uint<8>) _b0  ) ) (q_base_address + 8 ) (wp && rp) ) (ignore ) 
    //  file nic.linked.aa, line 194
    // (q_base_address + 8 )
    +[ADD_u36_u36_448_inst] (q_base_address konst_447_wire_constant) (ADD_u36_u36_448_wire)   $flowthrough 
    $delay ADD_u36_u36_448_inst 0
    // (wp && rp)
    &&[CONCAT_u32_u64_451_inst] (wp rp) (CONCAT_u32_u64_451_wire)   $flowthrough 
    $delay CONCAT_u32_u64_451_inst 0
    $call [call_stmt_453_call] $module accessMemory(type_cast_440_wire_constant type_cast_442_wire_constant NOT_u8_u8_445_wire_constant ADD_u36_u36_448_wire CONCAT_u32_u64_451_wire) (ignore_453)  
    $delay call_stmt_453_call 4
    $buffering  $in call_stmt_453_call type_cast_440_wire_constant 1
    $buffering  $in call_stmt_453_call type_cast_442_wire_constant 1
    $buffering  $in call_stmt_453_call NOT_u8_u8_445_wire_constant 1
    $buffering  $in call_stmt_453_call ADD_u36_u36_448_wire 1
    $buffering  $in call_stmt_453_call CONCAT_u32_u64_451_wire 1
    $buffering  $out call_stmt_453_call ignore_453 1
  }
  // end data-path
  // 	$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b0  ) ( ~ ($bitcast ($uint<8>) _b0  ) ) (q_base_address + 8 ) (wp && rp) ) (ignore ) 
  //  file nic.linked.aa, line 194
  // (q_base_address + 8 )
  // q_base_address
  // (wp && rp)
  // wp
  // rp
  call_stmt_453_call <=> (call_stmt_453/call_stmt_453_Sample/crr call_stmt_453/call_stmt_453_Update/ccr) (call_stmt_453/call_stmt_453_Sample/cra call_stmt_453/call_stmt_453_Update/cca)
}
$module [releaseMutex] 
{
  $in q_base_address:$int<36>
  // can point into 
  // pipe-declarations for block %releaseMutex
  //  file nic.linked.aa, line 196
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    ::[call_stmt_471] 
    {
      // start: 	$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b0  ) (( ~ ($bitcast ($uint<4>) _b0  ) ) && ($bitcast ($uint<4>) _b0  )) q_base_address ($bitcast ($uint<64>) _b0  ) ) (ignore ) 
      //  file nic.linked.aa, line 201
      $T[call_stmt_471_sample_start_] 
      $T[call_stmt_471_sample_completed_] 
      $T[call_stmt_471_update_start_] 
      $T[call_stmt_471_update_completed_] 
      // Call input argument 0
      // Call input argument 1
      // Call input argument 2
      // Call input argument 3
      // q_base_address
      // Call input argument 4
      // start: Forward dependencies from q_base_address to transition call_stmt_471_sample_start_
      // done: Forward dependencies from q_base_address to transition call_stmt_471_sample_start_
      ;;[call_stmt_471_Sample] 
      {
        $T [crr] $T [cra] 
      }
      ;;[call_stmt_471_Update] 
      {
        $T [ccr] $T [cca] 
      }
      call_stmt_471_sample_start_ &-> (call_stmt_471_Sample)
      call_stmt_471_sample_completed_ <-& (call_stmt_471_Sample)
      call_stmt_471_sample_completed_ &-> ($null)
      call_stmt_471_update_start_ &-> (call_stmt_471_Update)
      call_stmt_471_update_completed_ <-& (call_stmt_471_Update)
      // Call output argument 0
      // (as target) ignore
      // start: WAR dependencies for ignore
      // done: WAR dependencies for ignore
      // end: 	$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b0  ) (( ~ ($bitcast ($uint<4>) _b0  ) ) && ($bitcast ($uint<4>) _b0  )) q_base_address ($bitcast ($uint<64>) _b0  ) ) (ignore ) 
      // load-store dependencies..
      // pipe read/write dependencies for pipe MEMORY_TO_NIC_RESPONSE
      // read-dependencies for pipe MEMORY_TO_NIC_RESPONSE
      // write-dependencies for pipe MEMORY_TO_NIC_RESPONSE
      // signal write dependencies for MEMORY_TO_NIC_RESPONSE
      // pipe read/write dependencies for pipe NIC_TO_MEMORY_REQUEST
      // read-dependencies for pipe NIC_TO_MEMORY_REQUEST
      // write-dependencies for pipe NIC_TO_MEMORY_REQUEST
      // signal write dependencies for NIC_TO_MEMORY_REQUEST
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %releaseMutex
    //  file nic.linked.aa, line 196
    // 	$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b0  ) (( ~ ($bitcast ($uint<4>) _b0  ) ) && ($bitcast ($uint<4>) _b0  )) q_base_address ($bitcast ($uint<64>) _b0  ) ) (ignore ) 
    //  file nic.linked.aa, line 201
    // ($bitcast ($uint<1>) _b0  )
    $constant $W[type_cast_458_wire_constant] : $int<1> := _b0// 0
    // ($bitcast ($uint<1>) _b0  )
    $constant $W[type_cast_460_wire_constant] : $int<1> := _b0// 0
    // (( ~ ($bitcast ($uint<4>) _b0  ) ) && ($bitcast ($uint<4>) _b0  ))
    $constant $W[CONCAT_u4_u8_466_wire_constant] : $int<8> := _b11110000// 240
    // ($bitcast ($uint<64>) _b0  )
    $constant $W[type_cast_469_wire_constant] : $int<64> := _b0000000000000000000000000000000000000000000000000000000000000000// 0
    // 	$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b0  ) (( ~ ($bitcast ($uint<4>) _b0  ) ) && ($bitcast ($uint<4>) _b0  )) q_base_address ($bitcast ($uint<64>) _b0  ) ) (ignore ) 
    //  file nic.linked.aa, line 201
    // ignore
    $W[ignore_471] : $int<64>
    // 	$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b0  ) (( ~ ($bitcast ($uint<4>) _b0  ) ) && ($bitcast ($uint<4>) _b0  )) q_base_address ($bitcast ($uint<64>) _b0  ) ) (ignore ) 
    //  file nic.linked.aa, line 201
    $call [call_stmt_471_call] $module accessMemory(type_cast_458_wire_constant type_cast_460_wire_constant CONCAT_u4_u8_466_wire_constant q_base_address type_cast_469_wire_constant) (ignore_471)  
    $delay call_stmt_471_call 4
    $buffering  $in call_stmt_471_call type_cast_458_wire_constant 1
    $buffering  $in call_stmt_471_call type_cast_460_wire_constant 1
    $buffering  $in call_stmt_471_call CONCAT_u4_u8_466_wire_constant 1
    $buffering  $in call_stmt_471_call q_base_address 1
    $buffering  $in call_stmt_471_call type_cast_469_wire_constant 1
    $buffering  $out call_stmt_471_call ignore_471 1
  }
  // end data-path
  // 	$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b0  ) (( ~ ($bitcast ($uint<4>) _b0  ) ) && ($bitcast ($uint<4>) _b0  )) q_base_address ($bitcast ($uint<64>) _b0  ) ) (ignore ) 
  //  file nic.linked.aa, line 201
  // q_base_address
  call_stmt_471_call <=> (call_stmt_471/call_stmt_471_Sample/crr call_stmt_471/call_stmt_471_Update/ccr) (call_stmt_471/call_stmt_471_Sample/cra call_stmt_471/call_stmt_471_Update/cca)
}
$module [popFromQueue] 
{
  $in lock:$int<1>
  // can point into 
  q_base_address:$int<36>
  // can point into 
  $out q_r_data:$int<32>
  // can point into 
  status:$int<1>
  // can point into 
  // pipe-declarations for block %popFromQueue
  //  file nic.linked.aa, line 203
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    ::[call_stmt_481] 
    {
      // start: 	$guard (lock) $call acquireMutex (q_base_address ) (m_ok ) 
      //  file nic.linked.aa, line 208
      $T[call_stmt_481_sample_start_] 
      $T[call_stmt_481_sample_completed_] 
      $T[call_stmt_481_update_start_] 
      $T[call_stmt_481_update_completed_] 
      // Guard expression
      // lock
      // start: Forward dependencies from lock to transition call_stmt_481_sample_start_
      // done: Forward dependencies from lock to transition call_stmt_481_sample_start_
      // Call input argument 0
      // q_base_address
      // start: Forward dependencies from q_base_address to transition call_stmt_481_sample_start_
      // done: Forward dependencies from q_base_address to transition call_stmt_481_sample_start_
      ;;[call_stmt_481_Sample] 
      {
        $T [crr] $T [cra] 
      }
      ;;[call_stmt_481_Update] 
      {
        $T [ccr] $T [cca] 
      }
      call_stmt_481_sample_start_ &-> (call_stmt_481_Sample)
      call_stmt_481_sample_completed_ <-& (call_stmt_481_Sample)
      call_stmt_481_sample_completed_ &-> ($null)
      call_stmt_481_update_start_ &-> (call_stmt_481_Update)
      call_stmt_481_update_completed_ <-& (call_stmt_481_Update)
      // Call output argument 0
      // (as target) m_ok
      // start: WAR dependencies for m_ok
      // done: WAR dependencies for m_ok
      // end: 	$guard (lock) $call acquireMutex (q_base_address ) (m_ok ) 
      // load-store dependencies..
      // pipe read/write dependencies for pipe MEMORY_TO_NIC_RESPONSE
      // read-dependencies for pipe MEMORY_TO_NIC_RESPONSE
      // write-dependencies for pipe MEMORY_TO_NIC_RESPONSE
      // signal write dependencies for MEMORY_TO_NIC_RESPONSE
      // pipe read/write dependencies for pipe NIC_TO_MEMORY_REQUEST
      // read-dependencies for pipe NIC_TO_MEMORY_REQUEST
      // write-dependencies for pipe NIC_TO_MEMORY_REQUEST
      // signal write dependencies for NIC_TO_MEMORY_REQUEST
    }
    ::[call_stmt_486_to_call_stmt_516] 
    {
      // start: 	$call getQueuePointers (q_base_address ) (write_pointer read_pointer ) 
      //  file nic.linked.aa, line 210
      $T[call_stmt_486_sample_start_] 
      $T[call_stmt_486_sample_completed_] 
      $T[call_stmt_486_update_start_] 
      $T[call_stmt_486_update_completed_] 
      // Call input argument 0
      // q_base_address
      // start: Forward dependencies from q_base_address to transition call_stmt_486_sample_start_
      // done: Forward dependencies from q_base_address to transition call_stmt_486_sample_start_
      ;;[call_stmt_486_Sample] 
      {
        $T [crr] $T [cra] 
      }
      ;;[call_stmt_486_Update] 
      {
        $T [ccr] $T [cca] 
      }
      call_stmt_486_sample_start_ &-> (call_stmt_486_Sample)
      call_stmt_486_sample_completed_ <-& (call_stmt_486_Sample)
      call_stmt_486_sample_completed_ &-> ($null)
      call_stmt_486_update_start_ &-> (call_stmt_486_Update)
      call_stmt_486_update_completed_ <-& (call_stmt_486_Update)
      // Call output argument 0
      // (as target) write_pointer
      // Call output argument 1
      // (as target) read_pointer
      // start: WAR dependencies for write_pointer
      // done: WAR dependencies for write_pointer
      // start: WAR dependencies for read_pointer
      // done: WAR dependencies for read_pointer
      // end: 	$call getQueuePointers (q_base_address ) (write_pointer read_pointer ) 
      // start: WAR dependencies for q_empty
      // done: WAR dependencies for q_empty
      // start:  	$volatile q_empty := (write_pointer == read_pointer) $buffering 1
      //  file nic.linked.aa, line 211
      // volatile! 
      // Source expression
      // (write_pointer == read_pointer)
      // write_pointer
      // read_pointer
      // Target expression
      // (as target) q_empty
      // start: WAR dependencies for q_empty
      // done: WAR dependencies for q_empty
      // end:  	$volatile q_empty := (write_pointer == read_pointer) $buffering 1
      // start: WAR dependencies for round_off
      // done: WAR dependencies for round_off
      // start:  	$volatile round_off := (read_pointer == (QUEUE_SIZE_MASK - 1 )) $buffering 1
      //  file nic.linked.aa, line 212
      // volatile! 
      // Source expression
      // (read_pointer == (QUEUE_SIZE_MASK - 1 ))
      // read_pointer
      // Target expression
      // (as target) round_off
      // start: WAR dependencies for round_off
      // done: WAR dependencies for round_off
      // end:  	$volatile round_off := (read_pointer == (QUEUE_SIZE_MASK - 1 )) $buffering 1
      // start: WAR dependencies for next_rp
      // done: WAR dependencies for next_rp
      // start:  	$volatile next_rp := ( $mux round_off 0   (read_pointer + 1 ) )  $buffering 1
      //  file nic.linked.aa, line 213
      // volatile! 
      // Source expression
      // ( $mux round_off 0   (read_pointer + 1 ) ) 
      // round_off
      // (read_pointer + 1 )
      // read_pointer
      // Target expression
      // (as target) next_rp
      // start: WAR dependencies for next_rp
      // done: WAR dependencies for next_rp
      // end:  	$volatile next_rp := ( $mux round_off 0   (read_pointer + 1 ) )  $buffering 1
      // start: 	$guard (~q_empty) $call getQueueElement (q_base_address read_pointer ) (q_r_data ) 
      //  file nic.linked.aa, line 214
      $T[call_stmt_511_sample_start_] 
      $T[call_stmt_511_sample_completed_] 
      $T[call_stmt_511_update_start_] 
      $T[call_stmt_511_update_completed_] 
      // Guard expression
      // q_empty
      // start: Forward dependencies from q_empty to transition call_stmt_511_sample_start_
      call_stmt_511_sample_start_ <-& (call_stmt_486_update_completed_)
      // done: Forward dependencies from q_empty to transition call_stmt_511_sample_start_
      // Call input argument 0
      // q_base_address
      // Call input argument 1
      // read_pointer
      // start: Forward dependencies from q_base_address to transition call_stmt_511_sample_start_
      // done: Forward dependencies from q_base_address to transition call_stmt_511_sample_start_
      // start: Forward dependencies from read_pointer to transition call_stmt_511_sample_start_
      call_stmt_511_sample_start_ <-& (call_stmt_486_update_completed_)
      // done: Forward dependencies from read_pointer to transition call_stmt_511_sample_start_
      ;;[call_stmt_511_Sample] 
      {
        $T [crr] $T [cra] 
      }
      ;;[call_stmt_511_Update] 
      {
        $T [ccr] $T [cca] 
      }
      call_stmt_511_sample_start_ &-> (call_stmt_511_Sample)
      call_stmt_511_sample_completed_ <-& (call_stmt_511_Sample)
      call_stmt_511_sample_completed_ &-> ($null)
      call_stmt_511_update_start_ &-> (call_stmt_511_Update)
      call_stmt_511_update_completed_ <-& (call_stmt_511_Update)
      // Call output argument 0
      // (as target) q_r_data
      // q_r_data
      // write to interface object
      // q_r_data
      // write to interface object
      // start: WAR dependencies for q_r_data
      // done: WAR dependencies for q_r_data
      // end: 	$guard (~q_empty) $call getQueueElement (q_base_address read_pointer ) (q_r_data ) 
      // start: 	$guard (~q_empty) $call setQueuePointers (q_base_address write_pointer next_rp ) () 
      //  file nic.linked.aa, line 215
      $T[call_stmt_516_sample_start_] 
      $T[call_stmt_516_sample_completed_] 
      $T[call_stmt_516_update_start_] 
      $T[call_stmt_516_update_completed_] 
      // Guard expression
      // q_empty
      // start: Forward dependencies from q_empty to transition call_stmt_516_sample_start_
      call_stmt_516_sample_start_ <-& (call_stmt_486_update_completed_)
      // done: Forward dependencies from q_empty to transition call_stmt_516_sample_start_
      // Call input argument 0
      // q_base_address
      // Call input argument 1
      // write_pointer
      // Call input argument 2
      // next_rp
      // start: Forward dependencies from q_base_address to transition call_stmt_516_sample_start_
      // done: Forward dependencies from q_base_address to transition call_stmt_516_sample_start_
      // start: Forward dependencies from write_pointer to transition call_stmt_516_sample_start_
      call_stmt_516_sample_start_ <-& (call_stmt_486_update_completed_)
      // done: Forward dependencies from write_pointer to transition call_stmt_516_sample_start_
      // start: Forward dependencies from next_rp to transition call_stmt_516_sample_start_
      call_stmt_516_sample_start_ <-& (call_stmt_486_update_completed_)
      // done: Forward dependencies from next_rp to transition call_stmt_516_sample_start_
      ;;[call_stmt_516_Sample] 
      {
        $T [crr] $T [cra] 
      }
      ;;[call_stmt_516_Update] 
      {
        $T [ccr] $T [cca] 
      }
      call_stmt_516_sample_start_ &-> (call_stmt_516_Sample)
      call_stmt_516_sample_completed_ <-& (call_stmt_516_Sample)
      call_stmt_516_sample_completed_ &-> ($null)
      call_stmt_516_update_start_ &-> (call_stmt_516_Update)
      call_stmt_516_update_completed_ <-& (call_stmt_516_Update)
      // end: 	$guard (~q_empty) $call setQueuePointers (q_base_address write_pointer next_rp ) () 
      // load-store dependencies..
      // pipe read/write dependencies for pipe MEMORY_TO_NIC_RESPONSE
      // read-dependencies for pipe MEMORY_TO_NIC_RESPONSE
      call_stmt_511_sample_start_ <-& (call_stmt_486_update_completed_)
      call_stmt_516_sample_start_ <-& (call_stmt_511_update_completed_)
      // write-dependencies for pipe MEMORY_TO_NIC_RESPONSE
      // signal write dependencies for MEMORY_TO_NIC_RESPONSE
      // pipe read/write dependencies for pipe NIC_TO_MEMORY_REQUEST
      // read-dependencies for pipe NIC_TO_MEMORY_REQUEST
      // write-dependencies for pipe NIC_TO_MEMORY_REQUEST
      call_stmt_511_sample_start_ <-& (call_stmt_486_update_completed_)
      call_stmt_516_sample_start_ <-& (call_stmt_511_update_completed_)
      // signal write dependencies for NIC_TO_MEMORY_REQUEST
    }
    ::[call_stmt_527_to_assign_stmt_530] 
    {
      // start: 	$guard (lock) $call releaseMutex (q_base_address ) () 
      //  file nic.linked.aa, line 218
      $T[call_stmt_527_sample_start_] 
      $T[call_stmt_527_sample_completed_] 
      $T[call_stmt_527_update_start_] 
      $T[call_stmt_527_update_completed_] 
      // Guard expression
      // lock
      // start: Forward dependencies from lock to transition call_stmt_527_sample_start_
      // done: Forward dependencies from lock to transition call_stmt_527_sample_start_
      // Call input argument 0
      // q_base_address
      // start: Forward dependencies from q_base_address to transition call_stmt_527_sample_start_
      // done: Forward dependencies from q_base_address to transition call_stmt_527_sample_start_
      ;;[call_stmt_527_Sample] 
      {
        $T [crr] $T [cra] 
      }
      ;;[call_stmt_527_Update] 
      {
        $T [ccr] $T [cca] 
      }
      call_stmt_527_sample_start_ &-> (call_stmt_527_Sample)
      call_stmt_527_sample_completed_ <-& (call_stmt_527_Sample)
      call_stmt_527_sample_completed_ &-> ($null)
      call_stmt_527_update_start_ &-> (call_stmt_527_Update)
      call_stmt_527_update_completed_ <-& (call_stmt_527_Update)
      // end: 	$guard (lock) $call releaseMutex (q_base_address ) () 
      // start:  	status := q_empty $buffering 1// bits of buffering = 1. 
      //  file nic.linked.aa, line 219
      $T[assign_stmt_530_sample_start_] 
      $T[assign_stmt_530_sample_completed_] 
      $T[assign_stmt_530_update_start_] 
      $T[assign_stmt_530_update_completed_] 
      // Source expression
      // q_empty
      // Target expression
      // (as target) status
      // status
      // write to interface object
      // both source and target are implicit: use interlock 
      // Interlock 
      ;;[assign_stmt_530_Sample] 
      {
        $T [req] $T [ack] // interlock-sample.
      }
      ;;[assign_stmt_530_Update] 
      {
        $T [req] $T [ack] // interlock-update.
      }
      assign_stmt_530_sample_start_ &-> (assign_stmt_530_Sample)
      assign_stmt_530_sample_completed_ <-& (assign_stmt_530_Sample)
      assign_stmt_530_sample_completed_ &-> ($null)
      assign_stmt_530_update_start_ &-> (assign_stmt_530_Update)
      assign_stmt_530_update_completed_ <-& (assign_stmt_530_Update)
      // start: Forward dependencies from q_empty to transition assign_stmt_530_sample_start_
      // done: Forward dependencies from q_empty to transition assign_stmt_530_sample_start_
      // start: WAR dependencies for status
      // done: WAR dependencies for status
      // status
      // write to interface object
      // end:  	status := q_empty $buffering 1// bits of buffering = 1. 
      // load-store dependencies..
      // pipe read/write dependencies for pipe MEMORY_TO_NIC_RESPONSE
      // read-dependencies for pipe MEMORY_TO_NIC_RESPONSE
      // write-dependencies for pipe MEMORY_TO_NIC_RESPONSE
      // signal write dependencies for MEMORY_TO_NIC_RESPONSE
      // pipe read/write dependencies for pipe NIC_TO_MEMORY_REQUEST
      // read-dependencies for pipe NIC_TO_MEMORY_REQUEST
      // write-dependencies for pipe NIC_TO_MEMORY_REQUEST
      // signal write dependencies for NIC_TO_MEMORY_REQUEST
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %popFromQueue
    //  file nic.linked.aa, line 203
    // 	$guard (lock) $call acquireMutex (q_base_address ) (m_ok ) 
    //  file nic.linked.aa, line 208
    // 	$call getQueuePointers (q_base_address ) (write_pointer read_pointer ) 
    //  file nic.linked.aa, line 210
    // (QUEUE_SIZE_MASK - 1 )
    $constant $W[SUB_u32_u32_496_wire_constant] : $int<32> := _b00000000000000000000000000000010// 2
    // ( $mux round_off 0   (read_pointer + 1 ) ) 
    // 0 
    $constant $W[konst_501_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // 1 
    $constant $W[konst_503_wire_constant] : $int<32> := _b00000000000000000000000000000001// 1
    // 	$guard (~q_empty) $call getQueueElement (q_base_address read_pointer ) (q_r_data ) 
    //  file nic.linked.aa, line 214
    // 	$guard (~q_empty) $call setQueuePointers (q_base_address write_pointer next_rp ) () 
    //  file nic.linked.aa, line 215
    // 	$guard (lock) $call releaseMutex (q_base_address ) () 
    //  file nic.linked.aa, line 218
    // 	$guard (lock) $call acquireMutex (q_base_address ) (m_ok ) 
    //  file nic.linked.aa, line 208
    // m_ok
    $W[m_ok_481] : $int<1>
    // 	$call getQueuePointers (q_base_address ) (write_pointer read_pointer ) 
    //  file nic.linked.aa, line 210
    // write_pointer
    $W[write_pointer_486] : $int<32>
    // read_pointer
    $W[read_pointer_486] : $int<32>
    // 	$volatile q_empty := (write_pointer == read_pointer) $buffering 1
    //  file nic.linked.aa, line 211
    // q_empty
    $W[q_empty_491] : $int<1>
    // 	$volatile round_off := (read_pointer == (QUEUE_SIZE_MASK - 1 )) $buffering 1
    //  file nic.linked.aa, line 212
    // round_off
    $W[round_off_498] : $int<1>
    // 	$volatile next_rp := ( $mux round_off 0   (read_pointer + 1 ) )  $buffering 1
    //  file nic.linked.aa, line 213
    // (read_pointer + 1 )
    $intermediate $W[ADD_u32_u32_504_wire] : $int<32>
    // next_rp
    $W[next_rp_506] : $int<32>
    // 	$guard (~q_empty) $call getQueueElement (q_base_address read_pointer ) (q_r_data ) 
    //  file nic.linked.aa, line 214
    // q_r_data
    // 	$guard (~q_empty) $call setQueuePointers (q_base_address write_pointer next_rp ) () 
    //  file nic.linked.aa, line 215
    // 	$guard (lock) $call releaseMutex (q_base_address ) () 
    //  file nic.linked.aa, line 218
    // 	status := q_empty $buffering 1// bits of buffering = 1. 
    //  file nic.linked.aa, line 219
    // status
    // 	$guard (lock) $call acquireMutex (q_base_address ) (m_ok ) 
    //  file nic.linked.aa, line 208
    $call [call_stmt_481_call] $module acquireMutex(q_base_address) (m_ok_481) $guard ( lock )  
    $delay call_stmt_481_call 4
    $buffering  $in call_stmt_481_call q_base_address 1
    $buffering  $out call_stmt_481_call m_ok_481 1
    // 	$call getQueuePointers (q_base_address ) (write_pointer read_pointer ) 
    //  file nic.linked.aa, line 210
    $call [call_stmt_486_call] $module getQueuePointers(q_base_address) (write_pointer_486 read_pointer_486)  
    $delay call_stmt_486_call 4
    $buffering  $in call_stmt_486_call q_base_address 1
    $buffering  $out call_stmt_486_call write_pointer_486 1
    $buffering  $out call_stmt_486_call read_pointer_486 1
    // 	$volatile q_empty := (write_pointer == read_pointer) $buffering 1
    //  file nic.linked.aa, line 211
    // (write_pointer == read_pointer)
    ==[EQ_u32_u1_490_inst] (write_pointer_486 read_pointer_486) (q_empty_491)   $flowthrough 
    $delay EQ_u32_u1_490_inst 0
    // 	$volatile round_off := (read_pointer == (QUEUE_SIZE_MASK - 1 )) $buffering 1
    //  file nic.linked.aa, line 212
    // (read_pointer == (QUEUE_SIZE_MASK - 1 ))
    ==[EQ_u32_u1_497_inst] (read_pointer_486 SUB_u32_u32_496_wire_constant) (round_off_498)   $flowthrough 
    $delay EQ_u32_u1_497_inst 0
    // 	$volatile next_rp := ( $mux round_off 0   (read_pointer + 1 ) )  $buffering 1
    //  file nic.linked.aa, line 213
    // (read_pointer + 1 )
    +[ADD_u32_u32_504_inst] (read_pointer_486 konst_503_wire_constant) (ADD_u32_u32_504_wire)   $flowthrough 
    $delay ADD_u32_u32_504_inst 0
    // ( $mux round_off 0   (read_pointer + 1 ) ) 
    ? [MUX_505_inst] (round_off_498 konst_501_wire_constant ADD_u32_u32_504_wire) (next_rp_506)  $flowthrough
    // 	$guard (~q_empty) $call getQueueElement (q_base_address read_pointer ) (q_r_data ) 
    //  file nic.linked.aa, line 214
    $call [call_stmt_511_call] $module getQueueElement(q_base_address read_pointer_486) (q_r_data) $guard ( ~ q_empty_491 )  
    $delay call_stmt_511_call 4
    $buffering  $in call_stmt_511_call q_base_address 1
    $buffering  $in call_stmt_511_call read_pointer_486 1
    $buffering  $out call_stmt_511_call q_r_data 1
    // 	$guard (~q_empty) $call setQueuePointers (q_base_address write_pointer next_rp ) () 
    //  file nic.linked.aa, line 215
    $call [call_stmt_516_call] $module setQueuePointers(q_base_address write_pointer_486 next_rp_506) () $guard ( ~ q_empty_491 )  
    $delay call_stmt_516_call 4
    $buffering  $in call_stmt_516_call q_base_address 1
    $buffering  $in call_stmt_516_call write_pointer_486 1
    $buffering  $in call_stmt_516_call next_rp_506 1
    // 	$guard (lock) $call releaseMutex (q_base_address ) () 
    //  file nic.linked.aa, line 218
    $call [call_stmt_527_call] $module releaseMutex(q_base_address) () $guard ( lock )  
    $delay call_stmt_527_call 4
    $buffering  $in call_stmt_527_call q_base_address 1
    // 	status := q_empty $buffering 1// bits of buffering = 1. 
    //  file nic.linked.aa, line 219
    # := [W_status_528_inst] (q_empty_491) (status)    
  }
  // end data-path
  // 	$guard (lock) $call acquireMutex (q_base_address ) (m_ok ) 
  //  file nic.linked.aa, line 208
  // q_base_address
  call_stmt_481_call <=> (call_stmt_481/call_stmt_481_Sample/crr call_stmt_481/call_stmt_481_Update/ccr) (call_stmt_481/call_stmt_481_Sample/cra call_stmt_481/call_stmt_481_Update/cca)
  // 	$call getQueuePointers (q_base_address ) (write_pointer read_pointer ) 
  //  file nic.linked.aa, line 210
  // q_base_address
  call_stmt_486_call <=> (call_stmt_486_to_call_stmt_516/call_stmt_486_Sample/crr call_stmt_486_to_call_stmt_516/call_stmt_486_Update/ccr) (call_stmt_486_to_call_stmt_516/call_stmt_486_Sample/cra call_stmt_486_to_call_stmt_516/call_stmt_486_Update/cca)
  // 	$volatile q_empty := (write_pointer == read_pointer) $buffering 1
  //  file nic.linked.aa, line 211
  // (write_pointer == read_pointer)
  // write_pointer
  // read_pointer
  // 	$volatile round_off := (read_pointer == (QUEUE_SIZE_MASK - 1 )) $buffering 1
  //  file nic.linked.aa, line 212
  // (read_pointer == (QUEUE_SIZE_MASK - 1 ))
  // read_pointer
  // 	$volatile next_rp := ( $mux round_off 0   (read_pointer + 1 ) )  $buffering 1
  //  file nic.linked.aa, line 213
  // round_off
  // (read_pointer + 1 )
  // read_pointer
  // ( $mux round_off 0   (read_pointer + 1 ) ) 
  // 	$guard (~q_empty) $call getQueueElement (q_base_address read_pointer ) (q_r_data ) 
  //  file nic.linked.aa, line 214
  // q_base_address
  // read_pointer
  call_stmt_511_call <=> (call_stmt_486_to_call_stmt_516/call_stmt_511_Sample/crr call_stmt_486_to_call_stmt_516/call_stmt_511_Update/ccr) (call_stmt_486_to_call_stmt_516/call_stmt_511_Sample/cra call_stmt_486_to_call_stmt_516/call_stmt_511_Update/cca)
  // 	$guard (~q_empty) $call setQueuePointers (q_base_address write_pointer next_rp ) () 
  //  file nic.linked.aa, line 215
  // q_base_address
  // write_pointer
  // next_rp
  call_stmt_516_call <=> (call_stmt_486_to_call_stmt_516/call_stmt_516_Sample/crr call_stmt_486_to_call_stmt_516/call_stmt_516_Update/ccr) (call_stmt_486_to_call_stmt_516/call_stmt_516_Sample/cra call_stmt_486_to_call_stmt_516/call_stmt_516_Update/cca)
  // 	$guard (lock) $call releaseMutex (q_base_address ) () 
  //  file nic.linked.aa, line 218
  // q_base_address
  call_stmt_527_call <=> (call_stmt_527_to_assign_stmt_530/call_stmt_527_Sample/crr call_stmt_527_to_assign_stmt_530/call_stmt_527_Update/ccr) (call_stmt_527_to_assign_stmt_530/call_stmt_527_Sample/cra call_stmt_527_to_assign_stmt_530/call_stmt_527_Update/cca)
  // 	status := q_empty $buffering 1// bits of buffering = 1. 
  //  file nic.linked.aa, line 219
  // q_empty
  W_status_528_inst <=> (call_stmt_527_to_assign_stmt_530/assign_stmt_530_Sample/req call_stmt_527_to_assign_stmt_530/assign_stmt_530_Update/req) (call_stmt_527_to_assign_stmt_530/assign_stmt_530_Sample/ack call_stmt_527_to_assign_stmt_530/assign_stmt_530_Update/ack)
}
$module [writeEthernetHeaderToMem] 
{
  $in buf_pointer:$int<36>
  // can point into 
  $out buf_position:$int<36>
  // can point into 
  // pipe-declarations for block %writeEthernetHeaderToMem
  //  file nic.linked.aa, line 221
  // pipe-declarations for block %writeEthernetHeaderToMem%main
  //  file nic.linked.aa, line 226
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    <>[branch_block_stmt_535] // Branch Block  file nic.linked.aa, line 226
    {
      $P [branch_block_stmt_535__entry__]
      branch_block_stmt_535__entry__ <-| ($entry)
      $P [branch_block_stmt_535__exit__]
      branch_block_stmt_535__exit__ |-> ($exit)
      $P [do_while_stmt_536__entry__] 
      $P [do_while_stmt_536__exit__] 
      // do-while-statement  
      //  file nic.linked.aa, line 228
      <o> [do_while_stmt_536]  $depth 15 $buffering 1 
      {
        $P[do_while_stmt_536__entry__] 
        $P[do_while_stmt_536__exit__] 
        $P[loop_back] 
        $P[condition_done] 
        $P[loop_body_done] 
        $pipeline [do_while_stmt_536_loop_body] 
        {
          // Pipelined!
          $T[back_edge_to_loop_body] 
          $T[first_time_through_loop_body] 
          $T[loop_body_start] 
          $T[condition_evaluated] 
          $transitionmerge [entry_tmerge] (back_edge_to_loop_body first_time_through_loop_body) (loop_body_start)
          $entry <-& (loop_body_start)
          $T[aggregated_phi_sample_req] 
          $T[aggregated_phi_sample_ack] 
          $T[aggregated_phi_update_req] 
          $T[aggregated_phi_update_ack] 
          // do not loop-back unless all phi's have used up their triggering tokens.
          condition_evaluated <-& (aggregated_phi_update_ack)
          aggregated_phi_sample_req o<-& (aggregated_phi_update_ack 0)
          // start:  PHI statement phi_stmt_538
          // 			$phi buf_position := 			  (buf_pointer + 8 ) $on   $entry 			  nbuf_position $on   $loopback 
          // type of target is $uint<36>
          $T[phi_stmt_538_sample_start_] 
          $T[phi_stmt_538_sample_completed_] 
          $T[phi_stmt_538_update_start_] 
          $T[phi_stmt_538_update_completed_] 
          $T[phi_stmt_538_sample_start__ps] 
          phi_stmt_538_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_538_sample_completed__ps] 
          phi_stmt_538_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_538_update_start__ps] 
          phi_stmt_538_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_538_update_completed__ps] 
          phi_stmt_538_update_completed_ <-& (phi_stmt_538_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_538_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_538_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_538_update_start_)
          $T[phi_stmt_538_loopback_trigger] 
          phi_stmt_538_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_538_loopback_sample_req] 
          $T[phi_stmt_538_loopback_sample_req_ps] 
          phi_stmt_538_loopback_sample_req <-& (phi_stmt_538_loopback_sample_req_ps)
          phi_stmt_538_loopback_sample_req &-> ($null)
          $T[phi_stmt_538_entry_trigger] 
          phi_stmt_538_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_538_entry_sample_req] 
          $T[phi_stmt_538_entry_sample_req_ps] 
          phi_stmt_538_entry_sample_req <-& (phi_stmt_538_entry_sample_req_ps)
          phi_stmt_538_entry_sample_req &-> ($null)
          phi_stmt_538_update_start_ o<-& (phi_stmt_538_update_completed_ 0)
          phi_stmt_538_sample_start_ o<-& (phi_stmt_538_sample_completed_ 1)
          $T[phi_stmt_538_merged_reqs] 
          $T[phi_stmt_538_phi_mux_ack] 
          $T[phi_stmt_538_phi_mux_ack_ps] 
          phi_stmt_538_phi_mux_ack_ps <-& (phi_stmt_538_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_538_update_completed_)
          $T[ADD_u36_u36_542_sample_start__ps] 
          $T[ADD_u36_u36_542_sample_completed__ps] 
          $T[ADD_u36_u36_542_update_start__ps] 
          $T[ADD_u36_u36_542_update_completed__ps] 
          // source expression in Phi alternative 0
          // (buf_pointer + 8 )
          $T[ADD_u36_u36_542_sample_start_] 
          $T[ADD_u36_u36_542_sample_completed_] 
          $T[ADD_u36_u36_542_update_start_] 
          $T[ADD_u36_u36_542_update_completed_] 
          // buf_pointer
          // start: Forward dependencies from buf_pointer to transition ADD_u36_u36_542_sample_start_
          // done: Forward dependencies from buf_pointer to transition ADD_u36_u36_542_sample_start_
          ;;[ADD_u36_u36_542_Sample] 
          {
            // binary expression 
            $T [rr] $T [ra]  // (split) binary operation 
          }
          ;;[ADD_u36_u36_542_Update] 
          {
            // binary expression 
            $T [cr] $T [ca] // (split) binary operation 
          }
          ADD_u36_u36_542_sample_start_ &-> (ADD_u36_u36_542_Sample)
          ADD_u36_u36_542_sample_completed_ <-& (ADD_u36_u36_542_Sample)
          ADD_u36_u36_542_sample_completed_ &-> ($null)
          ADD_u36_u36_542_update_start_ &-> (ADD_u36_u36_542_Update)
          ADD_u36_u36_542_update_completed_ <-& (ADD_u36_u36_542_Update)
          // RAW reenables for buf_pointer
          // self-release: 
          ADD_u36_u36_542_sample_start_ o<-& (ADD_u36_u36_542_sample_completed_ 1)
          $null &-> (ADD_u36_u36_542_update_start_)
          ADD_u36_u36_542_update_start_ o<-& (ADD_u36_u36_542_update_completed_ 0)
          // Phi start dependency
          ADD_u36_u36_542_sample_start_ <-& (ADD_u36_u36_542_sample_start__ps)
          ADD_u36_u36_542_update_start_ <-& (ADD_u36_u36_542_update_start__ps)
          // RAW reenables for (buf_pointer + 8 )
          // producer  and  consumer are both determined by PHI statements.
          // Phi complete dependency.
          ADD_u36_u36_542_sample_completed__ps <-& (ADD_u36_u36_542_sample_completed_)
          ADD_u36_u36_542_update_completed__ps <-& (ADD_u36_u36_542_update_completed_)
          $T[R_nbuf_position_543_sample_start__ps] 
          $T[R_nbuf_position_543_sample_completed__ps] 
          $T[R_nbuf_position_543_update_start__ps] 
          $T[R_nbuf_position_543_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_nbuf_position_543_sample_start_] 
          $T[R_nbuf_position_543_sample_completed_] 
          $T[R_nbuf_position_543_update_start_] 
          $T[R_nbuf_position_543_update_completed_] 
          ;;[R_nbuf_position_543_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_nbuf_position_543_sample_start_ &-> (R_nbuf_position_543_Sample)
          R_nbuf_position_543_sample_completed_ <-& (R_nbuf_position_543_Sample)
          ;;[R_nbuf_position_543_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_nbuf_position_543_update_start_ &-> (R_nbuf_position_543_Update)
          R_nbuf_position_543_update_completed_ <-& (R_nbuf_position_543_Update)
          // RAW reenables for nbuf_position
          // Phi start dependency for implicit/constant alternative.
          R_nbuf_position_543_sample_start_ <-& (R_nbuf_position_543_sample_start__ps)
          R_nbuf_position_543_update_start_ <-& (R_nbuf_position_543_update_start__ps)
          // Phi complete dependency.
          R_nbuf_position_543_sample_completed__ps <-& (R_nbuf_position_543_sample_completed_)
          R_nbuf_position_543_update_completed__ps <-& (R_nbuf_position_543_update_completed_)
          $phisequencer [ phi_stmt_538_phi_seq] : 
          phi_stmt_538_entry_trigger ADD_u36_u36_542_sample_start__ps ADD_u36_u36_542_sample_completed__ps ADD_u36_u36_542_update_start__ps ADD_u36_u36_542_update_completed__ps phi_stmt_538_loopback_trigger R_nbuf_position_543_sample_start__ps R_nbuf_position_543_sample_completed__ps R_nbuf_position_543_update_start__ps R_nbuf_position_543_update_completed__ps :
          phi_stmt_538_sample_start__ps phi_stmt_538_sample_completed__ps phi_stmt_538_update_start__ps phi_stmt_538_update_completed__ps :
          phi_stmt_538_entry_sample_req_ps phi_stmt_538_loopback_sample_req_ps : 
          phi_stmt_538_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_538
          // start:  PHI statement phi_stmt_544
          // 			$phi I := 			  ($bitcast ($uint<4>) _b0  ) $on   $entry 			  nI $on   $loopback 
          // type of target is $uint<4>
          $T[phi_stmt_544_sample_start_] 
          $T[phi_stmt_544_sample_completed_] 
          $T[phi_stmt_544_update_start_] 
          $T[phi_stmt_544_update_completed_] 
          $T[phi_stmt_544_sample_start__ps] 
          phi_stmt_544_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_544_sample_completed__ps] 
          phi_stmt_544_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_544_update_start__ps] 
          phi_stmt_544_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_544_update_completed__ps] 
          phi_stmt_544_update_completed_ <-& (phi_stmt_544_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_544_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_544_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_544_update_start_)
          $T[phi_stmt_544_loopback_trigger] 
          phi_stmt_544_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_544_loopback_sample_req] 
          $T[phi_stmt_544_loopback_sample_req_ps] 
          phi_stmt_544_loopback_sample_req <-& (phi_stmt_544_loopback_sample_req_ps)
          phi_stmt_544_loopback_sample_req &-> ($null)
          $T[phi_stmt_544_entry_trigger] 
          phi_stmt_544_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_544_entry_sample_req] 
          $T[phi_stmt_544_entry_sample_req_ps] 
          phi_stmt_544_entry_sample_req <-& (phi_stmt_544_entry_sample_req_ps)
          phi_stmt_544_entry_sample_req &-> ($null)
          phi_stmt_544_update_start_ o<-& (phi_stmt_544_update_completed_ 0)
          phi_stmt_544_sample_start_ o<-& (phi_stmt_544_sample_completed_ 1)
          $T[phi_stmt_544_merged_reqs] 
          $T[phi_stmt_544_phi_mux_ack] 
          $T[phi_stmt_544_phi_mux_ack_ps] 
          phi_stmt_544_phi_mux_ack_ps <-& (phi_stmt_544_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_544_update_completed_)
          $T[type_cast_547_sample_start__ps] 
          $T[type_cast_547_sample_completed__ps] 
          $T[type_cast_547_update_start__ps] 
          $T[type_cast_547_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[type_cast_547_sample_start_] 
          $T[type_cast_547_sample_completed_] 
          type_cast_547_sample_completed_ <-& (type_cast_547_sample_start_)
          $T[type_cast_547_update_start_] 
          $T [type_cast_547_update_completed_] $delay 
          type_cast_547_update_completed_ <-& (type_cast_547_update_start_)
          // Phi start dependency for implicit/constant alternative.
          type_cast_547_sample_start_ <-& (type_cast_547_sample_start__ps)
          type_cast_547_update_start_ <-& (type_cast_547_update_start__ps)
          // Phi complete dependency.
          type_cast_547_sample_completed__ps <-& (type_cast_547_sample_completed_)
          type_cast_547_update_completed__ps <-& (type_cast_547_update_completed_)
          $T[R_nI_548_sample_start__ps] 
          $T[R_nI_548_sample_completed__ps] 
          $T[R_nI_548_update_start__ps] 
          $T[R_nI_548_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_nI_548_sample_start_] 
          $T[R_nI_548_sample_completed_] 
          $T[R_nI_548_update_start_] 
          $T[R_nI_548_update_completed_] 
          ;;[R_nI_548_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_nI_548_sample_start_ &-> (R_nI_548_Sample)
          R_nI_548_sample_completed_ <-& (R_nI_548_Sample)
          ;;[R_nI_548_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_nI_548_update_start_ &-> (R_nI_548_Update)
          R_nI_548_update_completed_ <-& (R_nI_548_Update)
          // RAW reenables for nI
          // Phi start dependency for implicit/constant alternative.
          R_nI_548_sample_start_ <-& (R_nI_548_sample_start__ps)
          R_nI_548_update_start_ <-& (R_nI_548_update_start__ps)
          // Phi complete dependency.
          R_nI_548_sample_completed__ps <-& (R_nI_548_sample_completed_)
          R_nI_548_update_completed__ps <-& (R_nI_548_update_completed_)
          $phisequencer [ phi_stmt_544_phi_seq] : 
          phi_stmt_544_entry_trigger type_cast_547_sample_start__ps type_cast_547_sample_completed__ps type_cast_547_update_start__ps type_cast_547_update_completed__ps phi_stmt_544_loopback_trigger R_nI_548_sample_start__ps R_nI_548_sample_completed__ps R_nI_548_update_start__ps R_nI_548_update_completed__ps :
          phi_stmt_544_sample_start__ps phi_stmt_544_sample_completed__ps phi_stmt_544_update_start__ps phi_stmt_544_update_completed__ps :
          phi_stmt_544_entry_sample_req_ps phi_stmt_544_loopback_sample_req_ps : 
          phi_stmt_544_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_544
          // start:  single source PHI statement phi_stmt_549
          // 			$phi ethernet_header := 			  nic_rx_to_header $on   $entry ,   $loopback 
          // type of target is $uint<73>
          $T[phi_stmt_549_sample_start_] 
          $T[phi_stmt_549_sample_completed_] 
          $T[phi_stmt_549_update_start_] 
          $T[phi_stmt_549_update_completed_] 
          aggregated_phi_sample_req <-& (phi_stmt_549_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_549_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_549_update_start_)
          // non-implicit source expression in single-source phi
          // nic_rx_to_header
          $T[RPIPE_nic_rx_to_header_551_sample_start_] 
          $T[RPIPE_nic_rx_to_header_551_sample_completed_] 
          $T[RPIPE_nic_rx_to_header_551_update_start_] 
          $T[RPIPE_nic_rx_to_header_551_update_completed_] 
          ;;[RPIPE_nic_rx_to_header_551_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_nic_rx_to_header_551_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_nic_rx_to_header_551_sample_start_ &-> (RPIPE_nic_rx_to_header_551_Sample)
          RPIPE_nic_rx_to_header_551_sample_completed_ <-& (RPIPE_nic_rx_to_header_551_Sample)
          RPIPE_nic_rx_to_header_551_update_start_ <-& (RPIPE_nic_rx_to_header_551_sample_completed_)
          RPIPE_nic_rx_to_header_551_update_start_ &-> (RPIPE_nic_rx_to_header_551_Update)
          RPIPE_nic_rx_to_header_551_update_completed_ <-& (RPIPE_nic_rx_to_header_551_Update)
          RPIPE_nic_rx_to_header_551_sample_start_ o<-& (RPIPE_nic_rx_to_header_551_update_completed_ 0)
          // RAW reenables for nic_rx_to_header
          // producer  and  consumer are both determined by PHI statements.
          aggregated_phi_sample_req &-> (RPIPE_nic_rx_to_header_551_sample_start_)
          aggregated_phi_sample_ack <-& (RPIPE_nic_rx_to_header_551_sample_completed_)
          aggregated_phi_update_req &-> (RPIPE_nic_rx_to_header_551_update_start_)
          phi_stmt_549_update_completed_ <-& (RPIPE_nic_rx_to_header_551_update_completed_)
          aggregated_phi_update_ack <-& (phi_stmt_549_update_completed_)
          // done: PHI Statement phi_stmt_549
          // start: WAR dependencies for last_bit
          // done: WAR dependencies for last_bit
          // start:  			$volatile last_bit := ( $slice ethernet_header 72 72 )  $buffering 1
          //  file nic.linked.aa, line 238
          // volatile! 
          // Source expression
          // ( $slice ethernet_header 72 72 ) 
          // ethernet_header
          // Target expression
          // (as target) last_bit
          // start: WAR dependencies for last_bit
          // done: WAR dependencies for last_bit
          // end:  			$volatile last_bit := ( $slice ethernet_header 72 72 )  $buffering 1
          // start: WAR dependencies for wdata
          // done: WAR dependencies for wdata
          // start:  			$volatile wdata := ( $slice ethernet_header 71 8 )  $buffering 1
          //  file nic.linked.aa, line 239
          // volatile! 
          // Source expression
          // ( $slice ethernet_header 71 8 ) 
          // ethernet_header
          // Target expression
          // (as target) wdata
          // start: WAR dependencies for wdata
          // done: WAR dependencies for wdata
          // end:  			$volatile wdata := ( $slice ethernet_header 71 8 )  $buffering 1
          // start: WAR dependencies for wkeep
          // done: WAR dependencies for wkeep
          // start:  			$volatile wkeep := ( $slice ethernet_header 7 0 )  $buffering 1
          //  file nic.linked.aa, line 240
          // volatile! 
          // Source expression
          // ( $slice ethernet_header 7 0 ) 
          // ethernet_header
          // Target expression
          // (as target) wkeep
          // start: WAR dependencies for wkeep
          // done: WAR dependencies for wkeep
          // end:  			$volatile wkeep := ( $slice ethernet_header 7 0 )  $buffering 1
          // start: 			$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b0  ) wkeep buf_position wdata ) (ignore_return ) 
          //  file nic.linked.aa, line 241
          $T[call_stmt_576_sample_start_] 
          $T[call_stmt_576_sample_completed_] 
          $T[call_stmt_576_update_start_] 
          $T[call_stmt_576_update_completed_] 
          // Call input argument 0
          // Call input argument 1
          // Call input argument 2
          // wkeep
          // Call input argument 3
          // buf_position
          // Call input argument 4
          // wdata
          // start: Forward dependencies from wkeep to transition call_stmt_576_sample_start_
          call_stmt_576_sample_start_ <-& (phi_stmt_549_update_completed_)
          // done: Forward dependencies from wkeep to transition call_stmt_576_sample_start_
          // RAW reenables for wkeep
          phi_stmt_549_update_start_ o<-& (call_stmt_576_sample_completed_ 0)
          // start: Forward dependencies from buf_position to transition call_stmt_576_sample_start_
          // non-constant expression which depends only on signals/constants?
          // done: Forward dependencies from buf_position to transition call_stmt_576_sample_start_
          // RAW reenables for buf_position
          // start: Forward dependencies from wdata to transition call_stmt_576_sample_start_
          call_stmt_576_sample_start_ <-& (phi_stmt_549_update_completed_)
          // done: Forward dependencies from wdata to transition call_stmt_576_sample_start_
          // RAW reenables for wdata
          phi_stmt_549_update_start_ o<-& (call_stmt_576_sample_completed_ 0)
          ;;[call_stmt_576_Sample] 
          {
            $T [crr] $T [cra] 
          }
          ;;[call_stmt_576_Update] 
          {
            $T [ccr] $T [cca] 
          }
          call_stmt_576_sample_start_ &-> (call_stmt_576_Sample)
          call_stmt_576_sample_completed_ <-& (call_stmt_576_Sample)
          call_stmt_576_sample_completed_ &-> ($null)
          call_stmt_576_update_start_ &-> (call_stmt_576_Update)
          call_stmt_576_update_completed_ <-& (call_stmt_576_Update)
          // Call output argument 0
          // (as target) ignore_return
          // self-release: 
          call_stmt_576_sample_start_ o<-& (call_stmt_576_sample_completed_ 1)
          $null &-> (call_stmt_576_update_start_)
          call_stmt_576_update_start_ o<-& (call_stmt_576_update_completed_ 0)
          // start: WAR dependencies for ignore_return
          // done: WAR dependencies for ignore_return
          // end: 			$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b0  ) wkeep buf_position wdata ) (ignore_return ) 
          // start: WAR dependencies for nI
          // WAR dependency: Read: nI before Write: 			$volatile nI := (I + 1 ) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for nI
          // start:  			$volatile nI := (I + 1 ) $buffering 1
          //  file nic.linked.aa, line 242
          // volatile! 
          // Source expression
          // (I + 1 )
          // I
          // Target expression
          // (as target) nI
          // start: WAR dependencies for nI
          // WAR dependency: Read: nI before Write: 			$volatile nI := (I + 1 ) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for nI
          // end:  			$volatile nI := (I + 1 ) $buffering 1
          // start: WAR dependencies for nbuf_position
          // WAR dependency: Read: nbuf_position before Write: 			$volatile nbuf_position := (buf_position + 8 ) $buffering 1
          // done: WAR dependencies for nbuf_position
          // start:  			$volatile nbuf_position := (buf_position + 8 ) $buffering 1
          //  file nic.linked.aa, line 243
          // volatile! 
          // Source expression
          // (buf_position + 8 )
          // buf_position
          // Target expression
          // (as target) nbuf_position
          // start: WAR dependencies for nbuf_position
          // WAR dependency: Read: nbuf_position before Write: 			$volatile nbuf_position := (buf_position + 8 ) $buffering 1
          // done: WAR dependencies for nbuf_position
          // end:  			$volatile nbuf_position := (buf_position + 8 ) $buffering 1
          // (nI <= 1 )
          // nI
          $T [loop_body_delay_to_condition_start] $delay
          loop_body_start &-> (loop_body_delay_to_condition_start)
          loop_body_delay_to_condition_start &-> (condition_evaluated)
          // start: Forward dependencies from (nI <= 1 ) to transition condition_evaluated
          condition_evaluated <-& (phi_stmt_544_update_completed_)
          // done: Forward dependencies from (nI <= 1 ) to transition condition_evaluated
          condition_evaluated &-> ($null)
          // load-store dependencies..
          // pipe read/write dependencies for pipe MEMORY_TO_NIC_RESPONSE
          // read-dependencies for pipe MEMORY_TO_NIC_RESPONSE
          // write-dependencies for pipe MEMORY_TO_NIC_RESPONSE
          // signal write dependencies for MEMORY_TO_NIC_RESPONSE
          // pipe read/write dependencies for pipe NIC_TO_MEMORY_REQUEST
          // read-dependencies for pipe NIC_TO_MEMORY_REQUEST
          // write-dependencies for pipe NIC_TO_MEMORY_REQUEST
          // signal write dependencies for NIC_TO_MEMORY_REQUEST
          // pipe read/write dependencies for pipe nic_rx_to_header
          // read-dependencies for pipe nic_rx_to_header
          // write-dependencies for pipe nic_rx_to_header
          // signal write dependencies for nic_rx_to_header
        }
        ( first_time_through_loop_body  back_edge_to_loop_body) 
        ( condition_evaluated )
        ;; [loop_exit] 
        {
          $T [ack] 
        }
        ;; [loop_taken] 
        {
          $T [ack] 
        }
        do_while_stmt_536__entry__ <-| ($entry)
        loop_body_done <-| ( do_while_stmt_536_loop_body ) 
        condition_done |-> (loop_exit loop_taken)
        do_while_stmt_536__exit__ |-> ($exit)
        $bind condition_done <= do_while_stmt_536_loop_body : condition_evaluated
        $bind do_while_stmt_536__entry__  => do_while_stmt_536_loop_body : first_time_through_loop_body 
        $bind loop_back  => do_while_stmt_536_loop_body : back_edge_to_loop_body 
        $terminate (loop_exit loop_taken loop_body_done) (loop_back do_while_stmt_536__exit__)
      }
      do_while_stmt_536__entry__ |-> (do_while_stmt_536)
      do_while_stmt_536__exit__ <-| (do_while_stmt_536)
      do_while_stmt_536__entry__ <-| (branch_block_stmt_535__entry__)
      do_while_stmt_536__exit__ |-> (branch_block_stmt_535__exit__)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %writeEthernetHeaderToMem%main%
    //  file nic.linked.aa, line 229
    // constant-object-declarations for block %writeEthernetHeaderToMem%main
    //  file nic.linked.aa, line 226
    // constant-object-declarations for block %writeEthernetHeaderToMem
    //  file nic.linked.aa, line 221
    // constant-declarations for block %writeEthernetHeaderToMem%main
    //  file nic.linked.aa, line 226
    // do-while statement  
    //  file nic.linked.aa, line 228
    // 1 
    $constant $W[konst_589_wire_constant] : $int<4> := _b0001// 1
    // constant-declarations for block %writeEthernetHeaderToMem%main%
    //  file nic.linked.aa, line 229
    // constant-declarations for phi:  			$phi buf_position := 			  (buf_pointer + 8 ) $on   $entry 			  nbuf_position $on   $loopback 
    // type of target is $uint<36>
    //  file nic.linked.aa, line 230
    // 8 
    $constant $W[konst_541_wire_constant] : $int<36> := _b000000000000000000000000000000001000// 8
    // constant-declarations for phi:  			$phi I := 			  ($bitcast ($uint<4>) _b0  ) $on   $entry 			  nI $on   $loopback 
    // type of target is $uint<4>
    //  file nic.linked.aa, line 232
    // ($bitcast ($uint<4>) _b0  )
    $constant $W[type_cast_547_wire_constant] : $int<4> := _b0000// 0
    // constant-declarations for phi:  			$phi ethernet_header := 			  nic_rx_to_header $on   $entry ,   $loopback 
    // type of target is $uint<73>
    //  file nic.linked.aa, line 234
    // 			$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b0  ) wkeep buf_position wdata ) (ignore_return ) 
    //  file nic.linked.aa, line 241
    // ($bitcast ($uint<1>) _b0  )
    $constant $W[type_cast_569_wire_constant] : $int<1> := _b0// 0
    // ($bitcast ($uint<1>) _b0  )
    $constant $W[type_cast_571_wire_constant] : $int<1> := _b0// 0
    // 1 
    $constant $W[konst_579_wire_constant] : $int<4> := _b0001// 1
    // 8 
    $constant $W[konst_584_wire_constant] : $int<36> := _b000000000000000000000000000000001000// 8
    // block %writeEthernetHeaderToMem%main
    //  file nic.linked.aa, line 226
    // do-while statement  
    //  file nic.linked.aa, line 228
    // (nI <= 1 )
    $intermediate $W[ULE_u4_u1_590_wire] : $int<1>
    // merge-statement  
    //  file nic.linked.aa, line 229
    // 			$phi buf_position := 			  (buf_pointer + 8 ) $on   $entry 			  nbuf_position $on   $loopback 
    // type of target is $uint<36>
    //  file nic.linked.aa, line 230
    // (buf_pointer + 8 )
    $intermediate $W[ADD_u36_u36_542_wire] : $int<36>
    $W[nbuf_position_586_543_buffered] : $int<36>
    // buf_position
    // 			$phi I := 			  ($bitcast ($uint<4>) _b0  ) $on   $entry 			  nI $on   $loopback 
    // type of target is $uint<4>
    //  file nic.linked.aa, line 232
    $W[nI_581_548_buffered] : $int<4>
    // I
    $W[I_544] : $int<4>
    // 			$phi ethernet_header := 			  nic_rx_to_header $on   $entry ,   $loopback 
    // type of target is $uint<73>
    //  file nic.linked.aa, line 234
    // nic_rx_to_header
    $W[RPIPE_nic_rx_to_header_551_wire] : $int<73>
    // ethernet_header
    $W[ethernet_header_549] : $int<73>
    // 			$volatile last_bit := ( $slice ethernet_header 72 72 )  $buffering 1
    //  file nic.linked.aa, line 238
    // last_bit
    $W[last_bit_559] : $int<1>
    // 			$volatile wdata := ( $slice ethernet_header 71 8 )  $buffering 1
    //  file nic.linked.aa, line 239
    // wdata
    $W[wdata_563] : $int<64>
    // 			$volatile wkeep := ( $slice ethernet_header 7 0 )  $buffering 1
    //  file nic.linked.aa, line 240
    // wkeep
    $W[wkeep_567] : $int<8>
    // 			$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b0  ) wkeep buf_position wdata ) (ignore_return ) 
    //  file nic.linked.aa, line 241
    // ignore_return
    $W[ignore_return_576] : $int<64>
    // 			$volatile nI := (I + 1 ) $buffering 1
    //  file nic.linked.aa, line 242
    // nI
    $W[nI_581] : $int<4>
    // 			$volatile nbuf_position := (buf_position + 8 ) $buffering 1
    //  file nic.linked.aa, line 243
    // nbuf_position
    $W[nbuf_position_586] : $int<36>
    // datapath-instances for block %writeEthernetHeaderToMem%main
    //  file nic.linked.aa, line 226
    // datapath-instances for do-while  
    //  file nic.linked.aa, line 228
    // (nI <= 1 )
    <=[ULE_u4_u1_590_inst] (nI_581 konst_589_wire_constant) (ULE_u4_u1_590_wire)   $flowthrough 
    $delay ULE_u4_u1_590_inst 0
    ==0? [do_while_stmt_536_branch] (ULE_u4_u1_590_wire)
    $flowthrough
    // data-path instances for merge  
    //  file nic.linked.aa, line 229
    // 			$phi buf_position := 			  (buf_pointer + 8 ) $on   $entry 			  nbuf_position $on   $loopback 
    // type of target is $uint<36>
    //  file nic.linked.aa, line 230
    // (buf_pointer + 8 )
    +[ADD_u36_u36_542_inst] (buf_pointer konst_541_wire_constant) (ADD_u36_u36_542_wire)   
    $buffering  $out ADD_u36_u36_542_inst ADD_u36_u36_542_wire 1
    $delay ADD_u36_u36_542_inst 1
    # := [nbuf_position_586_543_buf] (nbuf_position_586) (nbuf_position_586_543_buffered)    
    $buffering $out nbuf_position_586_543_buf nbuf_position_586_543_buffered  1
    # $phi [phi_stmt_538] (ADD_u36_u36_542_wire nbuf_position_586_543_buffered) ( buf_position ) 
    // $buffering  $out phi_stmt_538 buf_position 2
    // 			$phi I := 			  ($bitcast ($uint<4>) _b0  ) $on   $entry 			  nI $on   $loopback 
    // type of target is $uint<4>
    //  file nic.linked.aa, line 232
    # := [nI_581_548_buf] (nI_581) (nI_581_548_buffered)    
    $buffering $out nI_581_548_buf nI_581_548_buffered  1
    # $phi [phi_stmt_544] (type_cast_547_wire_constant nI_581_548_buffered) ( I_544 ) 
    // $buffering  $out phi_stmt_544 I_544 2
    // 			$phi ethernet_header := 			  nic_rx_to_header $on   $entry ,   $loopback 
    // type of target is $uint<73>
    //  file nic.linked.aa, line 234
    // nic_rx_to_header
    $ioport $in [RPIPE_nic_rx_to_header_551_inst] (nic_rx_to_header) (RPIPE_nic_rx_to_header_551_wire) 
    $buffering $out RPIPE_nic_rx_to_header_551_inst RPIPE_nic_rx_to_header_551_wire 1
    # := [ssrc_phi_stmt_549] (RPIPE_nic_rx_to_header_551_wire) (ethernet_header_549)    $flowthrough 
    // 			$volatile last_bit := ( $slice ethernet_header 72 72 )  $buffering 1
    //  file nic.linked.aa, line 238
    // ( $slice ethernet_header 72 72 ) 
    [:] [slice_558_inst] (ethernet_header_549 72 72) (last_bit_559)  $flowthrough
    $delay slice_558_inst 0
    // 			$volatile wdata := ( $slice ethernet_header 71 8 )  $buffering 1
    //  file nic.linked.aa, line 239
    // ( $slice ethernet_header 71 8 ) 
    [:] [slice_562_inst] (ethernet_header_549 71 8) (wdata_563)  $flowthrough
    $delay slice_562_inst 0
    // 			$volatile wkeep := ( $slice ethernet_header 7 0 )  $buffering 1
    //  file nic.linked.aa, line 240
    // ( $slice ethernet_header 7 0 ) 
    [:] [slice_566_inst] (ethernet_header_549 7 0) (wkeep_567)  $flowthrough
    $delay slice_566_inst 0
    // 			$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b0  ) wkeep buf_position wdata ) (ignore_return ) 
    //  file nic.linked.aa, line 241
    $call [call_stmt_576_call] $module accessMemory(type_cast_569_wire_constant type_cast_571_wire_constant wkeep_567 buf_position wdata_563) (ignore_return_576)  
    $delay call_stmt_576_call 4
    $buffering  $in call_stmt_576_call type_cast_569_wire_constant 1
    $buffering  $in call_stmt_576_call type_cast_571_wire_constant 1
    $buffering  $in call_stmt_576_call wkeep_567 1
    $buffering  $in call_stmt_576_call buf_position 1
    $buffering  $in call_stmt_576_call wdata_563 1
    $buffering  $out call_stmt_576_call ignore_return_576 1
    // 			$volatile nI := (I + 1 ) $buffering 1
    //  file nic.linked.aa, line 242
    // (I + 1 )
    +[ADD_u4_u4_580_inst] (I_544 konst_579_wire_constant) (nI_581)   $flowthrough 
    $delay ADD_u4_u4_580_inst 0
    // 			$volatile nbuf_position := (buf_position + 8 ) $buffering 1
    //  file nic.linked.aa, line 243
    // (buf_position + 8 )
    +[ADD_u36_u36_585_inst] (buf_position konst_584_wire_constant) (nbuf_position_586)   $flowthrough 
    $delay ADD_u36_u36_585_inst 0
  }
  // end data-path
  // CP-DP links for do-while  do_while_stmt_536
  //  file nic.linked.aa, line 228
  phi_stmt_538 <=> (branch_block_stmt_535/do_while_stmt_536/do_while_stmt_536_loop_body/phi_stmt_538_entry_sample_req branch_block_stmt_535/do_while_stmt_536/do_while_stmt_536_loop_body/phi_stmt_538_loopback_sample_req) (branch_block_stmt_535/do_while_stmt_536/do_while_stmt_536_loop_body/phi_stmt_538_phi_mux_ack)
  // (buf_pointer + 8 )
  // buf_pointer
  ADD_u36_u36_542_inst <=> (branch_block_stmt_535/do_while_stmt_536/do_while_stmt_536_loop_body/ADD_u36_u36_542_Sample/rr branch_block_stmt_535/do_while_stmt_536/do_while_stmt_536_loop_body/ADD_u36_u36_542_Update/cr) (branch_block_stmt_535/do_while_stmt_536/do_while_stmt_536_loop_body/ADD_u36_u36_542_Sample/ra branch_block_stmt_535/do_while_stmt_536/do_while_stmt_536_loop_body/ADD_u36_u36_542_Update/ca)
  nbuf_position_586_543_buf <=> (branch_block_stmt_535/do_while_stmt_536/do_while_stmt_536_loop_body/R_nbuf_position_543_Sample/req branch_block_stmt_535/do_while_stmt_536/do_while_stmt_536_loop_body/R_nbuf_position_543_Update/req) (branch_block_stmt_535/do_while_stmt_536/do_while_stmt_536_loop_body/R_nbuf_position_543_Sample/ack branch_block_stmt_535/do_while_stmt_536/do_while_stmt_536_loop_body/R_nbuf_position_543_Update/ack)
  phi_stmt_544 <=> (branch_block_stmt_535/do_while_stmt_536/do_while_stmt_536_loop_body/phi_stmt_544_entry_sample_req branch_block_stmt_535/do_while_stmt_536/do_while_stmt_536_loop_body/phi_stmt_544_loopback_sample_req) (branch_block_stmt_535/do_while_stmt_536/do_while_stmt_536_loop_body/phi_stmt_544_phi_mux_ack)
  nI_581_548_buf <=> (branch_block_stmt_535/do_while_stmt_536/do_while_stmt_536_loop_body/R_nI_548_Sample/req branch_block_stmt_535/do_while_stmt_536/do_while_stmt_536_loop_body/R_nI_548_Update/req) (branch_block_stmt_535/do_while_stmt_536/do_while_stmt_536_loop_body/R_nI_548_Sample/ack branch_block_stmt_535/do_while_stmt_536/do_while_stmt_536_loop_body/R_nI_548_Update/ack)
  // nic_rx_to_header
  RPIPE_nic_rx_to_header_551_inst <=> (branch_block_stmt_535/do_while_stmt_536/do_while_stmt_536_loop_body/RPIPE_nic_rx_to_header_551_Sample/rr branch_block_stmt_535/do_while_stmt_536/do_while_stmt_536_loop_body/RPIPE_nic_rx_to_header_551_Update/cr) (branch_block_stmt_535/do_while_stmt_536/do_while_stmt_536_loop_body/RPIPE_nic_rx_to_header_551_Sample/ra branch_block_stmt_535/do_while_stmt_536/do_while_stmt_536_loop_body/RPIPE_nic_rx_to_header_551_Update/ca)
  // 			$volatile last_bit := ( $slice ethernet_header 72 72 )  $buffering 1
  //  file nic.linked.aa, line 238
  // ethernet_header
  // 			$volatile wdata := ( $slice ethernet_header 71 8 )  $buffering 1
  //  file nic.linked.aa, line 239
  // ethernet_header
  // 			$volatile wkeep := ( $slice ethernet_header 7 0 )  $buffering 1
  //  file nic.linked.aa, line 240
  // ethernet_header
  // 			$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b0  ) wkeep buf_position wdata ) (ignore_return ) 
  //  file nic.linked.aa, line 241
  // wkeep
  // buf_position
  // wdata
  call_stmt_576_call <=> (branch_block_stmt_535/do_while_stmt_536/do_while_stmt_536_loop_body/call_stmt_576_Sample/crr branch_block_stmt_535/do_while_stmt_536/do_while_stmt_536_loop_body/call_stmt_576_Update/ccr) (branch_block_stmt_535/do_while_stmt_536/do_while_stmt_536_loop_body/call_stmt_576_Sample/cra branch_block_stmt_535/do_while_stmt_536/do_while_stmt_536_loop_body/call_stmt_576_Update/cca)
  // 			$volatile nI := (I + 1 ) $buffering 1
  //  file nic.linked.aa, line 242
  // (I + 1 )
  // I
  // 			$volatile nbuf_position := (buf_position + 8 ) $buffering 1
  //  file nic.linked.aa, line 243
  // (buf_position + 8 )
  // buf_position
  // (nI <= 1 )
  // nI
  do_while_stmt_536_branch <=> (branch_block_stmt_535/do_while_stmt_536/do_while_stmt_536_loop_body/condition_evaluated) (branch_block_stmt_535/do_while_stmt_536/loop_exit/ack branch_block_stmt_535/do_while_stmt_536/loop_taken/ack)
  $attribute delay => "4"
}
$module [writePayloadToMem] 
{
  $in base_buf_pointer:$int<36>
  // can point into 
  buf_pointer:$int<36>
  // can point into 
  $out packet_size_32:$int<8>
  // can point into 
  bad_packet_identifier:$int<1>
  // can point into 
  last_keep:$int<8>
  // can point into 
  // pipe-declarations for block %writePayloadToMem
  //  file nic.linked.aa, line 248
  // pipe-declarations for block %writePayloadToMem%loop
  //  file nic.linked.aa, line 253
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    <>[branch_block_stmt_599] // Branch Block  file nic.linked.aa, line 253
    {
      $P [branch_block_stmt_599__entry__]
      branch_block_stmt_599__entry__ <-| ($entry)
      $P [branch_block_stmt_599__exit__]
      branch_block_stmt_599__exit__ |-> ($exit)
      $P [do_while_stmt_600__entry__] 
      $P [do_while_stmt_600__exit__] 
      // do-while-statement  
      //  file nic.linked.aa, line 255
      <o> [do_while_stmt_600]  $depth 15 $buffering 1 
      {
        $P[do_while_stmt_600__entry__] 
        $P[do_while_stmt_600__exit__] 
        $P[loop_back] 
        $P[condition_done] 
        $P[loop_body_done] 
        $pipeline [do_while_stmt_600_loop_body] 
        {
          // Pipelined!
          $T[back_edge_to_loop_body] 
          $T[first_time_through_loop_body] 
          $T[loop_body_start] 
          $T[condition_evaluated] 
          $transitionmerge [entry_tmerge] (back_edge_to_loop_body first_time_through_loop_body) (loop_body_start)
          $entry <-& (loop_body_start)
          $T[aggregated_phi_sample_req] 
          $T[aggregated_phi_sample_ack] 
          $T[aggregated_phi_update_req] 
          $T[aggregated_phi_update_ack] 
          // do not loop-back unless all phi's have used up their triggering tokens.
          condition_evaluated <-& (aggregated_phi_update_ack)
          aggregated_phi_sample_req o<-& (aggregated_phi_update_ack 0)
          // start:  PHI statement phi_stmt_602
          // 			$phi buf_position := 			  (buf_pointer + 8 ) $on   $entry 			  (buf_position + 8 ) $on   $loopback 
          // type of target is $uint<36>
          $T[phi_stmt_602_sample_start_] 
          $T[phi_stmt_602_sample_completed_] 
          $T[phi_stmt_602_update_start_] 
          $T[phi_stmt_602_update_completed_] 
          $T[phi_stmt_602_sample_start__ps] 
          phi_stmt_602_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_602_sample_completed__ps] 
          phi_stmt_602_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_602_update_start__ps] 
          phi_stmt_602_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_602_update_completed__ps] 
          phi_stmt_602_update_completed_ <-& (phi_stmt_602_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_602_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_602_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_602_update_start_)
          $T[phi_stmt_602_loopback_trigger] 
          phi_stmt_602_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_602_loopback_sample_req] 
          $T[phi_stmt_602_loopback_sample_req_ps] 
          phi_stmt_602_loopback_sample_req <-& (phi_stmt_602_loopback_sample_req_ps)
          phi_stmt_602_loopback_sample_req &-> ($null)
          $T[phi_stmt_602_entry_trigger] 
          phi_stmt_602_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_602_entry_sample_req] 
          $T[phi_stmt_602_entry_sample_req_ps] 
          phi_stmt_602_entry_sample_req <-& (phi_stmt_602_entry_sample_req_ps)
          phi_stmt_602_entry_sample_req &-> ($null)
          phi_stmt_602_update_start_ o<-& (phi_stmt_602_update_completed_ 0)
          phi_stmt_602_sample_start_ o<-& (phi_stmt_602_sample_completed_ 1)
          $T[phi_stmt_602_merged_reqs] 
          $T[phi_stmt_602_phi_mux_ack] 
          $T[phi_stmt_602_phi_mux_ack_ps] 
          phi_stmt_602_phi_mux_ack_ps <-& (phi_stmt_602_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_602_update_completed_)
          $T[ADD_u36_u36_606_sample_start__ps] 
          $T[ADD_u36_u36_606_sample_completed__ps] 
          $T[ADD_u36_u36_606_update_start__ps] 
          $T[ADD_u36_u36_606_update_completed__ps] 
          // source expression in Phi alternative 0
          // (buf_pointer + 8 )
          $T[ADD_u36_u36_606_sample_start_] 
          $T[ADD_u36_u36_606_sample_completed_] 
          $T[ADD_u36_u36_606_update_start_] 
          $T[ADD_u36_u36_606_update_completed_] 
          // buf_pointer
          // start: Forward dependencies from buf_pointer to transition ADD_u36_u36_606_sample_start_
          // done: Forward dependencies from buf_pointer to transition ADD_u36_u36_606_sample_start_
          ;;[ADD_u36_u36_606_Sample] 
          {
            // binary expression 
            $T [rr] $T [ra]  // (split) binary operation 
          }
          ;;[ADD_u36_u36_606_Update] 
          {
            // binary expression 
            $T [cr] $T [ca] // (split) binary operation 
          }
          ADD_u36_u36_606_sample_start_ &-> (ADD_u36_u36_606_Sample)
          ADD_u36_u36_606_sample_completed_ <-& (ADD_u36_u36_606_Sample)
          ADD_u36_u36_606_sample_completed_ &-> ($null)
          ADD_u36_u36_606_update_start_ &-> (ADD_u36_u36_606_Update)
          ADD_u36_u36_606_update_completed_ <-& (ADD_u36_u36_606_Update)
          // RAW reenables for buf_pointer
          // self-release: 
          ADD_u36_u36_606_sample_start_ o<-& (ADD_u36_u36_606_sample_completed_ 1)
          $null &-> (ADD_u36_u36_606_update_start_)
          ADD_u36_u36_606_update_start_ o<-& (ADD_u36_u36_606_update_completed_ 0)
          // Phi start dependency
          ADD_u36_u36_606_sample_start_ <-& (ADD_u36_u36_606_sample_start__ps)
          ADD_u36_u36_606_update_start_ <-& (ADD_u36_u36_606_update_start__ps)
          // RAW reenables for (buf_pointer + 8 )
          // producer  and  consumer are both determined by PHI statements.
          // Phi complete dependency.
          ADD_u36_u36_606_sample_completed__ps <-& (ADD_u36_u36_606_sample_completed_)
          ADD_u36_u36_606_update_completed__ps <-& (ADD_u36_u36_606_update_completed_)
          $T[ADD_u36_u36_609_sample_start__ps] 
          $T[ADD_u36_u36_609_sample_completed__ps] 
          $T[ADD_u36_u36_609_update_start__ps] 
          $T[ADD_u36_u36_609_update_completed__ps] 
          // source expression in Phi alternative 1
          // (buf_position + 8 )
          $T[ADD_u36_u36_609_sample_start_] 
          $T[ADD_u36_u36_609_sample_completed_] 
          $T[ADD_u36_u36_609_update_start_] 
          $T[ADD_u36_u36_609_update_completed_] 
          // buf_position
          // start: Forward dependencies from buf_position to transition ADD_u36_u36_609_sample_start_
          // done: Forward dependencies from buf_position to transition ADD_u36_u36_609_sample_start_
          ;;[ADD_u36_u36_609_Sample] 
          {
            // binary expression 
            $T [rr] $T [ra]  // (split) binary operation 
          }
          ;;[ADD_u36_u36_609_Update] 
          {
            // binary expression 
            $T [cr] $T [ca] // (split) binary operation 
          }
          ADD_u36_u36_609_sample_start_ &-> (ADD_u36_u36_609_Sample)
          ADD_u36_u36_609_sample_completed_ <-& (ADD_u36_u36_609_Sample)
          ADD_u36_u36_609_sample_completed_ &-> ($null)
          ADD_u36_u36_609_update_start_ &-> (ADD_u36_u36_609_Update)
          ADD_u36_u36_609_update_completed_ <-& (ADD_u36_u36_609_Update)
          // RAW reenables for buf_position
          // self-release: 
          ADD_u36_u36_609_sample_start_ o<-& (ADD_u36_u36_609_sample_completed_ 1)
          $null &-> (ADD_u36_u36_609_update_start_)
          ADD_u36_u36_609_update_start_ o<-& (ADD_u36_u36_609_update_completed_ 0)
          // Phi start dependency
          ADD_u36_u36_609_sample_start_ <-& (ADD_u36_u36_609_sample_start__ps)
          ADD_u36_u36_609_update_start_ <-& (ADD_u36_u36_609_update_start__ps)
          // RAW reenables for (buf_position + 8 )
          // producer  and  consumer are both determined by PHI statements.
          // Phi complete dependency.
          ADD_u36_u36_609_sample_completed__ps <-& (ADD_u36_u36_609_sample_completed_)
          ADD_u36_u36_609_update_completed__ps <-& (ADD_u36_u36_609_update_completed_)
          $phisequencer [ phi_stmt_602_phi_seq] : 
          phi_stmt_602_entry_trigger ADD_u36_u36_606_sample_start__ps ADD_u36_u36_606_sample_completed__ps ADD_u36_u36_606_update_start__ps ADD_u36_u36_606_update_completed__ps phi_stmt_602_loopback_trigger ADD_u36_u36_609_sample_start__ps ADD_u36_u36_609_sample_completed__ps ADD_u36_u36_609_update_start__ps ADD_u36_u36_609_update_completed__ps :
          phi_stmt_602_sample_start__ps phi_stmt_602_sample_completed__ps phi_stmt_602_update_start__ps phi_stmt_602_update_completed__ps :
          phi_stmt_602_entry_sample_req_ps phi_stmt_602_loopback_sample_req_ps : 
          phi_stmt_602_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_602
          // start:  single source PHI statement phi_stmt_610
          // 			$phi payload_data := 			  nic_rx_to_packet $on   $entry ,   $loopback 
          // type of target is $uint<73>
          $T[phi_stmt_610_sample_start_] 
          $T[phi_stmt_610_sample_completed_] 
          $T[phi_stmt_610_update_start_] 
          $T[phi_stmt_610_update_completed_] 
          aggregated_phi_sample_req <-& (phi_stmt_610_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_610_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_610_update_start_)
          // non-implicit source expression in single-source phi
          // nic_rx_to_packet
          $T[RPIPE_nic_rx_to_packet_612_sample_start_] 
          $T[RPIPE_nic_rx_to_packet_612_sample_completed_] 
          $T[RPIPE_nic_rx_to_packet_612_update_start_] 
          $T[RPIPE_nic_rx_to_packet_612_update_completed_] 
          ;;[RPIPE_nic_rx_to_packet_612_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_nic_rx_to_packet_612_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_nic_rx_to_packet_612_sample_start_ &-> (RPIPE_nic_rx_to_packet_612_Sample)
          RPIPE_nic_rx_to_packet_612_sample_completed_ <-& (RPIPE_nic_rx_to_packet_612_Sample)
          RPIPE_nic_rx_to_packet_612_update_start_ <-& (RPIPE_nic_rx_to_packet_612_sample_completed_)
          RPIPE_nic_rx_to_packet_612_update_start_ &-> (RPIPE_nic_rx_to_packet_612_Update)
          RPIPE_nic_rx_to_packet_612_update_completed_ <-& (RPIPE_nic_rx_to_packet_612_Update)
          RPIPE_nic_rx_to_packet_612_sample_start_ o<-& (RPIPE_nic_rx_to_packet_612_update_completed_ 0)
          // RAW reenables for nic_rx_to_packet
          // producer  and  consumer are both determined by PHI statements.
          aggregated_phi_sample_req &-> (RPIPE_nic_rx_to_packet_612_sample_start_)
          aggregated_phi_sample_ack <-& (RPIPE_nic_rx_to_packet_612_sample_completed_)
          aggregated_phi_update_req &-> (RPIPE_nic_rx_to_packet_612_update_start_)
          phi_stmt_610_update_completed_ <-& (RPIPE_nic_rx_to_packet_612_update_completed_)
          aggregated_phi_update_ack <-& (phi_stmt_610_update_completed_)
          // done: PHI Statement phi_stmt_610
          // start: WAR dependencies for last_bit
          // done: WAR dependencies for last_bit
          // start:  			$volatile last_bit := ( $slice payload_data 72 72 )  $buffering 1
          //  file nic.linked.aa, line 263
          // volatile! 
          // Source expression
          // ( $slice payload_data 72 72 ) 
          // payload_data
          // Target expression
          // (as target) last_bit
          // start: WAR dependencies for last_bit
          // done: WAR dependencies for last_bit
          // end:  			$volatile last_bit := ( $slice payload_data 72 72 )  $buffering 1
          // start: WAR dependencies for wdata
          // done: WAR dependencies for wdata
          // start:  			$volatile wdata := ( $slice payload_data 71 8 )  $buffering 1
          //  file nic.linked.aa, line 264
          // volatile! 
          // Source expression
          // ( $slice payload_data 71 8 ) 
          // payload_data
          // Target expression
          // (as target) wdata
          // start: WAR dependencies for wdata
          // done: WAR dependencies for wdata
          // end:  			$volatile wdata := ( $slice payload_data 71 8 )  $buffering 1
          // start: WAR dependencies for wkeep
          // done: WAR dependencies for wkeep
          // start:  			$volatile wkeep := ( $slice payload_data 7 0 )  $buffering 1
          //  file nic.linked.aa, line 265
          // volatile! 
          // Source expression
          // ( $slice payload_data 7 0 ) 
          // payload_data
          // Target expression
          // (as target) wkeep
          // start: WAR dependencies for wkeep
          // done: WAR dependencies for wkeep
          // end:  			$volatile wkeep := ( $slice payload_data 7 0 )  $buffering 1
          // start: 			$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b0  ) wkeep buf_position wdata ) (ignore_return ) 
          //  file nic.linked.aa, line 267
          $T[call_stmt_639_sample_start_] 
          $T[call_stmt_639_sample_completed_] 
          $T[call_stmt_639_update_start_] 
          $T[call_stmt_639_update_completed_] 
          // Call input argument 0
          // Call input argument 1
          // Call input argument 2
          // wkeep
          // Call input argument 3
          // buf_position
          // Call input argument 4
          // wdata
          // start: Forward dependencies from wkeep to transition call_stmt_639_sample_start_
          call_stmt_639_sample_start_ <-& (phi_stmt_610_update_completed_)
          // done: Forward dependencies from wkeep to transition call_stmt_639_sample_start_
          // RAW reenables for wkeep
          phi_stmt_610_update_start_ o<-& (call_stmt_639_sample_completed_ 0)
          // start: Forward dependencies from buf_position to transition call_stmt_639_sample_start_
          call_stmt_639_sample_start_ <-& (phi_stmt_602_update_completed_)
          // done: Forward dependencies from buf_position to transition call_stmt_639_sample_start_
          // RAW reenables for buf_position
          phi_stmt_602_update_start_ o<-& (call_stmt_639_sample_completed_ 0)
          // start: Forward dependencies from wdata to transition call_stmt_639_sample_start_
          call_stmt_639_sample_start_ <-& (phi_stmt_610_update_completed_)
          // done: Forward dependencies from wdata to transition call_stmt_639_sample_start_
          // RAW reenables for wdata
          phi_stmt_610_update_start_ o<-& (call_stmt_639_sample_completed_ 0)
          ;;[call_stmt_639_Sample] 
          {
            $T [crr] $T [cra] 
          }
          ;;[call_stmt_639_Update] 
          {
            $T [ccr] $T [cca] 
          }
          call_stmt_639_sample_start_ &-> (call_stmt_639_Sample)
          call_stmt_639_sample_completed_ <-& (call_stmt_639_Sample)
          call_stmt_639_sample_completed_ &-> ($null)
          call_stmt_639_update_start_ &-> (call_stmt_639_Update)
          call_stmt_639_update_completed_ <-& (call_stmt_639_Update)
          // Call output argument 0
          // (as target) ignore_return
          // self-release: 
          call_stmt_639_sample_start_ o<-& (call_stmt_639_sample_completed_ 1)
          $null &-> (call_stmt_639_update_start_)
          call_stmt_639_update_start_ o<-& (call_stmt_639_update_completed_ 0)
          // start: WAR dependencies for ignore_return
          // done: WAR dependencies for ignore_return
          // end: 			$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b0  ) wkeep buf_position wdata ) (ignore_return ) 
          // ( ~ last_bit )
          // last_bit
          $T [loop_body_delay_to_condition_start] $delay
          loop_body_start &-> (loop_body_delay_to_condition_start)
          loop_body_delay_to_condition_start &-> (condition_evaluated)
          // start: Forward dependencies from ( ~ last_bit ) to transition condition_evaluated
          condition_evaluated <-& (phi_stmt_610_update_completed_)
          // done: Forward dependencies from ( ~ last_bit ) to transition condition_evaluated
          condition_evaluated &-> ($null)
          // load-store dependencies..
          // pipe read/write dependencies for pipe MEMORY_TO_NIC_RESPONSE
          // read-dependencies for pipe MEMORY_TO_NIC_RESPONSE
          // write-dependencies for pipe MEMORY_TO_NIC_RESPONSE
          // signal write dependencies for MEMORY_TO_NIC_RESPONSE
          // pipe read/write dependencies for pipe NIC_TO_MEMORY_REQUEST
          // read-dependencies for pipe NIC_TO_MEMORY_REQUEST
          // write-dependencies for pipe NIC_TO_MEMORY_REQUEST
          // signal write dependencies for NIC_TO_MEMORY_REQUEST
          // pipe read/write dependencies for pipe nic_rx_to_packet
          // read-dependencies for pipe nic_rx_to_packet
          // write-dependencies for pipe nic_rx_to_packet
          // signal write dependencies for nic_rx_to_packet
        }
        ( first_time_through_loop_body  back_edge_to_loop_body) 
        ( condition_evaluated )
        ;; [loop_exit] 
        {
          $T [ack] 
        }
        ;; [loop_taken] 
        {
          $T [ack] 
        }
        do_while_stmt_600__entry__ <-| ($entry)
        loop_body_done <-| ( do_while_stmt_600_loop_body ) 
        condition_done |-> (loop_exit loop_taken)
        do_while_stmt_600__exit__ |-> ($exit)
        $bind condition_done <= do_while_stmt_600_loop_body : condition_evaluated
        $bind do_while_stmt_600__entry__  => do_while_stmt_600_loop_body : first_time_through_loop_body 
        $bind loop_back  => do_while_stmt_600_loop_body : back_edge_to_loop_body 
        $terminate (loop_exit loop_taken loop_body_done) (loop_back do_while_stmt_600__exit__)
      }
      do_while_stmt_600__entry__ |-> (do_while_stmt_600)
      do_while_stmt_600__exit__ <-| (do_while_stmt_600)
      do_while_stmt_600__entry__ <-| (branch_block_stmt_599__entry__)
      do_while_stmt_600__exit__ |-> (branch_block_stmt_599__exit__)
    }
    ::[assign_stmt_652_to_assign_stmt_667] 
    {
      // start: WAR dependencies for bad_packet_identifier
      // ignored out-of-scope w_root 			$phi payload_data := 			  nic_rx_to_packet $on   $entry ,   $loopback 
      // type of target is $uint<73>
      // done: WAR dependencies for bad_packet_identifier
      // start:  	$volatile bad_packet_identifier := ((tdata == BAD_PACKET_DATA) & (tkeep == 0 )) $buffering 1
      //  file nic.linked.aa, line 271
      // volatile! 
      // Source expression
      // ((tdata == BAD_PACKET_DATA) & (tkeep == 0 ))
      // (tdata == BAD_PACKET_DATA)
      // tdata
      // (tkeep == 0 )
      // tkeep
      // Target expression
      // (as target) bad_packet_identifier
      // bad_packet_identifier
      // write to interface object
      // start: WAR dependencies for bad_packet_identifier
      // ignored out-of-scope w_root 			$phi payload_data := 			  nic_rx_to_packet $on   $entry ,   $loopback 
      // type of target is $uint<73>
      // done: WAR dependencies for bad_packet_identifier
      // bad_packet_identifier
      // write to interface object
      // end:  	$volatile bad_packet_identifier := ((tdata == BAD_PACKET_DATA) & (tkeep == 0 )) $buffering 1
      // start: WAR dependencies for packet_size_8
      // ignored out-of-scope w_root 			$phi buf_position := 			  (buf_pointer + 8 ) $on   $entry 			  (buf_position + 8 ) $on   $loopback 
      // type of target is $uint<36>
      // ignored out-of-scope w_root  base_buf_pointer : $uint<36> 
      // done: WAR dependencies for packet_size_8
      // start:  	$volatile packet_size_8 := ($bitcast ($uint<8>) (buf_position - base_buf_pointer) ) $buffering 1
      //  file nic.linked.aa, line 272
      // volatile! 
      // Source expression
      // ($bitcast ($uint<8>) (buf_position - base_buf_pointer) )
      // (buf_position - base_buf_pointer)
      // buf_position
      // base_buf_pointer
      // Target expression
      // (as target) packet_size_8
      // start: WAR dependencies for packet_size_8
      // ignored out-of-scope w_root 			$phi buf_position := 			  (buf_pointer + 8 ) $on   $entry 			  (buf_position + 8 ) $on   $loopback 
      // type of target is $uint<36>
      // ignored out-of-scope w_root  base_buf_pointer : $uint<36> 
      // done: WAR dependencies for packet_size_8
      // end:  	$volatile packet_size_8 := ($bitcast ($uint<8>) (buf_position - base_buf_pointer) ) $buffering 1
      // start: WAR dependencies for packet_size_32
      // ignored out-of-scope w_root 			$phi buf_position := 			  (buf_pointer + 8 ) $on   $entry 			  (buf_position + 8 ) $on   $loopback 
      // type of target is $uint<36>
      // ignored out-of-scope w_root  base_buf_pointer : $uint<36> 
      // done: WAR dependencies for packet_size_32
      // start:  	$volatile packet_size_32 := packet_size_8 $buffering 1
      //  file nic.linked.aa, line 273
      // volatile! 
      // Source expression
      // packet_size_8
      // Target expression
      // (as target) packet_size_32
      // packet_size_32
      // write to interface object
      // start: WAR dependencies for packet_size_32
      // ignored out-of-scope w_root 			$phi buf_position := 			  (buf_pointer + 8 ) $on   $entry 			  (buf_position + 8 ) $on   $loopback 
      // type of target is $uint<36>
      // ignored out-of-scope w_root  base_buf_pointer : $uint<36> 
      // done: WAR dependencies for packet_size_32
      // packet_size_32
      // write to interface object
      // end:  	$volatile packet_size_32 := packet_size_8 $buffering 1
      // start: WAR dependencies for last_keep
      // ignored out-of-scope w_root 			$phi payload_data := 			  nic_rx_to_packet $on   $entry ,   $loopback 
      // type of target is $uint<73>
      // done: WAR dependencies for last_keep
      // start:  	$volatile last_keep := tkeep $buffering 1
      //  file nic.linked.aa, line 275
      // volatile! 
      // Source expression
      // tkeep
      // Target expression
      // (as target) last_keep
      // last_keep
      // write to interface object
      // start: WAR dependencies for last_keep
      // ignored out-of-scope w_root 			$phi payload_data := 			  nic_rx_to_packet $on   $entry ,   $loopback 
      // type of target is $uint<73>
      // done: WAR dependencies for last_keep
      // last_keep
      // write to interface object
      // end:  	$volatile last_keep := tkeep $buffering 1
      // load-store dependencies..
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %writePayloadToMem%loop%
    //  file nic.linked.aa, line 257
    // constant-object-declarations for block %writePayloadToMem%loop
    //  file nic.linked.aa, line 253
    // constant-object-declarations for block %writePayloadToMem
    //  file nic.linked.aa, line 248
    // constant-declarations for block %writePayloadToMem%loop
    //  file nic.linked.aa, line 253
    // do-while statement  
    //  file nic.linked.aa, line 255
    // constant-declarations for block %writePayloadToMem%loop%
    //  file nic.linked.aa, line 257
    // constant-declarations for phi:  			$phi buf_position := 			  (buf_pointer + 8 ) $on   $entry 			  (buf_position + 8 ) $on   $loopback 
    // type of target is $uint<36>
    //  file nic.linked.aa, line 258
    // 8 
    $constant $W[konst_605_wire_constant] : $int<36> := _b000000000000000000000000000000001000// 8
    // 8 
    $constant $W[konst_608_wire_constant] : $int<36> := _b000000000000000000000000000000001000// 8
    // constant-declarations for phi:  			$phi payload_data := 			  nic_rx_to_packet $on   $entry ,   $loopback 
    // type of target is $uint<73>
    //  file nic.linked.aa, line 260
    // 			$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b0  ) wkeep buf_position wdata ) (ignore_return ) 
    //  file nic.linked.aa, line 267
    // ($bitcast ($uint<1>) _b0  )
    $constant $W[type_cast_632_wire_constant] : $int<1> := _b0// 0
    // ($bitcast ($uint<1>) _b0  )
    $constant $W[type_cast_634_wire_constant] : $int<1> := _b0// 0
    // BAD_PACKET_DATA
    $constant $W[R_BAD_PACKET_DATA_646_wire_constant] : $int<64> := _b1111111111111111111111111111111111111111111111111111111111111111// -1
    // 0 
    $constant $W[konst_649_wire_constant] : $int<8> := _b00000000// 0
    // block %writePayloadToMem%loop
    //  file nic.linked.aa, line 253
    // do-while statement  
    //  file nic.linked.aa, line 255
    // ( ~ last_bit )
    $intermediate $W[NOT_u1_u1_642_wire] : $int<1>
    // merge-statement  
    //  file nic.linked.aa, line 257
    // 			$phi buf_position := 			  (buf_pointer + 8 ) $on   $entry 			  (buf_position + 8 ) $on   $loopback 
    // type of target is $uint<36>
    //  file nic.linked.aa, line 258
    // (buf_pointer + 8 )
    $intermediate $W[ADD_u36_u36_606_wire] : $int<36>
    // (buf_position + 8 )
    $intermediate $W[ADD_u36_u36_609_wire] : $int<36>
    // buf_position
    $W[buf_position_602] : $int<36>
    // 			$phi payload_data := 			  nic_rx_to_packet $on   $entry ,   $loopback 
    // type of target is $uint<73>
    //  file nic.linked.aa, line 260
    // nic_rx_to_packet
    $W[RPIPE_nic_rx_to_packet_612_wire] : $int<73>
    // payload_data
    $W[payload_data_610] : $int<73>
    // 			$volatile last_bit := ( $slice payload_data 72 72 )  $buffering 1
    //  file nic.linked.aa, line 263
    // last_bit
    $W[last_bit_617] : $int<1>
    // 			$volatile wdata := ( $slice payload_data 71 8 )  $buffering 1
    //  file nic.linked.aa, line 264
    // wdata
    $W[wdata_621] : $int<64>
    // 			$volatile wkeep := ( $slice payload_data 7 0 )  $buffering 1
    //  file nic.linked.aa, line 265
    // wkeep
    $W[wkeep_625] : $int<8>
    // 			$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b0  ) wkeep buf_position wdata ) (ignore_return ) 
    //  file nic.linked.aa, line 267
    // ignore_return
    $W[ignore_return_639] : $int<64>
    // 	$volatile bad_packet_identifier := ((tdata == BAD_PACKET_DATA) & (tkeep == 0 )) $buffering 1
    //  file nic.linked.aa, line 271
    // (tdata == BAD_PACKET_DATA)
    $intermediate $W[EQ_u64_u1_647_wire] : $int<1>
    // (tkeep == 0 )
    $intermediate $W[EQ_u8_u1_650_wire] : $int<1>
    // bad_packet_identifier
    // 	$volatile packet_size_8 := ($bitcast ($uint<8>) (buf_position - base_buf_pointer) ) $buffering 1
    //  file nic.linked.aa, line 272
    // (buf_position - base_buf_pointer)
    $intermediate $W[SUB_u36_u36_656_wire] : $int<36>
    // packet_size_8
    $W[packet_size_8_658] : $int<8>
    // 	$volatile packet_size_32 := packet_size_8 $buffering 1
    //  file nic.linked.aa, line 273
    // packet_size_32
    // 	$volatile last_keep := tkeep $buffering 1
    //  file nic.linked.aa, line 275
    // last_keep
    // datapath-instances for block %writePayloadToMem%loop
    //  file nic.linked.aa, line 253
    // datapath-instances for do-while  
    //  file nic.linked.aa, line 255
    // ( ~ last_bit )
    ~ [NOT_u1_u1_642_inst] (last_bit_617) (NOT_u1_u1_642_wire)   $flowthrough
    $delay NOT_u1_u1_642_inst 0
    ==0? [do_while_stmt_600_branch] (NOT_u1_u1_642_wire)
    $flowthrough
    // data-path instances for merge  
    //  file nic.linked.aa, line 257
    // 			$phi buf_position := 			  (buf_pointer + 8 ) $on   $entry 			  (buf_position + 8 ) $on   $loopback 
    // type of target is $uint<36>
    //  file nic.linked.aa, line 258
    // (buf_pointer + 8 )
    +[ADD_u36_u36_606_inst] (buf_pointer konst_605_wire_constant) (ADD_u36_u36_606_wire)    $fullrate
    $buffering  $out ADD_u36_u36_606_inst ADD_u36_u36_606_wire 1
    $delay ADD_u36_u36_606_inst 1
    // (buf_position + 8 )
    +[ADD_u36_u36_609_inst] (buf_position_602 konst_608_wire_constant) (ADD_u36_u36_609_wire)    $fullrate
    $buffering  $out ADD_u36_u36_609_inst ADD_u36_u36_609_wire 1
    $delay ADD_u36_u36_609_inst 1
    # $phi [phi_stmt_602] (ADD_u36_u36_606_wire ADD_u36_u36_609_wire) ( buf_position_602 ) $fullrate
    // $buffering  $out phi_stmt_602 buf_position_602 2
    // 			$phi payload_data := 			  nic_rx_to_packet $on   $entry ,   $loopback 
    // type of target is $uint<73>
    //  file nic.linked.aa, line 260
    // nic_rx_to_packet
    $ioport $in [RPIPE_nic_rx_to_packet_612_inst] (nic_rx_to_packet) (RPIPE_nic_rx_to_packet_612_wire)  $fullrate 
    $buffering $out RPIPE_nic_rx_to_packet_612_inst RPIPE_nic_rx_to_packet_612_wire 1
    # := [ssrc_phi_stmt_610] (RPIPE_nic_rx_to_packet_612_wire) (payload_data_610)    $flowthrough 
    // 			$volatile last_bit := ( $slice payload_data 72 72 )  $buffering 1
    //  file nic.linked.aa, line 263
    // ( $slice payload_data 72 72 ) 
    [:] [slice_616_inst] (payload_data_610 72 72) (last_bit_617)  $flowthrough
    $delay slice_616_inst 0
    // 			$volatile wdata := ( $slice payload_data 71 8 )  $buffering 1
    //  file nic.linked.aa, line 264
    // ( $slice payload_data 71 8 ) 
    [:] [slice_620_inst] (payload_data_610 71 8) (wdata_621)  $flowthrough
    $delay slice_620_inst 0
    // 			$volatile wkeep := ( $slice payload_data 7 0 )  $buffering 1
    //  file nic.linked.aa, line 265
    // ( $slice payload_data 7 0 ) 
    [:] [slice_624_inst] (payload_data_610 7 0) (wkeep_625)  $flowthrough
    $delay slice_624_inst 0
    // 			$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b0  ) wkeep buf_position wdata ) (ignore_return ) 
    //  file nic.linked.aa, line 267
    $call [call_stmt_639_call] $module accessMemory(type_cast_632_wire_constant type_cast_634_wire_constant wkeep_625 buf_position_602 wdata_621) (ignore_return_639)   $fullrate
    $delay call_stmt_639_call 4
    $buffering  $in call_stmt_639_call type_cast_632_wire_constant 1
    $buffering  $in call_stmt_639_call type_cast_634_wire_constant 1
    $buffering  $in call_stmt_639_call wkeep_625 1
    $buffering  $in call_stmt_639_call buf_position_602 1
    $buffering  $in call_stmt_639_call wdata_621 1
    $buffering  $out call_stmt_639_call ignore_return_639 1
    // 	$volatile bad_packet_identifier := ((tdata == BAD_PACKET_DATA) & (tkeep == 0 )) $buffering 1
    //  file nic.linked.aa, line 271
    // (tdata == BAD_PACKET_DATA)
    ==[EQ_u64_u1_647_inst] (wdata_621 R_BAD_PACKET_DATA_646_wire_constant) (EQ_u64_u1_647_wire)   $flowthrough 
    $delay EQ_u64_u1_647_inst 0
    // (tkeep == 0 )
    ==[EQ_u8_u1_650_inst] (wkeep_625 konst_649_wire_constant) (EQ_u8_u1_650_wire)   $flowthrough 
    $delay EQ_u8_u1_650_inst 0
    // ((tdata == BAD_PACKET_DATA) & (tkeep == 0 ))
    &[AND_u1_u1_651_inst] (EQ_u64_u1_647_wire EQ_u8_u1_650_wire) (bad_packet_identifier)   $flowthrough 
    $delay AND_u1_u1_651_inst 0
    // 	$volatile packet_size_8 := ($bitcast ($uint<8>) (buf_position - base_buf_pointer) ) $buffering 1
    //  file nic.linked.aa, line 272
    // (buf_position - base_buf_pointer)
    -[SUB_u36_u36_656_inst] (buf_position_602 base_buf_pointer) (SUB_u36_u36_656_wire)   $flowthrough 
    $delay SUB_u36_u36_656_inst 0
    // ($bitcast ($uint<8>) (buf_position - base_buf_pointer) )
    # := [type_cast_657_inst] (SUB_u36_u36_656_wire) (packet_size_8_658)   $flowthrough
    $delay type_cast_657_inst 0
    // 	$volatile packet_size_32 := packet_size_8 $buffering 1
    //  file nic.linked.aa, line 273
    # := [W_packet_size_32_659_inst] (packet_size_8_658) (packet_size_32)    $flowthrough 
    // 	$volatile last_keep := tkeep $buffering 1
    //  file nic.linked.aa, line 275
    # := [W_last_keep_665_inst] (wkeep_625) (last_keep)    $flowthrough 
  }
  // end data-path
  // CP-DP links for do-while  do_while_stmt_600
  //  file nic.linked.aa, line 255
  phi_stmt_602 <=> (branch_block_stmt_599/do_while_stmt_600/do_while_stmt_600_loop_body/phi_stmt_602_entry_sample_req branch_block_stmt_599/do_while_stmt_600/do_while_stmt_600_loop_body/phi_stmt_602_loopback_sample_req) (branch_block_stmt_599/do_while_stmt_600/do_while_stmt_600_loop_body/phi_stmt_602_phi_mux_ack)
  // (buf_pointer + 8 )
  // buf_pointer
  ADD_u36_u36_606_inst <=> (branch_block_stmt_599/do_while_stmt_600/do_while_stmt_600_loop_body/ADD_u36_u36_606_Sample/rr branch_block_stmt_599/do_while_stmt_600/do_while_stmt_600_loop_body/ADD_u36_u36_606_Update/cr) (branch_block_stmt_599/do_while_stmt_600/do_while_stmt_600_loop_body/ADD_u36_u36_606_Sample/ra branch_block_stmt_599/do_while_stmt_600/do_while_stmt_600_loop_body/ADD_u36_u36_606_Update/ca)
  // (buf_position + 8 )
  // buf_position
  ADD_u36_u36_609_inst <=> (branch_block_stmt_599/do_while_stmt_600/do_while_stmt_600_loop_body/ADD_u36_u36_609_Sample/rr branch_block_stmt_599/do_while_stmt_600/do_while_stmt_600_loop_body/ADD_u36_u36_609_Update/cr) (branch_block_stmt_599/do_while_stmt_600/do_while_stmt_600_loop_body/ADD_u36_u36_609_Sample/ra branch_block_stmt_599/do_while_stmt_600/do_while_stmt_600_loop_body/ADD_u36_u36_609_Update/ca)
  // nic_rx_to_packet
  RPIPE_nic_rx_to_packet_612_inst <=> (branch_block_stmt_599/do_while_stmt_600/do_while_stmt_600_loop_body/RPIPE_nic_rx_to_packet_612_Sample/rr branch_block_stmt_599/do_while_stmt_600/do_while_stmt_600_loop_body/RPIPE_nic_rx_to_packet_612_Update/cr) (branch_block_stmt_599/do_while_stmt_600/do_while_stmt_600_loop_body/RPIPE_nic_rx_to_packet_612_Sample/ra branch_block_stmt_599/do_while_stmt_600/do_while_stmt_600_loop_body/RPIPE_nic_rx_to_packet_612_Update/ca)
  // 			$volatile last_bit := ( $slice payload_data 72 72 )  $buffering 1
  //  file nic.linked.aa, line 263
  // payload_data
  // 			$volatile wdata := ( $slice payload_data 71 8 )  $buffering 1
  //  file nic.linked.aa, line 264
  // payload_data
  // 			$volatile wkeep := ( $slice payload_data 7 0 )  $buffering 1
  //  file nic.linked.aa, line 265
  // payload_data
  // 			$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b0  ) wkeep buf_position wdata ) (ignore_return ) 
  //  file nic.linked.aa, line 267
  // wkeep
  // buf_position
  // wdata
  call_stmt_639_call <=> (branch_block_stmt_599/do_while_stmt_600/do_while_stmt_600_loop_body/call_stmt_639_Sample/crr branch_block_stmt_599/do_while_stmt_600/do_while_stmt_600_loop_body/call_stmt_639_Update/ccr) (branch_block_stmt_599/do_while_stmt_600/do_while_stmt_600_loop_body/call_stmt_639_Sample/cra branch_block_stmt_599/do_while_stmt_600/do_while_stmt_600_loop_body/call_stmt_639_Update/cca)
  // last_bit
  do_while_stmt_600_branch <=> (branch_block_stmt_599/do_while_stmt_600/do_while_stmt_600_loop_body/condition_evaluated) (branch_block_stmt_599/do_while_stmt_600/loop_exit/ack branch_block_stmt_599/do_while_stmt_600/loop_taken/ack)
  // 	$volatile bad_packet_identifier := ((tdata == BAD_PACKET_DATA) & (tkeep == 0 )) $buffering 1
  //  file nic.linked.aa, line 271
  // ((tdata == BAD_PACKET_DATA) & (tkeep == 0 ))
  // (tdata == BAD_PACKET_DATA)
  // tdata
  // (tkeep == 0 )
  // tkeep
  // 	$volatile packet_size_8 := ($bitcast ($uint<8>) (buf_position - base_buf_pointer) ) $buffering 1
  //  file nic.linked.aa, line 272
  // (buf_position - base_buf_pointer)
  // buf_position
  // base_buf_pointer
  // 	$volatile packet_size_32 := packet_size_8 $buffering 1
  //  file nic.linked.aa, line 273
  // packet_size_8
  // 	$volatile last_keep := tkeep $buffering 1
  //  file nic.linked.aa, line 275
  // tkeep
}
$module [writeControlInformationToMem] 
{
  $in base_buffer_pointer:$int<36>
  // can point into 
  packet_size:$int<8>
  // can point into 
  last_keep:$int<8>
  // can point into 
  // pipe-declarations for block %writeControlInformationToMem
  //  file nic.linked.aa, line 277
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    ::[assign_stmt_678_to_call_stmt_687] 
    {
      // start: WAR dependencies for control_data
      // ignored out-of-scope w_root  packet_size : $uint<8> 
      // ignored out-of-scope w_root  last_keep : $uint<8> 
      // done: WAR dependencies for control_data
      // start:  	$volatile control_data := ($bitcast ($uint<64>) (packet_size && last_keep) ) $buffering 1
      //  file nic.linked.aa, line 282
      // volatile! 
      // Source expression
      // ($bitcast ($uint<64>) (packet_size && last_keep) )
      // (packet_size && last_keep)
      // packet_size
      // last_keep
      // Target expression
      // (as target) control_data
      // start: WAR dependencies for control_data
      // ignored out-of-scope w_root  packet_size : $uint<8> 
      // ignored out-of-scope w_root  last_keep : $uint<8> 
      // done: WAR dependencies for control_data
      // end:  	$volatile control_data := ($bitcast ($uint<64>) (packet_size && last_keep) ) $buffering 1
      // start: 	$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b0  ) FULL_BYTE_MASK base_buffer_pointer control_data ) (ignore_return ) 
      //  file nic.linked.aa, line 283
      $T[call_stmt_687_sample_start_] 
      $T[call_stmt_687_sample_completed_] 
      $T[call_stmt_687_update_start_] 
      $T[call_stmt_687_update_completed_] 
      // Call input argument 0
      // Call input argument 1
      // Call input argument 2
      // Call input argument 3
      // base_buffer_pointer
      // Call input argument 4
      // control_data
      // start: Forward dependencies from base_buffer_pointer to transition call_stmt_687_sample_start_
      // done: Forward dependencies from base_buffer_pointer to transition call_stmt_687_sample_start_
      // start: Forward dependencies from control_data to transition call_stmt_687_sample_start_
      // done: Forward dependencies from control_data to transition call_stmt_687_sample_start_
      ;;[call_stmt_687_Sample] 
      {
        $T [crr] $T [cra] 
      }
      ;;[call_stmt_687_Update] 
      {
        $T [ccr] $T [cca] 
      }
      call_stmt_687_sample_start_ &-> (call_stmt_687_Sample)
      call_stmt_687_sample_completed_ <-& (call_stmt_687_Sample)
      call_stmt_687_sample_completed_ &-> ($null)
      call_stmt_687_update_start_ &-> (call_stmt_687_Update)
      call_stmt_687_update_completed_ <-& (call_stmt_687_Update)
      // Call output argument 0
      // (as target) ignore_return
      // start: WAR dependencies for ignore_return
      // done: WAR dependencies for ignore_return
      // end: 	$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b0  ) FULL_BYTE_MASK base_buffer_pointer control_data ) (ignore_return ) 
      // load-store dependencies..
      // pipe read/write dependencies for pipe MEMORY_TO_NIC_RESPONSE
      // read-dependencies for pipe MEMORY_TO_NIC_RESPONSE
      // write-dependencies for pipe MEMORY_TO_NIC_RESPONSE
      // signal write dependencies for MEMORY_TO_NIC_RESPONSE
      // pipe read/write dependencies for pipe NIC_TO_MEMORY_REQUEST
      // read-dependencies for pipe NIC_TO_MEMORY_REQUEST
      // write-dependencies for pipe NIC_TO_MEMORY_REQUEST
      // signal write dependencies for NIC_TO_MEMORY_REQUEST
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %writeControlInformationToMem
    //  file nic.linked.aa, line 277
    // 	$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b0  ) FULL_BYTE_MASK base_buffer_pointer control_data ) (ignore_return ) 
    //  file nic.linked.aa, line 283
    // ($bitcast ($uint<1>) _b0  )
    $constant $W[type_cast_680_wire_constant] : $int<1> := _b0// 0
    // ($bitcast ($uint<1>) _b0  )
    $constant $W[type_cast_682_wire_constant] : $int<1> := _b0// 0
    // FULL_BYTE_MASK
    $constant $W[R_FULL_BYTE_MASK_683_wire_constant] : $int<8> := _b11111111// 255
    // 	$volatile control_data := ($bitcast ($uint<64>) (packet_size && last_keep) ) $buffering 1
    //  file nic.linked.aa, line 282
    // (packet_size && last_keep)
    $intermediate $W[CONCAT_u8_u16_676_wire] : $int<16>
    // control_data
    $W[control_data_678] : $int<64>
    // 	$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b0  ) FULL_BYTE_MASK base_buffer_pointer control_data ) (ignore_return ) 
    //  file nic.linked.aa, line 283
    // ignore_return
    $W[ignore_return_687] : $int<64>
    // 	$volatile control_data := ($bitcast ($uint<64>) (packet_size && last_keep) ) $buffering 1
    //  file nic.linked.aa, line 282
    // (packet_size && last_keep)
    &&[CONCAT_u8_u16_676_inst] (packet_size last_keep) (CONCAT_u8_u16_676_wire)   $flowthrough 
    $delay CONCAT_u8_u16_676_inst 0
    // ($bitcast ($uint<64>) (packet_size && last_keep) )
    # := [type_cast_677_inst] (CONCAT_u8_u16_676_wire) (control_data_678)   $flowthrough
    $delay type_cast_677_inst 0
    // 	$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b0  ) FULL_BYTE_MASK base_buffer_pointer control_data ) (ignore_return ) 
    //  file nic.linked.aa, line 283
    $call [call_stmt_687_call] $module accessMemory(type_cast_680_wire_constant type_cast_682_wire_constant R_FULL_BYTE_MASK_683_wire_constant base_buffer_pointer control_data_678) (ignore_return_687)  
    $delay call_stmt_687_call 4
    $buffering  $in call_stmt_687_call type_cast_680_wire_constant 1
    $buffering  $in call_stmt_687_call type_cast_682_wire_constant 1
    $buffering  $in call_stmt_687_call R_FULL_BYTE_MASK_683_wire_constant 1
    $buffering  $in call_stmt_687_call base_buffer_pointer 1
    $buffering  $in call_stmt_687_call control_data_678 1
    $buffering  $out call_stmt_687_call ignore_return_687 1
  }
  // end data-path
  // 	$volatile control_data := ($bitcast ($uint<64>) (packet_size && last_keep) ) $buffering 1
  //  file nic.linked.aa, line 282
  // (packet_size && last_keep)
  // packet_size
  // last_keep
  // 	$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b0  ) FULL_BYTE_MASK base_buffer_pointer control_data ) (ignore_return ) 
  //  file nic.linked.aa, line 283
  // base_buffer_pointer
  // control_data
  call_stmt_687_call <=> (assign_stmt_678_to_call_stmt_687/call_stmt_687_Sample/crr assign_stmt_678_to_call_stmt_687/call_stmt_687_Update/ccr) (assign_stmt_678_to_call_stmt_687/call_stmt_687_Sample/cra assign_stmt_678_to_call_stmt_687/call_stmt_687_Update/cca)
}
$pipeline $depth 31 $buffering 1 $module [loadBuffer] 
{
  $in rx_buffer_pointer:$int<36>
  // can point into 
  $out bad_packet_identifier:$int<1>
  // can point into 
  // pipe-declarations for block %loadBuffer
  //  file nic.linked.aa, line 285
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    // pipelined module
    :|:[call_stmt_694_to_call_stmt_705] 
    {
      $T [rx_buffer_pointer_update_enable] 
      $T [rx_buffer_pointer_update_enable_out] 
      rx_buffer_pointer_update_enable &-> (rx_buffer_pointer_update_enable_out)
      $null &-> (rx_buffer_pointer_update_enable)
      $T [bad_packet_identifier_update_enable] 
      $T [bad_packet_identifier_update_enable_in] 
      $null &-> (bad_packet_identifier_update_enable)
      $null <-& (bad_packet_identifier_update_enable_in) 
      $null &-> (bad_packet_identifier_update_enable)
      bad_packet_identifier_update_enable <-& (bad_packet_identifier_update_enable_in) 
      // start: 	$call writeEthernetHeaderToMem (rx_buffer_pointer ) (new_buf_pointer ) 
      //  file nic.linked.aa, line 290
      $T[call_stmt_694_sample_start_] 
      $T[call_stmt_694_sample_completed_] 
      $T[call_stmt_694_update_start_] 
      $T[call_stmt_694_update_completed_] 
      // Call input argument 0
      // rx_buffer_pointer
      // start: Forward dependencies from rx_buffer_pointer to transition call_stmt_694_sample_start_
      call_stmt_694_sample_start_ <-& ($entry)
      // done: Forward dependencies from rx_buffer_pointer to transition call_stmt_694_sample_start_
      // RAW reenables for rx_buffer_pointer
      rx_buffer_pointer_update_enable o<-& (call_stmt_694_sample_completed_ 0)
      ;;[call_stmt_694_Sample] 
      {
        $T [crr] $T [cra] 
      }
      ;;[call_stmt_694_Update] 
      {
        $T [ccr] $T [cca] 
      }
      call_stmt_694_sample_start_ &-> (call_stmt_694_Sample)
      call_stmt_694_sample_completed_ <-& (call_stmt_694_Sample)
      call_stmt_694_sample_completed_ &-> ($null)
      call_stmt_694_update_start_ &-> (call_stmt_694_Update)
      call_stmt_694_update_completed_ <-& (call_stmt_694_Update)
      // Call output argument 0
      // (as target) new_buf_pointer
      // self-release: 
      call_stmt_694_sample_start_ o<-& (call_stmt_694_sample_completed_ 1)
      $null &-> (call_stmt_694_update_start_)
      call_stmt_694_update_start_ o<-& (call_stmt_694_update_completed_ 0)
      // start: WAR dependencies for new_buf_pointer
      // done: WAR dependencies for new_buf_pointer
      // end: 	$call writeEthernetHeaderToMem (rx_buffer_pointer ) (new_buf_pointer ) 
      // start: 	$call writePayloadToMem (rx_buffer_pointer new_buf_pointer ) (packet_size bad_packet_identifier last_keep ) 
      //  file nic.linked.aa, line 291
      $T[call_stmt_700_sample_start_] 
      $T[call_stmt_700_sample_completed_] 
      $T[call_stmt_700_update_start_] 
      $T[call_stmt_700_update_completed_] 
      // Call input argument 0
      // rx_buffer_pointer
      // Call input argument 1
      // new_buf_pointer
      // start: Forward dependencies from rx_buffer_pointer to transition call_stmt_700_sample_start_
      call_stmt_700_sample_start_ <-& ($entry)
      // done: Forward dependencies from rx_buffer_pointer to transition call_stmt_700_sample_start_
      // RAW reenables for rx_buffer_pointer
      rx_buffer_pointer_update_enable o<-& (call_stmt_700_sample_completed_ 0)
      // start: Forward dependencies from new_buf_pointer to transition call_stmt_700_sample_start_
      call_stmt_700_sample_start_ <-& (call_stmt_694_update_completed_)
      // done: Forward dependencies from new_buf_pointer to transition call_stmt_700_sample_start_
      // RAW reenables for new_buf_pointer
      call_stmt_694_update_start_ o<-& (call_stmt_700_sample_completed_ 0)
      ;;[call_stmt_700_Sample] 
      {
        $T [crr] $T [cra] 
      }
      ;;[call_stmt_700_Update] 
      {
        $T [ccr] $T [cca] 
      }
      call_stmt_700_sample_start_ &-> (call_stmt_700_Sample)
      call_stmt_700_sample_completed_ <-& (call_stmt_700_Sample)
      call_stmt_700_sample_completed_ &-> ($null)
      call_stmt_700_update_start_ &-> (call_stmt_700_Update)
      call_stmt_700_update_completed_ <-& (call_stmt_700_Update)
      // Call output argument 0
      // (as target) packet_size
      // Call output argument 1
      // (as target) bad_packet_identifier
      // bad_packet_identifier
      // write to interface object
      // bad_packet_identifier
      // write to interface object
      call_stmt_700_update_start_ <-& (bad_packet_identifier_update_enable)
      // Call output argument 2
      // (as target) last_keep
      // self-release: 
      call_stmt_700_sample_start_ o<-& (call_stmt_700_sample_completed_ 1)
      $null &-> (call_stmt_700_update_start_)
      call_stmt_700_update_start_ o<-& (call_stmt_700_update_completed_ 0)
      // start: WAR dependencies for packet_size
      // done: WAR dependencies for packet_size
      // start: WAR dependencies for bad_packet_identifier
      // done: WAR dependencies for bad_packet_identifier
      // start: WAR dependencies for last_keep
      // done: WAR dependencies for last_keep
      // end: 	$call writePayloadToMem (rx_buffer_pointer new_buf_pointer ) (packet_size bad_packet_identifier last_keep ) 
      // start: 	$guard (~bad_packet_identifier) $call writeControlInformationToMem (rx_buffer_pointer packet_size last_keep ) () 
      //  file nic.linked.aa, line 292
      $T[call_stmt_705_sample_start_] 
      $T[call_stmt_705_sample_completed_] 
      $T[call_stmt_705_update_start_] 
      $T[call_stmt_705_update_completed_] 
      // Guard expression
      // bad_packet_identifier
      // start: Forward dependencies from bad_packet_identifier to transition call_stmt_705_sample_start_
      call_stmt_705_sample_start_ <-& (call_stmt_700_update_completed_)
      // done: Forward dependencies from bad_packet_identifier to transition call_stmt_705_sample_start_
      // RAW reenables for bad_packet_identifier
      call_stmt_700_update_start_ o<-& (call_stmt_705_sample_completed_ 0)
      // Call input argument 0
      // rx_buffer_pointer
      // Call input argument 1
      // packet_size
      // Call input argument 2
      // last_keep
      // start: Forward dependencies from rx_buffer_pointer to transition call_stmt_705_sample_start_
      call_stmt_705_sample_start_ <-& ($entry)
      // done: Forward dependencies from rx_buffer_pointer to transition call_stmt_705_sample_start_
      // RAW reenables for rx_buffer_pointer
      rx_buffer_pointer_update_enable o<-& (call_stmt_705_sample_completed_ 0)
      // start: Forward dependencies from packet_size to transition call_stmt_705_sample_start_
      call_stmt_705_sample_start_ <-& (call_stmt_700_update_completed_)
      // done: Forward dependencies from packet_size to transition call_stmt_705_sample_start_
      // RAW reenables for packet_size
      call_stmt_700_update_start_ o<-& (call_stmt_705_sample_completed_ 0)
      // start: Forward dependencies from last_keep to transition call_stmt_705_sample_start_
      call_stmt_705_sample_start_ <-& (call_stmt_700_update_completed_)
      // done: Forward dependencies from last_keep to transition call_stmt_705_sample_start_
      // RAW reenables for last_keep
      call_stmt_700_update_start_ o<-& (call_stmt_705_sample_completed_ 0)
      ;;[call_stmt_705_Sample] 
      {
        $T [crr] $T [cra] 
      }
      ;;[call_stmt_705_Update] 
      {
        $T [ccr] $T [cca] 
      }
      call_stmt_705_sample_start_ &-> (call_stmt_705_Sample)
      call_stmt_705_sample_completed_ <-& (call_stmt_705_Sample)
      call_stmt_705_sample_completed_ &-> ($null)
      call_stmt_705_update_start_ &-> (call_stmt_705_Update)
      call_stmt_705_update_completed_ <-& (call_stmt_705_Update)
      // self-release: 
      call_stmt_705_sample_start_ o<-& (call_stmt_705_sample_completed_ 1)
      $null &-> (call_stmt_705_update_start_)
      call_stmt_705_update_start_ o<-& (call_stmt_705_update_completed_ 0)
      // end: 	$guard (~bad_packet_identifier) $call writeControlInformationToMem (rx_buffer_pointer packet_size last_keep ) () 
      // load-store dependencies..
      // pipe read/write dependencies for pipe MEMORY_TO_NIC_RESPONSE
      // read-dependencies for pipe MEMORY_TO_NIC_RESPONSE
      call_stmt_700_sample_start_ <-& (call_stmt_694_update_completed_)
      call_stmt_705_sample_start_ <-& (call_stmt_700_update_completed_)
      // ring dependency in pipeline.
      call_stmt_694_update_start_ o<-& (call_stmt_705_update_completed_ 0)
      // write-dependencies for pipe MEMORY_TO_NIC_RESPONSE
      // signal write dependencies for MEMORY_TO_NIC_RESPONSE
      // pipe read/write dependencies for pipe NIC_TO_MEMORY_REQUEST
      // read-dependencies for pipe NIC_TO_MEMORY_REQUEST
      // write-dependencies for pipe NIC_TO_MEMORY_REQUEST
      call_stmt_700_sample_start_ <-& (call_stmt_694_update_completed_)
      call_stmt_705_sample_start_ <-& (call_stmt_700_update_completed_)
      // ring dependency in pipeline.
      call_stmt_694_sample_start_ o<-& (call_stmt_705_update_completed_ 0)
      // signal write dependencies for NIC_TO_MEMORY_REQUEST
      // pipe read/write dependencies for pipe nic_rx_to_header
      // read-dependencies for pipe nic_rx_to_header
      // write-dependencies for pipe nic_rx_to_header
      // signal write dependencies for nic_rx_to_header
      // pipe read/write dependencies for pipe nic_rx_to_packet
      // read-dependencies for pipe nic_rx_to_packet
      // write-dependencies for pipe nic_rx_to_packet
      // signal write dependencies for nic_rx_to_packet
    }
    ( bad_packet_identifier_update_enable_in)
    ( rx_buffer_pointer_update_enable_out)
    $P [rx_buffer_pointer_update_enable] 
    $P [bad_packet_identifier_update_enable] 
    $bind rx_buffer_pointer_update_enable <= call_stmt_694_to_call_stmt_705 : rx_buffer_pointer_update_enable_out
    $bind bad_packet_identifier_update_enable => call_stmt_694_to_call_stmt_705 : bad_packet_identifier_update_enable_in
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %loadBuffer
    //  file nic.linked.aa, line 285
    // 	$call writeEthernetHeaderToMem (rx_buffer_pointer ) (new_buf_pointer ) 
    //  file nic.linked.aa, line 290
    // 	$call writePayloadToMem (rx_buffer_pointer new_buf_pointer ) (packet_size bad_packet_identifier last_keep ) 
    //  file nic.linked.aa, line 291
    // 	$guard (~bad_packet_identifier) $call writeControlInformationToMem (rx_buffer_pointer packet_size last_keep ) () 
    //  file nic.linked.aa, line 292
    // 	$call writeEthernetHeaderToMem (rx_buffer_pointer ) (new_buf_pointer ) 
    //  file nic.linked.aa, line 290
    // new_buf_pointer
    $W[new_buf_pointer_694] : $int<36>
    // 	$call writePayloadToMem (rx_buffer_pointer new_buf_pointer ) (packet_size bad_packet_identifier last_keep ) 
    //  file nic.linked.aa, line 291
    // packet_size
    $W[packet_size_700] : $int<8>
    // bad_packet_identifier
    // last_keep
    $W[last_keep_700] : $int<8>
    // 	$guard (~bad_packet_identifier) $call writeControlInformationToMem (rx_buffer_pointer packet_size last_keep ) () 
    //  file nic.linked.aa, line 292
    // 	$call writeEthernetHeaderToMem (rx_buffer_pointer ) (new_buf_pointer ) 
    //  file nic.linked.aa, line 290
    $call [call_stmt_694_call] $module writeEthernetHeaderToMem(rx_buffer_pointer) (new_buf_pointer_694)  
    $delay call_stmt_694_call 4
    $buffering  $in call_stmt_694_call rx_buffer_pointer 1
    $buffering  $out call_stmt_694_call new_buf_pointer_694 1
    // 	$call writePayloadToMem (rx_buffer_pointer new_buf_pointer ) (packet_size bad_packet_identifier last_keep ) 
    //  file nic.linked.aa, line 291
    $call [call_stmt_700_call] $module writePayloadToMem(rx_buffer_pointer new_buf_pointer_694) (packet_size_700 bad_packet_identifier last_keep_700)  
    $delay call_stmt_700_call 4
    $buffering  $in call_stmt_700_call rx_buffer_pointer 1
    $buffering  $in call_stmt_700_call new_buf_pointer_694 1
    $buffering  $out call_stmt_700_call packet_size_700 1
    $buffering  $out call_stmt_700_call bad_packet_identifier 1
    $buffering  $out call_stmt_700_call last_keep_700 1
    // 	$guard (~bad_packet_identifier) $call writeControlInformationToMem (rx_buffer_pointer packet_size last_keep ) () 
    //  file nic.linked.aa, line 292
    $call [call_stmt_705_call] $module writeControlInformationToMem(rx_buffer_pointer packet_size_700 last_keep_700) () $guard ( ~ bad_packet_identifier )  
    $delay call_stmt_705_call 4
    $buffering  $in call_stmt_705_call rx_buffer_pointer 1
    $buffering  $in call_stmt_705_call packet_size_700 1
    $buffering  $in call_stmt_705_call last_keep_700 1
  }
  // end data-path
  // 	$call writeEthernetHeaderToMem (rx_buffer_pointer ) (new_buf_pointer ) 
  //  file nic.linked.aa, line 290
  // rx_buffer_pointer
  call_stmt_694_call <=> (call_stmt_694_to_call_stmt_705/call_stmt_694_Sample/crr call_stmt_694_to_call_stmt_705/call_stmt_694_Update/ccr) (call_stmt_694_to_call_stmt_705/call_stmt_694_Sample/cra call_stmt_694_to_call_stmt_705/call_stmt_694_Update/cca)
  // 	$call writePayloadToMem (rx_buffer_pointer new_buf_pointer ) (packet_size bad_packet_identifier last_keep ) 
  //  file nic.linked.aa, line 291
  // rx_buffer_pointer
  // new_buf_pointer
  call_stmt_700_call <=> (call_stmt_694_to_call_stmt_705/call_stmt_700_Sample/crr call_stmt_694_to_call_stmt_705/call_stmt_700_Update/ccr) (call_stmt_694_to_call_stmt_705/call_stmt_700_Sample/cra call_stmt_694_to_call_stmt_705/call_stmt_700_Update/cca)
  // 	$guard (~bad_packet_identifier) $call writeControlInformationToMem (rx_buffer_pointer packet_size last_keep ) () 
  //  file nic.linked.aa, line 292
  // rx_buffer_pointer
  // packet_size
  // last_keep
  call_stmt_705_call <=> (call_stmt_694_to_call_stmt_705/call_stmt_705_Sample/crr call_stmt_694_to_call_stmt_705/call_stmt_705_Update/ccr) (call_stmt_694_to_call_stmt_705/call_stmt_705_Sample/cra call_stmt_694_to_call_stmt_705/call_stmt_705_Update/cca)
}
$module [setQueueElement] 
{
  $in q_base_address:$int<36>
  // can point into 
  write_pointer:$int<32>
  // can point into 
  q_w_data:$int<32>
  // can point into 
  // pipe-declarations for block %setQueueElement
  //  file nic.linked.aa, line 294
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    ::[assign_stmt_716_to_call_stmt_772] 
    {
      // start: WAR dependencies for buffer_address
      // ignored out-of-scope w_root  q_base_address : $uint<36> 
      // done: WAR dependencies for buffer_address
      // start:  	$volatile buffer_address := (q_base_address + ($bitcast ($uint<36>) 16  )) $buffering 1
      //  file nic.linked.aa, line 299
      // volatile! 
      // Source expression
      // (q_base_address + ($bitcast ($uint<36>) 16  ))
      // q_base_address
      // Target expression
      // (as target) buffer_address
      // start: WAR dependencies for buffer_address
      // ignored out-of-scope w_root  q_base_address : $uint<36> 
      // done: WAR dependencies for buffer_address
      // end:  	$volatile buffer_address := (q_base_address + ($bitcast ($uint<36>) 16  )) $buffering 1
      // start: WAR dependencies for element_pair_address
      // ignored out-of-scope w_root  q_base_address : $uint<36> 
      // ignored out-of-scope w_root  write_pointer : $uint<32> 
      // done: WAR dependencies for element_pair_address
      // start:  	$volatile element_pair_address := (buffer_address + ($bitcast ($uint<36>) (( $slice write_pointer 31 1 )  && ($bitcast ($uint<3>) _b0  )) )) $buffering 1
      //  file nic.linked.aa, line 300
      // volatile! 
      // Source expression
      // (buffer_address + ($bitcast ($uint<36>) (( $slice write_pointer 31 1 )  && ($bitcast ($uint<3>) _b0  )) ))
      // buffer_address
      // ($bitcast ($uint<36>) (( $slice write_pointer 31 1 )  && ($bitcast ($uint<3>) _b0  )) )
      // (( $slice write_pointer 31 1 )  && ($bitcast ($uint<3>) _b0  ))
      // ( $slice write_pointer 31 1 ) 
      // write_pointer
      // Target expression
      // (as target) element_pair_address
      // start: WAR dependencies for element_pair_address
      // ignored out-of-scope w_root  q_base_address : $uint<36> 
      // ignored out-of-scope w_root  write_pointer : $uint<32> 
      // done: WAR dependencies for element_pair_address
      // end:  	$volatile element_pair_address := (buffer_address + ($bitcast ($uint<36>) (( $slice write_pointer 31 1 )  && ($bitcast ($uint<3>) _b0  )) )) $buffering 1
      // start: WAR dependencies for bmask
      // ignored out-of-scope w_root  write_pointer : $uint<32> 
      // done: WAR dependencies for bmask
      // start:  	$volatile bmask := ( $mux (write_pointer [] 0 ) (($bitcast ($uint<4>) _b0  ) && ( ~ ($bitcast ($uint<4>) _b0  ) ))  (( ~ ($bitcast ($uint<4>) _b0  ) ) && ($bitcast ($uint<4>) _b0  )) )  $buffering 1
      //  file nic.linked.aa, line 301
      // volatile! 
      // Source expression
      // ( $mux (write_pointer [] 0 ) (($bitcast ($uint<4>) _b0  ) && ( ~ ($bitcast ($uint<4>) _b0  ) ))  (( ~ ($bitcast ($uint<4>) _b0  ) ) && ($bitcast ($uint<4>) _b0  )) ) 
      // (write_pointer [] 0 )
      // write_pointer
      // Target expression
      // (as target) bmask
      // start: WAR dependencies for bmask
      // ignored out-of-scope w_root  write_pointer : $uint<32> 
      // done: WAR dependencies for bmask
      // end:  	$volatile bmask := ( $mux (write_pointer [] 0 ) (($bitcast ($uint<4>) _b0  ) && ( ~ ($bitcast ($uint<4>) _b0  ) ))  (( ~ ($bitcast ($uint<4>) _b0  ) ) && ($bitcast ($uint<4>) _b0  )) )  $buffering 1
      // start: WAR dependencies for wval
      // ignored out-of-scope w_root  write_pointer : $uint<32> 
      // ignored out-of-scope w_root  q_w_data : $uint<32> 
      // done: WAR dependencies for wval
      // start:  	$volatile wval := ( $mux (write_pointer [] 0 ) (($bitcast ($uint<32>) _b0  ) && q_w_data)  (q_w_data && ($bitcast ($uint<32>) _b0  )) )  $buffering 1
      //  file nic.linked.aa, line 302
      // volatile! 
      // Source expression
      // ( $mux (write_pointer [] 0 ) (($bitcast ($uint<32>) _b0  ) && q_w_data)  (q_w_data && ($bitcast ($uint<32>) _b0  )) ) 
      // (write_pointer [] 0 )
      // write_pointer
      // (($bitcast ($uint<32>) _b0  ) && q_w_data)
      // q_w_data
      // (q_w_data && ($bitcast ($uint<32>) _b0  ))
      // q_w_data
      // Target expression
      // (as target) wval
      // start: WAR dependencies for wval
      // ignored out-of-scope w_root  write_pointer : $uint<32> 
      // ignored out-of-scope w_root  q_w_data : $uint<32> 
      // done: WAR dependencies for wval
      // end:  	$volatile wval := ( $mux (write_pointer [] 0 ) (($bitcast ($uint<32>) _b0  ) && q_w_data)  (q_w_data && ($bitcast ($uint<32>) _b0  )) )  $buffering 1
      // start: 	$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b0  ) bmask element_pair_address wval ) (ignore ) 
      //  file nic.linked.aa, line 304
      $T[call_stmt_772_sample_start_] 
      $T[call_stmt_772_sample_completed_] 
      $T[call_stmt_772_update_start_] 
      $T[call_stmt_772_update_completed_] 
      // Call input argument 0
      // Call input argument 1
      // Call input argument 2
      // bmask
      // Call input argument 3
      // element_pair_address
      // Call input argument 4
      // wval
      // start: Forward dependencies from bmask to transition call_stmt_772_sample_start_
      // done: Forward dependencies from bmask to transition call_stmt_772_sample_start_
      // start: Forward dependencies from element_pair_address to transition call_stmt_772_sample_start_
      // done: Forward dependencies from element_pair_address to transition call_stmt_772_sample_start_
      // start: Forward dependencies from wval to transition call_stmt_772_sample_start_
      // done: Forward dependencies from wval to transition call_stmt_772_sample_start_
      ;;[call_stmt_772_Sample] 
      {
        $T [crr] $T [cra] 
      }
      ;;[call_stmt_772_Update] 
      {
        $T [ccr] $T [cca] 
      }
      call_stmt_772_sample_start_ &-> (call_stmt_772_Sample)
      call_stmt_772_sample_completed_ <-& (call_stmt_772_Sample)
      call_stmt_772_sample_completed_ &-> ($null)
      call_stmt_772_update_start_ &-> (call_stmt_772_Update)
      call_stmt_772_update_completed_ <-& (call_stmt_772_Update)
      // Call output argument 0
      // (as target) ignore
      // start: WAR dependencies for ignore
      // done: WAR dependencies for ignore
      // end: 	$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b0  ) bmask element_pair_address wval ) (ignore ) 
      // load-store dependencies..
      // pipe read/write dependencies for pipe MEMORY_TO_NIC_RESPONSE
      // read-dependencies for pipe MEMORY_TO_NIC_RESPONSE
      // write-dependencies for pipe MEMORY_TO_NIC_RESPONSE
      // signal write dependencies for MEMORY_TO_NIC_RESPONSE
      // pipe read/write dependencies for pipe NIC_TO_MEMORY_REQUEST
      // read-dependencies for pipe NIC_TO_MEMORY_REQUEST
      // write-dependencies for pipe NIC_TO_MEMORY_REQUEST
      // signal write dependencies for NIC_TO_MEMORY_REQUEST
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %setQueueElement
    //  file nic.linked.aa, line 294
    // ($bitcast ($uint<36>) 16  )
    $constant $W[type_cast_714_wire_constant] : $int<36> := _b000000000000000000000000000000010000// 16
    // ($bitcast ($uint<3>) _b0  )
    $constant $W[type_cast_722_wire_constant] : $int<3> := _b000// 0
    // ( $mux (write_pointer [] 0 ) (($bitcast ($uint<4>) _b0  ) && ( ~ ($bitcast ($uint<4>) _b0  ) ))  (( ~ ($bitcast ($uint<4>) _b0  ) ) && ($bitcast ($uint<4>) _b0  )) ) 
    // 0 
    $constant $W[konst_729_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // (($bitcast ($uint<4>) _b0  ) && ( ~ ($bitcast ($uint<4>) _b0  ) ))
    $constant $W[CONCAT_u4_u8_736_wire_constant] : $int<8> := _b00001111// 15
    // (( ~ ($bitcast ($uint<4>) _b0  ) ) && ($bitcast ($uint<4>) _b0  ))
    $constant $W[CONCAT_u4_u8_742_wire_constant] : $int<8> := _b11110000// 240
    // ( $mux (write_pointer [] 0 ) (($bitcast ($uint<32>) _b0  ) && q_w_data)  (q_w_data && ($bitcast ($uint<32>) _b0  )) ) 
    // 0 
    $constant $W[konst_747_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // ($bitcast ($uint<32>) _b0  )
    $constant $W[type_cast_750_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // ($bitcast ($uint<32>) _b0  )
    $constant $W[type_cast_755_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // 	$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b0  ) bmask element_pair_address wval ) (ignore ) 
    //  file nic.linked.aa, line 304
    // ($bitcast ($uint<1>) _b0  )
    $constant $W[type_cast_765_wire_constant] : $int<1> := _b0// 0
    // ($bitcast ($uint<1>) _b0  )
    $constant $W[type_cast_767_wire_constant] : $int<1> := _b0// 0
    // 	$volatile buffer_address := (q_base_address + ($bitcast ($uint<36>) 16  )) $buffering 1
    //  file nic.linked.aa, line 299
    // buffer_address
    $W[buffer_address_716] : $int<36>
    // 	$volatile element_pair_address := (buffer_address + ($bitcast ($uint<36>) (( $slice write_pointer 31 1 )  && ($bitcast ($uint<3>) _b0  )) )) $buffering 1
    //  file nic.linked.aa, line 300
    // ( $slice write_pointer 31 1 ) 
    $intermediate $W[slice_720_wire] : $int<31>
    // (( $slice write_pointer 31 1 )  && ($bitcast ($uint<3>) _b0  ))
    $intermediate $W[CONCAT_u31_u34_723_wire] : $int<34>
    // ($bitcast ($uint<36>) (( $slice write_pointer 31 1 )  && ($bitcast ($uint<3>) _b0  )) )
    $intermediate $W[type_cast_724_wire] : $int<36>
    // element_pair_address
    $W[element_pair_address_726] : $int<36>
    // 	$volatile bmask := ( $mux (write_pointer [] 0 ) (($bitcast ($uint<4>) _b0  ) && ( ~ ($bitcast ($uint<4>) _b0  ) ))  (( ~ ($bitcast ($uint<4>) _b0  ) ) && ($bitcast ($uint<4>) _b0  )) )  $buffering 1
    //  file nic.linked.aa, line 301
    // (write_pointer [] 0 )
    $intermediate $W[BITSEL_u32_u1_730_wire] : $int<1>
    // bmask
    $W[bmask_744] : $int<8>
    // 	$volatile wval := ( $mux (write_pointer [] 0 ) (($bitcast ($uint<32>) _b0  ) && q_w_data)  (q_w_data && ($bitcast ($uint<32>) _b0  )) )  $buffering 1
    //  file nic.linked.aa, line 302
    // (write_pointer [] 0 )
    $intermediate $W[BITSEL_u32_u1_748_wire] : $int<1>
    // (($bitcast ($uint<32>) _b0  ) && q_w_data)
    $intermediate $W[CONCAT_u32_u64_752_wire] : $int<64>
    // (q_w_data && ($bitcast ($uint<32>) _b0  ))
    $intermediate $W[CONCAT_u32_u64_756_wire] : $int<64>
    // wval
    $W[wval_758] : $int<64>
    // 	$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b0  ) bmask element_pair_address wval ) (ignore ) 
    //  file nic.linked.aa, line 304
    // ignore
    $W[ignore_772] : $int<64>
    // 	$volatile buffer_address := (q_base_address + ($bitcast ($uint<36>) 16  )) $buffering 1
    //  file nic.linked.aa, line 299
    // (q_base_address + ($bitcast ($uint<36>) 16  ))
    +[ADD_u36_u36_715_inst] (q_base_address type_cast_714_wire_constant) (buffer_address_716)   $flowthrough 
    $delay ADD_u36_u36_715_inst 0
    // 	$volatile element_pair_address := (buffer_address + ($bitcast ($uint<36>) (( $slice write_pointer 31 1 )  && ($bitcast ($uint<3>) _b0  )) )) $buffering 1
    //  file nic.linked.aa, line 300
    // ( $slice write_pointer 31 1 ) 
    [:] [slice_720_inst] (write_pointer 31 1) (slice_720_wire)  $flowthrough
    $delay slice_720_inst 0
    // (( $slice write_pointer 31 1 )  && ($bitcast ($uint<3>) _b0  ))
    &&[CONCAT_u31_u34_723_inst] (slice_720_wire type_cast_722_wire_constant) (CONCAT_u31_u34_723_wire)   $flowthrough 
    $delay CONCAT_u31_u34_723_inst 0
    // ($bitcast ($uint<36>) (( $slice write_pointer 31 1 )  && ($bitcast ($uint<3>) _b0  )) )
    # := [type_cast_724_inst] (CONCAT_u31_u34_723_wire) (type_cast_724_wire)   $flowthrough
    $delay type_cast_724_inst 0
    // (buffer_address + ($bitcast ($uint<36>) (( $slice write_pointer 31 1 )  && ($bitcast ($uint<3>) _b0  )) ))
    +[ADD_u36_u36_725_inst] (buffer_address_716 type_cast_724_wire) (element_pair_address_726)   $flowthrough 
    $delay ADD_u36_u36_725_inst 0
    // 	$volatile bmask := ( $mux (write_pointer [] 0 ) (($bitcast ($uint<4>) _b0  ) && ( ~ ($bitcast ($uint<4>) _b0  ) ))  (( ~ ($bitcast ($uint<4>) _b0  ) ) && ($bitcast ($uint<4>) _b0  )) )  $buffering 1
    //  file nic.linked.aa, line 301
    // (write_pointer [] 0 )
    [][BITSEL_u32_u1_730_inst] (write_pointer konst_729_wire_constant) (BITSEL_u32_u1_730_wire)   $flowthrough 
    $delay BITSEL_u32_u1_730_inst 0
    // ( $mux (write_pointer [] 0 ) (($bitcast ($uint<4>) _b0  ) && ( ~ ($bitcast ($uint<4>) _b0  ) ))  (( ~ ($bitcast ($uint<4>) _b0  ) ) && ($bitcast ($uint<4>) _b0  )) ) 
    ? [MUX_743_inst] (BITSEL_u32_u1_730_wire CONCAT_u4_u8_736_wire_constant CONCAT_u4_u8_742_wire_constant) (bmask_744)  $flowthrough
    // 	$volatile wval := ( $mux (write_pointer [] 0 ) (($bitcast ($uint<32>) _b0  ) && q_w_data)  (q_w_data && ($bitcast ($uint<32>) _b0  )) )  $buffering 1
    //  file nic.linked.aa, line 302
    // (write_pointer [] 0 )
    [][BITSEL_u32_u1_748_inst] (write_pointer konst_747_wire_constant) (BITSEL_u32_u1_748_wire)   $flowthrough 
    $delay BITSEL_u32_u1_748_inst 0
    // (($bitcast ($uint<32>) _b0  ) && q_w_data)
    &&[CONCAT_u32_u64_752_inst] (type_cast_750_wire_constant q_w_data) (CONCAT_u32_u64_752_wire)   $flowthrough 
    $delay CONCAT_u32_u64_752_inst 0
    // (q_w_data && ($bitcast ($uint<32>) _b0  ))
    &&[CONCAT_u32_u64_756_inst] (q_w_data type_cast_755_wire_constant) (CONCAT_u32_u64_756_wire)   $flowthrough 
    $delay CONCAT_u32_u64_756_inst 0
    // ( $mux (write_pointer [] 0 ) (($bitcast ($uint<32>) _b0  ) && q_w_data)  (q_w_data && ($bitcast ($uint<32>) _b0  )) ) 
    ? [MUX_757_inst] (BITSEL_u32_u1_748_wire CONCAT_u32_u64_752_wire CONCAT_u32_u64_756_wire) (wval_758)  $flowthrough
    // 	$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b0  ) bmask element_pair_address wval ) (ignore ) 
    //  file nic.linked.aa, line 304
    $call [call_stmt_772_call] $module accessMemory(type_cast_765_wire_constant type_cast_767_wire_constant bmask_744 element_pair_address_726 wval_758) (ignore_772)  
    $delay call_stmt_772_call 4
    $buffering  $in call_stmt_772_call type_cast_765_wire_constant 1
    $buffering  $in call_stmt_772_call type_cast_767_wire_constant 1
    $buffering  $in call_stmt_772_call bmask_744 1
    $buffering  $in call_stmt_772_call element_pair_address_726 1
    $buffering  $in call_stmt_772_call wval_758 1
    $buffering  $out call_stmt_772_call ignore_772 1
  }
  // end data-path
  // 	$volatile buffer_address := (q_base_address + ($bitcast ($uint<36>) 16  )) $buffering 1
  //  file nic.linked.aa, line 299
  // (q_base_address + ($bitcast ($uint<36>) 16  ))
  // q_base_address
  // 	$volatile element_pair_address := (buffer_address + ($bitcast ($uint<36>) (( $slice write_pointer 31 1 )  && ($bitcast ($uint<3>) _b0  )) )) $buffering 1
  //  file nic.linked.aa, line 300
  // (buffer_address + ($bitcast ($uint<36>) (( $slice write_pointer 31 1 )  && ($bitcast ($uint<3>) _b0  )) ))
  // buffer_address
  // (( $slice write_pointer 31 1 )  && ($bitcast ($uint<3>) _b0  ))
  // write_pointer
  // 	$volatile bmask := ( $mux (write_pointer [] 0 ) (($bitcast ($uint<4>) _b0  ) && ( ~ ($bitcast ($uint<4>) _b0  ) ))  (( ~ ($bitcast ($uint<4>) _b0  ) ) && ($bitcast ($uint<4>) _b0  )) )  $buffering 1
  //  file nic.linked.aa, line 301
  // (write_pointer [] 0 )
  // write_pointer
  // ( $mux (write_pointer [] 0 ) (($bitcast ($uint<4>) _b0  ) && ( ~ ($bitcast ($uint<4>) _b0  ) ))  (( ~ ($bitcast ($uint<4>) _b0  ) ) && ($bitcast ($uint<4>) _b0  )) ) 
  // 	$volatile wval := ( $mux (write_pointer [] 0 ) (($bitcast ($uint<32>) _b0  ) && q_w_data)  (q_w_data && ($bitcast ($uint<32>) _b0  )) )  $buffering 1
  //  file nic.linked.aa, line 302
  // (write_pointer [] 0 )
  // write_pointer
  // (($bitcast ($uint<32>) _b0  ) && q_w_data)
  // q_w_data
  // (q_w_data && ($bitcast ($uint<32>) _b0  ))
  // q_w_data
  // ( $mux (write_pointer [] 0 ) (($bitcast ($uint<32>) _b0  ) && q_w_data)  (q_w_data && ($bitcast ($uint<32>) _b0  )) ) 
  // 	$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b0  ) bmask element_pair_address wval ) (ignore ) 
  //  file nic.linked.aa, line 304
  // bmask
  // element_pair_address
  // wval
  call_stmt_772_call <=> (assign_stmt_716_to_call_stmt_772/call_stmt_772_Sample/crr assign_stmt_716_to_call_stmt_772/call_stmt_772_Update/ccr) (assign_stmt_716_to_call_stmt_772/call_stmt_772_Sample/cra assign_stmt_716_to_call_stmt_772/call_stmt_772_Update/cca)
}
$module [pushIntoQueue] 
{
  $in lock:$int<1>
  // can point into 
  q_base_address:$int<36>
  // can point into 
  q_w_data:$int<32>
  // can point into 
  $out status:$int<1>
  // can point into 
  // pipe-declarations for block %pushIntoQueue
  //  file nic.linked.aa, line 306
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    ::[call_stmt_782] 
    {
      // start: 	$guard (lock) $call acquireMutex (q_base_address ) (m_ok ) 
      //  file nic.linked.aa, line 311
      $T[call_stmt_782_sample_start_] 
      $T[call_stmt_782_sample_completed_] 
      $T[call_stmt_782_update_start_] 
      $T[call_stmt_782_update_completed_] 
      // Guard expression
      // lock
      // start: Forward dependencies from lock to transition call_stmt_782_sample_start_
      // done: Forward dependencies from lock to transition call_stmt_782_sample_start_
      // Call input argument 0
      // q_base_address
      // start: Forward dependencies from q_base_address to transition call_stmt_782_sample_start_
      // done: Forward dependencies from q_base_address to transition call_stmt_782_sample_start_
      ;;[call_stmt_782_Sample] 
      {
        $T [crr] $T [cra] 
      }
      ;;[call_stmt_782_Update] 
      {
        $T [ccr] $T [cca] 
      }
      call_stmt_782_sample_start_ &-> (call_stmt_782_Sample)
      call_stmt_782_sample_completed_ <-& (call_stmt_782_Sample)
      call_stmt_782_sample_completed_ &-> ($null)
      call_stmt_782_update_start_ &-> (call_stmt_782_Update)
      call_stmt_782_update_completed_ <-& (call_stmt_782_Update)
      // Call output argument 0
      // (as target) m_ok
      // start: WAR dependencies for m_ok
      // done: WAR dependencies for m_ok
      // end: 	$guard (lock) $call acquireMutex (q_base_address ) (m_ok ) 
      // load-store dependencies..
      // pipe read/write dependencies for pipe MEMORY_TO_NIC_RESPONSE
      // read-dependencies for pipe MEMORY_TO_NIC_RESPONSE
      // write-dependencies for pipe MEMORY_TO_NIC_RESPONSE
      // signal write dependencies for MEMORY_TO_NIC_RESPONSE
      // pipe read/write dependencies for pipe NIC_TO_MEMORY_REQUEST
      // read-dependencies for pipe NIC_TO_MEMORY_REQUEST
      // write-dependencies for pipe NIC_TO_MEMORY_REQUEST
      // signal write dependencies for NIC_TO_MEMORY_REQUEST
    }
    ::[call_stmt_790_to_call_stmt_826] 
    {
      // start: 	$call getQueuePointers (q_base_address ) (write_pointer read_pointer ) 
      //  file nic.linked.aa, line 314
      $T[call_stmt_790_sample_start_] 
      $T[call_stmt_790_sample_completed_] 
      $T[call_stmt_790_update_start_] 
      $T[call_stmt_790_update_completed_] 
      // Call input argument 0
      // q_base_address
      // start: Forward dependencies from q_base_address to transition call_stmt_790_sample_start_
      // done: Forward dependencies from q_base_address to transition call_stmt_790_sample_start_
      ;;[call_stmt_790_Sample] 
      {
        $T [crr] $T [cra] 
      }
      ;;[call_stmt_790_Update] 
      {
        $T [ccr] $T [cca] 
      }
      call_stmt_790_sample_start_ &-> (call_stmt_790_Sample)
      call_stmt_790_sample_completed_ <-& (call_stmt_790_Sample)
      call_stmt_790_sample_completed_ &-> ($null)
      call_stmt_790_update_start_ &-> (call_stmt_790_Update)
      call_stmt_790_update_completed_ <-& (call_stmt_790_Update)
      // Call output argument 0
      // (as target) write_pointer
      // Call output argument 1
      // (as target) read_pointer
      // start: WAR dependencies for write_pointer
      // done: WAR dependencies for write_pointer
      // start: WAR dependencies for read_pointer
      // done: WAR dependencies for read_pointer
      // end: 	$call getQueuePointers (q_base_address ) (write_pointer read_pointer ) 
      // start: WAR dependencies for round_off
      // done: WAR dependencies for round_off
      // start:  	$volatile round_off := (write_pointer == (QUEUE_SIZE_MASK - 1 )) $buffering 1
      //  file nic.linked.aa, line 315
      // volatile! 
      // Source expression
      // (write_pointer == (QUEUE_SIZE_MASK - 1 ))
      // write_pointer
      // Target expression
      // (as target) round_off
      // start: WAR dependencies for round_off
      // done: WAR dependencies for round_off
      // end:  	$volatile round_off := (write_pointer == (QUEUE_SIZE_MASK - 1 )) $buffering 1
      // start: WAR dependencies for next_wp
      // done: WAR dependencies for next_wp
      // start:  	$volatile next_wp := ( $mux round_off 0   (write_pointer + 1 ) )  $buffering 1
      //  file nic.linked.aa, line 316
      // volatile! 
      // Source expression
      // ( $mux round_off 0   (write_pointer + 1 ) ) 
      // round_off
      // (write_pointer + 1 )
      // write_pointer
      // Target expression
      // (as target) next_wp
      // start: WAR dependencies for next_wp
      // done: WAR dependencies for next_wp
      // end:  	$volatile next_wp := ( $mux round_off 0   (write_pointer + 1 ) )  $buffering 1
      // start: WAR dependencies for q_full
      // done: WAR dependencies for q_full
      // start:  	$volatile q_full := (next_wp == read_pointer) $buffering 1
      //  file nic.linked.aa, line 317
      // volatile! 
      // Source expression
      // (next_wp == read_pointer)
      // next_wp
      // read_pointer
      // Target expression
      // (as target) q_full
      // start: WAR dependencies for q_full
      // done: WAR dependencies for q_full
      // end:  	$volatile q_full := (next_wp == read_pointer) $buffering 1
      // start: 	$guard (~q_full) $call setQueueElement (q_base_address write_pointer q_w_data ) () 
      //  file nic.linked.aa, line 319
      $T[call_stmt_821_sample_start_] 
      $T[call_stmt_821_sample_completed_] 
      $T[call_stmt_821_update_start_] 
      $T[call_stmt_821_update_completed_] 
      // Guard expression
      // q_full
      // start: Forward dependencies from q_full to transition call_stmt_821_sample_start_
      call_stmt_821_sample_start_ <-& (call_stmt_790_update_completed_)
      // done: Forward dependencies from q_full to transition call_stmt_821_sample_start_
      // Call input argument 0
      // q_base_address
      // Call input argument 1
      // write_pointer
      // Call input argument 2
      // q_w_data
      // start: Forward dependencies from q_base_address to transition call_stmt_821_sample_start_
      // done: Forward dependencies from q_base_address to transition call_stmt_821_sample_start_
      // start: Forward dependencies from write_pointer to transition call_stmt_821_sample_start_
      call_stmt_821_sample_start_ <-& (call_stmt_790_update_completed_)
      // done: Forward dependencies from write_pointer to transition call_stmt_821_sample_start_
      // start: Forward dependencies from q_w_data to transition call_stmt_821_sample_start_
      // done: Forward dependencies from q_w_data to transition call_stmt_821_sample_start_
      ;;[call_stmt_821_Sample] 
      {
        $T [crr] $T [cra] 
      }
      ;;[call_stmt_821_Update] 
      {
        $T [ccr] $T [cca] 
      }
      call_stmt_821_sample_start_ &-> (call_stmt_821_Sample)
      call_stmt_821_sample_completed_ <-& (call_stmt_821_Sample)
      call_stmt_821_sample_completed_ &-> ($null)
      call_stmt_821_update_start_ &-> (call_stmt_821_Update)
      call_stmt_821_update_completed_ <-& (call_stmt_821_Update)
      // end: 	$guard (~q_full) $call setQueueElement (q_base_address write_pointer q_w_data ) () 
      // start: 	$guard (~q_full) $call setQueuePointers (q_base_address next_wp read_pointer ) () 
      //  file nic.linked.aa, line 320
      $T[call_stmt_826_sample_start_] 
      $T[call_stmt_826_sample_completed_] 
      $T[call_stmt_826_update_start_] 
      $T[call_stmt_826_update_completed_] 
      // Guard expression
      // q_full
      // start: Forward dependencies from q_full to transition call_stmt_826_sample_start_
      call_stmt_826_sample_start_ <-& (call_stmt_790_update_completed_)
      // done: Forward dependencies from q_full to transition call_stmt_826_sample_start_
      // Call input argument 0
      // q_base_address
      // Call input argument 1
      // next_wp
      // Call input argument 2
      // read_pointer
      // start: Forward dependencies from q_base_address to transition call_stmt_826_sample_start_
      // done: Forward dependencies from q_base_address to transition call_stmt_826_sample_start_
      // start: Forward dependencies from next_wp to transition call_stmt_826_sample_start_
      call_stmt_826_sample_start_ <-& (call_stmt_790_update_completed_)
      // done: Forward dependencies from next_wp to transition call_stmt_826_sample_start_
      // start: Forward dependencies from read_pointer to transition call_stmt_826_sample_start_
      call_stmt_826_sample_start_ <-& (call_stmt_790_update_completed_)
      // done: Forward dependencies from read_pointer to transition call_stmt_826_sample_start_
      ;;[call_stmt_826_Sample] 
      {
        $T [crr] $T [cra] 
      }
      ;;[call_stmt_826_Update] 
      {
        $T [ccr] $T [cca] 
      }
      call_stmt_826_sample_start_ &-> (call_stmt_826_Sample)
      call_stmt_826_sample_completed_ <-& (call_stmt_826_Sample)
      call_stmt_826_sample_completed_ &-> ($null)
      call_stmt_826_update_start_ &-> (call_stmt_826_Update)
      call_stmt_826_update_completed_ <-& (call_stmt_826_Update)
      // end: 	$guard (~q_full) $call setQueuePointers (q_base_address next_wp read_pointer ) () 
      // load-store dependencies..
      // pipe read/write dependencies for pipe MEMORY_TO_NIC_RESPONSE
      // read-dependencies for pipe MEMORY_TO_NIC_RESPONSE
      call_stmt_821_sample_start_ <-& (call_stmt_790_update_completed_)
      call_stmt_826_sample_start_ <-& (call_stmt_821_update_completed_)
      // write-dependencies for pipe MEMORY_TO_NIC_RESPONSE
      // signal write dependencies for MEMORY_TO_NIC_RESPONSE
      // pipe read/write dependencies for pipe NIC_TO_MEMORY_REQUEST
      // read-dependencies for pipe NIC_TO_MEMORY_REQUEST
      // write-dependencies for pipe NIC_TO_MEMORY_REQUEST
      call_stmt_821_sample_start_ <-& (call_stmt_790_update_completed_)
      call_stmt_826_sample_start_ <-& (call_stmt_821_update_completed_)
      // signal write dependencies for NIC_TO_MEMORY_REQUEST
    }
    ::[call_stmt_830_to_assign_stmt_834] 
    {
      // start: 	$guard (lock) $call releaseMutex (q_base_address ) () 
      //  file nic.linked.aa, line 322
      $T[call_stmt_830_sample_start_] 
      $T[call_stmt_830_sample_completed_] 
      $T[call_stmt_830_update_start_] 
      $T[call_stmt_830_update_completed_] 
      // Guard expression
      // lock
      // start: Forward dependencies from lock to transition call_stmt_830_sample_start_
      // done: Forward dependencies from lock to transition call_stmt_830_sample_start_
      // Call input argument 0
      // q_base_address
      // start: Forward dependencies from q_base_address to transition call_stmt_830_sample_start_
      // done: Forward dependencies from q_base_address to transition call_stmt_830_sample_start_
      ;;[call_stmt_830_Sample] 
      {
        $T [crr] $T [cra] 
      }
      ;;[call_stmt_830_Update] 
      {
        $T [ccr] $T [cca] 
      }
      call_stmt_830_sample_start_ &-> (call_stmt_830_Sample)
      call_stmt_830_sample_completed_ <-& (call_stmt_830_Sample)
      call_stmt_830_sample_completed_ &-> ($null)
      call_stmt_830_update_start_ &-> (call_stmt_830_Update)
      call_stmt_830_update_completed_ <-& (call_stmt_830_Update)
      // end: 	$guard (lock) $call releaseMutex (q_base_address ) () 
      // start:  	status := ( ~ q_full ) $buffering 1// bits of buffering = 1. 
      //  file nic.linked.aa, line 323
      // Source expression
      // ( ~ q_full )
      $T[NOT_u1_u1_833_sample_start_] 
      $T[NOT_u1_u1_833_sample_completed_] 
      $T[NOT_u1_u1_833_update_start_] 
      $T[NOT_u1_u1_833_update_completed_] 
      // q_full
      // start: Forward dependencies from q_full to transition NOT_u1_u1_833_sample_start_
      // done: Forward dependencies from q_full to transition NOT_u1_u1_833_sample_start_
      ;;[NOT_u1_u1_833_Sample] 
      {
        // unary expression 
        $T [rr] $T [ra] // (split) unary operation
      }
      ;;[NOT_u1_u1_833_Update] 
      {
        // unary expression 
        $T [cr] $T [ca] //(split) unary operation
      }
      NOT_u1_u1_833_sample_start_ &-> (NOT_u1_u1_833_Sample)
      NOT_u1_u1_833_sample_completed_ <-& (NOT_u1_u1_833_Sample)
      NOT_u1_u1_833_sample_completed_ &-> ($null)
      NOT_u1_u1_833_update_start_ &-> (NOT_u1_u1_833_Update)
      NOT_u1_u1_833_update_completed_ <-& (NOT_u1_u1_833_Update)
      // Target expression
      // (as target) status
      // status
      // write to interface object
      // start: WAR dependencies for status
      // done: WAR dependencies for status
      // status
      // write to interface object
      // end:  	status := ( ~ q_full ) $buffering 1// bits of buffering = 1. 
      // load-store dependencies..
      // pipe read/write dependencies for pipe MEMORY_TO_NIC_RESPONSE
      // read-dependencies for pipe MEMORY_TO_NIC_RESPONSE
      // write-dependencies for pipe MEMORY_TO_NIC_RESPONSE
      // signal write dependencies for MEMORY_TO_NIC_RESPONSE
      // pipe read/write dependencies for pipe NIC_TO_MEMORY_REQUEST
      // read-dependencies for pipe NIC_TO_MEMORY_REQUEST
      // write-dependencies for pipe NIC_TO_MEMORY_REQUEST
      // signal write dependencies for NIC_TO_MEMORY_REQUEST
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %pushIntoQueue
    //  file nic.linked.aa, line 306
    // 	$guard (lock) $call acquireMutex (q_base_address ) (m_ok ) 
    //  file nic.linked.aa, line 311
    // 	$call getQueuePointers (q_base_address ) (write_pointer read_pointer ) 
    //  file nic.linked.aa, line 314
    // (QUEUE_SIZE_MASK - 1 )
    $constant $W[SUB_u32_u32_795_wire_constant] : $int<32> := _b00000000000000000000000000000010// 2
    // ( $mux round_off 0   (write_pointer + 1 ) ) 
    // 0 
    $constant $W[konst_800_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // 1 
    $constant $W[konst_802_wire_constant] : $int<32> := _b00000000000000000000000000000001// 1
    // 	$guard (~q_full) $call setQueueElement (q_base_address write_pointer q_w_data ) () 
    //  file nic.linked.aa, line 319
    // 	$guard (~q_full) $call setQueuePointers (q_base_address next_wp read_pointer ) () 
    //  file nic.linked.aa, line 320
    // 	$guard (lock) $call releaseMutex (q_base_address ) () 
    //  file nic.linked.aa, line 322
    // 	$guard (lock) $call acquireMutex (q_base_address ) (m_ok ) 
    //  file nic.linked.aa, line 311
    // m_ok
    $W[m_ok_782] : $int<1>
    // 	$call getQueuePointers (q_base_address ) (write_pointer read_pointer ) 
    //  file nic.linked.aa, line 314
    // write_pointer
    $W[write_pointer_790] : $int<32>
    // read_pointer
    $W[read_pointer_790] : $int<32>
    // 	$volatile round_off := (write_pointer == (QUEUE_SIZE_MASK - 1 )) $buffering 1
    //  file nic.linked.aa, line 315
    // round_off
    $W[round_off_797] : $int<1>
    // 	$volatile next_wp := ( $mux round_off 0   (write_pointer + 1 ) )  $buffering 1
    //  file nic.linked.aa, line 316
    // (write_pointer + 1 )
    $intermediate $W[ADD_u32_u32_803_wire] : $int<32>
    // next_wp
    $W[next_wp_805] : $int<32>
    // 	$volatile q_full := (next_wp == read_pointer) $buffering 1
    //  file nic.linked.aa, line 317
    // q_full
    $W[q_full_810] : $int<1>
    // 	$guard (~q_full) $call setQueueElement (q_base_address write_pointer q_w_data ) () 
    //  file nic.linked.aa, line 319
    // 	$guard (~q_full) $call setQueuePointers (q_base_address next_wp read_pointer ) () 
    //  file nic.linked.aa, line 320
    // 	$guard (lock) $call releaseMutex (q_base_address ) () 
    //  file nic.linked.aa, line 322
    // 	status := ( ~ q_full ) $buffering 1// bits of buffering = 1. 
    //  file nic.linked.aa, line 323
    // status
    // 	$guard (lock) $call acquireMutex (q_base_address ) (m_ok ) 
    //  file nic.linked.aa, line 311
    $call [call_stmt_782_call] $module acquireMutex(q_base_address) (m_ok_782) $guard ( lock )  
    $delay call_stmt_782_call 4
    $buffering  $in call_stmt_782_call q_base_address 1
    $buffering  $out call_stmt_782_call m_ok_782 1
    // 	$call getQueuePointers (q_base_address ) (write_pointer read_pointer ) 
    //  file nic.linked.aa, line 314
    $call [call_stmt_790_call] $module getQueuePointers(q_base_address) (write_pointer_790 read_pointer_790)  
    $delay call_stmt_790_call 4
    $buffering  $in call_stmt_790_call q_base_address 1
    $buffering  $out call_stmt_790_call write_pointer_790 1
    $buffering  $out call_stmt_790_call read_pointer_790 1
    // 	$volatile round_off := (write_pointer == (QUEUE_SIZE_MASK - 1 )) $buffering 1
    //  file nic.linked.aa, line 315
    // (write_pointer == (QUEUE_SIZE_MASK - 1 ))
    ==[EQ_u32_u1_796_inst] (write_pointer_790 SUB_u32_u32_795_wire_constant) (round_off_797)   $flowthrough 
    $delay EQ_u32_u1_796_inst 0
    // 	$volatile next_wp := ( $mux round_off 0   (write_pointer + 1 ) )  $buffering 1
    //  file nic.linked.aa, line 316
    // (write_pointer + 1 )
    +[ADD_u32_u32_803_inst] (write_pointer_790 konst_802_wire_constant) (ADD_u32_u32_803_wire)   $flowthrough 
    $delay ADD_u32_u32_803_inst 0
    // ( $mux round_off 0   (write_pointer + 1 ) ) 
    ? [MUX_804_inst] (round_off_797 konst_800_wire_constant ADD_u32_u32_803_wire) (next_wp_805)  $flowthrough
    // 	$volatile q_full := (next_wp == read_pointer) $buffering 1
    //  file nic.linked.aa, line 317
    // (next_wp == read_pointer)
    ==[EQ_u32_u1_809_inst] (next_wp_805 read_pointer_790) (q_full_810)   $flowthrough 
    $delay EQ_u32_u1_809_inst 0
    // 	$guard (~q_full) $call setQueueElement (q_base_address write_pointer q_w_data ) () 
    //  file nic.linked.aa, line 319
    $call [call_stmt_821_call] $module setQueueElement(q_base_address write_pointer_790 q_w_data) () $guard ( ~ q_full_810 )  
    $delay call_stmt_821_call 4
    $buffering  $in call_stmt_821_call q_base_address 1
    $buffering  $in call_stmt_821_call write_pointer_790 1
    $buffering  $in call_stmt_821_call q_w_data 1
    // 	$guard (~q_full) $call setQueuePointers (q_base_address next_wp read_pointer ) () 
    //  file nic.linked.aa, line 320
    $call [call_stmt_826_call] $module setQueuePointers(q_base_address next_wp_805 read_pointer_790) () $guard ( ~ q_full_810 )  
    $delay call_stmt_826_call 4
    $buffering  $in call_stmt_826_call q_base_address 1
    $buffering  $in call_stmt_826_call next_wp_805 1
    $buffering  $in call_stmt_826_call read_pointer_790 1
    // 	$guard (lock) $call releaseMutex (q_base_address ) () 
    //  file nic.linked.aa, line 322
    $call [call_stmt_830_call] $module releaseMutex(q_base_address) () $guard ( lock )  
    $delay call_stmt_830_call 4
    $buffering  $in call_stmt_830_call q_base_address 1
    // 	status := ( ~ q_full ) $buffering 1// bits of buffering = 1. 
    //  file nic.linked.aa, line 323
    // ( ~ q_full )
    ~ [NOT_u1_u1_833_inst] (q_full_810) (status)  
    $buffering  $out NOT_u1_u1_833_inst status 1
    $delay NOT_u1_u1_833_inst 1
  }
  // end data-path
  // 	$guard (lock) $call acquireMutex (q_base_address ) (m_ok ) 
  //  file nic.linked.aa, line 311
  // q_base_address
  call_stmt_782_call <=> (call_stmt_782/call_stmt_782_Sample/crr call_stmt_782/call_stmt_782_Update/ccr) (call_stmt_782/call_stmt_782_Sample/cra call_stmt_782/call_stmt_782_Update/cca)
  // 	$call getQueuePointers (q_base_address ) (write_pointer read_pointer ) 
  //  file nic.linked.aa, line 314
  // q_base_address
  call_stmt_790_call <=> (call_stmt_790_to_call_stmt_826/call_stmt_790_Sample/crr call_stmt_790_to_call_stmt_826/call_stmt_790_Update/ccr) (call_stmt_790_to_call_stmt_826/call_stmt_790_Sample/cra call_stmt_790_to_call_stmt_826/call_stmt_790_Update/cca)
  // 	$volatile round_off := (write_pointer == (QUEUE_SIZE_MASK - 1 )) $buffering 1
  //  file nic.linked.aa, line 315
  // (write_pointer == (QUEUE_SIZE_MASK - 1 ))
  // write_pointer
  // 	$volatile next_wp := ( $mux round_off 0   (write_pointer + 1 ) )  $buffering 1
  //  file nic.linked.aa, line 316
  // round_off
  // (write_pointer + 1 )
  // write_pointer
  // ( $mux round_off 0   (write_pointer + 1 ) ) 
  // 	$volatile q_full := (next_wp == read_pointer) $buffering 1
  //  file nic.linked.aa, line 317
  // (next_wp == read_pointer)
  // next_wp
  // read_pointer
  // 	$guard (~q_full) $call setQueueElement (q_base_address write_pointer q_w_data ) () 
  //  file nic.linked.aa, line 319
  // q_base_address
  // write_pointer
  // q_w_data
  call_stmt_821_call <=> (call_stmt_790_to_call_stmt_826/call_stmt_821_Sample/crr call_stmt_790_to_call_stmt_826/call_stmt_821_Update/ccr) (call_stmt_790_to_call_stmt_826/call_stmt_821_Sample/cra call_stmt_790_to_call_stmt_826/call_stmt_821_Update/cca)
  // 	$guard (~q_full) $call setQueuePointers (q_base_address next_wp read_pointer ) () 
  //  file nic.linked.aa, line 320
  // q_base_address
  // next_wp
  // read_pointer
  call_stmt_826_call <=> (call_stmt_790_to_call_stmt_826/call_stmt_826_Sample/crr call_stmt_790_to_call_stmt_826/call_stmt_826_Update/ccr) (call_stmt_790_to_call_stmt_826/call_stmt_826_Sample/cra call_stmt_790_to_call_stmt_826/call_stmt_826_Update/cca)
  // 	$guard (lock) $call releaseMutex (q_base_address ) () 
  //  file nic.linked.aa, line 322
  // q_base_address
  call_stmt_830_call <=> (call_stmt_830_to_assign_stmt_834/call_stmt_830_Sample/crr call_stmt_830_to_assign_stmt_834/call_stmt_830_Update/ccr) (call_stmt_830_to_assign_stmt_834/call_stmt_830_Sample/cra call_stmt_830_to_assign_stmt_834/call_stmt_830_Update/cca)
  // 	status := ( ~ q_full ) $buffering 1// bits of buffering = 1. 
  //  file nic.linked.aa, line 323
  // q_full
  // ( ~ q_full )
  NOT_u1_u1_833_inst <=> (call_stmt_830_to_assign_stmt_834/NOT_u1_u1_833_Sample/rr call_stmt_830_to_assign_stmt_834/NOT_u1_u1_833_Update/cr) (call_stmt_830_to_assign_stmt_834/NOT_u1_u1_833_Sample/ra call_stmt_830_to_assign_stmt_834/NOT_u1_u1_833_Update/ca)
}
$operator $module [delay_time] 
{
  $in T:$int<32>
  // can point into 
  $out delay_done:$int<1> := _b1
  // can point into 
  // pipe-declarations for block %delay_time
  //  file nic.linked.aa, line 325
  // pipe-declarations for block %delay_time%loop
  //  file nic.linked.aa, line 330
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    <>[branch_block_stmt_839] // Branch Block  file nic.linked.aa, line 330
    {
      $P [branch_block_stmt_839__entry__]
      branch_block_stmt_839__entry__ <-| ($entry)
      $P [branch_block_stmt_839__exit__]
      branch_block_stmt_839__exit__ |-> ($exit)
      $P [do_while_stmt_840__entry__] 
      $P [do_while_stmt_840__exit__] 
      $P [assign_stmt_858__entry__] 
      $P [assign_stmt_858__exit__] 
      // do-while-statement  
      //  file nic.linked.aa, line 332
      <o> [do_while_stmt_840]  $depth 7 $buffering 1 
      {
        $P[do_while_stmt_840__entry__] 
        $P[do_while_stmt_840__exit__] 
        $P[loop_back] 
        $P[condition_done] 
        $P[loop_body_done] 
        $pipeline [do_while_stmt_840_loop_body] 
        {
          // Pipelined!
          $T[back_edge_to_loop_body] 
          $T[first_time_through_loop_body] 
          $T[loop_body_start] 
          $T[condition_evaluated] 
          $transitionmerge [entry_tmerge] (back_edge_to_loop_body first_time_through_loop_body) (loop_body_start)
          $entry <-& (loop_body_start)
          $T[aggregated_phi_sample_req] 
          $T[aggregated_phi_sample_ack] 
          $T[aggregated_phi_update_req] 
          $T[aggregated_phi_update_ack] 
          // do not loop-back unless all phi's have used up their triggering tokens.
          condition_evaluated <-& (aggregated_phi_update_ack)
          aggregated_phi_sample_req o<-& (aggregated_phi_update_ack 0)
          // start:  PHI statement phi_stmt_842
          // 			$phi R := 			  nR $on   $loopback 			  T $on   $entry 
          // type of target is $uint<32>
          $T[phi_stmt_842_sample_start_] 
          $T[phi_stmt_842_sample_completed_] 
          $T[phi_stmt_842_update_start_] 
          $T[phi_stmt_842_update_completed_] 
          $T[phi_stmt_842_sample_start__ps] 
          phi_stmt_842_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_842_sample_completed__ps] 
          phi_stmt_842_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_842_update_start__ps] 
          phi_stmt_842_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_842_update_completed__ps] 
          phi_stmt_842_update_completed_ <-& (phi_stmt_842_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_842_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_842_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_842_update_start_)
          $T[phi_stmt_842_loopback_trigger] 
          phi_stmt_842_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_842_loopback_sample_req] 
          $T[phi_stmt_842_loopback_sample_req_ps] 
          phi_stmt_842_loopback_sample_req <-& (phi_stmt_842_loopback_sample_req_ps)
          phi_stmt_842_loopback_sample_req &-> ($null)
          $T[phi_stmt_842_entry_trigger] 
          phi_stmt_842_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_842_entry_sample_req] 
          $T[phi_stmt_842_entry_sample_req_ps] 
          phi_stmt_842_entry_sample_req <-& (phi_stmt_842_entry_sample_req_ps)
          phi_stmt_842_entry_sample_req &-> ($null)
          phi_stmt_842_update_start_ o<-& (phi_stmt_842_update_completed_ 0)
          phi_stmt_842_sample_start_ o<-& (phi_stmt_842_sample_completed_ 1)
          $T[phi_stmt_842_merged_reqs] 
          $T[phi_stmt_842_phi_mux_ack] 
          $T[phi_stmt_842_phi_mux_ack_ps] 
          phi_stmt_842_phi_mux_ack_ps <-& (phi_stmt_842_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_842_update_completed_)
          $T[R_nR_844_sample_start__ps] 
          $T[R_nR_844_sample_completed__ps] 
          $T[R_nR_844_update_start__ps] 
          $T[R_nR_844_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 0
          $T[R_nR_844_sample_start_] 
          $T[R_nR_844_sample_completed_] 
          $T[R_nR_844_update_start_] 
          $T[R_nR_844_update_completed_] 
          ;;[R_nR_844_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_nR_844_sample_start_ &-> (R_nR_844_Sample)
          R_nR_844_sample_completed_ <-& (R_nR_844_Sample)
          ;;[R_nR_844_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_nR_844_update_start_ &-> (R_nR_844_Update)
          R_nR_844_update_completed_ <-& (R_nR_844_Update)
          // RAW reenables for nR
          // Phi start dependency for implicit/constant alternative.
          R_nR_844_sample_start_ <-& (R_nR_844_sample_start__ps)
          R_nR_844_update_start_ <-& (R_nR_844_update_start__ps)
          // Phi complete dependency.
          R_nR_844_sample_completed__ps <-& (R_nR_844_sample_completed_)
          R_nR_844_update_completed__ps <-& (R_nR_844_update_completed_)
          $T[R_T_845_sample_start__ps] 
          $T[R_T_845_sample_completed__ps] 
          $T[R_T_845_update_start__ps] 
          $T[R_T_845_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_T_845_sample_start_] 
          $T[R_T_845_sample_completed_] 
          $T[R_T_845_update_start_] 
          $T[R_T_845_update_completed_] 
          ;;[R_T_845_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_T_845_sample_start_ &-> (R_T_845_Sample)
          R_T_845_sample_completed_ <-& (R_T_845_Sample)
          ;;[R_T_845_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_T_845_update_start_ &-> (R_T_845_Update)
          R_T_845_update_completed_ <-& (R_T_845_Update)
          // RAW reenables for T
          // Phi start dependency for implicit/constant alternative.
          R_T_845_sample_start_ <-& (R_T_845_sample_start__ps)
          R_T_845_update_start_ <-& (R_T_845_update_start__ps)
          // Phi complete dependency.
          R_T_845_sample_completed__ps <-& (R_T_845_sample_completed_)
          R_T_845_update_completed__ps <-& (R_T_845_update_completed_)
          $phisequencer [ phi_stmt_842_phi_seq] : 
          phi_stmt_842_loopback_trigger R_nR_844_sample_start__ps R_nR_844_sample_completed__ps R_nR_844_update_start__ps R_nR_844_update_completed__ps phi_stmt_842_entry_trigger R_T_845_sample_start__ps R_T_845_sample_completed__ps R_T_845_update_start__ps R_T_845_update_completed__ps :
          phi_stmt_842_sample_start__ps phi_stmt_842_sample_completed__ps phi_stmt_842_update_start__ps phi_stmt_842_update_completed__ps :
          phi_stmt_842_loopback_sample_req_ps phi_stmt_842_entry_sample_req_ps : 
          phi_stmt_842_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_842
          // start: WAR dependencies for nR
          // WAR dependency: Read: nR before Write: 			$volatile nR := (R - 1 ) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for nR
          // start:  			$volatile nR := (R - 1 ) $buffering 1
          //  file nic.linked.aa, line 338
          // volatile! 
          // Source expression
          // (R - 1 )
          // R
          // Target expression
          // (as target) nR
          // start: WAR dependencies for nR
          // WAR dependency: Read: nR before Write: 			$volatile nR := (R - 1 ) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for nR
          // end:  			$volatile nR := (R - 1 ) $buffering 1
          // (R > 0 )
          // R
          $T [loop_body_delay_to_condition_start] $delay
          loop_body_start &-> (loop_body_delay_to_condition_start)
          loop_body_delay_to_condition_start &-> (condition_evaluated)
          // start: Forward dependencies from (R > 0 ) to transition condition_evaluated
          condition_evaluated <-& (phi_stmt_842_update_completed_)
          // done: Forward dependencies from (R > 0 ) to transition condition_evaluated
          condition_evaluated &-> ($null)
          // load-store dependencies..
        }
        ( first_time_through_loop_body  back_edge_to_loop_body) 
        ( condition_evaluated )
        ;; [loop_exit] 
        {
          $T [ack] 
        }
        ;; [loop_taken] 
        {
          $T [ack] 
        }
        do_while_stmt_840__entry__ <-| ($entry)
        loop_body_done <-| ( do_while_stmt_840_loop_body ) 
        condition_done |-> (loop_exit loop_taken)
        do_while_stmt_840__exit__ |-> ($exit)
        $bind condition_done <= do_while_stmt_840_loop_body : condition_evaluated
        $bind do_while_stmt_840__entry__  => do_while_stmt_840_loop_body : first_time_through_loop_body 
        $bind loop_back  => do_while_stmt_840_loop_body : back_edge_to_loop_body 
        $terminate (loop_exit loop_taken loop_body_done) (loop_back do_while_stmt_840__exit__)
      }
      do_while_stmt_840__entry__ |-> (do_while_stmt_840)
      do_while_stmt_840__exit__ <-| (do_while_stmt_840)
      ::[assign_stmt_858] 
      {
        // start:  		delay_done := 1  $buffering 1// bits of buffering = 1. 
        //  file nic.linked.aa, line 340
        // constant! 
        // delay_done
        // write to interface object
        // end:  		delay_done := 1  $buffering 1// bits of buffering = 1. 
        // load-store dependencies..
      }
      assign_stmt_858__entry__ |-> (assign_stmt_858)
      assign_stmt_858__exit__ <-| (assign_stmt_858)
      do_while_stmt_840__entry__ <-| (branch_block_stmt_839__entry__)
      assign_stmt_858__entry__ <-| (do_while_stmt_840__exit__)
      assign_stmt_858__exit__ |-> (branch_block_stmt_839__exit__)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %delay_time%loop%
    //  file nic.linked.aa, line 334
    // constant-object-declarations for block %delay_time%loop
    //  file nic.linked.aa, line 330
    // constant-object-declarations for block %delay_time
    //  file nic.linked.aa, line 325
    // constant-declarations for block %delay_time%loop
    //  file nic.linked.aa, line 330
    // do-while statement  
    //  file nic.linked.aa, line 332
    // 0 
    $constant $W[konst_854_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // constant-declarations for block %delay_time%loop%
    //  file nic.linked.aa, line 334
    // constant-declarations for phi:  			$phi R := 			  nR $on   $loopback 			  T $on   $entry 
    // type of target is $uint<32>
    //  file nic.linked.aa, line 335
    // 1 
    $constant $W[konst_849_wire_constant] : $int<32> := _b00000000000000000000000000000001// 1
    // 		delay_done := 1  $buffering 1// bits of buffering = 1. 
    //  file nic.linked.aa, line 340
    // block %delay_time%loop
    //  file nic.linked.aa, line 330
    // do-while statement  
    //  file nic.linked.aa, line 332
    // (R > 0 )
    $intermediate $W[UGT_u32_u1_855_wire] : $int<1>
    // merge-statement  
    //  file nic.linked.aa, line 334
    // 			$phi R := 			  nR $on   $loopback 			  T $on   $entry 
    // type of target is $uint<32>
    //  file nic.linked.aa, line 335
    $W[nR_851_844_buffered] : $int<32>
    $W[T_845_buffered] : $int<32>
    // R
    $W[R_842] : $int<32>
    // 			$volatile nR := (R - 1 ) $buffering 1
    //  file nic.linked.aa, line 338
    // nR
    $W[nR_851] : $int<32>
    // datapath-instances for block %delay_time%loop
    //  file nic.linked.aa, line 330
    // datapath-instances for do-while  
    //  file nic.linked.aa, line 332
    // (R > 0 )
    >[UGT_u32_u1_855_inst] (R_842 konst_854_wire_constant) (UGT_u32_u1_855_wire)   $flowthrough 
    $delay UGT_u32_u1_855_inst 0
    ==0? [do_while_stmt_840_branch] (UGT_u32_u1_855_wire)
    $flowthrough
    // data-path instances for merge  
    //  file nic.linked.aa, line 334
    // 			$phi R := 			  nR $on   $loopback 			  T $on   $entry 
    // type of target is $uint<32>
    //  file nic.linked.aa, line 335
    # := [nR_851_844_buf] (nR_851) (nR_851_844_buffered)     $fullrate
    $buffering $out nR_851_844_buf nR_851_844_buffered  1
    # := [T_845_buf] (T) (T_845_buffered)     $fullrate
    $buffering $out T_845_buf T_845_buffered  1
    # $phi [phi_stmt_842] (nR_851_844_buffered T_845_buffered) ( R_842 ) $fullrate
    // $buffering  $out phi_stmt_842 R_842 2
    // 			$volatile nR := (R - 1 ) $buffering 1
    //  file nic.linked.aa, line 338
    // (R - 1 )
    -[SUB_u32_u32_850_inst] (R_842 konst_849_wire_constant) (nR_851)   $flowthrough 
    $delay SUB_u32_u32_850_inst 0
  }
  // end data-path
  // CP-DP links for do-while  do_while_stmt_840
  //  file nic.linked.aa, line 332
  phi_stmt_842 <=> (branch_block_stmt_839/do_while_stmt_840/do_while_stmt_840_loop_body/phi_stmt_842_loopback_sample_req branch_block_stmt_839/do_while_stmt_840/do_while_stmt_840_loop_body/phi_stmt_842_entry_sample_req) (branch_block_stmt_839/do_while_stmt_840/do_while_stmt_840_loop_body/phi_stmt_842_phi_mux_ack)
  nR_851_844_buf <=> (branch_block_stmt_839/do_while_stmt_840/do_while_stmt_840_loop_body/R_nR_844_Sample/req branch_block_stmt_839/do_while_stmt_840/do_while_stmt_840_loop_body/R_nR_844_Update/req) (branch_block_stmt_839/do_while_stmt_840/do_while_stmt_840_loop_body/R_nR_844_Sample/ack branch_block_stmt_839/do_while_stmt_840/do_while_stmt_840_loop_body/R_nR_844_Update/ack)
  T_845_buf <=> (branch_block_stmt_839/do_while_stmt_840/do_while_stmt_840_loop_body/R_T_845_Sample/req branch_block_stmt_839/do_while_stmt_840/do_while_stmt_840_loop_body/R_T_845_Update/req) (branch_block_stmt_839/do_while_stmt_840/do_while_stmt_840_loop_body/R_T_845_Sample/ack branch_block_stmt_839/do_while_stmt_840/do_while_stmt_840_loop_body/R_T_845_Update/ack)
  // 			$volatile nR := (R - 1 ) $buffering 1
  //  file nic.linked.aa, line 338
  // (R - 1 )
  // R
  // (R > 0 )
  // R
  do_while_stmt_840_branch <=> (branch_block_stmt_839/do_while_stmt_840/do_while_stmt_840_loop_body/condition_evaluated) (branch_block_stmt_839/do_while_stmt_840/loop_exit/ack branch_block_stmt_839/do_while_stmt_840/loop_taken/ack)
}
$module [populateRxQueue] 
{
  $in rx_buffer_pointer:$int<36>
  // can point into 
  // pipe-declarations for block %populateRxQueue
  //  file nic.linked.aa, line 343
  // pipe-declarations for block %populateRxQueue%PushIntoQueue
  //  file nic.linked.aa, line 349
  // pipe-declarations for block %populateRxQueue%PushIntoQueue%
  //  file nic.linked.aa, line 351
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    <>[branch_block_stmt_865] // Branch Block  file nic.linked.aa, line 349
    {
      $P [branch_block_stmt_865__entry__]
      branch_block_stmt_865__entry__ <-| ($entry)
      $P [branch_block_stmt_865__exit__]
      branch_block_stmt_865__exit__ |-> ($exit)
      $P [merge_stmt_866__entry__] 
      $P [merge_stmt_866__exit__] 
      $P [assign_stmt_886_to_assign_stmt_925__entry__] 
      $P [assign_stmt_886_to_assign_stmt_925__exit__] 
      $P [if_stmt_929__entry__] 
      $P [if_stmt_929__exit__] 
      ::[assign_stmt_886_to_assign_stmt_925] 
      {
        // start: WAR dependencies for register_index
        // ignored out-of-scope w_root 			$phi q_index := 			  ((LAST_WRITTEN_RX_QUEUE_INDEX + 1 ) & ($bitcast ($uint<6>) (NUMBER_OF_SERVERS - 1 ) )) $on   $entry 			  n_q_index $on   loopback 
        // type of target is $uint<6>
        // done: WAR dependencies for register_index
        // start:  		$volatile register_index := ($bitcast ($uint<6>) (q_index + RX_QUEUES_REG_START_OFFSET) ) $buffering 1
        //  file nic.linked.aa, line 356
        // volatile! 
        // Source expression
        // ($bitcast ($uint<6>) (q_index + RX_QUEUES_REG_START_OFFSET) )
        // (q_index + RX_QUEUES_REG_START_OFFSET)
        // q_index
        // Target expression
        // (as target) register_index
        // start: WAR dependencies for register_index
        // ignored out-of-scope w_root 			$phi q_index := 			  ((LAST_WRITTEN_RX_QUEUE_INDEX + 1 ) & ($bitcast ($uint<6>) (NUMBER_OF_SERVERS - 1 ) )) $on   $entry 			  n_q_index $on   loopback 
        // type of target is $uint<6>
        // done: WAR dependencies for register_index
        // end:  		$volatile register_index := ($bitcast ($uint<6>) (q_index + RX_QUEUES_REG_START_OFFSET) ) $buffering 1
        // start: 		$call AccessRegister (($bitcast ($uint<1>) _b1  ) ( ~ ($bitcast ($uint<4>) _b0  ) ) register_index ($bitcast ($uint<32>) _b0  ) ) (rx_queue_pointer_32 ) 
        //  file nic.linked.aa, line 358
        $T[call_stmt_898_sample_start_] 
        $T[call_stmt_898_sample_completed_] 
        $T[call_stmt_898_update_start_] 
        $T[call_stmt_898_update_completed_] 
        // Call input argument 0
        // Call input argument 1
        // Call input argument 2
        // register_index
        // Call input argument 3
        // start: Forward dependencies from register_index to transition call_stmt_898_sample_start_
        // done: Forward dependencies from register_index to transition call_stmt_898_sample_start_
        ;;[call_stmt_898_Sample] 
        {
          $T [crr] $T [cra] 
        }
        ;;[call_stmt_898_Update] 
        {
          $T [ccr] $T [cca] 
        }
        call_stmt_898_sample_start_ &-> (call_stmt_898_Sample)
        call_stmt_898_sample_completed_ <-& (call_stmt_898_Sample)
        call_stmt_898_sample_completed_ &-> ($null)
        call_stmt_898_update_start_ &-> (call_stmt_898_Update)
        call_stmt_898_update_completed_ <-& (call_stmt_898_Update)
        // Call output argument 0
        // (as target) rx_queue_pointer_32
        // start: WAR dependencies for rx_queue_pointer_32
        // done: WAR dependencies for rx_queue_pointer_32
        // end: 		$call AccessRegister (($bitcast ($uint<1>) _b1  ) ( ~ ($bitcast ($uint<4>) _b0  ) ) register_index ($bitcast ($uint<32>) _b0  ) ) (rx_queue_pointer_32 ) 
        // start: WAR dependencies for rx_queue_pointer_36
        // done: WAR dependencies for rx_queue_pointer_36
        // start:  		$volatile rx_queue_pointer_36 := (rx_queue_pointer_32 && ($bitcast ($uint<4>) _b0  )) $buffering 1
        //  file nic.linked.aa, line 359
        // volatile! 
        // Source expression
        // (rx_queue_pointer_32 && ($bitcast ($uint<4>) _b0  ))
        // rx_queue_pointer_32
        // Target expression
        // (as target) rx_queue_pointer_36
        // start: WAR dependencies for rx_queue_pointer_36
        // done: WAR dependencies for rx_queue_pointer_36
        // end:  		$volatile rx_queue_pointer_36 := (rx_queue_pointer_32 && ($bitcast ($uint<4>) _b0  )) $buffering 1
        // start: 		$call pushIntoQueue (($bitcast ($uint<1>) _b0  ) rx_queue_pointer_36 ( $slice rx_buffer_pointer 35 4 )  ) (push_status ) 
        //  file nic.linked.aa, line 361
        $T[call_stmt_915_sample_start_] 
        $T[call_stmt_915_sample_completed_] 
        $T[call_stmt_915_update_start_] 
        $T[call_stmt_915_update_completed_] 
        // Call input argument 0
        // Call input argument 1
        // rx_queue_pointer_36
        // Call input argument 2
        // ( $slice rx_buffer_pointer 35 4 ) 
        // rx_buffer_pointer
        // start: Forward dependencies from rx_queue_pointer_36 to transition call_stmt_915_sample_start_
        call_stmt_915_sample_start_ <-& (call_stmt_898_update_completed_)
        // done: Forward dependencies from rx_queue_pointer_36 to transition call_stmt_915_sample_start_
        // start: Forward dependencies from ( $slice rx_buffer_pointer 35 4 )  to transition call_stmt_915_sample_start_
        // done: Forward dependencies from ( $slice rx_buffer_pointer 35 4 )  to transition call_stmt_915_sample_start_
        ;;[call_stmt_915_Sample] 
        {
          $T [crr] $T [cra] 
        }
        ;;[call_stmt_915_Update] 
        {
          $T [ccr] $T [cca] 
        }
        call_stmt_915_sample_start_ &-> (call_stmt_915_Sample)
        call_stmt_915_sample_completed_ <-& (call_stmt_915_Sample)
        call_stmt_915_sample_completed_ &-> ($null)
        call_stmt_915_update_start_ &-> (call_stmt_915_Update)
        call_stmt_915_update_completed_ <-& (call_stmt_915_Update)
        // Call output argument 0
        // (as target) push_status
        // start: WAR dependencies for push_status
        // done: WAR dependencies for push_status
        // end: 		$call pushIntoQueue (($bitcast ($uint<1>) _b0  ) rx_queue_pointer_36 ( $slice rx_buffer_pointer 35 4 )  ) (push_status ) 
        // start:  		n_q_index := ((q_index + 1 ) & ($bitcast ($uint<6>) (NUMBER_OF_SERVERS - 1 ) )) $buffering 1// bits of buffering = 6. 
        //  file nic.linked.aa, line 362
        // Source expression
        // ((q_index + 1 ) & ($bitcast ($uint<6>) (NUMBER_OF_SERVERS - 1 ) ))
        $T[AND_u6_u6_924_sample_start_] 
        $T[AND_u6_u6_924_sample_completed_] 
        $T[AND_u6_u6_924_update_start_] 
        $T[AND_u6_u6_924_update_completed_] 
        // (q_index + 1 )
        // q_index
        // ($bitcast ($uint<6>) (NUMBER_OF_SERVERS - 1 ) )
        // (NUMBER_OF_SERVERS - 1 )
        // NUMBER_OF_SERVERS
        // start: Forward dependencies from (q_index + 1 ) to transition AND_u6_u6_924_sample_start_
        // done: Forward dependencies from (q_index + 1 ) to transition AND_u6_u6_924_sample_start_
        // start: Forward dependencies from ($bitcast ($uint<6>) (NUMBER_OF_SERVERS - 1 ) ) to transition AND_u6_u6_924_sample_start_
        // non-constant expression which depends only on signals/constants?
        // done: Forward dependencies from ($bitcast ($uint<6>) (NUMBER_OF_SERVERS - 1 ) ) to transition AND_u6_u6_924_sample_start_
        ;;[AND_u6_u6_924_Sample] 
        {
          // binary expression 
          $T [rr] $T [ra]  // (split) binary operation 
        }
        ;;[AND_u6_u6_924_Update] 
        {
          // binary expression 
          $T [cr] $T [ca] // (split) binary operation 
        }
        AND_u6_u6_924_sample_start_ &-> (AND_u6_u6_924_Sample)
        AND_u6_u6_924_sample_completed_ <-& (AND_u6_u6_924_Sample)
        AND_u6_u6_924_sample_completed_ &-> ($null)
        AND_u6_u6_924_update_start_ &-> (AND_u6_u6_924_Update)
        AND_u6_u6_924_update_completed_ <-& (AND_u6_u6_924_Update)
        // Target expression
        // (as target) n_q_index
        // start: WAR dependencies for n_q_index
        // done: WAR dependencies for n_q_index
        // end:  		n_q_index := ((q_index + 1 ) & ($bitcast ($uint<6>) (NUMBER_OF_SERVERS - 1 ) )) $buffering 1// bits of buffering = 6. 
        // load-store dependencies..
        // pipe read/write dependencies for pipe MEMORY_TO_NIC_RESPONSE
        // read-dependencies for pipe MEMORY_TO_NIC_RESPONSE
        // write-dependencies for pipe MEMORY_TO_NIC_RESPONSE
        // signal write dependencies for MEMORY_TO_NIC_RESPONSE
        // pipe read/write dependencies for pipe NIC_REQUEST_REGISTER_ACCESS_PIPE
        // read-dependencies for pipe NIC_REQUEST_REGISTER_ACCESS_PIPE
        // write-dependencies for pipe NIC_REQUEST_REGISTER_ACCESS_PIPE
        // signal write dependencies for NIC_REQUEST_REGISTER_ACCESS_PIPE
        // pipe read/write dependencies for pipe NIC_RESPONSE_REGISTER_ACCESS_PIPE
        // read-dependencies for pipe NIC_RESPONSE_REGISTER_ACCESS_PIPE
        // write-dependencies for pipe NIC_RESPONSE_REGISTER_ACCESS_PIPE
        // signal write dependencies for NIC_RESPONSE_REGISTER_ACCESS_PIPE
        // pipe read/write dependencies for pipe NIC_TO_MEMORY_REQUEST
        // read-dependencies for pipe NIC_TO_MEMORY_REQUEST
        // write-dependencies for pipe NIC_TO_MEMORY_REQUEST
        // signal write dependencies for NIC_TO_MEMORY_REQUEST
      }
      assign_stmt_886_to_assign_stmt_925__entry__ |-> (assign_stmt_886_to_assign_stmt_925)
      assign_stmt_886_to_assign_stmt_925__exit__ <-| (assign_stmt_886_to_assign_stmt_925)
      // if-statement  
      //  file nic.linked.aa, line 364
      ;;[if_stmt_929_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      if_stmt_929__entry__ |-> (if_stmt_929_dead_link)
      if_stmt_929__exit__ <-| (if_stmt_929_dead_link)
      ;;[if_stmt_929_eval_test] 
      {
        // test expression evaluate and trigger branch 
        // ( ~ push_status )
        ;;[NOT_u1_u1_931] 
        {
          // unary expression 
          // flow-through
          ;;[SplitProtocol] 
          {
            ;;[Sample] 
            {
              $T [rr] $T [ra]
            }
            ;;[Update] 
            {
              $T [cr] $T [ca]
            }
          }
        }
        $T [branch_req] 
      }
      if_stmt_929__entry__ |-> (if_stmt_929_eval_test)
      $P [NOT_u1_u1_931_place]
      NOT_u1_u1_931_place <-| (if_stmt_929_eval_test)
      ;;[if_stmt_929_if_link] 
      {
        $T [if_choice_transition] 
      }
      ;;[if_stmt_929_else_link] 
      {
        $T [else_choice_transition] 
      }
      NOT_u1_u1_931_place |-> (if_stmt_929_if_link if_stmt_929_else_link)
      $P [call_stmt_934__entry__] 
      $P [call_stmt_934__exit__] 
      $P [if_stmt_935__entry__] 
      $P [if_stmt_935__exit__] 
      ::[call_stmt_934] 
      {
        // start: 			$call delay_time (32  ) (status ) 
        //  file nic.linked.aa, line 365
        $T[call_stmt_934_sample_start_] 
        $T[call_stmt_934_sample_completed_] 
        $T[call_stmt_934_update_start_] 
        $T[call_stmt_934_update_completed_] 
        // Call input argument 0
        ;;[call_stmt_934_Sample] 
        {
          $T [crr] $T [cra] 
        }
        ;;[call_stmt_934_Update] 
        {
          $T [ccr] $T [cca] 
        }
        call_stmt_934_sample_start_ &-> (call_stmt_934_Sample)
        call_stmt_934_sample_completed_ <-& (call_stmt_934_Sample)
        call_stmt_934_sample_completed_ &-> ($null)
        call_stmt_934_update_start_ &-> (call_stmt_934_Update)
        call_stmt_934_update_completed_ <-& (call_stmt_934_Update)
        // Call output argument 0
        // (as target) status
        // start: WAR dependencies for status
        // done: WAR dependencies for status
        // end: 			$call delay_time (32  ) (status ) 
        // load-store dependencies..
      }
      call_stmt_934__entry__ |-> (call_stmt_934)
      call_stmt_934__exit__ <-| (call_stmt_934)
      // if-statement  
      //  file nic.linked.aa, line 0
      ;;[if_stmt_935_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      if_stmt_935__entry__ |-> (if_stmt_935_dead_link)
      if_stmt_935__exit__ <-| (if_stmt_935_dead_link)
      ;;[if_stmt_935_eval_test] 
      {
        // test expression evaluate and trigger branch 
        // (status == 0 )
        ;;[EQ_u1_u1_938] 
        {
          // binary expression 
          ||[EQ_u1_u1_938_inputs] 
          {
          }
          // flow-through
          ;;[SplitProtocol] 
          {
            ;;[Sample] 
            {
              $T [rr] $T [ra]
            }
            ;;[Update] 
            {
              $T [cr] $T [ca]
            }
          }
        }
        $T [branch_req] 
      }
      if_stmt_935__entry__ |-> (if_stmt_935_eval_test)
      $P [EQ_u1_u1_938_place]
      EQ_u1_u1_938_place <-| (if_stmt_935_eval_test)
      ;;[if_stmt_935_if_link] 
      {
        $T [if_choice_transition] 
      }
      ;;[if_stmt_935_else_link] 
      {
        $T [else_choice_transition] 
      }
      EQ_u1_u1_938_place |-> (if_stmt_935_if_link if_stmt_935_else_link)
      $P [loopback]
      loopback <-| (if_stmt_935_if_link)
      if_stmt_935__exit__ <-| (if_stmt_935_else_link)
      call_stmt_934__entry__ <-| (if_stmt_929_if_link)
      if_stmt_935__entry__ <-| (call_stmt_934__exit__)
      if_stmt_935__exit__ |-> (if_stmt_929__exit__)
      $P [assign_stmt_944_to_assign_stmt_947__entry__] 
      $P [assign_stmt_944_to_assign_stmt_947__exit__] 
      ::[assign_stmt_944_to_assign_stmt_947] 
      {
        // start:  			LAST_WRITTEN_RX_QUEUE_INDEX := q_index $buffering 1// bits of buffering = 6. 
        //  file nic.linked.aa, line 370
        // Source expression
        // q_index
        // Target expression
        // (as target) LAST_WRITTEN_RX_QUEUE_INDEX
        $T[WPIPE_LAST_WRITTEN_RX_QUEUE_INDEX_942_sample_start_] 
        $T[WPIPE_LAST_WRITTEN_RX_QUEUE_INDEX_942_sample_completed_] 
        $T[WPIPE_LAST_WRITTEN_RX_QUEUE_INDEX_942_update_start_] 
        $T[WPIPE_LAST_WRITTEN_RX_QUEUE_INDEX_942_update_completed_] 
        ;;[WPIPE_LAST_WRITTEN_RX_QUEUE_INDEX_942_Sample] 
        {
          // pipe write sample-start LAST_WRITTEN_RX_QUEUE_INDEX
          $T [req] $T [ack] 
        }
        ;;[WPIPE_LAST_WRITTEN_RX_QUEUE_INDEX_942_Update] 
        {
          // pipe write update (complete) LAST_WRITTEN_RX_QUEUE_INDEX
          $T [req] $T [ack] 
        }
        WPIPE_LAST_WRITTEN_RX_QUEUE_INDEX_942_sample_start_ &-> (WPIPE_LAST_WRITTEN_RX_QUEUE_INDEX_942_Sample)
        WPIPE_LAST_WRITTEN_RX_QUEUE_INDEX_942_sample_completed_ <-& (WPIPE_LAST_WRITTEN_RX_QUEUE_INDEX_942_Sample)
        WPIPE_LAST_WRITTEN_RX_QUEUE_INDEX_942_update_start_ <-& (WPIPE_LAST_WRITTEN_RX_QUEUE_INDEX_942_sample_completed_)
        WPIPE_LAST_WRITTEN_RX_QUEUE_INDEX_942_update_start_ &-> (WPIPE_LAST_WRITTEN_RX_QUEUE_INDEX_942_Update)
        WPIPE_LAST_WRITTEN_RX_QUEUE_INDEX_942_update_completed_ <-& (WPIPE_LAST_WRITTEN_RX_QUEUE_INDEX_942_Update)
        // start: Forward dependencies from q_index to transition WPIPE_LAST_WRITTEN_RX_QUEUE_INDEX_942_sample_start_
        // done: Forward dependencies from q_index to transition WPIPE_LAST_WRITTEN_RX_QUEUE_INDEX_942_sample_start_
        // end:  			LAST_WRITTEN_RX_QUEUE_INDEX := q_index $buffering 1// bits of buffering = 6. 
        // start:  			selected_q_index := q_index $buffering 1// bits of buffering = 6.  Orphaned statement with target selected_q_index ?? 
        //  file nic.linked.aa, line 371
        $T[assign_stmt_947_sample_start_] 
        $T[assign_stmt_947_sample_completed_] 
        $T[assign_stmt_947_update_start_] 
        $T[assign_stmt_947_update_completed_] 
        // Source expression
        // q_index
        // Target expression
        // (as target) selected_q_index
        // both source and target are implicit: use interlock 
        // Interlock 
        ;;[assign_stmt_947_Sample] 
        {
          $T [req] $T [ack] // interlock-sample.
        }
        ;;[assign_stmt_947_Update] 
        {
          $T [req] $T [ack] // interlock-update.
        }
        assign_stmt_947_sample_start_ &-> (assign_stmt_947_Sample)
        assign_stmt_947_sample_completed_ <-& (assign_stmt_947_Sample)
        assign_stmt_947_sample_completed_ &-> ($null)
        assign_stmt_947_update_start_ &-> (assign_stmt_947_Update)
        assign_stmt_947_update_completed_ <-& (assign_stmt_947_Update)
        // start: Forward dependencies from q_index to transition assign_stmt_947_sample_start_
        // done: Forward dependencies from q_index to transition assign_stmt_947_sample_start_
        // start: WAR dependencies for selected_q_index
        // done: WAR dependencies for selected_q_index
        // end:  			selected_q_index := q_index $buffering 1// bits of buffering = 6.  Orphaned statement with target selected_q_index ?? 
        // load-store dependencies..
        // pipe read/write dependencies for pipe LAST_WRITTEN_RX_QUEUE_INDEX
        // read-dependencies for pipe LAST_WRITTEN_RX_QUEUE_INDEX
        // write-dependencies for pipe LAST_WRITTEN_RX_QUEUE_INDEX
        // signal write dependencies for LAST_WRITTEN_RX_QUEUE_INDEX
      }
      assign_stmt_944_to_assign_stmt_947__entry__ |-> (assign_stmt_944_to_assign_stmt_947)
      assign_stmt_944_to_assign_stmt_947__exit__ <-| (assign_stmt_944_to_assign_stmt_947)
      assign_stmt_944_to_assign_stmt_947__entry__ <-| (if_stmt_929_else_link)
      assign_stmt_944_to_assign_stmt_947__exit__ |-> (if_stmt_929__exit__)
      // control-path for merge  
      //  file nic.linked.aa, line 351
      ;;[merge_stmt_866_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      merge_stmt_866__entry__ |-> (merge_stmt_866_dead_link)
      merge_stmt_866__exit__ <-| (merge_stmt_866_dead_link)
      //---------------------   merge statement  file nic.linked.aa, line 351  --------------------------
      ||[merge_stmt_866__entry___PhiReq] 
      {
        ;;[phi_stmt_867] 
        {
          ||[phi_stmt_867_sources] 
          {
            // sources for 			$phi q_index := 			  ((LAST_WRITTEN_RX_QUEUE_INDEX + 1 ) & ($bitcast ($uint<6>) (NUMBER_OF_SERVERS - 1 ) )) $on   $entry 			  n_q_index $on   loopback 
            // type of target is $uint<6>
            // trivial non-constant source .... interlock-buffer introduced 
            // ((LAST_WRITTEN_RX_QUEUE_INDEX + 1 ) & ($bitcast ($uint<6>) (NUMBER_OF_SERVERS - 1 ) ))
            ;;[AND_u6_u6_876] 
            {
              // binary expression 
              ||[AND_u6_u6_876_inputs] 
              {
                // (LAST_WRITTEN_RX_QUEUE_INDEX + 1 )
                ;;[ADD_u6_u6_871] 
                {
                  // binary expression 
                  ||[ADD_u6_u6_871_inputs] 
                  {
                    // LAST_WRITTEN_RX_QUEUE_INDEX
                    ;;[RPIPE_LAST_WRITTEN_RX_QUEUE_INDEX_869] 
                    {
                      // pipe read
                      ;;[Sample] 
                      {
                        $T [req] $T [ack] 
                      }
                      ;;[Update] 
                      {
                        $T [req] $T [ack] 
                      }
                    }
                  }
                  // flow-through
                  ;;[SplitProtocol] 
                  {
                    ;;[Sample] 
                    {
                      $T [rr] $T [ra]
                    }
                    ;;[Update] 
                    {
                      $T [cr] $T [ca]
                    }
                  }
                }
                // ($bitcast ($uint<6>) (NUMBER_OF_SERVERS - 1 ) )
                ;;[type_cast_875] 
                {
                  // type-cast expression
                  // (NUMBER_OF_SERVERS - 1 )
                  ;;[SUB_u32_u32_874] 
                  {
                    // binary expression 
                    ||[SUB_u32_u32_874_inputs] 
                    {
                      // NUMBER_OF_SERVERS
                      ;;[RPIPE_NUMBER_OF_SERVERS_872] 
                      {
                        // pipe read
                        ;;[Sample] 
                        {
                          $T [req] $T [ack] 
                        }
                        ;;[Update] 
                        {
                          $T [req] $T [ack] 
                        }
                      }
                    }
                    // flow-through
                    ;;[SplitProtocol] 
                    {
                      ;;[Sample] 
                      {
                        $T [rr] $T [ra]
                      }
                      ;;[Update] 
                      {
                        $T [cr] $T [ca]
                      }
                    }
                  }
                  // flow-through
                  ;;[SplitProtocol] 
                  {
                    ;;[Sample] 
                    {
                      $T [rr] $T [ra]  
                    }
                    ;;[Update] 
                    {
                      $T [cr] $T [ca] 
                    }
                  }
                }
              }
              ||[SplitProtocol] 
              {
                ;;[Sample] 
                {
                  $T [rr] $T [ra]
                }
                ;;[Update] 
                {
                  $T [cr] $T [ca]
                }
              }
            }
          }
          $T [phi_stmt_867_req] 
        }
      }
      merge_stmt_866__entry__ |-> (merge_stmt_866__entry___PhiReq)
      ||[loopback_PhiReq] 
      {
        ;;[phi_stmt_867] 
        {
          ||[phi_stmt_867_sources] 
          {
            // sources for 			$phi q_index := 			  ((LAST_WRITTEN_RX_QUEUE_INDEX + 1 ) & ($bitcast ($uint<6>) (NUMBER_OF_SERVERS - 1 ) )) $on   $entry 			  n_q_index $on   loopback 
            // type of target is $uint<6>
            // trivial non-constant source .... interlock-buffer introduced 
            || [Interlock] 
            {
              ;;[Sample] 
              {
                $T [req] $T [ack]
              }
              ;;[Update] 
              {
                $T [req] $T [ack]
              }
            }
          }
          $T [phi_stmt_867_req] 
        }
      }
      loopback |-> (loopback_PhiReq)
      $P [merge_stmt_866_PhiReqMerge] 
      merge_stmt_866_PhiReqMerge <-| ( merge_stmt_866__entry___PhiReq  loopback_PhiReq )
      ||[merge_stmt_866_PhiAck] 
      {
        $T [phi_stmt_867_ack] 
      }
      merge_stmt_866_PhiReqMerge |-> (merge_stmt_866_PhiAck)
      merge_stmt_866__exit__  <-| (merge_stmt_866_PhiAck)
      //---------------------  end of merge statement  file nic.linked.aa, line 351  --------------------------
      merge_stmt_866__entry__ <-| (branch_block_stmt_865__entry__)
      assign_stmt_886_to_assign_stmt_925__entry__ <-| (merge_stmt_866__exit__)
      if_stmt_929__entry__ <-| (assign_stmt_886_to_assign_stmt_925__exit__)
      if_stmt_929__exit__ |-> (branch_block_stmt_865__exit__)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %populateRxQueue%PushIntoQueue%
    //  file nic.linked.aa, line 351
    // constant-object-declarations for block %populateRxQueue%PushIntoQueue
    //  file nic.linked.aa, line 349
    // constant-object-declarations for block %populateRxQueue
    //  file nic.linked.aa, line 343
    // constant-declarations for block %populateRxQueue%PushIntoQueue
    //  file nic.linked.aa, line 349
    // constant-declarations for block %populateRxQueue%PushIntoQueue%
    //  file nic.linked.aa, line 351
    // constant-declarations for phi:  			$phi q_index := 			  ((LAST_WRITTEN_RX_QUEUE_INDEX + 1 ) & ($bitcast ($uint<6>) (NUMBER_OF_SERVERS - 1 ) )) $on   $entry 			  n_q_index $on   loopback 
    // type of target is $uint<6>
    //  file nic.linked.aa, line 352
    // 1 
    $constant $W[konst_870_wire_constant] : $int<6> := _b000001// 1
    // 1 
    $constant $W[konst_873_wire_constant] : $int<32> := _b00000000000000000000000000000001// 1
    // RX_QUEUES_REG_START_OFFSET
    $constant $W[R_RX_QUEUES_REG_START_OFFSET_883_wire_constant] : $int<6> := _b000010// 2
    // 		$call AccessRegister (($bitcast ($uint<1>) _b1  ) ( ~ ($bitcast ($uint<4>) _b0  ) ) register_index ($bitcast ($uint<32>) _b0  ) ) (rx_queue_pointer_32 ) 
    //  file nic.linked.aa, line 358
    // ($bitcast ($uint<1>) _b1  )
    $constant $W[type_cast_890_wire_constant] : $int<1> := _b1// 1
    // ( ~ ($bitcast ($uint<4>) _b0  ) )
    $constant $W[NOT_u4_u4_893_wire_constant] : $int<4> := _b1111// -1
    // ($bitcast ($uint<32>) _b0  )
    $constant $W[type_cast_896_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // ($bitcast ($uint<4>) _b0  )
    $constant $W[type_cast_902_wire_constant] : $int<4> := _b0000// 0
    // 		$call pushIntoQueue (($bitcast ($uint<1>) _b0  ) rx_queue_pointer_36 ( $slice rx_buffer_pointer 35 4 )  ) (push_status ) 
    //  file nic.linked.aa, line 361
    // ($bitcast ($uint<1>) _b0  )
    $constant $W[type_cast_910_wire_constant] : $int<1> := _b0// 0
    // 1 
    $constant $W[konst_918_wire_constant] : $int<6> := _b000001// 1
    // 1 
    $constant $W[konst_921_wire_constant] : $int<32> := _b00000000000000000000000000000001// 1
    // if-statement  
    //  file nic.linked.aa, line 364
    // 			$call delay_time (32  ) (status ) 
    //  file nic.linked.aa, line 365
    // 32 
    $constant $W[konst_932_wire_constant] : $int<32> := _b00000000000000000000000000100000// 32
    // if-statement  
    //  file nic.linked.aa, line 0
    // 0 
    $constant $W[konst_937_wire_constant] : $int<1> := _b0// 0
    // block %populateRxQueue%PushIntoQueue
    //  file nic.linked.aa, line 349
    // merge-statement  
    //  file nic.linked.aa, line 351
    // 			$phi q_index := 			  ((LAST_WRITTEN_RX_QUEUE_INDEX + 1 ) & ($bitcast ($uint<6>) (NUMBER_OF_SERVERS - 1 ) )) $on   $entry 			  n_q_index $on   loopback 
    // type of target is $uint<6>
    //  file nic.linked.aa, line 352
    // LAST_WRITTEN_RX_QUEUE_INDEX
    $W[RPIPE_LAST_WRITTEN_RX_QUEUE_INDEX_869_wire] : $int<6>
    // (LAST_WRITTEN_RX_QUEUE_INDEX + 1 )
    $intermediate $W[ADD_u6_u6_871_wire] : $int<6>
    // NUMBER_OF_SERVERS
    $W[RPIPE_NUMBER_OF_SERVERS_872_wire] : $int<32>
    // (NUMBER_OF_SERVERS - 1 )
    $intermediate $W[SUB_u32_u32_874_wire] : $int<32>
    // ($bitcast ($uint<6>) (NUMBER_OF_SERVERS - 1 ) )
    $intermediate $W[type_cast_875_wire] : $int<6>
    // ((LAST_WRITTEN_RX_QUEUE_INDEX + 1 ) & ($bitcast ($uint<6>) (NUMBER_OF_SERVERS - 1 ) ))
    $intermediate $W[AND_u6_u6_876_wire] : $int<6>
    $W[n_q_index_925_877_buffered] : $int<6>
    // q_index
    $W[q_index_867] : $int<6>
    // 		$volatile register_index := ($bitcast ($uint<6>) (q_index + RX_QUEUES_REG_START_OFFSET) ) $buffering 1
    //  file nic.linked.aa, line 356
    // (q_index + RX_QUEUES_REG_START_OFFSET)
    $intermediate $W[ADD_u6_u6_884_wire] : $int<6>
    // register_index
    $W[register_index_886] : $int<6>
    // 		$call AccessRegister (($bitcast ($uint<1>) _b1  ) ( ~ ($bitcast ($uint<4>) _b0  ) ) register_index ($bitcast ($uint<32>) _b0  ) ) (rx_queue_pointer_32 ) 
    //  file nic.linked.aa, line 358
    // rx_queue_pointer_32
    $W[rx_queue_pointer_32_898] : $int<32>
    // 		$volatile rx_queue_pointer_36 := (rx_queue_pointer_32 && ($bitcast ($uint<4>) _b0  )) $buffering 1
    //  file nic.linked.aa, line 359
    // rx_queue_pointer_36
    $W[rx_queue_pointer_36_904] : $int<36>
    // 		$call pushIntoQueue (($bitcast ($uint<1>) _b0  ) rx_queue_pointer_36 ( $slice rx_buffer_pointer 35 4 )  ) (push_status ) 
    //  file nic.linked.aa, line 361
    // ( $slice rx_buffer_pointer 35 4 ) 
    $intermediate $W[slice_913_wire] : $int<32>
    // push_status
    $W[push_status_915] : $int<1>
    // 		n_q_index := ((q_index + 1 ) & ($bitcast ($uint<6>) (NUMBER_OF_SERVERS - 1 ) )) $buffering 1// bits of buffering = 6. 
    //  file nic.linked.aa, line 362
    // (q_index + 1 )
    $intermediate $W[ADD_u6_u6_919_wire] : $int<6>
    // NUMBER_OF_SERVERS
    $W[RPIPE_NUMBER_OF_SERVERS_920_wire] : $int<32>
    // (NUMBER_OF_SERVERS - 1 )
    $intermediate $W[SUB_u32_u32_922_wire] : $int<32>
    // ($bitcast ($uint<6>) (NUMBER_OF_SERVERS - 1 ) )
    $intermediate $W[type_cast_923_wire] : $int<6>
    // n_q_index
    $W[n_q_index_925] : $int<6>
    // if statement  
    //  file nic.linked.aa, line 364
    // ( ~ push_status )
    $intermediate $W[NOT_u1_u1_931_wire] : $int<1>
    // 			$call delay_time (32  ) (status ) 
    //  file nic.linked.aa, line 365
    // status
    $W[status_934] : $int<1>
    // if statement  
    //  file nic.linked.aa, line 0
    // (status == 0 )
    $intermediate $W[EQ_u1_u1_938_wire] : $int<1>
    // 			LAST_WRITTEN_RX_QUEUE_INDEX := q_index $buffering 1// bits of buffering = 6. 
    //  file nic.linked.aa, line 370
    // LAST_WRITTEN_RX_QUEUE_INDEX
    // 			selected_q_index := q_index $buffering 1// bits of buffering = 6.  Orphaned statement with target selected_q_index ?? 
    //  file nic.linked.aa, line 371
    // selected_q_index
    $W[selected_q_index_947] : $int<6>
    // datapath-instances for block %populateRxQueue%PushIntoQueue
    //  file nic.linked.aa, line 349
    // data-path instances for merge  
    //  file nic.linked.aa, line 351
    // 			$phi q_index := 			  ((LAST_WRITTEN_RX_QUEUE_INDEX + 1 ) & ($bitcast ($uint<6>) (NUMBER_OF_SERVERS - 1 ) )) $on   $entry 			  n_q_index $on   loopback 
    // type of target is $uint<6>
    //  file nic.linked.aa, line 352
    // LAST_WRITTEN_RX_QUEUE_INDEX
    $ioport $in [RPIPE_LAST_WRITTEN_RX_QUEUE_INDEX_869_inst] (LAST_WRITTEN_RX_QUEUE_INDEX) (RPIPE_LAST_WRITTEN_RX_QUEUE_INDEX_869_wire) 
    $buffering $out RPIPE_LAST_WRITTEN_RX_QUEUE_INDEX_869_inst RPIPE_LAST_WRITTEN_RX_QUEUE_INDEX_869_wire 1
    // (LAST_WRITTEN_RX_QUEUE_INDEX + 1 )
    +[ADD_u6_u6_871_inst] (RPIPE_LAST_WRITTEN_RX_QUEUE_INDEX_869_wire konst_870_wire_constant) (ADD_u6_u6_871_wire)   $flowthrough 
    $delay ADD_u6_u6_871_inst 0
    // NUMBER_OF_SERVERS
    $ioport $in [RPIPE_NUMBER_OF_SERVERS_872_inst] (NUMBER_OF_SERVERS) (RPIPE_NUMBER_OF_SERVERS_872_wire) 
    $buffering $out RPIPE_NUMBER_OF_SERVERS_872_inst RPIPE_NUMBER_OF_SERVERS_872_wire 1
    // (NUMBER_OF_SERVERS - 1 )
    -[SUB_u32_u32_874_inst] (RPIPE_NUMBER_OF_SERVERS_872_wire konst_873_wire_constant) (SUB_u32_u32_874_wire)   $flowthrough 
    $delay SUB_u32_u32_874_inst 0
    // ($bitcast ($uint<6>) (NUMBER_OF_SERVERS - 1 ) )
    # := [type_cast_875_inst] (SUB_u32_u32_874_wire) (type_cast_875_wire)   $flowthrough
    $delay type_cast_875_inst 0
    // ((LAST_WRITTEN_RX_QUEUE_INDEX + 1 ) & ($bitcast ($uint<6>) (NUMBER_OF_SERVERS - 1 ) ))
    &[AND_u6_u6_876_inst] (ADD_u6_u6_871_wire type_cast_875_wire) (AND_u6_u6_876_wire)   
    $buffering  $out AND_u6_u6_876_inst AND_u6_u6_876_wire 1
    $delay AND_u6_u6_876_inst 1
    # := [n_q_index_925_877_buf] (n_q_index_925) (n_q_index_925_877_buffered)    
    $phi [phi_stmt_867] (AND_u6_u6_876_wire n_q_index_925_877_buffered) ( q_index_867 ) 
    // 		$volatile register_index := ($bitcast ($uint<6>) (q_index + RX_QUEUES_REG_START_OFFSET) ) $buffering 1
    //  file nic.linked.aa, line 356
    // (q_index + RX_QUEUES_REG_START_OFFSET)
    +[ADD_u6_u6_884_inst] (q_index_867 R_RX_QUEUES_REG_START_OFFSET_883_wire_constant) (ADD_u6_u6_884_wire)   $flowthrough 
    $delay ADD_u6_u6_884_inst 0
    // ($bitcast ($uint<6>) (q_index + RX_QUEUES_REG_START_OFFSET) )
    # := [type_cast_885_inst] (ADD_u6_u6_884_wire) (register_index_886)   $flowthrough
    $delay type_cast_885_inst 0
    // 		$call AccessRegister (($bitcast ($uint<1>) _b1  ) ( ~ ($bitcast ($uint<4>) _b0  ) ) register_index ($bitcast ($uint<32>) _b0  ) ) (rx_queue_pointer_32 ) 
    //  file nic.linked.aa, line 358
    $call [call_stmt_898_call] $module AccessRegister(type_cast_890_wire_constant NOT_u4_u4_893_wire_constant register_index_886 type_cast_896_wire_constant) (rx_queue_pointer_32_898)  
    $delay call_stmt_898_call 4
    $buffering  $in call_stmt_898_call type_cast_890_wire_constant 1
    $buffering  $in call_stmt_898_call NOT_u4_u4_893_wire_constant 1
    $buffering  $in call_stmt_898_call register_index_886 1
    $buffering  $in call_stmt_898_call type_cast_896_wire_constant 1
    $buffering  $out call_stmt_898_call rx_queue_pointer_32_898 1
    // 		$volatile rx_queue_pointer_36 := (rx_queue_pointer_32 && ($bitcast ($uint<4>) _b0  )) $buffering 1
    //  file nic.linked.aa, line 359
    // (rx_queue_pointer_32 && ($bitcast ($uint<4>) _b0  ))
    &&[CONCAT_u32_u36_903_inst] (rx_queue_pointer_32_898 type_cast_902_wire_constant) (rx_queue_pointer_36_904)   $flowthrough 
    $delay CONCAT_u32_u36_903_inst 0
    // 		$call pushIntoQueue (($bitcast ($uint<1>) _b0  ) rx_queue_pointer_36 ( $slice rx_buffer_pointer 35 4 )  ) (push_status ) 
    //  file nic.linked.aa, line 361
    // ( $slice rx_buffer_pointer 35 4 ) 
    [:] [slice_913_inst] (rx_buffer_pointer 35 4) (slice_913_wire)  $flowthrough
    $delay slice_913_inst 0
    $call [call_stmt_915_call] $module pushIntoQueue(type_cast_910_wire_constant rx_queue_pointer_36_904 slice_913_wire) (push_status_915)  
    $delay call_stmt_915_call 4
    $buffering  $in call_stmt_915_call type_cast_910_wire_constant 1
    $buffering  $in call_stmt_915_call rx_queue_pointer_36_904 1
    $buffering  $in call_stmt_915_call slice_913_wire 1
    $buffering  $out call_stmt_915_call push_status_915 1
    // 		n_q_index := ((q_index + 1 ) & ($bitcast ($uint<6>) (NUMBER_OF_SERVERS - 1 ) )) $buffering 1// bits of buffering = 6. 
    //  file nic.linked.aa, line 362
    // (q_index + 1 )
    +[ADD_u6_u6_919_inst] (q_index_867 konst_918_wire_constant) (ADD_u6_u6_919_wire)   $flowthrough 
    $delay ADD_u6_u6_919_inst 0
    // NUMBER_OF_SERVERS
    $ioport $in [RPIPE_NUMBER_OF_SERVERS_920_inst] (NUMBER_OF_SERVERS) (RPIPE_NUMBER_OF_SERVERS_920_wire) 
    $buffering $out RPIPE_NUMBER_OF_SERVERS_920_inst RPIPE_NUMBER_OF_SERVERS_920_wire 1
    // (NUMBER_OF_SERVERS - 1 )
    -[SUB_u32_u32_922_inst] (RPIPE_NUMBER_OF_SERVERS_920_wire konst_921_wire_constant) (SUB_u32_u32_922_wire)   $flowthrough 
    $delay SUB_u32_u32_922_inst 0
    // ($bitcast ($uint<6>) (NUMBER_OF_SERVERS - 1 ) )
    # := [type_cast_923_inst] (SUB_u32_u32_922_wire) (type_cast_923_wire)   $flowthrough
    $delay type_cast_923_inst 0
    // ((q_index + 1 ) & ($bitcast ($uint<6>) (NUMBER_OF_SERVERS - 1 ) ))
    &[AND_u6_u6_924_inst] (ADD_u6_u6_919_wire type_cast_923_wire) (n_q_index_925)   
    $buffering  $out AND_u6_u6_924_inst n_q_index_925 1
    $delay AND_u6_u6_924_inst 1
    // datapath-instances for if  
    //  file nic.linked.aa, line 364
    // ( ~ push_status )
    ~ [NOT_u1_u1_931_inst] (push_status_915) (NOT_u1_u1_931_wire)   $flowthrough
    $delay NOT_u1_u1_931_inst 0
    ==0? [if_stmt_929_branch] (NOT_u1_u1_931_wire)
    // 			$call delay_time (32  ) (status ) 
    //  file nic.linked.aa, line 365
    $call [call_stmt_934_call] $module delay_time(konst_932_wire_constant) (status_934)  
    $delay call_stmt_934_call 2
    $buffering  $in call_stmt_934_call konst_932_wire_constant 1
    $buffering  $out call_stmt_934_call status_934 1
    // datapath-instances for if  
    //  file nic.linked.aa, line 0
    // (status == 0 )
    ==[EQ_u1_u1_938_inst] (status_934 konst_937_wire_constant) (EQ_u1_u1_938_wire)   $flowthrough 
    $delay EQ_u1_u1_938_inst 0
    ==0? [if_stmt_935_branch] (EQ_u1_u1_938_wire)
    // 			LAST_WRITTEN_RX_QUEUE_INDEX := q_index $buffering 1// bits of buffering = 6. 
    //  file nic.linked.aa, line 370
    // LAST_WRITTEN_RX_QUEUE_INDEX
    $ioport $out [WPIPE_LAST_WRITTEN_RX_QUEUE_INDEX_942_inst]  (q_index_867) (LAST_WRITTEN_RX_QUEUE_INDEX) 
    // 			selected_q_index := q_index $buffering 1// bits of buffering = 6.  Orphaned statement with target selected_q_index ?? 
    //  file nic.linked.aa, line 371
    # := [W_selected_q_index_945_inst] (q_index_867) (selected_q_index_947)    
  }
  // end data-path
  // CP-DP links for merge  
  //  file nic.linked.aa, line 351
  // LAST_WRITTEN_RX_QUEUE_INDEX
  // (LAST_WRITTEN_RX_QUEUE_INDEX + 1 )
  // NUMBER_OF_SERVERS
  // (NUMBER_OF_SERVERS - 1 )
  // ((LAST_WRITTEN_RX_QUEUE_INDEX + 1 ) & ($bitcast ($uint<6>) (NUMBER_OF_SERVERS - 1 ) ))
  AND_u6_u6_876_inst <=> (branch_block_stmt_865/merge_stmt_866__entry___PhiReq/phi_stmt_867/phi_stmt_867_sources/AND_u6_u6_876/SplitProtocol/Sample/rr branch_block_stmt_865/merge_stmt_866__entry___PhiReq/phi_stmt_867/phi_stmt_867_sources/AND_u6_u6_876/SplitProtocol/Update/cr) (branch_block_stmt_865/merge_stmt_866__entry___PhiReq/phi_stmt_867/phi_stmt_867_sources/AND_u6_u6_876/SplitProtocol/Sample/ra branch_block_stmt_865/merge_stmt_866__entry___PhiReq/phi_stmt_867/phi_stmt_867_sources/AND_u6_u6_876/SplitProtocol/Update/ca)
  n_q_index_925_877_buf <=> (branch_block_stmt_865/loopback_PhiReq/phi_stmt_867/phi_stmt_867_sources/Interlock/Sample/req branch_block_stmt_865/loopback_PhiReq/phi_stmt_867/phi_stmt_867_sources/Interlock/Update/req) (branch_block_stmt_865/loopback_PhiReq/phi_stmt_867/phi_stmt_867_sources/Interlock/Sample/ack branch_block_stmt_865/loopback_PhiReq/phi_stmt_867/phi_stmt_867_sources/Interlock/Update/ack)
  phi_stmt_867 <=> (branch_block_stmt_865/merge_stmt_866__entry___PhiReq/phi_stmt_867/phi_stmt_867_req branch_block_stmt_865/loopback_PhiReq/phi_stmt_867/phi_stmt_867_req) (branch_block_stmt_865/merge_stmt_866_PhiAck/phi_stmt_867_ack)
  // 		$volatile register_index := ($bitcast ($uint<6>) (q_index + RX_QUEUES_REG_START_OFFSET) ) $buffering 1
  //  file nic.linked.aa, line 356
  // (q_index + RX_QUEUES_REG_START_OFFSET)
  // q_index
  // 		$call AccessRegister (($bitcast ($uint<1>) _b1  ) ( ~ ($bitcast ($uint<4>) _b0  ) ) register_index ($bitcast ($uint<32>) _b0  ) ) (rx_queue_pointer_32 ) 
  //  file nic.linked.aa, line 358
  // register_index
  call_stmt_898_call <=> (branch_block_stmt_865/assign_stmt_886_to_assign_stmt_925/call_stmt_898_Sample/crr branch_block_stmt_865/assign_stmt_886_to_assign_stmt_925/call_stmt_898_Update/ccr) (branch_block_stmt_865/assign_stmt_886_to_assign_stmt_925/call_stmt_898_Sample/cra branch_block_stmt_865/assign_stmt_886_to_assign_stmt_925/call_stmt_898_Update/cca)
  // 		$volatile rx_queue_pointer_36 := (rx_queue_pointer_32 && ($bitcast ($uint<4>) _b0  )) $buffering 1
  //  file nic.linked.aa, line 359
  // (rx_queue_pointer_32 && ($bitcast ($uint<4>) _b0  ))
  // rx_queue_pointer_32
  // 		$call pushIntoQueue (($bitcast ($uint<1>) _b0  ) rx_queue_pointer_36 ( $slice rx_buffer_pointer 35 4 )  ) (push_status ) 
  //  file nic.linked.aa, line 361
  // rx_queue_pointer_36
  // rx_buffer_pointer
  call_stmt_915_call <=> (branch_block_stmt_865/assign_stmt_886_to_assign_stmt_925/call_stmt_915_Sample/crr branch_block_stmt_865/assign_stmt_886_to_assign_stmt_925/call_stmt_915_Update/ccr) (branch_block_stmt_865/assign_stmt_886_to_assign_stmt_925/call_stmt_915_Sample/cra branch_block_stmt_865/assign_stmt_886_to_assign_stmt_925/call_stmt_915_Update/cca)
  // 		n_q_index := ((q_index + 1 ) & ($bitcast ($uint<6>) (NUMBER_OF_SERVERS - 1 ) )) $buffering 1// bits of buffering = 6. 
  //  file nic.linked.aa, line 362
  // ((q_index + 1 ) & ($bitcast ($uint<6>) (NUMBER_OF_SERVERS - 1 ) ))
  // (q_index + 1 )
  // q_index
  // (NUMBER_OF_SERVERS - 1 )
  // NUMBER_OF_SERVERS
  AND_u6_u6_924_inst <=> (branch_block_stmt_865/assign_stmt_886_to_assign_stmt_925/AND_u6_u6_924_Sample/rr branch_block_stmt_865/assign_stmt_886_to_assign_stmt_925/AND_u6_u6_924_Update/cr) (branch_block_stmt_865/assign_stmt_886_to_assign_stmt_925/AND_u6_u6_924_Sample/ra branch_block_stmt_865/assign_stmt_886_to_assign_stmt_925/AND_u6_u6_924_Update/ca)
  // CP-DP links for if  
  //  file nic.linked.aa, line 364
  // ( ~ push_status )
  if_stmt_929_branch <=> (branch_block_stmt_865/if_stmt_929_eval_test/branch_req) (branch_block_stmt_865/if_stmt_929_else_link/else_choice_transition branch_block_stmt_865/if_stmt_929_if_link/if_choice_transition)
  // 			$call delay_time (32  ) (status ) 
  //  file nic.linked.aa, line 365
  call_stmt_934_call <=> (branch_block_stmt_865/call_stmt_934/call_stmt_934_Sample/crr branch_block_stmt_865/call_stmt_934/call_stmt_934_Update/ccr) (branch_block_stmt_865/call_stmt_934/call_stmt_934_Sample/cra branch_block_stmt_865/call_stmt_934/call_stmt_934_Update/cca)
  // CP-DP links for if  
  //  file nic.linked.aa, line 0
  // (status == 0 )
  if_stmt_935_branch <=> (branch_block_stmt_865/if_stmt_935_eval_test/branch_req) (branch_block_stmt_865/if_stmt_935_else_link/else_choice_transition branch_block_stmt_865/if_stmt_935_if_link/if_choice_transition)
  // 			LAST_WRITTEN_RX_QUEUE_INDEX := q_index $buffering 1// bits of buffering = 6. 
  //  file nic.linked.aa, line 370
  // q_index
  // LAST_WRITTEN_RX_QUEUE_INDEX
  WPIPE_LAST_WRITTEN_RX_QUEUE_INDEX_942_inst <=> (branch_block_stmt_865/assign_stmt_944_to_assign_stmt_947/WPIPE_LAST_WRITTEN_RX_QUEUE_INDEX_942_Sample/req branch_block_stmt_865/assign_stmt_944_to_assign_stmt_947/WPIPE_LAST_WRITTEN_RX_QUEUE_INDEX_942_Update/req) (branch_block_stmt_865/assign_stmt_944_to_assign_stmt_947/WPIPE_LAST_WRITTEN_RX_QUEUE_INDEX_942_Sample/ack branch_block_stmt_865/assign_stmt_944_to_assign_stmt_947/WPIPE_LAST_WRITTEN_RX_QUEUE_INDEX_942_Update/ack)
  // 			selected_q_index := q_index $buffering 1// bits of buffering = 6.  Orphaned statement with target selected_q_index ?? 
  //  file nic.linked.aa, line 371
  // q_index
  W_selected_q_index_945_inst <=> (branch_block_stmt_865/assign_stmt_944_to_assign_stmt_947/assign_stmt_947_Sample/req branch_block_stmt_865/assign_stmt_944_to_assign_stmt_947/assign_stmt_947_Update/req) (branch_block_stmt_865/assign_stmt_944_to_assign_stmt_947/assign_stmt_947_Sample/ack branch_block_stmt_865/assign_stmt_944_to_assign_stmt_947/assign_stmt_947_Update/ack)
}
$module [ReceiveEngineDaemon] 
{
  // pipe-declarations for block %ReceiveEngineDaemon
  //  file nic.linked.aa, line 375
  // pipe-declarations for block %ReceiveEngineDaemon%main
  //  file nic.linked.aa, line 381
  // pipe-declarations for block %ReceiveEngineDaemon%main%
  //  file nic.linked.aa, line 384
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    ::[assign_stmt_954] 
    {
      // start:  	LAST_WRITTEN_RX_QUEUE_INDEX := 0  $buffering 1// bits of buffering = 6. 
      //  file nic.linked.aa, line 380
      // Target expression
      // (as target) LAST_WRITTEN_RX_QUEUE_INDEX
      $T[WPIPE_LAST_WRITTEN_RX_QUEUE_INDEX_952_sample_start_] 
      $T[WPIPE_LAST_WRITTEN_RX_QUEUE_INDEX_952_sample_completed_] 
      $T[WPIPE_LAST_WRITTEN_RX_QUEUE_INDEX_952_update_start_] 
      $T[WPIPE_LAST_WRITTEN_RX_QUEUE_INDEX_952_update_completed_] 
      ;;[WPIPE_LAST_WRITTEN_RX_QUEUE_INDEX_952_Sample] 
      {
        // pipe write sample-start LAST_WRITTEN_RX_QUEUE_INDEX
        $T [req] $T [ack] 
      }
      ;;[WPIPE_LAST_WRITTEN_RX_QUEUE_INDEX_952_Update] 
      {
        // pipe write update (complete) LAST_WRITTEN_RX_QUEUE_INDEX
        $T [req] $T [ack] 
      }
      WPIPE_LAST_WRITTEN_RX_QUEUE_INDEX_952_sample_start_ &-> (WPIPE_LAST_WRITTEN_RX_QUEUE_INDEX_952_Sample)
      WPIPE_LAST_WRITTEN_RX_QUEUE_INDEX_952_sample_completed_ <-& (WPIPE_LAST_WRITTEN_RX_QUEUE_INDEX_952_Sample)
      WPIPE_LAST_WRITTEN_RX_QUEUE_INDEX_952_update_start_ <-& (WPIPE_LAST_WRITTEN_RX_QUEUE_INDEX_952_sample_completed_)
      WPIPE_LAST_WRITTEN_RX_QUEUE_INDEX_952_update_start_ &-> (WPIPE_LAST_WRITTEN_RX_QUEUE_INDEX_952_Update)
      WPIPE_LAST_WRITTEN_RX_QUEUE_INDEX_952_update_completed_ <-& (WPIPE_LAST_WRITTEN_RX_QUEUE_INDEX_952_Update)
      // end:  	LAST_WRITTEN_RX_QUEUE_INDEX := 0  $buffering 1// bits of buffering = 6. 
      // load-store dependencies..
      // pipe read/write dependencies for pipe LAST_WRITTEN_RX_QUEUE_INDEX
      // read-dependencies for pipe LAST_WRITTEN_RX_QUEUE_INDEX
      // write-dependencies for pipe LAST_WRITTEN_RX_QUEUE_INDEX
      // signal write dependencies for LAST_WRITTEN_RX_QUEUE_INDEX
    }
    <>[branch_block_stmt_955] // Branch Block  file nic.linked.aa, line 381
    {
      $P [branch_block_stmt_955__entry__]
      branch_block_stmt_955__entry__ <-| ($entry)
      $P [branch_block_stmt_955__exit__]
      branch_block_stmt_955__exit__ |-> ($exit)
      $P [merge_stmt_957__entry__] 
      $P [merge_stmt_957__exit__] 
      $P [if_stmt_958__entry__] 
      $P [if_stmt_958__exit__] 
      $P [do_while_stmt_966__entry__] 
      $P [do_while_stmt_966__exit__] 
      $P [disable_loopback]
      // if-statement  
      //  file nic.linked.aa, line 0
      ;;[if_stmt_958_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      if_stmt_958__entry__ |-> (if_stmt_958_dead_link)
      if_stmt_958__exit__ <-| (if_stmt_958_dead_link)
      ;;[if_stmt_958_eval_test] 
      {
        // test expression evaluate and trigger branch 
        // ( ~ (CONTROL_REGISTER [] 0 ) )
        ;;[NOT_u1_u1_962] 
        {
          // unary expression 
          // (CONTROL_REGISTER [] 0 )
          ;;[BITSEL_u32_u1_961] 
          {
            // binary expression 
            ||[BITSEL_u32_u1_961_inputs] 
            {
              // CONTROL_REGISTER
              ;;[RPIPE_CONTROL_REGISTER_959] 
              {
                // pipe read
                ;;[Sample] 
                {
                  $T [req] $T [ack] 
                }
                ;;[Update] 
                {
                  $T [req] $T [ack] 
                }
              }
            }
            // flow-through
            ;;[SplitProtocol] 
            {
              ;;[Sample] 
              {
                $T [rr] $T [ra]
              }
              ;;[Update] 
              {
                $T [cr] $T [ca]
              }
            }
          }
          // flow-through
          ;;[SplitProtocol] 
          {
            ;;[Sample] 
            {
              $T [rr] $T [ra]
            }
            ;;[Update] 
            {
              $T [cr] $T [ca]
            }
          }
        }
        $T [branch_req] 
      }
      if_stmt_958__entry__ |-> (if_stmt_958_eval_test)
      $P [NOT_u1_u1_962_place]
      NOT_u1_u1_962_place <-| (if_stmt_958_eval_test)
      ;;[if_stmt_958_if_link] 
      {
        $T [if_choice_transition] 
      }
      ;;[if_stmt_958_else_link] 
      {
        $T [else_choice_transition] 
      }
      NOT_u1_u1_962_place |-> (if_stmt_958_if_link if_stmt_958_else_link)
      $P [not_enabled_yet_loopback]
      not_enabled_yet_loopback <-| (if_stmt_958_if_link)
      if_stmt_958__exit__ <-| (if_stmt_958_else_link)
      // do-while-statement  
      //  file nic.linked.aa, line 390
      <o> [do_while_stmt_966]  $depth 31 $buffering 1 
      {
        $P[do_while_stmt_966__entry__] 
        $P[do_while_stmt_966__exit__] 
        $P[loop_back] 
        $P[condition_done] 
        $P[loop_body_done] 
        $pipeline [do_while_stmt_966_loop_body] 
        {
          // Pipelined!
          $T[back_edge_to_loop_body] 
          $T[first_time_through_loop_body] 
          $T[loop_body_start] 
          $T[condition_evaluated] 
          $transitionmerge [entry_tmerge] (back_edge_to_loop_body first_time_through_loop_body) (loop_body_start)
          $entry <-& (loop_body_start)
          // start: 			$call popFromQueue (($bitcast ($uint<1>) _b1  ) FREE_Q ) (rx_buffer_pointer_32 status ) 
          //  file nic.linked.aa, line 395
          $T[call_stmt_974_sample_start_] 
          $T[call_stmt_974_sample_completed_] 
          $T[call_stmt_974_update_start_] 
          $T[call_stmt_974_update_completed_] 
          // Call input argument 0
          // Call input argument 1
          // FREE_Q
          // start: Forward dependencies from FREE_Q to transition call_stmt_974_sample_start_
          // special case... expr is signal read, which does not involve control..
          // RAW reenables for FREE_Q
          ;;[call_stmt_974_Sample] 
          {
            $T [crr] $T [cra] 
          }
          ;;[call_stmt_974_Update] 
          {
            $T [ccr] $T [cca] 
          }
          call_stmt_974_sample_start_ &-> (call_stmt_974_Sample)
          call_stmt_974_sample_completed_ <-& (call_stmt_974_Sample)
          call_stmt_974_sample_completed_ &-> ($null)
          call_stmt_974_update_start_ &-> (call_stmt_974_Update)
          call_stmt_974_update_completed_ <-& (call_stmt_974_Update)
          // Call output argument 0
          // (as target) rx_buffer_pointer_32
          // Call output argument 1
          // (as target) status
          // self-release: 
          call_stmt_974_sample_start_ o<-& (call_stmt_974_sample_completed_ 1)
          $null &-> (call_stmt_974_update_start_)
          call_stmt_974_update_start_ o<-& (call_stmt_974_update_completed_ 0)
          // start: WAR dependencies for rx_buffer_pointer_32
          // done: WAR dependencies for rx_buffer_pointer_32
          // start: WAR dependencies for status
          // done: WAR dependencies for status
          // end: 			$call popFromQueue (($bitcast ($uint<1>) _b1  ) FREE_Q ) (rx_buffer_pointer_32 status ) 
          // start: WAR dependencies for rx_buffer_pointer_36
          // done: WAR dependencies for rx_buffer_pointer_36
          // start:  			$volatile rx_buffer_pointer_36 := (rx_buffer_pointer_32 && ($bitcast ($uint<4>) _b0  )) $buffering 1
          //  file nic.linked.aa, line 397
          // volatile! 
          // Source expression
          // (rx_buffer_pointer_32 && ($bitcast ($uint<4>) _b0  ))
          // rx_buffer_pointer_32
          // Target expression
          // (as target) rx_buffer_pointer_36
          // start: WAR dependencies for rx_buffer_pointer_36
          // done: WAR dependencies for rx_buffer_pointer_36
          // end:  			$volatile rx_buffer_pointer_36 := (rx_buffer_pointer_32 && ($bitcast ($uint<4>) _b0  )) $buffering 1
          // start: 			$guard (~status) $call loadBuffer (rx_buffer_pointer_36 ) (bad_packet_identifier ) 
          //  file nic.linked.aa, line 400
          $T[call_stmt_990_sample_start_] 
          $T[call_stmt_990_sample_completed_] 
          $T[call_stmt_990_update_start_] 
          $T[call_stmt_990_update_completed_] 
          // Guard expression
          // status
          // start: Forward dependencies from status to transition call_stmt_990_sample_start_
          call_stmt_990_sample_start_ <-& (call_stmt_974_update_completed_)
          // done: Forward dependencies from status to transition call_stmt_990_sample_start_
          // RAW reenables for status
          call_stmt_974_update_start_ o<-& (call_stmt_990_sample_completed_ 0)
          // Call input argument 0
          // rx_buffer_pointer_36
          // start: Forward dependencies from rx_buffer_pointer_36 to transition call_stmt_990_sample_start_
          call_stmt_990_sample_start_ <-& (call_stmt_974_update_completed_)
          // done: Forward dependencies from rx_buffer_pointer_36 to transition call_stmt_990_sample_start_
          // RAW reenables for rx_buffer_pointer_36
          call_stmt_974_update_start_ o<-& (call_stmt_990_sample_completed_ 0)
          ;;[call_stmt_990_Sample] 
          {
            $T [crr] $T [cra] 
          }
          ;;[call_stmt_990_Update] 
          {
            $T [ccr] $T [cca] 
          }
          call_stmt_990_sample_start_ &-> (call_stmt_990_Sample)
          call_stmt_990_sample_completed_ <-& (call_stmt_990_Sample)
          call_stmt_990_sample_completed_ &-> ($null)
          call_stmt_990_update_start_ &-> (call_stmt_990_Update)
          call_stmt_990_update_completed_ <-& (call_stmt_990_Update)
          // Call output argument 0
          // (as target) bad_packet_identifier
          // self-release: 
          call_stmt_990_sample_start_ o<-& (call_stmt_990_sample_completed_ 1)
          $null &-> (call_stmt_990_update_start_)
          call_stmt_990_update_start_ o<-& (call_stmt_990_update_completed_ 0)
          // start: WAR dependencies for bad_packet_identifier
          // done: WAR dependencies for bad_packet_identifier
          // end: 			$guard (~status) $call loadBuffer (rx_buffer_pointer_36 ) (bad_packet_identifier ) 
          // start: WAR dependencies for ok_flag
          // done: WAR dependencies for ok_flag
          // start:  			$volatile ok_flag := (( ~ status ) & ( ~ bad_packet_identifier )) $buffering 1
          //  file nic.linked.aa, line 401
          // volatile! 
          // Source expression
          // (( ~ status ) & ( ~ bad_packet_identifier ))
          // ( ~ status )
          // status
          // ( ~ bad_packet_identifier )
          // bad_packet_identifier
          // Target expression
          // (as target) ok_flag
          // start: WAR dependencies for ok_flag
          // done: WAR dependencies for ok_flag
          // end:  			$volatile ok_flag := (( ~ status ) & ( ~ bad_packet_identifier )) $buffering 1
          // start: WAR dependencies for free_flag
          // done: WAR dependencies for free_flag
          // start:  			$volatile free_flag := (( ~ status ) & bad_packet_identifier) $buffering 1
          //  file nic.linked.aa, line 402
          // volatile! 
          // Source expression
          // (( ~ status ) & bad_packet_identifier)
          // ( ~ status )
          // status
          // bad_packet_identifier
          // Target expression
          // (as target) free_flag
          // start: WAR dependencies for free_flag
          // done: WAR dependencies for free_flag
          // end:  			$volatile free_flag := (( ~ status ) & bad_packet_identifier) $buffering 1
          // start: WAR dependencies for cond
          // done: WAR dependencies for cond
          // start:  			$volatile cond := (ok_flag == 1 ) $buffering 1
          //  file nic.linked.aa, line 403
          // volatile! 
          // Source expression
          // (ok_flag == 1 )
          // ok_flag
          // Target expression
          // (as target) cond
          // start: WAR dependencies for cond
          // done: WAR dependencies for cond
          // end:  			$volatile cond := (ok_flag == 1 ) $buffering 1
          // start: 			$guard (ok_flag) $call populateRxQueue (rx_buffer_pointer_36 ) () 
          //  file nic.linked.aa, line 406
          $T[call_stmt_1015_sample_start_] 
          $T[call_stmt_1015_sample_completed_] 
          $T[call_stmt_1015_update_start_] 
          $T[call_stmt_1015_update_completed_] 
          // Guard expression
          // ok_flag
          // start: Forward dependencies from ok_flag to transition call_stmt_1015_sample_start_
          call_stmt_1015_sample_start_ <-& (call_stmt_974_update_completed_)
          call_stmt_1015_sample_start_ <-& (call_stmt_990_update_completed_)
          // done: Forward dependencies from ok_flag to transition call_stmt_1015_sample_start_
          // RAW reenables for ok_flag
          call_stmt_974_update_start_ o<-& (call_stmt_1015_sample_completed_ 0)
          call_stmt_990_update_start_ o<-& (call_stmt_1015_sample_completed_ 0)
          // Call input argument 0
          // rx_buffer_pointer_36
          // start: Forward dependencies from rx_buffer_pointer_36 to transition call_stmt_1015_sample_start_
          call_stmt_1015_sample_start_ <-& (call_stmt_974_update_completed_)
          // done: Forward dependencies from rx_buffer_pointer_36 to transition call_stmt_1015_sample_start_
          // RAW reenables for rx_buffer_pointer_36
          call_stmt_974_update_start_ o<-& (call_stmt_1015_sample_completed_ 0)
          ;;[call_stmt_1015_Sample] 
          {
            $T [crr] $T [cra] 
          }
          ;;[call_stmt_1015_Update] 
          {
            $T [ccr] $T [cca] 
          }
          call_stmt_1015_sample_start_ &-> (call_stmt_1015_Sample)
          call_stmt_1015_sample_completed_ <-& (call_stmt_1015_Sample)
          call_stmt_1015_sample_completed_ &-> ($null)
          call_stmt_1015_update_start_ &-> (call_stmt_1015_Update)
          call_stmt_1015_update_completed_ <-& (call_stmt_1015_Update)
          // self-release: 
          call_stmt_1015_sample_start_ o<-& (call_stmt_1015_sample_completed_ 1)
          $null &-> (call_stmt_1015_update_start_)
          call_stmt_1015_update_start_ o<-& (call_stmt_1015_update_completed_ 0)
          // end: 			$guard (ok_flag) $call populateRxQueue (rx_buffer_pointer_36 ) () 
          // start: 			$guard (free_flag) $call pushIntoQueue (($bitcast ($uint<1>) _b1  ) FREE_Q ( $slice rx_buffer_pointer_36 35 4 )  ) (push_status ) 
          //  file nic.linked.aa, line 408
          $T[call_stmt_1025_sample_start_] 
          $T[call_stmt_1025_sample_completed_] 
          $T[call_stmt_1025_update_start_] 
          $T[call_stmt_1025_update_completed_] 
          // Guard expression
          // free_flag
          // start: Forward dependencies from free_flag to transition call_stmt_1025_sample_start_
          call_stmt_1025_sample_start_ <-& (call_stmt_974_update_completed_)
          call_stmt_1025_sample_start_ <-& (call_stmt_990_update_completed_)
          // done: Forward dependencies from free_flag to transition call_stmt_1025_sample_start_
          // RAW reenables for free_flag
          call_stmt_974_update_start_ o<-& (call_stmt_1025_sample_completed_ 0)
          call_stmt_990_update_start_ o<-& (call_stmt_1025_sample_completed_ 0)
          // Call input argument 0
          // Call input argument 1
          // FREE_Q
          // Call input argument 2
          // ( $slice rx_buffer_pointer_36 35 4 ) 
          // rx_buffer_pointer_36
          // start: Forward dependencies from FREE_Q to transition call_stmt_1025_sample_start_
          // special case... expr is signal read, which does not involve control..
          // RAW reenables for FREE_Q
          // start: Forward dependencies from ( $slice rx_buffer_pointer_36 35 4 )  to transition call_stmt_1025_sample_start_
          call_stmt_1025_sample_start_ <-& (call_stmt_974_update_completed_)
          // done: Forward dependencies from ( $slice rx_buffer_pointer_36 35 4 )  to transition call_stmt_1025_sample_start_
          // RAW reenables for ( $slice rx_buffer_pointer_36 35 4 ) 
          call_stmt_974_update_start_ o<-& (call_stmt_1025_sample_completed_ 0)
          ;;[call_stmt_1025_Sample] 
          {
            $T [crr] $T [cra] 
          }
          ;;[call_stmt_1025_Update] 
          {
            $T [ccr] $T [cca] 
          }
          call_stmt_1025_sample_start_ &-> (call_stmt_1025_Sample)
          call_stmt_1025_sample_completed_ <-& (call_stmt_1025_Sample)
          call_stmt_1025_sample_completed_ &-> ($null)
          call_stmt_1025_update_start_ &-> (call_stmt_1025_Update)
          call_stmt_1025_update_completed_ <-& (call_stmt_1025_Update)
          // Call output argument 0
          // (as target) push_status
          // self-release: 
          call_stmt_1025_sample_start_ o<-& (call_stmt_1025_sample_completed_ 1)
          $null &-> (call_stmt_1025_update_start_)
          call_stmt_1025_update_start_ o<-& (call_stmt_1025_update_completed_ 0)
          // start: WAR dependencies for push_status
          // done: WAR dependencies for push_status
          // end: 			$guard (free_flag) $call pushIntoQueue (($bitcast ($uint<1>) _b1  ) FREE_Q ( $slice rx_buffer_pointer_36 35 4 )  ) (push_status ) 
          // (CONTROL_REGISTER [] 0 )
          // CONTROL_REGISTER
          $T [loop_body_delay_to_condition_start] $delay
          loop_body_start &-> (loop_body_delay_to_condition_start)
          loop_body_delay_to_condition_start &-> (condition_evaluated)
          // start: Forward dependencies from (CONTROL_REGISTER [] 0 ) to transition condition_evaluated
          // non-constant expression which depends only on signals/constants?
          // done: Forward dependencies from (CONTROL_REGISTER [] 0 ) to transition condition_evaluated
          condition_evaluated &-> ($null)
          // load-store dependencies..
          // pipe read/write dependencies for pipe NUMBER_OF_SERVERS
          // read-dependencies for pipe NUMBER_OF_SERVERS
          // write-dependencies for pipe NUMBER_OF_SERVERS
          // signal write dependencies for NUMBER_OF_SERVERS
          // pipe read/write dependencies for pipe LAST_WRITTEN_RX_QUEUE_INDEX
          // read-dependencies for pipe LAST_WRITTEN_RX_QUEUE_INDEX
          // write-dependencies for pipe LAST_WRITTEN_RX_QUEUE_INDEX
          // signal write dependencies for LAST_WRITTEN_RX_QUEUE_INDEX
          // pipe read/write dependencies for pipe MEMORY_TO_NIC_RESPONSE
          // read-dependencies for pipe MEMORY_TO_NIC_RESPONSE
          call_stmt_990_sample_start_ <-& (call_stmt_974_update_completed_)
          call_stmt_1015_sample_start_ <-& (call_stmt_990_update_completed_)
          call_stmt_1025_sample_start_ <-& (call_stmt_1015_update_completed_)
          // ring dependency in pipeline.
          call_stmt_974_update_start_ o<-& (call_stmt_1025_update_completed_ 0)
          // write-dependencies for pipe MEMORY_TO_NIC_RESPONSE
          // signal write dependencies for MEMORY_TO_NIC_RESPONSE
          // pipe read/write dependencies for pipe NIC_REQUEST_REGISTER_ACCESS_PIPE
          // read-dependencies for pipe NIC_REQUEST_REGISTER_ACCESS_PIPE
          // write-dependencies for pipe NIC_REQUEST_REGISTER_ACCESS_PIPE
          // signal write dependencies for NIC_REQUEST_REGISTER_ACCESS_PIPE
          // pipe read/write dependencies for pipe NIC_RESPONSE_REGISTER_ACCESS_PIPE
          // read-dependencies for pipe NIC_RESPONSE_REGISTER_ACCESS_PIPE
          // write-dependencies for pipe NIC_RESPONSE_REGISTER_ACCESS_PIPE
          // signal write dependencies for NIC_RESPONSE_REGISTER_ACCESS_PIPE
          // pipe read/write dependencies for pipe NIC_TO_MEMORY_REQUEST
          // read-dependencies for pipe NIC_TO_MEMORY_REQUEST
          // write-dependencies for pipe NIC_TO_MEMORY_REQUEST
          call_stmt_990_sample_start_ <-& (call_stmt_974_update_completed_)
          call_stmt_1015_sample_start_ <-& (call_stmt_990_update_completed_)
          call_stmt_1025_sample_start_ <-& (call_stmt_1015_update_completed_)
          // ring dependency in pipeline.
          call_stmt_974_sample_start_ o<-& (call_stmt_1025_update_completed_ 0)
          // signal write dependencies for NIC_TO_MEMORY_REQUEST
          // pipe read/write dependencies for pipe nic_rx_to_header
          // read-dependencies for pipe nic_rx_to_header
          // write-dependencies for pipe nic_rx_to_header
          // signal write dependencies for nic_rx_to_header
          // pipe read/write dependencies for pipe nic_rx_to_packet
          // read-dependencies for pipe nic_rx_to_packet
          // write-dependencies for pipe nic_rx_to_packet
          // signal write dependencies for nic_rx_to_packet
        }
        ( first_time_through_loop_body  back_edge_to_loop_body) 
        ( condition_evaluated )
        ;; [loop_exit] 
        {
          $T [ack] 
        }
        ;; [loop_taken] 
        {
          $T [ack] 
        }
        do_while_stmt_966__entry__ <-| ($entry)
        loop_body_done <-| ( do_while_stmt_966_loop_body ) 
        condition_done |-> (loop_exit loop_taken)
        do_while_stmt_966__exit__ |-> ($exit)
        $bind condition_done <= do_while_stmt_966_loop_body : condition_evaluated
        $bind do_while_stmt_966__entry__  => do_while_stmt_966_loop_body : first_time_through_loop_body 
        $bind loop_back  => do_while_stmt_966_loop_body : back_edge_to_loop_body 
        $terminate (loop_exit loop_taken loop_body_done) (loop_back do_while_stmt_966__exit__)
      }
      do_while_stmt_966__entry__ |-> (do_while_stmt_966)
      do_while_stmt_966__exit__ <-| (do_while_stmt_966)
      // control-path for merge  
      //  file nic.linked.aa, line 384
      ;;[merge_stmt_957_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      merge_stmt_957__entry__ |-> (merge_stmt_957_dead_link)
      merge_stmt_957__exit__ <-| (merge_stmt_957_dead_link)
      //---------------------   merge statement  file nic.linked.aa, line 384  --------------------------
      ||[merge_stmt_957__entry___PhiReq] 
      {
        // no phi statements in merge..
      }
      merge_stmt_957__entry__ |-> (merge_stmt_957__entry___PhiReq)
      ||[disable_loopback_PhiReq] 
      {
        // no phi statements in merge..
      }
      disable_loopback |-> (disable_loopback_PhiReq)
      ||[not_enabled_yet_loopback_PhiReq] 
      {
        // no phi statements in merge..
      }
      not_enabled_yet_loopback |-> (not_enabled_yet_loopback_PhiReq)
      $P [merge_stmt_957_PhiReqMerge] 
      merge_stmt_957_PhiReqMerge <-| ( merge_stmt_957__entry___PhiReq  disable_loopback_PhiReq  not_enabled_yet_loopback_PhiReq )
      ||[merge_stmt_957_PhiAck] 
      {
        $T [dummy] 
      }
      merge_stmt_957_PhiReqMerge |-> (merge_stmt_957_PhiAck)
      merge_stmt_957__exit__  <-| (merge_stmt_957_PhiAck)
      //---------------------  end of merge statement  file nic.linked.aa, line 384  --------------------------
      merge_stmt_957__entry__ <-| (branch_block_stmt_955__entry__)
      if_stmt_958__entry__ <-| (merge_stmt_957__exit__)
      do_while_stmt_966__entry__ <-| (if_stmt_958__exit__)
      disable_loopback <-| (do_while_stmt_966__exit__)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %ReceiveEngineDaemon%main%
    //  file nic.linked.aa, line 384
    // constant-object-declarations for block %ReceiveEngineDaemon%main%
    //  file nic.linked.aa, line 392
    // constant-object-declarations for block %ReceiveEngineDaemon%main
    //  file nic.linked.aa, line 381
    // constant-object-declarations for block %ReceiveEngineDaemon
    //  file nic.linked.aa, line 375
    // 0 
    $constant $W[konst_953_wire_constant] : $int<6> := _b000000// 0
    // constant-declarations for block %ReceiveEngineDaemon%main
    //  file nic.linked.aa, line 381
    // constant-declarations for block %ReceiveEngineDaemon%main%
    //  file nic.linked.aa, line 384
    // if-statement  
    //  file nic.linked.aa, line 0
    // 0 
    $constant $W[konst_960_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // do-while statement  
    //  file nic.linked.aa, line 390
    // 0 
    $constant $W[konst_1029_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // constant-declarations for block %ReceiveEngineDaemon%main%
    //  file nic.linked.aa, line 392
    // 			$call popFromQueue (($bitcast ($uint<1>) _b1  ) FREE_Q ) (rx_buffer_pointer_32 status ) 
    //  file nic.linked.aa, line 395
    // ($bitcast ($uint<1>) _b1  )
    $constant $W[type_cast_970_wire_constant] : $int<1> := _b1// 1
    // ($bitcast ($uint<4>) _b0  )
    $constant $W[type_cast_980_wire_constant] : $int<4> := _b0000// 0
    // 			$guard (~status) $call loadBuffer (rx_buffer_pointer_36 ) (bad_packet_identifier ) 
    //  file nic.linked.aa, line 400
    // 1 
    $constant $W[konst_1006_wire_constant] : $int<1> := _b1// 1
    // 			$guard (ok_flag) $call populateRxQueue (rx_buffer_pointer_36 ) () 
    //  file nic.linked.aa, line 406
    // 			$guard (free_flag) $call pushIntoQueue (($bitcast ($uint<1>) _b1  ) FREE_Q ( $slice rx_buffer_pointer_36 35 4 )  ) (push_status ) 
    //  file nic.linked.aa, line 408
    // ($bitcast ($uint<1>) _b1  )
    $constant $W[type_cast_1020_wire_constant] : $int<1> := _b1// 1
    // 	LAST_WRITTEN_RX_QUEUE_INDEX := 0  $buffering 1// bits of buffering = 6. 
    //  file nic.linked.aa, line 380
    // LAST_WRITTEN_RX_QUEUE_INDEX
    // block %ReceiveEngineDaemon%main
    //  file nic.linked.aa, line 381
    // if statement  
    //  file nic.linked.aa, line 0
    // CONTROL_REGISTER
    $W[RPIPE_CONTROL_REGISTER_959_wire] : $int<32>
    // (CONTROL_REGISTER [] 0 )
    $intermediate $W[BITSEL_u32_u1_961_wire] : $int<1>
    // ( ~ (CONTROL_REGISTER [] 0 ) )
    $intermediate $W[NOT_u1_u1_962_wire] : $int<1>
    // do-while statement  
    //  file nic.linked.aa, line 390
    // CONTROL_REGISTER
    $W[RPIPE_CONTROL_REGISTER_1028_wire] : $int<32>
    // (CONTROL_REGISTER [] 0 )
    $intermediate $W[BITSEL_u32_u1_1030_wire] : $int<1>
    // 			$call popFromQueue (($bitcast ($uint<1>) _b1  ) FREE_Q ) (rx_buffer_pointer_32 status ) 
    //  file nic.linked.aa, line 395
    // FREE_Q
    $W[RPIPE_FREE_Q_971_wire] : $int<36>
    // rx_buffer_pointer_32
    $W[rx_buffer_pointer_32_974] : $int<32>
    // status
    $W[status_974] : $int<1>
    // 			$volatile rx_buffer_pointer_36 := (rx_buffer_pointer_32 && ($bitcast ($uint<4>) _b0  )) $buffering 1
    //  file nic.linked.aa, line 397
    // rx_buffer_pointer_36
    $W[rx_buffer_pointer_36_982] : $int<36>
    // 			$guard (~status) $call loadBuffer (rx_buffer_pointer_36 ) (bad_packet_identifier ) 
    //  file nic.linked.aa, line 400
    // bad_packet_identifier
    $W[bad_packet_identifier_990] : $int<1>
    // 			$volatile ok_flag := (( ~ status ) & ( ~ bad_packet_identifier )) $buffering 1
    //  file nic.linked.aa, line 401
    // ( ~ status )
    $intermediate $W[NOT_u1_u1_993_wire] : $int<1>
    // ( ~ bad_packet_identifier )
    $intermediate $W[NOT_u1_u1_995_wire] : $int<1>
    // ok_flag
    $W[ok_flag_997] : $int<1>
    // 			$volatile free_flag := (( ~ status ) & bad_packet_identifier) $buffering 1
    //  file nic.linked.aa, line 402
    // ( ~ status )
    $intermediate $W[NOT_u1_u1_1000_wire] : $int<1>
    // free_flag
    $W[free_flag_1003] : $int<1>
    // 			$volatile cond := (ok_flag == 1 ) $buffering 1
    //  file nic.linked.aa, line 403
    // cond
    $W[cond_1008] : $int<1>
    // 			$guard (ok_flag) $call populateRxQueue (rx_buffer_pointer_36 ) () 
    //  file nic.linked.aa, line 406
    // 			$guard (free_flag) $call pushIntoQueue (($bitcast ($uint<1>) _b1  ) FREE_Q ( $slice rx_buffer_pointer_36 35 4 )  ) (push_status ) 
    //  file nic.linked.aa, line 408
    // FREE_Q
    $W[RPIPE_FREE_Q_1021_wire] : $int<36>
    // ( $slice rx_buffer_pointer_36 35 4 ) 
    $intermediate $W[slice_1023_wire] : $int<32>
    // push_status
    $W[push_status_1025] : $int<1>
    // 	LAST_WRITTEN_RX_QUEUE_INDEX := 0  $buffering 1// bits of buffering = 6. 
    //  file nic.linked.aa, line 380
    // LAST_WRITTEN_RX_QUEUE_INDEX
    $ioport $out [WPIPE_LAST_WRITTEN_RX_QUEUE_INDEX_952_inst]  (konst_953_wire_constant) (LAST_WRITTEN_RX_QUEUE_INDEX) 
    // datapath-instances for block %ReceiveEngineDaemon%main
    //  file nic.linked.aa, line 381
    // datapath-instances for if  
    //  file nic.linked.aa, line 0
    // CONTROL_REGISTER
    $ioport $in [RPIPE_CONTROL_REGISTER_959_inst] (CONTROL_REGISTER) (RPIPE_CONTROL_REGISTER_959_wire) 
    $buffering $out RPIPE_CONTROL_REGISTER_959_inst RPIPE_CONTROL_REGISTER_959_wire 1
    // (CONTROL_REGISTER [] 0 )
    [][BITSEL_u32_u1_961_inst] (RPIPE_CONTROL_REGISTER_959_wire konst_960_wire_constant) (BITSEL_u32_u1_961_wire)   $flowthrough 
    $delay BITSEL_u32_u1_961_inst 0
    // ( ~ (CONTROL_REGISTER [] 0 ) )
    ~ [NOT_u1_u1_962_inst] (BITSEL_u32_u1_961_wire) (NOT_u1_u1_962_wire)   $flowthrough
    $delay NOT_u1_u1_962_inst 0
    ==0? [if_stmt_958_branch] (NOT_u1_u1_962_wire)
    // datapath-instances for do-while  
    //  file nic.linked.aa, line 390
    // CONTROL_REGISTER
    $ioport $in [RPIPE_CONTROL_REGISTER_1028_inst] (CONTROL_REGISTER) (RPIPE_CONTROL_REGISTER_1028_wire)  $fullrate 
    $buffering $out RPIPE_CONTROL_REGISTER_1028_inst RPIPE_CONTROL_REGISTER_1028_wire 1
    // (CONTROL_REGISTER [] 0 )
    [][BITSEL_u32_u1_1030_inst] (RPIPE_CONTROL_REGISTER_1028_wire konst_1029_wire_constant) (BITSEL_u32_u1_1030_wire)   $flowthrough 
    $delay BITSEL_u32_u1_1030_inst 0
    ==0? [do_while_stmt_966_branch] (BITSEL_u32_u1_1030_wire)
    $flowthrough
    // 			$call popFromQueue (($bitcast ($uint<1>) _b1  ) FREE_Q ) (rx_buffer_pointer_32 status ) 
    //  file nic.linked.aa, line 395
    // FREE_Q
    $ioport $in [RPIPE_FREE_Q_971_inst] (FREE_Q) (RPIPE_FREE_Q_971_wire)  $fullrate 
    $buffering $out RPIPE_FREE_Q_971_inst RPIPE_FREE_Q_971_wire 1
    $call [call_stmt_974_call] $module popFromQueue(type_cast_970_wire_constant RPIPE_FREE_Q_971_wire) (rx_buffer_pointer_32_974 status_974)   $fullrate
    $delay call_stmt_974_call 4
    $buffering  $in call_stmt_974_call type_cast_970_wire_constant 1
    $buffering  $in call_stmt_974_call RPIPE_FREE_Q_971_wire 1
    $buffering  $out call_stmt_974_call rx_buffer_pointer_32_974 1
    $buffering  $out call_stmt_974_call status_974 1
    // 			$volatile rx_buffer_pointer_36 := (rx_buffer_pointer_32 && ($bitcast ($uint<4>) _b0  )) $buffering 1
    //  file nic.linked.aa, line 397
    // (rx_buffer_pointer_32 && ($bitcast ($uint<4>) _b0  ))
    &&[CONCAT_u32_u36_981_inst] (rx_buffer_pointer_32_974 type_cast_980_wire_constant) (rx_buffer_pointer_36_982)   $flowthrough 
    $delay CONCAT_u32_u36_981_inst 0
    // 			$guard (~status) $call loadBuffer (rx_buffer_pointer_36 ) (bad_packet_identifier ) 
    //  file nic.linked.aa, line 400
    $call [call_stmt_990_call] $module loadBuffer(rx_buffer_pointer_36_982) (bad_packet_identifier_990) $guard ( ~ status_974 )   $fullrate
    $delay call_stmt_990_call 4
    $buffering  $in call_stmt_990_call rx_buffer_pointer_36_982 1
    $buffering  $out call_stmt_990_call bad_packet_identifier_990 1
    // 			$volatile ok_flag := (( ~ status ) & ( ~ bad_packet_identifier )) $buffering 1
    //  file nic.linked.aa, line 401
    // ( ~ status )
    ~ [NOT_u1_u1_993_inst] (status_974) (NOT_u1_u1_993_wire)   $flowthrough
    $delay NOT_u1_u1_993_inst 0
    // ( ~ bad_packet_identifier )
    ~ [NOT_u1_u1_995_inst] (bad_packet_identifier_990) (NOT_u1_u1_995_wire)   $flowthrough
    $delay NOT_u1_u1_995_inst 0
    // (( ~ status ) & ( ~ bad_packet_identifier ))
    &[AND_u1_u1_996_inst] (NOT_u1_u1_993_wire NOT_u1_u1_995_wire) (ok_flag_997)   $flowthrough 
    $delay AND_u1_u1_996_inst 0
    // 			$volatile free_flag := (( ~ status ) & bad_packet_identifier) $buffering 1
    //  file nic.linked.aa, line 402
    // ( ~ status )
    ~ [NOT_u1_u1_1000_inst] (status_974) (NOT_u1_u1_1000_wire)   $flowthrough
    $delay NOT_u1_u1_1000_inst 0
    // (( ~ status ) & bad_packet_identifier)
    &[AND_u1_u1_1002_inst] (NOT_u1_u1_1000_wire bad_packet_identifier_990) (free_flag_1003)   $flowthrough 
    $delay AND_u1_u1_1002_inst 0
    // 			$volatile cond := (ok_flag == 1 ) $buffering 1
    //  file nic.linked.aa, line 403
    // (ok_flag == 1 )
    ==[EQ_u1_u1_1007_inst] (ok_flag_997 konst_1006_wire_constant) (cond_1008)   $flowthrough 
    $delay EQ_u1_u1_1007_inst 0
    // 			$guard (ok_flag) $call populateRxQueue (rx_buffer_pointer_36 ) () 
    //  file nic.linked.aa, line 406
    $call [call_stmt_1015_call] $module populateRxQueue(rx_buffer_pointer_36_982) () $guard ( ok_flag_997 )   $fullrate
    $delay call_stmt_1015_call 4
    $buffering  $in call_stmt_1015_call rx_buffer_pointer_36_982 1
    // 			$guard (free_flag) $call pushIntoQueue (($bitcast ($uint<1>) _b1  ) FREE_Q ( $slice rx_buffer_pointer_36 35 4 )  ) (push_status ) 
    //  file nic.linked.aa, line 408
    // FREE_Q
    $ioport $in [RPIPE_FREE_Q_1021_inst] (FREE_Q) (RPIPE_FREE_Q_1021_wire) $guard ( free_flag_1003 )  $fullrate 
    $buffering $out RPIPE_FREE_Q_1021_inst RPIPE_FREE_Q_1021_wire 1
    // ( $slice rx_buffer_pointer_36 35 4 ) 
    [:] [slice_1023_inst] (rx_buffer_pointer_36_982 35 4) (slice_1023_wire) $guard ( free_flag_1003 )  $flowthrough
    $delay slice_1023_inst 0
    $call [call_stmt_1025_call] $module pushIntoQueue(type_cast_1020_wire_constant RPIPE_FREE_Q_1021_wire slice_1023_wire) (push_status_1025) $guard ( free_flag_1003 )   $fullrate
    $delay call_stmt_1025_call 4
    $buffering  $in call_stmt_1025_call type_cast_1020_wire_constant 1
    $buffering  $in call_stmt_1025_call RPIPE_FREE_Q_1021_wire 1
    $buffering  $in call_stmt_1025_call slice_1023_wire 1
    $buffering  $out call_stmt_1025_call push_status_1025 1
  }
  // end data-path
  // 	LAST_WRITTEN_RX_QUEUE_INDEX := 0  $buffering 1// bits of buffering = 6. 
  //  file nic.linked.aa, line 380
  // LAST_WRITTEN_RX_QUEUE_INDEX
  WPIPE_LAST_WRITTEN_RX_QUEUE_INDEX_952_inst <=> (assign_stmt_954/WPIPE_LAST_WRITTEN_RX_QUEUE_INDEX_952_Sample/req assign_stmt_954/WPIPE_LAST_WRITTEN_RX_QUEUE_INDEX_952_Update/req) (assign_stmt_954/WPIPE_LAST_WRITTEN_RX_QUEUE_INDEX_952_Sample/ack assign_stmt_954/WPIPE_LAST_WRITTEN_RX_QUEUE_INDEX_952_Update/ack)
  // CP-DP links for merge  
  //  file nic.linked.aa, line 384
  // CP-DP links for if  
  //  file nic.linked.aa, line 0
  // CONTROL_REGISTER
  // (CONTROL_REGISTER [] 0 )
  // ( ~ (CONTROL_REGISTER [] 0 ) )
  if_stmt_958_branch <=> (branch_block_stmt_955/if_stmt_958_eval_test/branch_req) (branch_block_stmt_955/if_stmt_958_else_link/else_choice_transition branch_block_stmt_955/if_stmt_958_if_link/if_choice_transition)
  // CP-DP links for do-while  do_while_stmt_966
  //  file nic.linked.aa, line 390
  // 			$call popFromQueue (($bitcast ($uint<1>) _b1  ) FREE_Q ) (rx_buffer_pointer_32 status ) 
  //  file nic.linked.aa, line 395
  // FREE_Q
  call_stmt_974_call <=> (branch_block_stmt_955/do_while_stmt_966/do_while_stmt_966_loop_body/call_stmt_974_Sample/crr branch_block_stmt_955/do_while_stmt_966/do_while_stmt_966_loop_body/call_stmt_974_Update/ccr) (branch_block_stmt_955/do_while_stmt_966/do_while_stmt_966_loop_body/call_stmt_974_Sample/cra branch_block_stmt_955/do_while_stmt_966/do_while_stmt_966_loop_body/call_stmt_974_Update/cca)
  // 			$volatile rx_buffer_pointer_36 := (rx_buffer_pointer_32 && ($bitcast ($uint<4>) _b0  )) $buffering 1
  //  file nic.linked.aa, line 397
  // (rx_buffer_pointer_32 && ($bitcast ($uint<4>) _b0  ))
  // rx_buffer_pointer_32
  // 			$guard (~status) $call loadBuffer (rx_buffer_pointer_36 ) (bad_packet_identifier ) 
  //  file nic.linked.aa, line 400
  // rx_buffer_pointer_36
  call_stmt_990_call <=> (branch_block_stmt_955/do_while_stmt_966/do_while_stmt_966_loop_body/call_stmt_990_Sample/crr branch_block_stmt_955/do_while_stmt_966/do_while_stmt_966_loop_body/call_stmt_990_Update/ccr) (branch_block_stmt_955/do_while_stmt_966/do_while_stmt_966_loop_body/call_stmt_990_Sample/cra branch_block_stmt_955/do_while_stmt_966/do_while_stmt_966_loop_body/call_stmt_990_Update/cca)
  // 			$volatile ok_flag := (( ~ status ) & ( ~ bad_packet_identifier )) $buffering 1
  //  file nic.linked.aa, line 401
  // (( ~ status ) & ( ~ bad_packet_identifier ))
  // status
  // bad_packet_identifier
  // 			$volatile free_flag := (( ~ status ) & bad_packet_identifier) $buffering 1
  //  file nic.linked.aa, line 402
  // (( ~ status ) & bad_packet_identifier)
  // status
  // bad_packet_identifier
  // 			$volatile cond := (ok_flag == 1 ) $buffering 1
  //  file nic.linked.aa, line 403
  // (ok_flag == 1 )
  // ok_flag
  // 			$guard (ok_flag) $call populateRxQueue (rx_buffer_pointer_36 ) () 
  //  file nic.linked.aa, line 406
  // rx_buffer_pointer_36
  call_stmt_1015_call <=> (branch_block_stmt_955/do_while_stmt_966/do_while_stmt_966_loop_body/call_stmt_1015_Sample/crr branch_block_stmt_955/do_while_stmt_966/do_while_stmt_966_loop_body/call_stmt_1015_Update/ccr) (branch_block_stmt_955/do_while_stmt_966/do_while_stmt_966_loop_body/call_stmt_1015_Sample/cra branch_block_stmt_955/do_while_stmt_966/do_while_stmt_966_loop_body/call_stmt_1015_Update/cca)
  // 			$guard (free_flag) $call pushIntoQueue (($bitcast ($uint<1>) _b1  ) FREE_Q ( $slice rx_buffer_pointer_36 35 4 )  ) (push_status ) 
  //  file nic.linked.aa, line 408
  // FREE_Q
  // rx_buffer_pointer_36
  call_stmt_1025_call <=> (branch_block_stmt_955/do_while_stmt_966/do_while_stmt_966_loop_body/call_stmt_1025_Sample/crr branch_block_stmt_955/do_while_stmt_966/do_while_stmt_966_loop_body/call_stmt_1025_Update/ccr) (branch_block_stmt_955/do_while_stmt_966/do_while_stmt_966_loop_body/call_stmt_1025_Sample/cra branch_block_stmt_955/do_while_stmt_966/do_while_stmt_966_loop_body/call_stmt_1025_Update/cca)
  // (CONTROL_REGISTER [] 0 )
  // CONTROL_REGISTER
  do_while_stmt_966_branch <=> (branch_block_stmt_955/do_while_stmt_966/do_while_stmt_966_loop_body/condition_evaluated) (branch_block_stmt_955/do_while_stmt_966/loop_exit/ack branch_block_stmt_955/do_while_stmt_966/loop_taken/ack)
}
$module [SoftwareRegisterAccessDaemon] 
{
  // pipe-declarations for block %SoftwareRegisterAccessDaemon
  //  file nic.linked.aa, line 414
  // pipe-declarations for block %SoftwareRegisterAccessDaemon%loop
  //  file nic.linked.aa, line 420
  // memory-space 0 is read from.
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    <>[branch_block_stmt_1036] // Branch Block  file nic.linked.aa, line 420
    {
      $P [branch_block_stmt_1036__entry__]
      branch_block_stmt_1036__entry__ <-| ($entry)
      $P [branch_block_stmt_1036__exit__]
      branch_block_stmt_1036__exit__ |-> ($exit)
      $P [do_while_stmt_1037__entry__] 
      $P [do_while_stmt_1037__exit__] 
      // do-while-statement  
      //  file nic.linked.aa, line 422
      <o> [do_while_stmt_1037]  $depth 31 $buffering 1 
      {
        $P[do_while_stmt_1037__entry__] 
        $P[do_while_stmt_1037__exit__] 
        $P[loop_back] 
        $P[condition_done] 
        $P[loop_body_done] 
        $pipeline [do_while_stmt_1037_loop_body] 
        {
          // Pipelined!
          $T[back_edge_to_loop_body] 
          $T[first_time_through_loop_body] 
          $T[loop_body_start] 
          $T[condition_evaluated] 
          $transitionmerge [entry_tmerge] (back_edge_to_loop_body first_time_through_loop_body) (loop_body_start)
          $entry <-& (loop_body_start)
          $T[aggregated_phi_sample_req] 
          $T[aggregated_phi_sample_ack] 
          $T[aggregated_phi_update_req] 
          $T[aggregated_phi_update_ack] 
          // do not loop-back unless all phi's have used up their triggering tokens.
          condition_evaluated <-& (aggregated_phi_update_ack)
          aggregated_phi_sample_req o<-& (aggregated_phi_update_ack 0)
          // start:  PHI statement phi_stmt_1039
          // 			$phi INIT := 			  ($bitcast ($uint<1>) _b0  ) $on   $entry 			  ($bitcast ($uint<1>) _b1  ) $on   $loopback 
          // type of target is $uint<1>
          $T[phi_stmt_1039_sample_start_] 
          $T[phi_stmt_1039_sample_completed_] 
          $T[phi_stmt_1039_update_start_] 
          $T[phi_stmt_1039_update_completed_] 
          $T[phi_stmt_1039_sample_start__ps] 
          phi_stmt_1039_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_1039_sample_completed__ps] 
          phi_stmt_1039_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_1039_update_start__ps] 
          phi_stmt_1039_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_1039_update_completed__ps] 
          phi_stmt_1039_update_completed_ <-& (phi_stmt_1039_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_1039_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_1039_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_1039_update_start_)
          $T[phi_stmt_1039_loopback_trigger] 
          phi_stmt_1039_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_1039_loopback_sample_req] 
          $T[phi_stmt_1039_loopback_sample_req_ps] 
          phi_stmt_1039_loopback_sample_req <-& (phi_stmt_1039_loopback_sample_req_ps)
          phi_stmt_1039_loopback_sample_req &-> ($null)
          $T[phi_stmt_1039_entry_trigger] 
          phi_stmt_1039_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_1039_entry_sample_req] 
          $T[phi_stmt_1039_entry_sample_req_ps] 
          phi_stmt_1039_entry_sample_req <-& (phi_stmt_1039_entry_sample_req_ps)
          phi_stmt_1039_entry_sample_req &-> ($null)
          phi_stmt_1039_update_start_ o<-& (phi_stmt_1039_update_completed_ 0)
          phi_stmt_1039_sample_start_ o<-& (phi_stmt_1039_sample_completed_ 1)
          $T[phi_stmt_1039_merged_reqs] 
          $T[phi_stmt_1039_phi_mux_ack] 
          $T[phi_stmt_1039_phi_mux_ack_ps] 
          phi_stmt_1039_phi_mux_ack_ps <-& (phi_stmt_1039_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_1039_update_completed_)
          $T[type_cast_1042_sample_start__ps] 
          $T[type_cast_1042_sample_completed__ps] 
          $T[type_cast_1042_update_start__ps] 
          $T[type_cast_1042_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[type_cast_1042_sample_start_] 
          $T[type_cast_1042_sample_completed_] 
          type_cast_1042_sample_completed_ <-& (type_cast_1042_sample_start_)
          $T[type_cast_1042_update_start_] 
          $T [type_cast_1042_update_completed_] $delay 
          type_cast_1042_update_completed_ <-& (type_cast_1042_update_start_)
          // Phi start dependency for implicit/constant alternative.
          type_cast_1042_sample_start_ <-& (type_cast_1042_sample_start__ps)
          type_cast_1042_update_start_ <-& (type_cast_1042_update_start__ps)
          // Phi complete dependency.
          type_cast_1042_sample_completed__ps <-& (type_cast_1042_sample_completed_)
          type_cast_1042_update_completed__ps <-& (type_cast_1042_update_completed_)
          $T[type_cast_1044_sample_start__ps] 
          $T[type_cast_1044_sample_completed__ps] 
          $T[type_cast_1044_update_start__ps] 
          $T[type_cast_1044_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[type_cast_1044_sample_start_] 
          $T[type_cast_1044_sample_completed_] 
          type_cast_1044_sample_completed_ <-& (type_cast_1044_sample_start_)
          $T[type_cast_1044_update_start_] 
          $T [type_cast_1044_update_completed_] $delay 
          type_cast_1044_update_completed_ <-& (type_cast_1044_update_start_)
          // Phi start dependency for implicit/constant alternative.
          type_cast_1044_sample_start_ <-& (type_cast_1044_sample_start__ps)
          type_cast_1044_update_start_ <-& (type_cast_1044_update_start__ps)
          // Phi complete dependency.
          type_cast_1044_sample_completed__ps <-& (type_cast_1044_sample_completed_)
          type_cast_1044_update_completed__ps <-& (type_cast_1044_update_completed_)
          $phisequencer [ phi_stmt_1039_phi_seq] : 
          phi_stmt_1039_entry_trigger type_cast_1042_sample_start__ps type_cast_1042_sample_completed__ps type_cast_1042_update_start__ps type_cast_1042_update_completed__ps phi_stmt_1039_loopback_trigger type_cast_1044_sample_start__ps type_cast_1044_sample_completed__ps type_cast_1044_update_start__ps type_cast_1044_update_completed__ps :
          phi_stmt_1039_sample_start__ps phi_stmt_1039_sample_completed__ps phi_stmt_1039_update_start__ps phi_stmt_1039_update_completed__ps :
          phi_stmt_1039_entry_sample_req_ps phi_stmt_1039_loopback_sample_req_ps : 
          phi_stmt_1039_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_1039
          // start:  PHI statement phi_stmt_1045
          // 			$phi control_register := 			  ($bitcast ($uint<1>) _b0  ) $on   $entry 			  check_control_regsiter $on   $loopback 
          // type of target is $uint<1>
          $T[phi_stmt_1045_sample_start_] 
          $T[phi_stmt_1045_sample_completed_] 
          $T[phi_stmt_1045_update_start_] 
          $T[phi_stmt_1045_update_completed_] 
          $T[phi_stmt_1045_sample_start__ps] 
          phi_stmt_1045_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_1045_sample_completed__ps] 
          phi_stmt_1045_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_1045_update_start__ps] 
          phi_stmt_1045_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_1045_update_completed__ps] 
          phi_stmt_1045_update_completed_ <-& (phi_stmt_1045_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_1045_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_1045_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_1045_update_start_)
          $T[phi_stmt_1045_loopback_trigger] 
          phi_stmt_1045_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_1045_loopback_sample_req] 
          $T[phi_stmt_1045_loopback_sample_req_ps] 
          phi_stmt_1045_loopback_sample_req <-& (phi_stmt_1045_loopback_sample_req_ps)
          phi_stmt_1045_loopback_sample_req &-> ($null)
          $T[phi_stmt_1045_entry_trigger] 
          phi_stmt_1045_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_1045_entry_sample_req] 
          $T[phi_stmt_1045_entry_sample_req_ps] 
          phi_stmt_1045_entry_sample_req <-& (phi_stmt_1045_entry_sample_req_ps)
          phi_stmt_1045_entry_sample_req &-> ($null)
          phi_stmt_1045_update_start_ o<-& (phi_stmt_1045_update_completed_ 0)
          phi_stmt_1045_sample_start_ o<-& (phi_stmt_1045_sample_completed_ 1)
          $T[phi_stmt_1045_merged_reqs] 
          $T[phi_stmt_1045_phi_mux_ack] 
          $T[phi_stmt_1045_phi_mux_ack_ps] 
          phi_stmt_1045_phi_mux_ack_ps <-& (phi_stmt_1045_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_1045_update_completed_)
          $T[type_cast_1048_sample_start__ps] 
          $T[type_cast_1048_sample_completed__ps] 
          $T[type_cast_1048_update_start__ps] 
          $T[type_cast_1048_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[type_cast_1048_sample_start_] 
          $T[type_cast_1048_sample_completed_] 
          type_cast_1048_sample_completed_ <-& (type_cast_1048_sample_start_)
          $T[type_cast_1048_update_start_] 
          $T [type_cast_1048_update_completed_] $delay 
          type_cast_1048_update_completed_ <-& (type_cast_1048_update_start_)
          // Phi start dependency for implicit/constant alternative.
          type_cast_1048_sample_start_ <-& (type_cast_1048_sample_start__ps)
          type_cast_1048_update_start_ <-& (type_cast_1048_update_start__ps)
          // Phi complete dependency.
          type_cast_1048_sample_completed__ps <-& (type_cast_1048_sample_completed_)
          type_cast_1048_update_completed__ps <-& (type_cast_1048_update_completed_)
          $T[R_check_control_regsiter_1049_sample_start__ps] 
          $T[R_check_control_regsiter_1049_sample_completed__ps] 
          $T[R_check_control_regsiter_1049_update_start__ps] 
          $T[R_check_control_regsiter_1049_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_check_control_regsiter_1049_sample_start_] 
          $T[R_check_control_regsiter_1049_sample_completed_] 
          $T[R_check_control_regsiter_1049_update_start_] 
          $T[R_check_control_regsiter_1049_update_completed_] 
          ;;[R_check_control_regsiter_1049_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_check_control_regsiter_1049_sample_start_ &-> (R_check_control_regsiter_1049_Sample)
          R_check_control_regsiter_1049_sample_completed_ <-& (R_check_control_regsiter_1049_Sample)
          ;;[R_check_control_regsiter_1049_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_check_control_regsiter_1049_update_start_ &-> (R_check_control_regsiter_1049_Update)
          R_check_control_regsiter_1049_update_completed_ <-& (R_check_control_regsiter_1049_Update)
          // RAW reenables for check_control_regsiter
          // Phi start dependency for implicit/constant alternative.
          R_check_control_regsiter_1049_sample_start_ <-& (R_check_control_regsiter_1049_sample_start__ps)
          R_check_control_regsiter_1049_update_start_ <-& (R_check_control_regsiter_1049_update_start__ps)
          // Phi complete dependency.
          R_check_control_regsiter_1049_sample_completed__ps <-& (R_check_control_regsiter_1049_sample_completed_)
          R_check_control_regsiter_1049_update_completed__ps <-& (R_check_control_regsiter_1049_update_completed_)
          $phisequencer [ phi_stmt_1045_phi_seq] : 
          phi_stmt_1045_entry_trigger type_cast_1048_sample_start__ps type_cast_1048_sample_completed__ps type_cast_1048_update_start__ps type_cast_1048_update_completed__ps phi_stmt_1045_loopback_trigger R_check_control_regsiter_1049_sample_start__ps R_check_control_regsiter_1049_sample_completed__ps R_check_control_regsiter_1049_update_start__ps R_check_control_regsiter_1049_update_completed__ps :
          phi_stmt_1045_sample_start__ps phi_stmt_1045_sample_completed__ps phi_stmt_1045_update_start__ps phi_stmt_1045_update_completed__ps :
          phi_stmt_1045_entry_sample_req_ps phi_stmt_1045_loopback_sample_req_ps : 
          phi_stmt_1045_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_1045
          // start:  PHI statement phi_stmt_1050
          // 			$phi free_q := 			  ($bitcast ($uint<1>) _b0  ) $on   $entry 			  check_free_q $on   $loopback 
          // type of target is $uint<1>
          $T[phi_stmt_1050_sample_start_] 
          $T[phi_stmt_1050_sample_completed_] 
          $T[phi_stmt_1050_update_start_] 
          $T[phi_stmt_1050_update_completed_] 
          $T[phi_stmt_1050_sample_start__ps] 
          phi_stmt_1050_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_1050_sample_completed__ps] 
          phi_stmt_1050_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_1050_update_start__ps] 
          phi_stmt_1050_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_1050_update_completed__ps] 
          phi_stmt_1050_update_completed_ <-& (phi_stmt_1050_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_1050_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_1050_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_1050_update_start_)
          $T[phi_stmt_1050_loopback_trigger] 
          phi_stmt_1050_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_1050_loopback_sample_req] 
          $T[phi_stmt_1050_loopback_sample_req_ps] 
          phi_stmt_1050_loopback_sample_req <-& (phi_stmt_1050_loopback_sample_req_ps)
          phi_stmt_1050_loopback_sample_req &-> ($null)
          $T[phi_stmt_1050_entry_trigger] 
          phi_stmt_1050_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_1050_entry_sample_req] 
          $T[phi_stmt_1050_entry_sample_req_ps] 
          phi_stmt_1050_entry_sample_req <-& (phi_stmt_1050_entry_sample_req_ps)
          phi_stmt_1050_entry_sample_req &-> ($null)
          phi_stmt_1050_update_start_ o<-& (phi_stmt_1050_update_completed_ 0)
          phi_stmt_1050_sample_start_ o<-& (phi_stmt_1050_sample_completed_ 1)
          $T[phi_stmt_1050_merged_reqs] 
          $T[phi_stmt_1050_phi_mux_ack] 
          $T[phi_stmt_1050_phi_mux_ack_ps] 
          phi_stmt_1050_phi_mux_ack_ps <-& (phi_stmt_1050_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_1050_update_completed_)
          $T[type_cast_1053_sample_start__ps] 
          $T[type_cast_1053_sample_completed__ps] 
          $T[type_cast_1053_update_start__ps] 
          $T[type_cast_1053_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[type_cast_1053_sample_start_] 
          $T[type_cast_1053_sample_completed_] 
          type_cast_1053_sample_completed_ <-& (type_cast_1053_sample_start_)
          $T[type_cast_1053_update_start_] 
          $T [type_cast_1053_update_completed_] $delay 
          type_cast_1053_update_completed_ <-& (type_cast_1053_update_start_)
          // Phi start dependency for implicit/constant alternative.
          type_cast_1053_sample_start_ <-& (type_cast_1053_sample_start__ps)
          type_cast_1053_update_start_ <-& (type_cast_1053_update_start__ps)
          // Phi complete dependency.
          type_cast_1053_sample_completed__ps <-& (type_cast_1053_sample_completed_)
          type_cast_1053_update_completed__ps <-& (type_cast_1053_update_completed_)
          $T[R_check_free_q_1054_sample_start__ps] 
          $T[R_check_free_q_1054_sample_completed__ps] 
          $T[R_check_free_q_1054_update_start__ps] 
          $T[R_check_free_q_1054_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_check_free_q_1054_sample_start_] 
          $T[R_check_free_q_1054_sample_completed_] 
          $T[R_check_free_q_1054_update_start_] 
          $T[R_check_free_q_1054_update_completed_] 
          ;;[R_check_free_q_1054_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_check_free_q_1054_sample_start_ &-> (R_check_free_q_1054_Sample)
          R_check_free_q_1054_sample_completed_ <-& (R_check_free_q_1054_Sample)
          ;;[R_check_free_q_1054_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_check_free_q_1054_update_start_ &-> (R_check_free_q_1054_Update)
          R_check_free_q_1054_update_completed_ <-& (R_check_free_q_1054_Update)
          // RAW reenables for check_free_q
          // Phi start dependency for implicit/constant alternative.
          R_check_free_q_1054_sample_start_ <-& (R_check_free_q_1054_sample_start__ps)
          R_check_free_q_1054_update_start_ <-& (R_check_free_q_1054_update_start__ps)
          // Phi complete dependency.
          R_check_free_q_1054_sample_completed__ps <-& (R_check_free_q_1054_sample_completed_)
          R_check_free_q_1054_update_completed__ps <-& (R_check_free_q_1054_update_completed_)
          $phisequencer [ phi_stmt_1050_phi_seq] : 
          phi_stmt_1050_entry_trigger type_cast_1053_sample_start__ps type_cast_1053_sample_completed__ps type_cast_1053_update_start__ps type_cast_1053_update_completed__ps phi_stmt_1050_loopback_trigger R_check_free_q_1054_sample_start__ps R_check_free_q_1054_sample_completed__ps R_check_free_q_1054_update_start__ps R_check_free_q_1054_update_completed__ps :
          phi_stmt_1050_sample_start__ps phi_stmt_1050_sample_completed__ps phi_stmt_1050_update_start__ps phi_stmt_1050_update_completed__ps :
          phi_stmt_1050_entry_sample_req_ps phi_stmt_1050_loopback_sample_req_ps : 
          phi_stmt_1050_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_1050
          // start:  PHI statement phi_stmt_1055
          // 			$phi num_server := 			  ($bitcast ($uint<1>) _b0  ) $on   $entry 			  check_num_server $on   $loopback 
          // type of target is $uint<1>
          $T[phi_stmt_1055_sample_start_] 
          $T[phi_stmt_1055_sample_completed_] 
          $T[phi_stmt_1055_update_start_] 
          $T[phi_stmt_1055_update_completed_] 
          $T[phi_stmt_1055_sample_start__ps] 
          phi_stmt_1055_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_1055_sample_completed__ps] 
          phi_stmt_1055_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_1055_update_start__ps] 
          phi_stmt_1055_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_1055_update_completed__ps] 
          phi_stmt_1055_update_completed_ <-& (phi_stmt_1055_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_1055_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_1055_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_1055_update_start_)
          $T[phi_stmt_1055_loopback_trigger] 
          phi_stmt_1055_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_1055_loopback_sample_req] 
          $T[phi_stmt_1055_loopback_sample_req_ps] 
          phi_stmt_1055_loopback_sample_req <-& (phi_stmt_1055_loopback_sample_req_ps)
          phi_stmt_1055_loopback_sample_req &-> ($null)
          $T[phi_stmt_1055_entry_trigger] 
          phi_stmt_1055_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_1055_entry_sample_req] 
          $T[phi_stmt_1055_entry_sample_req_ps] 
          phi_stmt_1055_entry_sample_req <-& (phi_stmt_1055_entry_sample_req_ps)
          phi_stmt_1055_entry_sample_req &-> ($null)
          phi_stmt_1055_update_start_ o<-& (phi_stmt_1055_update_completed_ 0)
          phi_stmt_1055_sample_start_ o<-& (phi_stmt_1055_sample_completed_ 1)
          $T[phi_stmt_1055_merged_reqs] 
          $T[phi_stmt_1055_phi_mux_ack] 
          $T[phi_stmt_1055_phi_mux_ack_ps] 
          phi_stmt_1055_phi_mux_ack_ps <-& (phi_stmt_1055_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_1055_update_completed_)
          $T[type_cast_1058_sample_start__ps] 
          $T[type_cast_1058_sample_completed__ps] 
          $T[type_cast_1058_update_start__ps] 
          $T[type_cast_1058_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[type_cast_1058_sample_start_] 
          $T[type_cast_1058_sample_completed_] 
          type_cast_1058_sample_completed_ <-& (type_cast_1058_sample_start_)
          $T[type_cast_1058_update_start_] 
          $T [type_cast_1058_update_completed_] $delay 
          type_cast_1058_update_completed_ <-& (type_cast_1058_update_start_)
          // Phi start dependency for implicit/constant alternative.
          type_cast_1058_sample_start_ <-& (type_cast_1058_sample_start__ps)
          type_cast_1058_update_start_ <-& (type_cast_1058_update_start__ps)
          // Phi complete dependency.
          type_cast_1058_sample_completed__ps <-& (type_cast_1058_sample_completed_)
          type_cast_1058_update_completed__ps <-& (type_cast_1058_update_completed_)
          $T[R_check_num_server_1059_sample_start__ps] 
          $T[R_check_num_server_1059_sample_completed__ps] 
          $T[R_check_num_server_1059_update_start__ps] 
          $T[R_check_num_server_1059_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_check_num_server_1059_sample_start_] 
          $T[R_check_num_server_1059_sample_completed_] 
          $T[R_check_num_server_1059_update_start_] 
          $T[R_check_num_server_1059_update_completed_] 
          ;;[R_check_num_server_1059_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_check_num_server_1059_sample_start_ &-> (R_check_num_server_1059_Sample)
          R_check_num_server_1059_sample_completed_ <-& (R_check_num_server_1059_Sample)
          ;;[R_check_num_server_1059_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_check_num_server_1059_update_start_ &-> (R_check_num_server_1059_Update)
          R_check_num_server_1059_update_completed_ <-& (R_check_num_server_1059_Update)
          // RAW reenables for check_num_server
          // Phi start dependency for implicit/constant alternative.
          R_check_num_server_1059_sample_start_ <-& (R_check_num_server_1059_sample_start__ps)
          R_check_num_server_1059_update_start_ <-& (R_check_num_server_1059_update_start__ps)
          // Phi complete dependency.
          R_check_num_server_1059_sample_completed__ps <-& (R_check_num_server_1059_sample_completed_)
          R_check_num_server_1059_update_completed__ps <-& (R_check_num_server_1059_update_completed_)
          $phisequencer [ phi_stmt_1055_phi_seq] : 
          phi_stmt_1055_entry_trigger type_cast_1058_sample_start__ps type_cast_1058_sample_completed__ps type_cast_1058_update_start__ps type_cast_1058_update_completed__ps phi_stmt_1055_loopback_trigger R_check_num_server_1059_sample_start__ps R_check_num_server_1059_sample_completed__ps R_check_num_server_1059_update_start__ps R_check_num_server_1059_update_completed__ps :
          phi_stmt_1055_sample_start__ps phi_stmt_1055_sample_completed__ps phi_stmt_1055_update_start__ps phi_stmt_1055_update_completed__ps :
          phi_stmt_1055_entry_sample_req_ps phi_stmt_1055_loopback_sample_req_ps : 
          phi_stmt_1055_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_1055
          // start:  			control_data := nic_registers[0 ] $buffering 1// bits of buffering = 32. 
          //  file nic.linked.aa, line 435
          // Source expression
          // nic_registers[0 ]
          $T[array_obj_ref_1064_base_address_calculated] 
          $T[array_obj_ref_1064_sample_start_] 
          $T[array_obj_ref_1064_sample_completed_] 
          $T[array_obj_ref_1064_update_start_] 
          $T[array_obj_ref_1064_update_completed_] 
          $T[array_obj_ref_1064_word_address_calculated] 
          $T[array_obj_ref_1064_root_address_calculated] 
          array_obj_ref_1064_word_address_calculated <-& (array_obj_ref_1064_root_address_calculated)
          ;;[array_obj_ref_1064_Sample] 
          {
            ||[word_access_start] 
            {
              ;;[word_0] 
              {
                $T [rr] $T [ra] 
              }
            }
          }
          ;;[array_obj_ref_1064_Update] 
          {
            ||[word_access_complete] 
            {
              ;;[word_0] 
              {
                $T [cr] $T [ca] 
              }
            }
            ;;[array_obj_ref_1064_Merge] 
            {
              $T [merge_req] $T [merge_ack]
            }
          }
          array_obj_ref_1064_sample_start_ <-& (array_obj_ref_1064_word_address_calculated)
          // reenable-joins
          array_obj_ref_1064_sample_start_ &-> (array_obj_ref_1064_Sample)
          array_obj_ref_1064_sample_completed_ <-& (array_obj_ref_1064_Sample)
          array_obj_ref_1064_sample_completed_ &-> ($null)
          array_obj_ref_1064_update_start_ &-> (array_obj_ref_1064_Update)
          array_obj_ref_1064_update_completed_ <-& (array_obj_ref_1064_Update)
          // self-release: 
          array_obj_ref_1064_sample_start_ o<-& (array_obj_ref_1064_sample_completed_ 1)
          $null &-> (array_obj_ref_1064_update_start_)
          array_obj_ref_1064_update_start_ o<-& (array_obj_ref_1064_update_completed_ 0)
          // Target expression
          // (as target) control_data
          // start: WAR dependencies for control_data
          // done: WAR dependencies for control_data
          // end:  			control_data := nic_registers[0 ] $buffering 1// bits of buffering = 32. 
          // start: WAR dependencies for update_control_register_pipe
          // done: WAR dependencies for update_control_register_pipe
          // start:  			$volatile update_control_register_pipe := (( ~ INIT ) | (INIT & control_register)) $buffering 1
          //  file nic.linked.aa, line 437
          // volatile! 
          // Source expression
          // (( ~ INIT ) | (INIT & control_register))
          // ( ~ INIT )
          // INIT
          // (INIT & control_register)
          // INIT
          // control_register
          // Target expression
          // (as target) update_control_register_pipe
          // start: WAR dependencies for update_control_register_pipe
          // done: WAR dependencies for update_control_register_pipe
          // end:  			$volatile update_control_register_pipe := (( ~ INIT ) | (INIT & control_register)) $buffering 1
          // start: WAR dependencies for update_free_q_pipe
          // done: WAR dependencies for update_free_q_pipe
          // start:  			$volatile update_free_q_pipe := (( ~ INIT ) | (INIT & free_q)) $buffering 1
          //  file nic.linked.aa, line 438
          // volatile! 
          // Source expression
          // (( ~ INIT ) | (INIT & free_q))
          // ( ~ INIT )
          // INIT
          // (INIT & free_q)
          // INIT
          // free_q
          // Target expression
          // (as target) update_free_q_pipe
          // start: WAR dependencies for update_free_q_pipe
          // done: WAR dependencies for update_free_q_pipe
          // end:  			$volatile update_free_q_pipe := (( ~ INIT ) | (INIT & free_q)) $buffering 1
          // start: WAR dependencies for update_server_num
          // done: WAR dependencies for update_server_num
          // start:  			$volatile update_server_num := (( ~ INIT ) | (INIT & num_server)) $buffering 1
          //  file nic.linked.aa, line 439
          // volatile! 
          // Source expression
          // (( ~ INIT ) | (INIT & num_server))
          // ( ~ INIT )
          // INIT
          // (INIT & num_server)
          // INIT
          // num_server
          // Target expression
          // (as target) update_server_num
          // start: WAR dependencies for update_server_num
          // done: WAR dependencies for update_server_num
          // end:  			$volatile update_server_num := (( ~ INIT ) | (INIT & num_server)) $buffering 1
          // start:  			$guard (update_control_register_pipe) CONTROL_REGISTER := nic_registers[0 ] $buffering 1// bits of buffering = 32. 
          //  file nic.linked.aa, line 440
          // Guard expression 
          // update_control_register_pipe
          // Source expression
          // nic_registers[0 ]
          $T[array_obj_ref_1095_base_address_calculated] 
          $T[array_obj_ref_1095_sample_start_] 
          $T[array_obj_ref_1095_sample_completed_] 
          $T[array_obj_ref_1095_update_start_] 
          $T[array_obj_ref_1095_update_completed_] 
          $T[array_obj_ref_1095_word_address_calculated] 
          $T[array_obj_ref_1095_root_address_calculated] 
          array_obj_ref_1095_word_address_calculated <-& (array_obj_ref_1095_root_address_calculated)
          ;;[array_obj_ref_1095_Sample] 
          {
            ||[word_access_start] 
            {
              ;;[word_0] 
              {
                $T [rr] $T [ra] 
              }
            }
          }
          ;;[array_obj_ref_1095_Update] 
          {
            ||[word_access_complete] 
            {
              ;;[word_0] 
              {
                $T [cr] $T [ca] 
              }
            }
            ;;[array_obj_ref_1095_Merge] 
            {
              $T [merge_req] $T [merge_ack]
            }
          }
          array_obj_ref_1095_sample_start_ <-& (array_obj_ref_1095_word_address_calculated)
          // reenable-joins
          array_obj_ref_1095_sample_start_ &-> (array_obj_ref_1095_Sample)
          array_obj_ref_1095_sample_completed_ <-& (array_obj_ref_1095_Sample)
          array_obj_ref_1095_sample_completed_ &-> ($null)
          array_obj_ref_1095_update_start_ &-> (array_obj_ref_1095_Update)
          array_obj_ref_1095_update_completed_ <-& (array_obj_ref_1095_Update)
          // self-release: 
          array_obj_ref_1095_sample_start_ o<-& (array_obj_ref_1095_sample_completed_ 1)
          $null &-> (array_obj_ref_1095_update_start_)
          array_obj_ref_1095_update_start_ o<-& (array_obj_ref_1095_update_completed_ 0)
          // Guard dependency for expression array_obj_ref_1095 with guard R_update_control_register_pipe_1092
          array_obj_ref_1095_sample_start_ <-& (phi_stmt_1039_update_completed_)
          array_obj_ref_1095_sample_start_ <-& (phi_stmt_1045_update_completed_)
          // RAW reenables for update_control_register_pipe
          phi_stmt_1039_update_start_ o<-& (array_obj_ref_1095_sample_completed_ 0)
          phi_stmt_1045_update_start_ o<-& (array_obj_ref_1095_sample_completed_ 0)
          // Target expression
          // (as target) CONTROL_REGISTER
          $T[WPIPE_CONTROL_REGISTER_1093_sample_start_] 
          $T[WPIPE_CONTROL_REGISTER_1093_sample_completed_] 
          $T[WPIPE_CONTROL_REGISTER_1093_update_start_] 
          $T[WPIPE_CONTROL_REGISTER_1093_update_completed_] 
          // Guard dependency for expression WPIPE_CONTROL_REGISTER_1093 with guard R_update_control_register_pipe_1092
          WPIPE_CONTROL_REGISTER_1093_sample_start_ <-& (phi_stmt_1039_update_completed_)
          WPIPE_CONTROL_REGISTER_1093_sample_start_ <-& (phi_stmt_1045_update_completed_)
          // RAW reenables for update_control_register_pipe
          phi_stmt_1039_update_start_ o<-& (WPIPE_CONTROL_REGISTER_1093_sample_completed_ 0)
          phi_stmt_1045_update_start_ o<-& (WPIPE_CONTROL_REGISTER_1093_sample_completed_ 0)
          ;;[WPIPE_CONTROL_REGISTER_1093_Sample] 
          {
            // pipe write sample-start CONTROL_REGISTER
            $T [req] $T [ack] 
          }
          ;;[WPIPE_CONTROL_REGISTER_1093_Update] 
          {
            // pipe write update (complete) CONTROL_REGISTER
            $T [req] $T [ack] 
          }
          WPIPE_CONTROL_REGISTER_1093_sample_start_ &-> (WPIPE_CONTROL_REGISTER_1093_Sample)
          WPIPE_CONTROL_REGISTER_1093_sample_completed_ <-& (WPIPE_CONTROL_REGISTER_1093_Sample)
          WPIPE_CONTROL_REGISTER_1093_update_start_ <-& (WPIPE_CONTROL_REGISTER_1093_sample_completed_)
          WPIPE_CONTROL_REGISTER_1093_update_start_ &-> (WPIPE_CONTROL_REGISTER_1093_Update)
          WPIPE_CONTROL_REGISTER_1093_update_completed_ <-& (WPIPE_CONTROL_REGISTER_1093_Update)
          WPIPE_CONTROL_REGISTER_1093_sample_start_ o<-& (WPIPE_CONTROL_REGISTER_1093_update_completed_ 0)
          // start: Forward dependencies from nic_registers[0 ] to transition WPIPE_CONTROL_REGISTER_1093_sample_start_
          WPIPE_CONTROL_REGISTER_1093_sample_start_ <-& (array_obj_ref_1095_update_completed_)
          // done: Forward dependencies from nic_registers[0 ] to transition WPIPE_CONTROL_REGISTER_1093_sample_start_
          // RAW reenables for nic_registers[0 ]
          array_obj_ref_1095_update_start_ o<-& (WPIPE_CONTROL_REGISTER_1093_sample_completed_ 0)
          // end:  			$guard (update_control_register_pipe) CONTROL_REGISTER := nic_registers[0 ] $buffering 1// bits of buffering = 32. 
          // start:  			$guard (update_free_q_pipe) FREE_Q_32 := nic_registers[18 ] $buffering 1// bits of buffering = 32. 
          //  file nic.linked.aa, line 441
          // Guard expression 
          // update_free_q_pipe
          // Source expression
          // nic_registers[18 ]
          $T[array_obj_ref_1100_base_address_calculated] 
          $T[array_obj_ref_1100_sample_start_] 
          $T[array_obj_ref_1100_sample_completed_] 
          $T[array_obj_ref_1100_update_start_] 
          $T[array_obj_ref_1100_update_completed_] 
          $T[array_obj_ref_1100_word_address_calculated] 
          $T[array_obj_ref_1100_root_address_calculated] 
          array_obj_ref_1100_word_address_calculated <-& (array_obj_ref_1100_root_address_calculated)
          ;;[array_obj_ref_1100_Sample] 
          {
            ||[word_access_start] 
            {
              ;;[word_0] 
              {
                $T [rr] $T [ra] 
              }
            }
          }
          ;;[array_obj_ref_1100_Update] 
          {
            ||[word_access_complete] 
            {
              ;;[word_0] 
              {
                $T [cr] $T [ca] 
              }
            }
            ;;[array_obj_ref_1100_Merge] 
            {
              $T [merge_req] $T [merge_ack]
            }
          }
          array_obj_ref_1100_sample_start_ <-& (array_obj_ref_1100_word_address_calculated)
          // reenable-joins
          array_obj_ref_1100_sample_start_ &-> (array_obj_ref_1100_Sample)
          array_obj_ref_1100_sample_completed_ <-& (array_obj_ref_1100_Sample)
          array_obj_ref_1100_sample_completed_ &-> ($null)
          array_obj_ref_1100_update_start_ &-> (array_obj_ref_1100_Update)
          array_obj_ref_1100_update_completed_ <-& (array_obj_ref_1100_Update)
          // self-release: 
          array_obj_ref_1100_sample_start_ o<-& (array_obj_ref_1100_sample_completed_ 1)
          $null &-> (array_obj_ref_1100_update_start_)
          array_obj_ref_1100_update_start_ o<-& (array_obj_ref_1100_update_completed_ 0)
          // Guard dependency for expression array_obj_ref_1100 with guard R_update_free_q_pipe_1097
          array_obj_ref_1100_sample_start_ <-& (phi_stmt_1039_update_completed_)
          array_obj_ref_1100_sample_start_ <-& (phi_stmt_1050_update_completed_)
          // RAW reenables for update_free_q_pipe
          phi_stmt_1039_update_start_ o<-& (array_obj_ref_1100_sample_completed_ 0)
          phi_stmt_1050_update_start_ o<-& (array_obj_ref_1100_sample_completed_ 0)
          // Target expression
          // (as target) FREE_Q_32
          // start: WAR dependencies for FREE_Q_32
          // done: WAR dependencies for FREE_Q_32
          // end:  			$guard (update_free_q_pipe) FREE_Q_32 := nic_registers[18 ] $buffering 1// bits of buffering = 32. 
          // start:  			$guard (update_free_q_pipe) FREE_Q := ($bitcast ($uint<36>) (FREE_Q_32 && ($bitcast ($uint<3>) _b0  )) ) $buffering 1// bits of buffering = 36. 
          //  file nic.linked.aa, line 442
          // Guard expression 
          // update_free_q_pipe
          // Source expression
          // ($bitcast ($uint<36>) (FREE_Q_32 && ($bitcast ($uint<3>) _b0  )) )
          $T[type_cast_1108_sample_start_] 
          $T[type_cast_1108_sample_completed_] 
          $T[type_cast_1108_update_start_] 
          $T[type_cast_1108_update_completed_] 
          // Guard dependency for expression type_cast_1108 with guard R_update_free_q_pipe_1102
          type_cast_1108_sample_start_ <-& (phi_stmt_1039_update_completed_)
          type_cast_1108_sample_start_ <-& (phi_stmt_1050_update_completed_)
          // RAW reenables for update_free_q_pipe
          phi_stmt_1039_update_start_ o<-& (type_cast_1108_sample_completed_ 0)
          phi_stmt_1050_update_start_ o<-& (type_cast_1108_sample_completed_ 0)
          // (FREE_Q_32 && ($bitcast ($uint<3>) _b0  ))
          // FREE_Q_32
          // start: Forward dependencies from (FREE_Q_32 && ($bitcast ($uint<3>) _b0  )) to transition type_cast_1108_sample_start_
          type_cast_1108_sample_start_ <-& (array_obj_ref_1100_update_completed_)
          // done: Forward dependencies from (FREE_Q_32 && ($bitcast ($uint<3>) _b0  )) to transition type_cast_1108_sample_start_
          ;;[type_cast_1108_Sample] 
          {
            // unary expression 
            $T [rr] $T [ra] // (split) unary operation
          }
          ;;[type_cast_1108_Update] 
          {
            // unary expression 
            $T [cr] $T [ca] //(split) unary operation
          }
          type_cast_1108_sample_start_ &-> (type_cast_1108_Sample)
          type_cast_1108_sample_completed_ <-& (type_cast_1108_Sample)
          type_cast_1108_sample_completed_ &-> ($null)
          type_cast_1108_update_start_ &-> (type_cast_1108_Update)
          type_cast_1108_update_completed_ <-& (type_cast_1108_Update)
          // RAW reenables for (FREE_Q_32 && ($bitcast ($uint<3>) _b0  ))
          array_obj_ref_1100_update_start_ o<-& (type_cast_1108_sample_completed_ 0)
          // self-release: 
          type_cast_1108_sample_start_ o<-& (type_cast_1108_sample_completed_ 1)
          $null &-> (type_cast_1108_update_start_)
          type_cast_1108_update_start_ o<-& (type_cast_1108_update_completed_ 0)
          // Target expression
          // (as target) FREE_Q
          $T[WPIPE_FREE_Q_1103_sample_start_] 
          $T[WPIPE_FREE_Q_1103_sample_completed_] 
          $T[WPIPE_FREE_Q_1103_update_start_] 
          $T[WPIPE_FREE_Q_1103_update_completed_] 
          // Guard dependency for expression WPIPE_FREE_Q_1103 with guard R_update_free_q_pipe_1102
          WPIPE_FREE_Q_1103_sample_start_ <-& (phi_stmt_1039_update_completed_)
          WPIPE_FREE_Q_1103_sample_start_ <-& (phi_stmt_1050_update_completed_)
          // RAW reenables for update_free_q_pipe
          phi_stmt_1039_update_start_ o<-& (WPIPE_FREE_Q_1103_sample_completed_ 0)
          phi_stmt_1050_update_start_ o<-& (WPIPE_FREE_Q_1103_sample_completed_ 0)
          ;;[WPIPE_FREE_Q_1103_Sample] 
          {
            // pipe write sample-start FREE_Q
            $T [req] $T [ack] 
          }
          ;;[WPIPE_FREE_Q_1103_Update] 
          {
            // pipe write update (complete) FREE_Q
            $T [req] $T [ack] 
          }
          WPIPE_FREE_Q_1103_sample_start_ &-> (WPIPE_FREE_Q_1103_Sample)
          WPIPE_FREE_Q_1103_sample_completed_ <-& (WPIPE_FREE_Q_1103_Sample)
          WPIPE_FREE_Q_1103_update_start_ <-& (WPIPE_FREE_Q_1103_sample_completed_)
          WPIPE_FREE_Q_1103_update_start_ &-> (WPIPE_FREE_Q_1103_Update)
          WPIPE_FREE_Q_1103_update_completed_ <-& (WPIPE_FREE_Q_1103_Update)
          WPIPE_FREE_Q_1103_sample_start_ o<-& (WPIPE_FREE_Q_1103_update_completed_ 0)
          // start: Forward dependencies from ($bitcast ($uint<36>) (FREE_Q_32 && ($bitcast ($uint<3>) _b0  )) ) to transition WPIPE_FREE_Q_1103_sample_start_
          WPIPE_FREE_Q_1103_sample_start_ <-& (type_cast_1108_update_completed_)
          // done: Forward dependencies from ($bitcast ($uint<36>) (FREE_Q_32 && ($bitcast ($uint<3>) _b0  )) ) to transition WPIPE_FREE_Q_1103_sample_start_
          // RAW reenables for ($bitcast ($uint<36>) (FREE_Q_32 && ($bitcast ($uint<3>) _b0  )) )
          type_cast_1108_update_start_ o<-& (WPIPE_FREE_Q_1103_sample_completed_ 0)
          // end:  			$guard (update_free_q_pipe) FREE_Q := ($bitcast ($uint<36>) (FREE_Q_32 && ($bitcast ($uint<3>) _b0  )) ) $buffering 1// bits of buffering = 36. 
          // start:  			$guard (update_server_num) NUMBER_OF_SERVERS := nic_registers[1 ] $buffering 1// bits of buffering = 32. 
          //  file nic.linked.aa, line 443
          // Guard expression 
          // update_server_num
          // Source expression
          // nic_registers[1 ]
          $T[array_obj_ref_1113_base_address_calculated] 
          $T[array_obj_ref_1113_sample_start_] 
          $T[array_obj_ref_1113_sample_completed_] 
          $T[array_obj_ref_1113_update_start_] 
          $T[array_obj_ref_1113_update_completed_] 
          $T[array_obj_ref_1113_word_address_calculated] 
          $T[array_obj_ref_1113_root_address_calculated] 
          array_obj_ref_1113_word_address_calculated <-& (array_obj_ref_1113_root_address_calculated)
          ;;[array_obj_ref_1113_Sample] 
          {
            ||[word_access_start] 
            {
              ;;[word_0] 
              {
                $T [rr] $T [ra] 
              }
            }
          }
          ;;[array_obj_ref_1113_Update] 
          {
            ||[word_access_complete] 
            {
              ;;[word_0] 
              {
                $T [cr] $T [ca] 
              }
            }
            ;;[array_obj_ref_1113_Merge] 
            {
              $T [merge_req] $T [merge_ack]
            }
          }
          array_obj_ref_1113_sample_start_ <-& (array_obj_ref_1113_word_address_calculated)
          // reenable-joins
          array_obj_ref_1113_sample_start_ &-> (array_obj_ref_1113_Sample)
          array_obj_ref_1113_sample_completed_ <-& (array_obj_ref_1113_Sample)
          array_obj_ref_1113_sample_completed_ &-> ($null)
          array_obj_ref_1113_update_start_ &-> (array_obj_ref_1113_Update)
          array_obj_ref_1113_update_completed_ <-& (array_obj_ref_1113_Update)
          // self-release: 
          array_obj_ref_1113_sample_start_ o<-& (array_obj_ref_1113_sample_completed_ 1)
          $null &-> (array_obj_ref_1113_update_start_)
          array_obj_ref_1113_update_start_ o<-& (array_obj_ref_1113_update_completed_ 0)
          // Guard dependency for expression array_obj_ref_1113 with guard R_update_server_num_1110
          array_obj_ref_1113_sample_start_ <-& (phi_stmt_1039_update_completed_)
          array_obj_ref_1113_sample_start_ <-& (phi_stmt_1055_update_completed_)
          // RAW reenables for update_server_num
          phi_stmt_1039_update_start_ o<-& (array_obj_ref_1113_sample_completed_ 0)
          phi_stmt_1055_update_start_ o<-& (array_obj_ref_1113_sample_completed_ 0)
          // Target expression
          // (as target) NUMBER_OF_SERVERS
          $T[WPIPE_NUMBER_OF_SERVERS_1111_sample_start_] 
          $T[WPIPE_NUMBER_OF_SERVERS_1111_sample_completed_] 
          $T[WPIPE_NUMBER_OF_SERVERS_1111_update_start_] 
          $T[WPIPE_NUMBER_OF_SERVERS_1111_update_completed_] 
          // Guard dependency for expression WPIPE_NUMBER_OF_SERVERS_1111 with guard R_update_server_num_1110
          WPIPE_NUMBER_OF_SERVERS_1111_sample_start_ <-& (phi_stmt_1039_update_completed_)
          WPIPE_NUMBER_OF_SERVERS_1111_sample_start_ <-& (phi_stmt_1055_update_completed_)
          // RAW reenables for update_server_num
          phi_stmt_1039_update_start_ o<-& (WPIPE_NUMBER_OF_SERVERS_1111_sample_completed_ 0)
          phi_stmt_1055_update_start_ o<-& (WPIPE_NUMBER_OF_SERVERS_1111_sample_completed_ 0)
          ;;[WPIPE_NUMBER_OF_SERVERS_1111_Sample] 
          {
            // pipe write sample-start NUMBER_OF_SERVERS
            $T [req] $T [ack] 
          }
          ;;[WPIPE_NUMBER_OF_SERVERS_1111_Update] 
          {
            // pipe write update (complete) NUMBER_OF_SERVERS
            $T [req] $T [ack] 
          }
          WPIPE_NUMBER_OF_SERVERS_1111_sample_start_ &-> (WPIPE_NUMBER_OF_SERVERS_1111_Sample)
          WPIPE_NUMBER_OF_SERVERS_1111_sample_completed_ <-& (WPIPE_NUMBER_OF_SERVERS_1111_Sample)
          WPIPE_NUMBER_OF_SERVERS_1111_update_start_ <-& (WPIPE_NUMBER_OF_SERVERS_1111_sample_completed_)
          WPIPE_NUMBER_OF_SERVERS_1111_update_start_ &-> (WPIPE_NUMBER_OF_SERVERS_1111_Update)
          WPIPE_NUMBER_OF_SERVERS_1111_update_completed_ <-& (WPIPE_NUMBER_OF_SERVERS_1111_Update)
          WPIPE_NUMBER_OF_SERVERS_1111_sample_start_ o<-& (WPIPE_NUMBER_OF_SERVERS_1111_update_completed_ 0)
          // start: Forward dependencies from nic_registers[1 ] to transition WPIPE_NUMBER_OF_SERVERS_1111_sample_start_
          WPIPE_NUMBER_OF_SERVERS_1111_sample_start_ <-& (array_obj_ref_1113_update_completed_)
          // done: Forward dependencies from nic_registers[1 ] to transition WPIPE_NUMBER_OF_SERVERS_1111_sample_start_
          // RAW reenables for nic_registers[1 ]
          array_obj_ref_1113_update_start_ o<-& (WPIPE_NUMBER_OF_SERVERS_1111_sample_completed_ 0)
          // end:  			$guard (update_server_num) NUMBER_OF_SERVERS := nic_registers[1 ] $buffering 1// bits of buffering = 32. 
          // start:  			req := AFB_NIC_REQUEST $buffering 1// bits of buffering = 74. 
          //  file nic.linked.aa, line 444
          // Source expression
          // AFB_NIC_REQUEST
          $T[RPIPE_AFB_NIC_REQUEST_1116_sample_start_] 
          $T[RPIPE_AFB_NIC_REQUEST_1116_sample_completed_] 
          $T[RPIPE_AFB_NIC_REQUEST_1116_update_start_] 
          $T[RPIPE_AFB_NIC_REQUEST_1116_update_completed_] 
          ;;[RPIPE_AFB_NIC_REQUEST_1116_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_AFB_NIC_REQUEST_1116_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_AFB_NIC_REQUEST_1116_sample_start_ &-> (RPIPE_AFB_NIC_REQUEST_1116_Sample)
          RPIPE_AFB_NIC_REQUEST_1116_sample_completed_ <-& (RPIPE_AFB_NIC_REQUEST_1116_Sample)
          RPIPE_AFB_NIC_REQUEST_1116_update_start_ <-& (RPIPE_AFB_NIC_REQUEST_1116_sample_completed_)
          RPIPE_AFB_NIC_REQUEST_1116_update_start_ &-> (RPIPE_AFB_NIC_REQUEST_1116_Update)
          RPIPE_AFB_NIC_REQUEST_1116_update_completed_ <-& (RPIPE_AFB_NIC_REQUEST_1116_Update)
          RPIPE_AFB_NIC_REQUEST_1116_sample_start_ o<-& (RPIPE_AFB_NIC_REQUEST_1116_update_completed_ 0)
          // Target expression
          // (as target) req
          // start: WAR dependencies for req
          // done: WAR dependencies for req
          // end:  			req := AFB_NIC_REQUEST $buffering 1// bits of buffering = 74. 
          // start: WAR dependencies for lock
          // done: WAR dependencies for lock
          // start:  			$volatile lock := ( $slice req 73 73 )  $buffering 1
          //  file nic.linked.aa, line 446
          // volatile! 
          // Source expression
          // ( $slice req 73 73 ) 
          // req
          // Target expression
          // (as target) lock
          // start: WAR dependencies for lock
          // done: WAR dependencies for lock
          // end:  			$volatile lock := ( $slice req 73 73 )  $buffering 1
          // start: WAR dependencies for rwbar
          // done: WAR dependencies for rwbar
          // start:  			$volatile rwbar := ( $slice req 72 72 )  $buffering 1
          //  file nic.linked.aa, line 447
          // volatile! 
          // Source expression
          // ( $slice req 72 72 ) 
          // req
          // Target expression
          // (as target) rwbar
          // start: WAR dependencies for rwbar
          // done: WAR dependencies for rwbar
          // end:  			$volatile rwbar := ( $slice req 72 72 )  $buffering 1
          // start: WAR dependencies for bmask
          // done: WAR dependencies for bmask
          // start:  			$volatile bmask := ( $slice req 71 68 )  $buffering 1
          //  file nic.linked.aa, line 448
          // volatile! 
          // Source expression
          // ( $slice req 71 68 ) 
          // req
          // Target expression
          // (as target) bmask
          // start: WAR dependencies for bmask
          // done: WAR dependencies for bmask
          // end:  			$volatile bmask := ( $slice req 71 68 )  $buffering 1
          // start: WAR dependencies for addr
          // done: WAR dependencies for addr
          // start:  			$volatile addr := ( $slice req 67 32 )  $buffering 1
          //  file nic.linked.aa, line 449
          // volatile! 
          // Source expression
          // ( $slice req 67 32 ) 
          // req
          // Target expression
          // (as target) addr
          // start: WAR dependencies for addr
          // done: WAR dependencies for addr
          // end:  			$volatile addr := ( $slice req 67 32 )  $buffering 1
          // start: WAR dependencies for wdata
          // done: WAR dependencies for wdata
          // start:  			$volatile wdata := ( $slice req 31 0 )  $buffering 1
          //  file nic.linked.aa, line 450
          // volatile! 
          // Source expression
          // ( $slice req 31 0 ) 
          // req
          // Target expression
          // (as target) wdata
          // start: WAR dependencies for wdata
          // done: WAR dependencies for wdata
          // end:  			$volatile wdata := ( $slice req 31 0 )  $buffering 1
          // start: WAR dependencies for index
          // done: WAR dependencies for index
          // start:  			$volatile index := ( $slice addr 5 0 )  $buffering 1
          //  file nic.linked.aa, line 451
          // volatile! 
          // Source expression
          // ( $slice addr 5 0 ) 
          // addr
          // Target expression
          // (as target) index
          // start: WAR dependencies for index
          // done: WAR dependencies for index
          // end:  			$volatile index := ( $slice addr 5 0 )  $buffering 1
          // start: WAR dependencies for check_control_regsiter
          // WAR dependency: Read: check_control_regsiter before Write: 			$volatile check_control_regsiter := ((index == 0 ) & (rwbar == 0 )) $buffering 1
          RPIPE_AFB_NIC_REQUEST_1116_update_start_ <-& (phi_stmt_1045_sample_completed_)
          phi_stmt_1045_sample_start_ o<-& (RPIPE_AFB_NIC_REQUEST_1116_update_completed_ 0)
          // WAR dependency: release  Read: check_control_regsiter with Write: 			req := AFB_NIC_REQUEST $buffering 1// bits of buffering = 74. 
          // done: WAR dependencies for check_control_regsiter
          // start:  			$volatile check_control_regsiter := ((index == 0 ) & (rwbar == 0 )) $buffering 1
          //  file nic.linked.aa, line 452
          // volatile! 
          // Source expression
          // ((index == 0 ) & (rwbar == 0 ))
          // (index == 0 )
          // index
          // (rwbar == 0 )
          // rwbar
          // Target expression
          // (as target) check_control_regsiter
          // start: WAR dependencies for check_control_regsiter
          // WAR dependency: Read: check_control_regsiter before Write: 			$volatile check_control_regsiter := ((index == 0 ) & (rwbar == 0 )) $buffering 1
          RPIPE_AFB_NIC_REQUEST_1116_update_start_ <-& (phi_stmt_1045_sample_completed_)
          phi_stmt_1045_sample_start_ o<-& (RPIPE_AFB_NIC_REQUEST_1116_update_completed_ 0)
          // WAR dependency: release  Read: check_control_regsiter with Write: 			req := AFB_NIC_REQUEST $buffering 2// bits of buffering = 148. 
          // done: WAR dependencies for check_control_regsiter
          // end:  			$volatile check_control_regsiter := ((index == 0 ) & (rwbar == 0 )) $buffering 1
          // start: WAR dependencies for check_free_q
          // WAR dependency: Read: check_free_q before Write: 			$volatile check_free_q := ((index == 18 ) & (rwbar == 0 )) $buffering 1
          RPIPE_AFB_NIC_REQUEST_1116_update_start_ <-& (phi_stmt_1050_sample_completed_)
          phi_stmt_1050_sample_start_ o<-& (RPIPE_AFB_NIC_REQUEST_1116_update_completed_ 0)
          // WAR dependency: release  Read: check_free_q with Write: 			req := AFB_NIC_REQUEST $buffering 2// bits of buffering = 148. 
          // done: WAR dependencies for check_free_q
          // start:  			$volatile check_free_q := ((index == 18 ) & (rwbar == 0 )) $buffering 1
          //  file nic.linked.aa, line 453
          // volatile! 
          // Source expression
          // ((index == 18 ) & (rwbar == 0 ))
          // (index == 18 )
          // index
          // (rwbar == 0 )
          // rwbar
          // Target expression
          // (as target) check_free_q
          // start: WAR dependencies for check_free_q
          // WAR dependency: Read: check_free_q before Write: 			$volatile check_free_q := ((index == 18 ) & (rwbar == 0 )) $buffering 1
          RPIPE_AFB_NIC_REQUEST_1116_update_start_ <-& (phi_stmt_1050_sample_completed_)
          phi_stmt_1050_sample_start_ o<-& (RPIPE_AFB_NIC_REQUEST_1116_update_completed_ 0)
          // WAR dependency: release  Read: check_free_q with Write: 			req := AFB_NIC_REQUEST $buffering 2// bits of buffering = 148. 
          // done: WAR dependencies for check_free_q
          // end:  			$volatile check_free_q := ((index == 18 ) & (rwbar == 0 )) $buffering 1
          // start: WAR dependencies for check_num_server
          // WAR dependency: Read: check_num_server before Write: 			$volatile check_num_server := ((index == 1 ) & (rwbar == 0 )) $buffering 1
          RPIPE_AFB_NIC_REQUEST_1116_update_start_ <-& (phi_stmt_1055_sample_completed_)
          phi_stmt_1055_sample_start_ o<-& (RPIPE_AFB_NIC_REQUEST_1116_update_completed_ 0)
          // WAR dependency: release  Read: check_num_server with Write: 			req := AFB_NIC_REQUEST $buffering 2// bits of buffering = 148. 
          // done: WAR dependencies for check_num_server
          // start:  			$volatile check_num_server := ((index == 1 ) & (rwbar == 0 )) $buffering 1
          //  file nic.linked.aa, line 454
          // volatile! 
          // Source expression
          // ((index == 1 ) & (rwbar == 0 ))
          // (index == 1 )
          // index
          // (rwbar == 0 )
          // rwbar
          // Target expression
          // (as target) check_num_server
          // start: WAR dependencies for check_num_server
          // WAR dependency: Read: check_num_server before Write: 			$volatile check_num_server := ((index == 1 ) & (rwbar == 0 )) $buffering 1
          RPIPE_AFB_NIC_REQUEST_1116_update_start_ <-& (phi_stmt_1055_sample_completed_)
          phi_stmt_1055_sample_start_ o<-& (RPIPE_AFB_NIC_REQUEST_1116_update_completed_ 0)
          // WAR dependency: release  Read: check_num_server with Write: 			req := AFB_NIC_REQUEST $buffering 2// bits of buffering = 148. 
          // done: WAR dependencies for check_num_server
          // end:  			$volatile check_num_server := ((index == 1 ) & (rwbar == 0 )) $buffering 1
          // start:  			rval := nic_registers[index] $buffering 1// bits of buffering = 32. 
          //  file nic.linked.aa, line 455
          // Source expression
          // nic_registers[index]
          $T[array_obj_ref_1173_base_address_calculated] 
          $T[array_obj_ref_1173_sample_start_] 
          $T[array_obj_ref_1173_sample_completed_] 
          $T[array_obj_ref_1173_update_start_] 
          $T[array_obj_ref_1173_update_completed_] 
          $T[array_obj_ref_1173_word_address_calculated] 
          $T[array_obj_ref_1173_root_address_calculated] 
          $T[array_obj_ref_1173_offset_calculated] 
          $T[array_obj_ref_1173_index_resized_0] 
          $T[array_obj_ref_1173_index_scaled_0] 
          $T[array_obj_ref_1173_index_computed_0] 
          // index
          // start: Forward dependencies from index to transition array_obj_ref_1173_index_computed_0
          array_obj_ref_1173_index_computed_0 <-& (RPIPE_AFB_NIC_REQUEST_1116_update_completed_)
          // done: Forward dependencies from index to transition array_obj_ref_1173_index_computed_0
          ;;[array_obj_ref_1173_index_resize_0] 
          {
            $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
          }
          array_obj_ref_1173_index_computed_0 &-> (array_obj_ref_1173_index_resize_0)
          array_obj_ref_1173_index_resized_0 <-& (array_obj_ref_1173_index_resize_0)
          ;;[array_obj_ref_1173_index_scale_0] 
          {
            $T [scale_rename_req] $T [scale_rename_ack] // rename 
          }
          array_obj_ref_1173_index_resized_0 &-> (array_obj_ref_1173_index_scale_0)
          array_obj_ref_1173_index_scaled_0 <-& (array_obj_ref_1173_index_scale_0)
          ;;[array_obj_ref_1173_final_index_sum_regn] 
          {
            $T [req] $T [ack] // rename
          }
          array_obj_ref_1173_index_scaled_0 &-> (array_obj_ref_1173_final_index_sum_regn)
          array_obj_ref_1173_offset_calculated <-& (array_obj_ref_1173_final_index_sum_regn)
          ;;[array_obj_ref_1173_base_plus_offset] 
          {
            $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
          }
          array_obj_ref_1173_offset_calculated &-> (array_obj_ref_1173_base_plus_offset)
          array_obj_ref_1173_root_address_calculated <-& (array_obj_ref_1173_base_plus_offset)
          ;;[array_obj_ref_1173_word_addrgen] 
          {
            $T [root_register_req] $T [root_register_ack]
          }
          array_obj_ref_1173_root_address_calculated &-> (array_obj_ref_1173_word_addrgen)
          array_obj_ref_1173_word_address_calculated <-& (array_obj_ref_1173_word_addrgen)
          ;;[array_obj_ref_1173_Sample] 
          {
            ||[word_access_start] 
            {
              ;;[word_0] 
              {
                $T [rr] $T [ra] 
              }
            }
          }
          ;;[array_obj_ref_1173_Update] 
          {
            ||[word_access_complete] 
            {
              ;;[word_0] 
              {
                $T [cr] $T [ca] 
              }
            }
            ;;[array_obj_ref_1173_Merge] 
            {
              $T [merge_req] $T [merge_ack]
            }
          }
          array_obj_ref_1173_sample_start_ <-& (array_obj_ref_1173_word_address_calculated)
          // reenable-joins
          RPIPE_AFB_NIC_REQUEST_1116_update_start_ o<-& (array_obj_ref_1173_sample_completed_ 0)
          array_obj_ref_1173_sample_start_ &-> (array_obj_ref_1173_Sample)
          array_obj_ref_1173_sample_completed_ <-& (array_obj_ref_1173_Sample)
          array_obj_ref_1173_sample_completed_ &-> ($null)
          array_obj_ref_1173_update_start_ &-> (array_obj_ref_1173_Update)
          array_obj_ref_1173_update_completed_ <-& (array_obj_ref_1173_Update)
          // self-release: 
          array_obj_ref_1173_sample_start_ o<-& (array_obj_ref_1173_sample_completed_ 1)
          $null &-> (array_obj_ref_1173_update_start_)
          array_obj_ref_1173_update_start_ o<-& (array_obj_ref_1173_update_completed_ 0)
          // Target expression
          // (as target) rval
          // start: WAR dependencies for rval
          // done: WAR dependencies for rval
          // end:  			rval := nic_registers[index] $buffering 1// bits of buffering = 32. 
          // start: 			$guard (~rwbar) $call UpdateRegister (bmask rval wdata index ) (wval ) 
          //  file nic.linked.aa, line 456
          $T[call_stmt_1181_sample_start_] 
          $T[call_stmt_1181_sample_completed_] 
          $T[call_stmt_1181_update_start_] 
          $T[call_stmt_1181_update_completed_] 
          // Guard expression
          // rwbar
          // start: Forward dependencies from rwbar to transition call_stmt_1181_sample_start_
          call_stmt_1181_sample_start_ <-& (RPIPE_AFB_NIC_REQUEST_1116_update_completed_)
          // done: Forward dependencies from rwbar to transition call_stmt_1181_sample_start_
          // RAW reenables for rwbar
          RPIPE_AFB_NIC_REQUEST_1116_update_start_ o<-& (call_stmt_1181_sample_completed_ 0)
          // Call input argument 0
          // bmask
          // Call input argument 1
          // rval
          // Call input argument 2
          // wdata
          // Call input argument 3
          // index
          // start: Forward dependencies from bmask to transition call_stmt_1181_sample_start_
          call_stmt_1181_sample_start_ <-& (RPIPE_AFB_NIC_REQUEST_1116_update_completed_)
          // done: Forward dependencies from bmask to transition call_stmt_1181_sample_start_
          // RAW reenables for bmask
          RPIPE_AFB_NIC_REQUEST_1116_update_start_ o<-& (call_stmt_1181_sample_completed_ 0)
          // start: Forward dependencies from rval to transition call_stmt_1181_sample_start_
          call_stmt_1181_sample_start_ <-& (array_obj_ref_1173_update_completed_)
          // done: Forward dependencies from rval to transition call_stmt_1181_sample_start_
          // RAW reenables for rval
          array_obj_ref_1173_update_start_ o<-& (call_stmt_1181_sample_completed_ 0)
          // start: Forward dependencies from wdata to transition call_stmt_1181_sample_start_
          call_stmt_1181_sample_start_ <-& (RPIPE_AFB_NIC_REQUEST_1116_update_completed_)
          // done: Forward dependencies from wdata to transition call_stmt_1181_sample_start_
          // RAW reenables for wdata
          RPIPE_AFB_NIC_REQUEST_1116_update_start_ o<-& (call_stmt_1181_sample_completed_ 0)
          // start: Forward dependencies from index to transition call_stmt_1181_sample_start_
          call_stmt_1181_sample_start_ <-& (RPIPE_AFB_NIC_REQUEST_1116_update_completed_)
          // done: Forward dependencies from index to transition call_stmt_1181_sample_start_
          // RAW reenables for index
          RPIPE_AFB_NIC_REQUEST_1116_update_start_ o<-& (call_stmt_1181_sample_completed_ 0)
          ;;[call_stmt_1181_Sample] 
          {
            $T [crr] $T [cra] 
          }
          ;;[call_stmt_1181_Update] 
          {
            $T [ccr] $T [cca] 
          }
          call_stmt_1181_sample_start_ &-> (call_stmt_1181_Sample)
          call_stmt_1181_sample_completed_ <-& (call_stmt_1181_Sample)
          call_stmt_1181_sample_completed_ &-> ($null)
          call_stmt_1181_update_start_ &-> (call_stmt_1181_Update)
          call_stmt_1181_update_completed_ <-& (call_stmt_1181_Update)
          // Call output argument 0
          // (as target) wval
          // self-release: 
          call_stmt_1181_sample_start_ o<-& (call_stmt_1181_sample_completed_ 1)
          $null &-> (call_stmt_1181_update_start_)
          call_stmt_1181_update_start_ o<-& (call_stmt_1181_update_completed_ 0)
          // start: WAR dependencies for wval
          // done: WAR dependencies for wval
          // end: 			$guard (~rwbar) $call UpdateRegister (bmask rval wdata index ) (wval ) 
          // start: WAR dependencies for rdata
          // done: WAR dependencies for rdata
          // start:  			$volatile rdata := ( $mux rwbar rval  ($bitcast ($uint<32>) _b0  ) )  $buffering 1
          //  file nic.linked.aa, line 457
          // volatile! 
          // Source expression
          // ( $mux rwbar rval  ($bitcast ($uint<32>) _b0  ) ) 
          // rwbar
          // rval
          // Target expression
          // (as target) rdata
          // start: WAR dependencies for rdata
          // done: WAR dependencies for rdata
          // end:  			$volatile rdata := ( $mux rwbar rval  ($bitcast ($uint<32>) _b0  ) )  $buffering 1
          // start: WAR dependencies for resp
          // done: WAR dependencies for resp
          // start:  			$volatile resp := (($bitcast ($uint<1>) _b0  ) && rdata) $buffering 1
          //  file nic.linked.aa, line 458
          // volatile! 
          // Source expression
          // (($bitcast ($uint<1>) _b0  ) && rdata)
          // rdata
          // Target expression
          // (as target) resp
          // start: WAR dependencies for resp
          // done: WAR dependencies for resp
          // end:  			$volatile resp := (($bitcast ($uint<1>) _b0  ) && rdata) $buffering 1
          // start:  			AFB_NIC_RESPONSE := resp $buffering 1// bits of buffering = 33. 
          //  file nic.linked.aa, line 459
          // Source expression
          // resp
          // Target expression
          // (as target) AFB_NIC_RESPONSE
          $T[WPIPE_AFB_NIC_RESPONSE_1195_sample_start_] 
          $T[WPIPE_AFB_NIC_RESPONSE_1195_sample_completed_] 
          $T[WPIPE_AFB_NIC_RESPONSE_1195_update_start_] 
          $T[WPIPE_AFB_NIC_RESPONSE_1195_update_completed_] 
          ;;[WPIPE_AFB_NIC_RESPONSE_1195_Sample] 
          {
            // pipe write sample-start AFB_NIC_RESPONSE
            $T [req] $T [ack] 
          }
          ;;[WPIPE_AFB_NIC_RESPONSE_1195_Update] 
          {
            // pipe write update (complete) AFB_NIC_RESPONSE
            $T [req] $T [ack] 
          }
          WPIPE_AFB_NIC_RESPONSE_1195_sample_start_ &-> (WPIPE_AFB_NIC_RESPONSE_1195_Sample)
          WPIPE_AFB_NIC_RESPONSE_1195_sample_completed_ <-& (WPIPE_AFB_NIC_RESPONSE_1195_Sample)
          WPIPE_AFB_NIC_RESPONSE_1195_update_start_ <-& (WPIPE_AFB_NIC_RESPONSE_1195_sample_completed_)
          WPIPE_AFB_NIC_RESPONSE_1195_update_start_ &-> (WPIPE_AFB_NIC_RESPONSE_1195_Update)
          WPIPE_AFB_NIC_RESPONSE_1195_update_completed_ <-& (WPIPE_AFB_NIC_RESPONSE_1195_Update)
          WPIPE_AFB_NIC_RESPONSE_1195_sample_start_ o<-& (WPIPE_AFB_NIC_RESPONSE_1195_update_completed_ 0)
          // start: Forward dependencies from resp to transition WPIPE_AFB_NIC_RESPONSE_1195_sample_start_
          WPIPE_AFB_NIC_RESPONSE_1195_sample_start_ <-& (RPIPE_AFB_NIC_REQUEST_1116_update_completed_)
          WPIPE_AFB_NIC_RESPONSE_1195_sample_start_ <-& (array_obj_ref_1173_update_completed_)
          // done: Forward dependencies from resp to transition WPIPE_AFB_NIC_RESPONSE_1195_sample_start_
          // RAW reenables for resp
          RPIPE_AFB_NIC_REQUEST_1116_update_start_ o<-& (WPIPE_AFB_NIC_RESPONSE_1195_sample_completed_ 0)
          array_obj_ref_1173_update_start_ o<-& (WPIPE_AFB_NIC_RESPONSE_1195_sample_completed_ 0)
          // end:  			AFB_NIC_RESPONSE := resp $buffering 1// bits of buffering = 33. 
          $T [loop_body_delay_to_condition_start] $delay
          loop_body_start &-> (loop_body_delay_to_condition_start)
          loop_body_delay_to_condition_start &-> (condition_evaluated)
          condition_evaluated &-> ($null)
          // load-store dependencies..
          // memory-space  memory_space_0
          //  array_obj_ref_1064 load
          //  array_obj_ref_1095 load
          //  array_obj_ref_1100 load
          //  array_obj_ref_1113 load
          //  array_obj_ref_1173 load
          //  call_stmt_1181 store
          $T [array_obj_ref_1064_call_stmt_1181_delay] $delay
          // array_obj_ref_1064(load) -> call_stmt_1181(store)
          call_stmt_1181_sample_start_ <-& (array_obj_ref_1064_call_stmt_1181_delay)
          array_obj_ref_1064_call_stmt_1181_delay <-& (array_obj_ref_1064_sample_completed_)
          $T [array_obj_ref_1095_call_stmt_1181_delay] $delay
          // array_obj_ref_1095(load) -> call_stmt_1181(store)
          call_stmt_1181_sample_start_ <-& (array_obj_ref_1095_call_stmt_1181_delay)
          array_obj_ref_1095_call_stmt_1181_delay <-& (array_obj_ref_1095_sample_completed_)
          $T [array_obj_ref_1100_call_stmt_1181_delay] $delay
          // array_obj_ref_1100(load) -> call_stmt_1181(store)
          call_stmt_1181_sample_start_ <-& (array_obj_ref_1100_call_stmt_1181_delay)
          array_obj_ref_1100_call_stmt_1181_delay <-& (array_obj_ref_1100_sample_completed_)
          $T [array_obj_ref_1113_call_stmt_1181_delay] $delay
          // array_obj_ref_1113(load) -> call_stmt_1181(store)
          call_stmt_1181_sample_start_ <-& (array_obj_ref_1113_call_stmt_1181_delay)
          array_obj_ref_1113_call_stmt_1181_delay <-& (array_obj_ref_1113_sample_completed_)
          $T [array_obj_ref_1173_call_stmt_1181_delay] $delay
          // array_obj_ref_1173(load) -> call_stmt_1181(store)
          call_stmt_1181_sample_start_ <-& (array_obj_ref_1173_call_stmt_1181_delay)
          array_obj_ref_1173_call_stmt_1181_delay <-& (array_obj_ref_1173_sample_completed_)
          // reenable across ring for memory space memory_space_0
          $T[ring_reenable_memory_space_0] 
          ring_reenable_memory_space_0 <-& (call_stmt_1181_update_completed_)
          array_obj_ref_1064_sample_start_ o<-& (ring_reenable_memory_space_0 1)
          array_obj_ref_1095_sample_start_ o<-& (ring_reenable_memory_space_0 1)
          array_obj_ref_1100_sample_start_ o<-& (ring_reenable_memory_space_0 1)
          array_obj_ref_1113_sample_start_ o<-& (ring_reenable_memory_space_0 1)
          array_obj_ref_1173_sample_start_ o<-& (ring_reenable_memory_space_0 1)
          // pipe read/write dependencies for pipe AFB_NIC_REQUEST
          // read-dependencies for pipe AFB_NIC_REQUEST
          // write-dependencies for pipe AFB_NIC_REQUEST
          // signal write dependencies for AFB_NIC_REQUEST
          // pipe read/write dependencies for pipe CONTROL_REGISTER
          // read-dependencies for pipe CONTROL_REGISTER
          // write-dependencies for pipe CONTROL_REGISTER
          // signal write dependencies for CONTROL_REGISTER
          // pipe read/write dependencies for pipe AFB_NIC_RESPONSE
          // read-dependencies for pipe AFB_NIC_RESPONSE
          // write-dependencies for pipe AFB_NIC_RESPONSE
          // signal write dependencies for AFB_NIC_RESPONSE
          // pipe read/write dependencies for pipe FREE_Q
          // read-dependencies for pipe FREE_Q
          // write-dependencies for pipe FREE_Q
          // signal write dependencies for FREE_Q
          // pipe read/write dependencies for pipe NUMBER_OF_SERVERS
          // read-dependencies for pipe NUMBER_OF_SERVERS
          // write-dependencies for pipe NUMBER_OF_SERVERS
          // signal write dependencies for NUMBER_OF_SERVERS
        }
        ( first_time_through_loop_body  back_edge_to_loop_body) 
        ( condition_evaluated )
        ;; [loop_exit] 
        {
          $T [ack] 
        }
        ;; [loop_taken] 
        {
          $T [ack] 
        }
        do_while_stmt_1037__entry__ <-| ($entry)
        loop_body_done <-| ( do_while_stmt_1037_loop_body ) 
        condition_done |-> (loop_exit loop_taken)
        do_while_stmt_1037__exit__ |-> ($exit)
        $bind condition_done <= do_while_stmt_1037_loop_body : condition_evaluated
        $bind do_while_stmt_1037__entry__  => do_while_stmt_1037_loop_body : first_time_through_loop_body 
        $bind loop_back  => do_while_stmt_1037_loop_body : back_edge_to_loop_body 
        $terminate (loop_exit loop_taken loop_body_done) (loop_back do_while_stmt_1037__exit__)
      }
      do_while_stmt_1037__entry__ |-> (do_while_stmt_1037)
      do_while_stmt_1037__exit__ <-| (do_while_stmt_1037)
      do_while_stmt_1037__entry__ <-| (branch_block_stmt_1036__entry__)
      do_while_stmt_1037__exit__ |-> (branch_block_stmt_1036__exit__)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %SoftwareRegisterAccessDaemon%loop%
    //  file nic.linked.aa, line 424
    // constant-object-declarations for block %SoftwareRegisterAccessDaemon%loop
    //  file nic.linked.aa, line 420
    // constant-object-declarations for block %SoftwareRegisterAccessDaemon
    //  file nic.linked.aa, line 414
    // constant-declarations for block %SoftwareRegisterAccessDaemon%loop
    //  file nic.linked.aa, line 420
    // do-while statement  
    //  file nic.linked.aa, line 422
    // 1 
    $constant $W[konst_1199_wire_constant] : $int<1> := _b1// 1
    // constant-declarations for block %SoftwareRegisterAccessDaemon%loop%
    //  file nic.linked.aa, line 424
    // constant-declarations for phi:  			$phi INIT := 			  ($bitcast ($uint<1>) _b0  ) $on   $entry 			  ($bitcast ($uint<1>) _b1  ) $on   $loopback 
    // type of target is $uint<1>
    //  file nic.linked.aa, line 425
    // ($bitcast ($uint<1>) _b0  )
    $constant $W[type_cast_1042_wire_constant] : $int<1> := _b0// 0
    // ($bitcast ($uint<1>) _b1  )
    $constant $W[type_cast_1044_wire_constant] : $int<1> := _b1// 1
    // constant-declarations for phi:  			$phi control_register := 			  ($bitcast ($uint<1>) _b0  ) $on   $entry 			  check_control_regsiter $on   $loopback 
    // type of target is $uint<1>
    //  file nic.linked.aa, line 427
    // ($bitcast ($uint<1>) _b0  )
    $constant $W[type_cast_1048_wire_constant] : $int<1> := _b0// 0
    // constant-declarations for phi:  			$phi free_q := 			  ($bitcast ($uint<1>) _b0  ) $on   $entry 			  check_free_q $on   $loopback 
    // type of target is $uint<1>
    //  file nic.linked.aa, line 429
    // ($bitcast ($uint<1>) _b0  )
    $constant $W[type_cast_1053_wire_constant] : $int<1> := _b0// 0
    // constant-declarations for phi:  			$phi num_server := 			  ($bitcast ($uint<1>) _b0  ) $on   $entry 			  check_num_server $on   $loopback 
    // type of target is $uint<1>
    //  file nic.linked.aa, line 431
    // ($bitcast ($uint<1>) _b0  )
    $constant $W[type_cast_1058_wire_constant] : $int<1> := _b0// 0
    // nic_registers[0 ]
    $constant $W[array_obj_ref_1064_word_address_0] : $pointer<memory_space_0> := _b000000
    // nic_registers[0 ]
    $constant $W[array_obj_ref_1095_word_address_0] : $pointer<memory_space_0> := _b000000
    // nic_registers[18 ]
    $constant $W[array_obj_ref_1100_word_address_0] : $pointer<memory_space_0> := _b010010
    // ($bitcast ($uint<3>) _b0  )
    $constant $W[type_cast_1106_wire_constant] : $int<3> := _b000// 0
    // nic_registers[1 ]
    $constant $W[array_obj_ref_1113_word_address_0] : $pointer<memory_space_0> := _b000001
    // 0 
    $constant $W[konst_1146_wire_constant] : $int<6> := _b000000// 0
    // 0 
    $constant $W[konst_1149_wire_constant] : $int<1> := _b0// 0
    // 18 
    $constant $W[konst_1155_wire_constant] : $int<6> := _b010010// 18
    // 0 
    $constant $W[konst_1158_wire_constant] : $int<1> := _b0// 0
    // 1 
    $constant $W[konst_1164_wire_constant] : $int<6> := _b000001// 1
    // 0 
    $constant $W[konst_1167_wire_constant] : $int<1> := _b0// 0
    // nic_registers[index]
    $constant $W[array_obj_ref_1173_resized_base_address] : $int<6> := _b000000// 0
    $constant $W[array_obj_ref_1173_offset_scale_factor_0] : $int<6> := _b000001// 1
    $constant $W[array_obj_ref_1173_word_offset_0] : $int<6> := _b000000// 0
    // 			$guard (~rwbar) $call UpdateRegister (bmask rval wdata index ) (wval ) 
    //  file nic.linked.aa, line 456
    // ( $mux rwbar rval  ($bitcast ($uint<32>) _b0  ) ) 
    // ($bitcast ($uint<32>) _b0  )
    $constant $W[type_cast_1186_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // ($bitcast ($uint<1>) _b0  )
    $constant $W[type_cast_1191_wire_constant] : $int<1> := _b0// 0
    // block %SoftwareRegisterAccessDaemon%loop
    //  file nic.linked.aa, line 420
    // do-while statement  
    //  file nic.linked.aa, line 422
    // merge-statement  
    //  file nic.linked.aa, line 424
    // 			$phi INIT := 			  ($bitcast ($uint<1>) _b0  ) $on   $entry 			  ($bitcast ($uint<1>) _b1  ) $on   $loopback 
    // type of target is $uint<1>
    //  file nic.linked.aa, line 425
    // INIT
    $W[INIT_1039] : $int<1>
    // 			$phi control_register := 			  ($bitcast ($uint<1>) _b0  ) $on   $entry 			  check_control_regsiter $on   $loopback 
    // type of target is $uint<1>
    //  file nic.linked.aa, line 427
    $W[check_control_regsiter_1152_1049_buffered] : $int<1>
    // control_register
    $W[control_register_1045] : $int<1>
    // 			$phi free_q := 			  ($bitcast ($uint<1>) _b0  ) $on   $entry 			  check_free_q $on   $loopback 
    // type of target is $uint<1>
    //  file nic.linked.aa, line 429
    $W[check_free_q_1161_1054_buffered] : $int<1>
    // free_q
    $W[free_q_1050] : $int<1>
    // 			$phi num_server := 			  ($bitcast ($uint<1>) _b0  ) $on   $entry 			  check_num_server $on   $loopback 
    // type of target is $uint<1>
    //  file nic.linked.aa, line 431
    $W[check_num_server_1170_1059_buffered] : $int<1>
    // num_server
    $W[num_server_1055] : $int<1>
    // 			control_data := nic_registers[0 ] $buffering 1// bits of buffering = 32. 
    //  file nic.linked.aa, line 435
    // nic_registers[0 ]
    $W[array_obj_ref_1064_data_0] : $int<32>
    // control_data
    $W[control_data_1065] : $int<32>
    // 			$volatile update_control_register_pipe := (( ~ INIT ) | (INIT & control_register)) $buffering 1
    //  file nic.linked.aa, line 437
    // ( ~ INIT )
    $intermediate $W[NOT_u1_u1_1070_wire] : $int<1>
    // (INIT & control_register)
    $intermediate $W[AND_u1_u1_1073_wire] : $int<1>
    // update_control_register_pipe
    $W[update_control_register_pipe_1075] : $int<1>
    // 			$volatile update_free_q_pipe := (( ~ INIT ) | (INIT & free_q)) $buffering 1
    //  file nic.linked.aa, line 438
    // ( ~ INIT )
    $intermediate $W[NOT_u1_u1_1078_wire] : $int<1>
    // (INIT & free_q)
    $intermediate $W[AND_u1_u1_1081_wire] : $int<1>
    // update_free_q_pipe
    $W[update_free_q_pipe_1083] : $int<1>
    // 			$volatile update_server_num := (( ~ INIT ) | (INIT & num_server)) $buffering 1
    //  file nic.linked.aa, line 439
    // ( ~ INIT )
    $intermediate $W[NOT_u1_u1_1086_wire] : $int<1>
    // (INIT & num_server)
    $intermediate $W[AND_u1_u1_1089_wire] : $int<1>
    // update_server_num
    $W[update_server_num_1091] : $int<1>
    // 			$guard (update_control_register_pipe) CONTROL_REGISTER := nic_registers[0 ] $buffering 1// bits of buffering = 32. 
    //  file nic.linked.aa, line 440
    // nic_registers[0 ]
    $W[array_obj_ref_1095_data_0] : $int<32>
    $W[array_obj_ref_1095_wire] : $int<32>
    // CONTROL_REGISTER
    // 			$guard (update_free_q_pipe) FREE_Q_32 := nic_registers[18 ] $buffering 1// bits of buffering = 32. 
    //  file nic.linked.aa, line 441
    // nic_registers[18 ]
    $W[array_obj_ref_1100_data_0] : $int<32>
    // FREE_Q_32
    $W[FREE_Q_32_1101] : $int<32>
    // 			$guard (update_free_q_pipe) FREE_Q := ($bitcast ($uint<36>) (FREE_Q_32 && ($bitcast ($uint<3>) _b0  )) ) $buffering 1// bits of buffering = 36. 
    //  file nic.linked.aa, line 442
    // (FREE_Q_32 && ($bitcast ($uint<3>) _b0  ))
    $intermediate $W[CONCAT_u32_u35_1107_wire] : $int<35>
    // ($bitcast ($uint<36>) (FREE_Q_32 && ($bitcast ($uint<3>) _b0  )) )
    $intermediate $W[type_cast_1108_wire] : $int<36>
    // FREE_Q
    // 			$guard (update_server_num) NUMBER_OF_SERVERS := nic_registers[1 ] $buffering 1// bits of buffering = 32. 
    //  file nic.linked.aa, line 443
    // nic_registers[1 ]
    $W[array_obj_ref_1113_data_0] : $int<32>
    $W[array_obj_ref_1113_wire] : $int<32>
    // NUMBER_OF_SERVERS
    // 			req := AFB_NIC_REQUEST $buffering 2// bits of buffering = 148. 
    //  file nic.linked.aa, line 444
    // req
    $W[req_1117] : $int<74>
    // 			$volatile lock := ( $slice req 73 73 )  $buffering 1
    //  file nic.linked.aa, line 446
    // lock
    $W[lock_1123] : $int<1>
    // 			$volatile rwbar := ( $slice req 72 72 )  $buffering 1
    //  file nic.linked.aa, line 447
    // rwbar
    $W[rwbar_1127] : $int<1>
    // 			$volatile bmask := ( $slice req 71 68 )  $buffering 1
    //  file nic.linked.aa, line 448
    // bmask
    $W[bmask_1131] : $int<4>
    // 			$volatile addr := ( $slice req 67 32 )  $buffering 1
    //  file nic.linked.aa, line 449
    // addr
    $W[addr_1135] : $int<36>
    // 			$volatile wdata := ( $slice req 31 0 )  $buffering 1
    //  file nic.linked.aa, line 450
    // wdata
    $W[wdata_1139] : $int<32>
    // 			$volatile index := ( $slice addr 5 0 )  $buffering 1
    //  file nic.linked.aa, line 451
    // index
    $W[index_1143] : $int<6>
    // 			$volatile check_control_regsiter := ((index == 0 ) & (rwbar == 0 )) $buffering 1
    //  file nic.linked.aa, line 452
    // (index == 0 )
    $intermediate $W[EQ_u6_u1_1147_wire] : $int<1>
    // (rwbar == 0 )
    $intermediate $W[EQ_u1_u1_1150_wire] : $int<1>
    // check_control_regsiter
    $W[check_control_regsiter_1152] : $int<1>
    // 			$volatile check_free_q := ((index == 18 ) & (rwbar == 0 )) $buffering 1
    //  file nic.linked.aa, line 453
    // (index == 18 )
    $intermediate $W[EQ_u6_u1_1156_wire] : $int<1>
    // (rwbar == 0 )
    $intermediate $W[EQ_u1_u1_1159_wire] : $int<1>
    // check_free_q
    $W[check_free_q_1161] : $int<1>
    // 			$volatile check_num_server := ((index == 1 ) & (rwbar == 0 )) $buffering 1
    //  file nic.linked.aa, line 454
    // (index == 1 )
    $intermediate $W[EQ_u6_u1_1165_wire] : $int<1>
    // (rwbar == 0 )
    $intermediate $W[EQ_u1_u1_1168_wire] : $int<1>
    // check_num_server
    $W[check_num_server_1170] : $int<1>
    // 			rval := nic_registers[index] $buffering 1// bits of buffering = 32. 
    //  file nic.linked.aa, line 455
    // nic_registers[index]
    $intermediate $W[R_index_1172_resized] : $int<6>
    $intermediate $W[R_index_1172_scaled] : $int<6>
    $intermediate $W[array_obj_ref_1173_final_offset] : $int<6>
    $intermediate $W[array_obj_ref_1173_root_address] : $int<6>
    $W[array_obj_ref_1173_word_address_0] : $pointer<memory_space_0>
    $W[array_obj_ref_1173_data_0] : $int<32>
    // rval
    $W[rval_1174] : $int<32>
    // 			$guard (~rwbar) $call UpdateRegister (bmask rval wdata index ) (wval ) 
    //  file nic.linked.aa, line 456
    // wval
    $W[wval_1181] : $int<32>
    // 			$volatile rdata := ( $mux rwbar rval  ($bitcast ($uint<32>) _b0  ) )  $buffering 1
    //  file nic.linked.aa, line 457
    // rdata
    $W[rdata_1188] : $int<32>
    // 			$volatile resp := (($bitcast ($uint<1>) _b0  ) && rdata) $buffering 1
    //  file nic.linked.aa, line 458
    // resp
    $W[resp_1194] : $int<33>
    // 			AFB_NIC_RESPONSE := resp $buffering 1// bits of buffering = 33. 
    //  file nic.linked.aa, line 459
    // AFB_NIC_RESPONSE
    // datapath-instances for block %SoftwareRegisterAccessDaemon%loop
    //  file nic.linked.aa, line 420
    // datapath-instances for do-while  
    //  file nic.linked.aa, line 422
    ==0? [do_while_stmt_1037_branch] (konst_1199_wire_constant)
    $flowthrough
    // data-path instances for merge  
    //  file nic.linked.aa, line 424
    // 			$phi INIT := 			  ($bitcast ($uint<1>) _b0  ) $on   $entry 			  ($bitcast ($uint<1>) _b1  ) $on   $loopback 
    // type of target is $uint<1>
    //  file nic.linked.aa, line 425
    # $phi [phi_stmt_1039] (type_cast_1042_wire_constant type_cast_1044_wire_constant) ( INIT_1039 ) $fullrate
    // $buffering  $out phi_stmt_1039 INIT_1039 2
    // 			$phi control_register := 			  ($bitcast ($uint<1>) _b0  ) $on   $entry 			  check_control_regsiter $on   $loopback 
    // type of target is $uint<1>
    //  file nic.linked.aa, line 427
    # := [check_control_regsiter_1152_1049_buf] (check_control_regsiter_1152) (check_control_regsiter_1152_1049_buffered)     $fullrate
    $buffering $out check_control_regsiter_1152_1049_buf check_control_regsiter_1152_1049_buffered  1
    # $phi [phi_stmt_1045] (type_cast_1048_wire_constant check_control_regsiter_1152_1049_buffered) ( control_register_1045 ) $fullrate
    // $buffering  $out phi_stmt_1045 control_register_1045 2
    // 			$phi free_q := 			  ($bitcast ($uint<1>) _b0  ) $on   $entry 			  check_free_q $on   $loopback 
    // type of target is $uint<1>
    //  file nic.linked.aa, line 429
    # := [check_free_q_1161_1054_buf] (check_free_q_1161) (check_free_q_1161_1054_buffered)     $fullrate
    $buffering $out check_free_q_1161_1054_buf check_free_q_1161_1054_buffered  1
    # $phi [phi_stmt_1050] (type_cast_1053_wire_constant check_free_q_1161_1054_buffered) ( free_q_1050 ) $fullrate
    // $buffering  $out phi_stmt_1050 free_q_1050 2
    // 			$phi num_server := 			  ($bitcast ($uint<1>) _b0  ) $on   $entry 			  check_num_server $on   $loopback 
    // type of target is $uint<1>
    //  file nic.linked.aa, line 431
    # := [check_num_server_1170_1059_buf] (check_num_server_1170) (check_num_server_1170_1059_buffered)     $fullrate
    $buffering $out check_num_server_1170_1059_buf check_num_server_1170_1059_buffered  1
    # $phi [phi_stmt_1055] (type_cast_1058_wire_constant check_num_server_1170_1059_buffered) ( num_server_1055 ) $fullrate
    // $buffering  $out phi_stmt_1055 num_server_1055 2
    // 			control_data := nic_registers[0 ] $buffering 1// bits of buffering = 32. 
    //  file nic.linked.aa, line 435
    // nic_registers[0 ]
    $load [array_obj_ref_1064_load_0] $from memory_space_0 (array_obj_ref_1064_word_address_0) (array_obj_ref_1064_data_0) 
    $buffering  $in array_obj_ref_1064_load_0 array_obj_ref_1064_word_address_0 2
    $buffering  $out array_obj_ref_1064_load_0 array_obj_ref_1064_data_0 2
    $delay array_obj_ref_1064_load_0 5
    &/ [array_obj_ref_1064_gather_scatter] (array_obj_ref_1064_data_0) (control_data_1065) 
    $flowthrough 
    // 			$volatile update_control_register_pipe := (( ~ INIT ) | (INIT & control_register)) $buffering 1
    //  file nic.linked.aa, line 437
    // ( ~ INIT )
    ~ [NOT_u1_u1_1070_inst] (INIT_1039) (NOT_u1_u1_1070_wire)   $flowthrough
    $delay NOT_u1_u1_1070_inst 0
    // (INIT & control_register)
    &[AND_u1_u1_1073_inst] (INIT_1039 control_register_1045) (AND_u1_u1_1073_wire)   $flowthrough 
    $delay AND_u1_u1_1073_inst 0
    // (( ~ INIT ) | (INIT & control_register))
    |[OR_u1_u1_1074_inst] (NOT_u1_u1_1070_wire AND_u1_u1_1073_wire) (update_control_register_pipe_1075)   $flowthrough 
    $delay OR_u1_u1_1074_inst 0
    // 			$volatile update_free_q_pipe := (( ~ INIT ) | (INIT & free_q)) $buffering 1
    //  file nic.linked.aa, line 438
    // ( ~ INIT )
    ~ [NOT_u1_u1_1078_inst] (INIT_1039) (NOT_u1_u1_1078_wire)   $flowthrough
    $delay NOT_u1_u1_1078_inst 0
    // (INIT & free_q)
    &[AND_u1_u1_1081_inst] (INIT_1039 free_q_1050) (AND_u1_u1_1081_wire)   $flowthrough 
    $delay AND_u1_u1_1081_inst 0
    // (( ~ INIT ) | (INIT & free_q))
    |[OR_u1_u1_1082_inst] (NOT_u1_u1_1078_wire AND_u1_u1_1081_wire) (update_free_q_pipe_1083)   $flowthrough 
    $delay OR_u1_u1_1082_inst 0
    // 			$volatile update_server_num := (( ~ INIT ) | (INIT & num_server)) $buffering 1
    //  file nic.linked.aa, line 439
    // ( ~ INIT )
    ~ [NOT_u1_u1_1086_inst] (INIT_1039) (NOT_u1_u1_1086_wire)   $flowthrough
    $delay NOT_u1_u1_1086_inst 0
    // (INIT & num_server)
    &[AND_u1_u1_1089_inst] (INIT_1039 num_server_1055) (AND_u1_u1_1089_wire)   $flowthrough 
    $delay AND_u1_u1_1089_inst 0
    // (( ~ INIT ) | (INIT & num_server))
    |[OR_u1_u1_1090_inst] (NOT_u1_u1_1086_wire AND_u1_u1_1089_wire) (update_server_num_1091)   $flowthrough 
    $delay OR_u1_u1_1090_inst 0
    // 			$guard (update_control_register_pipe) CONTROL_REGISTER := nic_registers[0 ] $buffering 1// bits of buffering = 32. 
    //  file nic.linked.aa, line 440
    // nic_registers[0 ]
    $load [array_obj_ref_1095_load_0] $from memory_space_0 (array_obj_ref_1095_word_address_0) (array_obj_ref_1095_data_0) $guard ( update_control_register_pipe_1075 ) 
    $buffering  $in array_obj_ref_1095_load_0 array_obj_ref_1095_word_address_0 2
    $buffering  $out array_obj_ref_1095_load_0 array_obj_ref_1095_data_0 2
    $delay array_obj_ref_1095_load_0 5
    &/ [array_obj_ref_1095_gather_scatter] (array_obj_ref_1095_data_0) (array_obj_ref_1095_wire) $guard ( update_control_register_pipe_1075 ) 
    $flowthrough 
    // CONTROL_REGISTER
    $ioport $out [WPIPE_CONTROL_REGISTER_1093_inst]  (array_obj_ref_1095_wire) (CONTROL_REGISTER) $guard ( update_control_register_pipe_1075 )  $fullrate 
    // 			$guard (update_free_q_pipe) FREE_Q_32 := nic_registers[18 ] $buffering 1// bits of buffering = 32. 
    //  file nic.linked.aa, line 441
    // nic_registers[18 ]
    $load [array_obj_ref_1100_load_0] $from memory_space_0 (array_obj_ref_1100_word_address_0) (array_obj_ref_1100_data_0) $guard ( update_free_q_pipe_1083 ) 
    $buffering  $in array_obj_ref_1100_load_0 array_obj_ref_1100_word_address_0 2
    $buffering  $out array_obj_ref_1100_load_0 array_obj_ref_1100_data_0 2
    $delay array_obj_ref_1100_load_0 5
    &/ [array_obj_ref_1100_gather_scatter] (array_obj_ref_1100_data_0) (FREE_Q_32_1101) $guard ( update_free_q_pipe_1083 ) 
    $flowthrough 
    // 			$guard (update_free_q_pipe) FREE_Q := ($bitcast ($uint<36>) (FREE_Q_32 && ($bitcast ($uint<3>) _b0  )) ) $buffering 1// bits of buffering = 36. 
    //  file nic.linked.aa, line 442
    // (FREE_Q_32 && ($bitcast ($uint<3>) _b0  ))
    &&[CONCAT_u32_u35_1107_inst] (FREE_Q_32_1101 type_cast_1106_wire_constant) (CONCAT_u32_u35_1107_wire) $guard ( update_free_q_pipe_1083 )   $flowthrough 
    $delay CONCAT_u32_u35_1107_inst 0
    // ($bitcast ($uint<36>) (FREE_Q_32 && ($bitcast ($uint<3>) _b0  )) )
    # := [type_cast_1108_inst] (CONCAT_u32_u35_1107_wire) (type_cast_1108_wire)  $guard ( update_free_q_pipe_1083 )    $fullrate
    $buffering  $out type_cast_1108_inst type_cast_1108_wire 1
    $delay type_cast_1108_inst 1
    // FREE_Q
    $ioport $out [WPIPE_FREE_Q_1103_inst]  (type_cast_1108_wire) (FREE_Q) $guard ( update_free_q_pipe_1083 )  $fullrate 
    // 			$guard (update_server_num) NUMBER_OF_SERVERS := nic_registers[1 ] $buffering 1// bits of buffering = 32. 
    //  file nic.linked.aa, line 443
    // nic_registers[1 ]
    $load [array_obj_ref_1113_load_0] $from memory_space_0 (array_obj_ref_1113_word_address_0) (array_obj_ref_1113_data_0) $guard ( update_server_num_1091 ) 
    $buffering  $in array_obj_ref_1113_load_0 array_obj_ref_1113_word_address_0 2
    $buffering  $out array_obj_ref_1113_load_0 array_obj_ref_1113_data_0 2
    $delay array_obj_ref_1113_load_0 5
    &/ [array_obj_ref_1113_gather_scatter] (array_obj_ref_1113_data_0) (array_obj_ref_1113_wire) $guard ( update_server_num_1091 ) 
    $flowthrough 
    // NUMBER_OF_SERVERS
    $ioport $out [WPIPE_NUMBER_OF_SERVERS_1111_inst]  (array_obj_ref_1113_wire) (NUMBER_OF_SERVERS) $guard ( update_server_num_1091 )  $fullrate 
    // 			req := AFB_NIC_REQUEST $buffering 2// bits of buffering = 148. 
    //  file nic.linked.aa, line 444
    // AFB_NIC_REQUEST
    $ioport $in [RPIPE_AFB_NIC_REQUEST_1116_inst] (AFB_NIC_REQUEST) (req_1117)  $fullrate 
    $buffering $out RPIPE_AFB_NIC_REQUEST_1116_inst req_1117 1
    // 			$volatile lock := ( $slice req 73 73 )  $buffering 1
    //  file nic.linked.aa, line 446
    // ( $slice req 73 73 ) 
    [:] [slice_1122_inst] (req_1117 73 73) (lock_1123)  $flowthrough
    $delay slice_1122_inst 0
    // 			$volatile rwbar := ( $slice req 72 72 )  $buffering 1
    //  file nic.linked.aa, line 447
    // ( $slice req 72 72 ) 
    [:] [slice_1126_inst] (req_1117 72 72) (rwbar_1127)  $flowthrough
    $delay slice_1126_inst 0
    // 			$volatile bmask := ( $slice req 71 68 )  $buffering 1
    //  file nic.linked.aa, line 448
    // ( $slice req 71 68 ) 
    [:] [slice_1130_inst] (req_1117 71 68) (bmask_1131)  $flowthrough
    $delay slice_1130_inst 0
    // 			$volatile addr := ( $slice req 67 32 )  $buffering 1
    //  file nic.linked.aa, line 449
    // ( $slice req 67 32 ) 
    [:] [slice_1134_inst] (req_1117 67 32) (addr_1135)  $flowthrough
    $delay slice_1134_inst 0
    // 			$volatile wdata := ( $slice req 31 0 )  $buffering 1
    //  file nic.linked.aa, line 450
    // ( $slice req 31 0 ) 
    [:] [slice_1138_inst] (req_1117 31 0) (wdata_1139)  $flowthrough
    $delay slice_1138_inst 0
    // 			$volatile index := ( $slice addr 5 0 )  $buffering 1
    //  file nic.linked.aa, line 451
    // ( $slice addr 5 0 ) 
    [:] [slice_1142_inst] (addr_1135 5 0) (index_1143)  $flowthrough
    $delay slice_1142_inst 0
    // 			$volatile check_control_regsiter := ((index == 0 ) & (rwbar == 0 )) $buffering 1
    //  file nic.linked.aa, line 452
    // (index == 0 )
    ==[EQ_u6_u1_1147_inst] (index_1143 konst_1146_wire_constant) (EQ_u6_u1_1147_wire)   $flowthrough 
    $delay EQ_u6_u1_1147_inst 0
    // (rwbar == 0 )
    ==[EQ_u1_u1_1150_inst] (rwbar_1127 konst_1149_wire_constant) (EQ_u1_u1_1150_wire)   $flowthrough 
    $delay EQ_u1_u1_1150_inst 0
    // ((index == 0 ) & (rwbar == 0 ))
    &[AND_u1_u1_1151_inst] (EQ_u6_u1_1147_wire EQ_u1_u1_1150_wire) (check_control_regsiter_1152)   $flowthrough 
    $delay AND_u1_u1_1151_inst 0
    // 			$volatile check_free_q := ((index == 18 ) & (rwbar == 0 )) $buffering 1
    //  file nic.linked.aa, line 453
    // (index == 18 )
    ==[EQ_u6_u1_1156_inst] (index_1143 konst_1155_wire_constant) (EQ_u6_u1_1156_wire)   $flowthrough 
    $delay EQ_u6_u1_1156_inst 0
    // (rwbar == 0 )
    ==[EQ_u1_u1_1159_inst] (rwbar_1127 konst_1158_wire_constant) (EQ_u1_u1_1159_wire)   $flowthrough 
    $delay EQ_u1_u1_1159_inst 0
    // ((index == 18 ) & (rwbar == 0 ))
    &[AND_u1_u1_1160_inst] (EQ_u6_u1_1156_wire EQ_u1_u1_1159_wire) (check_free_q_1161)   $flowthrough 
    $delay AND_u1_u1_1160_inst 0
    // 			$volatile check_num_server := ((index == 1 ) & (rwbar == 0 )) $buffering 1
    //  file nic.linked.aa, line 454
    // (index == 1 )
    ==[EQ_u6_u1_1165_inst] (index_1143 konst_1164_wire_constant) (EQ_u6_u1_1165_wire)   $flowthrough 
    $delay EQ_u6_u1_1165_inst 0
    // (rwbar == 0 )
    ==[EQ_u1_u1_1168_inst] (rwbar_1127 konst_1167_wire_constant) (EQ_u1_u1_1168_wire)   $flowthrough 
    $delay EQ_u1_u1_1168_inst 0
    // ((index == 1 ) & (rwbar == 0 ))
    &[AND_u1_u1_1169_inst] (EQ_u6_u1_1165_wire EQ_u1_u1_1168_wire) (check_num_server_1170)   $flowthrough 
    $delay AND_u1_u1_1169_inst 0
    // 			rval := nic_registers[index] $buffering 1// bits of buffering = 32. 
    //  file nic.linked.aa, line 455
    // nic_registers[index]
    &/ [array_obj_ref_1173_index_0_resize] (index_1143) (R_index_1172_resized) 
    $flowthrough 
    &/ [array_obj_ref_1173_index_0_rename] (R_index_1172_resized) (R_index_1172_scaled) 
    $flowthrough 
    &/ [array_obj_ref_1173_index_offset] (R_index_1172_scaled) (array_obj_ref_1173_final_offset) 
    $flowthrough 
    &/ [array_obj_ref_1173_root_address_inst] (array_obj_ref_1173_final_offset) (array_obj_ref_1173_root_address) 
    $flowthrough 
    &/ [array_obj_ref_1173_addr_0] (array_obj_ref_1173_root_address) (array_obj_ref_1173_word_address_0) 
    $flowthrough 
    $load [array_obj_ref_1173_load_0] $from memory_space_0 (array_obj_ref_1173_word_address_0) (array_obj_ref_1173_data_0) 
    $buffering  $in array_obj_ref_1173_load_0 array_obj_ref_1173_word_address_0 2
    $buffering  $out array_obj_ref_1173_load_0 array_obj_ref_1173_data_0 2
    $delay array_obj_ref_1173_load_0 5
    &/ [array_obj_ref_1173_gather_scatter] (array_obj_ref_1173_data_0) (rval_1174) 
    $flowthrough 
    // 			$guard (~rwbar) $call UpdateRegister (bmask rval wdata index ) (wval ) 
    //  file nic.linked.aa, line 456
    $call [call_stmt_1181_call] $module UpdateRegister(bmask_1131 rval_1174 wdata_1139 index_1143) (wval_1181) $guard ( ~ rwbar_1127 )   $fullrate
    $delay call_stmt_1181_call 4
    $buffering  $in call_stmt_1181_call bmask_1131 1
    $buffering  $in call_stmt_1181_call rval_1174 1
    $buffering  $in call_stmt_1181_call wdata_1139 1
    $buffering  $in call_stmt_1181_call index_1143 1
    $buffering  $out call_stmt_1181_call wval_1181 1
    // 			$volatile rdata := ( $mux rwbar rval  ($bitcast ($uint<32>) _b0  ) )  $buffering 1
    //  file nic.linked.aa, line 457
    // ( $mux rwbar rval  ($bitcast ($uint<32>) _b0  ) ) 
    ? [MUX_1187_inst] (rwbar_1127 rval_1174 type_cast_1186_wire_constant) (rdata_1188)  $flowthrough
    // 			$volatile resp := (($bitcast ($uint<1>) _b0  ) && rdata) $buffering 1
    //  file nic.linked.aa, line 458
    // (($bitcast ($uint<1>) _b0  ) && rdata)
    &&[CONCAT_u1_u33_1193_inst] (type_cast_1191_wire_constant rdata_1188) (resp_1194)   $flowthrough 
    $delay CONCAT_u1_u33_1193_inst 0
    // 			AFB_NIC_RESPONSE := resp $buffering 1// bits of buffering = 33. 
    //  file nic.linked.aa, line 459
    // AFB_NIC_RESPONSE
    $ioport $out [WPIPE_AFB_NIC_RESPONSE_1195_inst]  (resp_1194) (AFB_NIC_RESPONSE)  $fullrate 
  }
  // end data-path
  // CP-DP links for do-while  do_while_stmt_1037
  //  file nic.linked.aa, line 422
  phi_stmt_1039 <=> (branch_block_stmt_1036/do_while_stmt_1037/do_while_stmt_1037_loop_body/phi_stmt_1039_entry_sample_req branch_block_stmt_1036/do_while_stmt_1037/do_while_stmt_1037_loop_body/phi_stmt_1039_loopback_sample_req) (branch_block_stmt_1036/do_while_stmt_1037/do_while_stmt_1037_loop_body/phi_stmt_1039_phi_mux_ack)
  phi_stmt_1045 <=> (branch_block_stmt_1036/do_while_stmt_1037/do_while_stmt_1037_loop_body/phi_stmt_1045_entry_sample_req branch_block_stmt_1036/do_while_stmt_1037/do_while_stmt_1037_loop_body/phi_stmt_1045_loopback_sample_req) (branch_block_stmt_1036/do_while_stmt_1037/do_while_stmt_1037_loop_body/phi_stmt_1045_phi_mux_ack)
  check_control_regsiter_1152_1049_buf <=> (branch_block_stmt_1036/do_while_stmt_1037/do_while_stmt_1037_loop_body/R_check_control_regsiter_1049_Sample/req branch_block_stmt_1036/do_while_stmt_1037/do_while_stmt_1037_loop_body/R_check_control_regsiter_1049_Update/req) (branch_block_stmt_1036/do_while_stmt_1037/do_while_stmt_1037_loop_body/R_check_control_regsiter_1049_Sample/ack branch_block_stmt_1036/do_while_stmt_1037/do_while_stmt_1037_loop_body/R_check_control_regsiter_1049_Update/ack)
  phi_stmt_1050 <=> (branch_block_stmt_1036/do_while_stmt_1037/do_while_stmt_1037_loop_body/phi_stmt_1050_entry_sample_req branch_block_stmt_1036/do_while_stmt_1037/do_while_stmt_1037_loop_body/phi_stmt_1050_loopback_sample_req) (branch_block_stmt_1036/do_while_stmt_1037/do_while_stmt_1037_loop_body/phi_stmt_1050_phi_mux_ack)
  check_free_q_1161_1054_buf <=> (branch_block_stmt_1036/do_while_stmt_1037/do_while_stmt_1037_loop_body/R_check_free_q_1054_Sample/req branch_block_stmt_1036/do_while_stmt_1037/do_while_stmt_1037_loop_body/R_check_free_q_1054_Update/req) (branch_block_stmt_1036/do_while_stmt_1037/do_while_stmt_1037_loop_body/R_check_free_q_1054_Sample/ack branch_block_stmt_1036/do_while_stmt_1037/do_while_stmt_1037_loop_body/R_check_free_q_1054_Update/ack)
  phi_stmt_1055 <=> (branch_block_stmt_1036/do_while_stmt_1037/do_while_stmt_1037_loop_body/phi_stmt_1055_entry_sample_req branch_block_stmt_1036/do_while_stmt_1037/do_while_stmt_1037_loop_body/phi_stmt_1055_loopback_sample_req) (branch_block_stmt_1036/do_while_stmt_1037/do_while_stmt_1037_loop_body/phi_stmt_1055_phi_mux_ack)
  check_num_server_1170_1059_buf <=> (branch_block_stmt_1036/do_while_stmt_1037/do_while_stmt_1037_loop_body/R_check_num_server_1059_Sample/req branch_block_stmt_1036/do_while_stmt_1037/do_while_stmt_1037_loop_body/R_check_num_server_1059_Update/req) (branch_block_stmt_1036/do_while_stmt_1037/do_while_stmt_1037_loop_body/R_check_num_server_1059_Sample/ack branch_block_stmt_1036/do_while_stmt_1037/do_while_stmt_1037_loop_body/R_check_num_server_1059_Update/ack)
  // 			control_data := nic_registers[0 ] $buffering 1// bits of buffering = 32. 
  //  file nic.linked.aa, line 435
  // nic_registers[0 ]
  array_obj_ref_1064_gather_scatter <=> (branch_block_stmt_1036/do_while_stmt_1037/do_while_stmt_1037_loop_body/array_obj_ref_1064_Update/array_obj_ref_1064_Merge/merge_req) (branch_block_stmt_1036/do_while_stmt_1037/do_while_stmt_1037_loop_body/array_obj_ref_1064_Update/array_obj_ref_1064_Merge/merge_ack)
  array_obj_ref_1064_load_0 <=> (branch_block_stmt_1036/do_while_stmt_1037/do_while_stmt_1037_loop_body/array_obj_ref_1064_Sample/word_access_start/word_0/rr branch_block_stmt_1036/do_while_stmt_1037/do_while_stmt_1037_loop_body/array_obj_ref_1064_Update/word_access_complete/word_0/cr) (branch_block_stmt_1036/do_while_stmt_1037/do_while_stmt_1037_loop_body/array_obj_ref_1064_Sample/word_access_start/word_0/ra branch_block_stmt_1036/do_while_stmt_1037/do_while_stmt_1037_loop_body/array_obj_ref_1064_Update/word_access_complete/word_0/ca)
  // 			$volatile update_control_register_pipe := (( ~ INIT ) | (INIT & control_register)) $buffering 1
  //  file nic.linked.aa, line 437
  // (( ~ INIT ) | (INIT & control_register))
  // INIT
  // (INIT & control_register)
  // INIT
  // control_register
  // 			$volatile update_free_q_pipe := (( ~ INIT ) | (INIT & free_q)) $buffering 1
  //  file nic.linked.aa, line 438
  // (( ~ INIT ) | (INIT & free_q))
  // INIT
  // (INIT & free_q)
  // INIT
  // free_q
  // 			$volatile update_server_num := (( ~ INIT ) | (INIT & num_server)) $buffering 1
  //  file nic.linked.aa, line 439
  // (( ~ INIT ) | (INIT & num_server))
  // INIT
  // (INIT & num_server)
  // INIT
  // num_server
  // 			$guard (update_control_register_pipe) CONTROL_REGISTER := nic_registers[0 ] $buffering 1// bits of buffering = 32. 
  //  file nic.linked.aa, line 440
  // nic_registers[0 ]
  array_obj_ref_1095_gather_scatter <=> (branch_block_stmt_1036/do_while_stmt_1037/do_while_stmt_1037_loop_body/array_obj_ref_1095_Update/array_obj_ref_1095_Merge/merge_req) (branch_block_stmt_1036/do_while_stmt_1037/do_while_stmt_1037_loop_body/array_obj_ref_1095_Update/array_obj_ref_1095_Merge/merge_ack)
  array_obj_ref_1095_load_0 <=> (branch_block_stmt_1036/do_while_stmt_1037/do_while_stmt_1037_loop_body/array_obj_ref_1095_Sample/word_access_start/word_0/rr branch_block_stmt_1036/do_while_stmt_1037/do_while_stmt_1037_loop_body/array_obj_ref_1095_Update/word_access_complete/word_0/cr) (branch_block_stmt_1036/do_while_stmt_1037/do_while_stmt_1037_loop_body/array_obj_ref_1095_Sample/word_access_start/word_0/ra branch_block_stmt_1036/do_while_stmt_1037/do_while_stmt_1037_loop_body/array_obj_ref_1095_Update/word_access_complete/word_0/ca)
  // CONTROL_REGISTER
  WPIPE_CONTROL_REGISTER_1093_inst <=> (branch_block_stmt_1036/do_while_stmt_1037/do_while_stmt_1037_loop_body/WPIPE_CONTROL_REGISTER_1093_Sample/req branch_block_stmt_1036/do_while_stmt_1037/do_while_stmt_1037_loop_body/WPIPE_CONTROL_REGISTER_1093_Update/req) (branch_block_stmt_1036/do_while_stmt_1037/do_while_stmt_1037_loop_body/WPIPE_CONTROL_REGISTER_1093_Sample/ack branch_block_stmt_1036/do_while_stmt_1037/do_while_stmt_1037_loop_body/WPIPE_CONTROL_REGISTER_1093_Update/ack)
  // 			$guard (update_free_q_pipe) FREE_Q_32 := nic_registers[18 ] $buffering 1// bits of buffering = 32. 
  //  file nic.linked.aa, line 441
  // nic_registers[18 ]
  array_obj_ref_1100_gather_scatter <=> (branch_block_stmt_1036/do_while_stmt_1037/do_while_stmt_1037_loop_body/array_obj_ref_1100_Update/array_obj_ref_1100_Merge/merge_req) (branch_block_stmt_1036/do_while_stmt_1037/do_while_stmt_1037_loop_body/array_obj_ref_1100_Update/array_obj_ref_1100_Merge/merge_ack)
  array_obj_ref_1100_load_0 <=> (branch_block_stmt_1036/do_while_stmt_1037/do_while_stmt_1037_loop_body/array_obj_ref_1100_Sample/word_access_start/word_0/rr branch_block_stmt_1036/do_while_stmt_1037/do_while_stmt_1037_loop_body/array_obj_ref_1100_Update/word_access_complete/word_0/cr) (branch_block_stmt_1036/do_while_stmt_1037/do_while_stmt_1037_loop_body/array_obj_ref_1100_Sample/word_access_start/word_0/ra branch_block_stmt_1036/do_while_stmt_1037/do_while_stmt_1037_loop_body/array_obj_ref_1100_Update/word_access_complete/word_0/ca)
  // 			$guard (update_free_q_pipe) FREE_Q := ($bitcast ($uint<36>) (FREE_Q_32 && ($bitcast ($uint<3>) _b0  )) ) $buffering 1// bits of buffering = 36. 
  //  file nic.linked.aa, line 442
  // (FREE_Q_32 && ($bitcast ($uint<3>) _b0  ))
  // FREE_Q_32
  // ($bitcast ($uint<36>) (FREE_Q_32 && ($bitcast ($uint<3>) _b0  )) )
  type_cast_1108_inst <=> (branch_block_stmt_1036/do_while_stmt_1037/do_while_stmt_1037_loop_body/type_cast_1108_Sample/rr branch_block_stmt_1036/do_while_stmt_1037/do_while_stmt_1037_loop_body/type_cast_1108_Update/cr) (branch_block_stmt_1036/do_while_stmt_1037/do_while_stmt_1037_loop_body/type_cast_1108_Sample/ra branch_block_stmt_1036/do_while_stmt_1037/do_while_stmt_1037_loop_body/type_cast_1108_Update/ca)
  // FREE_Q
  WPIPE_FREE_Q_1103_inst <=> (branch_block_stmt_1036/do_while_stmt_1037/do_while_stmt_1037_loop_body/WPIPE_FREE_Q_1103_Sample/req branch_block_stmt_1036/do_while_stmt_1037/do_while_stmt_1037_loop_body/WPIPE_FREE_Q_1103_Update/req) (branch_block_stmt_1036/do_while_stmt_1037/do_while_stmt_1037_loop_body/WPIPE_FREE_Q_1103_Sample/ack branch_block_stmt_1036/do_while_stmt_1037/do_while_stmt_1037_loop_body/WPIPE_FREE_Q_1103_Update/ack)
  // 			$guard (update_server_num) NUMBER_OF_SERVERS := nic_registers[1 ] $buffering 1// bits of buffering = 32. 
  //  file nic.linked.aa, line 443
  // nic_registers[1 ]
  array_obj_ref_1113_gather_scatter <=> (branch_block_stmt_1036/do_while_stmt_1037/do_while_stmt_1037_loop_body/array_obj_ref_1113_Update/array_obj_ref_1113_Merge/merge_req) (branch_block_stmt_1036/do_while_stmt_1037/do_while_stmt_1037_loop_body/array_obj_ref_1113_Update/array_obj_ref_1113_Merge/merge_ack)
  array_obj_ref_1113_load_0 <=> (branch_block_stmt_1036/do_while_stmt_1037/do_while_stmt_1037_loop_body/array_obj_ref_1113_Sample/word_access_start/word_0/rr branch_block_stmt_1036/do_while_stmt_1037/do_while_stmt_1037_loop_body/array_obj_ref_1113_Update/word_access_complete/word_0/cr) (branch_block_stmt_1036/do_while_stmt_1037/do_while_stmt_1037_loop_body/array_obj_ref_1113_Sample/word_access_start/word_0/ra branch_block_stmt_1036/do_while_stmt_1037/do_while_stmt_1037_loop_body/array_obj_ref_1113_Update/word_access_complete/word_0/ca)
  // NUMBER_OF_SERVERS
  WPIPE_NUMBER_OF_SERVERS_1111_inst <=> (branch_block_stmt_1036/do_while_stmt_1037/do_while_stmt_1037_loop_body/WPIPE_NUMBER_OF_SERVERS_1111_Sample/req branch_block_stmt_1036/do_while_stmt_1037/do_while_stmt_1037_loop_body/WPIPE_NUMBER_OF_SERVERS_1111_Update/req) (branch_block_stmt_1036/do_while_stmt_1037/do_while_stmt_1037_loop_body/WPIPE_NUMBER_OF_SERVERS_1111_Sample/ack branch_block_stmt_1036/do_while_stmt_1037/do_while_stmt_1037_loop_body/WPIPE_NUMBER_OF_SERVERS_1111_Update/ack)
  // 			req := AFB_NIC_REQUEST $buffering 2// bits of buffering = 148. 
  //  file nic.linked.aa, line 444
  // AFB_NIC_REQUEST
  RPIPE_AFB_NIC_REQUEST_1116_inst <=> (branch_block_stmt_1036/do_while_stmt_1037/do_while_stmt_1037_loop_body/RPIPE_AFB_NIC_REQUEST_1116_Sample/rr branch_block_stmt_1036/do_while_stmt_1037/do_while_stmt_1037_loop_body/RPIPE_AFB_NIC_REQUEST_1116_Update/cr) (branch_block_stmt_1036/do_while_stmt_1037/do_while_stmt_1037_loop_body/RPIPE_AFB_NIC_REQUEST_1116_Sample/ra branch_block_stmt_1036/do_while_stmt_1037/do_while_stmt_1037_loop_body/RPIPE_AFB_NIC_REQUEST_1116_Update/ca)
  // 			$volatile lock := ( $slice req 73 73 )  $buffering 1
  //  file nic.linked.aa, line 446
  // req
  // 			$volatile rwbar := ( $slice req 72 72 )  $buffering 1
  //  file nic.linked.aa, line 447
  // req
  // 			$volatile bmask := ( $slice req 71 68 )  $buffering 1
  //  file nic.linked.aa, line 448
  // req
  // 			$volatile addr := ( $slice req 67 32 )  $buffering 1
  //  file nic.linked.aa, line 449
  // req
  // 			$volatile wdata := ( $slice req 31 0 )  $buffering 1
  //  file nic.linked.aa, line 450
  // req
  // 			$volatile index := ( $slice addr 5 0 )  $buffering 1
  //  file nic.linked.aa, line 451
  // addr
  // 			$volatile check_control_regsiter := ((index == 0 ) & (rwbar == 0 )) $buffering 1
  //  file nic.linked.aa, line 452
  // ((index == 0 ) & (rwbar == 0 ))
  // (index == 0 )
  // index
  // (rwbar == 0 )
  // rwbar
  // 			$volatile check_free_q := ((index == 18 ) & (rwbar == 0 )) $buffering 1
  //  file nic.linked.aa, line 453
  // ((index == 18 ) & (rwbar == 0 ))
  // (index == 18 )
  // index
  // (rwbar == 0 )
  // rwbar
  // 			$volatile check_num_server := ((index == 1 ) & (rwbar == 0 )) $buffering 1
  //  file nic.linked.aa, line 454
  // ((index == 1 ) & (rwbar == 0 ))
  // (index == 1 )
  // index
  // (rwbar == 0 )
  // rwbar
  // 			rval := nic_registers[index] $buffering 1// bits of buffering = 32. 
  //  file nic.linked.aa, line 455
  // nic_registers[index]
  // index
  array_obj_ref_1173_index_0_resize <=> (branch_block_stmt_1036/do_while_stmt_1037/do_while_stmt_1037_loop_body/array_obj_ref_1173_index_resize_0/index_resize_req) (branch_block_stmt_1036/do_while_stmt_1037/do_while_stmt_1037_loop_body/array_obj_ref_1173_index_resize_0/index_resize_ack)
  array_obj_ref_1173_index_0_rename <=> (branch_block_stmt_1036/do_while_stmt_1037/do_while_stmt_1037_loop_body/array_obj_ref_1173_index_scale_0/scale_rename_req) (branch_block_stmt_1036/do_while_stmt_1037/do_while_stmt_1037_loop_body/array_obj_ref_1173_index_scale_0/scale_rename_ack)
  array_obj_ref_1173_index_offset <=> (branch_block_stmt_1036/do_while_stmt_1037/do_while_stmt_1037_loop_body/array_obj_ref_1173_final_index_sum_regn/req) (branch_block_stmt_1036/do_while_stmt_1037/do_while_stmt_1037_loop_body/array_obj_ref_1173_final_index_sum_regn/ack)
  array_obj_ref_1173_root_address_inst <=> (branch_block_stmt_1036/do_while_stmt_1037/do_while_stmt_1037_loop_body/array_obj_ref_1173_base_plus_offset/sum_rename_req) (branch_block_stmt_1036/do_while_stmt_1037/do_while_stmt_1037_loop_body/array_obj_ref_1173_base_plus_offset/sum_rename_ack)
  array_obj_ref_1173_addr_0 <=> (branch_block_stmt_1036/do_while_stmt_1037/do_while_stmt_1037_loop_body/array_obj_ref_1173_word_addrgen/root_register_req) (branch_block_stmt_1036/do_while_stmt_1037/do_while_stmt_1037_loop_body/array_obj_ref_1173_word_addrgen/root_register_ack)
  array_obj_ref_1173_gather_scatter <=> (branch_block_stmt_1036/do_while_stmt_1037/do_while_stmt_1037_loop_body/array_obj_ref_1173_Update/array_obj_ref_1173_Merge/merge_req) (branch_block_stmt_1036/do_while_stmt_1037/do_while_stmt_1037_loop_body/array_obj_ref_1173_Update/array_obj_ref_1173_Merge/merge_ack)
  array_obj_ref_1173_load_0 <=> (branch_block_stmt_1036/do_while_stmt_1037/do_while_stmt_1037_loop_body/array_obj_ref_1173_Sample/word_access_start/word_0/rr branch_block_stmt_1036/do_while_stmt_1037/do_while_stmt_1037_loop_body/array_obj_ref_1173_Update/word_access_complete/word_0/cr) (branch_block_stmt_1036/do_while_stmt_1037/do_while_stmt_1037_loop_body/array_obj_ref_1173_Sample/word_access_start/word_0/ra branch_block_stmt_1036/do_while_stmt_1037/do_while_stmt_1037_loop_body/array_obj_ref_1173_Update/word_access_complete/word_0/ca)
  // 			$guard (~rwbar) $call UpdateRegister (bmask rval wdata index ) (wval ) 
  //  file nic.linked.aa, line 456
  // bmask
  // rval
  // wdata
  // index
  call_stmt_1181_call <=> (branch_block_stmt_1036/do_while_stmt_1037/do_while_stmt_1037_loop_body/call_stmt_1181_Sample/crr branch_block_stmt_1036/do_while_stmt_1037/do_while_stmt_1037_loop_body/call_stmt_1181_Update/ccr) (branch_block_stmt_1036/do_while_stmt_1037/do_while_stmt_1037_loop_body/call_stmt_1181_Sample/cra branch_block_stmt_1036/do_while_stmt_1037/do_while_stmt_1037_loop_body/call_stmt_1181_Update/cca)
  // 			$volatile rdata := ( $mux rwbar rval  ($bitcast ($uint<32>) _b0  ) )  $buffering 1
  //  file nic.linked.aa, line 457
  // rwbar
  // rval
  // ( $mux rwbar rval  ($bitcast ($uint<32>) _b0  ) ) 
  // 			$volatile resp := (($bitcast ($uint<1>) _b0  ) && rdata) $buffering 1
  //  file nic.linked.aa, line 458
  // (($bitcast ($uint<1>) _b0  ) && rdata)
  // rdata
  // 			AFB_NIC_RESPONSE := resp $buffering 1// bits of buffering = 33. 
  //  file nic.linked.aa, line 459
  // resp
  // AFB_NIC_RESPONSE
  WPIPE_AFB_NIC_RESPONSE_1195_inst <=> (branch_block_stmt_1036/do_while_stmt_1037/do_while_stmt_1037_loop_body/WPIPE_AFB_NIC_RESPONSE_1195_Sample/req branch_block_stmt_1036/do_while_stmt_1037/do_while_stmt_1037_loop_body/WPIPE_AFB_NIC_RESPONSE_1195_Update/req) (branch_block_stmt_1036/do_while_stmt_1037/do_while_stmt_1037_loop_body/WPIPE_AFB_NIC_RESPONSE_1195_Sample/ack branch_block_stmt_1036/do_while_stmt_1037/do_while_stmt_1037_loop_body/WPIPE_AFB_NIC_RESPONSE_1195_Update/ack)
  do_while_stmt_1037_branch <=> (branch_block_stmt_1036/do_while_stmt_1037/do_while_stmt_1037_loop_body/condition_evaluated) (branch_block_stmt_1036/do_while_stmt_1037/loop_exit/ack branch_block_stmt_1036/do_while_stmt_1037/loop_taken/ack)
}
$pipeline $depth 7 $buffering 1 $module [getTxPacketPointerFromServer] 
{
  $in queue_index:$int<6>
  // can point into 
  $out pkt_pointer:$int<32>
  // can point into 
  status:$int<1>
  // can point into 
  // pipe-declarations for block %getTxPacketPointerFromServer
  //  file nic.linked.aa, line 463
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    // pipelined module
    :|:[assign_stmt_1211_to_stmt_1238] 
    {
      $T [queue_index_update_enable] 
      $T [queue_index_update_enable_out] 
      queue_index_update_enable &-> (queue_index_update_enable_out)
      $null &-> (queue_index_update_enable)
      $T [pkt_pointer_update_enable] 
      $T [pkt_pointer_update_enable_in] 
      $null &-> (pkt_pointer_update_enable)
      $null <-& (pkt_pointer_update_enable_in) 
      $null &-> (pkt_pointer_update_enable)
      pkt_pointer_update_enable <-& (pkt_pointer_update_enable_in) 
      $T [status_update_enable] 
      $T [status_update_enable_in] 
      $null &-> (status_update_enable)
      $null <-& (status_update_enable_in) 
      $null &-> (status_update_enable)
      status_update_enable <-& (status_update_enable_in) 
      // start: WAR dependencies for register_index
      // done: WAR dependencies for register_index
      // start:  	$volatile register_index := ($bitcast ($uint<6>) (queue_index + TX_QUEUES_REG_START_OFFSET) ) $buffering 1
      //  file nic.linked.aa, line 468
      // volatile! 
      // Source expression
      // ($bitcast ($uint<6>) (queue_index + TX_QUEUES_REG_START_OFFSET) )
      // (queue_index + TX_QUEUES_REG_START_OFFSET)
      // queue_index
      // Target expression
      // (as target) register_index
      // start: WAR dependencies for register_index
      // done: WAR dependencies for register_index
      // end:  	$volatile register_index := ($bitcast ($uint<6>) (queue_index + TX_QUEUES_REG_START_OFFSET) ) $buffering 1
      // start: 	$call AccessRegister (($bitcast ($uint<1>) _b1  ) ( ~ ($bitcast ($uint<4>) _b0  ) ) register_index ($bitcast ($uint<32>) _b0  ) ) (tx_queue_pointer_32 ) 
      //  file nic.linked.aa, line 469
      $T[call_stmt_1221_sample_start_] 
      $T[call_stmt_1221_sample_completed_] 
      $T[call_stmt_1221_update_start_] 
      $T[call_stmt_1221_update_completed_] 
      // Call input argument 0
      // Call input argument 1
      // Call input argument 2
      // register_index
      // Call input argument 3
      // start: Forward dependencies from register_index to transition call_stmt_1221_sample_start_
      call_stmt_1221_sample_start_ <-& ($entry)
      // done: Forward dependencies from register_index to transition call_stmt_1221_sample_start_
      // RAW reenables for register_index
      queue_index_update_enable o<-& (call_stmt_1221_sample_completed_ 0)
      ;;[call_stmt_1221_Sample] 
      {
        $T [crr] $T [cra] 
      }
      ;;[call_stmt_1221_Update] 
      {
        $T [ccr] $T [cca] 
      }
      call_stmt_1221_sample_start_ &-> (call_stmt_1221_Sample)
      call_stmt_1221_sample_completed_ <-& (call_stmt_1221_Sample)
      call_stmt_1221_sample_completed_ &-> ($null)
      call_stmt_1221_update_start_ &-> (call_stmt_1221_Update)
      call_stmt_1221_update_completed_ <-& (call_stmt_1221_Update)
      // Call output argument 0
      // (as target) tx_queue_pointer_32
      // self-release: 
      call_stmt_1221_sample_start_ o<-& (call_stmt_1221_sample_completed_ 1)
      $null &-> (call_stmt_1221_update_start_)
      call_stmt_1221_update_start_ o<-& (call_stmt_1221_update_completed_ 0)
      // start: WAR dependencies for tx_queue_pointer_32
      // done: WAR dependencies for tx_queue_pointer_32
      // end: 	$call AccessRegister (($bitcast ($uint<1>) _b1  ) ( ~ ($bitcast ($uint<4>) _b0  ) ) register_index ($bitcast ($uint<32>) _b0  ) ) (tx_queue_pointer_32 ) 
      // start: WAR dependencies for tx_queue_pointer_36
      // done: WAR dependencies for tx_queue_pointer_36
      // start:  	$volatile tx_queue_pointer_36 := (tx_queue_pointer_32 && ($bitcast ($uint<4>) _b0  )) $buffering 1
      //  file nic.linked.aa, line 470
      // volatile! 
      // Source expression
      // (tx_queue_pointer_32 && ($bitcast ($uint<4>) _b0  ))
      // tx_queue_pointer_32
      // Target expression
      // (as target) tx_queue_pointer_36
      // start: WAR dependencies for tx_queue_pointer_36
      // done: WAR dependencies for tx_queue_pointer_36
      // end:  	$volatile tx_queue_pointer_36 := (tx_queue_pointer_32 && ($bitcast ($uint<4>) _b0  )) $buffering 1
      // start: 	$call popFromQueue (($bitcast ($uint<1>) _b0  ) tx_queue_pointer_36 ) (pkt_pointer status ) 
      //  file nic.linked.aa, line 471
      $T[call_stmt_1233_sample_start_] 
      $T[call_stmt_1233_sample_completed_] 
      $T[call_stmt_1233_update_start_] 
      $T[call_stmt_1233_update_completed_] 
      // Call input argument 0
      // Call input argument 1
      // tx_queue_pointer_36
      // start: Forward dependencies from tx_queue_pointer_36 to transition call_stmt_1233_sample_start_
      call_stmt_1233_sample_start_ <-& (call_stmt_1221_update_completed_)
      // done: Forward dependencies from tx_queue_pointer_36 to transition call_stmt_1233_sample_start_
      // RAW reenables for tx_queue_pointer_36
      call_stmt_1221_update_start_ o<-& (call_stmt_1233_sample_completed_ 0)
      ;;[call_stmt_1233_Sample] 
      {
        $T [crr] $T [cra] 
      }
      ;;[call_stmt_1233_Update] 
      {
        $T [ccr] $T [cca] 
      }
      call_stmt_1233_sample_start_ &-> (call_stmt_1233_Sample)
      call_stmt_1233_sample_completed_ <-& (call_stmt_1233_Sample)
      call_stmt_1233_sample_completed_ &-> ($null)
      call_stmt_1233_update_start_ &-> (call_stmt_1233_Update)
      call_stmt_1233_update_completed_ <-& (call_stmt_1233_Update)
      // Call output argument 0
      // (as target) pkt_pointer
      // pkt_pointer
      // write to interface object
      // pkt_pointer
      // write to interface object
      call_stmt_1233_update_start_ <-& (pkt_pointer_update_enable)
      // Call output argument 1
      // (as target) status
      // status
      // write to interface object
      // status
      // write to interface object
      call_stmt_1233_update_start_ <-& (status_update_enable)
      // self-release: 
      call_stmt_1233_sample_start_ o<-& (call_stmt_1233_sample_completed_ 1)
      $null &-> (call_stmt_1233_update_start_)
      call_stmt_1233_update_start_ o<-& (call_stmt_1233_update_completed_ 0)
      // start: WAR dependencies for pkt_pointer
      // done: WAR dependencies for pkt_pointer
      // start: WAR dependencies for status
      // done: WAR dependencies for status
      // end: 	$call popFromQueue (($bitcast ($uint<1>) _b0  ) tx_queue_pointer_36 ) (pkt_pointer status ) 
      // load-store dependencies..
      // pipe read/write dependencies for pipe MEMORY_TO_NIC_RESPONSE
      // read-dependencies for pipe MEMORY_TO_NIC_RESPONSE
      // write-dependencies for pipe MEMORY_TO_NIC_RESPONSE
      // signal write dependencies for MEMORY_TO_NIC_RESPONSE
      // pipe read/write dependencies for pipe NIC_REQUEST_REGISTER_ACCESS_PIPE
      // read-dependencies for pipe NIC_REQUEST_REGISTER_ACCESS_PIPE
      // write-dependencies for pipe NIC_REQUEST_REGISTER_ACCESS_PIPE
      // signal write dependencies for NIC_REQUEST_REGISTER_ACCESS_PIPE
      // pipe read/write dependencies for pipe NIC_RESPONSE_REGISTER_ACCESS_PIPE
      // read-dependencies for pipe NIC_RESPONSE_REGISTER_ACCESS_PIPE
      // write-dependencies for pipe NIC_RESPONSE_REGISTER_ACCESS_PIPE
      // signal write dependencies for NIC_RESPONSE_REGISTER_ACCESS_PIPE
      // pipe read/write dependencies for pipe NIC_TO_MEMORY_REQUEST
      // read-dependencies for pipe NIC_TO_MEMORY_REQUEST
      // write-dependencies for pipe NIC_TO_MEMORY_REQUEST
      // signal write dependencies for NIC_TO_MEMORY_REQUEST
    }
    ( pkt_pointer_update_enable_in status_update_enable_in)
    ( queue_index_update_enable_out)
    $P [queue_index_update_enable] 
    $P [pkt_pointer_update_enable] 
    $P [status_update_enable] 
    $bind queue_index_update_enable <= assign_stmt_1211_to_stmt_1238 : queue_index_update_enable_out
    $bind pkt_pointer_update_enable => assign_stmt_1211_to_stmt_1238 : pkt_pointer_update_enable_in
    $bind status_update_enable => assign_stmt_1211_to_stmt_1238 : status_update_enable_in
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %getTxPacketPointerFromServer
    //  file nic.linked.aa, line 463
    // TX_QUEUES_REG_START_OFFSET
    $constant $W[R_TX_QUEUES_REG_START_OFFSET_1208_wire_constant] : $int<6> := _b001010// 10
    // 	$call AccessRegister (($bitcast ($uint<1>) _b1  ) ( ~ ($bitcast ($uint<4>) _b0  ) ) register_index ($bitcast ($uint<32>) _b0  ) ) (tx_queue_pointer_32 ) 
    //  file nic.linked.aa, line 469
    // ($bitcast ($uint<1>) _b1  )
    $constant $W[type_cast_1213_wire_constant] : $int<1> := _b1// 1
    // ( ~ ($bitcast ($uint<4>) _b0  ) )
    $constant $W[NOT_u4_u4_1216_wire_constant] : $int<4> := _b1111// -1
    // ($bitcast ($uint<32>) _b0  )
    $constant $W[type_cast_1219_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // ($bitcast ($uint<4>) _b0  )
    $constant $W[type_cast_1225_wire_constant] : $int<4> := _b0000// 0
    // 	$call popFromQueue (($bitcast ($uint<1>) _b0  ) tx_queue_pointer_36 ) (pkt_pointer status ) 
    //  file nic.linked.aa, line 471
    // ($bitcast ($uint<1>) _b0  )
    $constant $W[type_cast_1229_wire_constant] : $int<1> := _b0// 0
    // 	$volatile register_index := ($bitcast ($uint<6>) (queue_index + TX_QUEUES_REG_START_OFFSET) ) $buffering 1
    //  file nic.linked.aa, line 468
    // (queue_index + TX_QUEUES_REG_START_OFFSET)
    $intermediate $W[ADD_u6_u6_1209_wire] : $int<6>
    // register_index
    $W[register_index_1211] : $int<6>
    // 	$call AccessRegister (($bitcast ($uint<1>) _b1  ) ( ~ ($bitcast ($uint<4>) _b0  ) ) register_index ($bitcast ($uint<32>) _b0  ) ) (tx_queue_pointer_32 ) 
    //  file nic.linked.aa, line 469
    // tx_queue_pointer_32
    $W[tx_queue_pointer_32_1221] : $int<32>
    // 	$volatile tx_queue_pointer_36 := (tx_queue_pointer_32 && ($bitcast ($uint<4>) _b0  )) $buffering 1
    //  file nic.linked.aa, line 470
    // tx_queue_pointer_36
    $W[tx_queue_pointer_36_1227] : $int<36>
    // 	$call popFromQueue (($bitcast ($uint<1>) _b0  ) tx_queue_pointer_36 ) (pkt_pointer status ) 
    //  file nic.linked.aa, line 471
    // pkt_pointer
    // status
    // 	$volatile register_index := ($bitcast ($uint<6>) (queue_index + TX_QUEUES_REG_START_OFFSET) ) $buffering 1
    //  file nic.linked.aa, line 468
    // (queue_index + TX_QUEUES_REG_START_OFFSET)
    +[ADD_u6_u6_1209_inst] (queue_index R_TX_QUEUES_REG_START_OFFSET_1208_wire_constant) (ADD_u6_u6_1209_wire)   $flowthrough 
    $delay ADD_u6_u6_1209_inst 0
    // ($bitcast ($uint<6>) (queue_index + TX_QUEUES_REG_START_OFFSET) )
    # := [type_cast_1210_inst] (ADD_u6_u6_1209_wire) (register_index_1211)   $flowthrough
    $delay type_cast_1210_inst 0
    // 	$call AccessRegister (($bitcast ($uint<1>) _b1  ) ( ~ ($bitcast ($uint<4>) _b0  ) ) register_index ($bitcast ($uint<32>) _b0  ) ) (tx_queue_pointer_32 ) 
    //  file nic.linked.aa, line 469
    $call [call_stmt_1221_call] $module AccessRegister(type_cast_1213_wire_constant NOT_u4_u4_1216_wire_constant register_index_1211 type_cast_1219_wire_constant) (tx_queue_pointer_32_1221)  
    $delay call_stmt_1221_call 4
    $buffering  $in call_stmt_1221_call type_cast_1213_wire_constant 1
    $buffering  $in call_stmt_1221_call NOT_u4_u4_1216_wire_constant 1
    $buffering  $in call_stmt_1221_call register_index_1211 1
    $buffering  $in call_stmt_1221_call type_cast_1219_wire_constant 1
    $buffering  $out call_stmt_1221_call tx_queue_pointer_32_1221 1
    // 	$volatile tx_queue_pointer_36 := (tx_queue_pointer_32 && ($bitcast ($uint<4>) _b0  )) $buffering 1
    //  file nic.linked.aa, line 470
    // (tx_queue_pointer_32 && ($bitcast ($uint<4>) _b0  ))
    &&[CONCAT_u32_u36_1226_inst] (tx_queue_pointer_32_1221 type_cast_1225_wire_constant) (tx_queue_pointer_36_1227)   $flowthrough 
    $delay CONCAT_u32_u36_1226_inst 0
    // 	$call popFromQueue (($bitcast ($uint<1>) _b0  ) tx_queue_pointer_36 ) (pkt_pointer status ) 
    //  file nic.linked.aa, line 471
    $call [call_stmt_1233_call] $module popFromQueue(type_cast_1229_wire_constant tx_queue_pointer_36_1227) (pkt_pointer status)  
    $delay call_stmt_1233_call 4
    $buffering  $in call_stmt_1233_call type_cast_1229_wire_constant 1
    $buffering  $in call_stmt_1233_call tx_queue_pointer_36_1227 1
    $buffering  $out call_stmt_1233_call pkt_pointer 1
    $buffering  $out call_stmt_1233_call status 1
  }
  // end data-path
  // 	$volatile register_index := ($bitcast ($uint<6>) (queue_index + TX_QUEUES_REG_START_OFFSET) ) $buffering 1
  //  file nic.linked.aa, line 468
  // (queue_index + TX_QUEUES_REG_START_OFFSET)
  // queue_index
  // 	$call AccessRegister (($bitcast ($uint<1>) _b1  ) ( ~ ($bitcast ($uint<4>) _b0  ) ) register_index ($bitcast ($uint<32>) _b0  ) ) (tx_queue_pointer_32 ) 
  //  file nic.linked.aa, line 469
  // register_index
  call_stmt_1221_call <=> (assign_stmt_1211_to_stmt_1238/call_stmt_1221_Sample/crr assign_stmt_1211_to_stmt_1238/call_stmt_1221_Update/ccr) (assign_stmt_1211_to_stmt_1238/call_stmt_1221_Sample/cra assign_stmt_1211_to_stmt_1238/call_stmt_1221_Update/cca)
  // 	$volatile tx_queue_pointer_36 := (tx_queue_pointer_32 && ($bitcast ($uint<4>) _b0  )) $buffering 1
  //  file nic.linked.aa, line 470
  // (tx_queue_pointer_32 && ($bitcast ($uint<4>) _b0  ))
  // tx_queue_pointer_32
  // 	$call popFromQueue (($bitcast ($uint<1>) _b0  ) tx_queue_pointer_36 ) (pkt_pointer status ) 
  //  file nic.linked.aa, line 471
  // tx_queue_pointer_36
  call_stmt_1233_call <=> (assign_stmt_1211_to_stmt_1238/call_stmt_1233_Sample/crr assign_stmt_1211_to_stmt_1238/call_stmt_1233_Update/ccr) (assign_stmt_1211_to_stmt_1238/call_stmt_1233_Sample/cra assign_stmt_1211_to_stmt_1238/call_stmt_1233_Update/cca)
}
$module [global_storage_initializer_] 
{
  // pipe-declarations for block %global_storage_initializer_
  //  file nic.linked.aa, line 474
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %global_storage_initializer_
    //  file nic.linked.aa, line 474
  }
  // end data-path
}
$module [macToNicInterface] 
{
  // pipe-declarations for block %macToNicInterface
  //  file nic.linked.aa, line 481
  // pipe-declarations for block %macToNicInterface%loop
  //  file nic.linked.aa, line 486
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    <>[branch_block_stmt_1244] // Branch Block  file nic.linked.aa, line 486
    {
      $P [branch_block_stmt_1244__entry__]
      branch_block_stmt_1244__entry__ <-| ($entry)
      $P [branch_block_stmt_1244__exit__]
      branch_block_stmt_1244__exit__ |-> ($exit)
      $P [do_while_stmt_1245__entry__] 
      $P [do_while_stmt_1245__exit__] 
      // do-while-statement  
      //  file nic.linked.aa, line 488
      <o> [do_while_stmt_1245]  $depth 7 $buffering 1 
      {
        $P[do_while_stmt_1245__entry__] 
        $P[do_while_stmt_1245__exit__] 
        $P[loop_back] 
        $P[condition_done] 
        $P[loop_body_done] 
        $pipeline [do_while_stmt_1245_loop_body] 
        {
          // Pipelined!
          $T[back_edge_to_loop_body] 
          $T[first_time_through_loop_body] 
          $T[loop_body_start] 
          $T[condition_evaluated] 
          $transitionmerge [entry_tmerge] (back_edge_to_loop_body first_time_through_loop_body) (loop_body_start)
          $entry <-& (loop_body_start)
          $T[aggregated_phi_sample_req] 
          $T[aggregated_phi_sample_ack] 
          $T[aggregated_phi_update_req] 
          $T[aggregated_phi_update_ack] 
          // do not loop-back unless all phi's have used up their triggering tokens.
          condition_evaluated <-& (aggregated_phi_update_ack)
          aggregated_phi_sample_req o<-& (aggregated_phi_update_ack 0)
          // start:  single source PHI statement phi_stmt_1247
          // 			$phi rdata0 := 			  mac_to_nic_data_0 $on   $entry ,   $loopback 
          // type of target is $uint<64>
          $T[phi_stmt_1247_sample_start_] 
          $T[phi_stmt_1247_sample_completed_] 
          $T[phi_stmt_1247_update_start_] 
          $T[phi_stmt_1247_update_completed_] 
          aggregated_phi_sample_req <-& (phi_stmt_1247_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_1247_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_1247_update_start_)
          // non-implicit source expression in single-source phi
          // mac_to_nic_data_0
          $T[RPIPE_mac_to_nic_data_0_1249_sample_start_] 
          $T[RPIPE_mac_to_nic_data_0_1249_sample_completed_] 
          $T[RPIPE_mac_to_nic_data_0_1249_update_start_] 
          $T[RPIPE_mac_to_nic_data_0_1249_update_completed_] 
          ;;[RPIPE_mac_to_nic_data_0_1249_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_mac_to_nic_data_0_1249_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_mac_to_nic_data_0_1249_sample_start_ &-> (RPIPE_mac_to_nic_data_0_1249_Sample)
          RPIPE_mac_to_nic_data_0_1249_sample_completed_ <-& (RPIPE_mac_to_nic_data_0_1249_Sample)
          RPIPE_mac_to_nic_data_0_1249_update_start_ <-& (RPIPE_mac_to_nic_data_0_1249_sample_completed_)
          RPIPE_mac_to_nic_data_0_1249_update_start_ &-> (RPIPE_mac_to_nic_data_0_1249_Update)
          RPIPE_mac_to_nic_data_0_1249_update_completed_ <-& (RPIPE_mac_to_nic_data_0_1249_Update)
          RPIPE_mac_to_nic_data_0_1249_sample_start_ o<-& (RPIPE_mac_to_nic_data_0_1249_update_completed_ 0)
          // RAW reenables for mac_to_nic_data_0
          // producer  and  consumer are both determined by PHI statements.
          aggregated_phi_sample_req &-> (RPIPE_mac_to_nic_data_0_1249_sample_start_)
          aggregated_phi_sample_ack <-& (RPIPE_mac_to_nic_data_0_1249_sample_completed_)
          aggregated_phi_update_req &-> (RPIPE_mac_to_nic_data_0_1249_update_start_)
          phi_stmt_1247_update_completed_ <-& (RPIPE_mac_to_nic_data_0_1249_update_completed_)
          aggregated_phi_update_ack <-& (phi_stmt_1247_update_completed_)
          // done: PHI Statement phi_stmt_1247
          // start:  single source PHI statement phi_stmt_1250
          // 			$phi rdata1 := 			  mac_to_nic_data_1 $on   $entry ,   $loopback 
          // type of target is $uint<16>
          $T[phi_stmt_1250_sample_start_] 
          $T[phi_stmt_1250_sample_completed_] 
          $T[phi_stmt_1250_update_start_] 
          $T[phi_stmt_1250_update_completed_] 
          aggregated_phi_sample_req <-& (phi_stmt_1250_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_1250_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_1250_update_start_)
          // non-implicit source expression in single-source phi
          // mac_to_nic_data_1
          $T[RPIPE_mac_to_nic_data_1_1252_sample_start_] 
          $T[RPIPE_mac_to_nic_data_1_1252_sample_completed_] 
          $T[RPIPE_mac_to_nic_data_1_1252_update_start_] 
          $T[RPIPE_mac_to_nic_data_1_1252_update_completed_] 
          ;;[RPIPE_mac_to_nic_data_1_1252_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_mac_to_nic_data_1_1252_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_mac_to_nic_data_1_1252_sample_start_ &-> (RPIPE_mac_to_nic_data_1_1252_Sample)
          RPIPE_mac_to_nic_data_1_1252_sample_completed_ <-& (RPIPE_mac_to_nic_data_1_1252_Sample)
          RPIPE_mac_to_nic_data_1_1252_update_start_ <-& (RPIPE_mac_to_nic_data_1_1252_sample_completed_)
          RPIPE_mac_to_nic_data_1_1252_update_start_ &-> (RPIPE_mac_to_nic_data_1_1252_Update)
          RPIPE_mac_to_nic_data_1_1252_update_completed_ <-& (RPIPE_mac_to_nic_data_1_1252_Update)
          RPIPE_mac_to_nic_data_1_1252_sample_start_ o<-& (RPIPE_mac_to_nic_data_1_1252_update_completed_ 0)
          // RAW reenables for mac_to_nic_data_1
          // producer  and  consumer are both determined by PHI statements.
          aggregated_phi_sample_req &-> (RPIPE_mac_to_nic_data_1_1252_sample_start_)
          aggregated_phi_sample_ack <-& (RPIPE_mac_to_nic_data_1_1252_sample_completed_)
          aggregated_phi_update_req &-> (RPIPE_mac_to_nic_data_1_1252_update_start_)
          phi_stmt_1250_update_completed_ <-& (RPIPE_mac_to_nic_data_1_1252_update_completed_)
          aggregated_phi_update_ack <-& (phi_stmt_1250_update_completed_)
          // done: PHI Statement phi_stmt_1250
          // start:  			mac_to_nic_data := (( $slice rdata1 8 0 )  && rdata0) $buffering 1// bits of buffering = 73. 
          //  file nic.linked.aa, line 497
          // Source expression
          // (( $slice rdata1 8 0 )  && rdata0)
          $T[CONCAT_u9_u73_1262_sample_start_] 
          $T[CONCAT_u9_u73_1262_sample_completed_] 
          $T[CONCAT_u9_u73_1262_update_start_] 
          $T[CONCAT_u9_u73_1262_update_completed_] 
          // ( $slice rdata1 8 0 ) 
          // rdata1
          // rdata0
          // start: Forward dependencies from ( $slice rdata1 8 0 )  to transition CONCAT_u9_u73_1262_sample_start_
          CONCAT_u9_u73_1262_sample_start_ <-& (phi_stmt_1250_update_completed_)
          // done: Forward dependencies from ( $slice rdata1 8 0 )  to transition CONCAT_u9_u73_1262_sample_start_
          // start: Forward dependencies from rdata0 to transition CONCAT_u9_u73_1262_sample_start_
          CONCAT_u9_u73_1262_sample_start_ <-& (phi_stmt_1247_update_completed_)
          // done: Forward dependencies from rdata0 to transition CONCAT_u9_u73_1262_sample_start_
          ;;[CONCAT_u9_u73_1262_Sample] 
          {
            // binary expression 
            $T [rr] $T [ra]  // (split) binary operation 
          }
          ;;[CONCAT_u9_u73_1262_Update] 
          {
            // binary expression 
            $T [cr] $T [ca] // (split) binary operation 
          }
          CONCAT_u9_u73_1262_sample_start_ &-> (CONCAT_u9_u73_1262_Sample)
          CONCAT_u9_u73_1262_sample_completed_ <-& (CONCAT_u9_u73_1262_Sample)
          CONCAT_u9_u73_1262_sample_completed_ &-> ($null)
          CONCAT_u9_u73_1262_update_start_ &-> (CONCAT_u9_u73_1262_Update)
          CONCAT_u9_u73_1262_update_completed_ <-& (CONCAT_u9_u73_1262_Update)
          // RAW reenables for ( $slice rdata1 8 0 ) 
          phi_stmt_1250_update_start_ o<-& (CONCAT_u9_u73_1262_sample_completed_ 0)
          // RAW reenables for rdata0
          phi_stmt_1247_update_start_ o<-& (CONCAT_u9_u73_1262_sample_completed_ 0)
          // self-release: 
          CONCAT_u9_u73_1262_sample_start_ o<-& (CONCAT_u9_u73_1262_sample_completed_ 1)
          $null &-> (CONCAT_u9_u73_1262_update_start_)
          CONCAT_u9_u73_1262_update_start_ o<-& (CONCAT_u9_u73_1262_update_completed_ 0)
          // Target expression
          // (as target) mac_to_nic_data
          $T[WPIPE_mac_to_nic_data_1257_sample_start_] 
          $T[WPIPE_mac_to_nic_data_1257_sample_completed_] 
          $T[WPIPE_mac_to_nic_data_1257_update_start_] 
          $T[WPIPE_mac_to_nic_data_1257_update_completed_] 
          ;;[WPIPE_mac_to_nic_data_1257_Sample] 
          {
            // pipe write sample-start mac_to_nic_data
            $T [req] $T [ack] 
          }
          ;;[WPIPE_mac_to_nic_data_1257_Update] 
          {
            // pipe write update (complete) mac_to_nic_data
            $T [req] $T [ack] 
          }
          WPIPE_mac_to_nic_data_1257_sample_start_ &-> (WPIPE_mac_to_nic_data_1257_Sample)
          WPIPE_mac_to_nic_data_1257_sample_completed_ <-& (WPIPE_mac_to_nic_data_1257_Sample)
          WPIPE_mac_to_nic_data_1257_update_start_ <-& (WPIPE_mac_to_nic_data_1257_sample_completed_)
          WPIPE_mac_to_nic_data_1257_update_start_ &-> (WPIPE_mac_to_nic_data_1257_Update)
          WPIPE_mac_to_nic_data_1257_update_completed_ <-& (WPIPE_mac_to_nic_data_1257_Update)
          WPIPE_mac_to_nic_data_1257_sample_start_ o<-& (WPIPE_mac_to_nic_data_1257_update_completed_ 0)
          // start: Forward dependencies from (( $slice rdata1 8 0 )  && rdata0) to transition WPIPE_mac_to_nic_data_1257_sample_start_
          WPIPE_mac_to_nic_data_1257_sample_start_ <-& (CONCAT_u9_u73_1262_update_completed_)
          // done: Forward dependencies from (( $slice rdata1 8 0 )  && rdata0) to transition WPIPE_mac_to_nic_data_1257_sample_start_
          // RAW reenables for (( $slice rdata1 8 0 )  && rdata0)
          CONCAT_u9_u73_1262_update_start_ o<-& (WPIPE_mac_to_nic_data_1257_sample_completed_ 0)
          // end:  			mac_to_nic_data := (( $slice rdata1 8 0 )  && rdata0) $buffering 1// bits of buffering = 73. 
          $T [loop_body_delay_to_condition_start] $delay
          loop_body_start &-> (loop_body_delay_to_condition_start)
          loop_body_delay_to_condition_start &-> (condition_evaluated)
          condition_evaluated &-> ($null)
          // load-store dependencies..
          // pipe read/write dependencies for pipe mac_to_nic_data
          // read-dependencies for pipe mac_to_nic_data
          // write-dependencies for pipe mac_to_nic_data
          // signal write dependencies for mac_to_nic_data
          // pipe read/write dependencies for pipe mac_to_nic_data_0
          // read-dependencies for pipe mac_to_nic_data_0
          // write-dependencies for pipe mac_to_nic_data_0
          // signal write dependencies for mac_to_nic_data_0
          // pipe read/write dependencies for pipe mac_to_nic_data_1
          // read-dependencies for pipe mac_to_nic_data_1
          // write-dependencies for pipe mac_to_nic_data_1
          // signal write dependencies for mac_to_nic_data_1
        }
        ( first_time_through_loop_body  back_edge_to_loop_body) 
        ( condition_evaluated )
        ;; [loop_exit] 
        {
          $T [ack] 
        }
        ;; [loop_taken] 
        {
          $T [ack] 
        }
        do_while_stmt_1245__entry__ <-| ($entry)
        loop_body_done <-| ( do_while_stmt_1245_loop_body ) 
        condition_done |-> (loop_exit loop_taken)
        do_while_stmt_1245__exit__ |-> ($exit)
        $bind condition_done <= do_while_stmt_1245_loop_body : condition_evaluated
        $bind do_while_stmt_1245__entry__  => do_while_stmt_1245_loop_body : first_time_through_loop_body 
        $bind loop_back  => do_while_stmt_1245_loop_body : back_edge_to_loop_body 
        $terminate (loop_exit loop_taken loop_body_done) (loop_back do_while_stmt_1245__exit__)
      }
      do_while_stmt_1245__entry__ |-> (do_while_stmt_1245)
      do_while_stmt_1245__exit__ <-| (do_while_stmt_1245)
      do_while_stmt_1245__entry__ <-| (branch_block_stmt_1244__entry__)
      do_while_stmt_1245__exit__ |-> (branch_block_stmt_1244__exit__)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %macToNicInterface%loop%
    //  file nic.linked.aa, line 490
    // constant-object-declarations for block %macToNicInterface%loop
    //  file nic.linked.aa, line 486
    // constant-object-declarations for block %macToNicInterface
    //  file nic.linked.aa, line 481
    // constant-declarations for block %macToNicInterface%loop
    //  file nic.linked.aa, line 486
    // do-while statement  
    //  file nic.linked.aa, line 488
    // 1 
    $constant $W[konst_1265_wire_constant] : $int<1> := _b1// 1
    // constant-declarations for block %macToNicInterface%loop%
    //  file nic.linked.aa, line 490
    // constant-declarations for phi:  			$phi rdata0 := 			  mac_to_nic_data_0 $on   $entry ,   $loopback 
    // type of target is $uint<64>
    //  file nic.linked.aa, line 491
    // constant-declarations for phi:  			$phi rdata1 := 			  mac_to_nic_data_1 $on   $entry ,   $loopback 
    // type of target is $uint<16>
    //  file nic.linked.aa, line 493
    // block %macToNicInterface%loop
    //  file nic.linked.aa, line 486
    // do-while statement  
    //  file nic.linked.aa, line 488
    // merge-statement  
    //  file nic.linked.aa, line 490
    // 			$phi rdata0 := 			  mac_to_nic_data_0 $on   $entry ,   $loopback 
    // type of target is $uint<64>
    //  file nic.linked.aa, line 491
    // mac_to_nic_data_0
    $W[RPIPE_mac_to_nic_data_0_1249_wire] : $int<64>
    // rdata0
    $W[rdata0_1247] : $int<64>
    // 			$phi rdata1 := 			  mac_to_nic_data_1 $on   $entry ,   $loopback 
    // type of target is $uint<16>
    //  file nic.linked.aa, line 493
    // mac_to_nic_data_1
    $W[RPIPE_mac_to_nic_data_1_1252_wire] : $int<16>
    // rdata1
    $W[rdata1_1250] : $int<16>
    // 			mac_to_nic_data := (( $slice rdata1 8 0 )  && rdata0) $buffering 1// bits of buffering = 73. 
    //  file nic.linked.aa, line 497
    // ( $slice rdata1 8 0 ) 
    $intermediate $W[slice_1260_wire] : $int<9>
    // (( $slice rdata1 8 0 )  && rdata0)
    $intermediate $W[CONCAT_u9_u73_1262_wire] : $int<73>
    // mac_to_nic_data
    // datapath-instances for block %macToNicInterface%loop
    //  file nic.linked.aa, line 486
    // datapath-instances for do-while  
    //  file nic.linked.aa, line 488
    ==0? [do_while_stmt_1245_branch] (konst_1265_wire_constant)
    $flowthrough
    // data-path instances for merge  
    //  file nic.linked.aa, line 490
    // 			$phi rdata0 := 			  mac_to_nic_data_0 $on   $entry ,   $loopback 
    // type of target is $uint<64>
    //  file nic.linked.aa, line 491
    // mac_to_nic_data_0
    $ioport $in [RPIPE_mac_to_nic_data_0_1249_inst] (mac_to_nic_data_0) (RPIPE_mac_to_nic_data_0_1249_wire)  $fullrate 
    $buffering $out RPIPE_mac_to_nic_data_0_1249_inst RPIPE_mac_to_nic_data_0_1249_wire 1
    # := [ssrc_phi_stmt_1247] (RPIPE_mac_to_nic_data_0_1249_wire) (rdata0_1247)    $flowthrough 
    // 			$phi rdata1 := 			  mac_to_nic_data_1 $on   $entry ,   $loopback 
    // type of target is $uint<16>
    //  file nic.linked.aa, line 493
    // mac_to_nic_data_1
    $ioport $in [RPIPE_mac_to_nic_data_1_1252_inst] (mac_to_nic_data_1) (RPIPE_mac_to_nic_data_1_1252_wire)  $fullrate 
    $buffering $out RPIPE_mac_to_nic_data_1_1252_inst RPIPE_mac_to_nic_data_1_1252_wire 1
    # := [ssrc_phi_stmt_1250] (RPIPE_mac_to_nic_data_1_1252_wire) (rdata1_1250)    $flowthrough 
    // 			mac_to_nic_data := (( $slice rdata1 8 0 )  && rdata0) $buffering 1// bits of buffering = 73. 
    //  file nic.linked.aa, line 497
    // ( $slice rdata1 8 0 ) 
    [:] [slice_1260_inst] (rdata1_1250 8 0) (slice_1260_wire)  $flowthrough
    $delay slice_1260_inst 0
    // (( $slice rdata1 8 0 )  && rdata0)
    &&[CONCAT_u9_u73_1262_inst] (slice_1260_wire rdata0_1247) (CONCAT_u9_u73_1262_wire)    $fullrate
    $buffering  $out CONCAT_u9_u73_1262_inst CONCAT_u9_u73_1262_wire 1
    $delay CONCAT_u9_u73_1262_inst 1
    // mac_to_nic_data
    $ioport $out [WPIPE_mac_to_nic_data_1257_inst]  (CONCAT_u9_u73_1262_wire) (mac_to_nic_data)  $fullrate 
  }
  // end data-path
  // CP-DP links for do-while  do_while_stmt_1245
  //  file nic.linked.aa, line 488
  // mac_to_nic_data_0
  RPIPE_mac_to_nic_data_0_1249_inst <=> (branch_block_stmt_1244/do_while_stmt_1245/do_while_stmt_1245_loop_body/RPIPE_mac_to_nic_data_0_1249_Sample/rr branch_block_stmt_1244/do_while_stmt_1245/do_while_stmt_1245_loop_body/RPIPE_mac_to_nic_data_0_1249_Update/cr) (branch_block_stmt_1244/do_while_stmt_1245/do_while_stmt_1245_loop_body/RPIPE_mac_to_nic_data_0_1249_Sample/ra branch_block_stmt_1244/do_while_stmt_1245/do_while_stmt_1245_loop_body/RPIPE_mac_to_nic_data_0_1249_Update/ca)
  // mac_to_nic_data_1
  RPIPE_mac_to_nic_data_1_1252_inst <=> (branch_block_stmt_1244/do_while_stmt_1245/do_while_stmt_1245_loop_body/RPIPE_mac_to_nic_data_1_1252_Sample/rr branch_block_stmt_1244/do_while_stmt_1245/do_while_stmt_1245_loop_body/RPIPE_mac_to_nic_data_1_1252_Update/cr) (branch_block_stmt_1244/do_while_stmt_1245/do_while_stmt_1245_loop_body/RPIPE_mac_to_nic_data_1_1252_Sample/ra branch_block_stmt_1244/do_while_stmt_1245/do_while_stmt_1245_loop_body/RPIPE_mac_to_nic_data_1_1252_Update/ca)
  // 			mac_to_nic_data := (( $slice rdata1 8 0 )  && rdata0) $buffering 1// bits of buffering = 73. 
  //  file nic.linked.aa, line 497
  // (( $slice rdata1 8 0 )  && rdata0)
  // rdata1
  // rdata0
  CONCAT_u9_u73_1262_inst <=> (branch_block_stmt_1244/do_while_stmt_1245/do_while_stmt_1245_loop_body/CONCAT_u9_u73_1262_Sample/rr branch_block_stmt_1244/do_while_stmt_1245/do_while_stmt_1245_loop_body/CONCAT_u9_u73_1262_Update/cr) (branch_block_stmt_1244/do_while_stmt_1245/do_while_stmt_1245_loop_body/CONCAT_u9_u73_1262_Sample/ra branch_block_stmt_1244/do_while_stmt_1245/do_while_stmt_1245_loop_body/CONCAT_u9_u73_1262_Update/ca)
  // mac_to_nic_data
  WPIPE_mac_to_nic_data_1257_inst <=> (branch_block_stmt_1244/do_while_stmt_1245/do_while_stmt_1245_loop_body/WPIPE_mac_to_nic_data_1257_Sample/req branch_block_stmt_1244/do_while_stmt_1245/do_while_stmt_1245_loop_body/WPIPE_mac_to_nic_data_1257_Update/req) (branch_block_stmt_1244/do_while_stmt_1245/do_while_stmt_1245_loop_body/WPIPE_mac_to_nic_data_1257_Sample/ack branch_block_stmt_1244/do_while_stmt_1245/do_while_stmt_1245_loop_body/WPIPE_mac_to_nic_data_1257_Update/ack)
  do_while_stmt_1245_branch <=> (branch_block_stmt_1244/do_while_stmt_1245/do_while_stmt_1245_loop_body/condition_evaluated) (branch_block_stmt_1244/do_while_stmt_1245/loop_exit/ack branch_block_stmt_1244/do_while_stmt_1245/loop_taken/ack)
}
$module [memoryToNicInterface] 
{
  // pipe-declarations for block %memoryToNicInterface
  //  file nic.linked.aa, line 501
  // pipe-declarations for block %memoryToNicInterface%loop
  //  file nic.linked.aa, line 506
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    <>[branch_block_stmt_1269] // Branch Block  file nic.linked.aa, line 506
    {
      $P [branch_block_stmt_1269__entry__]
      branch_block_stmt_1269__entry__ <-| ($entry)
      $P [branch_block_stmt_1269__exit__]
      branch_block_stmt_1269__exit__ |-> ($exit)
      $P [do_while_stmt_1270__entry__] 
      $P [do_while_stmt_1270__exit__] 
      // do-while-statement  
      //  file nic.linked.aa, line 508
      <o> [do_while_stmt_1270]  $depth 7 $buffering 1 
      {
        $P[do_while_stmt_1270__entry__] 
        $P[do_while_stmt_1270__exit__] 
        $P[loop_back] 
        $P[condition_done] 
        $P[loop_body_done] 
        $pipeline [do_while_stmt_1270_loop_body] 
        {
          // Pipelined!
          $T[back_edge_to_loop_body] 
          $T[first_time_through_loop_body] 
          $T[loop_body_start] 
          $T[condition_evaluated] 
          $transitionmerge [entry_tmerge] (back_edge_to_loop_body first_time_through_loop_body) (loop_body_start)
          $entry <-& (loop_body_start)
          $T[aggregated_phi_sample_req] 
          $T[aggregated_phi_sample_ack] 
          $T[aggregated_phi_update_req] 
          $T[aggregated_phi_update_ack] 
          // do not loop-back unless all phi's have used up their triggering tokens.
          condition_evaluated <-& (aggregated_phi_update_ack)
          aggregated_phi_sample_req o<-& (aggregated_phi_update_ack 0)
          // start:  single source PHI statement phi_stmt_1272
          // 			$phi rdata0 := 			  mem_resp1_pipe0 $on   $entry ,   $loopback 
          // type of target is $uint<64>
          $T[phi_stmt_1272_sample_start_] 
          $T[phi_stmt_1272_sample_completed_] 
          $T[phi_stmt_1272_update_start_] 
          $T[phi_stmt_1272_update_completed_] 
          aggregated_phi_sample_req <-& (phi_stmt_1272_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_1272_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_1272_update_start_)
          // non-implicit source expression in single-source phi
          // mem_resp1_pipe0
          $T[RPIPE_mem_resp1_pipe0_1274_sample_start_] 
          $T[RPIPE_mem_resp1_pipe0_1274_sample_completed_] 
          $T[RPIPE_mem_resp1_pipe0_1274_update_start_] 
          $T[RPIPE_mem_resp1_pipe0_1274_update_completed_] 
          ;;[RPIPE_mem_resp1_pipe0_1274_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_mem_resp1_pipe0_1274_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_mem_resp1_pipe0_1274_sample_start_ &-> (RPIPE_mem_resp1_pipe0_1274_Sample)
          RPIPE_mem_resp1_pipe0_1274_sample_completed_ <-& (RPIPE_mem_resp1_pipe0_1274_Sample)
          RPIPE_mem_resp1_pipe0_1274_update_start_ <-& (RPIPE_mem_resp1_pipe0_1274_sample_completed_)
          RPIPE_mem_resp1_pipe0_1274_update_start_ &-> (RPIPE_mem_resp1_pipe0_1274_Update)
          RPIPE_mem_resp1_pipe0_1274_update_completed_ <-& (RPIPE_mem_resp1_pipe0_1274_Update)
          RPIPE_mem_resp1_pipe0_1274_sample_start_ o<-& (RPIPE_mem_resp1_pipe0_1274_update_completed_ 0)
          // RAW reenables for mem_resp1_pipe0
          // producer  and  consumer are both determined by PHI statements.
          aggregated_phi_sample_req &-> (RPIPE_mem_resp1_pipe0_1274_sample_start_)
          aggregated_phi_sample_ack <-& (RPIPE_mem_resp1_pipe0_1274_sample_completed_)
          aggregated_phi_update_req &-> (RPIPE_mem_resp1_pipe0_1274_update_start_)
          phi_stmt_1272_update_completed_ <-& (RPIPE_mem_resp1_pipe0_1274_update_completed_)
          aggregated_phi_update_ack <-& (phi_stmt_1272_update_completed_)
          // done: PHI Statement phi_stmt_1272
          // start:  single source PHI statement phi_stmt_1275
          // 			$phi rdata1 := 			  mem_resp1_pipe1 $on   $entry ,   $loopback 
          // type of target is $uint<8>
          $T[phi_stmt_1275_sample_start_] 
          $T[phi_stmt_1275_sample_completed_] 
          $T[phi_stmt_1275_update_start_] 
          $T[phi_stmt_1275_update_completed_] 
          aggregated_phi_sample_req <-& (phi_stmt_1275_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_1275_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_1275_update_start_)
          // non-implicit source expression in single-source phi
          // mem_resp1_pipe1
          $T[RPIPE_mem_resp1_pipe1_1277_sample_start_] 
          $T[RPIPE_mem_resp1_pipe1_1277_sample_completed_] 
          $T[RPIPE_mem_resp1_pipe1_1277_update_start_] 
          $T[RPIPE_mem_resp1_pipe1_1277_update_completed_] 
          ;;[RPIPE_mem_resp1_pipe1_1277_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_mem_resp1_pipe1_1277_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_mem_resp1_pipe1_1277_sample_start_ &-> (RPIPE_mem_resp1_pipe1_1277_Sample)
          RPIPE_mem_resp1_pipe1_1277_sample_completed_ <-& (RPIPE_mem_resp1_pipe1_1277_Sample)
          RPIPE_mem_resp1_pipe1_1277_update_start_ <-& (RPIPE_mem_resp1_pipe1_1277_sample_completed_)
          RPIPE_mem_resp1_pipe1_1277_update_start_ &-> (RPIPE_mem_resp1_pipe1_1277_Update)
          RPIPE_mem_resp1_pipe1_1277_update_completed_ <-& (RPIPE_mem_resp1_pipe1_1277_Update)
          RPIPE_mem_resp1_pipe1_1277_sample_start_ o<-& (RPIPE_mem_resp1_pipe1_1277_update_completed_ 0)
          // RAW reenables for mem_resp1_pipe1
          // producer  and  consumer are both determined by PHI statements.
          aggregated_phi_sample_req &-> (RPIPE_mem_resp1_pipe1_1277_sample_start_)
          aggregated_phi_sample_ack <-& (RPIPE_mem_resp1_pipe1_1277_sample_completed_)
          aggregated_phi_update_req &-> (RPIPE_mem_resp1_pipe1_1277_update_start_)
          phi_stmt_1275_update_completed_ <-& (RPIPE_mem_resp1_pipe1_1277_update_completed_)
          aggregated_phi_update_ack <-& (phi_stmt_1275_update_completed_)
          // done: PHI Statement phi_stmt_1275
          // start:  			MEMORY_TO_NIC_RESPONSE := ((rdata1 [] 0 ) && rdata0) $buffering 1// bits of buffering = 65. 
          //  file nic.linked.aa, line 516
          // Source expression
          // ((rdata1 [] 0 ) && rdata0)
          $T[CONCAT_u1_u65_1284_sample_start_] 
          $T[CONCAT_u1_u65_1284_sample_completed_] 
          $T[CONCAT_u1_u65_1284_update_start_] 
          $T[CONCAT_u1_u65_1284_update_completed_] 
          // (rdata1 [] 0 )
          // rdata1
          // rdata0
          // start: Forward dependencies from (rdata1 [] 0 ) to transition CONCAT_u1_u65_1284_sample_start_
          CONCAT_u1_u65_1284_sample_start_ <-& (phi_stmt_1275_update_completed_)
          // done: Forward dependencies from (rdata1 [] 0 ) to transition CONCAT_u1_u65_1284_sample_start_
          // start: Forward dependencies from rdata0 to transition CONCAT_u1_u65_1284_sample_start_
          CONCAT_u1_u65_1284_sample_start_ <-& (phi_stmt_1272_update_completed_)
          // done: Forward dependencies from rdata0 to transition CONCAT_u1_u65_1284_sample_start_
          ;;[CONCAT_u1_u65_1284_Sample] 
          {
            // binary expression 
            $T [rr] $T [ra]  // (split) binary operation 
          }
          ;;[CONCAT_u1_u65_1284_Update] 
          {
            // binary expression 
            $T [cr] $T [ca] // (split) binary operation 
          }
          CONCAT_u1_u65_1284_sample_start_ &-> (CONCAT_u1_u65_1284_Sample)
          CONCAT_u1_u65_1284_sample_completed_ <-& (CONCAT_u1_u65_1284_Sample)
          CONCAT_u1_u65_1284_sample_completed_ &-> ($null)
          CONCAT_u1_u65_1284_update_start_ &-> (CONCAT_u1_u65_1284_Update)
          CONCAT_u1_u65_1284_update_completed_ <-& (CONCAT_u1_u65_1284_Update)
          // RAW reenables for (rdata1 [] 0 )
          phi_stmt_1275_update_start_ o<-& (CONCAT_u1_u65_1284_sample_completed_ 0)
          // RAW reenables for rdata0
          phi_stmt_1272_update_start_ o<-& (CONCAT_u1_u65_1284_sample_completed_ 0)
          // self-release: 
          CONCAT_u1_u65_1284_sample_start_ o<-& (CONCAT_u1_u65_1284_sample_completed_ 1)
          $null &-> (CONCAT_u1_u65_1284_update_start_)
          CONCAT_u1_u65_1284_update_start_ o<-& (CONCAT_u1_u65_1284_update_completed_ 0)
          // Target expression
          // (as target) MEMORY_TO_NIC_RESPONSE
          $T[WPIPE_MEMORY_TO_NIC_RESPONSE_1279_sample_start_] 
          $T[WPIPE_MEMORY_TO_NIC_RESPONSE_1279_sample_completed_] 
          $T[WPIPE_MEMORY_TO_NIC_RESPONSE_1279_update_start_] 
          $T[WPIPE_MEMORY_TO_NIC_RESPONSE_1279_update_completed_] 
          ;;[WPIPE_MEMORY_TO_NIC_RESPONSE_1279_Sample] 
          {
            // pipe write sample-start MEMORY_TO_NIC_RESPONSE
            $T [req] $T [ack] 
          }
          ;;[WPIPE_MEMORY_TO_NIC_RESPONSE_1279_Update] 
          {
            // pipe write update (complete) MEMORY_TO_NIC_RESPONSE
            $T [req] $T [ack] 
          }
          WPIPE_MEMORY_TO_NIC_RESPONSE_1279_sample_start_ &-> (WPIPE_MEMORY_TO_NIC_RESPONSE_1279_Sample)
          WPIPE_MEMORY_TO_NIC_RESPONSE_1279_sample_completed_ <-& (WPIPE_MEMORY_TO_NIC_RESPONSE_1279_Sample)
          WPIPE_MEMORY_TO_NIC_RESPONSE_1279_update_start_ <-& (WPIPE_MEMORY_TO_NIC_RESPONSE_1279_sample_completed_)
          WPIPE_MEMORY_TO_NIC_RESPONSE_1279_update_start_ &-> (WPIPE_MEMORY_TO_NIC_RESPONSE_1279_Update)
          WPIPE_MEMORY_TO_NIC_RESPONSE_1279_update_completed_ <-& (WPIPE_MEMORY_TO_NIC_RESPONSE_1279_Update)
          WPIPE_MEMORY_TO_NIC_RESPONSE_1279_sample_start_ o<-& (WPIPE_MEMORY_TO_NIC_RESPONSE_1279_update_completed_ 0)
          // start: Forward dependencies from ((rdata1 [] 0 ) && rdata0) to transition WPIPE_MEMORY_TO_NIC_RESPONSE_1279_sample_start_
          WPIPE_MEMORY_TO_NIC_RESPONSE_1279_sample_start_ <-& (CONCAT_u1_u65_1284_update_completed_)
          // done: Forward dependencies from ((rdata1 [] 0 ) && rdata0) to transition WPIPE_MEMORY_TO_NIC_RESPONSE_1279_sample_start_
          // RAW reenables for ((rdata1 [] 0 ) && rdata0)
          CONCAT_u1_u65_1284_update_start_ o<-& (WPIPE_MEMORY_TO_NIC_RESPONSE_1279_sample_completed_ 0)
          // end:  			MEMORY_TO_NIC_RESPONSE := ((rdata1 [] 0 ) && rdata0) $buffering 1// bits of buffering = 65. 
          $T [loop_body_delay_to_condition_start] $delay
          loop_body_start &-> (loop_body_delay_to_condition_start)
          loop_body_delay_to_condition_start &-> (condition_evaluated)
          condition_evaluated &-> ($null)
          // load-store dependencies..
          // pipe read/write dependencies for pipe MEMORY_TO_NIC_RESPONSE
          // read-dependencies for pipe MEMORY_TO_NIC_RESPONSE
          // write-dependencies for pipe MEMORY_TO_NIC_RESPONSE
          // signal write dependencies for MEMORY_TO_NIC_RESPONSE
          // pipe read/write dependencies for pipe mem_resp1_pipe0
          // read-dependencies for pipe mem_resp1_pipe0
          // write-dependencies for pipe mem_resp1_pipe0
          // signal write dependencies for mem_resp1_pipe0
          // pipe read/write dependencies for pipe mem_resp1_pipe1
          // read-dependencies for pipe mem_resp1_pipe1
          // write-dependencies for pipe mem_resp1_pipe1
          // signal write dependencies for mem_resp1_pipe1
        }
        ( first_time_through_loop_body  back_edge_to_loop_body) 
        ( condition_evaluated )
        ;; [loop_exit] 
        {
          $T [ack] 
        }
        ;; [loop_taken] 
        {
          $T [ack] 
        }
        do_while_stmt_1270__entry__ <-| ($entry)
        loop_body_done <-| ( do_while_stmt_1270_loop_body ) 
        condition_done |-> (loop_exit loop_taken)
        do_while_stmt_1270__exit__ |-> ($exit)
        $bind condition_done <= do_while_stmt_1270_loop_body : condition_evaluated
        $bind do_while_stmt_1270__entry__  => do_while_stmt_1270_loop_body : first_time_through_loop_body 
        $bind loop_back  => do_while_stmt_1270_loop_body : back_edge_to_loop_body 
        $terminate (loop_exit loop_taken loop_body_done) (loop_back do_while_stmt_1270__exit__)
      }
      do_while_stmt_1270__entry__ |-> (do_while_stmt_1270)
      do_while_stmt_1270__exit__ <-| (do_while_stmt_1270)
      do_while_stmt_1270__entry__ <-| (branch_block_stmt_1269__entry__)
      do_while_stmt_1270__exit__ |-> (branch_block_stmt_1269__exit__)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %memoryToNicInterface%loop%
    //  file nic.linked.aa, line 510
    // constant-object-declarations for block %memoryToNicInterface%loop
    //  file nic.linked.aa, line 506
    // constant-object-declarations for block %memoryToNicInterface
    //  file nic.linked.aa, line 501
    // constant-declarations for block %memoryToNicInterface%loop
    //  file nic.linked.aa, line 506
    // do-while statement  
    //  file nic.linked.aa, line 508
    // 1 
    $constant $W[konst_1287_wire_constant] : $int<1> := _b1// 1
    // constant-declarations for block %memoryToNicInterface%loop%
    //  file nic.linked.aa, line 510
    // constant-declarations for phi:  			$phi rdata0 := 			  mem_resp1_pipe0 $on   $entry ,   $loopback 
    // type of target is $uint<64>
    //  file nic.linked.aa, line 511
    // constant-declarations for phi:  			$phi rdata1 := 			  mem_resp1_pipe1 $on   $entry ,   $loopback 
    // type of target is $uint<8>
    //  file nic.linked.aa, line 513
    // 0 
    $constant $W[konst_1281_wire_constant] : $int<8> := _b00000000// 0
    // block %memoryToNicInterface%loop
    //  file nic.linked.aa, line 506
    // do-while statement  
    //  file nic.linked.aa, line 508
    // merge-statement  
    //  file nic.linked.aa, line 510
    // 			$phi rdata0 := 			  mem_resp1_pipe0 $on   $entry ,   $loopback 
    // type of target is $uint<64>
    //  file nic.linked.aa, line 511
    // mem_resp1_pipe0
    $W[RPIPE_mem_resp1_pipe0_1274_wire] : $int<64>
    // rdata0
    $W[rdata0_1272] : $int<64>
    // 			$phi rdata1 := 			  mem_resp1_pipe1 $on   $entry ,   $loopback 
    // type of target is $uint<8>
    //  file nic.linked.aa, line 513
    // mem_resp1_pipe1
    $W[RPIPE_mem_resp1_pipe1_1277_wire] : $int<8>
    // rdata1
    $W[rdata1_1275] : $int<8>
    // 			MEMORY_TO_NIC_RESPONSE := ((rdata1 [] 0 ) && rdata0) $buffering 1// bits of buffering = 65. 
    //  file nic.linked.aa, line 516
    // (rdata1 [] 0 )
    $intermediate $W[BITSEL_u8_u1_1282_wire] : $int<1>
    // ((rdata1 [] 0 ) && rdata0)
    $intermediate $W[CONCAT_u1_u65_1284_wire] : $int<65>
    // MEMORY_TO_NIC_RESPONSE
    // datapath-instances for block %memoryToNicInterface%loop
    //  file nic.linked.aa, line 506
    // datapath-instances for do-while  
    //  file nic.linked.aa, line 508
    ==0? [do_while_stmt_1270_branch] (konst_1287_wire_constant)
    $flowthrough
    // data-path instances for merge  
    //  file nic.linked.aa, line 510
    // 			$phi rdata0 := 			  mem_resp1_pipe0 $on   $entry ,   $loopback 
    // type of target is $uint<64>
    //  file nic.linked.aa, line 511
    // mem_resp1_pipe0
    $ioport $in [RPIPE_mem_resp1_pipe0_1274_inst] (mem_resp1_pipe0) (RPIPE_mem_resp1_pipe0_1274_wire)  $fullrate 
    $buffering $out RPIPE_mem_resp1_pipe0_1274_inst RPIPE_mem_resp1_pipe0_1274_wire 1
    # := [ssrc_phi_stmt_1272] (RPIPE_mem_resp1_pipe0_1274_wire) (rdata0_1272)    $flowthrough 
    // 			$phi rdata1 := 			  mem_resp1_pipe1 $on   $entry ,   $loopback 
    // type of target is $uint<8>
    //  file nic.linked.aa, line 513
    // mem_resp1_pipe1
    $ioport $in [RPIPE_mem_resp1_pipe1_1277_inst] (mem_resp1_pipe1) (RPIPE_mem_resp1_pipe1_1277_wire)  $fullrate 
    $buffering $out RPIPE_mem_resp1_pipe1_1277_inst RPIPE_mem_resp1_pipe1_1277_wire 1
    # := [ssrc_phi_stmt_1275] (RPIPE_mem_resp1_pipe1_1277_wire) (rdata1_1275)    $flowthrough 
    // 			MEMORY_TO_NIC_RESPONSE := ((rdata1 [] 0 ) && rdata0) $buffering 1// bits of buffering = 65. 
    //  file nic.linked.aa, line 516
    // (rdata1 [] 0 )
    [][BITSEL_u8_u1_1282_inst] (rdata1_1275 konst_1281_wire_constant) (BITSEL_u8_u1_1282_wire)   $flowthrough 
    $delay BITSEL_u8_u1_1282_inst 0
    // ((rdata1 [] 0 ) && rdata0)
    &&[CONCAT_u1_u65_1284_inst] (BITSEL_u8_u1_1282_wire rdata0_1272) (CONCAT_u1_u65_1284_wire)    $fullrate
    $buffering  $out CONCAT_u1_u65_1284_inst CONCAT_u1_u65_1284_wire 1
    $delay CONCAT_u1_u65_1284_inst 1
    // MEMORY_TO_NIC_RESPONSE
    $ioport $out [WPIPE_MEMORY_TO_NIC_RESPONSE_1279_inst]  (CONCAT_u1_u65_1284_wire) (MEMORY_TO_NIC_RESPONSE)  $fullrate 
  }
  // end data-path
  // CP-DP links for do-while  do_while_stmt_1270
  //  file nic.linked.aa, line 508
  // mem_resp1_pipe0
  RPIPE_mem_resp1_pipe0_1274_inst <=> (branch_block_stmt_1269/do_while_stmt_1270/do_while_stmt_1270_loop_body/RPIPE_mem_resp1_pipe0_1274_Sample/rr branch_block_stmt_1269/do_while_stmt_1270/do_while_stmt_1270_loop_body/RPIPE_mem_resp1_pipe0_1274_Update/cr) (branch_block_stmt_1269/do_while_stmt_1270/do_while_stmt_1270_loop_body/RPIPE_mem_resp1_pipe0_1274_Sample/ra branch_block_stmt_1269/do_while_stmt_1270/do_while_stmt_1270_loop_body/RPIPE_mem_resp1_pipe0_1274_Update/ca)
  // mem_resp1_pipe1
  RPIPE_mem_resp1_pipe1_1277_inst <=> (branch_block_stmt_1269/do_while_stmt_1270/do_while_stmt_1270_loop_body/RPIPE_mem_resp1_pipe1_1277_Sample/rr branch_block_stmt_1269/do_while_stmt_1270/do_while_stmt_1270_loop_body/RPIPE_mem_resp1_pipe1_1277_Update/cr) (branch_block_stmt_1269/do_while_stmt_1270/do_while_stmt_1270_loop_body/RPIPE_mem_resp1_pipe1_1277_Sample/ra branch_block_stmt_1269/do_while_stmt_1270/do_while_stmt_1270_loop_body/RPIPE_mem_resp1_pipe1_1277_Update/ca)
  // 			MEMORY_TO_NIC_RESPONSE := ((rdata1 [] 0 ) && rdata0) $buffering 1// bits of buffering = 65. 
  //  file nic.linked.aa, line 516
  // ((rdata1 [] 0 ) && rdata0)
  // (rdata1 [] 0 )
  // rdata1
  // rdata0
  CONCAT_u1_u65_1284_inst <=> (branch_block_stmt_1269/do_while_stmt_1270/do_while_stmt_1270_loop_body/CONCAT_u1_u65_1284_Sample/rr branch_block_stmt_1269/do_while_stmt_1270/do_while_stmt_1270_loop_body/CONCAT_u1_u65_1284_Update/cr) (branch_block_stmt_1269/do_while_stmt_1270/do_while_stmt_1270_loop_body/CONCAT_u1_u65_1284_Sample/ra branch_block_stmt_1269/do_while_stmt_1270/do_while_stmt_1270_loop_body/CONCAT_u1_u65_1284_Update/ca)
  // MEMORY_TO_NIC_RESPONSE
  WPIPE_MEMORY_TO_NIC_RESPONSE_1279_inst <=> (branch_block_stmt_1269/do_while_stmt_1270/do_while_stmt_1270_loop_body/WPIPE_MEMORY_TO_NIC_RESPONSE_1279_Sample/req branch_block_stmt_1269/do_while_stmt_1270/do_while_stmt_1270_loop_body/WPIPE_MEMORY_TO_NIC_RESPONSE_1279_Update/req) (branch_block_stmt_1269/do_while_stmt_1270/do_while_stmt_1270_loop_body/WPIPE_MEMORY_TO_NIC_RESPONSE_1279_Sample/ack branch_block_stmt_1269/do_while_stmt_1270/do_while_stmt_1270_loop_body/WPIPE_MEMORY_TO_NIC_RESPONSE_1279_Update/ack)
  do_while_stmt_1270_branch <=> (branch_block_stmt_1269/do_while_stmt_1270/do_while_stmt_1270_loop_body/condition_evaluated) (branch_block_stmt_1269/do_while_stmt_1270/loop_exit/ack branch_block_stmt_1269/do_while_stmt_1270/loop_taken/ack)
}
$volatile $module [nextLSTATE] 
{
  $in RX:$int<73>
  // can point into 
  LSTATE:$int<2>
  // can point into 
  $out nLSTATE:$int<2>
  // can point into 
  // pipe-declarations for block %nextLSTATE
  //  file nic.linked.aa, line 520
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    // Volatile! CP is left blank 
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %nextLSTATE
    //  file nic.linked.aa, line 520
    // 1 
    $constant $W[konst_1308_wire_constant] : $int<1> := _b1// 1
    // ( $mux (LSTATE == S0) S1  _b0  ) 
    // S0
    $constant $W[R_S0_1313_wire_constant] : $int<2> := _b00// 0
    // S1
    $constant $W[R_S1_1315_wire_constant] : $int<2> := _b01// 1
    // _b0 
    $constant $W[konst_1316_wire_constant] : $int<2> := _b00// 0
    // ( $mux (LSTATE == S1) S2  _b0  ) 
    // S1
    $constant $W[R_S1_1319_wire_constant] : $int<2> := _b01// 1
    // S2
    $constant $W[R_S2_1321_wire_constant] : $int<2> := _b10// 2
    // _b0 
    $constant $W[konst_1322_wire_constant] : $int<2> := _b00// 0
    // ( $mux ((LSTATE == S2) & ( ~ last_word )) S2  _b0  ) 
    // S2
    $constant $W[R_S2_1326_wire_constant] : $int<2> := _b10// 2
    // S2
    $constant $W[R_S2_1331_wire_constant] : $int<2> := _b10// 2
    // _b0 
    $constant $W[konst_1332_wire_constant] : $int<2> := _b00// 0
    // ( $mux ((LSTATE == S2) & last_word) S0  _b0  ) 
    // S2
    $constant $W[R_S2_1335_wire_constant] : $int<2> := _b10// 2
    // S0
    $constant $W[R_S0_1339_wire_constant] : $int<2> := _b00// 0
    // _b0 
    $constant $W[konst_1340_wire_constant] : $int<2> := _b00// 0
    // 	$volatile tlast := ( $slice RX 72 72 )  $buffering 1
    //  file nic.linked.aa, line 525
    // tlast
    $W[tlast_1297] : $int<1>
    // 	$volatile tdata := ( $slice RX 71 8 )  $buffering 1
    //  file nic.linked.aa, line 526
    // tdata
    $W[tdata_1301] : $int<64>
    // 	$volatile tkeep := ( $slice RX 7 0 )  $buffering 1
    //  file nic.linked.aa, line 527
    // tkeep
    $W[tkeep_1305] : $int<8>
    // 	$volatile last_word := (tlast == 1 ) $buffering 1
    //  file nic.linked.aa, line 528
    // last_word
    $W[last_word_1310] : $int<1>
    // 	nLSTATE := ((( $mux (LSTATE == S0) S1  _b0  )  | ( $mux (LSTATE == S1) S2  _b0  ) ) | (( $mux ((LSTATE == S2) & ( ~ last_word )) S2  _b0  )  | ( $mux ((LSTATE == S2) & last_word) S0  _b0  ) )) $buffering 1
    //  file nic.linked.aa, line 529
    // (LSTATE == S0)
    $intermediate $W[EQ_u2_u1_1314_wire] : $int<1>
    // ( $mux (LSTATE == S0) S1  _b0  ) 
    $intermediate $W[MUX_1317_wire] : $int<2>
    // (LSTATE == S1)
    $intermediate $W[EQ_u2_u1_1320_wire] : $int<1>
    // ( $mux (LSTATE == S1) S2  _b0  ) 
    $intermediate $W[MUX_1323_wire] : $int<2>
    // (( $mux (LSTATE == S0) S1  _b0  )  | ( $mux (LSTATE == S1) S2  _b0  ) )
    $intermediate $W[OR_u2_u2_1324_wire] : $int<2>
    // (LSTATE == S2)
    $intermediate $W[EQ_u2_u1_1327_wire] : $int<1>
    // ( ~ last_word )
    $intermediate $W[NOT_u1_u1_1329_wire] : $int<1>
    // ((LSTATE == S2) & ( ~ last_word ))
    $intermediate $W[AND_u1_u1_1330_wire] : $int<1>
    // ( $mux ((LSTATE == S2) & ( ~ last_word )) S2  _b0  ) 
    $intermediate $W[MUX_1333_wire] : $int<2>
    // (LSTATE == S2)
    $intermediate $W[EQ_u2_u1_1336_wire] : $int<1>
    // ((LSTATE == S2) & last_word)
    $intermediate $W[AND_u1_u1_1338_wire] : $int<1>
    // ( $mux ((LSTATE == S2) & last_word) S0  _b0  ) 
    $intermediate $W[MUX_1341_wire] : $int<2>
    // (( $mux ((LSTATE == S2) & ( ~ last_word )) S2  _b0  )  | ( $mux ((LSTATE == S2) & last_word) S0  _b0  ) )
    $intermediate $W[OR_u2_u2_1342_wire] : $int<2>
    // nLSTATE
    // 	$volatile tlast := ( $slice RX 72 72 )  $buffering 1
    //  file nic.linked.aa, line 525
    // ( $slice RX 72 72 ) 
    [:] [slice_1296_inst] (RX 72 72) (tlast_1297)  $flowthrough
    $delay slice_1296_inst 0
    // 	$volatile tdata := ( $slice RX 71 8 )  $buffering 1
    //  file nic.linked.aa, line 526
    // ( $slice RX 71 8 ) 
    [:] [slice_1300_inst] (RX 71 8) (tdata_1301)  $flowthrough
    $delay slice_1300_inst 0
    // 	$volatile tkeep := ( $slice RX 7 0 )  $buffering 1
    //  file nic.linked.aa, line 527
    // ( $slice RX 7 0 ) 
    [:] [slice_1304_inst] (RX 7 0) (tkeep_1305)  $flowthrough
    $delay slice_1304_inst 0
    // 	$volatile last_word := (tlast == 1 ) $buffering 1
    //  file nic.linked.aa, line 528
    // (tlast == 1 )
    ==[EQ_u1_u1_1309_inst] (tlast_1297 konst_1308_wire_constant) (last_word_1310)   $flowthrough 
    $delay EQ_u1_u1_1309_inst 0
    // 	nLSTATE := ((( $mux (LSTATE == S0) S1  _b0  )  | ( $mux (LSTATE == S1) S2  _b0  ) ) | (( $mux ((LSTATE == S2) & ( ~ last_word )) S2  _b0  )  | ( $mux ((LSTATE == S2) & last_word) S0  _b0  ) )) $buffering 1
    //  file nic.linked.aa, line 529
    // (LSTATE == S0)
    ==[EQ_u2_u1_1314_inst] (LSTATE R_S0_1313_wire_constant) (EQ_u2_u1_1314_wire)   $flowthrough 
    $delay EQ_u2_u1_1314_inst 0
    // ( $mux (LSTATE == S0) S1  _b0  ) 
    ? [MUX_1317_inst] (EQ_u2_u1_1314_wire R_S1_1315_wire_constant konst_1316_wire_constant) (MUX_1317_wire)  $flowthrough
    // (LSTATE == S1)
    ==[EQ_u2_u1_1320_inst] (LSTATE R_S1_1319_wire_constant) (EQ_u2_u1_1320_wire)   $flowthrough 
    $delay EQ_u2_u1_1320_inst 0
    // ( $mux (LSTATE == S1) S2  _b0  ) 
    ? [MUX_1323_inst] (EQ_u2_u1_1320_wire R_S2_1321_wire_constant konst_1322_wire_constant) (MUX_1323_wire)  $flowthrough
    // (( $mux (LSTATE == S0) S1  _b0  )  | ( $mux (LSTATE == S1) S2  _b0  ) )
    |[OR_u2_u2_1324_inst] (MUX_1317_wire MUX_1323_wire) (OR_u2_u2_1324_wire)   $flowthrough 
    $delay OR_u2_u2_1324_inst 0
    // (LSTATE == S2)
    ==[EQ_u2_u1_1327_inst] (LSTATE R_S2_1326_wire_constant) (EQ_u2_u1_1327_wire)   $flowthrough 
    $delay EQ_u2_u1_1327_inst 0
    // ( ~ last_word )
    ~ [NOT_u1_u1_1329_inst] (last_word_1310) (NOT_u1_u1_1329_wire)   $flowthrough
    $delay NOT_u1_u1_1329_inst 0
    // ((LSTATE == S2) & ( ~ last_word ))
    &[AND_u1_u1_1330_inst] (EQ_u2_u1_1327_wire NOT_u1_u1_1329_wire) (AND_u1_u1_1330_wire)   $flowthrough 
    $delay AND_u1_u1_1330_inst 0
    // ( $mux ((LSTATE == S2) & ( ~ last_word )) S2  _b0  ) 
    ? [MUX_1333_inst] (AND_u1_u1_1330_wire R_S2_1331_wire_constant konst_1332_wire_constant) (MUX_1333_wire)  $flowthrough
    // (LSTATE == S2)
    ==[EQ_u2_u1_1336_inst] (LSTATE R_S2_1335_wire_constant) (EQ_u2_u1_1336_wire)   $flowthrough 
    $delay EQ_u2_u1_1336_inst 0
    // ((LSTATE == S2) & last_word)
    &[AND_u1_u1_1338_inst] (EQ_u2_u1_1336_wire last_word_1310) (AND_u1_u1_1338_wire)   $flowthrough 
    $delay AND_u1_u1_1338_inst 0
    // ( $mux ((LSTATE == S2) & last_word) S0  _b0  ) 
    ? [MUX_1341_inst] (AND_u1_u1_1338_wire R_S0_1339_wire_constant konst_1340_wire_constant) (MUX_1341_wire)  $flowthrough
    // (( $mux ((LSTATE == S2) & ( ~ last_word )) S2  _b0  )  | ( $mux ((LSTATE == S2) & last_word) S0  _b0  ) )
    |[OR_u2_u2_1342_inst] (MUX_1333_wire MUX_1341_wire) (OR_u2_u2_1342_wire)   $flowthrough 
    $delay OR_u2_u2_1342_inst 0
    // ((( $mux (LSTATE == S0) S1  _b0  )  | ( $mux (LSTATE == S1) S2  _b0  ) ) | (( $mux ((LSTATE == S2) & ( ~ last_word )) S2  _b0  )  | ( $mux ((LSTATE == S2) & last_word) S0  _b0  ) ))
    |[OR_u2_u2_1343_inst] (OR_u2_u2_1324_wire OR_u2_u2_1342_wire) (nLSTATE)   
    $buffering  $out OR_u2_u2_1343_inst nLSTATE 1
    $delay OR_u2_u2_1343_inst 1
  }
  // end data-path
  // Volatile module.. no links.
}
$module [nicRxFromMacDaemon] 
{
  // pipe-declarations for block %nicRxFromMacDaemon
  //  file nic.linked.aa, line 531
  // pipe-declarations for block %nicRxFromMacDaemon%loop
  //  file nic.linked.aa, line 536
  // pipe-declarations for block %nicRxFromMacDaemon%loop%
  //  file nic.linked.aa, line 539
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    <>[branch_block_stmt_1347] // Branch Block  file nic.linked.aa, line 536
    {
      $P [branch_block_stmt_1347__entry__]
      branch_block_stmt_1347__entry__ <-| ($entry)
      $P [branch_block_stmt_1347__exit__]
      branch_block_stmt_1347__exit__ |-> ($exit)
      $P [merge_stmt_1349__entry__] 
      $P [merge_stmt_1349__exit__] 
      $P [if_stmt_1350__entry__] 
      $P [if_stmt_1350__exit__] 
      $P [do_while_stmt_1358__entry__] 
      $P [do_while_stmt_1358__exit__] 
      $P [disable_loopback]
      // if-statement  
      //  file nic.linked.aa, line 0
      ;;[if_stmt_1350_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      if_stmt_1350__entry__ |-> (if_stmt_1350_dead_link)
      if_stmt_1350__exit__ <-| (if_stmt_1350_dead_link)
      ;;[if_stmt_1350_eval_test] 
      {
        // test expression evaluate and trigger branch 
        // ( ~ (CONTROL_REGISTER [] 0 ) )
        ;;[NOT_u1_u1_1354] 
        {
          // unary expression 
          // (CONTROL_REGISTER [] 0 )
          ;;[BITSEL_u32_u1_1353] 
          {
            // binary expression 
            ||[BITSEL_u32_u1_1353_inputs] 
            {
              // CONTROL_REGISTER
              ;;[RPIPE_CONTROL_REGISTER_1351] 
              {
                // pipe read
                ;;[Sample] 
                {
                  $T [req] $T [ack] 
                }
                ;;[Update] 
                {
                  $T [req] $T [ack] 
                }
              }
            }
            // flow-through
            ;;[SplitProtocol] 
            {
              ;;[Sample] 
              {
                $T [rr] $T [ra]
              }
              ;;[Update] 
              {
                $T [cr] $T [ca]
              }
            }
          }
          // flow-through
          ;;[SplitProtocol] 
          {
            ;;[Sample] 
            {
              $T [rr] $T [ra]
            }
            ;;[Update] 
            {
              $T [cr] $T [ca]
            }
          }
        }
        $T [branch_req] 
      }
      if_stmt_1350__entry__ |-> (if_stmt_1350_eval_test)
      $P [NOT_u1_u1_1354_place]
      NOT_u1_u1_1354_place <-| (if_stmt_1350_eval_test)
      ;;[if_stmt_1350_if_link] 
      {
        $T [if_choice_transition] 
      }
      ;;[if_stmt_1350_else_link] 
      {
        $T [else_choice_transition] 
      }
      NOT_u1_u1_1354_place |-> (if_stmt_1350_if_link if_stmt_1350_else_link)
      $P [not_enabled_yet_loopback]
      not_enabled_yet_loopback <-| (if_stmt_1350_if_link)
      if_stmt_1350__exit__ <-| (if_stmt_1350_else_link)
      // do-while-statement  
      //  file nic.linked.aa, line 545
      <o> [do_while_stmt_1358]  $depth 7 $buffering 1 
      {
        $P[do_while_stmt_1358__entry__] 
        $P[do_while_stmt_1358__exit__] 
        $P[loop_back] 
        $P[condition_done] 
        $P[loop_body_done] 
        $pipeline [do_while_stmt_1358_loop_body] 
        {
          // Pipelined!
          $T[back_edge_to_loop_body] 
          $T[first_time_through_loop_body] 
          $T[loop_body_start] 
          $T[condition_evaluated] 
          $transitionmerge [entry_tmerge] (back_edge_to_loop_body first_time_through_loop_body) (loop_body_start)
          $entry <-& (loop_body_start)
          $T[aggregated_phi_sample_req] 
          $T[aggregated_phi_sample_ack] 
          $T[aggregated_phi_update_req] 
          $T[aggregated_phi_update_ack] 
          // do not loop-back unless all phi's have used up their triggering tokens.
          condition_evaluated <-& (aggregated_phi_update_ack)
          aggregated_phi_sample_req o<-& (aggregated_phi_update_ack 0)
          // start:  PHI statement phi_stmt_1360
          // 			$phi LSTATE := 			  S0 $on   $entry 			  nLSTATE $on   $loopback 
          // type of target is $uint<2>
          $T[phi_stmt_1360_sample_start_] 
          $T[phi_stmt_1360_sample_completed_] 
          $T[phi_stmt_1360_update_start_] 
          $T[phi_stmt_1360_update_completed_] 
          $T[phi_stmt_1360_sample_start__ps] 
          phi_stmt_1360_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_1360_sample_completed__ps] 
          phi_stmt_1360_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_1360_update_start__ps] 
          phi_stmt_1360_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_1360_update_completed__ps] 
          phi_stmt_1360_update_completed_ <-& (phi_stmt_1360_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_1360_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_1360_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_1360_update_start_)
          $T[phi_stmt_1360_loopback_trigger] 
          phi_stmt_1360_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_1360_loopback_sample_req] 
          $T[phi_stmt_1360_loopback_sample_req_ps] 
          phi_stmt_1360_loopback_sample_req <-& (phi_stmt_1360_loopback_sample_req_ps)
          phi_stmt_1360_loopback_sample_req &-> ($null)
          $T[phi_stmt_1360_entry_trigger] 
          phi_stmt_1360_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_1360_entry_sample_req] 
          $T[phi_stmt_1360_entry_sample_req_ps] 
          phi_stmt_1360_entry_sample_req <-& (phi_stmt_1360_entry_sample_req_ps)
          phi_stmt_1360_entry_sample_req &-> ($null)
          phi_stmt_1360_update_start_ o<-& (phi_stmt_1360_update_completed_ 0)
          phi_stmt_1360_sample_start_ o<-& (phi_stmt_1360_sample_completed_ 1)
          $T[phi_stmt_1360_merged_reqs] 
          $T[phi_stmt_1360_phi_mux_ack] 
          $T[phi_stmt_1360_phi_mux_ack_ps] 
          phi_stmt_1360_phi_mux_ack_ps <-& (phi_stmt_1360_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_1360_update_completed_)
          $T[R_S0_1362_sample_start__ps] 
          $T[R_S0_1362_sample_completed__ps] 
          $T[R_S0_1362_update_start__ps] 
          $T[R_S0_1362_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[R_S0_1362_sample_start_] 
          $T[R_S0_1362_sample_completed_] 
          R_S0_1362_sample_completed_ <-& (R_S0_1362_sample_start_)
          $T[R_S0_1362_update_start_] 
          $T [R_S0_1362_update_completed_] $delay 
          R_S0_1362_update_completed_ <-& (R_S0_1362_update_start_)
          // Phi start dependency for implicit/constant alternative.
          R_S0_1362_sample_start_ <-& (R_S0_1362_sample_start__ps)
          R_S0_1362_update_start_ <-& (R_S0_1362_update_start__ps)
          // Phi complete dependency.
          R_S0_1362_sample_completed__ps <-& (R_S0_1362_sample_completed_)
          R_S0_1362_update_completed__ps <-& (R_S0_1362_update_completed_)
          $T[R_nLSTATE_1363_sample_start__ps] 
          $T[R_nLSTATE_1363_sample_completed__ps] 
          $T[R_nLSTATE_1363_update_start__ps] 
          $T[R_nLSTATE_1363_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_nLSTATE_1363_sample_start_] 
          $T[R_nLSTATE_1363_sample_completed_] 
          $T[R_nLSTATE_1363_update_start_] 
          $T[R_nLSTATE_1363_update_completed_] 
          ;;[R_nLSTATE_1363_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_nLSTATE_1363_sample_start_ &-> (R_nLSTATE_1363_Sample)
          R_nLSTATE_1363_sample_completed_ <-& (R_nLSTATE_1363_Sample)
          ;;[R_nLSTATE_1363_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_nLSTATE_1363_update_start_ &-> (R_nLSTATE_1363_Update)
          R_nLSTATE_1363_update_completed_ <-& (R_nLSTATE_1363_Update)
          // RAW reenables for nLSTATE
          // Phi start dependency for implicit/constant alternative.
          R_nLSTATE_1363_sample_start_ <-& (R_nLSTATE_1363_sample_start__ps)
          R_nLSTATE_1363_update_start_ <-& (R_nLSTATE_1363_update_start__ps)
          // Phi complete dependency.
          R_nLSTATE_1363_sample_completed__ps <-& (R_nLSTATE_1363_sample_completed_)
          R_nLSTATE_1363_update_completed__ps <-& (R_nLSTATE_1363_update_completed_)
          $phisequencer [ phi_stmt_1360_phi_seq] : 
          phi_stmt_1360_entry_trigger R_S0_1362_sample_start__ps R_S0_1362_sample_completed__ps R_S0_1362_update_start__ps R_S0_1362_update_completed__ps phi_stmt_1360_loopback_trigger R_nLSTATE_1363_sample_start__ps R_nLSTATE_1363_sample_completed__ps R_nLSTATE_1363_update_start__ps R_nLSTATE_1363_update_completed__ps :
          phi_stmt_1360_sample_start__ps phi_stmt_1360_sample_completed__ps phi_stmt_1360_update_start__ps phi_stmt_1360_update_completed__ps :
          phi_stmt_1360_entry_sample_req_ps phi_stmt_1360_loopback_sample_req_ps : 
          phi_stmt_1360_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_1360
          // start:  single source PHI statement phi_stmt_1364
          // 			$phi RX := 			  mac_to_nic_data $on   $entry ,   $loopback 
          // type of target is $uint<73>
          $T[phi_stmt_1364_sample_start_] 
          $T[phi_stmt_1364_sample_completed_] 
          $T[phi_stmt_1364_update_start_] 
          $T[phi_stmt_1364_update_completed_] 
          aggregated_phi_sample_req <-& (phi_stmt_1364_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_1364_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_1364_update_start_)
          // non-implicit source expression in single-source phi
          // mac_to_nic_data
          $T[RPIPE_mac_to_nic_data_1366_sample_start_] 
          $T[RPIPE_mac_to_nic_data_1366_sample_completed_] 
          $T[RPIPE_mac_to_nic_data_1366_update_start_] 
          $T[RPIPE_mac_to_nic_data_1366_update_completed_] 
          ;;[RPIPE_mac_to_nic_data_1366_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_mac_to_nic_data_1366_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_mac_to_nic_data_1366_sample_start_ &-> (RPIPE_mac_to_nic_data_1366_Sample)
          RPIPE_mac_to_nic_data_1366_sample_completed_ <-& (RPIPE_mac_to_nic_data_1366_Sample)
          RPIPE_mac_to_nic_data_1366_update_start_ <-& (RPIPE_mac_to_nic_data_1366_sample_completed_)
          RPIPE_mac_to_nic_data_1366_update_start_ &-> (RPIPE_mac_to_nic_data_1366_Update)
          RPIPE_mac_to_nic_data_1366_update_completed_ <-& (RPIPE_mac_to_nic_data_1366_Update)
          RPIPE_mac_to_nic_data_1366_sample_start_ o<-& (RPIPE_mac_to_nic_data_1366_update_completed_ 0)
          // RAW reenables for mac_to_nic_data
          // producer  and  consumer are both determined by PHI statements.
          aggregated_phi_sample_req &-> (RPIPE_mac_to_nic_data_1366_sample_start_)
          aggregated_phi_sample_ack <-& (RPIPE_mac_to_nic_data_1366_sample_completed_)
          aggregated_phi_update_req &-> (RPIPE_mac_to_nic_data_1366_update_start_)
          phi_stmt_1364_update_completed_ <-& (RPIPE_mac_to_nic_data_1366_update_completed_)
          aggregated_phi_update_ack <-& (phi_stmt_1364_update_completed_)
          // done: PHI Statement phi_stmt_1364
          // start: WAR dependencies for nLSTATE
          // WAR dependency: Read: nLSTATE before Write:  $volatile 			$call nextLSTATE (RX LSTATE ) (nLSTATE ) 
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for nLSTATE
          // start:  $volatile 			$call nextLSTATE (RX LSTATE ) (nLSTATE ) 
          //  file nic.linked.aa, line 554
          // volatile! 
          // Call input argument 0
          // RX
          // Call input argument 1
          // LSTATE
          // Call output argument 0
          // (as target) nLSTATE
          // start: WAR dependencies for nLSTATE
          // WAR dependency: Read: nLSTATE before Write:  $volatile 			$call nextLSTATE (RX LSTATE ) (nLSTATE ) 
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for nLSTATE
          // end:  $volatile 			$call nextLSTATE (RX LSTATE ) (nLSTATE ) 
          // start: WAR dependencies for write_to_header
          // done: WAR dependencies for write_to_header
          // start:  			$volatile write_to_header := ((LSTATE == S0) | (LSTATE == S1)) $buffering 1
          //  file nic.linked.aa, line 555
          // volatile! 
          // Source expression
          // ((LSTATE == S0) | (LSTATE == S1))
          // (LSTATE == S0)
          // LSTATE
          // (LSTATE == S1)
          // LSTATE
          // Target expression
          // (as target) write_to_header
          // start: WAR dependencies for write_to_header
          // done: WAR dependencies for write_to_header
          // end:  			$volatile write_to_header := ((LSTATE == S0) | (LSTATE == S1)) $buffering 1
          // start:  			$guard (write_to_header) nic_rx_to_header := ( $mux (LSTATE == S1) (( $slice RX 72 8 )  && HEADER_TKEEP)  RX )  $buffering 1// bits of buffering = 73. 
          //  file nic.linked.aa, line 556
          // Guard expression 
          // write_to_header
          // Source expression
          // ( $mux (LSTATE == S1) (( $slice RX 72 8 )  && HEADER_TKEEP)  RX ) 
          $T[MUX_1394_sample_start_] 
          $T[MUX_1394_sample_completed_] 
          $T[MUX_1394_update_start_] 
          $T[MUX_1394_update_completed_] 
          // Guard dependency for expression MUX_1394 with guard R_write_to_header_1384
          MUX_1394_sample_start_ <-& (phi_stmt_1360_update_completed_)
          // RAW reenables for write_to_header
          phi_stmt_1360_update_start_ o<-& (MUX_1394_sample_completed_ 0)
          // (LSTATE == S1)
          // LSTATE
          // (( $slice RX 72 8 )  && HEADER_TKEEP)
          // ( $slice RX 72 8 ) 
          // RX
          // RX
          // start: Forward dependencies from (LSTATE == S1) to transition MUX_1394_sample_start_
          MUX_1394_sample_start_ <-& (phi_stmt_1360_update_completed_)
          // done: Forward dependencies from (LSTATE == S1) to transition MUX_1394_sample_start_
          // start: Forward dependencies from (( $slice RX 72 8 )  && HEADER_TKEEP) to transition MUX_1394_sample_start_
          MUX_1394_sample_start_ <-& (phi_stmt_1364_update_completed_)
          // done: Forward dependencies from (( $slice RX 72 8 )  && HEADER_TKEEP) to transition MUX_1394_sample_start_
          // start: Forward dependencies from RX to transition MUX_1394_sample_start_
          MUX_1394_sample_start_ <-& (phi_stmt_1364_update_completed_)
          // done: Forward dependencies from RX to transition MUX_1394_sample_start_
          ;;[MUX_1394_start] 
          {
            // ternary expression: 
            $T [req] $T [ack] // sample req/ack
          }
          ;;[MUX_1394_complete] 
          {
            // ternary expression: 
            $T [req] $T [ack] // update req/ack
          }
          MUX_1394_sample_start_ &-> (MUX_1394_start)
          MUX_1394_sample_completed_ <-& (MUX_1394_start)
          MUX_1394_sample_completed_ &-> ($null)
          MUX_1394_update_start_ &-> (MUX_1394_complete)
          MUX_1394_update_completed_ <-& (MUX_1394_complete)
          // RAW reenables for (LSTATE == S1)
          phi_stmt_1360_update_start_ o<-& (MUX_1394_sample_completed_ 0)
          // RAW reenables for (( $slice RX 72 8 )  && HEADER_TKEEP)
          phi_stmt_1364_update_start_ o<-& (MUX_1394_sample_completed_ 0)
          // RAW reenables for RX
          phi_stmt_1364_update_start_ o<-& (MUX_1394_sample_completed_ 0)
          // self-release: 
          MUX_1394_sample_start_ o<-& (MUX_1394_sample_completed_ 1)
          $null &-> (MUX_1394_update_start_)
          MUX_1394_update_start_ o<-& (MUX_1394_update_completed_ 0)
          // Target expression
          // (as target) nic_rx_to_header
          $T[WPIPE_nic_rx_to_header_1385_sample_start_] 
          $T[WPIPE_nic_rx_to_header_1385_sample_completed_] 
          $T[WPIPE_nic_rx_to_header_1385_update_start_] 
          $T[WPIPE_nic_rx_to_header_1385_update_completed_] 
          // Guard dependency for expression WPIPE_nic_rx_to_header_1385 with guard R_write_to_header_1384
          WPIPE_nic_rx_to_header_1385_sample_start_ <-& (phi_stmt_1360_update_completed_)
          // RAW reenables for write_to_header
          phi_stmt_1360_update_start_ o<-& (WPIPE_nic_rx_to_header_1385_sample_completed_ 0)
          ;;[WPIPE_nic_rx_to_header_1385_Sample] 
          {
            // pipe write sample-start nic_rx_to_header
            $T [req] $T [ack] 
          }
          ;;[WPIPE_nic_rx_to_header_1385_Update] 
          {
            // pipe write update (complete) nic_rx_to_header
            $T [req] $T [ack] 
          }
          WPIPE_nic_rx_to_header_1385_sample_start_ &-> (WPIPE_nic_rx_to_header_1385_Sample)
          WPIPE_nic_rx_to_header_1385_sample_completed_ <-& (WPIPE_nic_rx_to_header_1385_Sample)
          WPIPE_nic_rx_to_header_1385_update_start_ <-& (WPIPE_nic_rx_to_header_1385_sample_completed_)
          WPIPE_nic_rx_to_header_1385_update_start_ &-> (WPIPE_nic_rx_to_header_1385_Update)
          WPIPE_nic_rx_to_header_1385_update_completed_ <-& (WPIPE_nic_rx_to_header_1385_Update)
          WPIPE_nic_rx_to_header_1385_sample_start_ o<-& (WPIPE_nic_rx_to_header_1385_update_completed_ 0)
          // start: Forward dependencies from ( $mux (LSTATE == S1) (( $slice RX 72 8 )  && HEADER_TKEEP)  RX )  to transition WPIPE_nic_rx_to_header_1385_sample_start_
          WPIPE_nic_rx_to_header_1385_sample_start_ <-& (MUX_1394_update_completed_)
          // done: Forward dependencies from ( $mux (LSTATE == S1) (( $slice RX 72 8 )  && HEADER_TKEEP)  RX )  to transition WPIPE_nic_rx_to_header_1385_sample_start_
          // RAW reenables for ( $mux (LSTATE == S1) (( $slice RX 72 8 )  && HEADER_TKEEP)  RX ) 
          MUX_1394_update_start_ o<-& (WPIPE_nic_rx_to_header_1385_sample_completed_ 0)
          // end:  			$guard (write_to_header) nic_rx_to_header := ( $mux (LSTATE == S1) (( $slice RX 72 8 )  && HEADER_TKEEP)  RX )  $buffering 1// bits of buffering = 73. 
          // start:  			nic_rx_to_packet := RX $buffering 1// bits of buffering = 73. 
          //  file nic.linked.aa, line 557
          // Source expression
          // RX
          // Target expression
          // (as target) nic_rx_to_packet
          $T[WPIPE_nic_rx_to_packet_1396_sample_start_] 
          $T[WPIPE_nic_rx_to_packet_1396_sample_completed_] 
          $T[WPIPE_nic_rx_to_packet_1396_update_start_] 
          $T[WPIPE_nic_rx_to_packet_1396_update_completed_] 
          ;;[WPIPE_nic_rx_to_packet_1396_Sample] 
          {
            // pipe write sample-start nic_rx_to_packet
            $T [req] $T [ack] 
          }
          ;;[WPIPE_nic_rx_to_packet_1396_Update] 
          {
            // pipe write update (complete) nic_rx_to_packet
            $T [req] $T [ack] 
          }
          WPIPE_nic_rx_to_packet_1396_sample_start_ &-> (WPIPE_nic_rx_to_packet_1396_Sample)
          WPIPE_nic_rx_to_packet_1396_sample_completed_ <-& (WPIPE_nic_rx_to_packet_1396_Sample)
          WPIPE_nic_rx_to_packet_1396_update_start_ <-& (WPIPE_nic_rx_to_packet_1396_sample_completed_)
          WPIPE_nic_rx_to_packet_1396_update_start_ &-> (WPIPE_nic_rx_to_packet_1396_Update)
          WPIPE_nic_rx_to_packet_1396_update_completed_ <-& (WPIPE_nic_rx_to_packet_1396_Update)
          WPIPE_nic_rx_to_packet_1396_sample_start_ o<-& (WPIPE_nic_rx_to_packet_1396_update_completed_ 0)
          // start: Forward dependencies from RX to transition WPIPE_nic_rx_to_packet_1396_sample_start_
          WPIPE_nic_rx_to_packet_1396_sample_start_ <-& (phi_stmt_1364_update_completed_)
          // done: Forward dependencies from RX to transition WPIPE_nic_rx_to_packet_1396_sample_start_
          // RAW reenables for RX
          phi_stmt_1364_update_start_ o<-& (WPIPE_nic_rx_to_packet_1396_sample_completed_ 0)
          // end:  			nic_rx_to_packet := RX $buffering 1// bits of buffering = 73. 
          // (CONTROL_REGISTER [] 0 )
          // CONTROL_REGISTER
          $T [loop_body_delay_to_condition_start] $delay
          loop_body_start &-> (loop_body_delay_to_condition_start)
          loop_body_delay_to_condition_start &-> (condition_evaluated)
          // start: Forward dependencies from (CONTROL_REGISTER [] 0 ) to transition condition_evaluated
          // non-constant expression which depends only on signals/constants?
          // done: Forward dependencies from (CONTROL_REGISTER [] 0 ) to transition condition_evaluated
          condition_evaluated &-> ($null)
          // load-store dependencies..
          // pipe read/write dependencies for pipe mac_to_nic_data
          // read-dependencies for pipe mac_to_nic_data
          // write-dependencies for pipe mac_to_nic_data
          // signal write dependencies for mac_to_nic_data
          // pipe read/write dependencies for pipe nic_rx_to_header
          // read-dependencies for pipe nic_rx_to_header
          // write-dependencies for pipe nic_rx_to_header
          // signal write dependencies for nic_rx_to_header
          // pipe read/write dependencies for pipe nic_rx_to_packet
          // read-dependencies for pipe nic_rx_to_packet
          // write-dependencies for pipe nic_rx_to_packet
          // signal write dependencies for nic_rx_to_packet
        }
        ( first_time_through_loop_body  back_edge_to_loop_body) 
        ( condition_evaluated )
        ;; [loop_exit] 
        {
          $T [ack] 
        }
        ;; [loop_taken] 
        {
          $T [ack] 
        }
        do_while_stmt_1358__entry__ <-| ($entry)
        loop_body_done <-| ( do_while_stmt_1358_loop_body ) 
        condition_done |-> (loop_exit loop_taken)
        do_while_stmt_1358__exit__ |-> ($exit)
        $bind condition_done <= do_while_stmt_1358_loop_body : condition_evaluated
        $bind do_while_stmt_1358__entry__  => do_while_stmt_1358_loop_body : first_time_through_loop_body 
        $bind loop_back  => do_while_stmt_1358_loop_body : back_edge_to_loop_body 
        $terminate (loop_exit loop_taken loop_body_done) (loop_back do_while_stmt_1358__exit__)
      }
      do_while_stmt_1358__entry__ |-> (do_while_stmt_1358)
      do_while_stmt_1358__exit__ <-| (do_while_stmt_1358)
      // control-path for merge  
      //  file nic.linked.aa, line 539
      ;;[merge_stmt_1349_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      merge_stmt_1349__entry__ |-> (merge_stmt_1349_dead_link)
      merge_stmt_1349__exit__ <-| (merge_stmt_1349_dead_link)
      //---------------------   merge statement  file nic.linked.aa, line 539  --------------------------
      ||[merge_stmt_1349__entry___PhiReq] 
      {
        // no phi statements in merge..
      }
      merge_stmt_1349__entry__ |-> (merge_stmt_1349__entry___PhiReq)
      ||[disable_loopback_PhiReq] 
      {
        // no phi statements in merge..
      }
      disable_loopback |-> (disable_loopback_PhiReq)
      ||[not_enabled_yet_loopback_PhiReq] 
      {
        // no phi statements in merge..
      }
      not_enabled_yet_loopback |-> (not_enabled_yet_loopback_PhiReq)
      $P [merge_stmt_1349_PhiReqMerge] 
      merge_stmt_1349_PhiReqMerge <-| ( merge_stmt_1349__entry___PhiReq  disable_loopback_PhiReq  not_enabled_yet_loopback_PhiReq )
      ||[merge_stmt_1349_PhiAck] 
      {
        $T [dummy] 
      }
      merge_stmt_1349_PhiReqMerge |-> (merge_stmt_1349_PhiAck)
      merge_stmt_1349__exit__  <-| (merge_stmt_1349_PhiAck)
      //---------------------  end of merge statement  file nic.linked.aa, line 539  --------------------------
      merge_stmt_1349__entry__ <-| (branch_block_stmt_1347__entry__)
      if_stmt_1350__entry__ <-| (merge_stmt_1349__exit__)
      do_while_stmt_1358__entry__ <-| (if_stmt_1350__exit__)
      disable_loopback <-| (do_while_stmt_1358__exit__)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %nicRxFromMacDaemon%loop%
    //  file nic.linked.aa, line 539
    // constant-object-declarations for block %nicRxFromMacDaemon%loop%
    //  file nic.linked.aa, line 547
    // constant-object-declarations for block %nicRxFromMacDaemon%loop
    //  file nic.linked.aa, line 536
    // constant-object-declarations for block %nicRxFromMacDaemon
    //  file nic.linked.aa, line 531
    // constant-declarations for block %nicRxFromMacDaemon%loop
    //  file nic.linked.aa, line 536
    // constant-declarations for block %nicRxFromMacDaemon%loop%
    //  file nic.linked.aa, line 539
    // if-statement  
    //  file nic.linked.aa, line 0
    // 0 
    $constant $W[konst_1352_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // do-while statement  
    //  file nic.linked.aa, line 545
    // 0 
    $constant $W[konst_1404_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // constant-declarations for block %nicRxFromMacDaemon%loop%
    //  file nic.linked.aa, line 547
    // constant-declarations for phi:  			$phi LSTATE := 			  S0 $on   $entry 			  nLSTATE $on   $loopback 
    // type of target is $uint<2>
    //  file nic.linked.aa, line 548
    // S0
    $constant $W[R_S0_1362_wire_constant] : $int<2> := _b00// 0
    // constant-declarations for phi:  			$phi RX := 			  mac_to_nic_data $on   $entry ,   $loopback 
    // type of target is $uint<73>
    //  file nic.linked.aa, line 550
    //  $volatile 			$call nextLSTATE (RX LSTATE ) (nLSTATE ) 
    //  file nic.linked.aa, line 554
    // S0
    $constant $W[R_S0_1377_wire_constant] : $int<2> := _b00// 0
    // S1
    $constant $W[R_S1_1380_wire_constant] : $int<2> := _b01// 1
    // ( $mux (LSTATE == S1) (( $slice RX 72 8 )  && HEADER_TKEEP)  RX ) 
    // S1
    $constant $W[R_S1_1387_wire_constant] : $int<2> := _b01// 1
    // HEADER_TKEEP
    $constant $W[R_HEADER_TKEEP_1391_wire_constant] : $int<8> := _b00111111// 63
    // block %nicRxFromMacDaemon%loop
    //  file nic.linked.aa, line 536
    // if statement  
    //  file nic.linked.aa, line 0
    // CONTROL_REGISTER
    $W[RPIPE_CONTROL_REGISTER_1351_wire] : $int<32>
    // (CONTROL_REGISTER [] 0 )
    $intermediate $W[BITSEL_u32_u1_1353_wire] : $int<1>
    // ( ~ (CONTROL_REGISTER [] 0 ) )
    $intermediate $W[NOT_u1_u1_1354_wire] : $int<1>
    // do-while statement  
    //  file nic.linked.aa, line 545
    // CONTROL_REGISTER
    $W[RPIPE_CONTROL_REGISTER_1403_wire] : $int<32>
    // (CONTROL_REGISTER [] 0 )
    $intermediate $W[BITSEL_u32_u1_1405_wire] : $int<1>
    // merge-statement  
    //  file nic.linked.aa, line 547
    // 			$phi LSTATE := 			  S0 $on   $entry 			  nLSTATE $on   $loopback 
    // type of target is $uint<2>
    //  file nic.linked.aa, line 548
    $W[nLSTATE_1374_1363_buffered] : $int<2>
    // LSTATE
    $W[LSTATE_1360] : $int<2>
    // 			$phi RX := 			  mac_to_nic_data $on   $entry ,   $loopback 
    // type of target is $uint<73>
    //  file nic.linked.aa, line 550
    // mac_to_nic_data
    $W[RPIPE_mac_to_nic_data_1366_wire] : $int<73>
    // RX
    $W[RX_1364] : $int<73>
    //  $volatile 			$call nextLSTATE (RX LSTATE ) (nLSTATE ) 
    //  file nic.linked.aa, line 554
    // nLSTATE
    $W[nLSTATE_1374] : $int<2>
    // 			$volatile write_to_header := ((LSTATE == S0) | (LSTATE == S1)) $buffering 1
    //  file nic.linked.aa, line 555
    // (LSTATE == S0)
    $intermediate $W[EQ_u2_u1_1378_wire] : $int<1>
    // (LSTATE == S1)
    $intermediate $W[EQ_u2_u1_1381_wire] : $int<1>
    // write_to_header
    $W[write_to_header_1383] : $int<1>
    // 			$guard (write_to_header) nic_rx_to_header := ( $mux (LSTATE == S1) (( $slice RX 72 8 )  && HEADER_TKEEP)  RX )  $buffering 1// bits of buffering = 73. 
    //  file nic.linked.aa, line 556
    // (LSTATE == S1)
    $intermediate $W[EQ_u2_u1_1388_wire] : $int<1>
    // ( $slice RX 72 8 ) 
    $intermediate $W[slice_1390_wire] : $int<65>
    // (( $slice RX 72 8 )  && HEADER_TKEEP)
    $intermediate $W[CONCAT_u65_u73_1392_wire] : $int<73>
    // ( $mux (LSTATE == S1) (( $slice RX 72 8 )  && HEADER_TKEEP)  RX ) 
    $intermediate $W[MUX_1394_wire] : $int<73>
    // nic_rx_to_header
    // 			nic_rx_to_packet := RX $buffering 1// bits of buffering = 73. 
    //  file nic.linked.aa, line 557
    // nic_rx_to_packet
    // datapath-instances for block %nicRxFromMacDaemon%loop
    //  file nic.linked.aa, line 536
    // datapath-instances for if  
    //  file nic.linked.aa, line 0
    // CONTROL_REGISTER
    $ioport $in [RPIPE_CONTROL_REGISTER_1351_inst] (CONTROL_REGISTER) (RPIPE_CONTROL_REGISTER_1351_wire) 
    $buffering $out RPIPE_CONTROL_REGISTER_1351_inst RPIPE_CONTROL_REGISTER_1351_wire 1
    // (CONTROL_REGISTER [] 0 )
    [][BITSEL_u32_u1_1353_inst] (RPIPE_CONTROL_REGISTER_1351_wire konst_1352_wire_constant) (BITSEL_u32_u1_1353_wire)   $flowthrough 
    $delay BITSEL_u32_u1_1353_inst 0
    // ( ~ (CONTROL_REGISTER [] 0 ) )
    ~ [NOT_u1_u1_1354_inst] (BITSEL_u32_u1_1353_wire) (NOT_u1_u1_1354_wire)   $flowthrough
    $delay NOT_u1_u1_1354_inst 0
    ==0? [if_stmt_1350_branch] (NOT_u1_u1_1354_wire)
    // datapath-instances for do-while  
    //  file nic.linked.aa, line 545
    // CONTROL_REGISTER
    $ioport $in [RPIPE_CONTROL_REGISTER_1403_inst] (CONTROL_REGISTER) (RPIPE_CONTROL_REGISTER_1403_wire)  $fullrate 
    $buffering $out RPIPE_CONTROL_REGISTER_1403_inst RPIPE_CONTROL_REGISTER_1403_wire 1
    // (CONTROL_REGISTER [] 0 )
    [][BITSEL_u32_u1_1405_inst] (RPIPE_CONTROL_REGISTER_1403_wire konst_1404_wire_constant) (BITSEL_u32_u1_1405_wire)   $flowthrough 
    $delay BITSEL_u32_u1_1405_inst 0
    ==0? [do_while_stmt_1358_branch] (BITSEL_u32_u1_1405_wire)
    $flowthrough
    // data-path instances for merge  
    //  file nic.linked.aa, line 547
    // 			$phi LSTATE := 			  S0 $on   $entry 			  nLSTATE $on   $loopback 
    // type of target is $uint<2>
    //  file nic.linked.aa, line 548
    # := [nLSTATE_1374_1363_buf] (nLSTATE_1374) (nLSTATE_1374_1363_buffered)     $fullrate
    $buffering $out nLSTATE_1374_1363_buf nLSTATE_1374_1363_buffered  1
    # $phi [phi_stmt_1360] (R_S0_1362_wire_constant nLSTATE_1374_1363_buffered) ( LSTATE_1360 ) $fullrate
    // $buffering  $out phi_stmt_1360 LSTATE_1360 2
    // 			$phi RX := 			  mac_to_nic_data $on   $entry ,   $loopback 
    // type of target is $uint<73>
    //  file nic.linked.aa, line 550
    // mac_to_nic_data
    $ioport $in [RPIPE_mac_to_nic_data_1366_inst] (mac_to_nic_data) (RPIPE_mac_to_nic_data_1366_wire)  $fullrate 
    $buffering $out RPIPE_mac_to_nic_data_1366_inst RPIPE_mac_to_nic_data_1366_wire 1
    # := [ssrc_phi_stmt_1364] (RPIPE_mac_to_nic_data_1366_wire) (RX_1364)    $flowthrough 
    //  $volatile 			$call nextLSTATE (RX LSTATE ) (nLSTATE ) 
    //  file nic.linked.aa, line 554
    $call [call_stmt_1374_call] $module nextLSTATE(RX_1364 LSTATE_1360) (nLSTATE_1374)   $flowthrough $fullrate
    // 			$volatile write_to_header := ((LSTATE == S0) | (LSTATE == S1)) $buffering 1
    //  file nic.linked.aa, line 555
    // (LSTATE == S0)
    ==[EQ_u2_u1_1378_inst] (LSTATE_1360 R_S0_1377_wire_constant) (EQ_u2_u1_1378_wire)   $flowthrough 
    $delay EQ_u2_u1_1378_inst 0
    // (LSTATE == S1)
    ==[EQ_u2_u1_1381_inst] (LSTATE_1360 R_S1_1380_wire_constant) (EQ_u2_u1_1381_wire)   $flowthrough 
    $delay EQ_u2_u1_1381_inst 0
    // ((LSTATE == S0) | (LSTATE == S1))
    |[OR_u1_u1_1382_inst] (EQ_u2_u1_1378_wire EQ_u2_u1_1381_wire) (write_to_header_1383)   $flowthrough 
    $delay OR_u1_u1_1382_inst 0
    // 			$guard (write_to_header) nic_rx_to_header := ( $mux (LSTATE == S1) (( $slice RX 72 8 )  && HEADER_TKEEP)  RX )  $buffering 1// bits of buffering = 73. 
    //  file nic.linked.aa, line 556
    // (LSTATE == S1)
    ==[EQ_u2_u1_1388_inst] (LSTATE_1360 R_S1_1387_wire_constant) (EQ_u2_u1_1388_wire) $guard ( write_to_header_1383 )   $flowthrough 
    $delay EQ_u2_u1_1388_inst 0
    // ( $slice RX 72 8 ) 
    [:] [slice_1390_inst] (RX_1364 72 8) (slice_1390_wire) $guard ( write_to_header_1383 )  $flowthrough
    $delay slice_1390_inst 0
    // (( $slice RX 72 8 )  && HEADER_TKEEP)
    &&[CONCAT_u65_u73_1392_inst] (slice_1390_wire R_HEADER_TKEEP_1391_wire_constant) (CONCAT_u65_u73_1392_wire) $guard ( write_to_header_1383 )   $flowthrough 
    $delay CONCAT_u65_u73_1392_inst 0
    // ( $mux (LSTATE == S1) (( $slice RX 72 8 )  && HEADER_TKEEP)  RX ) 
    ? [MUX_1394_inst] (EQ_u2_u1_1388_wire CONCAT_u65_u73_1392_wire RX_1364) (MUX_1394_wire) $guard ( write_to_header_1383 )  $fullrate
    $buffering  $out MUX_1394_inst MUX_1394_wire 1
    // nic_rx_to_header
    $ioport $out [WPIPE_nic_rx_to_header_1385_inst]  (MUX_1394_wire) (nic_rx_to_header) $guard ( write_to_header_1383 )  $fullrate 
    // 			nic_rx_to_packet := RX $buffering 1// bits of buffering = 73. 
    //  file nic.linked.aa, line 557
    // nic_rx_to_packet
    $ioport $out [WPIPE_nic_rx_to_packet_1396_inst]  (RX_1364) (nic_rx_to_packet)  $fullrate 
  }
  // end data-path
  // CP-DP links for merge  
  //  file nic.linked.aa, line 539
  // CP-DP links for if  
  //  file nic.linked.aa, line 0
  // CONTROL_REGISTER
  // (CONTROL_REGISTER [] 0 )
  // ( ~ (CONTROL_REGISTER [] 0 ) )
  if_stmt_1350_branch <=> (branch_block_stmt_1347/if_stmt_1350_eval_test/branch_req) (branch_block_stmt_1347/if_stmt_1350_else_link/else_choice_transition branch_block_stmt_1347/if_stmt_1350_if_link/if_choice_transition)
  // CP-DP links for do-while  do_while_stmt_1358
  //  file nic.linked.aa, line 545
  phi_stmt_1360 <=> (branch_block_stmt_1347/do_while_stmt_1358/do_while_stmt_1358_loop_body/phi_stmt_1360_entry_sample_req branch_block_stmt_1347/do_while_stmt_1358/do_while_stmt_1358_loop_body/phi_stmt_1360_loopback_sample_req) (branch_block_stmt_1347/do_while_stmt_1358/do_while_stmt_1358_loop_body/phi_stmt_1360_phi_mux_ack)
  nLSTATE_1374_1363_buf <=> (branch_block_stmt_1347/do_while_stmt_1358/do_while_stmt_1358_loop_body/R_nLSTATE_1363_Sample/req branch_block_stmt_1347/do_while_stmt_1358/do_while_stmt_1358_loop_body/R_nLSTATE_1363_Update/req) (branch_block_stmt_1347/do_while_stmt_1358/do_while_stmt_1358_loop_body/R_nLSTATE_1363_Sample/ack branch_block_stmt_1347/do_while_stmt_1358/do_while_stmt_1358_loop_body/R_nLSTATE_1363_Update/ack)
  // mac_to_nic_data
  RPIPE_mac_to_nic_data_1366_inst <=> (branch_block_stmt_1347/do_while_stmt_1358/do_while_stmt_1358_loop_body/RPIPE_mac_to_nic_data_1366_Sample/rr branch_block_stmt_1347/do_while_stmt_1358/do_while_stmt_1358_loop_body/RPIPE_mac_to_nic_data_1366_Update/cr) (branch_block_stmt_1347/do_while_stmt_1358/do_while_stmt_1358_loop_body/RPIPE_mac_to_nic_data_1366_Sample/ra branch_block_stmt_1347/do_while_stmt_1358/do_while_stmt_1358_loop_body/RPIPE_mac_to_nic_data_1366_Update/ca)
  //  $volatile 			$call nextLSTATE (RX LSTATE ) (nLSTATE ) 
  //  file nic.linked.aa, line 554
  // RX
  // LSTATE
  // 			$volatile write_to_header := ((LSTATE == S0) | (LSTATE == S1)) $buffering 1
  //  file nic.linked.aa, line 555
  // ((LSTATE == S0) | (LSTATE == S1))
  // (LSTATE == S0)
  // LSTATE
  // (LSTATE == S1)
  // LSTATE
  // 			$guard (write_to_header) nic_rx_to_header := ( $mux (LSTATE == S1) (( $slice RX 72 8 )  && HEADER_TKEEP)  RX )  $buffering 1// bits of buffering = 73. 
  //  file nic.linked.aa, line 556
  // (LSTATE == S1)
  // LSTATE
  // (( $slice RX 72 8 )  && HEADER_TKEEP)
  // RX
  // RX
  // ( $mux (LSTATE == S1) (( $slice RX 72 8 )  && HEADER_TKEEP)  RX ) 
  MUX_1394_inst <=> (branch_block_stmt_1347/do_while_stmt_1358/do_while_stmt_1358_loop_body/MUX_1394_start/req branch_block_stmt_1347/do_while_stmt_1358/do_while_stmt_1358_loop_body/MUX_1394_complete/req) (branch_block_stmt_1347/do_while_stmt_1358/do_while_stmt_1358_loop_body/MUX_1394_start/ack branch_block_stmt_1347/do_while_stmt_1358/do_while_stmt_1358_loop_body/MUX_1394_complete/ack)
  // nic_rx_to_header
  WPIPE_nic_rx_to_header_1385_inst <=> (branch_block_stmt_1347/do_while_stmt_1358/do_while_stmt_1358_loop_body/WPIPE_nic_rx_to_header_1385_Sample/req branch_block_stmt_1347/do_while_stmt_1358/do_while_stmt_1358_loop_body/WPIPE_nic_rx_to_header_1385_Update/req) (branch_block_stmt_1347/do_while_stmt_1358/do_while_stmt_1358_loop_body/WPIPE_nic_rx_to_header_1385_Sample/ack branch_block_stmt_1347/do_while_stmt_1358/do_while_stmt_1358_loop_body/WPIPE_nic_rx_to_header_1385_Update/ack)
  // 			nic_rx_to_packet := RX $buffering 1// bits of buffering = 73. 
  //  file nic.linked.aa, line 557
  // RX
  // nic_rx_to_packet
  WPIPE_nic_rx_to_packet_1396_inst <=> (branch_block_stmt_1347/do_while_stmt_1358/do_while_stmt_1358_loop_body/WPIPE_nic_rx_to_packet_1396_Sample/req branch_block_stmt_1347/do_while_stmt_1358/do_while_stmt_1358_loop_body/WPIPE_nic_rx_to_packet_1396_Update/req) (branch_block_stmt_1347/do_while_stmt_1358/do_while_stmt_1358_loop_body/WPIPE_nic_rx_to_packet_1396_Sample/ack branch_block_stmt_1347/do_while_stmt_1358/do_while_stmt_1358_loop_body/WPIPE_nic_rx_to_packet_1396_Update/ack)
  // (CONTROL_REGISTER [] 0 )
  // CONTROL_REGISTER
  do_while_stmt_1358_branch <=> (branch_block_stmt_1347/do_while_stmt_1358/do_while_stmt_1358_loop_body/condition_evaluated) (branch_block_stmt_1347/do_while_stmt_1358/loop_exit/ack branch_block_stmt_1347/do_while_stmt_1358/loop_taken/ack)
}
$module [nicToMacInterface] 
{
  // pipe-declarations for block %nicToMacInterface
  //  file nic.linked.aa, line 563
  // pipe-declarations for block %nicToMacInterface%loop
  //  file nic.linked.aa, line 568
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    <>[branch_block_stmt_1410] // Branch Block  file nic.linked.aa, line 568
    {
      $P [branch_block_stmt_1410__entry__]
      branch_block_stmt_1410__entry__ <-| ($entry)
      $P [branch_block_stmt_1410__exit__]
      branch_block_stmt_1410__exit__ |-> ($exit)
      $P [do_while_stmt_1411__entry__] 
      $P [do_while_stmt_1411__exit__] 
      // do-while-statement  
      //  file nic.linked.aa, line 570
      <o> [do_while_stmt_1411]  $depth 7 $buffering 1 
      {
        $P[do_while_stmt_1411__entry__] 
        $P[do_while_stmt_1411__exit__] 
        $P[loop_back] 
        $P[condition_done] 
        $P[loop_body_done] 
        $pipeline [do_while_stmt_1411_loop_body] 
        {
          // Pipelined!
          $T[back_edge_to_loop_body] 
          $T[first_time_through_loop_body] 
          $T[loop_body_start] 
          $T[condition_evaluated] 
          $transitionmerge [entry_tmerge] (back_edge_to_loop_body first_time_through_loop_body) (loop_body_start)
          $entry <-& (loop_body_start)
          $T[aggregated_phi_sample_req] 
          $T[aggregated_phi_sample_ack] 
          $T[aggregated_phi_update_req] 
          $T[aggregated_phi_update_ack] 
          // do not loop-back unless all phi's have used up their triggering tokens.
          condition_evaluated <-& (aggregated_phi_update_ack)
          aggregated_phi_sample_req o<-& (aggregated_phi_update_ack 0)
          // start:  single source PHI statement phi_stmt_1413
          // 			$phi rdata := 			  nic_to_mac_transmit_pipe $on   $entry ,   $loopback 
          // type of target is $uint<73>
          $T[phi_stmt_1413_sample_start_] 
          $T[phi_stmt_1413_sample_completed_] 
          $T[phi_stmt_1413_update_start_] 
          $T[phi_stmt_1413_update_completed_] 
          aggregated_phi_sample_req <-& (phi_stmt_1413_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_1413_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_1413_update_start_)
          // non-implicit source expression in single-source phi
          // nic_to_mac_transmit_pipe
          $T[RPIPE_nic_to_mac_transmit_pipe_1415_sample_start_] 
          $T[RPIPE_nic_to_mac_transmit_pipe_1415_sample_completed_] 
          $T[RPIPE_nic_to_mac_transmit_pipe_1415_update_start_] 
          $T[RPIPE_nic_to_mac_transmit_pipe_1415_update_completed_] 
          ;;[RPIPE_nic_to_mac_transmit_pipe_1415_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_nic_to_mac_transmit_pipe_1415_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_nic_to_mac_transmit_pipe_1415_sample_start_ &-> (RPIPE_nic_to_mac_transmit_pipe_1415_Sample)
          RPIPE_nic_to_mac_transmit_pipe_1415_sample_completed_ <-& (RPIPE_nic_to_mac_transmit_pipe_1415_Sample)
          RPIPE_nic_to_mac_transmit_pipe_1415_update_start_ <-& (RPIPE_nic_to_mac_transmit_pipe_1415_sample_completed_)
          RPIPE_nic_to_mac_transmit_pipe_1415_update_start_ &-> (RPIPE_nic_to_mac_transmit_pipe_1415_Update)
          RPIPE_nic_to_mac_transmit_pipe_1415_update_completed_ <-& (RPIPE_nic_to_mac_transmit_pipe_1415_Update)
          RPIPE_nic_to_mac_transmit_pipe_1415_sample_start_ o<-& (RPIPE_nic_to_mac_transmit_pipe_1415_update_completed_ 0)
          // RAW reenables for nic_to_mac_transmit_pipe
          // producer  and  consumer are both determined by PHI statements.
          aggregated_phi_sample_req &-> (RPIPE_nic_to_mac_transmit_pipe_1415_sample_start_)
          aggregated_phi_sample_ack <-& (RPIPE_nic_to_mac_transmit_pipe_1415_sample_completed_)
          aggregated_phi_update_req &-> (RPIPE_nic_to_mac_transmit_pipe_1415_update_start_)
          phi_stmt_1413_update_completed_ <-& (RPIPE_nic_to_mac_transmit_pipe_1415_update_completed_)
          aggregated_phi_update_ack <-& (phi_stmt_1413_update_completed_)
          // done: PHI Statement phi_stmt_1413
          // start:  			nic_to_mac_data_0 := ( $slice rdata 63 0 )  $buffering 1// bits of buffering = 64. 
          //  file nic.linked.aa, line 577
          // Source expression
          // ( $slice rdata 63 0 ) 
          $T[slice_1421_sample_start_] 
          $T[slice_1421_sample_completed_] 
          $T[slice_1421_update_start_] 
          $T[slice_1421_update_completed_] 
          // rdata
          // start: Forward dependencies from rdata to transition slice_1421_sample_start_
          slice_1421_sample_start_ <-& (phi_stmt_1413_update_completed_)
          // done: Forward dependencies from rdata to transition slice_1421_sample_start_
          ;;[slice_1421_Sample] 
          {
            // unary expression 
            $T [rr] $T [ra] // (split) unary operation
          }
          ;;[slice_1421_Update] 
          {
            // unary expression 
            $T [cr] $T [ca] //(split) unary operation
          }
          slice_1421_sample_start_ &-> (slice_1421_Sample)
          slice_1421_sample_completed_ <-& (slice_1421_Sample)
          slice_1421_sample_completed_ &-> ($null)
          slice_1421_update_start_ &-> (slice_1421_Update)
          slice_1421_update_completed_ <-& (slice_1421_Update)
          // RAW reenables for rdata
          phi_stmt_1413_update_start_ o<-& (slice_1421_sample_completed_ 0)
          // self-release: 
          slice_1421_sample_start_ o<-& (slice_1421_sample_completed_ 1)
          $null &-> (slice_1421_update_start_)
          slice_1421_update_start_ o<-& (slice_1421_update_completed_ 0)
          // Target expression
          // (as target) nic_to_mac_data_0
          $T[WPIPE_nic_to_mac_data_0_1419_sample_start_] 
          $T[WPIPE_nic_to_mac_data_0_1419_sample_completed_] 
          $T[WPIPE_nic_to_mac_data_0_1419_update_start_] 
          $T[WPIPE_nic_to_mac_data_0_1419_update_completed_] 
          ;;[WPIPE_nic_to_mac_data_0_1419_Sample] 
          {
            // pipe write sample-start nic_to_mac_data_0
            $T [req] $T [ack] 
          }
          ;;[WPIPE_nic_to_mac_data_0_1419_Update] 
          {
            // pipe write update (complete) nic_to_mac_data_0
            $T [req] $T [ack] 
          }
          WPIPE_nic_to_mac_data_0_1419_sample_start_ &-> (WPIPE_nic_to_mac_data_0_1419_Sample)
          WPIPE_nic_to_mac_data_0_1419_sample_completed_ <-& (WPIPE_nic_to_mac_data_0_1419_Sample)
          WPIPE_nic_to_mac_data_0_1419_update_start_ <-& (WPIPE_nic_to_mac_data_0_1419_sample_completed_)
          WPIPE_nic_to_mac_data_0_1419_update_start_ &-> (WPIPE_nic_to_mac_data_0_1419_Update)
          WPIPE_nic_to_mac_data_0_1419_update_completed_ <-& (WPIPE_nic_to_mac_data_0_1419_Update)
          WPIPE_nic_to_mac_data_0_1419_sample_start_ o<-& (WPIPE_nic_to_mac_data_0_1419_update_completed_ 0)
          // start: Forward dependencies from ( $slice rdata 63 0 )  to transition WPIPE_nic_to_mac_data_0_1419_sample_start_
          WPIPE_nic_to_mac_data_0_1419_sample_start_ <-& (slice_1421_update_completed_)
          // done: Forward dependencies from ( $slice rdata 63 0 )  to transition WPIPE_nic_to_mac_data_0_1419_sample_start_
          // RAW reenables for ( $slice rdata 63 0 ) 
          slice_1421_update_start_ o<-& (WPIPE_nic_to_mac_data_0_1419_sample_completed_ 0)
          // end:  			nic_to_mac_data_0 := ( $slice rdata 63 0 )  $buffering 1// bits of buffering = 64. 
          // start:  			nic_to_mac_data_1 := ($bitcast ($uint<16>) ( $slice rdata 72 64 )  ) $buffering 1// bits of buffering = 16. 
          //  file nic.linked.aa, line 578
          // Source expression
          // ($bitcast ($uint<16>) ( $slice rdata 72 64 )  )
          $T[type_cast_1426_sample_start_] 
          $T[type_cast_1426_sample_completed_] 
          $T[type_cast_1426_update_start_] 
          $T[type_cast_1426_update_completed_] 
          // ( $slice rdata 72 64 ) 
          // rdata
          // start: Forward dependencies from ( $slice rdata 72 64 )  to transition type_cast_1426_sample_start_
          type_cast_1426_sample_start_ <-& (phi_stmt_1413_update_completed_)
          // done: Forward dependencies from ( $slice rdata 72 64 )  to transition type_cast_1426_sample_start_
          ;;[type_cast_1426_Sample] 
          {
            // unary expression 
            $T [rr] $T [ra] // (split) unary operation
          }
          ;;[type_cast_1426_Update] 
          {
            // unary expression 
            $T [cr] $T [ca] //(split) unary operation
          }
          type_cast_1426_sample_start_ &-> (type_cast_1426_Sample)
          type_cast_1426_sample_completed_ <-& (type_cast_1426_Sample)
          type_cast_1426_sample_completed_ &-> ($null)
          type_cast_1426_update_start_ &-> (type_cast_1426_Update)
          type_cast_1426_update_completed_ <-& (type_cast_1426_Update)
          // RAW reenables for ( $slice rdata 72 64 ) 
          phi_stmt_1413_update_start_ o<-& (type_cast_1426_sample_completed_ 0)
          // self-release: 
          type_cast_1426_sample_start_ o<-& (type_cast_1426_sample_completed_ 1)
          $null &-> (type_cast_1426_update_start_)
          type_cast_1426_update_start_ o<-& (type_cast_1426_update_completed_ 0)
          // Target expression
          // (as target) nic_to_mac_data_1
          $T[WPIPE_nic_to_mac_data_1_1423_sample_start_] 
          $T[WPIPE_nic_to_mac_data_1_1423_sample_completed_] 
          $T[WPIPE_nic_to_mac_data_1_1423_update_start_] 
          $T[WPIPE_nic_to_mac_data_1_1423_update_completed_] 
          ;;[WPIPE_nic_to_mac_data_1_1423_Sample] 
          {
            // pipe write sample-start nic_to_mac_data_1
            $T [req] $T [ack] 
          }
          ;;[WPIPE_nic_to_mac_data_1_1423_Update] 
          {
            // pipe write update (complete) nic_to_mac_data_1
            $T [req] $T [ack] 
          }
          WPIPE_nic_to_mac_data_1_1423_sample_start_ &-> (WPIPE_nic_to_mac_data_1_1423_Sample)
          WPIPE_nic_to_mac_data_1_1423_sample_completed_ <-& (WPIPE_nic_to_mac_data_1_1423_Sample)
          WPIPE_nic_to_mac_data_1_1423_update_start_ <-& (WPIPE_nic_to_mac_data_1_1423_sample_completed_)
          WPIPE_nic_to_mac_data_1_1423_update_start_ &-> (WPIPE_nic_to_mac_data_1_1423_Update)
          WPIPE_nic_to_mac_data_1_1423_update_completed_ <-& (WPIPE_nic_to_mac_data_1_1423_Update)
          WPIPE_nic_to_mac_data_1_1423_sample_start_ o<-& (WPIPE_nic_to_mac_data_1_1423_update_completed_ 0)
          // start: Forward dependencies from ($bitcast ($uint<16>) ( $slice rdata 72 64 )  ) to transition WPIPE_nic_to_mac_data_1_1423_sample_start_
          WPIPE_nic_to_mac_data_1_1423_sample_start_ <-& (type_cast_1426_update_completed_)
          // done: Forward dependencies from ($bitcast ($uint<16>) ( $slice rdata 72 64 )  ) to transition WPIPE_nic_to_mac_data_1_1423_sample_start_
          // RAW reenables for ($bitcast ($uint<16>) ( $slice rdata 72 64 )  )
          type_cast_1426_update_start_ o<-& (WPIPE_nic_to_mac_data_1_1423_sample_completed_ 0)
          // end:  			nic_to_mac_data_1 := ($bitcast ($uint<16>) ( $slice rdata 72 64 )  ) $buffering 1// bits of buffering = 16. 
          $T [loop_body_delay_to_condition_start] $delay
          loop_body_start &-> (loop_body_delay_to_condition_start)
          loop_body_delay_to_condition_start &-> (condition_evaluated)
          condition_evaluated &-> ($null)
          // load-store dependencies..
          // pipe read/write dependencies for pipe nic_to_mac_data_0
          // read-dependencies for pipe nic_to_mac_data_0
          // write-dependencies for pipe nic_to_mac_data_0
          // signal write dependencies for nic_to_mac_data_0
          // pipe read/write dependencies for pipe nic_to_mac_data_1
          // read-dependencies for pipe nic_to_mac_data_1
          // write-dependencies for pipe nic_to_mac_data_1
          // signal write dependencies for nic_to_mac_data_1
          // pipe read/write dependencies for pipe nic_to_mac_transmit_pipe
          // read-dependencies for pipe nic_to_mac_transmit_pipe
          // write-dependencies for pipe nic_to_mac_transmit_pipe
          // signal write dependencies for nic_to_mac_transmit_pipe
        }
        ( first_time_through_loop_body  back_edge_to_loop_body) 
        ( condition_evaluated )
        ;; [loop_exit] 
        {
          $T [ack] 
        }
        ;; [loop_taken] 
        {
          $T [ack] 
        }
        do_while_stmt_1411__entry__ <-| ($entry)
        loop_body_done <-| ( do_while_stmt_1411_loop_body ) 
        condition_done |-> (loop_exit loop_taken)
        do_while_stmt_1411__exit__ |-> ($exit)
        $bind condition_done <= do_while_stmt_1411_loop_body : condition_evaluated
        $bind do_while_stmt_1411__entry__  => do_while_stmt_1411_loop_body : first_time_through_loop_body 
        $bind loop_back  => do_while_stmt_1411_loop_body : back_edge_to_loop_body 
        $terminate (loop_exit loop_taken loop_body_done) (loop_back do_while_stmt_1411__exit__)
      }
      do_while_stmt_1411__entry__ |-> (do_while_stmt_1411)
      do_while_stmt_1411__exit__ <-| (do_while_stmt_1411)
      do_while_stmt_1411__entry__ <-| (branch_block_stmt_1410__entry__)
      do_while_stmt_1411__exit__ |-> (branch_block_stmt_1410__exit__)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %nicToMacInterface%loop%
    //  file nic.linked.aa, line 572
    // constant-object-declarations for block %nicToMacInterface%loop
    //  file nic.linked.aa, line 568
    // constant-object-declarations for block %nicToMacInterface
    //  file nic.linked.aa, line 563
    // constant-declarations for block %nicToMacInterface%loop
    //  file nic.linked.aa, line 568
    // do-while statement  
    //  file nic.linked.aa, line 570
    // 1 
    $constant $W[konst_1429_wire_constant] : $int<1> := _b1// 1
    // constant-declarations for block %nicToMacInterface%loop%
    //  file nic.linked.aa, line 572
    // constant-declarations for phi:  			$phi rdata := 			  nic_to_mac_transmit_pipe $on   $entry ,   $loopback 
    // type of target is $uint<73>
    //  file nic.linked.aa, line 573
    // block %nicToMacInterface%loop
    //  file nic.linked.aa, line 568
    // do-while statement  
    //  file nic.linked.aa, line 570
    // merge-statement  
    //  file nic.linked.aa, line 572
    // 			$phi rdata := 			  nic_to_mac_transmit_pipe $on   $entry ,   $loopback 
    // type of target is $uint<73>
    //  file nic.linked.aa, line 573
    // nic_to_mac_transmit_pipe
    $W[RPIPE_nic_to_mac_transmit_pipe_1415_wire] : $int<73>
    // rdata
    $W[rdata_1413] : $int<73>
    // 			nic_to_mac_data_0 := ( $slice rdata 63 0 )  $buffering 1// bits of buffering = 64. 
    //  file nic.linked.aa, line 577
    // ( $slice rdata 63 0 ) 
    $intermediate $W[slice_1421_wire] : $int<64>
    // nic_to_mac_data_0
    // 			nic_to_mac_data_1 := ($bitcast ($uint<16>) ( $slice rdata 72 64 )  ) $buffering 1// bits of buffering = 16. 
    //  file nic.linked.aa, line 578
    // ( $slice rdata 72 64 ) 
    $intermediate $W[slice_1425_wire] : $int<9>
    // ($bitcast ($uint<16>) ( $slice rdata 72 64 )  )
    $intermediate $W[type_cast_1426_wire] : $int<16>
    // nic_to_mac_data_1
    // datapath-instances for block %nicToMacInterface%loop
    //  file nic.linked.aa, line 568
    // datapath-instances for do-while  
    //  file nic.linked.aa, line 570
    ==0? [do_while_stmt_1411_branch] (konst_1429_wire_constant)
    $flowthrough
    // data-path instances for merge  
    //  file nic.linked.aa, line 572
    // 			$phi rdata := 			  nic_to_mac_transmit_pipe $on   $entry ,   $loopback 
    // type of target is $uint<73>
    //  file nic.linked.aa, line 573
    // nic_to_mac_transmit_pipe
    $ioport $in [RPIPE_nic_to_mac_transmit_pipe_1415_inst] (nic_to_mac_transmit_pipe) (RPIPE_nic_to_mac_transmit_pipe_1415_wire)  $fullrate 
    $buffering $out RPIPE_nic_to_mac_transmit_pipe_1415_inst RPIPE_nic_to_mac_transmit_pipe_1415_wire 1
    # := [ssrc_phi_stmt_1413] (RPIPE_nic_to_mac_transmit_pipe_1415_wire) (rdata_1413)    $flowthrough 
    // 			nic_to_mac_data_0 := ( $slice rdata 63 0 )  $buffering 1// bits of buffering = 64. 
    //  file nic.linked.aa, line 577
    // ( $slice rdata 63 0 ) 
    [:] [slice_1421_inst] (rdata_1413 63 0) (slice_1421_wire)  $fullrate
    $buffering  $out slice_1421_inst slice_1421_wire 1
    $delay slice_1421_inst 1
    // nic_to_mac_data_0
    $ioport $out [WPIPE_nic_to_mac_data_0_1419_inst]  (slice_1421_wire) (nic_to_mac_data_0)  $fullrate 
    // 			nic_to_mac_data_1 := ($bitcast ($uint<16>) ( $slice rdata 72 64 )  ) $buffering 1// bits of buffering = 16. 
    //  file nic.linked.aa, line 578
    // ( $slice rdata 72 64 ) 
    [:] [slice_1425_inst] (rdata_1413 72 64) (slice_1425_wire)  $flowthrough
    $delay slice_1425_inst 0
    // ($bitcast ($uint<16>) ( $slice rdata 72 64 )  )
    # := [type_cast_1426_inst] (slice_1425_wire) (type_cast_1426_wire)     $fullrate
    $buffering  $out type_cast_1426_inst type_cast_1426_wire 1
    $delay type_cast_1426_inst 1
    // nic_to_mac_data_1
    $ioport $out [WPIPE_nic_to_mac_data_1_1423_inst]  (type_cast_1426_wire) (nic_to_mac_data_1)  $fullrate 
  }
  // end data-path
  // CP-DP links for do-while  do_while_stmt_1411
  //  file nic.linked.aa, line 570
  // nic_to_mac_transmit_pipe
  RPIPE_nic_to_mac_transmit_pipe_1415_inst <=> (branch_block_stmt_1410/do_while_stmt_1411/do_while_stmt_1411_loop_body/RPIPE_nic_to_mac_transmit_pipe_1415_Sample/rr branch_block_stmt_1410/do_while_stmt_1411/do_while_stmt_1411_loop_body/RPIPE_nic_to_mac_transmit_pipe_1415_Update/cr) (branch_block_stmt_1410/do_while_stmt_1411/do_while_stmt_1411_loop_body/RPIPE_nic_to_mac_transmit_pipe_1415_Sample/ra branch_block_stmt_1410/do_while_stmt_1411/do_while_stmt_1411_loop_body/RPIPE_nic_to_mac_transmit_pipe_1415_Update/ca)
  // 			nic_to_mac_data_0 := ( $slice rdata 63 0 )  $buffering 1// bits of buffering = 64. 
  //  file nic.linked.aa, line 577
  // rdata
  // ( $slice rdata 63 0 ) 
  slice_1421_inst <=> (branch_block_stmt_1410/do_while_stmt_1411/do_while_stmt_1411_loop_body/slice_1421_Sample/rr branch_block_stmt_1410/do_while_stmt_1411/do_while_stmt_1411_loop_body/slice_1421_Update/cr) (branch_block_stmt_1410/do_while_stmt_1411/do_while_stmt_1411_loop_body/slice_1421_Sample/ra branch_block_stmt_1410/do_while_stmt_1411/do_while_stmt_1411_loop_body/slice_1421_Update/ca)
  // nic_to_mac_data_0
  WPIPE_nic_to_mac_data_0_1419_inst <=> (branch_block_stmt_1410/do_while_stmt_1411/do_while_stmt_1411_loop_body/WPIPE_nic_to_mac_data_0_1419_Sample/req branch_block_stmt_1410/do_while_stmt_1411/do_while_stmt_1411_loop_body/WPIPE_nic_to_mac_data_0_1419_Update/req) (branch_block_stmt_1410/do_while_stmt_1411/do_while_stmt_1411_loop_body/WPIPE_nic_to_mac_data_0_1419_Sample/ack branch_block_stmt_1410/do_while_stmt_1411/do_while_stmt_1411_loop_body/WPIPE_nic_to_mac_data_0_1419_Update/ack)
  // 			nic_to_mac_data_1 := ($bitcast ($uint<16>) ( $slice rdata 72 64 )  ) $buffering 1// bits of buffering = 16. 
  //  file nic.linked.aa, line 578
  // rdata
  // ($bitcast ($uint<16>) ( $slice rdata 72 64 )  )
  type_cast_1426_inst <=> (branch_block_stmt_1410/do_while_stmt_1411/do_while_stmt_1411_loop_body/type_cast_1426_Sample/rr branch_block_stmt_1410/do_while_stmt_1411/do_while_stmt_1411_loop_body/type_cast_1426_Update/cr) (branch_block_stmt_1410/do_while_stmt_1411/do_while_stmt_1411_loop_body/type_cast_1426_Sample/ra branch_block_stmt_1410/do_while_stmt_1411/do_while_stmt_1411_loop_body/type_cast_1426_Update/ca)
  // nic_to_mac_data_1
  WPIPE_nic_to_mac_data_1_1423_inst <=> (branch_block_stmt_1410/do_while_stmt_1411/do_while_stmt_1411_loop_body/WPIPE_nic_to_mac_data_1_1423_Sample/req branch_block_stmt_1410/do_while_stmt_1411/do_while_stmt_1411_loop_body/WPIPE_nic_to_mac_data_1_1423_Update/req) (branch_block_stmt_1410/do_while_stmt_1411/do_while_stmt_1411_loop_body/WPIPE_nic_to_mac_data_1_1423_Sample/ack branch_block_stmt_1410/do_while_stmt_1411/do_while_stmt_1411_loop_body/WPIPE_nic_to_mac_data_1_1423_Update/ack)
  do_while_stmt_1411_branch <=> (branch_block_stmt_1410/do_while_stmt_1411/do_while_stmt_1411_loop_body/condition_evaluated) (branch_block_stmt_1410/do_while_stmt_1411/loop_exit/ack branch_block_stmt_1410/do_while_stmt_1411/loop_taken/ack)
}
$module [nicToMemoryInterface] 
{
  // pipe-declarations for block %nicToMemoryInterface
  //  file nic.linked.aa, line 582
  // pipe-declarations for block %nicToMemoryInterface%loop
  //  file nic.linked.aa, line 587
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    <>[branch_block_stmt_1433] // Branch Block  file nic.linked.aa, line 587
    {
      $P [branch_block_stmt_1433__entry__]
      branch_block_stmt_1433__entry__ <-| ($entry)
      $P [branch_block_stmt_1433__exit__]
      branch_block_stmt_1433__exit__ |-> ($exit)
      $P [do_while_stmt_1434__entry__] 
      $P [do_while_stmt_1434__exit__] 
      // do-while-statement  
      //  file nic.linked.aa, line 589
      <o> [do_while_stmt_1434]  $depth 7 $buffering 1 
      {
        $P[do_while_stmt_1434__entry__] 
        $P[do_while_stmt_1434__exit__] 
        $P[loop_back] 
        $P[condition_done] 
        $P[loop_body_done] 
        $pipeline [do_while_stmt_1434_loop_body] 
        {
          // Pipelined!
          $T[back_edge_to_loop_body] 
          $T[first_time_through_loop_body] 
          $T[loop_body_start] 
          $T[condition_evaluated] 
          $transitionmerge [entry_tmerge] (back_edge_to_loop_body first_time_through_loop_body) (loop_body_start)
          $entry <-& (loop_body_start)
          $T[aggregated_phi_sample_req] 
          $T[aggregated_phi_sample_ack] 
          $T[aggregated_phi_update_req] 
          $T[aggregated_phi_update_ack] 
          // do not loop-back unless all phi's have used up their triggering tokens.
          condition_evaluated <-& (aggregated_phi_update_ack)
          aggregated_phi_sample_req o<-& (aggregated_phi_update_ack 0)
          // start:  single source PHI statement phi_stmt_1436
          // 			$phi rdata := 			  NIC_TO_MEMORY_REQUEST $on   $entry ,   $loopback 
          // type of target is $uint<110>
          $T[phi_stmt_1436_sample_start_] 
          $T[phi_stmt_1436_sample_completed_] 
          $T[phi_stmt_1436_update_start_] 
          $T[phi_stmt_1436_update_completed_] 
          aggregated_phi_sample_req <-& (phi_stmt_1436_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_1436_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_1436_update_start_)
          // non-implicit source expression in single-source phi
          // NIC_TO_MEMORY_REQUEST
          $T[RPIPE_NIC_TO_MEMORY_REQUEST_1438_sample_start_] 
          $T[RPIPE_NIC_TO_MEMORY_REQUEST_1438_sample_completed_] 
          $T[RPIPE_NIC_TO_MEMORY_REQUEST_1438_update_start_] 
          $T[RPIPE_NIC_TO_MEMORY_REQUEST_1438_update_completed_] 
          ;;[RPIPE_NIC_TO_MEMORY_REQUEST_1438_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_NIC_TO_MEMORY_REQUEST_1438_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_NIC_TO_MEMORY_REQUEST_1438_sample_start_ &-> (RPIPE_NIC_TO_MEMORY_REQUEST_1438_Sample)
          RPIPE_NIC_TO_MEMORY_REQUEST_1438_sample_completed_ <-& (RPIPE_NIC_TO_MEMORY_REQUEST_1438_Sample)
          RPIPE_NIC_TO_MEMORY_REQUEST_1438_update_start_ <-& (RPIPE_NIC_TO_MEMORY_REQUEST_1438_sample_completed_)
          RPIPE_NIC_TO_MEMORY_REQUEST_1438_update_start_ &-> (RPIPE_NIC_TO_MEMORY_REQUEST_1438_Update)
          RPIPE_NIC_TO_MEMORY_REQUEST_1438_update_completed_ <-& (RPIPE_NIC_TO_MEMORY_REQUEST_1438_Update)
          RPIPE_NIC_TO_MEMORY_REQUEST_1438_sample_start_ o<-& (RPIPE_NIC_TO_MEMORY_REQUEST_1438_update_completed_ 0)
          // RAW reenables for NIC_TO_MEMORY_REQUEST
          // producer  and  consumer are both determined by PHI statements.
          aggregated_phi_sample_req &-> (RPIPE_NIC_TO_MEMORY_REQUEST_1438_sample_start_)
          aggregated_phi_sample_ack <-& (RPIPE_NIC_TO_MEMORY_REQUEST_1438_sample_completed_)
          aggregated_phi_update_req &-> (RPIPE_NIC_TO_MEMORY_REQUEST_1438_update_start_)
          phi_stmt_1436_update_completed_ <-& (RPIPE_NIC_TO_MEMORY_REQUEST_1438_update_completed_)
          aggregated_phi_update_ack <-& (phi_stmt_1436_update_completed_)
          // done: PHI Statement phi_stmt_1436
          // start:  			mem_req1_pipe0 := ( $slice rdata 63 0 )  $buffering 1// bits of buffering = 64. 
          //  file nic.linked.aa, line 596
          // Source expression
          // ( $slice rdata 63 0 ) 
          $T[slice_1444_sample_start_] 
          $T[slice_1444_sample_completed_] 
          $T[slice_1444_update_start_] 
          $T[slice_1444_update_completed_] 
          // rdata
          // start: Forward dependencies from rdata to transition slice_1444_sample_start_
          slice_1444_sample_start_ <-& (phi_stmt_1436_update_completed_)
          // done: Forward dependencies from rdata to transition slice_1444_sample_start_
          ;;[slice_1444_Sample] 
          {
            // unary expression 
            $T [rr] $T [ra] // (split) unary operation
          }
          ;;[slice_1444_Update] 
          {
            // unary expression 
            $T [cr] $T [ca] //(split) unary operation
          }
          slice_1444_sample_start_ &-> (slice_1444_Sample)
          slice_1444_sample_completed_ <-& (slice_1444_Sample)
          slice_1444_sample_completed_ &-> ($null)
          slice_1444_update_start_ &-> (slice_1444_Update)
          slice_1444_update_completed_ <-& (slice_1444_Update)
          // RAW reenables for rdata
          phi_stmt_1436_update_start_ o<-& (slice_1444_sample_completed_ 0)
          // self-release: 
          slice_1444_sample_start_ o<-& (slice_1444_sample_completed_ 1)
          $null &-> (slice_1444_update_start_)
          slice_1444_update_start_ o<-& (slice_1444_update_completed_ 0)
          // Target expression
          // (as target) mem_req1_pipe0
          $T[WPIPE_mem_req1_pipe0_1442_sample_start_] 
          $T[WPIPE_mem_req1_pipe0_1442_sample_completed_] 
          $T[WPIPE_mem_req1_pipe0_1442_update_start_] 
          $T[WPIPE_mem_req1_pipe0_1442_update_completed_] 
          ;;[WPIPE_mem_req1_pipe0_1442_Sample] 
          {
            // pipe write sample-start mem_req1_pipe0
            $T [req] $T [ack] 
          }
          ;;[WPIPE_mem_req1_pipe0_1442_Update] 
          {
            // pipe write update (complete) mem_req1_pipe0
            $T [req] $T [ack] 
          }
          WPIPE_mem_req1_pipe0_1442_sample_start_ &-> (WPIPE_mem_req1_pipe0_1442_Sample)
          WPIPE_mem_req1_pipe0_1442_sample_completed_ <-& (WPIPE_mem_req1_pipe0_1442_Sample)
          WPIPE_mem_req1_pipe0_1442_update_start_ <-& (WPIPE_mem_req1_pipe0_1442_sample_completed_)
          WPIPE_mem_req1_pipe0_1442_update_start_ &-> (WPIPE_mem_req1_pipe0_1442_Update)
          WPIPE_mem_req1_pipe0_1442_update_completed_ <-& (WPIPE_mem_req1_pipe0_1442_Update)
          WPIPE_mem_req1_pipe0_1442_sample_start_ o<-& (WPIPE_mem_req1_pipe0_1442_update_completed_ 0)
          // start: Forward dependencies from ( $slice rdata 63 0 )  to transition WPIPE_mem_req1_pipe0_1442_sample_start_
          WPIPE_mem_req1_pipe0_1442_sample_start_ <-& (slice_1444_update_completed_)
          // done: Forward dependencies from ( $slice rdata 63 0 )  to transition WPIPE_mem_req1_pipe0_1442_sample_start_
          // RAW reenables for ( $slice rdata 63 0 ) 
          slice_1444_update_start_ o<-& (WPIPE_mem_req1_pipe0_1442_sample_completed_ 0)
          // end:  			mem_req1_pipe0 := ( $slice rdata 63 0 )  $buffering 1// bits of buffering = 64. 
          // start:  			mem_req1_pipe1 := ($bitcast ($uint<64>) ( $slice rdata 109 64 )  ) $buffering 1// bits of buffering = 64. 
          //  file nic.linked.aa, line 597
          // Source expression
          // ($bitcast ($uint<64>) ( $slice rdata 109 64 )  )
          $T[type_cast_1450_sample_start_] 
          $T[type_cast_1450_sample_completed_] 
          $T[type_cast_1450_update_start_] 
          $T[type_cast_1450_update_completed_] 
          // ( $slice rdata 109 64 ) 
          // rdata
          // start: Forward dependencies from ( $slice rdata 109 64 )  to transition type_cast_1450_sample_start_
          type_cast_1450_sample_start_ <-& (phi_stmt_1436_update_completed_)
          // done: Forward dependencies from ( $slice rdata 109 64 )  to transition type_cast_1450_sample_start_
          ;;[type_cast_1450_Sample] 
          {
            // unary expression 
            $T [rr] $T [ra] // (split) unary operation
          }
          ;;[type_cast_1450_Update] 
          {
            // unary expression 
            $T [cr] $T [ca] //(split) unary operation
          }
          type_cast_1450_sample_start_ &-> (type_cast_1450_Sample)
          type_cast_1450_sample_completed_ <-& (type_cast_1450_Sample)
          type_cast_1450_sample_completed_ &-> ($null)
          type_cast_1450_update_start_ &-> (type_cast_1450_Update)
          type_cast_1450_update_completed_ <-& (type_cast_1450_Update)
          // RAW reenables for ( $slice rdata 109 64 ) 
          phi_stmt_1436_update_start_ o<-& (type_cast_1450_sample_completed_ 0)
          // self-release: 
          type_cast_1450_sample_start_ o<-& (type_cast_1450_sample_completed_ 1)
          $null &-> (type_cast_1450_update_start_)
          type_cast_1450_update_start_ o<-& (type_cast_1450_update_completed_ 0)
          // Target expression
          // (as target) mem_req1_pipe1
          $T[WPIPE_mem_req1_pipe1_1446_sample_start_] 
          $T[WPIPE_mem_req1_pipe1_1446_sample_completed_] 
          $T[WPIPE_mem_req1_pipe1_1446_update_start_] 
          $T[WPIPE_mem_req1_pipe1_1446_update_completed_] 
          ;;[WPIPE_mem_req1_pipe1_1446_Sample] 
          {
            // pipe write sample-start mem_req1_pipe1
            $T [req] $T [ack] 
          }
          ;;[WPIPE_mem_req1_pipe1_1446_Update] 
          {
            // pipe write update (complete) mem_req1_pipe1
            $T [req] $T [ack] 
          }
          WPIPE_mem_req1_pipe1_1446_sample_start_ &-> (WPIPE_mem_req1_pipe1_1446_Sample)
          WPIPE_mem_req1_pipe1_1446_sample_completed_ <-& (WPIPE_mem_req1_pipe1_1446_Sample)
          WPIPE_mem_req1_pipe1_1446_update_start_ <-& (WPIPE_mem_req1_pipe1_1446_sample_completed_)
          WPIPE_mem_req1_pipe1_1446_update_start_ &-> (WPIPE_mem_req1_pipe1_1446_Update)
          WPIPE_mem_req1_pipe1_1446_update_completed_ <-& (WPIPE_mem_req1_pipe1_1446_Update)
          WPIPE_mem_req1_pipe1_1446_sample_start_ o<-& (WPIPE_mem_req1_pipe1_1446_update_completed_ 0)
          // start: Forward dependencies from ($bitcast ($uint<64>) ( $slice rdata 109 64 )  ) to transition WPIPE_mem_req1_pipe1_1446_sample_start_
          WPIPE_mem_req1_pipe1_1446_sample_start_ <-& (type_cast_1450_update_completed_)
          // done: Forward dependencies from ($bitcast ($uint<64>) ( $slice rdata 109 64 )  ) to transition WPIPE_mem_req1_pipe1_1446_sample_start_
          // RAW reenables for ($bitcast ($uint<64>) ( $slice rdata 109 64 )  )
          type_cast_1450_update_start_ o<-& (WPIPE_mem_req1_pipe1_1446_sample_completed_ 0)
          // end:  			mem_req1_pipe1 := ($bitcast ($uint<64>) ( $slice rdata 109 64 )  ) $buffering 1// bits of buffering = 64. 
          $T [loop_body_delay_to_condition_start] $delay
          loop_body_start &-> (loop_body_delay_to_condition_start)
          loop_body_delay_to_condition_start &-> (condition_evaluated)
          condition_evaluated &-> ($null)
          // load-store dependencies..
          // pipe read/write dependencies for pipe NIC_TO_MEMORY_REQUEST
          // read-dependencies for pipe NIC_TO_MEMORY_REQUEST
          // write-dependencies for pipe NIC_TO_MEMORY_REQUEST
          // signal write dependencies for NIC_TO_MEMORY_REQUEST
          // pipe read/write dependencies for pipe mem_req1_pipe0
          // read-dependencies for pipe mem_req1_pipe0
          // write-dependencies for pipe mem_req1_pipe0
          // signal write dependencies for mem_req1_pipe0
          // pipe read/write dependencies for pipe mem_req1_pipe1
          // read-dependencies for pipe mem_req1_pipe1
          // write-dependencies for pipe mem_req1_pipe1
          // signal write dependencies for mem_req1_pipe1
        }
        ( first_time_through_loop_body  back_edge_to_loop_body) 
        ( condition_evaluated )
        ;; [loop_exit] 
        {
          $T [ack] 
        }
        ;; [loop_taken] 
        {
          $T [ack] 
        }
        do_while_stmt_1434__entry__ <-| ($entry)
        loop_body_done <-| ( do_while_stmt_1434_loop_body ) 
        condition_done |-> (loop_exit loop_taken)
        do_while_stmt_1434__exit__ |-> ($exit)
        $bind condition_done <= do_while_stmt_1434_loop_body : condition_evaluated
        $bind do_while_stmt_1434__entry__  => do_while_stmt_1434_loop_body : first_time_through_loop_body 
        $bind loop_back  => do_while_stmt_1434_loop_body : back_edge_to_loop_body 
        $terminate (loop_exit loop_taken loop_body_done) (loop_back do_while_stmt_1434__exit__)
      }
      do_while_stmt_1434__entry__ |-> (do_while_stmt_1434)
      do_while_stmt_1434__exit__ <-| (do_while_stmt_1434)
      do_while_stmt_1434__entry__ <-| (branch_block_stmt_1433__entry__)
      do_while_stmt_1434__exit__ |-> (branch_block_stmt_1433__exit__)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %nicToMemoryInterface%loop%
    //  file nic.linked.aa, line 591
    // constant-object-declarations for block %nicToMemoryInterface%loop
    //  file nic.linked.aa, line 587
    // constant-object-declarations for block %nicToMemoryInterface
    //  file nic.linked.aa, line 582
    // constant-declarations for block %nicToMemoryInterface%loop
    //  file nic.linked.aa, line 587
    // do-while statement  
    //  file nic.linked.aa, line 589
    // 1 
    $constant $W[konst_1453_wire_constant] : $int<1> := _b1// 1
    // constant-declarations for block %nicToMemoryInterface%loop%
    //  file nic.linked.aa, line 591
    // constant-declarations for phi:  			$phi rdata := 			  NIC_TO_MEMORY_REQUEST $on   $entry ,   $loopback 
    // type of target is $uint<110>
    //  file nic.linked.aa, line 592
    // block %nicToMemoryInterface%loop
    //  file nic.linked.aa, line 587
    // do-while statement  
    //  file nic.linked.aa, line 589
    // merge-statement  
    //  file nic.linked.aa, line 591
    // 			$phi rdata := 			  NIC_TO_MEMORY_REQUEST $on   $entry ,   $loopback 
    // type of target is $uint<110>
    //  file nic.linked.aa, line 592
    // NIC_TO_MEMORY_REQUEST
    $W[RPIPE_NIC_TO_MEMORY_REQUEST_1438_wire] : $int<110>
    // rdata
    $W[rdata_1436] : $int<110>
    // 			mem_req1_pipe0 := ( $slice rdata 63 0 )  $buffering 1// bits of buffering = 64. 
    //  file nic.linked.aa, line 596
    // ( $slice rdata 63 0 ) 
    $intermediate $W[slice_1444_wire] : $int<64>
    // mem_req1_pipe0
    // 			mem_req1_pipe1 := ($bitcast ($uint<64>) ( $slice rdata 109 64 )  ) $buffering 1// bits of buffering = 64. 
    //  file nic.linked.aa, line 597
    // ( $slice rdata 109 64 ) 
    $intermediate $W[slice_1449_wire] : $int<46>
    // ($bitcast ($uint<64>) ( $slice rdata 109 64 )  )
    $intermediate $W[type_cast_1450_wire] : $int<64>
    // mem_req1_pipe1
    // datapath-instances for block %nicToMemoryInterface%loop
    //  file nic.linked.aa, line 587
    // datapath-instances for do-while  
    //  file nic.linked.aa, line 589
    ==0? [do_while_stmt_1434_branch] (konst_1453_wire_constant)
    $flowthrough
    // data-path instances for merge  
    //  file nic.linked.aa, line 591
    // 			$phi rdata := 			  NIC_TO_MEMORY_REQUEST $on   $entry ,   $loopback 
    // type of target is $uint<110>
    //  file nic.linked.aa, line 592
    // NIC_TO_MEMORY_REQUEST
    $ioport $in [RPIPE_NIC_TO_MEMORY_REQUEST_1438_inst] (NIC_TO_MEMORY_REQUEST) (RPIPE_NIC_TO_MEMORY_REQUEST_1438_wire)  $fullrate 
    $buffering $out RPIPE_NIC_TO_MEMORY_REQUEST_1438_inst RPIPE_NIC_TO_MEMORY_REQUEST_1438_wire 1
    # := [ssrc_phi_stmt_1436] (RPIPE_NIC_TO_MEMORY_REQUEST_1438_wire) (rdata_1436)    $flowthrough 
    // 			mem_req1_pipe0 := ( $slice rdata 63 0 )  $buffering 1// bits of buffering = 64. 
    //  file nic.linked.aa, line 596
    // ( $slice rdata 63 0 ) 
    [:] [slice_1444_inst] (rdata_1436 63 0) (slice_1444_wire)  $fullrate
    $buffering  $out slice_1444_inst slice_1444_wire 1
    $delay slice_1444_inst 1
    // mem_req1_pipe0
    $ioport $out [WPIPE_mem_req1_pipe0_1442_inst]  (slice_1444_wire) (mem_req1_pipe0)  $fullrate 
    // 			mem_req1_pipe1 := ($bitcast ($uint<64>) ( $slice rdata 109 64 )  ) $buffering 1// bits of buffering = 64. 
    //  file nic.linked.aa, line 597
    // ( $slice rdata 109 64 ) 
    [:] [slice_1449_inst] (rdata_1436 109 64) (slice_1449_wire)  $flowthrough
    $delay slice_1449_inst 0
    // ($bitcast ($uint<64>) ( $slice rdata 109 64 )  )
    # := [type_cast_1450_inst] (slice_1449_wire) (type_cast_1450_wire)     $fullrate
    $buffering  $out type_cast_1450_inst type_cast_1450_wire 1
    $delay type_cast_1450_inst 1
    // mem_req1_pipe1
    $ioport $out [WPIPE_mem_req1_pipe1_1446_inst]  (type_cast_1450_wire) (mem_req1_pipe1)  $fullrate 
  }
  // end data-path
  // CP-DP links for do-while  do_while_stmt_1434
  //  file nic.linked.aa, line 589
  // NIC_TO_MEMORY_REQUEST
  RPIPE_NIC_TO_MEMORY_REQUEST_1438_inst <=> (branch_block_stmt_1433/do_while_stmt_1434/do_while_stmt_1434_loop_body/RPIPE_NIC_TO_MEMORY_REQUEST_1438_Sample/rr branch_block_stmt_1433/do_while_stmt_1434/do_while_stmt_1434_loop_body/RPIPE_NIC_TO_MEMORY_REQUEST_1438_Update/cr) (branch_block_stmt_1433/do_while_stmt_1434/do_while_stmt_1434_loop_body/RPIPE_NIC_TO_MEMORY_REQUEST_1438_Sample/ra branch_block_stmt_1433/do_while_stmt_1434/do_while_stmt_1434_loop_body/RPIPE_NIC_TO_MEMORY_REQUEST_1438_Update/ca)
  // 			mem_req1_pipe0 := ( $slice rdata 63 0 )  $buffering 1// bits of buffering = 64. 
  //  file nic.linked.aa, line 596
  // rdata
  // ( $slice rdata 63 0 ) 
  slice_1444_inst <=> (branch_block_stmt_1433/do_while_stmt_1434/do_while_stmt_1434_loop_body/slice_1444_Sample/rr branch_block_stmt_1433/do_while_stmt_1434/do_while_stmt_1434_loop_body/slice_1444_Update/cr) (branch_block_stmt_1433/do_while_stmt_1434/do_while_stmt_1434_loop_body/slice_1444_Sample/ra branch_block_stmt_1433/do_while_stmt_1434/do_while_stmt_1434_loop_body/slice_1444_Update/ca)
  // mem_req1_pipe0
  WPIPE_mem_req1_pipe0_1442_inst <=> (branch_block_stmt_1433/do_while_stmt_1434/do_while_stmt_1434_loop_body/WPIPE_mem_req1_pipe0_1442_Sample/req branch_block_stmt_1433/do_while_stmt_1434/do_while_stmt_1434_loop_body/WPIPE_mem_req1_pipe0_1442_Update/req) (branch_block_stmt_1433/do_while_stmt_1434/do_while_stmt_1434_loop_body/WPIPE_mem_req1_pipe0_1442_Sample/ack branch_block_stmt_1433/do_while_stmt_1434/do_while_stmt_1434_loop_body/WPIPE_mem_req1_pipe0_1442_Update/ack)
  // 			mem_req1_pipe1 := ($bitcast ($uint<64>) ( $slice rdata 109 64 )  ) $buffering 1// bits of buffering = 64. 
  //  file nic.linked.aa, line 597
  // rdata
  // ($bitcast ($uint<64>) ( $slice rdata 109 64 )  )
  type_cast_1450_inst <=> (branch_block_stmt_1433/do_while_stmt_1434/do_while_stmt_1434_loop_body/type_cast_1450_Sample/rr branch_block_stmt_1433/do_while_stmt_1434/do_while_stmt_1434_loop_body/type_cast_1450_Update/cr) (branch_block_stmt_1433/do_while_stmt_1434/do_while_stmt_1434_loop_body/type_cast_1450_Sample/ra branch_block_stmt_1433/do_while_stmt_1434/do_while_stmt_1434_loop_body/type_cast_1450_Update/ca)
  // mem_req1_pipe1
  WPIPE_mem_req1_pipe1_1446_inst <=> (branch_block_stmt_1433/do_while_stmt_1434/do_while_stmt_1434_loop_body/WPIPE_mem_req1_pipe1_1446_Sample/req branch_block_stmt_1433/do_while_stmt_1434/do_while_stmt_1434_loop_body/WPIPE_mem_req1_pipe1_1446_Update/req) (branch_block_stmt_1433/do_while_stmt_1434/do_while_stmt_1434_loop_body/WPIPE_mem_req1_pipe1_1446_Sample/ack branch_block_stmt_1433/do_while_stmt_1434/do_while_stmt_1434_loop_body/WPIPE_mem_req1_pipe1_1446_Update/ack)
  do_while_stmt_1434_branch <=> (branch_block_stmt_1433/do_while_stmt_1434/do_while_stmt_1434_loop_body/condition_evaluated) (branch_block_stmt_1433/do_while_stmt_1434/loop_exit/ack branch_block_stmt_1433/do_while_stmt_1434/loop_taken/ack)
}
$module [nicToProcessorInterface] 
{
  // pipe-declarations for block %nicToProcessorInterface
  //  file nic.linked.aa, line 601
  // pipe-declarations for block %nicToProcessorInterface%loop
  //  file nic.linked.aa, line 606
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    <>[branch_block_stmt_1457] // Branch Block  file nic.linked.aa, line 606
    {
      $P [branch_block_stmt_1457__entry__]
      branch_block_stmt_1457__entry__ <-| ($entry)
      $P [branch_block_stmt_1457__exit__]
      branch_block_stmt_1457__exit__ |-> ($exit)
      $P [do_while_stmt_1458__entry__] 
      $P [do_while_stmt_1458__exit__] 
      // do-while-statement  
      //  file nic.linked.aa, line 608
      <o> [do_while_stmt_1458]  $depth 7 $buffering 1 
      {
        $P[do_while_stmt_1458__entry__] 
        $P[do_while_stmt_1458__exit__] 
        $P[loop_back] 
        $P[condition_done] 
        $P[loop_body_done] 
        $pipeline [do_while_stmt_1458_loop_body] 
        {
          // Pipelined!
          $T[back_edge_to_loop_body] 
          $T[first_time_through_loop_body] 
          $T[loop_body_start] 
          $T[condition_evaluated] 
          $transitionmerge [entry_tmerge] (back_edge_to_loop_body first_time_through_loop_body) (loop_body_start)
          $entry <-& (loop_body_start)
          $T[aggregated_phi_sample_req] 
          $T[aggregated_phi_sample_ack] 
          $T[aggregated_phi_update_req] 
          $T[aggregated_phi_update_ack] 
          // do not loop-back unless all phi's have used up their triggering tokens.
          condition_evaluated <-& (aggregated_phi_update_ack)
          aggregated_phi_sample_req o<-& (aggregated_phi_update_ack 0)
          // start:  single source PHI statement phi_stmt_1460
          // 			$phi rdata := 			  AFB_NIC_RESPONSE $on   $entry ,   $loopback 
          // type of target is $uint<33>
          $T[phi_stmt_1460_sample_start_] 
          $T[phi_stmt_1460_sample_completed_] 
          $T[phi_stmt_1460_update_start_] 
          $T[phi_stmt_1460_update_completed_] 
          aggregated_phi_sample_req <-& (phi_stmt_1460_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_1460_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_1460_update_start_)
          // non-implicit source expression in single-source phi
          // AFB_NIC_RESPONSE
          $T[RPIPE_AFB_NIC_RESPONSE_1462_sample_start_] 
          $T[RPIPE_AFB_NIC_RESPONSE_1462_sample_completed_] 
          $T[RPIPE_AFB_NIC_RESPONSE_1462_update_start_] 
          $T[RPIPE_AFB_NIC_RESPONSE_1462_update_completed_] 
          ;;[RPIPE_AFB_NIC_RESPONSE_1462_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_AFB_NIC_RESPONSE_1462_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_AFB_NIC_RESPONSE_1462_sample_start_ &-> (RPIPE_AFB_NIC_RESPONSE_1462_Sample)
          RPIPE_AFB_NIC_RESPONSE_1462_sample_completed_ <-& (RPIPE_AFB_NIC_RESPONSE_1462_Sample)
          RPIPE_AFB_NIC_RESPONSE_1462_update_start_ <-& (RPIPE_AFB_NIC_RESPONSE_1462_sample_completed_)
          RPIPE_AFB_NIC_RESPONSE_1462_update_start_ &-> (RPIPE_AFB_NIC_RESPONSE_1462_Update)
          RPIPE_AFB_NIC_RESPONSE_1462_update_completed_ <-& (RPIPE_AFB_NIC_RESPONSE_1462_Update)
          RPIPE_AFB_NIC_RESPONSE_1462_sample_start_ o<-& (RPIPE_AFB_NIC_RESPONSE_1462_update_completed_ 0)
          // RAW reenables for AFB_NIC_RESPONSE
          // producer  and  consumer are both determined by PHI statements.
          aggregated_phi_sample_req &-> (RPIPE_AFB_NIC_RESPONSE_1462_sample_start_)
          aggregated_phi_sample_ack <-& (RPIPE_AFB_NIC_RESPONSE_1462_sample_completed_)
          aggregated_phi_update_req &-> (RPIPE_AFB_NIC_RESPONSE_1462_update_start_)
          phi_stmt_1460_update_completed_ <-& (RPIPE_AFB_NIC_RESPONSE_1462_update_completed_)
          aggregated_phi_update_ack <-& (phi_stmt_1460_update_completed_)
          // done: PHI Statement phi_stmt_1460
          // start:  			control_word_response_pipe := ($bitcast ($uint<64>) rdata ) $buffering 1// bits of buffering = 64. 
          //  file nic.linked.aa, line 614
          // Source expression
          // ($bitcast ($uint<64>) rdata )
          $T[type_cast_1466_sample_start_] 
          $T[type_cast_1466_sample_completed_] 
          $T[type_cast_1466_update_start_] 
          $T[type_cast_1466_update_completed_] 
          // rdata
          // start: Forward dependencies from rdata to transition type_cast_1466_sample_start_
          type_cast_1466_sample_start_ <-& (phi_stmt_1460_update_completed_)
          // done: Forward dependencies from rdata to transition type_cast_1466_sample_start_
          ;;[type_cast_1466_Sample] 
          {
            // unary expression 
            $T [rr] $T [ra] // (split) unary operation
          }
          ;;[type_cast_1466_Update] 
          {
            // unary expression 
            $T [cr] $T [ca] //(split) unary operation
          }
          type_cast_1466_sample_start_ &-> (type_cast_1466_Sample)
          type_cast_1466_sample_completed_ <-& (type_cast_1466_Sample)
          type_cast_1466_sample_completed_ &-> ($null)
          type_cast_1466_update_start_ &-> (type_cast_1466_Update)
          type_cast_1466_update_completed_ <-& (type_cast_1466_Update)
          // RAW reenables for rdata
          phi_stmt_1460_update_start_ o<-& (type_cast_1466_sample_completed_ 0)
          // self-release: 
          type_cast_1466_sample_start_ o<-& (type_cast_1466_sample_completed_ 1)
          $null &-> (type_cast_1466_update_start_)
          type_cast_1466_update_start_ o<-& (type_cast_1466_update_completed_ 0)
          // Target expression
          // (as target) control_word_response_pipe
          $T[WPIPE_control_word_response_pipe_1464_sample_start_] 
          $T[WPIPE_control_word_response_pipe_1464_sample_completed_] 
          $T[WPIPE_control_word_response_pipe_1464_update_start_] 
          $T[WPIPE_control_word_response_pipe_1464_update_completed_] 
          ;;[WPIPE_control_word_response_pipe_1464_Sample] 
          {
            // pipe write sample-start control_word_response_pipe
            $T [req] $T [ack] 
          }
          ;;[WPIPE_control_word_response_pipe_1464_Update] 
          {
            // pipe write update (complete) control_word_response_pipe
            $T [req] $T [ack] 
          }
          WPIPE_control_word_response_pipe_1464_sample_start_ &-> (WPIPE_control_word_response_pipe_1464_Sample)
          WPIPE_control_word_response_pipe_1464_sample_completed_ <-& (WPIPE_control_word_response_pipe_1464_Sample)
          WPIPE_control_word_response_pipe_1464_update_start_ <-& (WPIPE_control_word_response_pipe_1464_sample_completed_)
          WPIPE_control_word_response_pipe_1464_update_start_ &-> (WPIPE_control_word_response_pipe_1464_Update)
          WPIPE_control_word_response_pipe_1464_update_completed_ <-& (WPIPE_control_word_response_pipe_1464_Update)
          WPIPE_control_word_response_pipe_1464_sample_start_ o<-& (WPIPE_control_word_response_pipe_1464_update_completed_ 0)
          // start: Forward dependencies from ($bitcast ($uint<64>) rdata ) to transition WPIPE_control_word_response_pipe_1464_sample_start_
          WPIPE_control_word_response_pipe_1464_sample_start_ <-& (type_cast_1466_update_completed_)
          // done: Forward dependencies from ($bitcast ($uint<64>) rdata ) to transition WPIPE_control_word_response_pipe_1464_sample_start_
          // RAW reenables for ($bitcast ($uint<64>) rdata )
          type_cast_1466_update_start_ o<-& (WPIPE_control_word_response_pipe_1464_sample_completed_ 0)
          // end:  			control_word_response_pipe := ($bitcast ($uint<64>) rdata ) $buffering 1// bits of buffering = 64. 
          $T [loop_body_delay_to_condition_start] $delay
          loop_body_start &-> (loop_body_delay_to_condition_start)
          loop_body_delay_to_condition_start &-> (condition_evaluated)
          condition_evaluated &-> ($null)
          // load-store dependencies..
          // pipe read/write dependencies for pipe AFB_NIC_RESPONSE
          // read-dependencies for pipe AFB_NIC_RESPONSE
          // write-dependencies for pipe AFB_NIC_RESPONSE
          // signal write dependencies for AFB_NIC_RESPONSE
          // pipe read/write dependencies for pipe control_word_response_pipe
          // read-dependencies for pipe control_word_response_pipe
          // write-dependencies for pipe control_word_response_pipe
          // signal write dependencies for control_word_response_pipe
        }
        ( first_time_through_loop_body  back_edge_to_loop_body) 
        ( condition_evaluated )
        ;; [loop_exit] 
        {
          $T [ack] 
        }
        ;; [loop_taken] 
        {
          $T [ack] 
        }
        do_while_stmt_1458__entry__ <-| ($entry)
        loop_body_done <-| ( do_while_stmt_1458_loop_body ) 
        condition_done |-> (loop_exit loop_taken)
        do_while_stmt_1458__exit__ |-> ($exit)
        $bind condition_done <= do_while_stmt_1458_loop_body : condition_evaluated
        $bind do_while_stmt_1458__entry__  => do_while_stmt_1458_loop_body : first_time_through_loop_body 
        $bind loop_back  => do_while_stmt_1458_loop_body : back_edge_to_loop_body 
        $terminate (loop_exit loop_taken loop_body_done) (loop_back do_while_stmt_1458__exit__)
      }
      do_while_stmt_1458__entry__ |-> (do_while_stmt_1458)
      do_while_stmt_1458__exit__ <-| (do_while_stmt_1458)
      do_while_stmt_1458__entry__ <-| (branch_block_stmt_1457__entry__)
      do_while_stmt_1458__exit__ |-> (branch_block_stmt_1457__exit__)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %nicToProcessorInterface%loop%
    //  file nic.linked.aa, line 610
    // constant-object-declarations for block %nicToProcessorInterface%loop
    //  file nic.linked.aa, line 606
    // constant-object-declarations for block %nicToProcessorInterface
    //  file nic.linked.aa, line 601
    // constant-declarations for block %nicToProcessorInterface%loop
    //  file nic.linked.aa, line 606
    // do-while statement  
    //  file nic.linked.aa, line 608
    // 1 
    $constant $W[konst_1469_wire_constant] : $int<1> := _b1// 1
    // constant-declarations for block %nicToProcessorInterface%loop%
    //  file nic.linked.aa, line 610
    // constant-declarations for phi:  			$phi rdata := 			  AFB_NIC_RESPONSE $on   $entry ,   $loopback 
    // type of target is $uint<33>
    //  file nic.linked.aa, line 611
    // block %nicToProcessorInterface%loop
    //  file nic.linked.aa, line 606
    // do-while statement  
    //  file nic.linked.aa, line 608
    // merge-statement  
    //  file nic.linked.aa, line 610
    // 			$phi rdata := 			  AFB_NIC_RESPONSE $on   $entry ,   $loopback 
    // type of target is $uint<33>
    //  file nic.linked.aa, line 611
    // AFB_NIC_RESPONSE
    $W[RPIPE_AFB_NIC_RESPONSE_1462_wire] : $int<33>
    // rdata
    $W[rdata_1460] : $int<33>
    // 			control_word_response_pipe := ($bitcast ($uint<64>) rdata ) $buffering 1// bits of buffering = 64. 
    //  file nic.linked.aa, line 614
    // ($bitcast ($uint<64>) rdata )
    $intermediate $W[type_cast_1466_wire] : $int<64>
    // control_word_response_pipe
    // datapath-instances for block %nicToProcessorInterface%loop
    //  file nic.linked.aa, line 606
    // datapath-instances for do-while  
    //  file nic.linked.aa, line 608
    ==0? [do_while_stmt_1458_branch] (konst_1469_wire_constant)
    $flowthrough
    // data-path instances for merge  
    //  file nic.linked.aa, line 610
    // 			$phi rdata := 			  AFB_NIC_RESPONSE $on   $entry ,   $loopback 
    // type of target is $uint<33>
    //  file nic.linked.aa, line 611
    // AFB_NIC_RESPONSE
    $ioport $in [RPIPE_AFB_NIC_RESPONSE_1462_inst] (AFB_NIC_RESPONSE) (RPIPE_AFB_NIC_RESPONSE_1462_wire)  $fullrate 
    $buffering $out RPIPE_AFB_NIC_RESPONSE_1462_inst RPIPE_AFB_NIC_RESPONSE_1462_wire 1
    # := [ssrc_phi_stmt_1460] (RPIPE_AFB_NIC_RESPONSE_1462_wire) (rdata_1460)    $flowthrough 
    // 			control_word_response_pipe := ($bitcast ($uint<64>) rdata ) $buffering 1// bits of buffering = 64. 
    //  file nic.linked.aa, line 614
    // ($bitcast ($uint<64>) rdata )
    # := [type_cast_1466_inst] (rdata_1460) (type_cast_1466_wire)     $fullrate
    $buffering  $out type_cast_1466_inst type_cast_1466_wire 1
    $delay type_cast_1466_inst 1
    // control_word_response_pipe
    $ioport $out [WPIPE_control_word_response_pipe_1464_inst]  (type_cast_1466_wire) (control_word_response_pipe)  $fullrate 
  }
  // end data-path
  // CP-DP links for do-while  do_while_stmt_1458
  //  file nic.linked.aa, line 608
  // AFB_NIC_RESPONSE
  RPIPE_AFB_NIC_RESPONSE_1462_inst <=> (branch_block_stmt_1457/do_while_stmt_1458/do_while_stmt_1458_loop_body/RPIPE_AFB_NIC_RESPONSE_1462_Sample/rr branch_block_stmt_1457/do_while_stmt_1458/do_while_stmt_1458_loop_body/RPIPE_AFB_NIC_RESPONSE_1462_Update/cr) (branch_block_stmt_1457/do_while_stmt_1458/do_while_stmt_1458_loop_body/RPIPE_AFB_NIC_RESPONSE_1462_Sample/ra branch_block_stmt_1457/do_while_stmt_1458/do_while_stmt_1458_loop_body/RPIPE_AFB_NIC_RESPONSE_1462_Update/ca)
  // 			control_word_response_pipe := ($bitcast ($uint<64>) rdata ) $buffering 1// bits of buffering = 64. 
  //  file nic.linked.aa, line 614
  // rdata
  // ($bitcast ($uint<64>) rdata )
  type_cast_1466_inst <=> (branch_block_stmt_1457/do_while_stmt_1458/do_while_stmt_1458_loop_body/type_cast_1466_Sample/rr branch_block_stmt_1457/do_while_stmt_1458/do_while_stmt_1458_loop_body/type_cast_1466_Update/cr) (branch_block_stmt_1457/do_while_stmt_1458/do_while_stmt_1458_loop_body/type_cast_1466_Sample/ra branch_block_stmt_1457/do_while_stmt_1458/do_while_stmt_1458_loop_body/type_cast_1466_Update/ca)
  // control_word_response_pipe
  WPIPE_control_word_response_pipe_1464_inst <=> (branch_block_stmt_1457/do_while_stmt_1458/do_while_stmt_1458_loop_body/WPIPE_control_word_response_pipe_1464_Sample/req branch_block_stmt_1457/do_while_stmt_1458/do_while_stmt_1458_loop_body/WPIPE_control_word_response_pipe_1464_Update/req) (branch_block_stmt_1457/do_while_stmt_1458/do_while_stmt_1458_loop_body/WPIPE_control_word_response_pipe_1464_Sample/ack branch_block_stmt_1457/do_while_stmt_1458/do_while_stmt_1458_loop_body/WPIPE_control_word_response_pipe_1464_Update/ack)
  do_while_stmt_1458_branch <=> (branch_block_stmt_1457/do_while_stmt_1458/do_while_stmt_1458_loop_body/condition_evaluated) (branch_block_stmt_1457/do_while_stmt_1458/loop_exit/ack branch_block_stmt_1457/do_while_stmt_1458/loop_taken/ack)
}
$module [processorToNicInterface] 
{
  // pipe-declarations for block %processorToNicInterface
  //  file nic.linked.aa, line 618
  // pipe-declarations for block %processorToNicInterface%loop
  //  file nic.linked.aa, line 623
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    <>[branch_block_stmt_1473] // Branch Block  file nic.linked.aa, line 623
    {
      $P [branch_block_stmt_1473__entry__]
      branch_block_stmt_1473__entry__ <-| ($entry)
      $P [branch_block_stmt_1473__exit__]
      branch_block_stmt_1473__exit__ |-> ($exit)
      $P [do_while_stmt_1474__entry__] 
      $P [do_while_stmt_1474__exit__] 
      // do-while-statement  
      //  file nic.linked.aa, line 625
      <o> [do_while_stmt_1474]  $depth 7 $buffering 1 
      {
        $P[do_while_stmt_1474__entry__] 
        $P[do_while_stmt_1474__exit__] 
        $P[loop_back] 
        $P[condition_done] 
        $P[loop_body_done] 
        $pipeline [do_while_stmt_1474_loop_body] 
        {
          // Pipelined!
          $T[back_edge_to_loop_body] 
          $T[first_time_through_loop_body] 
          $T[loop_body_start] 
          $T[condition_evaluated] 
          $transitionmerge [entry_tmerge] (back_edge_to_loop_body first_time_through_loop_body) (loop_body_start)
          $entry <-& (loop_body_start)
          $T[aggregated_phi_sample_req] 
          $T[aggregated_phi_sample_ack] 
          $T[aggregated_phi_update_req] 
          $T[aggregated_phi_update_ack] 
          // do not loop-back unless all phi's have used up their triggering tokens.
          condition_evaluated <-& (aggregated_phi_update_ack)
          aggregated_phi_sample_req o<-& (aggregated_phi_update_ack 0)
          // start:  single source PHI statement phi_stmt_1476
          // 			$phi rdata0 := 			  control_word_request_pipe_0 $on   $entry ,   $loopback 
          // type of target is $uint<32>
          $T[phi_stmt_1476_sample_start_] 
          $T[phi_stmt_1476_sample_completed_] 
          $T[phi_stmt_1476_update_start_] 
          $T[phi_stmt_1476_update_completed_] 
          aggregated_phi_sample_req <-& (phi_stmt_1476_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_1476_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_1476_update_start_)
          // non-implicit source expression in single-source phi
          // control_word_request_pipe_0
          $T[RPIPE_control_word_request_pipe_0_1478_sample_start_] 
          $T[RPIPE_control_word_request_pipe_0_1478_sample_completed_] 
          $T[RPIPE_control_word_request_pipe_0_1478_update_start_] 
          $T[RPIPE_control_word_request_pipe_0_1478_update_completed_] 
          ;;[RPIPE_control_word_request_pipe_0_1478_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_control_word_request_pipe_0_1478_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_control_word_request_pipe_0_1478_sample_start_ &-> (RPIPE_control_word_request_pipe_0_1478_Sample)
          RPIPE_control_word_request_pipe_0_1478_sample_completed_ <-& (RPIPE_control_word_request_pipe_0_1478_Sample)
          RPIPE_control_word_request_pipe_0_1478_update_start_ <-& (RPIPE_control_word_request_pipe_0_1478_sample_completed_)
          RPIPE_control_word_request_pipe_0_1478_update_start_ &-> (RPIPE_control_word_request_pipe_0_1478_Update)
          RPIPE_control_word_request_pipe_0_1478_update_completed_ <-& (RPIPE_control_word_request_pipe_0_1478_Update)
          RPIPE_control_word_request_pipe_0_1478_sample_start_ o<-& (RPIPE_control_word_request_pipe_0_1478_update_completed_ 0)
          // RAW reenables for control_word_request_pipe_0
          // producer  and  consumer are both determined by PHI statements.
          aggregated_phi_sample_req &-> (RPIPE_control_word_request_pipe_0_1478_sample_start_)
          aggregated_phi_sample_ack <-& (RPIPE_control_word_request_pipe_0_1478_sample_completed_)
          aggregated_phi_update_req &-> (RPIPE_control_word_request_pipe_0_1478_update_start_)
          phi_stmt_1476_update_completed_ <-& (RPIPE_control_word_request_pipe_0_1478_update_completed_)
          aggregated_phi_update_ack <-& (phi_stmt_1476_update_completed_)
          // done: PHI Statement phi_stmt_1476
          // start:  single source PHI statement phi_stmt_1479
          // 			$phi rdata1 := 			  control_word_request_pipe_1 $on   $entry ,   $loopback 
          // type of target is $uint<64>
          $T[phi_stmt_1479_sample_start_] 
          $T[phi_stmt_1479_sample_completed_] 
          $T[phi_stmt_1479_update_start_] 
          $T[phi_stmt_1479_update_completed_] 
          aggregated_phi_sample_req <-& (phi_stmt_1479_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_1479_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_1479_update_start_)
          // non-implicit source expression in single-source phi
          // control_word_request_pipe_1
          $T[RPIPE_control_word_request_pipe_1_1481_sample_start_] 
          $T[RPIPE_control_word_request_pipe_1_1481_sample_completed_] 
          $T[RPIPE_control_word_request_pipe_1_1481_update_start_] 
          $T[RPIPE_control_word_request_pipe_1_1481_update_completed_] 
          ;;[RPIPE_control_word_request_pipe_1_1481_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_control_word_request_pipe_1_1481_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_control_word_request_pipe_1_1481_sample_start_ &-> (RPIPE_control_word_request_pipe_1_1481_Sample)
          RPIPE_control_word_request_pipe_1_1481_sample_completed_ <-& (RPIPE_control_word_request_pipe_1_1481_Sample)
          RPIPE_control_word_request_pipe_1_1481_update_start_ <-& (RPIPE_control_word_request_pipe_1_1481_sample_completed_)
          RPIPE_control_word_request_pipe_1_1481_update_start_ &-> (RPIPE_control_word_request_pipe_1_1481_Update)
          RPIPE_control_word_request_pipe_1_1481_update_completed_ <-& (RPIPE_control_word_request_pipe_1_1481_Update)
          RPIPE_control_word_request_pipe_1_1481_sample_start_ o<-& (RPIPE_control_word_request_pipe_1_1481_update_completed_ 0)
          // RAW reenables for control_word_request_pipe_1
          // producer  and  consumer are both determined by PHI statements.
          aggregated_phi_sample_req &-> (RPIPE_control_word_request_pipe_1_1481_sample_start_)
          aggregated_phi_sample_ack <-& (RPIPE_control_word_request_pipe_1_1481_sample_completed_)
          aggregated_phi_update_req &-> (RPIPE_control_word_request_pipe_1_1481_update_start_)
          phi_stmt_1479_update_completed_ <-& (RPIPE_control_word_request_pipe_1_1481_update_completed_)
          aggregated_phi_update_ack <-& (phi_stmt_1479_update_completed_)
          // done: PHI Statement phi_stmt_1479
          // start:  			AFB_NIC_REQUEST := (( $slice rdata1 41 0 )  && rdata0) $buffering 1// bits of buffering = 74. 
          //  file nic.linked.aa, line 634
          // Source expression
          // (( $slice rdata1 41 0 )  && rdata0)
          $T[CONCAT_u42_u74_1491_sample_start_] 
          $T[CONCAT_u42_u74_1491_sample_completed_] 
          $T[CONCAT_u42_u74_1491_update_start_] 
          $T[CONCAT_u42_u74_1491_update_completed_] 
          // ( $slice rdata1 41 0 ) 
          // rdata1
          // rdata0
          // start: Forward dependencies from ( $slice rdata1 41 0 )  to transition CONCAT_u42_u74_1491_sample_start_
          CONCAT_u42_u74_1491_sample_start_ <-& (phi_stmt_1479_update_completed_)
          // done: Forward dependencies from ( $slice rdata1 41 0 )  to transition CONCAT_u42_u74_1491_sample_start_
          // start: Forward dependencies from rdata0 to transition CONCAT_u42_u74_1491_sample_start_
          CONCAT_u42_u74_1491_sample_start_ <-& (phi_stmt_1476_update_completed_)
          // done: Forward dependencies from rdata0 to transition CONCAT_u42_u74_1491_sample_start_
          ;;[CONCAT_u42_u74_1491_Sample] 
          {
            // binary expression 
            $T [rr] $T [ra]  // (split) binary operation 
          }
          ;;[CONCAT_u42_u74_1491_Update] 
          {
            // binary expression 
            $T [cr] $T [ca] // (split) binary operation 
          }
          CONCAT_u42_u74_1491_sample_start_ &-> (CONCAT_u42_u74_1491_Sample)
          CONCAT_u42_u74_1491_sample_completed_ <-& (CONCAT_u42_u74_1491_Sample)
          CONCAT_u42_u74_1491_sample_completed_ &-> ($null)
          CONCAT_u42_u74_1491_update_start_ &-> (CONCAT_u42_u74_1491_Update)
          CONCAT_u42_u74_1491_update_completed_ <-& (CONCAT_u42_u74_1491_Update)
          // RAW reenables for ( $slice rdata1 41 0 ) 
          phi_stmt_1479_update_start_ o<-& (CONCAT_u42_u74_1491_sample_completed_ 0)
          // RAW reenables for rdata0
          phi_stmt_1476_update_start_ o<-& (CONCAT_u42_u74_1491_sample_completed_ 0)
          // self-release: 
          CONCAT_u42_u74_1491_sample_start_ o<-& (CONCAT_u42_u74_1491_sample_completed_ 1)
          $null &-> (CONCAT_u42_u74_1491_update_start_)
          CONCAT_u42_u74_1491_update_start_ o<-& (CONCAT_u42_u74_1491_update_completed_ 0)
          // Target expression
          // (as target) AFB_NIC_REQUEST
          $T[WPIPE_AFB_NIC_REQUEST_1486_sample_start_] 
          $T[WPIPE_AFB_NIC_REQUEST_1486_sample_completed_] 
          $T[WPIPE_AFB_NIC_REQUEST_1486_update_start_] 
          $T[WPIPE_AFB_NIC_REQUEST_1486_update_completed_] 
          ;;[WPIPE_AFB_NIC_REQUEST_1486_Sample] 
          {
            // pipe write sample-start AFB_NIC_REQUEST
            $T [req] $T [ack] 
          }
          ;;[WPIPE_AFB_NIC_REQUEST_1486_Update] 
          {
            // pipe write update (complete) AFB_NIC_REQUEST
            $T [req] $T [ack] 
          }
          WPIPE_AFB_NIC_REQUEST_1486_sample_start_ &-> (WPIPE_AFB_NIC_REQUEST_1486_Sample)
          WPIPE_AFB_NIC_REQUEST_1486_sample_completed_ <-& (WPIPE_AFB_NIC_REQUEST_1486_Sample)
          WPIPE_AFB_NIC_REQUEST_1486_update_start_ <-& (WPIPE_AFB_NIC_REQUEST_1486_sample_completed_)
          WPIPE_AFB_NIC_REQUEST_1486_update_start_ &-> (WPIPE_AFB_NIC_REQUEST_1486_Update)
          WPIPE_AFB_NIC_REQUEST_1486_update_completed_ <-& (WPIPE_AFB_NIC_REQUEST_1486_Update)
          WPIPE_AFB_NIC_REQUEST_1486_sample_start_ o<-& (WPIPE_AFB_NIC_REQUEST_1486_update_completed_ 0)
          // start: Forward dependencies from (( $slice rdata1 41 0 )  && rdata0) to transition WPIPE_AFB_NIC_REQUEST_1486_sample_start_
          WPIPE_AFB_NIC_REQUEST_1486_sample_start_ <-& (CONCAT_u42_u74_1491_update_completed_)
          // done: Forward dependencies from (( $slice rdata1 41 0 )  && rdata0) to transition WPIPE_AFB_NIC_REQUEST_1486_sample_start_
          // RAW reenables for (( $slice rdata1 41 0 )  && rdata0)
          CONCAT_u42_u74_1491_update_start_ o<-& (WPIPE_AFB_NIC_REQUEST_1486_sample_completed_ 0)
          // end:  			AFB_NIC_REQUEST := (( $slice rdata1 41 0 )  && rdata0) $buffering 1// bits of buffering = 74. 
          $T [loop_body_delay_to_condition_start] $delay
          loop_body_start &-> (loop_body_delay_to_condition_start)
          loop_body_delay_to_condition_start &-> (condition_evaluated)
          condition_evaluated &-> ($null)
          // load-store dependencies..
          // pipe read/write dependencies for pipe AFB_NIC_REQUEST
          // read-dependencies for pipe AFB_NIC_REQUEST
          // write-dependencies for pipe AFB_NIC_REQUEST
          // signal write dependencies for AFB_NIC_REQUEST
          // pipe read/write dependencies for pipe control_word_request_pipe_0
          // read-dependencies for pipe control_word_request_pipe_0
          // write-dependencies for pipe control_word_request_pipe_0
          // signal write dependencies for control_word_request_pipe_0
          // pipe read/write dependencies for pipe control_word_request_pipe_1
          // read-dependencies for pipe control_word_request_pipe_1
          // write-dependencies for pipe control_word_request_pipe_1
          // signal write dependencies for control_word_request_pipe_1
        }
        ( first_time_through_loop_body  back_edge_to_loop_body) 
        ( condition_evaluated )
        ;; [loop_exit] 
        {
          $T [ack] 
        }
        ;; [loop_taken] 
        {
          $T [ack] 
        }
        do_while_stmt_1474__entry__ <-| ($entry)
        loop_body_done <-| ( do_while_stmt_1474_loop_body ) 
        condition_done |-> (loop_exit loop_taken)
        do_while_stmt_1474__exit__ |-> ($exit)
        $bind condition_done <= do_while_stmt_1474_loop_body : condition_evaluated
        $bind do_while_stmt_1474__entry__  => do_while_stmt_1474_loop_body : first_time_through_loop_body 
        $bind loop_back  => do_while_stmt_1474_loop_body : back_edge_to_loop_body 
        $terminate (loop_exit loop_taken loop_body_done) (loop_back do_while_stmt_1474__exit__)
      }
      do_while_stmt_1474__entry__ |-> (do_while_stmt_1474)
      do_while_stmt_1474__exit__ <-| (do_while_stmt_1474)
      do_while_stmt_1474__entry__ <-| (branch_block_stmt_1473__entry__)
      do_while_stmt_1474__exit__ |-> (branch_block_stmt_1473__exit__)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %processorToNicInterface%loop%
    //  file nic.linked.aa, line 627
    // constant-object-declarations for block %processorToNicInterface%loop
    //  file nic.linked.aa, line 623
    // constant-object-declarations for block %processorToNicInterface
    //  file nic.linked.aa, line 618
    // constant-declarations for block %processorToNicInterface%loop
    //  file nic.linked.aa, line 623
    // do-while statement  
    //  file nic.linked.aa, line 625
    // 1 
    $constant $W[konst_1494_wire_constant] : $int<1> := _b1// 1
    // constant-declarations for block %processorToNicInterface%loop%
    //  file nic.linked.aa, line 627
    // constant-declarations for phi:  			$phi rdata0 := 			  control_word_request_pipe_0 $on   $entry ,   $loopback 
    // type of target is $uint<32>
    //  file nic.linked.aa, line 628
    // constant-declarations for phi:  			$phi rdata1 := 			  control_word_request_pipe_1 $on   $entry ,   $loopback 
    // type of target is $uint<64>
    //  file nic.linked.aa, line 630
    // block %processorToNicInterface%loop
    //  file nic.linked.aa, line 623
    // do-while statement  
    //  file nic.linked.aa, line 625
    // merge-statement  
    //  file nic.linked.aa, line 627
    // 			$phi rdata0 := 			  control_word_request_pipe_0 $on   $entry ,   $loopback 
    // type of target is $uint<32>
    //  file nic.linked.aa, line 628
    // control_word_request_pipe_0
    $W[RPIPE_control_word_request_pipe_0_1478_wire] : $int<32>
    // rdata0
    $W[rdata0_1476] : $int<32>
    // 			$phi rdata1 := 			  control_word_request_pipe_1 $on   $entry ,   $loopback 
    // type of target is $uint<64>
    //  file nic.linked.aa, line 630
    // control_word_request_pipe_1
    $W[RPIPE_control_word_request_pipe_1_1481_wire] : $int<64>
    // rdata1
    $W[rdata1_1479] : $int<64>
    // 			AFB_NIC_REQUEST := (( $slice rdata1 41 0 )  && rdata0) $buffering 1// bits of buffering = 74. 
    //  file nic.linked.aa, line 634
    // ( $slice rdata1 41 0 ) 
    $intermediate $W[slice_1489_wire] : $int<42>
    // (( $slice rdata1 41 0 )  && rdata0)
    $intermediate $W[CONCAT_u42_u74_1491_wire] : $int<74>
    // AFB_NIC_REQUEST
    // datapath-instances for block %processorToNicInterface%loop
    //  file nic.linked.aa, line 623
    // datapath-instances for do-while  
    //  file nic.linked.aa, line 625
    ==0? [do_while_stmt_1474_branch] (konst_1494_wire_constant)
    $flowthrough
    // data-path instances for merge  
    //  file nic.linked.aa, line 627
    // 			$phi rdata0 := 			  control_word_request_pipe_0 $on   $entry ,   $loopback 
    // type of target is $uint<32>
    //  file nic.linked.aa, line 628
    // control_word_request_pipe_0
    $ioport $in [RPIPE_control_word_request_pipe_0_1478_inst] (control_word_request_pipe_0) (RPIPE_control_word_request_pipe_0_1478_wire)  $fullrate 
    $buffering $out RPIPE_control_word_request_pipe_0_1478_inst RPIPE_control_word_request_pipe_0_1478_wire 1
    # := [ssrc_phi_stmt_1476] (RPIPE_control_word_request_pipe_0_1478_wire) (rdata0_1476)    $flowthrough 
    // 			$phi rdata1 := 			  control_word_request_pipe_1 $on   $entry ,   $loopback 
    // type of target is $uint<64>
    //  file nic.linked.aa, line 630
    // control_word_request_pipe_1
    $ioport $in [RPIPE_control_word_request_pipe_1_1481_inst] (control_word_request_pipe_1) (RPIPE_control_word_request_pipe_1_1481_wire)  $fullrate 
    $buffering $out RPIPE_control_word_request_pipe_1_1481_inst RPIPE_control_word_request_pipe_1_1481_wire 1
    # := [ssrc_phi_stmt_1479] (RPIPE_control_word_request_pipe_1_1481_wire) (rdata1_1479)    $flowthrough 
    // 			AFB_NIC_REQUEST := (( $slice rdata1 41 0 )  && rdata0) $buffering 1// bits of buffering = 74. 
    //  file nic.linked.aa, line 634
    // ( $slice rdata1 41 0 ) 
    [:] [slice_1489_inst] (rdata1_1479 41 0) (slice_1489_wire)  $flowthrough
    $delay slice_1489_inst 0
    // (( $slice rdata1 41 0 )  && rdata0)
    &&[CONCAT_u42_u74_1491_inst] (slice_1489_wire rdata0_1476) (CONCAT_u42_u74_1491_wire)    $fullrate
    $buffering  $out CONCAT_u42_u74_1491_inst CONCAT_u42_u74_1491_wire 1
    $delay CONCAT_u42_u74_1491_inst 1
    // AFB_NIC_REQUEST
    $ioport $out [WPIPE_AFB_NIC_REQUEST_1486_inst]  (CONCAT_u42_u74_1491_wire) (AFB_NIC_REQUEST)  $fullrate 
  }
  // end data-path
  // CP-DP links for do-while  do_while_stmt_1474
  //  file nic.linked.aa, line 625
  // control_word_request_pipe_0
  RPIPE_control_word_request_pipe_0_1478_inst <=> (branch_block_stmt_1473/do_while_stmt_1474/do_while_stmt_1474_loop_body/RPIPE_control_word_request_pipe_0_1478_Sample/rr branch_block_stmt_1473/do_while_stmt_1474/do_while_stmt_1474_loop_body/RPIPE_control_word_request_pipe_0_1478_Update/cr) (branch_block_stmt_1473/do_while_stmt_1474/do_while_stmt_1474_loop_body/RPIPE_control_word_request_pipe_0_1478_Sample/ra branch_block_stmt_1473/do_while_stmt_1474/do_while_stmt_1474_loop_body/RPIPE_control_word_request_pipe_0_1478_Update/ca)
  // control_word_request_pipe_1
  RPIPE_control_word_request_pipe_1_1481_inst <=> (branch_block_stmt_1473/do_while_stmt_1474/do_while_stmt_1474_loop_body/RPIPE_control_word_request_pipe_1_1481_Sample/rr branch_block_stmt_1473/do_while_stmt_1474/do_while_stmt_1474_loop_body/RPIPE_control_word_request_pipe_1_1481_Update/cr) (branch_block_stmt_1473/do_while_stmt_1474/do_while_stmt_1474_loop_body/RPIPE_control_word_request_pipe_1_1481_Sample/ra branch_block_stmt_1473/do_while_stmt_1474/do_while_stmt_1474_loop_body/RPIPE_control_word_request_pipe_1_1481_Update/ca)
  // 			AFB_NIC_REQUEST := (( $slice rdata1 41 0 )  && rdata0) $buffering 1// bits of buffering = 74. 
  //  file nic.linked.aa, line 634
  // (( $slice rdata1 41 0 )  && rdata0)
  // rdata1
  // rdata0
  CONCAT_u42_u74_1491_inst <=> (branch_block_stmt_1473/do_while_stmt_1474/do_while_stmt_1474_loop_body/CONCAT_u42_u74_1491_Sample/rr branch_block_stmt_1473/do_while_stmt_1474/do_while_stmt_1474_loop_body/CONCAT_u42_u74_1491_Update/cr) (branch_block_stmt_1473/do_while_stmt_1474/do_while_stmt_1474_loop_body/CONCAT_u42_u74_1491_Sample/ra branch_block_stmt_1473/do_while_stmt_1474/do_while_stmt_1474_loop_body/CONCAT_u42_u74_1491_Update/ca)
  // AFB_NIC_REQUEST
  WPIPE_AFB_NIC_REQUEST_1486_inst <=> (branch_block_stmt_1473/do_while_stmt_1474/do_while_stmt_1474_loop_body/WPIPE_AFB_NIC_REQUEST_1486_Sample/req branch_block_stmt_1473/do_while_stmt_1474/do_while_stmt_1474_loop_body/WPIPE_AFB_NIC_REQUEST_1486_Update/req) (branch_block_stmt_1473/do_while_stmt_1474/do_while_stmt_1474_loop_body/WPIPE_AFB_NIC_REQUEST_1486_Sample/ack branch_block_stmt_1473/do_while_stmt_1474/do_while_stmt_1474_loop_body/WPIPE_AFB_NIC_REQUEST_1486_Update/ack)
  do_while_stmt_1474_branch <=> (branch_block_stmt_1473/do_while_stmt_1474/do_while_stmt_1474_loop_body/condition_evaluated) (branch_block_stmt_1473/do_while_stmt_1474/loop_exit/ack branch_block_stmt_1473/do_while_stmt_1474/loop_taken/ack)
}
$module [transmitPacket] 
{
  $in packet_pointer:$int<32>
  // can point into 
  $out status:$int<1>
  // can point into 
  // pipe-declarations for block %transmitPacket
  //  file nic.linked.aa, line 638
  // pipe-declarations for block %transmitPacket%loop
  //  file nic.linked.aa, line 650
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    ::[assign_stmt_1507_to_assign_stmt_1533] 
    {
      // start: WAR dependencies for control_data_addr
      // ignored out-of-scope w_root  packet_pointer : $uint<32> 
      // done: WAR dependencies for control_data_addr
      // start:  	$volatile control_data_addr := ($bitcast ($uint<36>) (( $slice packet_pointer 31 0 )  && ($bitcast ($uint<4>) _b0  )) ) $buffering 1
      //  file nic.linked.aa, line 643
      // volatile! 
      // Source expression
      // ($bitcast ($uint<36>) (( $slice packet_pointer 31 0 )  && ($bitcast ($uint<4>) _b0  )) )
      // (( $slice packet_pointer 31 0 )  && ($bitcast ($uint<4>) _b0  ))
      // ( $slice packet_pointer 31 0 ) 
      // packet_pointer
      // Target expression
      // (as target) control_data_addr
      // start: WAR dependencies for control_data_addr
      // ignored out-of-scope w_root  packet_pointer : $uint<32> 
      // done: WAR dependencies for control_data_addr
      // end:  	$volatile control_data_addr := ($bitcast ($uint<36>) (( $slice packet_pointer 31 0 )  && ($bitcast ($uint<4>) _b0  )) ) $buffering 1
      // start: 	$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b1  ) FULL_BYTE_MASK control_data_addr ($bitcast ($uint<64>) _b0  ) ) (control_data ) 
      //  file nic.linked.aa, line 645
      $T[call_stmt_1520_sample_start_] 
      $T[call_stmt_1520_sample_completed_] 
      $T[call_stmt_1520_update_start_] 
      $T[call_stmt_1520_update_completed_] 
      // Call input argument 0
      // Call input argument 1
      // Call input argument 2
      // Call input argument 3
      // control_data_addr
      // Call input argument 4
      // start: Forward dependencies from control_data_addr to transition call_stmt_1520_sample_start_
      // done: Forward dependencies from control_data_addr to transition call_stmt_1520_sample_start_
      ;;[call_stmt_1520_Sample] 
      {
        $T [crr] $T [cra] 
      }
      ;;[call_stmt_1520_Update] 
      {
        $T [ccr] $T [cca] 
      }
      call_stmt_1520_sample_start_ &-> (call_stmt_1520_Sample)
      call_stmt_1520_sample_completed_ <-& (call_stmt_1520_Sample)
      call_stmt_1520_sample_completed_ &-> ($null)
      call_stmt_1520_update_start_ &-> (call_stmt_1520_Update)
      call_stmt_1520_update_completed_ <-& (call_stmt_1520_Update)
      // Call output argument 0
      // (as target) control_data
      // start: WAR dependencies for control_data
      // done: WAR dependencies for control_data
      // end: 	$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b1  ) FULL_BYTE_MASK control_data_addr ($bitcast ($uint<64>) _b0  ) ) (control_data ) 
      // start: WAR dependencies for unused
      // done: WAR dependencies for unused
      // start:  	$volatile unused := ( $slice control_data 59 16 )  $buffering 1
      //  file nic.linked.aa, line 646
      // volatile! 
      // Source expression
      // ( $slice control_data 59 16 ) 
      // control_data
      // Target expression
      // (as target) unused
      // start: WAR dependencies for unused
      // done: WAR dependencies for unused
      // end:  	$volatile unused := ( $slice control_data 59 16 )  $buffering 1
      // start: WAR dependencies for packet_size
      // done: WAR dependencies for packet_size
      // start:  	$volatile packet_size := ( $slice control_data 15 8 )  $buffering 1
      //  file nic.linked.aa, line 647
      // volatile! 
      // Source expression
      // ( $slice control_data 15 8 ) 
      // control_data
      // Target expression
      // (as target) packet_size
      // start: WAR dependencies for packet_size
      // done: WAR dependencies for packet_size
      // end:  	$volatile packet_size := ( $slice control_data 15 8 )  $buffering 1
      // start: WAR dependencies for last_tkeep
      // done: WAR dependencies for last_tkeep
      // start:  	$volatile last_tkeep := ( $slice control_data 7 0 )  $buffering 1
      //  file nic.linked.aa, line 648
      // volatile! 
      // Source expression
      // ( $slice control_data 7 0 ) 
      // control_data
      // Target expression
      // (as target) last_tkeep
      // start: WAR dependencies for last_tkeep
      // done: WAR dependencies for last_tkeep
      // end:  	$volatile last_tkeep := ( $slice control_data 7 0 )  $buffering 1
      // load-store dependencies..
      // pipe read/write dependencies for pipe MEMORY_TO_NIC_RESPONSE
      // read-dependencies for pipe MEMORY_TO_NIC_RESPONSE
      // write-dependencies for pipe MEMORY_TO_NIC_RESPONSE
      // signal write dependencies for MEMORY_TO_NIC_RESPONSE
      // pipe read/write dependencies for pipe NIC_TO_MEMORY_REQUEST
      // read-dependencies for pipe NIC_TO_MEMORY_REQUEST
      // write-dependencies for pipe NIC_TO_MEMORY_REQUEST
      // signal write dependencies for NIC_TO_MEMORY_REQUEST
    }
    <>[branch_block_stmt_1537] // Branch Block  file nic.linked.aa, line 650
    {
      $P [branch_block_stmt_1537__entry__]
      branch_block_stmt_1537__entry__ <-| ($entry)
      $P [branch_block_stmt_1537__exit__]
      branch_block_stmt_1537__exit__ |-> ($exit)
      $P [do_while_stmt_1538__entry__] 
      $P [do_while_stmt_1538__exit__] 
      $P [call_stmt_1604_to_assign_stmt_1622__entry__] 
      $P [call_stmt_1604_to_assign_stmt_1622__exit__] 
      // do-while-statement  
      //  file nic.linked.aa, line 652
      <o> [do_while_stmt_1538]  $depth 31 $buffering 1 
      {
        $P[do_while_stmt_1538__entry__] 
        $P[do_while_stmt_1538__exit__] 
        $P[loop_back] 
        $P[condition_done] 
        $P[loop_body_done] 
        $pipeline [do_while_stmt_1538_loop_body] 
        {
          // Pipelined!
          $T[back_edge_to_loop_body] 
          $T[first_time_through_loop_body] 
          $T[loop_body_start] 
          $T[condition_evaluated] 
          $transitionmerge [entry_tmerge] (back_edge_to_loop_body first_time_through_loop_body) (loop_body_start)
          $entry <-& (loop_body_start)
          $T[aggregated_phi_sample_req] 
          $T[aggregated_phi_sample_ack] 
          $T[aggregated_phi_update_req] 
          $T[aggregated_phi_update_ack] 
          // do not loop-back unless all phi's have used up their triggering tokens.
          condition_evaluated <-& (aggregated_phi_update_ack)
          aggregated_phi_sample_req o<-& (aggregated_phi_update_ack 0)
          // start:  PHI statement phi_stmt_1540
          // 			$phi count_down := 			  (packet_size - 16 ) $on   $entry 			  ncount_down $on   $loopback 
          // type of target is $uint<8>
          $T[phi_stmt_1540_sample_start_] 
          $T[phi_stmt_1540_sample_completed_] 
          $T[phi_stmt_1540_update_start_] 
          $T[phi_stmt_1540_update_completed_] 
          $T[phi_stmt_1540_sample_start__ps] 
          phi_stmt_1540_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_1540_sample_completed__ps] 
          phi_stmt_1540_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_1540_update_start__ps] 
          phi_stmt_1540_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_1540_update_completed__ps] 
          phi_stmt_1540_update_completed_ <-& (phi_stmt_1540_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_1540_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_1540_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_1540_update_start_)
          $T[phi_stmt_1540_loopback_trigger] 
          phi_stmt_1540_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_1540_loopback_sample_req] 
          $T[phi_stmt_1540_loopback_sample_req_ps] 
          phi_stmt_1540_loopback_sample_req <-& (phi_stmt_1540_loopback_sample_req_ps)
          phi_stmt_1540_loopback_sample_req &-> ($null)
          $T[phi_stmt_1540_entry_trigger] 
          phi_stmt_1540_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_1540_entry_sample_req] 
          $T[phi_stmt_1540_entry_sample_req_ps] 
          phi_stmt_1540_entry_sample_req <-& (phi_stmt_1540_entry_sample_req_ps)
          phi_stmt_1540_entry_sample_req &-> ($null)
          phi_stmt_1540_update_start_ o<-& (phi_stmt_1540_update_completed_ 0)
          phi_stmt_1540_sample_start_ o<-& (phi_stmt_1540_sample_completed_ 1)
          $T[phi_stmt_1540_merged_reqs] 
          $T[phi_stmt_1540_phi_mux_ack] 
          $T[phi_stmt_1540_phi_mux_ack_ps] 
          phi_stmt_1540_phi_mux_ack_ps <-& (phi_stmt_1540_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_1540_update_completed_)
          $T[SUB_u8_u8_1544_sample_start__ps] 
          $T[SUB_u8_u8_1544_sample_completed__ps] 
          $T[SUB_u8_u8_1544_update_start__ps] 
          $T[SUB_u8_u8_1544_update_completed__ps] 
          // source expression in Phi alternative 0
          // (packet_size - 16 )
          $T[SUB_u8_u8_1544_sample_start_] 
          $T[SUB_u8_u8_1544_sample_completed_] 
          $T[SUB_u8_u8_1544_update_start_] 
          $T[SUB_u8_u8_1544_update_completed_] 
          // packet_size
          // start: Forward dependencies from packet_size to transition SUB_u8_u8_1544_sample_start_
          // done: Forward dependencies from packet_size to transition SUB_u8_u8_1544_sample_start_
          ;;[SUB_u8_u8_1544_Sample] 
          {
            // binary expression 
            $T [rr] $T [ra]  // (split) binary operation 
          }
          ;;[SUB_u8_u8_1544_Update] 
          {
            // binary expression 
            $T [cr] $T [ca] // (split) binary operation 
          }
          SUB_u8_u8_1544_sample_start_ &-> (SUB_u8_u8_1544_Sample)
          SUB_u8_u8_1544_sample_completed_ <-& (SUB_u8_u8_1544_Sample)
          SUB_u8_u8_1544_sample_completed_ &-> ($null)
          SUB_u8_u8_1544_update_start_ &-> (SUB_u8_u8_1544_Update)
          SUB_u8_u8_1544_update_completed_ <-& (SUB_u8_u8_1544_Update)
          // RAW reenables for packet_size
          // self-release: 
          SUB_u8_u8_1544_sample_start_ o<-& (SUB_u8_u8_1544_sample_completed_ 1)
          $null &-> (SUB_u8_u8_1544_update_start_)
          SUB_u8_u8_1544_update_start_ o<-& (SUB_u8_u8_1544_update_completed_ 0)
          // Phi start dependency
          SUB_u8_u8_1544_sample_start_ <-& (SUB_u8_u8_1544_sample_start__ps)
          SUB_u8_u8_1544_update_start_ <-& (SUB_u8_u8_1544_update_start__ps)
          // RAW reenables for (packet_size - 16 )
          // producer  and  consumer are both determined by PHI statements.
          // Phi complete dependency.
          SUB_u8_u8_1544_sample_completed__ps <-& (SUB_u8_u8_1544_sample_completed_)
          SUB_u8_u8_1544_update_completed__ps <-& (SUB_u8_u8_1544_update_completed_)
          $T[R_ncount_down_1545_sample_start__ps] 
          $T[R_ncount_down_1545_sample_completed__ps] 
          $T[R_ncount_down_1545_update_start__ps] 
          $T[R_ncount_down_1545_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_ncount_down_1545_sample_start_] 
          $T[R_ncount_down_1545_sample_completed_] 
          $T[R_ncount_down_1545_update_start_] 
          $T[R_ncount_down_1545_update_completed_] 
          ;;[R_ncount_down_1545_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_ncount_down_1545_sample_start_ &-> (R_ncount_down_1545_Sample)
          R_ncount_down_1545_sample_completed_ <-& (R_ncount_down_1545_Sample)
          ;;[R_ncount_down_1545_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_ncount_down_1545_update_start_ &-> (R_ncount_down_1545_Update)
          R_ncount_down_1545_update_completed_ <-& (R_ncount_down_1545_Update)
          // RAW reenables for ncount_down
          // Phi start dependency for implicit/constant alternative.
          R_ncount_down_1545_sample_start_ <-& (R_ncount_down_1545_sample_start__ps)
          R_ncount_down_1545_update_start_ <-& (R_ncount_down_1545_update_start__ps)
          // Phi complete dependency.
          R_ncount_down_1545_sample_completed__ps <-& (R_ncount_down_1545_sample_completed_)
          R_ncount_down_1545_update_completed__ps <-& (R_ncount_down_1545_update_completed_)
          $phisequencer [ phi_stmt_1540_phi_seq] : 
          phi_stmt_1540_entry_trigger SUB_u8_u8_1544_sample_start__ps SUB_u8_u8_1544_sample_completed__ps SUB_u8_u8_1544_update_start__ps SUB_u8_u8_1544_update_completed__ps phi_stmt_1540_loopback_trigger R_ncount_down_1545_sample_start__ps R_ncount_down_1545_sample_completed__ps R_ncount_down_1545_update_start__ps R_ncount_down_1545_update_completed__ps :
          phi_stmt_1540_sample_start__ps phi_stmt_1540_sample_completed__ps phi_stmt_1540_update_start__ps phi_stmt_1540_update_completed__ps :
          phi_stmt_1540_entry_sample_req_ps phi_stmt_1540_loopback_sample_req_ps : 
          phi_stmt_1540_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_1540
          // start:  PHI statement phi_stmt_1546
          // 			$phi mem_addr := 			  (control_data_addr + 24 ) $on   $entry 			  nmem_addr $on   $loopback 
          // type of target is $uint<36>
          $T[phi_stmt_1546_sample_start_] 
          $T[phi_stmt_1546_sample_completed_] 
          $T[phi_stmt_1546_update_start_] 
          $T[phi_stmt_1546_update_completed_] 
          $T[phi_stmt_1546_sample_start__ps] 
          phi_stmt_1546_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_1546_sample_completed__ps] 
          phi_stmt_1546_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_1546_update_start__ps] 
          phi_stmt_1546_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_1546_update_completed__ps] 
          phi_stmt_1546_update_completed_ <-& (phi_stmt_1546_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_1546_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_1546_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_1546_update_start_)
          $T[phi_stmt_1546_loopback_trigger] 
          phi_stmt_1546_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_1546_loopback_sample_req] 
          $T[phi_stmt_1546_loopback_sample_req_ps] 
          phi_stmt_1546_loopback_sample_req <-& (phi_stmt_1546_loopback_sample_req_ps)
          phi_stmt_1546_loopback_sample_req &-> ($null)
          $T[phi_stmt_1546_entry_trigger] 
          phi_stmt_1546_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_1546_entry_sample_req] 
          $T[phi_stmt_1546_entry_sample_req_ps] 
          phi_stmt_1546_entry_sample_req <-& (phi_stmt_1546_entry_sample_req_ps)
          phi_stmt_1546_entry_sample_req &-> ($null)
          phi_stmt_1546_update_start_ o<-& (phi_stmt_1546_update_completed_ 0)
          phi_stmt_1546_sample_start_ o<-& (phi_stmt_1546_sample_completed_ 1)
          $T[phi_stmt_1546_merged_reqs] 
          $T[phi_stmt_1546_phi_mux_ack] 
          $T[phi_stmt_1546_phi_mux_ack_ps] 
          phi_stmt_1546_phi_mux_ack_ps <-& (phi_stmt_1546_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_1546_update_completed_)
          $T[ADD_u36_u36_1550_sample_start__ps] 
          $T[ADD_u36_u36_1550_sample_completed__ps] 
          $T[ADD_u36_u36_1550_update_start__ps] 
          $T[ADD_u36_u36_1550_update_completed__ps] 
          // source expression in Phi alternative 0
          // (control_data_addr + 24 )
          $T[ADD_u36_u36_1550_sample_start_] 
          $T[ADD_u36_u36_1550_sample_completed_] 
          $T[ADD_u36_u36_1550_update_start_] 
          $T[ADD_u36_u36_1550_update_completed_] 
          // control_data_addr
          // start: Forward dependencies from control_data_addr to transition ADD_u36_u36_1550_sample_start_
          // done: Forward dependencies from control_data_addr to transition ADD_u36_u36_1550_sample_start_
          ;;[ADD_u36_u36_1550_Sample] 
          {
            // binary expression 
            $T [rr] $T [ra]  // (split) binary operation 
          }
          ;;[ADD_u36_u36_1550_Update] 
          {
            // binary expression 
            $T [cr] $T [ca] // (split) binary operation 
          }
          ADD_u36_u36_1550_sample_start_ &-> (ADD_u36_u36_1550_Sample)
          ADD_u36_u36_1550_sample_completed_ <-& (ADD_u36_u36_1550_Sample)
          ADD_u36_u36_1550_sample_completed_ &-> ($null)
          ADD_u36_u36_1550_update_start_ &-> (ADD_u36_u36_1550_Update)
          ADD_u36_u36_1550_update_completed_ <-& (ADD_u36_u36_1550_Update)
          // RAW reenables for control_data_addr
          // self-release: 
          ADD_u36_u36_1550_sample_start_ o<-& (ADD_u36_u36_1550_sample_completed_ 1)
          $null &-> (ADD_u36_u36_1550_update_start_)
          ADD_u36_u36_1550_update_start_ o<-& (ADD_u36_u36_1550_update_completed_ 0)
          // Phi start dependency
          ADD_u36_u36_1550_sample_start_ <-& (ADD_u36_u36_1550_sample_start__ps)
          ADD_u36_u36_1550_update_start_ <-& (ADD_u36_u36_1550_update_start__ps)
          // RAW reenables for (control_data_addr + 24 )
          // producer  and  consumer are both determined by PHI statements.
          // Phi complete dependency.
          ADD_u36_u36_1550_sample_completed__ps <-& (ADD_u36_u36_1550_sample_completed_)
          ADD_u36_u36_1550_update_completed__ps <-& (ADD_u36_u36_1550_update_completed_)
          $T[R_nmem_addr_1551_sample_start__ps] 
          $T[R_nmem_addr_1551_sample_completed__ps] 
          $T[R_nmem_addr_1551_update_start__ps] 
          $T[R_nmem_addr_1551_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_nmem_addr_1551_sample_start_] 
          $T[R_nmem_addr_1551_sample_completed_] 
          $T[R_nmem_addr_1551_update_start_] 
          $T[R_nmem_addr_1551_update_completed_] 
          ;;[R_nmem_addr_1551_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_nmem_addr_1551_sample_start_ &-> (R_nmem_addr_1551_Sample)
          R_nmem_addr_1551_sample_completed_ <-& (R_nmem_addr_1551_Sample)
          ;;[R_nmem_addr_1551_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_nmem_addr_1551_update_start_ &-> (R_nmem_addr_1551_Update)
          R_nmem_addr_1551_update_completed_ <-& (R_nmem_addr_1551_Update)
          // RAW reenables for nmem_addr
          // Phi start dependency for implicit/constant alternative.
          R_nmem_addr_1551_sample_start_ <-& (R_nmem_addr_1551_sample_start__ps)
          R_nmem_addr_1551_update_start_ <-& (R_nmem_addr_1551_update_start__ps)
          // Phi complete dependency.
          R_nmem_addr_1551_sample_completed__ps <-& (R_nmem_addr_1551_sample_completed_)
          R_nmem_addr_1551_update_completed__ps <-& (R_nmem_addr_1551_update_completed_)
          $phisequencer [ phi_stmt_1546_phi_seq] : 
          phi_stmt_1546_entry_trigger ADD_u36_u36_1550_sample_start__ps ADD_u36_u36_1550_sample_completed__ps ADD_u36_u36_1550_update_start__ps ADD_u36_u36_1550_update_completed__ps phi_stmt_1546_loopback_trigger R_nmem_addr_1551_sample_start__ps R_nmem_addr_1551_sample_completed__ps R_nmem_addr_1551_update_start__ps R_nmem_addr_1551_update_completed__ps :
          phi_stmt_1546_sample_start__ps phi_stmt_1546_sample_completed__ps phi_stmt_1546_update_start__ps phi_stmt_1546_update_completed__ps :
          phi_stmt_1546_entry_sample_req_ps phi_stmt_1546_loopback_sample_req_ps : 
          phi_stmt_1546_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_1546
          // start: 			$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b1  ) FULL_BYTE_MASK mem_addr ($bitcast ($uint<64>) _b0  ) ) (data ) 
          //  file nic.linked.aa, line 660
          $T[call_stmt_1562_sample_start_] 
          $T[call_stmt_1562_sample_completed_] 
          $T[call_stmt_1562_update_start_] 
          $T[call_stmt_1562_update_completed_] 
          // Call input argument 0
          // Call input argument 1
          // Call input argument 2
          // Call input argument 3
          // mem_addr
          // Call input argument 4
          // start: Forward dependencies from mem_addr to transition call_stmt_1562_sample_start_
          call_stmt_1562_sample_start_ <-& (phi_stmt_1546_update_completed_)
          // done: Forward dependencies from mem_addr to transition call_stmt_1562_sample_start_
          // RAW reenables for mem_addr
          phi_stmt_1546_update_start_ o<-& (call_stmt_1562_sample_completed_ 0)
          ;;[call_stmt_1562_Sample] 
          {
            $T [crr] $T [cra] 
          }
          ;;[call_stmt_1562_Update] 
          {
            $T [ccr] $T [cca] 
          }
          call_stmt_1562_sample_start_ &-> (call_stmt_1562_Sample)
          call_stmt_1562_sample_completed_ <-& (call_stmt_1562_Sample)
          call_stmt_1562_sample_completed_ &-> ($null)
          call_stmt_1562_update_start_ &-> (call_stmt_1562_Update)
          call_stmt_1562_update_completed_ <-& (call_stmt_1562_Update)
          // Call output argument 0
          // (as target) data
          // self-release: 
          call_stmt_1562_sample_start_ o<-& (call_stmt_1562_sample_completed_ 1)
          $null &-> (call_stmt_1562_update_start_)
          call_stmt_1562_update_start_ o<-& (call_stmt_1562_update_completed_ 0)
          // start: WAR dependencies for data
          // done: WAR dependencies for data
          // end: 			$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b1  ) FULL_BYTE_MASK mem_addr ($bitcast ($uint<64>) _b0  ) ) (data ) 
          // start:  			nic_to_mac_transmit_pipe := ((($bitcast ($uint<1>) _b0  ) && data) && FULL_BYTE_MASK) $buffering 1// bits of buffering = 73. 
          //  file nic.linked.aa, line 661
          // Source expression
          // ((($bitcast ($uint<1>) _b0  ) && data) && FULL_BYTE_MASK)
          $T[CONCAT_u65_u73_1569_sample_start_] 
          $T[CONCAT_u65_u73_1569_sample_completed_] 
          $T[CONCAT_u65_u73_1569_update_start_] 
          $T[CONCAT_u65_u73_1569_update_completed_] 
          // (($bitcast ($uint<1>) _b0  ) && data)
          // data
          // start: Forward dependencies from (($bitcast ($uint<1>) _b0  ) && data) to transition CONCAT_u65_u73_1569_sample_start_
          CONCAT_u65_u73_1569_sample_start_ <-& (call_stmt_1562_update_completed_)
          // done: Forward dependencies from (($bitcast ($uint<1>) _b0  ) && data) to transition CONCAT_u65_u73_1569_sample_start_
          ;;[CONCAT_u65_u73_1569_Sample] 
          {
            // binary expression 
            $T [rr] $T [ra]  // (split) binary operation 
          }
          ;;[CONCAT_u65_u73_1569_Update] 
          {
            // binary expression 
            $T [cr] $T [ca] // (split) binary operation 
          }
          CONCAT_u65_u73_1569_sample_start_ &-> (CONCAT_u65_u73_1569_Sample)
          CONCAT_u65_u73_1569_sample_completed_ <-& (CONCAT_u65_u73_1569_Sample)
          CONCAT_u65_u73_1569_sample_completed_ &-> ($null)
          CONCAT_u65_u73_1569_update_start_ &-> (CONCAT_u65_u73_1569_Update)
          CONCAT_u65_u73_1569_update_completed_ <-& (CONCAT_u65_u73_1569_Update)
          // RAW reenables for (($bitcast ($uint<1>) _b0  ) && data)
          call_stmt_1562_update_start_ o<-& (CONCAT_u65_u73_1569_sample_completed_ 0)
          // self-release: 
          CONCAT_u65_u73_1569_sample_start_ o<-& (CONCAT_u65_u73_1569_sample_completed_ 1)
          $null &-> (CONCAT_u65_u73_1569_update_start_)
          CONCAT_u65_u73_1569_update_start_ o<-& (CONCAT_u65_u73_1569_update_completed_ 0)
          // Target expression
          // (as target) nic_to_mac_transmit_pipe
          $T[WPIPE_nic_to_mac_transmit_pipe_1563_sample_start_] 
          $T[WPIPE_nic_to_mac_transmit_pipe_1563_sample_completed_] 
          $T[WPIPE_nic_to_mac_transmit_pipe_1563_update_start_] 
          $T[WPIPE_nic_to_mac_transmit_pipe_1563_update_completed_] 
          ;;[WPIPE_nic_to_mac_transmit_pipe_1563_Sample] 
          {
            // pipe write sample-start nic_to_mac_transmit_pipe
            $T [req] $T [ack] 
          }
          ;;[WPIPE_nic_to_mac_transmit_pipe_1563_Update] 
          {
            // pipe write update (complete) nic_to_mac_transmit_pipe
            $T [req] $T [ack] 
          }
          WPIPE_nic_to_mac_transmit_pipe_1563_sample_start_ &-> (WPIPE_nic_to_mac_transmit_pipe_1563_Sample)
          WPIPE_nic_to_mac_transmit_pipe_1563_sample_completed_ <-& (WPIPE_nic_to_mac_transmit_pipe_1563_Sample)
          WPIPE_nic_to_mac_transmit_pipe_1563_update_start_ <-& (WPIPE_nic_to_mac_transmit_pipe_1563_sample_completed_)
          WPIPE_nic_to_mac_transmit_pipe_1563_update_start_ &-> (WPIPE_nic_to_mac_transmit_pipe_1563_Update)
          WPIPE_nic_to_mac_transmit_pipe_1563_update_completed_ <-& (WPIPE_nic_to_mac_transmit_pipe_1563_Update)
          WPIPE_nic_to_mac_transmit_pipe_1563_sample_start_ o<-& (WPIPE_nic_to_mac_transmit_pipe_1563_update_completed_ 0)
          // start: Forward dependencies from ((($bitcast ($uint<1>) _b0  ) && data) && FULL_BYTE_MASK) to transition WPIPE_nic_to_mac_transmit_pipe_1563_sample_start_
          WPIPE_nic_to_mac_transmit_pipe_1563_sample_start_ <-& (CONCAT_u65_u73_1569_update_completed_)
          // done: Forward dependencies from ((($bitcast ($uint<1>) _b0  ) && data) && FULL_BYTE_MASK) to transition WPIPE_nic_to_mac_transmit_pipe_1563_sample_start_
          // RAW reenables for ((($bitcast ($uint<1>) _b0  ) && data) && FULL_BYTE_MASK)
          CONCAT_u65_u73_1569_update_start_ o<-& (WPIPE_nic_to_mac_transmit_pipe_1563_sample_completed_ 0)
          // end:  			nic_to_mac_transmit_pipe := ((($bitcast ($uint<1>) _b0  ) && data) && FULL_BYTE_MASK) $buffering 1// bits of buffering = 73. 
          // start: WAR dependencies for ncount_down
          // WAR dependency: Read: ncount_down before Write: 			$volatile ncount_down := (count_down - 8 ) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for ncount_down
          // start:  			$volatile ncount_down := (count_down - 8 ) $buffering 1
          //  file nic.linked.aa, line 662
          // volatile! 
          // Source expression
          // (count_down - 8 )
          // count_down
          // Target expression
          // (as target) ncount_down
          // start: WAR dependencies for ncount_down
          // WAR dependency: Read: ncount_down before Write: 			$volatile ncount_down := (count_down - 8 ) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for ncount_down
          // end:  			$volatile ncount_down := (count_down - 8 ) $buffering 1
          // start: WAR dependencies for nmem_addr
          // WAR dependency: Read: nmem_addr before Write: 			$volatile nmem_addr := (mem_addr + 8 ) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for nmem_addr
          // start:  			$volatile nmem_addr := (mem_addr + 8 ) $buffering 1
          //  file nic.linked.aa, line 663
          // volatile! 
          // Source expression
          // (mem_addr + 8 )
          // mem_addr
          // Target expression
          // (as target) nmem_addr
          // start: WAR dependencies for nmem_addr
          // WAR dependency: Read: nmem_addr before Write: 			$volatile nmem_addr := (mem_addr + 8 ) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for nmem_addr
          // end:  			$volatile nmem_addr := (mem_addr + 8 ) $buffering 1
          // start: WAR dependencies for not_last_word
          // done: WAR dependencies for not_last_word
          // start:  			$volatile not_last_word := (ncount_down > 8 ) $buffering 1
          //  file nic.linked.aa, line 665
          // volatile! 
          // Source expression
          // (ncount_down > 8 )
          // ncount_down
          // Target expression
          // (as target) not_last_word
          // start: WAR dependencies for not_last_word
          // done: WAR dependencies for not_last_word
          // end:  			$volatile not_last_word := (ncount_down > 8 ) $buffering 1
          // not_last_word
          $T [loop_body_delay_to_condition_start] $delay
          loop_body_start &-> (loop_body_delay_to_condition_start)
          loop_body_delay_to_condition_start &-> (condition_evaluated)
          // start: Forward dependencies from not_last_word to transition condition_evaluated
          condition_evaluated <-& (phi_stmt_1540_update_completed_)
          // done: Forward dependencies from not_last_word to transition condition_evaluated
          condition_evaluated &-> ($null)
          // load-store dependencies..
          // pipe read/write dependencies for pipe MEMORY_TO_NIC_RESPONSE
          // read-dependencies for pipe MEMORY_TO_NIC_RESPONSE
          // write-dependencies for pipe MEMORY_TO_NIC_RESPONSE
          // signal write dependencies for MEMORY_TO_NIC_RESPONSE
          // pipe read/write dependencies for pipe NIC_TO_MEMORY_REQUEST
          // read-dependencies for pipe NIC_TO_MEMORY_REQUEST
          // write-dependencies for pipe NIC_TO_MEMORY_REQUEST
          // signal write dependencies for NIC_TO_MEMORY_REQUEST
          // pipe read/write dependencies for pipe nic_to_mac_transmit_pipe
          // read-dependencies for pipe nic_to_mac_transmit_pipe
          // write-dependencies for pipe nic_to_mac_transmit_pipe
          // signal write dependencies for nic_to_mac_transmit_pipe
        }
        ( first_time_through_loop_body  back_edge_to_loop_body) 
        ( condition_evaluated )
        ;; [loop_exit] 
        {
          $T [ack] 
        }
        ;; [loop_taken] 
        {
          $T [ack] 
        }
        do_while_stmt_1538__entry__ <-| ($entry)
        loop_body_done <-| ( do_while_stmt_1538_loop_body ) 
        condition_done |-> (loop_exit loop_taken)
        do_while_stmt_1538__exit__ |-> ($exit)
        $bind condition_done <= do_while_stmt_1538_loop_body : condition_evaluated
        $bind do_while_stmt_1538__entry__  => do_while_stmt_1538_loop_body : first_time_through_loop_body 
        $bind loop_back  => do_while_stmt_1538_loop_body : back_edge_to_loop_body 
        $terminate (loop_exit loop_taken loop_body_done) (loop_back do_while_stmt_1538__exit__)
      }
      do_while_stmt_1538__entry__ |-> (do_while_stmt_1538)
      do_while_stmt_1538__exit__ <-| (do_while_stmt_1538)
      ::[call_stmt_1604_to_assign_stmt_1622] 
      {
        // start: 		$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b1  ) FULL_BYTE_MASK nmem_addr ($bitcast ($uint<64>) _b0  ) ) (last_word ) 
        //  file nic.linked.aa, line 668
        $T[call_stmt_1604_sample_start_] 
        $T[call_stmt_1604_sample_completed_] 
        $T[call_stmt_1604_update_start_] 
        $T[call_stmt_1604_update_completed_] 
        // Call input argument 0
        // Call input argument 1
        // Call input argument 2
        // Call input argument 3
        // nmem_addr
        // Call input argument 4
        // start: Forward dependencies from nmem_addr to transition call_stmt_1604_sample_start_
        // done: Forward dependencies from nmem_addr to transition call_stmt_1604_sample_start_
        ;;[call_stmt_1604_Sample] 
        {
          $T [crr] $T [cra] 
        }
        ;;[call_stmt_1604_Update] 
        {
          $T [ccr] $T [cca] 
        }
        call_stmt_1604_sample_start_ &-> (call_stmt_1604_Sample)
        call_stmt_1604_sample_completed_ <-& (call_stmt_1604_Sample)
        call_stmt_1604_sample_completed_ &-> ($null)
        call_stmt_1604_update_start_ &-> (call_stmt_1604_Update)
        call_stmt_1604_update_completed_ <-& (call_stmt_1604_Update)
        // Call output argument 0
        // (as target) last_word
        // start: WAR dependencies for last_word
        // done: WAR dependencies for last_word
        // end: 		$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b1  ) FULL_BYTE_MASK nmem_addr ($bitcast ($uint<64>) _b0  ) ) (last_word ) 
        // start:  		nic_to_mac_transmit_pipe := ((($bitcast ($uint<1>) _b1  ) && last_word) && last_tkeep) $buffering 1// bits of buffering = 73. 
        //  file nic.linked.aa, line 670
        // Source expression
        // ((($bitcast ($uint<1>) _b1  ) && last_word) && last_tkeep)
        $T[CONCAT_u65_u73_1613_sample_start_] 
        $T[CONCAT_u65_u73_1613_sample_completed_] 
        $T[CONCAT_u65_u73_1613_update_start_] 
        $T[CONCAT_u65_u73_1613_update_completed_] 
        // (($bitcast ($uint<1>) _b1  ) && last_word)
        // last_word
        // last_tkeep
        // start: Forward dependencies from (($bitcast ($uint<1>) _b1  ) && last_word) to transition CONCAT_u65_u73_1613_sample_start_
        CONCAT_u65_u73_1613_sample_start_ <-& (call_stmt_1604_update_completed_)
        // done: Forward dependencies from (($bitcast ($uint<1>) _b1  ) && last_word) to transition CONCAT_u65_u73_1613_sample_start_
        // start: Forward dependencies from last_tkeep to transition CONCAT_u65_u73_1613_sample_start_
        // done: Forward dependencies from last_tkeep to transition CONCAT_u65_u73_1613_sample_start_
        ;;[CONCAT_u65_u73_1613_Sample] 
        {
          // binary expression 
          $T [rr] $T [ra]  // (split) binary operation 
        }
        ;;[CONCAT_u65_u73_1613_Update] 
        {
          // binary expression 
          $T [cr] $T [ca] // (split) binary operation 
        }
        CONCAT_u65_u73_1613_sample_start_ &-> (CONCAT_u65_u73_1613_Sample)
        CONCAT_u65_u73_1613_sample_completed_ <-& (CONCAT_u65_u73_1613_Sample)
        CONCAT_u65_u73_1613_sample_completed_ &-> ($null)
        CONCAT_u65_u73_1613_update_start_ &-> (CONCAT_u65_u73_1613_Update)
        CONCAT_u65_u73_1613_update_completed_ <-& (CONCAT_u65_u73_1613_Update)
        // Target expression
        // (as target) nic_to_mac_transmit_pipe
        $T[WPIPE_nic_to_mac_transmit_pipe_1607_sample_start_] 
        $T[WPIPE_nic_to_mac_transmit_pipe_1607_sample_completed_] 
        $T[WPIPE_nic_to_mac_transmit_pipe_1607_update_start_] 
        $T[WPIPE_nic_to_mac_transmit_pipe_1607_update_completed_] 
        ;;[WPIPE_nic_to_mac_transmit_pipe_1607_Sample] 
        {
          // pipe write sample-start nic_to_mac_transmit_pipe
          $T [req] $T [ack] 
        }
        ;;[WPIPE_nic_to_mac_transmit_pipe_1607_Update] 
        {
          // pipe write update (complete) nic_to_mac_transmit_pipe
          $T [req] $T [ack] 
        }
        WPIPE_nic_to_mac_transmit_pipe_1607_sample_start_ &-> (WPIPE_nic_to_mac_transmit_pipe_1607_Sample)
        WPIPE_nic_to_mac_transmit_pipe_1607_sample_completed_ <-& (WPIPE_nic_to_mac_transmit_pipe_1607_Sample)
        WPIPE_nic_to_mac_transmit_pipe_1607_update_start_ <-& (WPIPE_nic_to_mac_transmit_pipe_1607_sample_completed_)
        WPIPE_nic_to_mac_transmit_pipe_1607_update_start_ &-> (WPIPE_nic_to_mac_transmit_pipe_1607_Update)
        WPIPE_nic_to_mac_transmit_pipe_1607_update_completed_ <-& (WPIPE_nic_to_mac_transmit_pipe_1607_Update)
        // start: Forward dependencies from ((($bitcast ($uint<1>) _b1  ) && last_word) && last_tkeep) to transition WPIPE_nic_to_mac_transmit_pipe_1607_sample_start_
        WPIPE_nic_to_mac_transmit_pipe_1607_sample_start_ <-& (CONCAT_u65_u73_1613_update_completed_)
        // done: Forward dependencies from ((($bitcast ($uint<1>) _b1  ) && last_word) && last_tkeep) to transition WPIPE_nic_to_mac_transmit_pipe_1607_sample_start_
        // end:  		nic_to_mac_transmit_pipe := ((($bitcast ($uint<1>) _b1  ) && last_word) && last_tkeep) $buffering 1// bits of buffering = 73. 
        // start:  		status := (packet_size == ($bitcast ($uint<8>) (nmem_addr - control_data_addr) )) $buffering 1// bits of buffering = 1. 
        //  file nic.linked.aa, line 671
        // Source expression
        // (packet_size == ($bitcast ($uint<8>) (nmem_addr - control_data_addr) ))
        $T[EQ_u8_u1_1621_sample_start_] 
        $T[EQ_u8_u1_1621_sample_completed_] 
        $T[EQ_u8_u1_1621_update_start_] 
        $T[EQ_u8_u1_1621_update_completed_] 
        // packet_size
        // ($bitcast ($uint<8>) (nmem_addr - control_data_addr) )
        // (nmem_addr - control_data_addr)
        // nmem_addr
        // control_data_addr
        // start: Forward dependencies from packet_size to transition EQ_u8_u1_1621_sample_start_
        // done: Forward dependencies from packet_size to transition EQ_u8_u1_1621_sample_start_
        // start: Forward dependencies from ($bitcast ($uint<8>) (nmem_addr - control_data_addr) ) to transition EQ_u8_u1_1621_sample_start_
        // done: Forward dependencies from ($bitcast ($uint<8>) (nmem_addr - control_data_addr) ) to transition EQ_u8_u1_1621_sample_start_
        ;;[EQ_u8_u1_1621_Sample] 
        {
          // binary expression 
          $T [rr] $T [ra]  // (split) binary operation 
        }
        ;;[EQ_u8_u1_1621_Update] 
        {
          // binary expression 
          $T [cr] $T [ca] // (split) binary operation 
        }
        EQ_u8_u1_1621_sample_start_ &-> (EQ_u8_u1_1621_Sample)
        EQ_u8_u1_1621_sample_completed_ <-& (EQ_u8_u1_1621_Sample)
        EQ_u8_u1_1621_sample_completed_ &-> ($null)
        EQ_u8_u1_1621_update_start_ &-> (EQ_u8_u1_1621_Update)
        EQ_u8_u1_1621_update_completed_ <-& (EQ_u8_u1_1621_Update)
        // Target expression
        // (as target) status
        // status
        // write to interface object
        // start: WAR dependencies for status
        // done: WAR dependencies for status
        // status
        // write to interface object
        // end:  		status := (packet_size == ($bitcast ($uint<8>) (nmem_addr - control_data_addr) )) $buffering 1// bits of buffering = 1. 
        // load-store dependencies..
        // pipe read/write dependencies for pipe MEMORY_TO_NIC_RESPONSE
        // read-dependencies for pipe MEMORY_TO_NIC_RESPONSE
        // write-dependencies for pipe MEMORY_TO_NIC_RESPONSE
        // signal write dependencies for MEMORY_TO_NIC_RESPONSE
        // pipe read/write dependencies for pipe NIC_TO_MEMORY_REQUEST
        // read-dependencies for pipe NIC_TO_MEMORY_REQUEST
        // write-dependencies for pipe NIC_TO_MEMORY_REQUEST
        // signal write dependencies for NIC_TO_MEMORY_REQUEST
        // pipe read/write dependencies for pipe nic_to_mac_transmit_pipe
        // read-dependencies for pipe nic_to_mac_transmit_pipe
        // write-dependencies for pipe nic_to_mac_transmit_pipe
        // signal write dependencies for nic_to_mac_transmit_pipe
      }
      call_stmt_1604_to_assign_stmt_1622__entry__ |-> (call_stmt_1604_to_assign_stmt_1622)
      call_stmt_1604_to_assign_stmt_1622__exit__ <-| (call_stmt_1604_to_assign_stmt_1622)
      do_while_stmt_1538__entry__ <-| (branch_block_stmt_1537__entry__)
      call_stmt_1604_to_assign_stmt_1622__entry__ <-| (do_while_stmt_1538__exit__)
      call_stmt_1604_to_assign_stmt_1622__exit__ |-> (branch_block_stmt_1537__exit__)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %transmitPacket%loop%
    //  file nic.linked.aa, line 654
    // constant-object-declarations for block %transmitPacket%loop
    //  file nic.linked.aa, line 650
    // constant-object-declarations for block %transmitPacket
    //  file nic.linked.aa, line 638
    // ($bitcast ($uint<4>) _b0  )
    $constant $W[type_cast_1504_wire_constant] : $int<4> := _b0000// 0
    // 	$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b1  ) FULL_BYTE_MASK control_data_addr ($bitcast ($uint<64>) _b0  ) ) (control_data ) 
    //  file nic.linked.aa, line 645
    // ($bitcast ($uint<1>) _b0  )
    $constant $W[type_cast_1512_wire_constant] : $int<1> := _b0// 0
    // ($bitcast ($uint<1>) _b1  )
    $constant $W[type_cast_1514_wire_constant] : $int<1> := _b1// 1
    // FULL_BYTE_MASK
    $constant $W[R_FULL_BYTE_MASK_1515_wire_constant] : $int<8> := _b11111111// 255
    // ($bitcast ($uint<64>) _b0  )
    $constant $W[type_cast_1518_wire_constant] : $int<64> := _b0000000000000000000000000000000000000000000000000000000000000000// 0
    // constant-declarations for block %transmitPacket%loop
    //  file nic.linked.aa, line 650
    // do-while statement  
    //  file nic.linked.aa, line 652
    // constant-declarations for block %transmitPacket%loop%
    //  file nic.linked.aa, line 654
    // constant-declarations for phi:  			$phi count_down := 			  (packet_size - 16 ) $on   $entry 			  ncount_down $on   $loopback 
    // type of target is $uint<8>
    //  file nic.linked.aa, line 655
    // 16 
    $constant $W[konst_1543_wire_constant] : $int<8> := _b00010000// 16
    // constant-declarations for phi:  			$phi mem_addr := 			  (control_data_addr + 24 ) $on   $entry 			  nmem_addr $on   $loopback 
    // type of target is $uint<36>
    //  file nic.linked.aa, line 657
    // 24 
    $constant $W[konst_1549_wire_constant] : $int<36> := _b000000000000000000000000000000011000// 24
    // 			$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b1  ) FULL_BYTE_MASK mem_addr ($bitcast ($uint<64>) _b0  ) ) (data ) 
    //  file nic.linked.aa, line 660
    // ($bitcast ($uint<1>) _b0  )
    $constant $W[type_cast_1554_wire_constant] : $int<1> := _b0// 0
    // ($bitcast ($uint<1>) _b1  )
    $constant $W[type_cast_1556_wire_constant] : $int<1> := _b1// 1
    // FULL_BYTE_MASK
    $constant $W[R_FULL_BYTE_MASK_1557_wire_constant] : $int<8> := _b11111111// 255
    // ($bitcast ($uint<64>) _b0  )
    $constant $W[type_cast_1560_wire_constant] : $int<64> := _b0000000000000000000000000000000000000000000000000000000000000000// 0
    // ($bitcast ($uint<1>) _b0  )
    $constant $W[type_cast_1565_wire_constant] : $int<1> := _b0// 0
    // FULL_BYTE_MASK
    $constant $W[R_FULL_BYTE_MASK_1568_wire_constant] : $int<8> := _b11111111// 255
    // 8 
    $constant $W[konst_1573_wire_constant] : $int<8> := _b00001000// 8
    // 8 
    $constant $W[konst_1578_wire_constant] : $int<36> := _b000000000000000000000000000000001000// 8
    // 8 
    $constant $W[konst_1588_wire_constant] : $int<8> := _b00001000// 8
    // 		$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b1  ) FULL_BYTE_MASK nmem_addr ($bitcast ($uint<64>) _b0  ) ) (last_word ) 
    //  file nic.linked.aa, line 668
    // ($bitcast ($uint<1>) _b0  )
    $constant $W[type_cast_1596_wire_constant] : $int<1> := _b0// 0
    // ($bitcast ($uint<1>) _b1  )
    $constant $W[type_cast_1598_wire_constant] : $int<1> := _b1// 1
    // FULL_BYTE_MASK
    $constant $W[R_FULL_BYTE_MASK_1599_wire_constant] : $int<8> := _b11111111// 255
    // ($bitcast ($uint<64>) _b0  )
    $constant $W[type_cast_1602_wire_constant] : $int<64> := _b0000000000000000000000000000000000000000000000000000000000000000// 0
    // ($bitcast ($uint<1>) _b1  )
    $constant $W[type_cast_1609_wire_constant] : $int<1> := _b1// 1
    // 	$volatile control_data_addr := ($bitcast ($uint<36>) (( $slice packet_pointer 31 0 )  && ($bitcast ($uint<4>) _b0  )) ) $buffering 1
    //  file nic.linked.aa, line 643
    // ( $slice packet_pointer 31 0 ) 
    $intermediate $W[slice_1502_wire] : $int<32>
    // (( $slice packet_pointer 31 0 )  && ($bitcast ($uint<4>) _b0  ))
    $intermediate $W[CONCAT_u32_u36_1505_wire] : $int<36>
    // control_data_addr
    $W[control_data_addr_1507] : $int<36>
    // 	$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b1  ) FULL_BYTE_MASK control_data_addr ($bitcast ($uint<64>) _b0  ) ) (control_data ) 
    //  file nic.linked.aa, line 645
    // control_data
    $W[control_data_1520] : $int<64>
    // 	$volatile unused := ( $slice control_data 59 16 )  $buffering 1
    //  file nic.linked.aa, line 646
    // unused
    $W[unused_1525] : $int<44>
    // 	$volatile packet_size := ( $slice control_data 15 8 )  $buffering 1
    //  file nic.linked.aa, line 647
    // packet_size
    $W[packet_size_1529] : $int<8>
    // 	$volatile last_tkeep := ( $slice control_data 7 0 )  $buffering 1
    //  file nic.linked.aa, line 648
    // last_tkeep
    $W[last_tkeep_1533] : $int<8>
    // block %transmitPacket%loop
    //  file nic.linked.aa, line 650
    // do-while statement  
    //  file nic.linked.aa, line 652
    // merge-statement  
    //  file nic.linked.aa, line 654
    // 			$phi count_down := 			  (packet_size - 16 ) $on   $entry 			  ncount_down $on   $loopback 
    // type of target is $uint<8>
    //  file nic.linked.aa, line 655
    // (packet_size - 16 )
    $intermediate $W[SUB_u8_u8_1544_wire] : $int<8>
    $W[ncount_down_1575_1545_buffered] : $int<8>
    // count_down
    $W[count_down_1540] : $int<8>
    // 			$phi mem_addr := 			  (control_data_addr + 24 ) $on   $entry 			  nmem_addr $on   $loopback 
    // type of target is $uint<36>
    //  file nic.linked.aa, line 657
    // (control_data_addr + 24 )
    $intermediate $W[ADD_u36_u36_1550_wire] : $int<36>
    $W[nmem_addr_1580_1551_buffered] : $int<36>
    // mem_addr
    $W[mem_addr_1546] : $int<36>
    // 			$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b1  ) FULL_BYTE_MASK mem_addr ($bitcast ($uint<64>) _b0  ) ) (data ) 
    //  file nic.linked.aa, line 660
    // data
    $W[data_1562] : $int<64>
    // 			nic_to_mac_transmit_pipe := ((($bitcast ($uint<1>) _b0  ) && data) && FULL_BYTE_MASK) $buffering 1// bits of buffering = 73. 
    //  file nic.linked.aa, line 661
    // (($bitcast ($uint<1>) _b0  ) && data)
    $intermediate $W[CONCAT_u1_u65_1567_wire] : $int<65>
    // ((($bitcast ($uint<1>) _b0  ) && data) && FULL_BYTE_MASK)
    $intermediate $W[CONCAT_u65_u73_1569_wire] : $int<73>
    // nic_to_mac_transmit_pipe
    // 			$volatile ncount_down := (count_down - 8 ) $buffering 1
    //  file nic.linked.aa, line 662
    // ncount_down
    $W[ncount_down_1575] : $int<8>
    // 			$volatile nmem_addr := (mem_addr + 8 ) $buffering 1
    //  file nic.linked.aa, line 663
    // nmem_addr
    $W[nmem_addr_1580] : $int<36>
    // 			$volatile not_last_word := (ncount_down > 8 ) $buffering 1
    //  file nic.linked.aa, line 665
    // not_last_word
    $W[not_last_word_1590] : $int<1>
    // 		$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b1  ) FULL_BYTE_MASK nmem_addr ($bitcast ($uint<64>) _b0  ) ) (last_word ) 
    //  file nic.linked.aa, line 668
    // last_word
    $W[last_word_1604] : $int<64>
    // 		nic_to_mac_transmit_pipe := ((($bitcast ($uint<1>) _b1  ) && last_word) && last_tkeep) $buffering 1// bits of buffering = 73. 
    //  file nic.linked.aa, line 670
    // (($bitcast ($uint<1>) _b1  ) && last_word)
    $intermediate $W[CONCAT_u1_u65_1611_wire] : $int<65>
    // ((($bitcast ($uint<1>) _b1  ) && last_word) && last_tkeep)
    $intermediate $W[CONCAT_u65_u73_1613_wire] : $int<73>
    // nic_to_mac_transmit_pipe
    // 		status := (packet_size == ($bitcast ($uint<8>) (nmem_addr - control_data_addr) )) $buffering 1// bits of buffering = 1. 
    //  file nic.linked.aa, line 671
    // (nmem_addr - control_data_addr)
    $intermediate $W[SUB_u36_u36_1619_wire] : $int<36>
    // ($bitcast ($uint<8>) (nmem_addr - control_data_addr) )
    $intermediate $W[type_cast_1620_wire] : $int<8>
    // status
    // 	$volatile control_data_addr := ($bitcast ($uint<36>) (( $slice packet_pointer 31 0 )  && ($bitcast ($uint<4>) _b0  )) ) $buffering 1
    //  file nic.linked.aa, line 643
    // ( $slice packet_pointer 31 0 ) 
    [:] [slice_1502_inst] (packet_pointer 31 0) (slice_1502_wire)  $flowthrough
    $delay slice_1502_inst 0
    // (( $slice packet_pointer 31 0 )  && ($bitcast ($uint<4>) _b0  ))
    &&[CONCAT_u32_u36_1505_inst] (slice_1502_wire type_cast_1504_wire_constant) (CONCAT_u32_u36_1505_wire)   $flowthrough 
    $delay CONCAT_u32_u36_1505_inst 0
    // ($bitcast ($uint<36>) (( $slice packet_pointer 31 0 )  && ($bitcast ($uint<4>) _b0  )) )
    # := [type_cast_1506_inst] (CONCAT_u32_u36_1505_wire) (control_data_addr_1507)   $flowthrough
    $delay type_cast_1506_inst 0
    // 	$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b1  ) FULL_BYTE_MASK control_data_addr ($bitcast ($uint<64>) _b0  ) ) (control_data ) 
    //  file nic.linked.aa, line 645
    $call [call_stmt_1520_call] $module accessMemory(type_cast_1512_wire_constant type_cast_1514_wire_constant R_FULL_BYTE_MASK_1515_wire_constant control_data_addr_1507 type_cast_1518_wire_constant) (control_data_1520)  
    $delay call_stmt_1520_call 4
    $buffering  $in call_stmt_1520_call type_cast_1512_wire_constant 1
    $buffering  $in call_stmt_1520_call type_cast_1514_wire_constant 1
    $buffering  $in call_stmt_1520_call R_FULL_BYTE_MASK_1515_wire_constant 1
    $buffering  $in call_stmt_1520_call control_data_addr_1507 1
    $buffering  $in call_stmt_1520_call type_cast_1518_wire_constant 1
    $buffering  $out call_stmt_1520_call control_data_1520 1
    // 	$volatile unused := ( $slice control_data 59 16 )  $buffering 1
    //  file nic.linked.aa, line 646
    // ( $slice control_data 59 16 ) 
    [:] [slice_1524_inst] (control_data_1520 59 16) (unused_1525)  $flowthrough
    $delay slice_1524_inst 0
    // 	$volatile packet_size := ( $slice control_data 15 8 )  $buffering 1
    //  file nic.linked.aa, line 647
    // ( $slice control_data 15 8 ) 
    [:] [slice_1528_inst] (control_data_1520 15 8) (packet_size_1529)  $flowthrough
    $delay slice_1528_inst 0
    // 	$volatile last_tkeep := ( $slice control_data 7 0 )  $buffering 1
    //  file nic.linked.aa, line 648
    // ( $slice control_data 7 0 ) 
    [:] [slice_1532_inst] (control_data_1520 7 0) (last_tkeep_1533)  $flowthrough
    $delay slice_1532_inst 0
    // datapath-instances for block %transmitPacket%loop
    //  file nic.linked.aa, line 650
    // datapath-instances for do-while  
    //  file nic.linked.aa, line 652
    ==0? [do_while_stmt_1538_branch] (not_last_word_1590)
    $flowthrough
    // data-path instances for merge  
    //  file nic.linked.aa, line 654
    // 			$phi count_down := 			  (packet_size - 16 ) $on   $entry 			  ncount_down $on   $loopback 
    // type of target is $uint<8>
    //  file nic.linked.aa, line 655
    // (packet_size - 16 )
    -[SUB_u8_u8_1544_inst] (packet_size_1529 konst_1543_wire_constant) (SUB_u8_u8_1544_wire)    $fullrate
    $buffering  $out SUB_u8_u8_1544_inst SUB_u8_u8_1544_wire 1
    $delay SUB_u8_u8_1544_inst 1
    # := [ncount_down_1575_1545_buf] (ncount_down_1575) (ncount_down_1575_1545_buffered)     $fullrate
    $buffering $out ncount_down_1575_1545_buf ncount_down_1575_1545_buffered  1
    # $phi [phi_stmt_1540] (SUB_u8_u8_1544_wire ncount_down_1575_1545_buffered) ( count_down_1540 ) $fullrate
    // $buffering  $out phi_stmt_1540 count_down_1540 2
    // 			$phi mem_addr := 			  (control_data_addr + 24 ) $on   $entry 			  nmem_addr $on   $loopback 
    // type of target is $uint<36>
    //  file nic.linked.aa, line 657
    // (control_data_addr + 24 )
    +[ADD_u36_u36_1550_inst] (control_data_addr_1507 konst_1549_wire_constant) (ADD_u36_u36_1550_wire)    $fullrate
    $buffering  $out ADD_u36_u36_1550_inst ADD_u36_u36_1550_wire 1
    $delay ADD_u36_u36_1550_inst 1
    # := [nmem_addr_1580_1551_buf] (nmem_addr_1580) (nmem_addr_1580_1551_buffered)     $fullrate
    $buffering $out nmem_addr_1580_1551_buf nmem_addr_1580_1551_buffered  1
    # $phi [phi_stmt_1546] (ADD_u36_u36_1550_wire nmem_addr_1580_1551_buffered) ( mem_addr_1546 ) $fullrate
    // $buffering  $out phi_stmt_1546 mem_addr_1546 2
    // 			$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b1  ) FULL_BYTE_MASK mem_addr ($bitcast ($uint<64>) _b0  ) ) (data ) 
    //  file nic.linked.aa, line 660
    $call [call_stmt_1562_call] $module accessMemory(type_cast_1554_wire_constant type_cast_1556_wire_constant R_FULL_BYTE_MASK_1557_wire_constant mem_addr_1546 type_cast_1560_wire_constant) (data_1562)   $fullrate
    $delay call_stmt_1562_call 4
    $buffering  $in call_stmt_1562_call type_cast_1554_wire_constant 1
    $buffering  $in call_stmt_1562_call type_cast_1556_wire_constant 1
    $buffering  $in call_stmt_1562_call R_FULL_BYTE_MASK_1557_wire_constant 1
    $buffering  $in call_stmt_1562_call mem_addr_1546 1
    $buffering  $in call_stmt_1562_call type_cast_1560_wire_constant 1
    $buffering  $out call_stmt_1562_call data_1562 1
    // 			nic_to_mac_transmit_pipe := ((($bitcast ($uint<1>) _b0  ) && data) && FULL_BYTE_MASK) $buffering 1// bits of buffering = 73. 
    //  file nic.linked.aa, line 661
    // (($bitcast ($uint<1>) _b0  ) && data)
    &&[CONCAT_u1_u65_1567_inst] (type_cast_1565_wire_constant data_1562) (CONCAT_u1_u65_1567_wire)   $flowthrough 
    $delay CONCAT_u1_u65_1567_inst 0
    // ((($bitcast ($uint<1>) _b0  ) && data) && FULL_BYTE_MASK)
    &&[CONCAT_u65_u73_1569_inst] (CONCAT_u1_u65_1567_wire R_FULL_BYTE_MASK_1568_wire_constant) (CONCAT_u65_u73_1569_wire)    $fullrate
    $buffering  $out CONCAT_u65_u73_1569_inst CONCAT_u65_u73_1569_wire 1
    $delay CONCAT_u65_u73_1569_inst 1
    // nic_to_mac_transmit_pipe
    $ioport $out [WPIPE_nic_to_mac_transmit_pipe_1563_inst]  (CONCAT_u65_u73_1569_wire) (nic_to_mac_transmit_pipe)  $fullrate 
    // 			$volatile ncount_down := (count_down - 8 ) $buffering 1
    //  file nic.linked.aa, line 662
    // (count_down - 8 )
    -[SUB_u8_u8_1574_inst] (count_down_1540 konst_1573_wire_constant) (ncount_down_1575)   $flowthrough 
    $delay SUB_u8_u8_1574_inst 0
    // 			$volatile nmem_addr := (mem_addr + 8 ) $buffering 1
    //  file nic.linked.aa, line 663
    // (mem_addr + 8 )
    +[ADD_u36_u36_1579_inst] (mem_addr_1546 konst_1578_wire_constant) (nmem_addr_1580)   $flowthrough 
    $delay ADD_u36_u36_1579_inst 0
    // 			$volatile not_last_word := (ncount_down > 8 ) $buffering 1
    //  file nic.linked.aa, line 665
    // (ncount_down > 8 )
    >[UGT_u8_u1_1589_inst] (ncount_down_1575 konst_1588_wire_constant) (not_last_word_1590)   $flowthrough 
    $delay UGT_u8_u1_1589_inst 0
    // 		$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b1  ) FULL_BYTE_MASK nmem_addr ($bitcast ($uint<64>) _b0  ) ) (last_word ) 
    //  file nic.linked.aa, line 668
    $call [call_stmt_1604_call] $module accessMemory(type_cast_1596_wire_constant type_cast_1598_wire_constant R_FULL_BYTE_MASK_1599_wire_constant nmem_addr_1580 type_cast_1602_wire_constant) (last_word_1604)  
    $delay call_stmt_1604_call 4
    $buffering  $in call_stmt_1604_call type_cast_1596_wire_constant 1
    $buffering  $in call_stmt_1604_call type_cast_1598_wire_constant 1
    $buffering  $in call_stmt_1604_call R_FULL_BYTE_MASK_1599_wire_constant 1
    $buffering  $in call_stmt_1604_call nmem_addr_1580 1
    $buffering  $in call_stmt_1604_call type_cast_1602_wire_constant 1
    $buffering  $out call_stmt_1604_call last_word_1604 1
    // 		nic_to_mac_transmit_pipe := ((($bitcast ($uint<1>) _b1  ) && last_word) && last_tkeep) $buffering 1// bits of buffering = 73. 
    //  file nic.linked.aa, line 670
    // (($bitcast ($uint<1>) _b1  ) && last_word)
    &&[CONCAT_u1_u65_1611_inst] (type_cast_1609_wire_constant last_word_1604) (CONCAT_u1_u65_1611_wire)   $flowthrough 
    $delay CONCAT_u1_u65_1611_inst 0
    // ((($bitcast ($uint<1>) _b1  ) && last_word) && last_tkeep)
    &&[CONCAT_u65_u73_1613_inst] (CONCAT_u1_u65_1611_wire last_tkeep_1533) (CONCAT_u65_u73_1613_wire)   
    $buffering  $out CONCAT_u65_u73_1613_inst CONCAT_u65_u73_1613_wire 1
    $delay CONCAT_u65_u73_1613_inst 1
    // nic_to_mac_transmit_pipe
    $ioport $out [WPIPE_nic_to_mac_transmit_pipe_1607_inst]  (CONCAT_u65_u73_1613_wire) (nic_to_mac_transmit_pipe) 
    // 		status := (packet_size == ($bitcast ($uint<8>) (nmem_addr - control_data_addr) )) $buffering 1// bits of buffering = 1. 
    //  file nic.linked.aa, line 671
    // (nmem_addr - control_data_addr)
    -[SUB_u36_u36_1619_inst] (nmem_addr_1580 control_data_addr_1507) (SUB_u36_u36_1619_wire)   $flowthrough 
    $delay SUB_u36_u36_1619_inst 0
    // ($bitcast ($uint<8>) (nmem_addr - control_data_addr) )
    # := [type_cast_1620_inst] (SUB_u36_u36_1619_wire) (type_cast_1620_wire)   $flowthrough
    $delay type_cast_1620_inst 0
    // (packet_size == ($bitcast ($uint<8>) (nmem_addr - control_data_addr) ))
    ==[EQ_u8_u1_1621_inst] (packet_size_1529 type_cast_1620_wire) (status)   
    $buffering  $out EQ_u8_u1_1621_inst status 1
    $delay EQ_u8_u1_1621_inst 1
  }
  // end data-path
  // 	$volatile control_data_addr := ($bitcast ($uint<36>) (( $slice packet_pointer 31 0 )  && ($bitcast ($uint<4>) _b0  )) ) $buffering 1
  //  file nic.linked.aa, line 643
  // (( $slice packet_pointer 31 0 )  && ($bitcast ($uint<4>) _b0  ))
  // packet_pointer
  // 	$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b1  ) FULL_BYTE_MASK control_data_addr ($bitcast ($uint<64>) _b0  ) ) (control_data ) 
  //  file nic.linked.aa, line 645
  // control_data_addr
  call_stmt_1520_call <=> (assign_stmt_1507_to_assign_stmt_1533/call_stmt_1520_Sample/crr assign_stmt_1507_to_assign_stmt_1533/call_stmt_1520_Update/ccr) (assign_stmt_1507_to_assign_stmt_1533/call_stmt_1520_Sample/cra assign_stmt_1507_to_assign_stmt_1533/call_stmt_1520_Update/cca)
  // 	$volatile unused := ( $slice control_data 59 16 )  $buffering 1
  //  file nic.linked.aa, line 646
  // control_data
  // 	$volatile packet_size := ( $slice control_data 15 8 )  $buffering 1
  //  file nic.linked.aa, line 647
  // control_data
  // 	$volatile last_tkeep := ( $slice control_data 7 0 )  $buffering 1
  //  file nic.linked.aa, line 648
  // control_data
  // CP-DP links for do-while  do_while_stmt_1538
  //  file nic.linked.aa, line 652
  phi_stmt_1540 <=> (branch_block_stmt_1537/do_while_stmt_1538/do_while_stmt_1538_loop_body/phi_stmt_1540_entry_sample_req branch_block_stmt_1537/do_while_stmt_1538/do_while_stmt_1538_loop_body/phi_stmt_1540_loopback_sample_req) (branch_block_stmt_1537/do_while_stmt_1538/do_while_stmt_1538_loop_body/phi_stmt_1540_phi_mux_ack)
  // (packet_size - 16 )
  // packet_size
  SUB_u8_u8_1544_inst <=> (branch_block_stmt_1537/do_while_stmt_1538/do_while_stmt_1538_loop_body/SUB_u8_u8_1544_Sample/rr branch_block_stmt_1537/do_while_stmt_1538/do_while_stmt_1538_loop_body/SUB_u8_u8_1544_Update/cr) (branch_block_stmt_1537/do_while_stmt_1538/do_while_stmt_1538_loop_body/SUB_u8_u8_1544_Sample/ra branch_block_stmt_1537/do_while_stmt_1538/do_while_stmt_1538_loop_body/SUB_u8_u8_1544_Update/ca)
  ncount_down_1575_1545_buf <=> (branch_block_stmt_1537/do_while_stmt_1538/do_while_stmt_1538_loop_body/R_ncount_down_1545_Sample/req branch_block_stmt_1537/do_while_stmt_1538/do_while_stmt_1538_loop_body/R_ncount_down_1545_Update/req) (branch_block_stmt_1537/do_while_stmt_1538/do_while_stmt_1538_loop_body/R_ncount_down_1545_Sample/ack branch_block_stmt_1537/do_while_stmt_1538/do_while_stmt_1538_loop_body/R_ncount_down_1545_Update/ack)
  phi_stmt_1546 <=> (branch_block_stmt_1537/do_while_stmt_1538/do_while_stmt_1538_loop_body/phi_stmt_1546_entry_sample_req branch_block_stmt_1537/do_while_stmt_1538/do_while_stmt_1538_loop_body/phi_stmt_1546_loopback_sample_req) (branch_block_stmt_1537/do_while_stmt_1538/do_while_stmt_1538_loop_body/phi_stmt_1546_phi_mux_ack)
  // (control_data_addr + 24 )
  // control_data_addr
  ADD_u36_u36_1550_inst <=> (branch_block_stmt_1537/do_while_stmt_1538/do_while_stmt_1538_loop_body/ADD_u36_u36_1550_Sample/rr branch_block_stmt_1537/do_while_stmt_1538/do_while_stmt_1538_loop_body/ADD_u36_u36_1550_Update/cr) (branch_block_stmt_1537/do_while_stmt_1538/do_while_stmt_1538_loop_body/ADD_u36_u36_1550_Sample/ra branch_block_stmt_1537/do_while_stmt_1538/do_while_stmt_1538_loop_body/ADD_u36_u36_1550_Update/ca)
  nmem_addr_1580_1551_buf <=> (branch_block_stmt_1537/do_while_stmt_1538/do_while_stmt_1538_loop_body/R_nmem_addr_1551_Sample/req branch_block_stmt_1537/do_while_stmt_1538/do_while_stmt_1538_loop_body/R_nmem_addr_1551_Update/req) (branch_block_stmt_1537/do_while_stmt_1538/do_while_stmt_1538_loop_body/R_nmem_addr_1551_Sample/ack branch_block_stmt_1537/do_while_stmt_1538/do_while_stmt_1538_loop_body/R_nmem_addr_1551_Update/ack)
  // 			$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b1  ) FULL_BYTE_MASK mem_addr ($bitcast ($uint<64>) _b0  ) ) (data ) 
  //  file nic.linked.aa, line 660
  // mem_addr
  call_stmt_1562_call <=> (branch_block_stmt_1537/do_while_stmt_1538/do_while_stmt_1538_loop_body/call_stmt_1562_Sample/crr branch_block_stmt_1537/do_while_stmt_1538/do_while_stmt_1538_loop_body/call_stmt_1562_Update/ccr) (branch_block_stmt_1537/do_while_stmt_1538/do_while_stmt_1538_loop_body/call_stmt_1562_Sample/cra branch_block_stmt_1537/do_while_stmt_1538/do_while_stmt_1538_loop_body/call_stmt_1562_Update/cca)
  // 			nic_to_mac_transmit_pipe := ((($bitcast ($uint<1>) _b0  ) && data) && FULL_BYTE_MASK) $buffering 1// bits of buffering = 73. 
  //  file nic.linked.aa, line 661
  // ((($bitcast ($uint<1>) _b0  ) && data) && FULL_BYTE_MASK)
  // (($bitcast ($uint<1>) _b0  ) && data)
  // data
  CONCAT_u65_u73_1569_inst <=> (branch_block_stmt_1537/do_while_stmt_1538/do_while_stmt_1538_loop_body/CONCAT_u65_u73_1569_Sample/rr branch_block_stmt_1537/do_while_stmt_1538/do_while_stmt_1538_loop_body/CONCAT_u65_u73_1569_Update/cr) (branch_block_stmt_1537/do_while_stmt_1538/do_while_stmt_1538_loop_body/CONCAT_u65_u73_1569_Sample/ra branch_block_stmt_1537/do_while_stmt_1538/do_while_stmt_1538_loop_body/CONCAT_u65_u73_1569_Update/ca)
  // nic_to_mac_transmit_pipe
  WPIPE_nic_to_mac_transmit_pipe_1563_inst <=> (branch_block_stmt_1537/do_while_stmt_1538/do_while_stmt_1538_loop_body/WPIPE_nic_to_mac_transmit_pipe_1563_Sample/req branch_block_stmt_1537/do_while_stmt_1538/do_while_stmt_1538_loop_body/WPIPE_nic_to_mac_transmit_pipe_1563_Update/req) (branch_block_stmt_1537/do_while_stmt_1538/do_while_stmt_1538_loop_body/WPIPE_nic_to_mac_transmit_pipe_1563_Sample/ack branch_block_stmt_1537/do_while_stmt_1538/do_while_stmt_1538_loop_body/WPIPE_nic_to_mac_transmit_pipe_1563_Update/ack)
  // 			$volatile ncount_down := (count_down - 8 ) $buffering 1
  //  file nic.linked.aa, line 662
  // (count_down - 8 )
  // count_down
  // 			$volatile nmem_addr := (mem_addr + 8 ) $buffering 1
  //  file nic.linked.aa, line 663
  // (mem_addr + 8 )
  // mem_addr
  // 			$volatile not_last_word := (ncount_down > 8 ) $buffering 1
  //  file nic.linked.aa, line 665
  // (ncount_down > 8 )
  // ncount_down
  // not_last_word
  do_while_stmt_1538_branch <=> (branch_block_stmt_1537/do_while_stmt_1538/do_while_stmt_1538_loop_body/condition_evaluated) (branch_block_stmt_1537/do_while_stmt_1538/loop_exit/ack branch_block_stmt_1537/do_while_stmt_1538/loop_taken/ack)
  // 		$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b1  ) FULL_BYTE_MASK nmem_addr ($bitcast ($uint<64>) _b0  ) ) (last_word ) 
  //  file nic.linked.aa, line 668
  // nmem_addr
  call_stmt_1604_call <=> (branch_block_stmt_1537/call_stmt_1604_to_assign_stmt_1622/call_stmt_1604_Sample/crr branch_block_stmt_1537/call_stmt_1604_to_assign_stmt_1622/call_stmt_1604_Update/ccr) (branch_block_stmt_1537/call_stmt_1604_to_assign_stmt_1622/call_stmt_1604_Sample/cra branch_block_stmt_1537/call_stmt_1604_to_assign_stmt_1622/call_stmt_1604_Update/cca)
  // 		nic_to_mac_transmit_pipe := ((($bitcast ($uint<1>) _b1  ) && last_word) && last_tkeep) $buffering 1// bits of buffering = 73. 
  //  file nic.linked.aa, line 670
  // ((($bitcast ($uint<1>) _b1  ) && last_word) && last_tkeep)
  // (($bitcast ($uint<1>) _b1  ) && last_word)
  // last_word
  // last_tkeep
  CONCAT_u65_u73_1613_inst <=> (branch_block_stmt_1537/call_stmt_1604_to_assign_stmt_1622/CONCAT_u65_u73_1613_Sample/rr branch_block_stmt_1537/call_stmt_1604_to_assign_stmt_1622/CONCAT_u65_u73_1613_Update/cr) (branch_block_stmt_1537/call_stmt_1604_to_assign_stmt_1622/CONCAT_u65_u73_1613_Sample/ra branch_block_stmt_1537/call_stmt_1604_to_assign_stmt_1622/CONCAT_u65_u73_1613_Update/ca)
  // nic_to_mac_transmit_pipe
  WPIPE_nic_to_mac_transmit_pipe_1607_inst <=> (branch_block_stmt_1537/call_stmt_1604_to_assign_stmt_1622/WPIPE_nic_to_mac_transmit_pipe_1607_Sample/req branch_block_stmt_1537/call_stmt_1604_to_assign_stmt_1622/WPIPE_nic_to_mac_transmit_pipe_1607_Update/req) (branch_block_stmt_1537/call_stmt_1604_to_assign_stmt_1622/WPIPE_nic_to_mac_transmit_pipe_1607_Sample/ack branch_block_stmt_1537/call_stmt_1604_to_assign_stmt_1622/WPIPE_nic_to_mac_transmit_pipe_1607_Update/ack)
  // 		status := (packet_size == ($bitcast ($uint<8>) (nmem_addr - control_data_addr) )) $buffering 1// bits of buffering = 1. 
  //  file nic.linked.aa, line 671
  // (packet_size == ($bitcast ($uint<8>) (nmem_addr - control_data_addr) ))
  // packet_size
  // (nmem_addr - control_data_addr)
  // nmem_addr
  // control_data_addr
  EQ_u8_u1_1621_inst <=> (branch_block_stmt_1537/call_stmt_1604_to_assign_stmt_1622/EQ_u8_u1_1621_Sample/rr branch_block_stmt_1537/call_stmt_1604_to_assign_stmt_1622/EQ_u8_u1_1621_Update/cr) (branch_block_stmt_1537/call_stmt_1604_to_assign_stmt_1622/EQ_u8_u1_1621_Sample/ra branch_block_stmt_1537/call_stmt_1604_to_assign_stmt_1622/EQ_u8_u1_1621_Update/ca)
}
$module [transmitEngineDaemon] 
{
  // pipe-declarations for block %transmitEngineDaemon
  //  file nic.linked.aa, line 674
  // pipe-declarations for block %transmitEngineDaemon%main
  //  file nic.linked.aa, line 680
  // pipe-declarations for block %transmitEngineDaemon%main%
  //  file nic.linked.aa, line 682
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    ::[assign_stmt_1628] 
    {
      // start:  	LAST_READ_TX_QUEUE_INDEX := 0  $buffering 1// bits of buffering = 6. 
      //  file nic.linked.aa, line 679
      // Target expression
      // (as target) LAST_READ_TX_QUEUE_INDEX
      $T[WPIPE_LAST_READ_TX_QUEUE_INDEX_1626_sample_start_] 
      $T[WPIPE_LAST_READ_TX_QUEUE_INDEX_1626_sample_completed_] 
      $T[WPIPE_LAST_READ_TX_QUEUE_INDEX_1626_update_start_] 
      $T[WPIPE_LAST_READ_TX_QUEUE_INDEX_1626_update_completed_] 
      ;;[WPIPE_LAST_READ_TX_QUEUE_INDEX_1626_Sample] 
      {
        // pipe write sample-start LAST_READ_TX_QUEUE_INDEX
        $T [req] $T [ack] 
      }
      ;;[WPIPE_LAST_READ_TX_QUEUE_INDEX_1626_Update] 
      {
        // pipe write update (complete) LAST_READ_TX_QUEUE_INDEX
        $T [req] $T [ack] 
      }
      WPIPE_LAST_READ_TX_QUEUE_INDEX_1626_sample_start_ &-> (WPIPE_LAST_READ_TX_QUEUE_INDEX_1626_Sample)
      WPIPE_LAST_READ_TX_QUEUE_INDEX_1626_sample_completed_ <-& (WPIPE_LAST_READ_TX_QUEUE_INDEX_1626_Sample)
      WPIPE_LAST_READ_TX_QUEUE_INDEX_1626_update_start_ <-& (WPIPE_LAST_READ_TX_QUEUE_INDEX_1626_sample_completed_)
      WPIPE_LAST_READ_TX_QUEUE_INDEX_1626_update_start_ &-> (WPIPE_LAST_READ_TX_QUEUE_INDEX_1626_Update)
      WPIPE_LAST_READ_TX_QUEUE_INDEX_1626_update_completed_ <-& (WPIPE_LAST_READ_TX_QUEUE_INDEX_1626_Update)
      // end:  	LAST_READ_TX_QUEUE_INDEX := 0  $buffering 1// bits of buffering = 6. 
      // load-store dependencies..
      // pipe read/write dependencies for pipe LAST_READ_TX_QUEUE_INDEX
      // read-dependencies for pipe LAST_READ_TX_QUEUE_INDEX
      // write-dependencies for pipe LAST_READ_TX_QUEUE_INDEX
      // signal write dependencies for LAST_READ_TX_QUEUE_INDEX
    }
    <>[branch_block_stmt_1629] // Branch Block  file nic.linked.aa, line 680
    {
      $P [branch_block_stmt_1629__entry__]
      branch_block_stmt_1629__entry__ <-| ($entry)
      $P [branch_block_stmt_1629__exit__]
      branch_block_stmt_1629__exit__ |-> ($exit)
      $P [merge_stmt_1630__entry__] 
      $P [merge_stmt_1630__exit__] 
      $P [if_stmt_1631__entry__] 
      $P [if_stmt_1631__exit__] 
      $P [do_while_stmt_1639__entry__] 
      $P [do_while_stmt_1639__exit__] 
      $P [disable_loopback]
      // if-statement  
      //  file nic.linked.aa, line 18647056
      ;;[if_stmt_1631_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      if_stmt_1631__entry__ |-> (if_stmt_1631_dead_link)
      if_stmt_1631__exit__ <-| (if_stmt_1631_dead_link)
      ;;[if_stmt_1631_eval_test] 
      {
        // test expression evaluate and trigger branch 
        // ( ~ (CONTROL_REGISTER [] 0 ) )
        ;;[NOT_u1_u1_1635] 
        {
          // unary expression 
          // (CONTROL_REGISTER [] 0 )
          ;;[BITSEL_u32_u1_1634] 
          {
            // binary expression 
            ||[BITSEL_u32_u1_1634_inputs] 
            {
              // CONTROL_REGISTER
              ;;[RPIPE_CONTROL_REGISTER_1632] 
              {
                // pipe read
                ;;[Sample] 
                {
                  $T [req] $T [ack] 
                }
                ;;[Update] 
                {
                  $T [req] $T [ack] 
                }
              }
            }
            // flow-through
            ;;[SplitProtocol] 
            {
              ;;[Sample] 
              {
                $T [rr] $T [ra]
              }
              ;;[Update] 
              {
                $T [cr] $T [ca]
              }
            }
          }
          // flow-through
          ;;[SplitProtocol] 
          {
            ;;[Sample] 
            {
              $T [rr] $T [ra]
            }
            ;;[Update] 
            {
              $T [cr] $T [ca]
            }
          }
        }
        $T [branch_req] 
      }
      if_stmt_1631__entry__ |-> (if_stmt_1631_eval_test)
      $P [NOT_u1_u1_1635_place]
      NOT_u1_u1_1635_place <-| (if_stmt_1631_eval_test)
      ;;[if_stmt_1631_if_link] 
      {
        $T [if_choice_transition] 
      }
      ;;[if_stmt_1631_else_link] 
      {
        $T [else_choice_transition] 
      }
      NOT_u1_u1_1635_place |-> (if_stmt_1631_if_link if_stmt_1631_else_link)
      $P [not_enabled_yet_loopback]
      not_enabled_yet_loopback <-| (if_stmt_1631_if_link)
      if_stmt_1631__exit__ <-| (if_stmt_1631_else_link)
      // do-while-statement  
      //  file nic.linked.aa, line 688
      <o> [do_while_stmt_1639]  $depth 31 $buffering 1 
      {
        $P[do_while_stmt_1639__entry__] 
        $P[do_while_stmt_1639__exit__] 
        $P[loop_back] 
        $P[condition_done] 
        $P[loop_body_done] 
        $pipeline [do_while_stmt_1639_loop_body] 
        {
          // Pipelined!
          $T[back_edge_to_loop_body] 
          $T[first_time_through_loop_body] 
          $T[loop_body_start] 
          $T[condition_evaluated] 
          $transitionmerge [entry_tmerge] (back_edge_to_loop_body first_time_through_loop_body) (loop_body_start)
          $entry <-& (loop_body_start)
          $T[aggregated_phi_sample_req] 
          $T[aggregated_phi_sample_ack] 
          $T[aggregated_phi_update_req] 
          $T[aggregated_phi_update_ack] 
          // do not loop-back unless all phi's have used up their triggering tokens.
          condition_evaluated <-& (aggregated_phi_update_ack)
          aggregated_phi_sample_req o<-& (aggregated_phi_update_ack 0)
          // start:  single source PHI statement phi_stmt_1641
          // 			$phi tx_q_index := 			  ((LAST_READ_TX_QUEUE_INDEX + 1 ) & ($bitcast ($uint<6>) (NUMBER_OF_SERVERS - 1 ) )) $on   $entry ,   $loopback 
          // type of target is $uint<6>
          $T[phi_stmt_1641_sample_start_] 
          $T[phi_stmt_1641_sample_completed_] 
          $T[phi_stmt_1641_update_start_] 
          $T[phi_stmt_1641_update_completed_] 
          aggregated_phi_sample_req <-& (phi_stmt_1641_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_1641_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_1641_update_start_)
          // non-implicit source expression in single-source phi
          // ((LAST_READ_TX_QUEUE_INDEX + 1 ) & ($bitcast ($uint<6>) (NUMBER_OF_SERVERS - 1 ) ))
          $T[AND_u6_u6_1650_sample_start_] 
          $T[AND_u6_u6_1650_sample_completed_] 
          $T[AND_u6_u6_1650_update_start_] 
          $T[AND_u6_u6_1650_update_completed_] 
          // (LAST_READ_TX_QUEUE_INDEX + 1 )
          // LAST_READ_TX_QUEUE_INDEX
          // ($bitcast ($uint<6>) (NUMBER_OF_SERVERS - 1 ) )
          // (NUMBER_OF_SERVERS - 1 )
          // NUMBER_OF_SERVERS
          // start: Forward dependencies from (LAST_READ_TX_QUEUE_INDEX + 1 ) to transition AND_u6_u6_1650_sample_start_
          // non-constant expression which depends only on signals/constants?
          // done: Forward dependencies from (LAST_READ_TX_QUEUE_INDEX + 1 ) to transition AND_u6_u6_1650_sample_start_
          // start: Forward dependencies from ($bitcast ($uint<6>) (NUMBER_OF_SERVERS - 1 ) ) to transition AND_u6_u6_1650_sample_start_
          // non-constant expression which depends only on signals/constants?
          // done: Forward dependencies from ($bitcast ($uint<6>) (NUMBER_OF_SERVERS - 1 ) ) to transition AND_u6_u6_1650_sample_start_
          ;;[AND_u6_u6_1650_Sample] 
          {
            // binary expression 
            $T [rr] $T [ra]  // (split) binary operation 
          }
          ;;[AND_u6_u6_1650_Update] 
          {
            // binary expression 
            $T [cr] $T [ca] // (split) binary operation 
          }
          AND_u6_u6_1650_sample_start_ &-> (AND_u6_u6_1650_Sample)
          AND_u6_u6_1650_sample_completed_ <-& (AND_u6_u6_1650_Sample)
          AND_u6_u6_1650_sample_completed_ &-> ($null)
          AND_u6_u6_1650_update_start_ &-> (AND_u6_u6_1650_Update)
          AND_u6_u6_1650_update_completed_ <-& (AND_u6_u6_1650_Update)
          // RAW reenables for (LAST_READ_TX_QUEUE_INDEX + 1 )
          // RAW reenables for ($bitcast ($uint<6>) (NUMBER_OF_SERVERS - 1 ) )
          // self-release: 
          AND_u6_u6_1650_sample_start_ o<-& (AND_u6_u6_1650_sample_completed_ 1)
          $null &-> (AND_u6_u6_1650_update_start_)
          AND_u6_u6_1650_update_start_ o<-& (AND_u6_u6_1650_update_completed_ 0)
          // RAW reenables for ((LAST_READ_TX_QUEUE_INDEX + 1 ) & ($bitcast ($uint<6>) (NUMBER_OF_SERVERS - 1 ) ))
          // producer  and  consumer are both determined by PHI statements.
          aggregated_phi_sample_req &-> (AND_u6_u6_1650_sample_start_)
          aggregated_phi_sample_ack <-& (AND_u6_u6_1650_sample_completed_)
          aggregated_phi_update_req &-> (AND_u6_u6_1650_update_start_)
          phi_stmt_1641_update_completed_ <-& (AND_u6_u6_1650_update_completed_)
          aggregated_phi_update_ack <-& (phi_stmt_1641_update_completed_)
          // done: PHI Statement phi_stmt_1641
          // start: 			$call getTxPacketPointerFromServer (tx_q_index ) (pkt_pointer tx_flag ) 
          //  file nic.linked.aa, line 695
          $T[call_stmt_1657_sample_start_] 
          $T[call_stmt_1657_sample_completed_] 
          $T[call_stmt_1657_update_start_] 
          $T[call_stmt_1657_update_completed_] 
          // Call input argument 0
          // tx_q_index
          // start: Forward dependencies from tx_q_index to transition call_stmt_1657_sample_start_
          call_stmt_1657_sample_start_ <-& (phi_stmt_1641_update_completed_)
          // done: Forward dependencies from tx_q_index to transition call_stmt_1657_sample_start_
          // RAW reenables for tx_q_index
          phi_stmt_1641_update_start_ o<-& (call_stmt_1657_sample_completed_ 0)
          ;;[call_stmt_1657_Sample] 
          {
            $T [crr] $T [cra] 
          }
          ;;[call_stmt_1657_Update] 
          {
            $T [ccr] $T [cca] 
          }
          call_stmt_1657_sample_start_ &-> (call_stmt_1657_Sample)
          call_stmt_1657_sample_completed_ <-& (call_stmt_1657_Sample)
          call_stmt_1657_sample_completed_ &-> ($null)
          call_stmt_1657_update_start_ &-> (call_stmt_1657_Update)
          call_stmt_1657_update_completed_ <-& (call_stmt_1657_Update)
          // Call output argument 0
          // (as target) pkt_pointer
          // Call output argument 1
          // (as target) tx_flag
          // self-release: 
          call_stmt_1657_sample_start_ o<-& (call_stmt_1657_sample_completed_ 1)
          $null &-> (call_stmt_1657_update_start_)
          call_stmt_1657_update_start_ o<-& (call_stmt_1657_update_completed_ 0)
          // start: WAR dependencies for pkt_pointer
          // done: WAR dependencies for pkt_pointer
          // start: WAR dependencies for tx_flag
          // done: WAR dependencies for tx_flag
          // end: 			$call getTxPacketPointerFromServer (tx_q_index ) (pkt_pointer tx_flag ) 
          // start: 			$guard (~tx_flag) $call transmitPacket (pkt_pointer ) (transmitted_flag ) 
          //  file nic.linked.aa, line 696
          $T[call_stmt_1661_sample_start_] 
          $T[call_stmt_1661_sample_completed_] 
          $T[call_stmt_1661_update_start_] 
          $T[call_stmt_1661_update_completed_] 
          // Guard expression
          // tx_flag
          // start: Forward dependencies from tx_flag to transition call_stmt_1661_sample_start_
          call_stmt_1661_sample_start_ <-& (call_stmt_1657_update_completed_)
          // done: Forward dependencies from tx_flag to transition call_stmt_1661_sample_start_
          // RAW reenables for tx_flag
          call_stmt_1657_update_start_ o<-& (call_stmt_1661_sample_completed_ 0)
          // Call input argument 0
          // pkt_pointer
          // start: Forward dependencies from pkt_pointer to transition call_stmt_1661_sample_start_
          call_stmt_1661_sample_start_ <-& (call_stmt_1657_update_completed_)
          // done: Forward dependencies from pkt_pointer to transition call_stmt_1661_sample_start_
          // RAW reenables for pkt_pointer
          call_stmt_1657_update_start_ o<-& (call_stmt_1661_sample_completed_ 0)
          ;;[call_stmt_1661_Sample] 
          {
            $T [crr] $T [cra] 
          }
          ;;[call_stmt_1661_Update] 
          {
            $T [ccr] $T [cca] 
          }
          call_stmt_1661_sample_start_ &-> (call_stmt_1661_Sample)
          call_stmt_1661_sample_completed_ <-& (call_stmt_1661_Sample)
          call_stmt_1661_sample_completed_ &-> ($null)
          call_stmt_1661_update_start_ &-> (call_stmt_1661_Update)
          call_stmt_1661_update_completed_ <-& (call_stmt_1661_Update)
          // Call output argument 0
          // (as target) transmitted_flag
          // self-release: 
          call_stmt_1661_sample_start_ o<-& (call_stmt_1661_sample_completed_ 1)
          $null &-> (call_stmt_1661_update_start_)
          call_stmt_1661_update_start_ o<-& (call_stmt_1661_update_completed_ 0)
          // start: WAR dependencies for transmitted_flag
          // done: WAR dependencies for transmitted_flag
          // end: 			$guard (~tx_flag) $call transmitPacket (pkt_pointer ) (transmitted_flag ) 
          // start: WAR dependencies for push_pointer_back_to_free_Q
          // done: WAR dependencies for push_pointer_back_to_free_Q
          // start:  			$volatile push_pointer_back_to_free_Q := (( ~ tx_flag ) & transmitted_flag) $buffering 1
          //  file nic.linked.aa, line 699
          // volatile! 
          // Source expression
          // (( ~ tx_flag ) & transmitted_flag)
          // ( ~ tx_flag )
          // tx_flag
          // transmitted_flag
          // Target expression
          // (as target) push_pointer_back_to_free_Q
          // start: WAR dependencies for push_pointer_back_to_free_Q
          // done: WAR dependencies for push_pointer_back_to_free_Q
          // end:  			$volatile push_pointer_back_to_free_Q := (( ~ tx_flag ) & transmitted_flag) $buffering 1
          // start: 			$guard (push_pointer_back_to_free_Q) $call pushIntoQueue (($bitcast ($uint<1>) _b1  ) FREE_Q pkt_pointer ) (push_status ) 
          //  file nic.linked.aa, line 701
          $T[call_stmt_1683_sample_start_] 
          $T[call_stmt_1683_sample_completed_] 
          $T[call_stmt_1683_update_start_] 
          $T[call_stmt_1683_update_completed_] 
          // Guard expression
          // push_pointer_back_to_free_Q
          // start: Forward dependencies from push_pointer_back_to_free_Q to transition call_stmt_1683_sample_start_
          call_stmt_1683_sample_start_ <-& (call_stmt_1657_update_completed_)
          call_stmt_1683_sample_start_ <-& (call_stmt_1661_update_completed_)
          // done: Forward dependencies from push_pointer_back_to_free_Q to transition call_stmt_1683_sample_start_
          // RAW reenables for push_pointer_back_to_free_Q
          call_stmt_1657_update_start_ o<-& (call_stmt_1683_sample_completed_ 0)
          call_stmt_1661_update_start_ o<-& (call_stmt_1683_sample_completed_ 0)
          // Call input argument 0
          // Call input argument 1
          // FREE_Q
          // Call input argument 2
          // pkt_pointer
          // start: Forward dependencies from FREE_Q to transition call_stmt_1683_sample_start_
          // special case... expr is signal read, which does not involve control..
          // RAW reenables for FREE_Q
          // start: Forward dependencies from pkt_pointer to transition call_stmt_1683_sample_start_
          call_stmt_1683_sample_start_ <-& (call_stmt_1657_update_completed_)
          // done: Forward dependencies from pkt_pointer to transition call_stmt_1683_sample_start_
          // RAW reenables for pkt_pointer
          call_stmt_1657_update_start_ o<-& (call_stmt_1683_sample_completed_ 0)
          ;;[call_stmt_1683_Sample] 
          {
            $T [crr] $T [cra] 
          }
          ;;[call_stmt_1683_Update] 
          {
            $T [ccr] $T [cca] 
          }
          call_stmt_1683_sample_start_ &-> (call_stmt_1683_Sample)
          call_stmt_1683_sample_completed_ <-& (call_stmt_1683_Sample)
          call_stmt_1683_sample_completed_ &-> ($null)
          call_stmt_1683_update_start_ &-> (call_stmt_1683_Update)
          call_stmt_1683_update_completed_ <-& (call_stmt_1683_Update)
          // Call output argument 0
          // (as target) push_status
          // self-release: 
          call_stmt_1683_sample_start_ o<-& (call_stmt_1683_sample_completed_ 1)
          $null &-> (call_stmt_1683_update_start_)
          call_stmt_1683_update_start_ o<-& (call_stmt_1683_update_completed_ 0)
          // start: WAR dependencies for push_status
          // done: WAR dependencies for push_status
          // end: 			$guard (push_pointer_back_to_free_Q) $call pushIntoQueue (($bitcast ($uint<1>) _b1  ) FREE_Q pkt_pointer ) (push_status ) 
          // start:  			LAST_READ_TX_QUEUE_INDEX := tx_q_index $buffering 1// bits of buffering = 6. 
          //  file nic.linked.aa, line 703
          // Source expression
          // tx_q_index
          // Target expression
          // (as target) LAST_READ_TX_QUEUE_INDEX
          $T[WPIPE_LAST_READ_TX_QUEUE_INDEX_1686_sample_start_] 
          $T[WPIPE_LAST_READ_TX_QUEUE_INDEX_1686_sample_completed_] 
          $T[WPIPE_LAST_READ_TX_QUEUE_INDEX_1686_update_start_] 
          $T[WPIPE_LAST_READ_TX_QUEUE_INDEX_1686_update_completed_] 
          ;;[WPIPE_LAST_READ_TX_QUEUE_INDEX_1686_Sample] 
          {
            // pipe write sample-start LAST_READ_TX_QUEUE_INDEX
            $T [req] $T [ack] 
          }
          ;;[WPIPE_LAST_READ_TX_QUEUE_INDEX_1686_Update] 
          {
            // pipe write update (complete) LAST_READ_TX_QUEUE_INDEX
            $T [req] $T [ack] 
          }
          WPIPE_LAST_READ_TX_QUEUE_INDEX_1686_sample_start_ &-> (WPIPE_LAST_READ_TX_QUEUE_INDEX_1686_Sample)
          WPIPE_LAST_READ_TX_QUEUE_INDEX_1686_sample_completed_ <-& (WPIPE_LAST_READ_TX_QUEUE_INDEX_1686_Sample)
          WPIPE_LAST_READ_TX_QUEUE_INDEX_1686_update_start_ <-& (WPIPE_LAST_READ_TX_QUEUE_INDEX_1686_sample_completed_)
          WPIPE_LAST_READ_TX_QUEUE_INDEX_1686_update_start_ &-> (WPIPE_LAST_READ_TX_QUEUE_INDEX_1686_Update)
          WPIPE_LAST_READ_TX_QUEUE_INDEX_1686_update_completed_ <-& (WPIPE_LAST_READ_TX_QUEUE_INDEX_1686_Update)
          WPIPE_LAST_READ_TX_QUEUE_INDEX_1686_sample_start_ o<-& (WPIPE_LAST_READ_TX_QUEUE_INDEX_1686_update_completed_ 0)
          // start: Forward dependencies from tx_q_index to transition WPIPE_LAST_READ_TX_QUEUE_INDEX_1686_sample_start_
          WPIPE_LAST_READ_TX_QUEUE_INDEX_1686_sample_start_ <-& (phi_stmt_1641_update_completed_)
          // done: Forward dependencies from tx_q_index to transition WPIPE_LAST_READ_TX_QUEUE_INDEX_1686_sample_start_
          // RAW reenables for tx_q_index
          phi_stmt_1641_update_start_ o<-& (WPIPE_LAST_READ_TX_QUEUE_INDEX_1686_sample_completed_ 0)
          // end:  			LAST_READ_TX_QUEUE_INDEX := tx_q_index $buffering 1// bits of buffering = 6. 
          // (CONTROL_REGISTER [] 0 )
          // CONTROL_REGISTER
          $T [loop_body_delay_to_condition_start] $delay
          loop_body_start &-> (loop_body_delay_to_condition_start)
          loop_body_delay_to_condition_start &-> (condition_evaluated)
          // start: Forward dependencies from (CONTROL_REGISTER [] 0 ) to transition condition_evaluated
          // non-constant expression which depends only on signals/constants?
          // done: Forward dependencies from (CONTROL_REGISTER [] 0 ) to transition condition_evaluated
          condition_evaluated &-> ($null)
          // load-store dependencies..
          // pipe read/write dependencies for pipe LAST_READ_TX_QUEUE_INDEX
          // read-dependencies for pipe LAST_READ_TX_QUEUE_INDEX
          // write-dependencies for pipe LAST_READ_TX_QUEUE_INDEX
          // signal write dependencies for LAST_READ_TX_QUEUE_INDEX
          // pipe read/write dependencies for pipe MEMORY_TO_NIC_RESPONSE
          // read-dependencies for pipe MEMORY_TO_NIC_RESPONSE
          call_stmt_1661_sample_start_ <-& (call_stmt_1657_update_completed_)
          call_stmt_1683_sample_start_ <-& (call_stmt_1661_update_completed_)
          // ring dependency in pipeline.
          call_stmt_1657_update_start_ o<-& (call_stmt_1683_update_completed_ 0)
          // write-dependencies for pipe MEMORY_TO_NIC_RESPONSE
          // signal write dependencies for MEMORY_TO_NIC_RESPONSE
          // pipe read/write dependencies for pipe NIC_REQUEST_REGISTER_ACCESS_PIPE
          // read-dependencies for pipe NIC_REQUEST_REGISTER_ACCESS_PIPE
          // write-dependencies for pipe NIC_REQUEST_REGISTER_ACCESS_PIPE
          // signal write dependencies for NIC_REQUEST_REGISTER_ACCESS_PIPE
          // pipe read/write dependencies for pipe NIC_RESPONSE_REGISTER_ACCESS_PIPE
          // read-dependencies for pipe NIC_RESPONSE_REGISTER_ACCESS_PIPE
          // write-dependencies for pipe NIC_RESPONSE_REGISTER_ACCESS_PIPE
          // signal write dependencies for NIC_RESPONSE_REGISTER_ACCESS_PIPE
          // pipe read/write dependencies for pipe NIC_TO_MEMORY_REQUEST
          // read-dependencies for pipe NIC_TO_MEMORY_REQUEST
          // write-dependencies for pipe NIC_TO_MEMORY_REQUEST
          call_stmt_1661_sample_start_ <-& (call_stmt_1657_update_completed_)
          call_stmt_1683_sample_start_ <-& (call_stmt_1661_update_completed_)
          // ring dependency in pipeline.
          call_stmt_1657_sample_start_ o<-& (call_stmt_1683_update_completed_ 0)
          // signal write dependencies for NIC_TO_MEMORY_REQUEST
          // pipe read/write dependencies for pipe nic_to_mac_transmit_pipe
          // read-dependencies for pipe nic_to_mac_transmit_pipe
          // write-dependencies for pipe nic_to_mac_transmit_pipe
          // signal write dependencies for nic_to_mac_transmit_pipe
        }
        ( first_time_through_loop_body  back_edge_to_loop_body) 
        ( condition_evaluated )
        ;; [loop_exit] 
        {
          $T [ack] 
        }
        ;; [loop_taken] 
        {
          $T [ack] 
        }
        do_while_stmt_1639__entry__ <-| ($entry)
        loop_body_done <-| ( do_while_stmt_1639_loop_body ) 
        condition_done |-> (loop_exit loop_taken)
        do_while_stmt_1639__exit__ |-> ($exit)
        $bind condition_done <= do_while_stmt_1639_loop_body : condition_evaluated
        $bind do_while_stmt_1639__entry__  => do_while_stmt_1639_loop_body : first_time_through_loop_body 
        $bind loop_back  => do_while_stmt_1639_loop_body : back_edge_to_loop_body 
        $terminate (loop_exit loop_taken loop_body_done) (loop_back do_while_stmt_1639__exit__)
      }
      do_while_stmt_1639__entry__ |-> (do_while_stmt_1639)
      do_while_stmt_1639__exit__ <-| (do_while_stmt_1639)
      // control-path for merge  
      //  file nic.linked.aa, line 682
      ;;[merge_stmt_1630_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      merge_stmt_1630__entry__ |-> (merge_stmt_1630_dead_link)
      merge_stmt_1630__exit__ <-| (merge_stmt_1630_dead_link)
      //---------------------   merge statement  file nic.linked.aa, line 682  --------------------------
      ||[merge_stmt_1630__entry___PhiReq] 
      {
        // no phi statements in merge..
      }
      merge_stmt_1630__entry__ |-> (merge_stmt_1630__entry___PhiReq)
      ||[disable_loopback_PhiReq] 
      {
        // no phi statements in merge..
      }
      disable_loopback |-> (disable_loopback_PhiReq)
      ||[not_enabled_yet_loopback_PhiReq] 
      {
        // no phi statements in merge..
      }
      not_enabled_yet_loopback |-> (not_enabled_yet_loopback_PhiReq)
      $P [merge_stmt_1630_PhiReqMerge] 
      merge_stmt_1630_PhiReqMerge <-| ( merge_stmt_1630__entry___PhiReq  disable_loopback_PhiReq  not_enabled_yet_loopback_PhiReq )
      ||[merge_stmt_1630_PhiAck] 
      {
        $T [dummy] 
      }
      merge_stmt_1630_PhiReqMerge |-> (merge_stmt_1630_PhiAck)
      merge_stmt_1630__exit__  <-| (merge_stmt_1630_PhiAck)
      //---------------------  end of merge statement  file nic.linked.aa, line 682  --------------------------
      merge_stmt_1630__entry__ <-| (branch_block_stmt_1629__entry__)
      if_stmt_1631__entry__ <-| (merge_stmt_1630__exit__)
      do_while_stmt_1639__entry__ <-| (if_stmt_1631__exit__)
      disable_loopback <-| (do_while_stmt_1639__exit__)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %transmitEngineDaemon%main%
    //  file nic.linked.aa, line 682
    // constant-object-declarations for block %transmitEngineDaemon%main%
    //  file nic.linked.aa, line 690
    // constant-object-declarations for block %transmitEngineDaemon%main
    //  file nic.linked.aa, line 680
    // constant-object-declarations for block %transmitEngineDaemon
    //  file nic.linked.aa, line 674
    // 0 
    $constant $W[konst_1627_wire_constant] : $int<6> := _b000000// 0
    // constant-declarations for block %transmitEngineDaemon%main
    //  file nic.linked.aa, line 680
    // constant-declarations for block %transmitEngineDaemon%main%
    //  file nic.linked.aa, line 682
    // if-statement  
    //  file nic.linked.aa, line 18647056
    // 0 
    $constant $W[konst_1633_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // do-while statement  
    //  file nic.linked.aa, line 688
    // 0 
    $constant $W[konst_1691_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // constant-declarations for block %transmitEngineDaemon%main%
    //  file nic.linked.aa, line 690
    // constant-declarations for phi:  			$phi tx_q_index := 			  ((LAST_READ_TX_QUEUE_INDEX + 1 ) & ($bitcast ($uint<6>) (NUMBER_OF_SERVERS - 1 ) )) $on   $entry ,   $loopback 
    // type of target is $uint<6>
    //  file nic.linked.aa, line 691
    // 1 
    $constant $W[konst_1644_wire_constant] : $int<6> := _b000001// 1
    // 1 
    $constant $W[konst_1647_wire_constant] : $int<32> := _b00000000000000000000000000000001// 1
    // 			$call getTxPacketPointerFromServer (tx_q_index ) (pkt_pointer tx_flag ) 
    //  file nic.linked.aa, line 695
    // 			$guard (~tx_flag) $call transmitPacket (pkt_pointer ) (transmitted_flag ) 
    //  file nic.linked.aa, line 696
    // 			$guard (push_pointer_back_to_free_Q) $call pushIntoQueue (($bitcast ($uint<1>) _b1  ) FREE_Q pkt_pointer ) (push_status ) 
    //  file nic.linked.aa, line 701
    // ($bitcast ($uint<1>) _b1  )
    $constant $W[type_cast_1679_wire_constant] : $int<1> := _b1// 1
    // 	LAST_READ_TX_QUEUE_INDEX := 0  $buffering 1// bits of buffering = 6. 
    //  file nic.linked.aa, line 679
    // LAST_READ_TX_QUEUE_INDEX
    // block %transmitEngineDaemon%main
    //  file nic.linked.aa, line 680
    // if statement  
    //  file nic.linked.aa, line 18647056
    // CONTROL_REGISTER
    $W[RPIPE_CONTROL_REGISTER_1632_wire] : $int<32>
    // (CONTROL_REGISTER [] 0 )
    $intermediate $W[BITSEL_u32_u1_1634_wire] : $int<1>
    // ( ~ (CONTROL_REGISTER [] 0 ) )
    $intermediate $W[NOT_u1_u1_1635_wire] : $int<1>
    // do-while statement  
    //  file nic.linked.aa, line 688
    // CONTROL_REGISTER
    $W[RPIPE_CONTROL_REGISTER_1690_wire] : $int<32>
    // (CONTROL_REGISTER [] 0 )
    $intermediate $W[BITSEL_u32_u1_1692_wire] : $int<1>
    // merge-statement  
    //  file nic.linked.aa, line 690
    // 			$phi tx_q_index := 			  ((LAST_READ_TX_QUEUE_INDEX + 1 ) & ($bitcast ($uint<6>) (NUMBER_OF_SERVERS - 1 ) )) $on   $entry ,   $loopback 
    // type of target is $uint<6>
    //  file nic.linked.aa, line 691
    // LAST_READ_TX_QUEUE_INDEX
    $W[RPIPE_LAST_READ_TX_QUEUE_INDEX_1643_wire] : $int<6>
    // (LAST_READ_TX_QUEUE_INDEX + 1 )
    $intermediate $W[ADD_u6_u6_1645_wire] : $int<6>
    // NUMBER_OF_SERVERS
    $W[RPIPE_NUMBER_OF_SERVERS_1646_wire] : $int<32>
    // (NUMBER_OF_SERVERS - 1 )
    $intermediate $W[SUB_u32_u32_1648_wire] : $int<32>
    // ($bitcast ($uint<6>) (NUMBER_OF_SERVERS - 1 ) )
    $intermediate $W[type_cast_1649_wire] : $int<6>
    // ((LAST_READ_TX_QUEUE_INDEX + 1 ) & ($bitcast ($uint<6>) (NUMBER_OF_SERVERS - 1 ) ))
    $intermediate $W[AND_u6_u6_1650_wire] : $int<6>
    // tx_q_index
    $W[tx_q_index_1641] : $int<6>
    // 			$call getTxPacketPointerFromServer (tx_q_index ) (pkt_pointer tx_flag ) 
    //  file nic.linked.aa, line 695
    // pkt_pointer
    $W[pkt_pointer_1657] : $int<32>
    // tx_flag
    $W[tx_flag_1657] : $int<1>
    // 			$guard (~tx_flag) $call transmitPacket (pkt_pointer ) (transmitted_flag ) 
    //  file nic.linked.aa, line 696
    // transmitted_flag
    $W[transmitted_flag_1661] : $int<1>
    // 			$volatile push_pointer_back_to_free_Q := (( ~ tx_flag ) & transmitted_flag) $buffering 1
    //  file nic.linked.aa, line 699
    // ( ~ tx_flag )
    $intermediate $W[NOT_u1_u1_1671_wire] : $int<1>
    // push_pointer_back_to_free_Q
    $W[push_pointer_back_to_free_Q_1674] : $int<1>
    // 			$guard (push_pointer_back_to_free_Q) $call pushIntoQueue (($bitcast ($uint<1>) _b1  ) FREE_Q pkt_pointer ) (push_status ) 
    //  file nic.linked.aa, line 701
    // FREE_Q
    $W[RPIPE_FREE_Q_1680_wire] : $int<36>
    // push_status
    $W[push_status_1683] : $int<1>
    // 			LAST_READ_TX_QUEUE_INDEX := tx_q_index $buffering 1// bits of buffering = 6. 
    //  file nic.linked.aa, line 703
    // LAST_READ_TX_QUEUE_INDEX
    // 	LAST_READ_TX_QUEUE_INDEX := 0  $buffering 1// bits of buffering = 6. 
    //  file nic.linked.aa, line 679
    // LAST_READ_TX_QUEUE_INDEX
    $ioport $out [WPIPE_LAST_READ_TX_QUEUE_INDEX_1626_inst]  (konst_1627_wire_constant) (LAST_READ_TX_QUEUE_INDEX) 
    // datapath-instances for block %transmitEngineDaemon%main
    //  file nic.linked.aa, line 680
    // datapath-instances for if  
    //  file nic.linked.aa, line 18647056
    // CONTROL_REGISTER
    $ioport $in [RPIPE_CONTROL_REGISTER_1632_inst] (CONTROL_REGISTER) (RPIPE_CONTROL_REGISTER_1632_wire) 
    $buffering $out RPIPE_CONTROL_REGISTER_1632_inst RPIPE_CONTROL_REGISTER_1632_wire 1
    // (CONTROL_REGISTER [] 0 )
    [][BITSEL_u32_u1_1634_inst] (RPIPE_CONTROL_REGISTER_1632_wire konst_1633_wire_constant) (BITSEL_u32_u1_1634_wire)   $flowthrough 
    $delay BITSEL_u32_u1_1634_inst 0
    // ( ~ (CONTROL_REGISTER [] 0 ) )
    ~ [NOT_u1_u1_1635_inst] (BITSEL_u32_u1_1634_wire) (NOT_u1_u1_1635_wire)   $flowthrough
    $delay NOT_u1_u1_1635_inst 0
    ==0? [if_stmt_1631_branch] (NOT_u1_u1_1635_wire)
    // datapath-instances for do-while  
    //  file nic.linked.aa, line 688
    // CONTROL_REGISTER
    $ioport $in [RPIPE_CONTROL_REGISTER_1690_inst] (CONTROL_REGISTER) (RPIPE_CONTROL_REGISTER_1690_wire)  $fullrate 
    $buffering $out RPIPE_CONTROL_REGISTER_1690_inst RPIPE_CONTROL_REGISTER_1690_wire 1
    // (CONTROL_REGISTER [] 0 )
    [][BITSEL_u32_u1_1692_inst] (RPIPE_CONTROL_REGISTER_1690_wire konst_1691_wire_constant) (BITSEL_u32_u1_1692_wire)   $flowthrough 
    $delay BITSEL_u32_u1_1692_inst 0
    ==0? [do_while_stmt_1639_branch] (BITSEL_u32_u1_1692_wire)
    $flowthrough
    // data-path instances for merge  
    //  file nic.linked.aa, line 690
    // 			$phi tx_q_index := 			  ((LAST_READ_TX_QUEUE_INDEX + 1 ) & ($bitcast ($uint<6>) (NUMBER_OF_SERVERS - 1 ) )) $on   $entry ,   $loopback 
    // type of target is $uint<6>
    //  file nic.linked.aa, line 691
    // LAST_READ_TX_QUEUE_INDEX
    $ioport $in [RPIPE_LAST_READ_TX_QUEUE_INDEX_1643_inst] (LAST_READ_TX_QUEUE_INDEX) (RPIPE_LAST_READ_TX_QUEUE_INDEX_1643_wire)  $fullrate 
    $buffering $out RPIPE_LAST_READ_TX_QUEUE_INDEX_1643_inst RPIPE_LAST_READ_TX_QUEUE_INDEX_1643_wire 1
    // (LAST_READ_TX_QUEUE_INDEX + 1 )
    +[ADD_u6_u6_1645_inst] (RPIPE_LAST_READ_TX_QUEUE_INDEX_1643_wire konst_1644_wire_constant) (ADD_u6_u6_1645_wire)   $flowthrough 
    $delay ADD_u6_u6_1645_inst 0
    // NUMBER_OF_SERVERS
    $ioport $in [RPIPE_NUMBER_OF_SERVERS_1646_inst] (NUMBER_OF_SERVERS) (RPIPE_NUMBER_OF_SERVERS_1646_wire)  $fullrate 
    $buffering $out RPIPE_NUMBER_OF_SERVERS_1646_inst RPIPE_NUMBER_OF_SERVERS_1646_wire 1
    // (NUMBER_OF_SERVERS - 1 )
    -[SUB_u32_u32_1648_inst] (RPIPE_NUMBER_OF_SERVERS_1646_wire konst_1647_wire_constant) (SUB_u32_u32_1648_wire)   $flowthrough 
    $delay SUB_u32_u32_1648_inst 0
    // ($bitcast ($uint<6>) (NUMBER_OF_SERVERS - 1 ) )
    # := [type_cast_1649_inst] (SUB_u32_u32_1648_wire) (type_cast_1649_wire)   $flowthrough
    $delay type_cast_1649_inst 0
    // ((LAST_READ_TX_QUEUE_INDEX + 1 ) & ($bitcast ($uint<6>) (NUMBER_OF_SERVERS - 1 ) ))
    &[AND_u6_u6_1650_inst] (ADD_u6_u6_1645_wire type_cast_1649_wire) (AND_u6_u6_1650_wire)    $fullrate
    $buffering  $out AND_u6_u6_1650_inst AND_u6_u6_1650_wire 1
    $delay AND_u6_u6_1650_inst 1
    # := [ssrc_phi_stmt_1641] (AND_u6_u6_1650_wire) (tx_q_index_1641)    $flowthrough 
    // 			$call getTxPacketPointerFromServer (tx_q_index ) (pkt_pointer tx_flag ) 
    //  file nic.linked.aa, line 695
    $call [call_stmt_1657_call] $module getTxPacketPointerFromServer(tx_q_index_1641) (pkt_pointer_1657 tx_flag_1657)   $fullrate
    $delay call_stmt_1657_call 4
    $buffering  $in call_stmt_1657_call tx_q_index_1641 1
    $buffering  $out call_stmt_1657_call pkt_pointer_1657 1
    $buffering  $out call_stmt_1657_call tx_flag_1657 1
    // 			$guard (~tx_flag) $call transmitPacket (pkt_pointer ) (transmitted_flag ) 
    //  file nic.linked.aa, line 696
    $call [call_stmt_1661_call] $module transmitPacket(pkt_pointer_1657) (transmitted_flag_1661) $guard ( ~ tx_flag_1657 )   $fullrate
    $delay call_stmt_1661_call 4
    $buffering  $in call_stmt_1661_call pkt_pointer_1657 1
    $buffering  $out call_stmt_1661_call transmitted_flag_1661 1
    // 			$volatile push_pointer_back_to_free_Q := (( ~ tx_flag ) & transmitted_flag) $buffering 1
    //  file nic.linked.aa, line 699
    // ( ~ tx_flag )
    ~ [NOT_u1_u1_1671_inst] (tx_flag_1657) (NOT_u1_u1_1671_wire)   $flowthrough
    $delay NOT_u1_u1_1671_inst 0
    // (( ~ tx_flag ) & transmitted_flag)
    &[AND_u1_u1_1673_inst] (NOT_u1_u1_1671_wire transmitted_flag_1661) (push_pointer_back_to_free_Q_1674)   $flowthrough 
    $delay AND_u1_u1_1673_inst 0
    // 			$guard (push_pointer_back_to_free_Q) $call pushIntoQueue (($bitcast ($uint<1>) _b1  ) FREE_Q pkt_pointer ) (push_status ) 
    //  file nic.linked.aa, line 701
    // FREE_Q
    $ioport $in [RPIPE_FREE_Q_1680_inst] (FREE_Q) (RPIPE_FREE_Q_1680_wire) $guard ( push_pointer_back_to_free_Q_1674 )  $fullrate 
    $buffering $out RPIPE_FREE_Q_1680_inst RPIPE_FREE_Q_1680_wire 1
    $call [call_stmt_1683_call] $module pushIntoQueue(type_cast_1679_wire_constant RPIPE_FREE_Q_1680_wire pkt_pointer_1657) (push_status_1683) $guard ( push_pointer_back_to_free_Q_1674 )   $fullrate
    $delay call_stmt_1683_call 4
    $buffering  $in call_stmt_1683_call type_cast_1679_wire_constant 1
    $buffering  $in call_stmt_1683_call RPIPE_FREE_Q_1680_wire 1
    $buffering  $in call_stmt_1683_call pkt_pointer_1657 1
    $buffering  $out call_stmt_1683_call push_status_1683 1
    // 			LAST_READ_TX_QUEUE_INDEX := tx_q_index $buffering 1// bits of buffering = 6. 
    //  file nic.linked.aa, line 703
    // LAST_READ_TX_QUEUE_INDEX
    $ioport $out [WPIPE_LAST_READ_TX_QUEUE_INDEX_1686_inst]  (tx_q_index_1641) (LAST_READ_TX_QUEUE_INDEX)  $fullrate 
  }
  // end data-path
  // 	LAST_READ_TX_QUEUE_INDEX := 0  $buffering 1// bits of buffering = 6. 
  //  file nic.linked.aa, line 679
  // LAST_READ_TX_QUEUE_INDEX
  WPIPE_LAST_READ_TX_QUEUE_INDEX_1626_inst <=> (assign_stmt_1628/WPIPE_LAST_READ_TX_QUEUE_INDEX_1626_Sample/req assign_stmt_1628/WPIPE_LAST_READ_TX_QUEUE_INDEX_1626_Update/req) (assign_stmt_1628/WPIPE_LAST_READ_TX_QUEUE_INDEX_1626_Sample/ack assign_stmt_1628/WPIPE_LAST_READ_TX_QUEUE_INDEX_1626_Update/ack)
  // CP-DP links for merge  
  //  file nic.linked.aa, line 682
  // CP-DP links for if  
  //  file nic.linked.aa, line 18647056
  // CONTROL_REGISTER
  // (CONTROL_REGISTER [] 0 )
  // ( ~ (CONTROL_REGISTER [] 0 ) )
  if_stmt_1631_branch <=> (branch_block_stmt_1629/if_stmt_1631_eval_test/branch_req) (branch_block_stmt_1629/if_stmt_1631_else_link/else_choice_transition branch_block_stmt_1629/if_stmt_1631_if_link/if_choice_transition)
  // CP-DP links for do-while  do_while_stmt_1639
  //  file nic.linked.aa, line 688
  // ((LAST_READ_TX_QUEUE_INDEX + 1 ) & ($bitcast ($uint<6>) (NUMBER_OF_SERVERS - 1 ) ))
  // (LAST_READ_TX_QUEUE_INDEX + 1 )
  // LAST_READ_TX_QUEUE_INDEX
  // (NUMBER_OF_SERVERS - 1 )
  // NUMBER_OF_SERVERS
  AND_u6_u6_1650_inst <=> (branch_block_stmt_1629/do_while_stmt_1639/do_while_stmt_1639_loop_body/AND_u6_u6_1650_Sample/rr branch_block_stmt_1629/do_while_stmt_1639/do_while_stmt_1639_loop_body/AND_u6_u6_1650_Update/cr) (branch_block_stmt_1629/do_while_stmt_1639/do_while_stmt_1639_loop_body/AND_u6_u6_1650_Sample/ra branch_block_stmt_1629/do_while_stmt_1639/do_while_stmt_1639_loop_body/AND_u6_u6_1650_Update/ca)
  // 			$call getTxPacketPointerFromServer (tx_q_index ) (pkt_pointer tx_flag ) 
  //  file nic.linked.aa, line 695
  // tx_q_index
  call_stmt_1657_call <=> (branch_block_stmt_1629/do_while_stmt_1639/do_while_stmt_1639_loop_body/call_stmt_1657_Sample/crr branch_block_stmt_1629/do_while_stmt_1639/do_while_stmt_1639_loop_body/call_stmt_1657_Update/ccr) (branch_block_stmt_1629/do_while_stmt_1639/do_while_stmt_1639_loop_body/call_stmt_1657_Sample/cra branch_block_stmt_1629/do_while_stmt_1639/do_while_stmt_1639_loop_body/call_stmt_1657_Update/cca)
  // 			$guard (~tx_flag) $call transmitPacket (pkt_pointer ) (transmitted_flag ) 
  //  file nic.linked.aa, line 696
  // pkt_pointer
  call_stmt_1661_call <=> (branch_block_stmt_1629/do_while_stmt_1639/do_while_stmt_1639_loop_body/call_stmt_1661_Sample/crr branch_block_stmt_1629/do_while_stmt_1639/do_while_stmt_1639_loop_body/call_stmt_1661_Update/ccr) (branch_block_stmt_1629/do_while_stmt_1639/do_while_stmt_1639_loop_body/call_stmt_1661_Sample/cra branch_block_stmt_1629/do_while_stmt_1639/do_while_stmt_1639_loop_body/call_stmt_1661_Update/cca)
  // 			$volatile push_pointer_back_to_free_Q := (( ~ tx_flag ) & transmitted_flag) $buffering 1
  //  file nic.linked.aa, line 699
  // (( ~ tx_flag ) & transmitted_flag)
  // tx_flag
  // transmitted_flag
  // 			$guard (push_pointer_back_to_free_Q) $call pushIntoQueue (($bitcast ($uint<1>) _b1  ) FREE_Q pkt_pointer ) (push_status ) 
  //  file nic.linked.aa, line 701
  // FREE_Q
  // pkt_pointer
  call_stmt_1683_call <=> (branch_block_stmt_1629/do_while_stmt_1639/do_while_stmt_1639_loop_body/call_stmt_1683_Sample/crr branch_block_stmt_1629/do_while_stmt_1639/do_while_stmt_1639_loop_body/call_stmt_1683_Update/ccr) (branch_block_stmt_1629/do_while_stmt_1639/do_while_stmt_1639_loop_body/call_stmt_1683_Sample/cra branch_block_stmt_1629/do_while_stmt_1639/do_while_stmt_1639_loop_body/call_stmt_1683_Update/cca)
  // 			LAST_READ_TX_QUEUE_INDEX := tx_q_index $buffering 1// bits of buffering = 6. 
  //  file nic.linked.aa, line 703
  // tx_q_index
  // LAST_READ_TX_QUEUE_INDEX
  WPIPE_LAST_READ_TX_QUEUE_INDEX_1686_inst <=> (branch_block_stmt_1629/do_while_stmt_1639/do_while_stmt_1639_loop_body/WPIPE_LAST_READ_TX_QUEUE_INDEX_1686_Sample/req branch_block_stmt_1629/do_while_stmt_1639/do_while_stmt_1639_loop_body/WPIPE_LAST_READ_TX_QUEUE_INDEX_1686_Update/req) (branch_block_stmt_1629/do_while_stmt_1639/do_while_stmt_1639_loop_body/WPIPE_LAST_READ_TX_QUEUE_INDEX_1686_Sample/ack branch_block_stmt_1629/do_while_stmt_1639/do_while_stmt_1639_loop_body/WPIPE_LAST_READ_TX_QUEUE_INDEX_1686_Update/ack)
  // (CONTROL_REGISTER [] 0 )
  // CONTROL_REGISTER
  do_while_stmt_1639_branch <=> (branch_block_stmt_1629/do_while_stmt_1639/do_while_stmt_1639_loop_body/condition_evaluated) (branch_block_stmt_1629/do_while_stmt_1639/loop_exit/ack branch_block_stmt_1629/do_while_stmt_1639/loop_taken/ack)
}
