// Virtual circuit produced from Aa description by Aa2VC 
// $pipe  AFB_NIC_REQUEST : $uint<74>  $depth 2 
// can point into 
// in scope  top-level
$pipe [AFB_NIC_REQUEST] 74 $depth 2 
// $pipe  AFB_NIC_RESPONSE : $uint<33>  $depth 2 
// can point into 
// in scope  top-level
$pipe [AFB_NIC_RESPONSE] 33 $depth 2 
// $pipe  CONTROL_REGISTER : $uint<32>  $depth 1  $signal 
// can point into 
// in scope  top-level
$pipe [CONTROL_REGISTER] 32 $depth 1 $signal 
// $pipe  FREE_Q : $uint<36>  $depth 1  $signal 
// can point into 
// in scope  top-level
$pipe [FREE_Q] 36 $depth 1 $signal 
// $pipe  LAST_READ_TX_QUEUE_INDEX : $uint<6>  $depth 1  $signal 
// can point into 
// in scope  top-level
$pipe [LAST_READ_TX_QUEUE_INDEX] 6 $depth 1 $signal 
// $pipe  LAST_WRITTEN_RX_QUEUE_INDEX : $uint<6>  $depth 1  $signal 
// can point into 
// in scope  top-level
$pipe [LAST_WRITTEN_RX_QUEUE_INDEX] 6 $depth 1 $signal 
// $pipe  MEMORY_TO_NIC_RESPONSE : $uint<65>  $depth 2 
// can point into 
// in scope  top-level
$pipe [MEMORY_TO_NIC_RESPONSE] 65 $depth 2 
// $pipe  NIC_REQUEST_REGISTER_ACCESS_PIPE : $uint<43>  $depth 2 
// can point into 
// in scope  top-level
$pipe [NIC_REQUEST_REGISTER_ACCESS_PIPE] 43 $depth 2 
// $pipe  NIC_RESPONSE_REGISTER_ACCESS_PIPE : $uint<33>  $depth 2 
// can point into 
// in scope  top-level
$pipe [NIC_RESPONSE_REGISTER_ACCESS_PIPE] 33 $depth 2 
// $pipe  NIC_TO_MEMORY_REQUEST : $uint<110>  $depth 2 
// can point into 
// in scope  top-level
$pipe [NIC_TO_MEMORY_REQUEST] 110 $depth 2 
// $pipe  NUMBER_OF_SERVERS : $uint<32>  $depth 1  $signal 
// can point into 
// in scope  top-level
$pipe [NUMBER_OF_SERVERS] 32 $depth 1 $signal 
// $pipe  control_word_request_pipe_0 : $uint<32>  $depth 2 
// can point into 
// in scope  top-level
$pipe [control_word_request_pipe_0] 32 $depth 2 
// $pipe  control_word_request_pipe_1 : $uint<64>  $depth 2 
// can point into 
// in scope  top-level
$pipe [control_word_request_pipe_1] 64 $depth 2 
// $pipe  control_word_response_pipe : $uint<64>  $depth 2 
// can point into 
// in scope  top-level
$pipe [control_word_response_pipe] 64 $depth 2 
// $pipe  mac_to_nic_data : $uint<73>  $depth 2 
// can point into 
// in scope  top-level
$pipe [mac_to_nic_data] 73 $depth 2 
// $pipe  mac_to_nic_data_0 : $uint<64>  $depth 2 
// can point into 
// in scope  top-level
$pipe [mac_to_nic_data_0] 64 $depth 2 
// $pipe  mac_to_nic_data_1 : $uint<16>  $depth 2 
// can point into 
// in scope  top-level
$pipe [mac_to_nic_data_1] 16 $depth 2 
// $pipe  mem_req0_pipe0 : $uint<64>  $depth 2 
// can point into 
// in scope  top-level
$pipe [mem_req0_pipe0] 64 $depth 2 
// $pipe  mem_req0_pipe0_tester : $uint<64>  $depth 2 
// can point into 
// in scope  top-level
$pipe [mem_req0_pipe0_tester] 64 $depth 2 
// $pipe  mem_req0_pipe1 : $uint<64>  $depth 2 
// can point into 
// in scope  top-level
$pipe [mem_req0_pipe1] 64 $depth 2 
// $pipe  mem_req0_pipe1_tester : $uint<64>  $depth 2 
// can point into 
// in scope  top-level
$pipe [mem_req0_pipe1_tester] 64 $depth 2 
// $pipe  mem_req1_pipe0 : $uint<64>  $depth 2 
// can point into 
// in scope  top-level
$pipe [mem_req1_pipe0] 64 $depth 2 
// $pipe  mem_req1_pipe1 : $uint<64>  $depth 2 
// can point into 
// in scope  top-level
$pipe [mem_req1_pipe1] 64 $depth 2 
// $pipe  mem_resp0_pipe0 : $uint<64>  $depth 2 
// can point into 
// in scope  top-level
$pipe [mem_resp0_pipe0] 64 $depth 2 
// $pipe  mem_resp0_pipe0_tester : $uint<64>  $depth 2 
// can point into 
// in scope  top-level
$pipe [mem_resp0_pipe0_tester] 64 $depth 2 
// $pipe  mem_resp0_pipe1 : $uint<8>  $depth 2 
// can point into 
// in scope  top-level
$pipe [mem_resp0_pipe1] 8 $depth 2 
// $pipe  mem_resp0_pipe1_tester : $uint<8>  $depth 2 
// can point into 
// in scope  top-level
$pipe [mem_resp0_pipe1_tester] 8 $depth 2 
// $pipe  mem_resp1_pipe0 : $uint<64>  $depth 2 
// can point into 
// in scope  top-level
$pipe [mem_resp1_pipe0] 64 $depth 2 
// $pipe  mem_resp1_pipe1 : $uint<8>  $depth 2 
// can point into 
// in scope  top-level
$pipe [mem_resp1_pipe1] 8 $depth 2 
// $pipe  nic_rx_to_header : $uint<73>  $depth 2 
// can point into 
// in scope  top-level
$pipe [nic_rx_to_header] 73 $depth 2 
// $pipe  nic_rx_to_packet : $uint<73>  $depth 2 
// can point into 
// in scope  top-level
$pipe [nic_rx_to_packet] 73 $depth 2 
// $pipe  nic_to_mac_data_0 : $uint<64>  $depth 2 
// can point into 
// in scope  top-level
$pipe [nic_to_mac_data_0] 64 $depth 2 
// $pipe  nic_to_mac_data_1 : $uint<16>  $depth 2 
// can point into 
// in scope  top-level
$pipe [nic_to_mac_data_1] 16 $depth 2 
// $pipe  nic_to_mac_transmit_pipe : $uint<73>  $depth 2 
// can point into 
// in scope  top-level
$pipe [nic_to_mac_transmit_pipe] 73 $depth 2 
$constant $W[BAD_PACKET_DATA] : $int<64> := _b1111111111111111111111111111111111111111111111111111111111111111// -1
$constant $W[FULL_BYTE_MASK] : $int<8> := _b11111111// 255
$constant $W[HEADER_TKEEP] : $int<8> := _b00111111// 63
$constant $W[QUEUE_SIZE_MASK] : $int<32> := _b00000000000000000000000000001000// 8
$constant $W[RX_QUEUES_REG_START_OFFSET] : $int<6> := _b000010// 2
$constant $W[S0] : $int<2> := _b00// 0
$constant $W[S1] : $int<2> := _b01// 1
$constant $W[S2] : $int<2> := _b10// 2
$constant $W[TX_QUEUES_REG_START_OFFSET] : $int<6> := _b001010// 10
$constant $W[WAIT_TIME] : $int<10> := _b0000001010// 10
// load store constants for object nic_registers
$constant $W[nic_registers_base_address] : $int<6> := _b000000
// Declared gated clocks.
$memoryspace [memory_space_0] 
{
  $capacity 64
  $datawidth 32
  $addrwidth 6
  $maxaccesswidth 32
  // $storage  nic_registers : $array[64] $of $uint<32> // memory space index = 0  base address = 0  word size = 32
  // can point into 
  // in scope  top-level
  $object [nic_registers] : $array[64] $of $int<32>
}
$module [AccessRegister] 
{
  $in rwbar:$int<1>
  // can point into 
  bmask:$int<4>
  // can point into 
  register_index:$int<6>
  // can point into 
  wdata:$int<32>
  // can point into 
  $out rdata:$int<32>
  // can point into 
  // pipe-declarations for block %AccessRegister
  //  file nic.linked.opt.aa, line 81
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    ::[assign_stmt_97_to_assign_stmt_115] 
    {
      // start: WAR dependencies for request
      // ignored out-of-scope w_root  rwbar : $uint<1> 
      // ignored out-of-scope w_root  bmask : $uint<4> 
      // ignored out-of-scope w_root  register_index : $uint<6> 
      // ignored out-of-scope w_root  wdata : $uint<32> 
      // done: WAR dependencies for request
      // start:  	$volatile request := ((rwbar && bmask) && (register_index && wdata)) $buffering 1
      //  file nic.linked.opt.aa, line 87
      // volatile! 
      // Source expression
      // ((rwbar && bmask) && (register_index && wdata))
      // (rwbar && bmask)
      // rwbar
      // bmask
      // (register_index && wdata)
      // register_index
      // wdata
      // Target expression
      // (as target) request
      // start: WAR dependencies for request
      // ignored out-of-scope w_root  rwbar : $uint<1> 
      // ignored out-of-scope w_root  bmask : $uint<4> 
      // ignored out-of-scope w_root  register_index : $uint<6> 
      // ignored out-of-scope w_root  wdata : $uint<32> 
      // done: WAR dependencies for request
      // end:  	$volatile request := ((rwbar && bmask) && (register_index && wdata)) $buffering 1
      // start:  	NIC_REQUEST_REGISTER_ACCESS_PIPE := request $buffering 1// bits of buffering = 43. 
      //  file nic.linked.opt.aa, line 89
      // Source expression
      // request
      // Target expression
      // (as target) NIC_REQUEST_REGISTER_ACCESS_PIPE
      $T[WPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_103_sample_start_] 
      $T[WPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_103_sample_completed_] 
      $T[WPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_103_update_start_] 
      $T[WPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_103_update_completed_] 
      ;;[WPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_103_Sample] 
      {
        // pipe write sample-start NIC_REQUEST_REGISTER_ACCESS_PIPE
        $T [req] $T [ack] 
      }
      ;;[WPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_103_Update] 
      {
        // pipe write update (complete) NIC_REQUEST_REGISTER_ACCESS_PIPE
        $T [req] $T [ack] 
      }
      WPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_103_sample_start_ &-> (WPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_103_Sample)
      WPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_103_sample_completed_ <-& (WPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_103_Sample)
      WPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_103_update_start_ <-& (WPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_103_sample_completed_)
      WPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_103_update_start_ &-> (WPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_103_Update)
      WPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_103_update_completed_ <-& (WPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_103_Update)
      // start: Forward dependencies from request to transition WPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_103_sample_start_
      // done: Forward dependencies from request to transition WPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_103_sample_start_
      // end:  	NIC_REQUEST_REGISTER_ACCESS_PIPE := request $buffering 1// bits of buffering = 43. 
      // start:  	response := NIC_RESPONSE_REGISTER_ACCESS_PIPE $buffering 1// bits of buffering = 33. 
      //  file nic.linked.opt.aa, line 91
      // Source expression
      // NIC_RESPONSE_REGISTER_ACCESS_PIPE
      $T[RPIPE_NIC_RESPONSE_REGISTER_ACCESS_PIPE_108_sample_start_] 
      $T[RPIPE_NIC_RESPONSE_REGISTER_ACCESS_PIPE_108_sample_completed_] 
      $T[RPIPE_NIC_RESPONSE_REGISTER_ACCESS_PIPE_108_update_start_] 
      $T[RPIPE_NIC_RESPONSE_REGISTER_ACCESS_PIPE_108_update_completed_] 
      ;;[RPIPE_NIC_RESPONSE_REGISTER_ACCESS_PIPE_108_Sample] 
      {
        // pipe read sample
        $T [rr] $T [ra] 
      }
      ;;[RPIPE_NIC_RESPONSE_REGISTER_ACCESS_PIPE_108_Update] 
      {
        // pipe read update
        $T [cr] $T [ca] 
      }
      RPIPE_NIC_RESPONSE_REGISTER_ACCESS_PIPE_108_sample_start_ &-> (RPIPE_NIC_RESPONSE_REGISTER_ACCESS_PIPE_108_Sample)
      RPIPE_NIC_RESPONSE_REGISTER_ACCESS_PIPE_108_sample_completed_ <-& (RPIPE_NIC_RESPONSE_REGISTER_ACCESS_PIPE_108_Sample)
      RPIPE_NIC_RESPONSE_REGISTER_ACCESS_PIPE_108_update_start_ <-& (RPIPE_NIC_RESPONSE_REGISTER_ACCESS_PIPE_108_sample_completed_)
      RPIPE_NIC_RESPONSE_REGISTER_ACCESS_PIPE_108_update_start_ &-> (RPIPE_NIC_RESPONSE_REGISTER_ACCESS_PIPE_108_Update)
      RPIPE_NIC_RESPONSE_REGISTER_ACCESS_PIPE_108_update_completed_ <-& (RPIPE_NIC_RESPONSE_REGISTER_ACCESS_PIPE_108_Update)
      // Target expression
      // (as target) response
      // start: WAR dependencies for response
      // done: WAR dependencies for response
      // end:  	response := NIC_RESPONSE_REGISTER_ACCESS_PIPE $buffering 1// bits of buffering = 33. 
      // start: WAR dependencies for rdata
      // done: WAR dependencies for rdata
      // start:  	$volatile rdata := ( $slice response 31 0 )  $buffering 1
      //  file nic.linked.opt.aa, line 93
      // volatile! 
      // Source expression
      // ( $slice response 31 0 ) 
      // response
      // Target expression
      // (as target) rdata
      // rdata
      // write to interface object
      // start: WAR dependencies for rdata
      // done: WAR dependencies for rdata
      // rdata
      // write to interface object
      // end:  	$volatile rdata := ( $slice response 31 0 )  $buffering 1
      // load-store dependencies..
      // pipe read/write dependencies for pipe NIC_REQUEST_REGISTER_ACCESS_PIPE
      // read-dependencies for pipe NIC_REQUEST_REGISTER_ACCESS_PIPE
      // write-dependencies for pipe NIC_REQUEST_REGISTER_ACCESS_PIPE
      // signal write dependencies for NIC_REQUEST_REGISTER_ACCESS_PIPE
      // pipe read/write dependencies for pipe NIC_RESPONSE_REGISTER_ACCESS_PIPE
      // read-dependencies for pipe NIC_RESPONSE_REGISTER_ACCESS_PIPE
      // write-dependencies for pipe NIC_RESPONSE_REGISTER_ACCESS_PIPE
      // signal write dependencies for NIC_RESPONSE_REGISTER_ACCESS_PIPE
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %AccessRegister
    //  file nic.linked.opt.aa, line 81
    // 	$volatile request := ((rwbar && bmask) && (register_index && wdata)) $buffering 1
    //  file nic.linked.opt.aa, line 87
    // (rwbar && bmask)
    $intermediate $W[CONCAT_u1_u5_92_wire] : $int<5>
    // (register_index && wdata)
    $intermediate $W[CONCAT_u6_u38_95_wire] : $int<38>
    // request
    $W[request_97] : $int<43>
    // 	NIC_REQUEST_REGISTER_ACCESS_PIPE := request $buffering 1// bits of buffering = 43. 
    //  file nic.linked.opt.aa, line 89
    // NIC_REQUEST_REGISTER_ACCESS_PIPE
    // 	response := NIC_RESPONSE_REGISTER_ACCESS_PIPE $buffering 1// bits of buffering = 33. 
    //  file nic.linked.opt.aa, line 91
    // response
    $W[response_109] : $int<33>
    // 	$volatile rdata := ( $slice response 31 0 )  $buffering 1
    //  file nic.linked.opt.aa, line 93
    // rdata
    // 	$volatile request := ((rwbar && bmask) && (register_index && wdata)) $buffering 1
    //  file nic.linked.opt.aa, line 87
    // (rwbar && bmask)
    &&[CONCAT_u1_u5_92_inst] (rwbar bmask) (CONCAT_u1_u5_92_wire)   $flowthrough 
    $delay CONCAT_u1_u5_92_inst 0
    // (register_index && wdata)
    &&[CONCAT_u6_u38_95_inst] (register_index wdata) (CONCAT_u6_u38_95_wire)   $flowthrough 
    $delay CONCAT_u6_u38_95_inst 0
    // ((rwbar && bmask) && (register_index && wdata))
    &&[CONCAT_u5_u43_96_inst] (CONCAT_u1_u5_92_wire CONCAT_u6_u38_95_wire) (request_97)   $flowthrough 
    $delay CONCAT_u5_u43_96_inst 0
    // 	NIC_REQUEST_REGISTER_ACCESS_PIPE := request $buffering 1// bits of buffering = 43. 
    //  file nic.linked.opt.aa, line 89
    // NIC_REQUEST_REGISTER_ACCESS_PIPE
    $ioport $out [WPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_103_inst]  (request_97) (NIC_REQUEST_REGISTER_ACCESS_PIPE) 
    // 	response := NIC_RESPONSE_REGISTER_ACCESS_PIPE $buffering 1// bits of buffering = 33. 
    //  file nic.linked.opt.aa, line 91
    // NIC_RESPONSE_REGISTER_ACCESS_PIPE
    $ioport $in [RPIPE_NIC_RESPONSE_REGISTER_ACCESS_PIPE_108_inst] (NIC_RESPONSE_REGISTER_ACCESS_PIPE) (response_109) 
    $buffering $out RPIPE_NIC_RESPONSE_REGISTER_ACCESS_PIPE_108_inst response_109 1
    // 	$volatile rdata := ( $slice response 31 0 )  $buffering 1
    //  file nic.linked.opt.aa, line 93
    // ( $slice response 31 0 ) 
    [:] [slice_114_inst] (response_109 31 0) (rdata)  $flowthrough
    $delay slice_114_inst 0
  }
  // end data-path
  // 	$volatile request := ((rwbar && bmask) && (register_index && wdata)) $buffering 1
  //  file nic.linked.opt.aa, line 87
  // ((rwbar && bmask) && (register_index && wdata))
  // (rwbar && bmask)
  // rwbar
  // bmask
  // (register_index && wdata)
  // register_index
  // wdata
  // 	NIC_REQUEST_REGISTER_ACCESS_PIPE := request $buffering 1// bits of buffering = 43. 
  //  file nic.linked.opt.aa, line 89
  // request
  // NIC_REQUEST_REGISTER_ACCESS_PIPE
  WPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_103_inst <=> (assign_stmt_97_to_assign_stmt_115/WPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_103_Sample/req assign_stmt_97_to_assign_stmt_115/WPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_103_Update/req) (assign_stmt_97_to_assign_stmt_115/WPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_103_Sample/ack assign_stmt_97_to_assign_stmt_115/WPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_103_Update/ack)
  // 	response := NIC_RESPONSE_REGISTER_ACCESS_PIPE $buffering 1// bits of buffering = 33. 
  //  file nic.linked.opt.aa, line 91
  // NIC_RESPONSE_REGISTER_ACCESS_PIPE
  RPIPE_NIC_RESPONSE_REGISTER_ACCESS_PIPE_108_inst <=> (assign_stmt_97_to_assign_stmt_115/RPIPE_NIC_RESPONSE_REGISTER_ACCESS_PIPE_108_Sample/rr assign_stmt_97_to_assign_stmt_115/RPIPE_NIC_RESPONSE_REGISTER_ACCESS_PIPE_108_Update/cr) (assign_stmt_97_to_assign_stmt_115/RPIPE_NIC_RESPONSE_REGISTER_ACCESS_PIPE_108_Sample/ra assign_stmt_97_to_assign_stmt_115/RPIPE_NIC_RESPONSE_REGISTER_ACCESS_PIPE_108_Update/ca)
  // 	$volatile rdata := ( $slice response 31 0 )  $buffering 1
  //  file nic.linked.opt.aa, line 93
  // response
}
$module [UpdateRegister] 
{
  $in bmask:$int<4>
  // can point into 
  rval:$int<32>
  // can point into 
  wdata:$int<32>
  // can point into 
  index:$int<6>
  // can point into 
  $out wval:$int<32>
  // can point into 
  // pipe-declarations for block %UpdateRegister
  //  file nic.linked.opt.aa, line 95
  // memory-space 0 is written into.
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    ::[assign_stmt_126_to_assign_stmt_195] 
    {
      // start: WAR dependencies for b0
      // ignored out-of-scope w_root  bmask : $uint<4> 
      // done: WAR dependencies for b0
      // start:  	$volatile b0 := ( $slice bmask 3 3 )  $buffering 1
      //  file nic.linked.opt.aa, line 100
      // volatile! 
      // Source expression
      // ( $slice bmask 3 3 ) 
      // bmask
      // Target expression
      // (as target) b0
      // start: WAR dependencies for b0
      // ignored out-of-scope w_root  bmask : $uint<4> 
      // done: WAR dependencies for b0
      // end:  	$volatile b0 := ( $slice bmask 3 3 )  $buffering 1
      // start: WAR dependencies for b1
      // ignored out-of-scope w_root  bmask : $uint<4> 
      // done: WAR dependencies for b1
      // start:  	$volatile b1 := ( $slice bmask 2 2 )  $buffering 1
      //  file nic.linked.opt.aa, line 101
      // volatile! 
      // Source expression
      // ( $slice bmask 2 2 ) 
      // bmask
      // Target expression
      // (as target) b1
      // start: WAR dependencies for b1
      // ignored out-of-scope w_root  bmask : $uint<4> 
      // done: WAR dependencies for b1
      // end:  	$volatile b1 := ( $slice bmask 2 2 )  $buffering 1
      // start: WAR dependencies for b2
      // ignored out-of-scope w_root  bmask : $uint<4> 
      // done: WAR dependencies for b2
      // start:  	$volatile b2 := ( $slice bmask 1 1 )  $buffering 1
      //  file nic.linked.opt.aa, line 102
      // volatile! 
      // Source expression
      // ( $slice bmask 1 1 ) 
      // bmask
      // Target expression
      // (as target) b2
      // start: WAR dependencies for b2
      // ignored out-of-scope w_root  bmask : $uint<4> 
      // done: WAR dependencies for b2
      // end:  	$volatile b2 := ( $slice bmask 1 1 )  $buffering 1
      // start: WAR dependencies for b3
      // ignored out-of-scope w_root  bmask : $uint<4> 
      // done: WAR dependencies for b3
      // start:  	$volatile b3 := ( $slice bmask 0 0 )  $buffering 1
      //  file nic.linked.opt.aa, line 103
      // volatile! 
      // Source expression
      // ( $slice bmask 0 0 ) 
      // bmask
      // Target expression
      // (as target) b3
      // start: WAR dependencies for b3
      // ignored out-of-scope w_root  bmask : $uint<4> 
      // done: WAR dependencies for b3
      // end:  	$volatile b3 := ( $slice bmask 0 0 )  $buffering 1
      // start: WAR dependencies for r0
      // ignored out-of-scope w_root  rval : $uint<32> 
      // done: WAR dependencies for r0
      // start:  	$volatile r0 := ( $slice rval 31 24 )  $buffering 1
      //  file nic.linked.opt.aa, line 104
      // volatile! 
      // Source expression
      // ( $slice rval 31 24 ) 
      // rval
      // Target expression
      // (as target) r0
      // start: WAR dependencies for r0
      // ignored out-of-scope w_root  rval : $uint<32> 
      // done: WAR dependencies for r0
      // end:  	$volatile r0 := ( $slice rval 31 24 )  $buffering 1
      // start: WAR dependencies for r1
      // ignored out-of-scope w_root  rval : $uint<32> 
      // done: WAR dependencies for r1
      // start:  	$volatile r1 := ( $slice rval 23 16 )  $buffering 1
      //  file nic.linked.opt.aa, line 105
      // volatile! 
      // Source expression
      // ( $slice rval 23 16 ) 
      // rval
      // Target expression
      // (as target) r1
      // start: WAR dependencies for r1
      // ignored out-of-scope w_root  rval : $uint<32> 
      // done: WAR dependencies for r1
      // end:  	$volatile r1 := ( $slice rval 23 16 )  $buffering 1
      // start: WAR dependencies for r2
      // ignored out-of-scope w_root  rval : $uint<32> 
      // done: WAR dependencies for r2
      // start:  	$volatile r2 := ( $slice rval 15 8 )  $buffering 1
      //  file nic.linked.opt.aa, line 106
      // volatile! 
      // Source expression
      // ( $slice rval 15 8 ) 
      // rval
      // Target expression
      // (as target) r2
      // start: WAR dependencies for r2
      // ignored out-of-scope w_root  rval : $uint<32> 
      // done: WAR dependencies for r2
      // end:  	$volatile r2 := ( $slice rval 15 8 )  $buffering 1
      // start: WAR dependencies for r3
      // ignored out-of-scope w_root  rval : $uint<32> 
      // done: WAR dependencies for r3
      // start:  	$volatile r3 := ( $slice rval 7 0 )  $buffering 1
      //  file nic.linked.opt.aa, line 107
      // volatile! 
      // Source expression
      // ( $slice rval 7 0 ) 
      // rval
      // Target expression
      // (as target) r3
      // start: WAR dependencies for r3
      // ignored out-of-scope w_root  rval : $uint<32> 
      // done: WAR dependencies for r3
      // end:  	$volatile r3 := ( $slice rval 7 0 )  $buffering 1
      // start: WAR dependencies for w0
      // ignored out-of-scope w_root  wdata : $uint<32> 
      // done: WAR dependencies for w0
      // start:  	$volatile w0 := ( $slice wdata 31 24 )  $buffering 1
      //  file nic.linked.opt.aa, line 108
      // volatile! 
      // Source expression
      // ( $slice wdata 31 24 ) 
      // wdata
      // Target expression
      // (as target) w0
      // start: WAR dependencies for w0
      // ignored out-of-scope w_root  wdata : $uint<32> 
      // done: WAR dependencies for w0
      // end:  	$volatile w0 := ( $slice wdata 31 24 )  $buffering 1
      // start: WAR dependencies for w1
      // ignored out-of-scope w_root  wdata : $uint<32> 
      // done: WAR dependencies for w1
      // start:  	$volatile w1 := ( $slice wdata 23 16 )  $buffering 1
      //  file nic.linked.opt.aa, line 109
      // volatile! 
      // Source expression
      // ( $slice wdata 23 16 ) 
      // wdata
      // Target expression
      // (as target) w1
      // start: WAR dependencies for w1
      // ignored out-of-scope w_root  wdata : $uint<32> 
      // done: WAR dependencies for w1
      // end:  	$volatile w1 := ( $slice wdata 23 16 )  $buffering 1
      // start: WAR dependencies for w2
      // ignored out-of-scope w_root  wdata : $uint<32> 
      // done: WAR dependencies for w2
      // start:  	$volatile w2 := ( $slice wdata 15 8 )  $buffering 1
      //  file nic.linked.opt.aa, line 110
      // volatile! 
      // Source expression
      // ( $slice wdata 15 8 ) 
      // wdata
      // Target expression
      // (as target) w2
      // start: WAR dependencies for w2
      // ignored out-of-scope w_root  wdata : $uint<32> 
      // done: WAR dependencies for w2
      // end:  	$volatile w2 := ( $slice wdata 15 8 )  $buffering 1
      // start: WAR dependencies for w3
      // ignored out-of-scope w_root  wdata : $uint<32> 
      // done: WAR dependencies for w3
      // start:  	$volatile w3 := ( $slice wdata 7 0 )  $buffering 1
      //  file nic.linked.opt.aa, line 111
      // volatile! 
      // Source expression
      // ( $slice wdata 7 0 ) 
      // wdata
      // Target expression
      // (as target) w3
      // start: WAR dependencies for w3
      // ignored out-of-scope w_root  wdata : $uint<32> 
      // done: WAR dependencies for w3
      // end:  	$volatile w3 := ( $slice wdata 7 0 )  $buffering 1
      // start:  	wval := ((( $mux b0 w0  r0 )  && ( $mux b1 w1  r1 ) ) && (( $mux b2 w2  r2 )  && ( $mux b3 w3  r3 ) )) $buffering 1// bits of buffering = 32. 
      //  file nic.linked.opt.aa, line 112
      // Source expression
      // ((( $mux b0 w0  r0 )  && ( $mux b1 w1  r1 ) ) && (( $mux b2 w2  r2 )  && ( $mux b3 w3  r3 ) ))
      $T[CONCAT_u16_u32_190_sample_start_] 
      $T[CONCAT_u16_u32_190_sample_completed_] 
      $T[CONCAT_u16_u32_190_update_start_] 
      $T[CONCAT_u16_u32_190_update_completed_] 
      // (( $mux b0 w0  r0 )  && ( $mux b1 w1  r1 ) )
      // ( $mux b0 w0  r0 ) 
      // b0
      // w0
      // r0
      // ( $mux b1 w1  r1 ) 
      // b1
      // w1
      // r1
      // (( $mux b2 w2  r2 )  && ( $mux b3 w3  r3 ) )
      // ( $mux b2 w2  r2 ) 
      // b2
      // w2
      // r2
      // ( $mux b3 w3  r3 ) 
      // b3
      // w3
      // r3
      // start: Forward dependencies from (( $mux b0 w0  r0 )  && ( $mux b1 w1  r1 ) ) to transition CONCAT_u16_u32_190_sample_start_
      // done: Forward dependencies from (( $mux b0 w0  r0 )  && ( $mux b1 w1  r1 ) ) to transition CONCAT_u16_u32_190_sample_start_
      // start: Forward dependencies from (( $mux b2 w2  r2 )  && ( $mux b3 w3  r3 ) ) to transition CONCAT_u16_u32_190_sample_start_
      // done: Forward dependencies from (( $mux b2 w2  r2 )  && ( $mux b3 w3  r3 ) ) to transition CONCAT_u16_u32_190_sample_start_
      ;;[CONCAT_u16_u32_190_Sample] 
      {
        // binary expression 
        $T [rr] $T [ra]  // (split) binary operation 
      }
      ;;[CONCAT_u16_u32_190_Update] 
      {
        // binary expression 
        $T [cr] $T [ca] // (split) binary operation 
      }
      CONCAT_u16_u32_190_sample_start_ &-> (CONCAT_u16_u32_190_Sample)
      CONCAT_u16_u32_190_sample_completed_ <-& (CONCAT_u16_u32_190_Sample)
      CONCAT_u16_u32_190_sample_completed_ &-> ($null)
      CONCAT_u16_u32_190_update_start_ &-> (CONCAT_u16_u32_190_Update)
      CONCAT_u16_u32_190_update_completed_ <-& (CONCAT_u16_u32_190_Update)
      // Target expression
      // (as target) wval
      // wval
      // write to interface object
      // start: WAR dependencies for wval
      // done: WAR dependencies for wval
      // wval
      // write to interface object
      // end:  	wval := ((( $mux b0 w0  r0 )  && ( $mux b1 w1  r1 ) ) && (( $mux b2 w2  r2 )  && ( $mux b3 w3  r3 ) )) $buffering 1// bits of buffering = 32. 
      // start:  	nic_registers[index] := wval $buffering 1// bits of buffering = 32. 
      //  file nic.linked.opt.aa, line 113
      // Source expression
      // wval
      // Target expression
      // nic_registers[index]
      $T[array_obj_ref_193_sample_start_] 
      $T[array_obj_ref_193_sample_completed_] 
      $T[array_obj_ref_193_update_start_] 
      $T[array_obj_ref_193_update_completed_] 
      $T[array_obj_ref_193_word_address_calculated] 
      $T[array_obj_ref_193_root_address_calculated] 
      $T[array_obj_ref_193_offset_calculated] 
      $T[array_obj_ref_193_index_resized_0] 
      $T[array_obj_ref_193_index_scaled_0] 
      $T[array_obj_ref_193_index_computed_0] 
      // index
      // start: Forward dependencies from index to transition array_obj_ref_193_index_computed_0
      // done: Forward dependencies from index to transition array_obj_ref_193_index_computed_0
      ;;[array_obj_ref_193_index_resize_0] 
      {
        $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
      }
      array_obj_ref_193_index_computed_0 &-> (array_obj_ref_193_index_resize_0)
      array_obj_ref_193_index_resized_0 <-& (array_obj_ref_193_index_resize_0)
      ;;[array_obj_ref_193_index_scale_0] 
      {
        $T [scale_rename_req] $T [scale_rename_ack] // rename 
      }
      array_obj_ref_193_index_resized_0 &-> (array_obj_ref_193_index_scale_0)
      array_obj_ref_193_index_scaled_0 <-& (array_obj_ref_193_index_scale_0)
      ;;[array_obj_ref_193_final_index_sum_regn] 
      {
        $T [req] $T [ack] // rename
      }
      array_obj_ref_193_index_scaled_0 &-> (array_obj_ref_193_final_index_sum_regn)
      array_obj_ref_193_offset_calculated <-& (array_obj_ref_193_final_index_sum_regn)
      ;;[array_obj_ref_193_base_plus_offset] 
      {
        $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
      }
      array_obj_ref_193_offset_calculated &-> (array_obj_ref_193_base_plus_offset)
      array_obj_ref_193_root_address_calculated <-& (array_obj_ref_193_base_plus_offset)
      ;;[array_obj_ref_193_word_addrgen] 
      {
        $T [root_register_req] $T [root_register_ack]
      }
      array_obj_ref_193_root_address_calculated &-> (array_obj_ref_193_word_addrgen)
      array_obj_ref_193_word_address_calculated <-& (array_obj_ref_193_word_addrgen)
      ;;[array_obj_ref_193_Sample] 
      {
        ;;[array_obj_ref_193_Split] 
        {
          $T [split_req] $T [split_ack]
        }
        ||[word_access_start] 
        {
          ;;[word_0] 
          {
            $T [rr] $T [ra] 
          }
        }
      }
      ;;[array_obj_ref_193_Update] 
      {
        ||[word_access_complete] 
        {
          ;;[word_0] 
          {
            $T [cr] $T [ca] 
          }
        }
      }
      array_obj_ref_193_sample_start_ <-& (array_obj_ref_193_word_address_calculated)
      array_obj_ref_193_sample_start_ &-> (array_obj_ref_193_Sample)
      array_obj_ref_193_sample_completed_ <-& (array_obj_ref_193_Sample)
      array_obj_ref_193_sample_completed_ &-> ($null)
      array_obj_ref_193_update_start_ &-> (array_obj_ref_193_Update)
      array_obj_ref_193_update_completed_ <-& (array_obj_ref_193_Update)
      // start: Forward dependencies from wval to transition array_obj_ref_193_sample_start_
      array_obj_ref_193_sample_start_ <-& (CONCAT_u16_u32_190_update_completed_)
      // done: Forward dependencies from wval to transition array_obj_ref_193_sample_start_
      // end:  	nic_registers[index] := wval $buffering 1// bits of buffering = 32. 
      // load-store dependencies..
      // memory-space  memory_space_0
      //  array_obj_ref_193 store
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %UpdateRegister
    //  file nic.linked.opt.aa, line 95
    // ( $mux b0 w0  r0 ) 
    // ( $mux b1 w1  r1 ) 
    // ( $mux b2 w2  r2 ) 
    // ( $mux b3 w3  r3 ) 
    // nic_registers[index]
    $constant $W[array_obj_ref_193_resized_base_address] : $int<6> := _b000000// 0
    $constant $W[array_obj_ref_193_offset_scale_factor_0] : $int<6> := _b000001// 1
    $constant $W[array_obj_ref_193_word_offset_0] : $int<6> := _b000000// 0
    // 	$volatile b0 := ( $slice bmask 3 3 )  $buffering 1
    //  file nic.linked.opt.aa, line 100
    // b0
    $W[b0_126] : $int<1>
    // 	$volatile b1 := ( $slice bmask 2 2 )  $buffering 1
    //  file nic.linked.opt.aa, line 101
    // b1
    $W[b1_130] : $int<1>
    // 	$volatile b2 := ( $slice bmask 1 1 )  $buffering 1
    //  file nic.linked.opt.aa, line 102
    // b2
    $W[b2_134] : $int<1>
    // 	$volatile b3 := ( $slice bmask 0 0 )  $buffering 1
    //  file nic.linked.opt.aa, line 103
    // b3
    $W[b3_138] : $int<1>
    // 	$volatile r0 := ( $slice rval 31 24 )  $buffering 1
    //  file nic.linked.opt.aa, line 104
    // r0
    $W[r0_142] : $int<8>
    // 	$volatile r1 := ( $slice rval 23 16 )  $buffering 1
    //  file nic.linked.opt.aa, line 105
    // r1
    $W[r1_146] : $int<8>
    // 	$volatile r2 := ( $slice rval 15 8 )  $buffering 1
    //  file nic.linked.opt.aa, line 106
    // r2
    $W[r2_150] : $int<8>
    // 	$volatile r3 := ( $slice rval 7 0 )  $buffering 1
    //  file nic.linked.opt.aa, line 107
    // r3
    $W[r3_154] : $int<8>
    // 	$volatile w0 := ( $slice wdata 31 24 )  $buffering 1
    //  file nic.linked.opt.aa, line 108
    // w0
    $W[w0_158] : $int<8>
    // 	$volatile w1 := ( $slice wdata 23 16 )  $buffering 1
    //  file nic.linked.opt.aa, line 109
    // w1
    $W[w1_162] : $int<8>
    // 	$volatile w2 := ( $slice wdata 15 8 )  $buffering 1
    //  file nic.linked.opt.aa, line 110
    // w2
    $W[w2_166] : $int<8>
    // 	$volatile w3 := ( $slice wdata 7 0 )  $buffering 1
    //  file nic.linked.opt.aa, line 111
    // w3
    $W[w3_170] : $int<8>
    // 	wval := ((( $mux b0 w0  r0 )  && ( $mux b1 w1  r1 ) ) && (( $mux b2 w2  r2 )  && ( $mux b3 w3  r3 ) )) $buffering 1// bits of buffering = 32. 
    //  file nic.linked.opt.aa, line 112
    // ( $mux b0 w0  r0 ) 
    $intermediate $W[MUX_175_wire] : $int<8>
    // ( $mux b1 w1  r1 ) 
    $intermediate $W[MUX_179_wire] : $int<8>
    // (( $mux b0 w0  r0 )  && ( $mux b1 w1  r1 ) )
    $intermediate $W[CONCAT_u8_u16_180_wire] : $int<16>
    // ( $mux b2 w2  r2 ) 
    $intermediate $W[MUX_184_wire] : $int<8>
    // ( $mux b3 w3  r3 ) 
    $intermediate $W[MUX_188_wire] : $int<8>
    // (( $mux b2 w2  r2 )  && ( $mux b3 w3  r3 ) )
    $intermediate $W[CONCAT_u8_u16_189_wire] : $int<16>
    // wval
    // 	nic_registers[index] := wval $buffering 1// bits of buffering = 32. 
    //  file nic.linked.opt.aa, line 113
    // nic_registers[index]
    $intermediate $W[R_index_192_resized] : $int<6>
    $intermediate $W[R_index_192_scaled] : $int<6>
    $intermediate $W[array_obj_ref_193_final_offset] : $int<6>
    $intermediate $W[array_obj_ref_193_root_address] : $int<6>
    $W[array_obj_ref_193_word_address_0] : $pointer<memory_space_0>
    $W[array_obj_ref_193_data_0] : $int<32>
    // 	$volatile b0 := ( $slice bmask 3 3 )  $buffering 1
    //  file nic.linked.opt.aa, line 100
    // ( $slice bmask 3 3 ) 
    [:] [slice_125_inst] (bmask 3 3) (b0_126)  $flowthrough
    $delay slice_125_inst 0
    // 	$volatile b1 := ( $slice bmask 2 2 )  $buffering 1
    //  file nic.linked.opt.aa, line 101
    // ( $slice bmask 2 2 ) 
    [:] [slice_129_inst] (bmask 2 2) (b1_130)  $flowthrough
    $delay slice_129_inst 0
    // 	$volatile b2 := ( $slice bmask 1 1 )  $buffering 1
    //  file nic.linked.opt.aa, line 102
    // ( $slice bmask 1 1 ) 
    [:] [slice_133_inst] (bmask 1 1) (b2_134)  $flowthrough
    $delay slice_133_inst 0
    // 	$volatile b3 := ( $slice bmask 0 0 )  $buffering 1
    //  file nic.linked.opt.aa, line 103
    // ( $slice bmask 0 0 ) 
    [:] [slice_137_inst] (bmask 0 0) (b3_138)  $flowthrough
    $delay slice_137_inst 0
    // 	$volatile r0 := ( $slice rval 31 24 )  $buffering 1
    //  file nic.linked.opt.aa, line 104
    // ( $slice rval 31 24 ) 
    [:] [slice_141_inst] (rval 31 24) (r0_142)  $flowthrough
    $delay slice_141_inst 0
    // 	$volatile r1 := ( $slice rval 23 16 )  $buffering 1
    //  file nic.linked.opt.aa, line 105
    // ( $slice rval 23 16 ) 
    [:] [slice_145_inst] (rval 23 16) (r1_146)  $flowthrough
    $delay slice_145_inst 0
    // 	$volatile r2 := ( $slice rval 15 8 )  $buffering 1
    //  file nic.linked.opt.aa, line 106
    // ( $slice rval 15 8 ) 
    [:] [slice_149_inst] (rval 15 8) (r2_150)  $flowthrough
    $delay slice_149_inst 0
    // 	$volatile r3 := ( $slice rval 7 0 )  $buffering 1
    //  file nic.linked.opt.aa, line 107
    // ( $slice rval 7 0 ) 
    [:] [slice_153_inst] (rval 7 0) (r3_154)  $flowthrough
    $delay slice_153_inst 0
    // 	$volatile w0 := ( $slice wdata 31 24 )  $buffering 1
    //  file nic.linked.opt.aa, line 108
    // ( $slice wdata 31 24 ) 
    [:] [slice_157_inst] (wdata 31 24) (w0_158)  $flowthrough
    $delay slice_157_inst 0
    // 	$volatile w1 := ( $slice wdata 23 16 )  $buffering 1
    //  file nic.linked.opt.aa, line 109
    // ( $slice wdata 23 16 ) 
    [:] [slice_161_inst] (wdata 23 16) (w1_162)  $flowthrough
    $delay slice_161_inst 0
    // 	$volatile w2 := ( $slice wdata 15 8 )  $buffering 1
    //  file nic.linked.opt.aa, line 110
    // ( $slice wdata 15 8 ) 
    [:] [slice_165_inst] (wdata 15 8) (w2_166)  $flowthrough
    $delay slice_165_inst 0
    // 	$volatile w3 := ( $slice wdata 7 0 )  $buffering 1
    //  file nic.linked.opt.aa, line 111
    // ( $slice wdata 7 0 ) 
    [:] [slice_169_inst] (wdata 7 0) (w3_170)  $flowthrough
    $delay slice_169_inst 0
    // 	wval := ((( $mux b0 w0  r0 )  && ( $mux b1 w1  r1 ) ) && (( $mux b2 w2  r2 )  && ( $mux b3 w3  r3 ) )) $buffering 1// bits of buffering = 32. 
    //  file nic.linked.opt.aa, line 112
    // ( $mux b0 w0  r0 ) 
    ? [MUX_175_inst] (b0_126 w0_158 r0_142) (MUX_175_wire)  $flowthrough
    // ( $mux b1 w1  r1 ) 
    ? [MUX_179_inst] (b1_130 w1_162 r1_146) (MUX_179_wire)  $flowthrough
    // (( $mux b0 w0  r0 )  && ( $mux b1 w1  r1 ) )
    &&[CONCAT_u8_u16_180_inst] (MUX_175_wire MUX_179_wire) (CONCAT_u8_u16_180_wire)   $flowthrough 
    $delay CONCAT_u8_u16_180_inst 0
    // ( $mux b2 w2  r2 ) 
    ? [MUX_184_inst] (b2_134 w2_166 r2_150) (MUX_184_wire)  $flowthrough
    // ( $mux b3 w3  r3 ) 
    ? [MUX_188_inst] (b3_138 w3_170 r3_154) (MUX_188_wire)  $flowthrough
    // (( $mux b2 w2  r2 )  && ( $mux b3 w3  r3 ) )
    &&[CONCAT_u8_u16_189_inst] (MUX_184_wire MUX_188_wire) (CONCAT_u8_u16_189_wire)   $flowthrough 
    $delay CONCAT_u8_u16_189_inst 0
    // ((( $mux b0 w0  r0 )  && ( $mux b1 w1  r1 ) ) && (( $mux b2 w2  r2 )  && ( $mux b3 w3  r3 ) ))
    &&[CONCAT_u16_u32_190_inst] (CONCAT_u8_u16_180_wire CONCAT_u8_u16_189_wire) (wval)   
    $buffering  $out CONCAT_u16_u32_190_inst wval 1
    $delay CONCAT_u16_u32_190_inst 1
    // 	nic_registers[index] := wval $buffering 1// bits of buffering = 32. 
    //  file nic.linked.opt.aa, line 113
    // nic_registers[index]
    &/ [array_obj_ref_193_index_0_resize] (index) (R_index_192_resized) 
    $flowthrough 
    &/ [array_obj_ref_193_index_0_rename] (R_index_192_resized) (R_index_192_scaled) 
    $flowthrough 
    &/ [array_obj_ref_193_index_offset] (R_index_192_scaled) (array_obj_ref_193_final_offset) 
    $flowthrough 
    &/ [array_obj_ref_193_root_address_inst] (array_obj_ref_193_final_offset) (array_obj_ref_193_root_address) 
    $flowthrough 
    &/ [array_obj_ref_193_addr_0] (array_obj_ref_193_root_address) (array_obj_ref_193_word_address_0) 
    $flowthrough 
    $store [array_obj_ref_193_store_0] $to memory_space_0 (array_obj_ref_193_word_address_0 array_obj_ref_193_data_0) 
    $delay array_obj_ref_193_store_0 4
    &/ [array_obj_ref_193_gather_scatter] (wval) (array_obj_ref_193_data_0) 
    $flowthrough 
  }
  // end data-path
  // 	$volatile b0 := ( $slice bmask 3 3 )  $buffering 1
  //  file nic.linked.opt.aa, line 100
  // bmask
  // 	$volatile b1 := ( $slice bmask 2 2 )  $buffering 1
  //  file nic.linked.opt.aa, line 101
  // bmask
  // 	$volatile b2 := ( $slice bmask 1 1 )  $buffering 1
  //  file nic.linked.opt.aa, line 102
  // bmask
  // 	$volatile b3 := ( $slice bmask 0 0 )  $buffering 1
  //  file nic.linked.opt.aa, line 103
  // bmask
  // 	$volatile r0 := ( $slice rval 31 24 )  $buffering 1
  //  file nic.linked.opt.aa, line 104
  // rval
  // 	$volatile r1 := ( $slice rval 23 16 )  $buffering 1
  //  file nic.linked.opt.aa, line 105
  // rval
  // 	$volatile r2 := ( $slice rval 15 8 )  $buffering 1
  //  file nic.linked.opt.aa, line 106
  // rval
  // 	$volatile r3 := ( $slice rval 7 0 )  $buffering 1
  //  file nic.linked.opt.aa, line 107
  // rval
  // 	$volatile w0 := ( $slice wdata 31 24 )  $buffering 1
  //  file nic.linked.opt.aa, line 108
  // wdata
  // 	$volatile w1 := ( $slice wdata 23 16 )  $buffering 1
  //  file nic.linked.opt.aa, line 109
  // wdata
  // 	$volatile w2 := ( $slice wdata 15 8 )  $buffering 1
  //  file nic.linked.opt.aa, line 110
  // wdata
  // 	$volatile w3 := ( $slice wdata 7 0 )  $buffering 1
  //  file nic.linked.opt.aa, line 111
  // wdata
  // 	wval := ((( $mux b0 w0  r0 )  && ( $mux b1 w1  r1 ) ) && (( $mux b2 w2  r2 )  && ( $mux b3 w3  r3 ) )) $buffering 1// bits of buffering = 32. 
  //  file nic.linked.opt.aa, line 112
  // ((( $mux b0 w0  r0 )  && ( $mux b1 w1  r1 ) ) && (( $mux b2 w2  r2 )  && ( $mux b3 w3  r3 ) ))
  // (( $mux b0 w0  r0 )  && ( $mux b1 w1  r1 ) )
  // b0
  // w0
  // r0
  // ( $mux b0 w0  r0 ) 
  // b1
  // w1
  // r1
  // ( $mux b1 w1  r1 ) 
  // (( $mux b2 w2  r2 )  && ( $mux b3 w3  r3 ) )
  // b2
  // w2
  // r2
  // ( $mux b2 w2  r2 ) 
  // b3
  // w3
  // r3
  // ( $mux b3 w3  r3 ) 
  CONCAT_u16_u32_190_inst <=> (assign_stmt_126_to_assign_stmt_195/CONCAT_u16_u32_190_Sample/rr assign_stmt_126_to_assign_stmt_195/CONCAT_u16_u32_190_Update/cr) (assign_stmt_126_to_assign_stmt_195/CONCAT_u16_u32_190_Sample/ra assign_stmt_126_to_assign_stmt_195/CONCAT_u16_u32_190_Update/ca)
  // 	nic_registers[index] := wval $buffering 1// bits of buffering = 32. 
  //  file nic.linked.opt.aa, line 113
  // wval
  // index
  array_obj_ref_193_index_0_resize <=> (assign_stmt_126_to_assign_stmt_195/array_obj_ref_193_index_resize_0/index_resize_req) (assign_stmt_126_to_assign_stmt_195/array_obj_ref_193_index_resize_0/index_resize_ack)
  array_obj_ref_193_index_0_rename <=> (assign_stmt_126_to_assign_stmt_195/array_obj_ref_193_index_scale_0/scale_rename_req) (assign_stmt_126_to_assign_stmt_195/array_obj_ref_193_index_scale_0/scale_rename_ack)
  array_obj_ref_193_index_offset <=> (assign_stmt_126_to_assign_stmt_195/array_obj_ref_193_final_index_sum_regn/req) (assign_stmt_126_to_assign_stmt_195/array_obj_ref_193_final_index_sum_regn/ack)
  array_obj_ref_193_root_address_inst <=> (assign_stmt_126_to_assign_stmt_195/array_obj_ref_193_base_plus_offset/sum_rename_req) (assign_stmt_126_to_assign_stmt_195/array_obj_ref_193_base_plus_offset/sum_rename_ack)
  array_obj_ref_193_addr_0 <=> (assign_stmt_126_to_assign_stmt_195/array_obj_ref_193_word_addrgen/root_register_req) (assign_stmt_126_to_assign_stmt_195/array_obj_ref_193_word_addrgen/root_register_ack)
  array_obj_ref_193_gather_scatter <=> (assign_stmt_126_to_assign_stmt_195/array_obj_ref_193_Sample/array_obj_ref_193_Split/split_req) (assign_stmt_126_to_assign_stmt_195/array_obj_ref_193_Sample/array_obj_ref_193_Split/split_ack)
  array_obj_ref_193_store_0 <=> (assign_stmt_126_to_assign_stmt_195/array_obj_ref_193_Sample/word_access_start/word_0/rr assign_stmt_126_to_assign_stmt_195/array_obj_ref_193_Update/word_access_complete/word_0/cr) (assign_stmt_126_to_assign_stmt_195/array_obj_ref_193_Sample/word_access_start/word_0/ra assign_stmt_126_to_assign_stmt_195/array_obj_ref_193_Update/word_access_complete/word_0/ca)
}
$module [NicRegisterAccessDaemon] 
{
  // pipe-declarations for block %NicRegisterAccessDaemon
  //  file nic.linked.opt.aa, line 115
  // pipe-declarations for block %NicRegisterAccessDaemon%loop
  //  file nic.linked.opt.aa, line 120
  // memory-space 0 is read from.
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    <>[branch_block_stmt_198] // Branch Block  file nic.linked.opt.aa, line 120
    {
      $P [branch_block_stmt_198__entry__]
      branch_block_stmt_198__entry__ <-| ($entry)
      $P [branch_block_stmt_198__exit__]
      branch_block_stmt_198__exit__ |-> ($exit)
      $P [do_while_stmt_199__entry__] 
      $P [do_while_stmt_199__exit__] 
      // do-while-statement  
      //  file nic.linked.opt.aa, line 122
      <o> [do_while_stmt_199]  $depth 31 $buffering 1 
      {
        $P[do_while_stmt_199__entry__] 
        $P[do_while_stmt_199__exit__] 
        $P[loop_back] 
        $P[condition_done] 
        $P[loop_body_done] 
        $pipeline [do_while_stmt_199_loop_body] 
        {
          // Pipelined!
          $T[back_edge_to_loop_body] 
          $T[first_time_through_loop_body] 
          $T[loop_body_start] 
          $T[condition_evaluated] 
          $transitionmerge [entry_tmerge] (back_edge_to_loop_body first_time_through_loop_body) (loop_body_start)
          $entry <-& (loop_body_start)
          // start:  			req := NIC_REQUEST_REGISTER_ACCESS_PIPE $buffering 1// bits of buffering = 43. 
          //  file nic.linked.opt.aa, line 126
          // Source expression
          // NIC_REQUEST_REGISTER_ACCESS_PIPE
          $T[RPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_202_sample_start_] 
          $T[RPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_202_sample_completed_] 
          $T[RPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_202_update_start_] 
          $T[RPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_202_update_completed_] 
          ;;[RPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_202_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_202_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_202_sample_start_ &-> (RPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_202_Sample)
          RPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_202_sample_completed_ <-& (RPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_202_Sample)
          RPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_202_update_start_ <-& (RPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_202_sample_completed_)
          RPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_202_update_start_ &-> (RPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_202_Update)
          RPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_202_update_completed_ <-& (RPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_202_Update)
          RPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_202_sample_start_ o<-& (RPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_202_update_completed_ 0)
          // Target expression
          // (as target) req
          // start: WAR dependencies for req
          // done: WAR dependencies for req
          // end:  			req := NIC_REQUEST_REGISTER_ACCESS_PIPE $buffering 1// bits of buffering = 43. 
          // start: WAR dependencies for rwbar
          // done: WAR dependencies for rwbar
          // start:  			$volatile rwbar := ( $slice req 42 42 )  $buffering 1
          //  file nic.linked.opt.aa, line 128
          // volatile! 
          // Source expression
          // ( $slice req 42 42 ) 
          // req
          // Target expression
          // (as target) rwbar
          // start: WAR dependencies for rwbar
          // done: WAR dependencies for rwbar
          // end:  			$volatile rwbar := ( $slice req 42 42 )  $buffering 1
          // start: WAR dependencies for bmask
          // done: WAR dependencies for bmask
          // start:  			$volatile bmask := ( $slice req 41 38 )  $buffering 1
          //  file nic.linked.opt.aa, line 129
          // volatile! 
          // Source expression
          // ( $slice req 41 38 ) 
          // req
          // Target expression
          // (as target) bmask
          // start: WAR dependencies for bmask
          // done: WAR dependencies for bmask
          // end:  			$volatile bmask := ( $slice req 41 38 )  $buffering 1
          // start: WAR dependencies for index
          // done: WAR dependencies for index
          // start:  			$volatile index := ( $slice req 37 32 )  $buffering 1
          //  file nic.linked.opt.aa, line 130
          // volatile! 
          // Source expression
          // ( $slice req 37 32 ) 
          // req
          // Target expression
          // (as target) index
          // start: WAR dependencies for index
          // done: WAR dependencies for index
          // end:  			$volatile index := ( $slice req 37 32 )  $buffering 1
          // start: WAR dependencies for wdata
          // done: WAR dependencies for wdata
          // start:  			$volatile wdata := ( $slice req 31 0 )  $buffering 1
          //  file nic.linked.opt.aa, line 131
          // volatile! 
          // Source expression
          // ( $slice req 31 0 ) 
          // req
          // Target expression
          // (as target) wdata
          // start: WAR dependencies for wdata
          // done: WAR dependencies for wdata
          // end:  			$volatile wdata := ( $slice req 31 0 )  $buffering 1
          // start:  			rval := nic_registers[index] $buffering 1// bits of buffering = 32. 
          //  file nic.linked.opt.aa, line 132
          // Source expression
          // nic_registers[index]
          $T[array_obj_ref_223_base_address_calculated] 
          $T[array_obj_ref_223_sample_start_] 
          $T[array_obj_ref_223_sample_completed_] 
          $T[array_obj_ref_223_update_start_] 
          $T[array_obj_ref_223_update_completed_] 
          $T[array_obj_ref_223_word_address_calculated] 
          $T[array_obj_ref_223_root_address_calculated] 
          $T[array_obj_ref_223_offset_calculated] 
          $T[array_obj_ref_223_index_resized_0] 
          $T[array_obj_ref_223_index_scaled_0] 
          $T[array_obj_ref_223_index_computed_0] 
          // index
          // start: Forward dependencies from index to transition array_obj_ref_223_index_computed_0
          array_obj_ref_223_index_computed_0 <-& (RPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_202_update_completed_)
          // done: Forward dependencies from index to transition array_obj_ref_223_index_computed_0
          ;;[array_obj_ref_223_index_resize_0] 
          {
            $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
          }
          array_obj_ref_223_index_computed_0 &-> (array_obj_ref_223_index_resize_0)
          array_obj_ref_223_index_resized_0 <-& (array_obj_ref_223_index_resize_0)
          ;;[array_obj_ref_223_index_scale_0] 
          {
            $T [scale_rename_req] $T [scale_rename_ack] // rename 
          }
          array_obj_ref_223_index_resized_0 &-> (array_obj_ref_223_index_scale_0)
          array_obj_ref_223_index_scaled_0 <-& (array_obj_ref_223_index_scale_0)
          ;;[array_obj_ref_223_final_index_sum_regn] 
          {
            $T [req] $T [ack] // rename
          }
          array_obj_ref_223_index_scaled_0 &-> (array_obj_ref_223_final_index_sum_regn)
          array_obj_ref_223_offset_calculated <-& (array_obj_ref_223_final_index_sum_regn)
          ;;[array_obj_ref_223_base_plus_offset] 
          {
            $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
          }
          array_obj_ref_223_offset_calculated &-> (array_obj_ref_223_base_plus_offset)
          array_obj_ref_223_root_address_calculated <-& (array_obj_ref_223_base_plus_offset)
          ;;[array_obj_ref_223_word_addrgen] 
          {
            $T [root_register_req] $T [root_register_ack]
          }
          array_obj_ref_223_root_address_calculated &-> (array_obj_ref_223_word_addrgen)
          array_obj_ref_223_word_address_calculated <-& (array_obj_ref_223_word_addrgen)
          ;;[array_obj_ref_223_Sample] 
          {
            ||[word_access_start] 
            {
              ;;[word_0] 
              {
                $T [rr] $T [ra] 
              }
            }
          }
          ;;[array_obj_ref_223_Update] 
          {
            ||[word_access_complete] 
            {
              ;;[word_0] 
              {
                $T [cr] $T [ca] 
              }
            }
            ;;[array_obj_ref_223_Merge] 
            {
              $T [merge_req] $T [merge_ack]
            }
          }
          array_obj_ref_223_sample_start_ <-& (array_obj_ref_223_word_address_calculated)
          // reenable-joins
          RPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_202_update_start_ o<-& (array_obj_ref_223_sample_completed_ 0)
          array_obj_ref_223_sample_start_ &-> (array_obj_ref_223_Sample)
          array_obj_ref_223_sample_completed_ <-& (array_obj_ref_223_Sample)
          array_obj_ref_223_sample_completed_ &-> ($null)
          array_obj_ref_223_update_start_ &-> (array_obj_ref_223_Update)
          array_obj_ref_223_update_completed_ <-& (array_obj_ref_223_Update)
          // self-release: 
          array_obj_ref_223_sample_start_ o<-& (array_obj_ref_223_sample_completed_ 1)
          $null &-> (array_obj_ref_223_update_start_)
          array_obj_ref_223_update_start_ o<-& (array_obj_ref_223_update_completed_ 0)
          // Target expression
          // (as target) rval
          // start: WAR dependencies for rval
          // done: WAR dependencies for rval
          // end:  			rval := nic_registers[index] $buffering 1// bits of buffering = 32. 
          // start:  			rwbar_232_delayed_5_0 := rwbar $buffering 5 $cut_through // bits of buffering = 5. 
          //  file nic.linked.opt.aa, line 134
          $T[assign_stmt_230_sample_start_] 
          $T[assign_stmt_230_sample_completed_] 
          $T[assign_stmt_230_update_start_] 
          $T[assign_stmt_230_update_completed_] 
          // Source expression
          // rwbar
          // Target expression
          // (as target) rwbar_232_delayed_5_0
          // both source and target are implicit: use interlock 
          // Interlock 
          ;;[assign_stmt_230_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          ;;[assign_stmt_230_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          assign_stmt_230_sample_start_ &-> (assign_stmt_230_Sample)
          assign_stmt_230_sample_completed_ <-& (assign_stmt_230_Sample)
          assign_stmt_230_sample_completed_ &-> ($null)
          assign_stmt_230_update_start_ &-> (assign_stmt_230_Update)
          assign_stmt_230_update_completed_ <-& (assign_stmt_230_Update)
          // start: Forward dependencies from rwbar to transition assign_stmt_230_sample_start_
          assign_stmt_230_sample_start_ <-& (RPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_202_update_completed_)
          // done: Forward dependencies from rwbar to transition assign_stmt_230_sample_start_
          // RAW reenables for rwbar
          RPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_202_update_start_ o<-& (assign_stmt_230_sample_completed_ 0)
          // self-release: 
          assign_stmt_230_sample_start_ o<-& (assign_stmt_230_sample_completed_ 1)
          $null &-> (assign_stmt_230_update_start_)
          assign_stmt_230_update_start_ o<-& (assign_stmt_230_update_completed_ 0)
          // start: WAR dependencies for rwbar_232_delayed_5_0
          // done: WAR dependencies for rwbar_232_delayed_5_0
          // end:  			rwbar_232_delayed_5_0 := rwbar $buffering 5 $cut_through // bits of buffering = 5. 
          // start:  			bmask_233_delayed_5_0 := bmask $buffering 5 $cut_through // bits of buffering = 20. 
          //  file nic.linked.opt.aa, line 135
          $T[assign_stmt_233_sample_start_] 
          $T[assign_stmt_233_sample_completed_] 
          $T[assign_stmt_233_update_start_] 
          $T[assign_stmt_233_update_completed_] 
          // Source expression
          // bmask
          // Target expression
          // (as target) bmask_233_delayed_5_0
          // both source and target are implicit: use interlock 
          // Interlock 
          ;;[assign_stmt_233_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          ;;[assign_stmt_233_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          assign_stmt_233_sample_start_ &-> (assign_stmt_233_Sample)
          assign_stmt_233_sample_completed_ <-& (assign_stmt_233_Sample)
          assign_stmt_233_sample_completed_ &-> ($null)
          assign_stmt_233_update_start_ &-> (assign_stmt_233_Update)
          assign_stmt_233_update_completed_ <-& (assign_stmt_233_Update)
          // start: Forward dependencies from bmask to transition assign_stmt_233_sample_start_
          assign_stmt_233_sample_start_ <-& (RPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_202_update_completed_)
          // done: Forward dependencies from bmask to transition assign_stmt_233_sample_start_
          // RAW reenables for bmask
          RPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_202_update_start_ o<-& (assign_stmt_233_sample_completed_ 0)
          // self-release: 
          assign_stmt_233_sample_start_ o<-& (assign_stmt_233_sample_completed_ 1)
          $null &-> (assign_stmt_233_update_start_)
          assign_stmt_233_update_start_ o<-& (assign_stmt_233_update_completed_ 0)
          // start: WAR dependencies for bmask_233_delayed_5_0
          // done: WAR dependencies for bmask_233_delayed_5_0
          // end:  			bmask_233_delayed_5_0 := bmask $buffering 5 $cut_through // bits of buffering = 20. 
          // start:  			wdata_235_delayed_5_0 := wdata $buffering 5 $cut_through // bits of buffering = 160. 
          //  file nic.linked.opt.aa, line 136
          $T[assign_stmt_236_sample_start_] 
          $T[assign_stmt_236_sample_completed_] 
          $T[assign_stmt_236_update_start_] 
          $T[assign_stmt_236_update_completed_] 
          // Source expression
          // wdata
          // Target expression
          // (as target) wdata_235_delayed_5_0
          // both source and target are implicit: use interlock 
          // Interlock 
          ;;[assign_stmt_236_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          ;;[assign_stmt_236_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          assign_stmt_236_sample_start_ &-> (assign_stmt_236_Sample)
          assign_stmt_236_sample_completed_ <-& (assign_stmt_236_Sample)
          assign_stmt_236_sample_completed_ &-> ($null)
          assign_stmt_236_update_start_ &-> (assign_stmt_236_Update)
          assign_stmt_236_update_completed_ <-& (assign_stmt_236_Update)
          // start: Forward dependencies from wdata to transition assign_stmt_236_sample_start_
          assign_stmt_236_sample_start_ <-& (RPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_202_update_completed_)
          // done: Forward dependencies from wdata to transition assign_stmt_236_sample_start_
          // RAW reenables for wdata
          RPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_202_update_start_ o<-& (assign_stmt_236_sample_completed_ 0)
          // self-release: 
          assign_stmt_236_sample_start_ o<-& (assign_stmt_236_sample_completed_ 1)
          $null &-> (assign_stmt_236_update_start_)
          assign_stmt_236_update_start_ o<-& (assign_stmt_236_update_completed_ 0)
          // start: WAR dependencies for wdata_235_delayed_5_0
          // done: WAR dependencies for wdata_235_delayed_5_0
          // end:  			wdata_235_delayed_5_0 := wdata $buffering 5 $cut_through // bits of buffering = 160. 
          // start:  			index_236_delayed_5_0 := index $buffering 5 $cut_through // bits of buffering = 30. 
          //  file nic.linked.opt.aa, line 137
          $T[assign_stmt_239_sample_start_] 
          $T[assign_stmt_239_sample_completed_] 
          $T[assign_stmt_239_update_start_] 
          $T[assign_stmt_239_update_completed_] 
          // Source expression
          // index
          // Target expression
          // (as target) index_236_delayed_5_0
          // both source and target are implicit: use interlock 
          // Interlock 
          ;;[assign_stmt_239_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          ;;[assign_stmt_239_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          assign_stmt_239_sample_start_ &-> (assign_stmt_239_Sample)
          assign_stmt_239_sample_completed_ <-& (assign_stmt_239_Sample)
          assign_stmt_239_sample_completed_ &-> ($null)
          assign_stmt_239_update_start_ &-> (assign_stmt_239_Update)
          assign_stmt_239_update_completed_ <-& (assign_stmt_239_Update)
          // start: Forward dependencies from index to transition assign_stmt_239_sample_start_
          assign_stmt_239_sample_start_ <-& (RPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_202_update_completed_)
          // done: Forward dependencies from index to transition assign_stmt_239_sample_start_
          // RAW reenables for index
          RPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_202_update_start_ o<-& (assign_stmt_239_sample_completed_ 0)
          // self-release: 
          assign_stmt_239_sample_start_ o<-& (assign_stmt_239_sample_completed_ 1)
          $null &-> (assign_stmt_239_update_start_)
          assign_stmt_239_update_start_ o<-& (assign_stmt_239_update_completed_ 0)
          // start: WAR dependencies for index_236_delayed_5_0
          // done: WAR dependencies for index_236_delayed_5_0
          // end:  			index_236_delayed_5_0 := index $buffering 5 $cut_through // bits of buffering = 30. 
          // start: 			$guard (~rwbar_232_delayed_5_0) $call UpdateRegister (bmask_233_delayed_5_0 rval wdata_235_delayed_5_0 index_236_delayed_5_0 ) (wval ) 
          //  file nic.linked.opt.aa, line 138
          $T[call_stmt_246_sample_start_] 
          $T[call_stmt_246_sample_completed_] 
          $T[call_stmt_246_update_start_] 
          $T[call_stmt_246_update_completed_] 
          // Guard expression
          // rwbar_232_delayed_5_0
          // start: Forward dependencies from rwbar_232_delayed_5_0 to transition call_stmt_246_sample_start_
          call_stmt_246_sample_start_ <-& (assign_stmt_230_update_completed_)
          // done: Forward dependencies from rwbar_232_delayed_5_0 to transition call_stmt_246_sample_start_
          // RAW reenables for rwbar_232_delayed_5_0
          assign_stmt_230_update_start_ o<-& (call_stmt_246_sample_completed_ 0)
          // Call input argument 0
          // bmask_233_delayed_5_0
          // Call input argument 1
          // rval
          // Call input argument 2
          // wdata_235_delayed_5_0
          // Call input argument 3
          // index_236_delayed_5_0
          // start: Forward dependencies from bmask_233_delayed_5_0 to transition call_stmt_246_sample_start_
          call_stmt_246_sample_start_ <-& (assign_stmt_233_update_completed_)
          // done: Forward dependencies from bmask_233_delayed_5_0 to transition call_stmt_246_sample_start_
          // RAW reenables for bmask_233_delayed_5_0
          assign_stmt_233_update_start_ o<-& (call_stmt_246_sample_completed_ 0)
          // start: Forward dependencies from rval to transition call_stmt_246_sample_start_
          call_stmt_246_sample_start_ <-& (array_obj_ref_223_update_completed_)
          // done: Forward dependencies from rval to transition call_stmt_246_sample_start_
          // RAW reenables for rval
          array_obj_ref_223_update_start_ o<-& (call_stmt_246_sample_completed_ 0)
          // start: Forward dependencies from wdata_235_delayed_5_0 to transition call_stmt_246_sample_start_
          call_stmt_246_sample_start_ <-& (assign_stmt_236_update_completed_)
          // done: Forward dependencies from wdata_235_delayed_5_0 to transition call_stmt_246_sample_start_
          // RAW reenables for wdata_235_delayed_5_0
          assign_stmt_236_update_start_ o<-& (call_stmt_246_sample_completed_ 0)
          // start: Forward dependencies from index_236_delayed_5_0 to transition call_stmt_246_sample_start_
          call_stmt_246_sample_start_ <-& (assign_stmt_239_update_completed_)
          // done: Forward dependencies from index_236_delayed_5_0 to transition call_stmt_246_sample_start_
          // RAW reenables for index_236_delayed_5_0
          assign_stmt_239_update_start_ o<-& (call_stmt_246_sample_completed_ 0)
          ;;[call_stmt_246_Sample] 
          {
            $T [crr] $T [cra] 
          }
          ;;[call_stmt_246_Update] 
          {
            $T [ccr] $T [cca] 
          }
          call_stmt_246_sample_start_ &-> (call_stmt_246_Sample)
          call_stmt_246_sample_completed_ <-& (call_stmt_246_Sample)
          call_stmt_246_sample_completed_ &-> ($null)
          call_stmt_246_update_start_ &-> (call_stmt_246_Update)
          call_stmt_246_update_completed_ <-& (call_stmt_246_Update)
          // Call output argument 0
          // (as target) wval
          // self-release: 
          call_stmt_246_sample_start_ o<-& (call_stmt_246_sample_completed_ 1)
          $null &-> (call_stmt_246_update_start_)
          call_stmt_246_update_start_ o<-& (call_stmt_246_update_completed_ 0)
          // start: WAR dependencies for wval
          // done: WAR dependencies for wval
          // end: 			$guard (~rwbar_232_delayed_5_0) $call UpdateRegister (bmask_233_delayed_5_0 rval wdata_235_delayed_5_0 index_236_delayed_5_0 ) (wval ) 
          // start:  			rwbar_240_delayed_5_0 := rwbar $buffering 5 $cut_through // bits of buffering = 5. 
          //  file nic.linked.opt.aa, line 139
          $T[assign_stmt_249_sample_start_] 
          $T[assign_stmt_249_sample_completed_] 
          $T[assign_stmt_249_update_start_] 
          $T[assign_stmt_249_update_completed_] 
          // Source expression
          // rwbar
          // Target expression
          // (as target) rwbar_240_delayed_5_0
          // both source and target are implicit: use interlock 
          // Interlock 
          ;;[assign_stmt_249_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          ;;[assign_stmt_249_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          assign_stmt_249_sample_start_ &-> (assign_stmt_249_Sample)
          assign_stmt_249_sample_completed_ <-& (assign_stmt_249_Sample)
          assign_stmt_249_sample_completed_ &-> ($null)
          assign_stmt_249_update_start_ &-> (assign_stmt_249_Update)
          assign_stmt_249_update_completed_ <-& (assign_stmt_249_Update)
          // start: Forward dependencies from rwbar to transition assign_stmt_249_sample_start_
          assign_stmt_249_sample_start_ <-& (RPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_202_update_completed_)
          // done: Forward dependencies from rwbar to transition assign_stmt_249_sample_start_
          // RAW reenables for rwbar
          RPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_202_update_start_ o<-& (assign_stmt_249_sample_completed_ 0)
          // self-release: 
          assign_stmt_249_sample_start_ o<-& (assign_stmt_249_sample_completed_ 1)
          $null &-> (assign_stmt_249_update_start_)
          assign_stmt_249_update_start_ o<-& (assign_stmt_249_update_completed_ 0)
          // start: WAR dependencies for rwbar_240_delayed_5_0
          // done: WAR dependencies for rwbar_240_delayed_5_0
          // end:  			rwbar_240_delayed_5_0 := rwbar $buffering 5 $cut_through // bits of buffering = 5. 
          // start: WAR dependencies for rdata
          // done: WAR dependencies for rdata
          // start:  			$volatile rdata := ( $mux rwbar_240_delayed_5_0 rval  ($bitcast ($uint<32>) _b0  ) )  $buffering 1
          //  file nic.linked.opt.aa, line 140
          // volatile! 
          // Source expression
          // ( $mux rwbar_240_delayed_5_0 rval  ($bitcast ($uint<32>) _b0  ) ) 
          // rwbar_240_delayed_5_0
          // rval
          // Target expression
          // (as target) rdata
          // start: WAR dependencies for rdata
          // done: WAR dependencies for rdata
          // end:  			$volatile rdata := ( $mux rwbar_240_delayed_5_0 rval  ($bitcast ($uint<32>) _b0  ) )  $buffering 1
          // start: WAR dependencies for resp
          // done: WAR dependencies for resp
          // start:  			$volatile resp := (($bitcast ($uint<1>) _b0  ) && rdata) $buffering 1
          //  file nic.linked.opt.aa, line 141
          // volatile! 
          // Source expression
          // (($bitcast ($uint<1>) _b0  ) && rdata)
          // rdata
          // Target expression
          // (as target) resp
          // start: WAR dependencies for resp
          // done: WAR dependencies for resp
          // end:  			$volatile resp := (($bitcast ($uint<1>) _b0  ) && rdata) $buffering 1
          // start:  			NIC_RESPONSE_REGISTER_ACCESS_PIPE := resp $buffering 1// bits of buffering = 33. 
          //  file nic.linked.opt.aa, line 142
          // Source expression
          // resp
          // Target expression
          // (as target) NIC_RESPONSE_REGISTER_ACCESS_PIPE
          $T[WPIPE_NIC_RESPONSE_REGISTER_ACCESS_PIPE_263_sample_start_] 
          $T[WPIPE_NIC_RESPONSE_REGISTER_ACCESS_PIPE_263_sample_completed_] 
          $T[WPIPE_NIC_RESPONSE_REGISTER_ACCESS_PIPE_263_update_start_] 
          $T[WPIPE_NIC_RESPONSE_REGISTER_ACCESS_PIPE_263_update_completed_] 
          ;;[WPIPE_NIC_RESPONSE_REGISTER_ACCESS_PIPE_263_Sample] 
          {
            // pipe write sample-start NIC_RESPONSE_REGISTER_ACCESS_PIPE
            $T [req] $T [ack] 
          }
          ;;[WPIPE_NIC_RESPONSE_REGISTER_ACCESS_PIPE_263_Update] 
          {
            // pipe write update (complete) NIC_RESPONSE_REGISTER_ACCESS_PIPE
            $T [req] $T [ack] 
          }
          WPIPE_NIC_RESPONSE_REGISTER_ACCESS_PIPE_263_sample_start_ &-> (WPIPE_NIC_RESPONSE_REGISTER_ACCESS_PIPE_263_Sample)
          WPIPE_NIC_RESPONSE_REGISTER_ACCESS_PIPE_263_sample_completed_ <-& (WPIPE_NIC_RESPONSE_REGISTER_ACCESS_PIPE_263_Sample)
          WPIPE_NIC_RESPONSE_REGISTER_ACCESS_PIPE_263_update_start_ <-& (WPIPE_NIC_RESPONSE_REGISTER_ACCESS_PIPE_263_sample_completed_)
          WPIPE_NIC_RESPONSE_REGISTER_ACCESS_PIPE_263_update_start_ &-> (WPIPE_NIC_RESPONSE_REGISTER_ACCESS_PIPE_263_Update)
          WPIPE_NIC_RESPONSE_REGISTER_ACCESS_PIPE_263_update_completed_ <-& (WPIPE_NIC_RESPONSE_REGISTER_ACCESS_PIPE_263_Update)
          WPIPE_NIC_RESPONSE_REGISTER_ACCESS_PIPE_263_sample_start_ o<-& (WPIPE_NIC_RESPONSE_REGISTER_ACCESS_PIPE_263_update_completed_ 0)
          // start: Forward dependencies from resp to transition WPIPE_NIC_RESPONSE_REGISTER_ACCESS_PIPE_263_sample_start_
          WPIPE_NIC_RESPONSE_REGISTER_ACCESS_PIPE_263_sample_start_ <-& (array_obj_ref_223_update_completed_)
          WPIPE_NIC_RESPONSE_REGISTER_ACCESS_PIPE_263_sample_start_ <-& (assign_stmt_249_update_completed_)
          // done: Forward dependencies from resp to transition WPIPE_NIC_RESPONSE_REGISTER_ACCESS_PIPE_263_sample_start_
          // RAW reenables for resp
          array_obj_ref_223_update_start_ o<-& (WPIPE_NIC_RESPONSE_REGISTER_ACCESS_PIPE_263_sample_completed_ 0)
          assign_stmt_249_update_start_ o<-& (WPIPE_NIC_RESPONSE_REGISTER_ACCESS_PIPE_263_sample_completed_ 0)
          // end:  			NIC_RESPONSE_REGISTER_ACCESS_PIPE := resp $buffering 1// bits of buffering = 33. 
          $T [loop_body_delay_to_condition_start] $delay
          loop_body_start &-> (loop_body_delay_to_condition_start)
          loop_body_delay_to_condition_start &-> (condition_evaluated)
          condition_evaluated &-> ($null)
          // load-store dependencies..
          // memory-space  memory_space_0
          //  array_obj_ref_223 load
          //  call_stmt_246 store
          $T [array_obj_ref_223_call_stmt_246_delay] $delay
          // array_obj_ref_223(load) -> call_stmt_246(store)
          call_stmt_246_sample_start_ <-& (array_obj_ref_223_call_stmt_246_delay)
          array_obj_ref_223_call_stmt_246_delay <-& (array_obj_ref_223_sample_completed_)
          // reenable across ring for memory space memory_space_0
          $T[ring_reenable_memory_space_0] 
          ring_reenable_memory_space_0 <-& (call_stmt_246_update_completed_)
          array_obj_ref_223_sample_start_ o<-& (ring_reenable_memory_space_0 1)
          // pipe read/write dependencies for pipe NIC_REQUEST_REGISTER_ACCESS_PIPE
          // read-dependencies for pipe NIC_REQUEST_REGISTER_ACCESS_PIPE
          // write-dependencies for pipe NIC_REQUEST_REGISTER_ACCESS_PIPE
          // signal write dependencies for NIC_REQUEST_REGISTER_ACCESS_PIPE
          // pipe read/write dependencies for pipe NIC_RESPONSE_REGISTER_ACCESS_PIPE
          // read-dependencies for pipe NIC_RESPONSE_REGISTER_ACCESS_PIPE
          // write-dependencies for pipe NIC_RESPONSE_REGISTER_ACCESS_PIPE
          // signal write dependencies for NIC_RESPONSE_REGISTER_ACCESS_PIPE
        }
        ( first_time_through_loop_body  back_edge_to_loop_body) 
        ( condition_evaluated )
        ;; [loop_exit] 
        {
          $T [ack] 
        }
        ;; [loop_taken] 
        {
          $T [ack] 
        }
        do_while_stmt_199__entry__ <-| ($entry)
        loop_body_done <-| ( do_while_stmt_199_loop_body ) 
        condition_done |-> (loop_exit loop_taken)
        do_while_stmt_199__exit__ |-> ($exit)
        $bind condition_done <= do_while_stmt_199_loop_body : condition_evaluated
        $bind do_while_stmt_199__entry__  => do_while_stmt_199_loop_body : first_time_through_loop_body 
        $bind loop_back  => do_while_stmt_199_loop_body : back_edge_to_loop_body 
        $terminate (loop_exit loop_taken loop_body_done) (loop_back do_while_stmt_199__exit__)
      }
      do_while_stmt_199__entry__ |-> (do_while_stmt_199)
      do_while_stmt_199__exit__ <-| (do_while_stmt_199)
      do_while_stmt_199__entry__ <-| (branch_block_stmt_198__entry__)
      do_while_stmt_199__exit__ |-> (branch_block_stmt_198__exit__)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %NicRegisterAccessDaemon%loop%
    //  file nic.linked.opt.aa, line 124
    // constant-object-declarations for block %NicRegisterAccessDaemon%loop
    //  file nic.linked.opt.aa, line 120
    // constant-object-declarations for block %NicRegisterAccessDaemon
    //  file nic.linked.opt.aa, line 115
    // constant-declarations for block %NicRegisterAccessDaemon%loop
    //  file nic.linked.opt.aa, line 120
    // do-while statement  
    //  file nic.linked.opt.aa, line 122
    // 1 
    $constant $W[konst_267_wire_constant] : $int<1> := _b1// 1
    // constant-declarations for block %NicRegisterAccessDaemon%loop%
    //  file nic.linked.opt.aa, line 124
    // nic_registers[index]
    $constant $W[array_obj_ref_223_resized_base_address] : $int<6> := _b000000// 0
    $constant $W[array_obj_ref_223_offset_scale_factor_0] : $int<6> := _b000001// 1
    $constant $W[array_obj_ref_223_word_offset_0] : $int<6> := _b000000// 0
    // 			$guard (~rwbar_232_delayed_5_0) $call UpdateRegister (bmask_233_delayed_5_0 rval wdata_235_delayed_5_0 index_236_delayed_5_0 ) (wval ) 
    //  file nic.linked.opt.aa, line 138
    // ( $mux rwbar_240_delayed_5_0 rval  ($bitcast ($uint<32>) _b0  ) ) 
    // ($bitcast ($uint<32>) _b0  )
    $constant $W[type_cast_254_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // ($bitcast ($uint<1>) _b0  )
    $constant $W[type_cast_259_wire_constant] : $int<1> := _b0// 0
    // block %NicRegisterAccessDaemon%loop
    //  file nic.linked.opt.aa, line 120
    // do-while statement  
    //  file nic.linked.opt.aa, line 122
    // 			req := NIC_REQUEST_REGISTER_ACCESS_PIPE $buffering 1// bits of buffering = 43. 
    //  file nic.linked.opt.aa, line 126
    // req
    $W[req_203] : $int<43>
    // 			$volatile rwbar := ( $slice req 42 42 )  $buffering 1
    //  file nic.linked.opt.aa, line 128
    // rwbar
    $W[rwbar_208] : $int<1>
    // 			$volatile bmask := ( $slice req 41 38 )  $buffering 1
    //  file nic.linked.opt.aa, line 129
    // bmask
    $W[bmask_212] : $int<4>
    // 			$volatile index := ( $slice req 37 32 )  $buffering 1
    //  file nic.linked.opt.aa, line 130
    // index
    $W[index_216] : $int<6>
    // 			$volatile wdata := ( $slice req 31 0 )  $buffering 1
    //  file nic.linked.opt.aa, line 131
    // wdata
    $W[wdata_220] : $int<32>
    // 			rval := nic_registers[index] $buffering 1// bits of buffering = 32. 
    //  file nic.linked.opt.aa, line 132
    // nic_registers[index]
    $intermediate $W[R_index_222_resized] : $int<6>
    $intermediate $W[R_index_222_scaled] : $int<6>
    $intermediate $W[array_obj_ref_223_final_offset] : $int<6>
    $intermediate $W[array_obj_ref_223_root_address] : $int<6>
    $W[array_obj_ref_223_word_address_0] : $pointer<memory_space_0>
    $W[array_obj_ref_223_data_0] : $int<32>
    // rval
    $W[rval_224] : $int<32>
    // 			rwbar_232_delayed_5_0 := rwbar $buffering 5 $cut_through // bits of buffering = 5. 
    //  file nic.linked.opt.aa, line 134
    // rwbar_232_delayed_5_0
    $W[rwbar_232_delayed_5_0_230] : $int<1>
    // 			bmask_233_delayed_5_0 := bmask $buffering 5 $cut_through // bits of buffering = 20. 
    //  file nic.linked.opt.aa, line 135
    // bmask_233_delayed_5_0
    $W[bmask_233_delayed_5_0_233] : $int<4>
    // 			wdata_235_delayed_5_0 := wdata $buffering 5 $cut_through // bits of buffering = 160. 
    //  file nic.linked.opt.aa, line 136
    // wdata_235_delayed_5_0
    $W[wdata_235_delayed_5_0_236] : $int<32>
    // 			index_236_delayed_5_0 := index $buffering 5 $cut_through // bits of buffering = 30. 
    //  file nic.linked.opt.aa, line 137
    // index_236_delayed_5_0
    $W[index_236_delayed_5_0_239] : $int<6>
    // 			$guard (~rwbar_232_delayed_5_0) $call UpdateRegister (bmask_233_delayed_5_0 rval wdata_235_delayed_5_0 index_236_delayed_5_0 ) (wval ) 
    //  file nic.linked.opt.aa, line 138
    // wval
    $W[wval_246] : $int<32>
    // 			rwbar_240_delayed_5_0 := rwbar $buffering 5 $cut_through // bits of buffering = 5. 
    //  file nic.linked.opt.aa, line 139
    // rwbar_240_delayed_5_0
    $W[rwbar_240_delayed_5_0_249] : $int<1>
    // 			$volatile rdata := ( $mux rwbar_240_delayed_5_0 rval  ($bitcast ($uint<32>) _b0  ) )  $buffering 1
    //  file nic.linked.opt.aa, line 140
    // rdata
    $W[rdata_256] : $int<32>
    // 			$volatile resp := (($bitcast ($uint<1>) _b0  ) && rdata) $buffering 1
    //  file nic.linked.opt.aa, line 141
    // resp
    $W[resp_262] : $int<33>
    // 			NIC_RESPONSE_REGISTER_ACCESS_PIPE := resp $buffering 1// bits of buffering = 33. 
    //  file nic.linked.opt.aa, line 142
    // NIC_RESPONSE_REGISTER_ACCESS_PIPE
    // datapath-instances for block %NicRegisterAccessDaemon%loop
    //  file nic.linked.opt.aa, line 120
    // datapath-instances for do-while  
    //  file nic.linked.opt.aa, line 122
    ==0? [do_while_stmt_199_branch] (konst_267_wire_constant)
    $flowthrough
    // 			req := NIC_REQUEST_REGISTER_ACCESS_PIPE $buffering 1// bits of buffering = 43. 
    //  file nic.linked.opt.aa, line 126
    // NIC_REQUEST_REGISTER_ACCESS_PIPE
    $ioport $in [RPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_202_inst] (NIC_REQUEST_REGISTER_ACCESS_PIPE) (req_203)  $fullrate 
    $buffering $out RPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_202_inst req_203 1
    // 			$volatile rwbar := ( $slice req 42 42 )  $buffering 1
    //  file nic.linked.opt.aa, line 128
    // ( $slice req 42 42 ) 
    [:] [slice_207_inst] (req_203 42 42) (rwbar_208)  $flowthrough
    $delay slice_207_inst 0
    // 			$volatile bmask := ( $slice req 41 38 )  $buffering 1
    //  file nic.linked.opt.aa, line 129
    // ( $slice req 41 38 ) 
    [:] [slice_211_inst] (req_203 41 38) (bmask_212)  $flowthrough
    $delay slice_211_inst 0
    // 			$volatile index := ( $slice req 37 32 )  $buffering 1
    //  file nic.linked.opt.aa, line 130
    // ( $slice req 37 32 ) 
    [:] [slice_215_inst] (req_203 37 32) (index_216)  $flowthrough
    $delay slice_215_inst 0
    // 			$volatile wdata := ( $slice req 31 0 )  $buffering 1
    //  file nic.linked.opt.aa, line 131
    // ( $slice req 31 0 ) 
    [:] [slice_219_inst] (req_203 31 0) (wdata_220)  $flowthrough
    $delay slice_219_inst 0
    // 			rval := nic_registers[index] $buffering 1// bits of buffering = 32. 
    //  file nic.linked.opt.aa, line 132
    // nic_registers[index]
    &/ [array_obj_ref_223_index_0_resize] (index_216) (R_index_222_resized) 
    $flowthrough 
    &/ [array_obj_ref_223_index_0_rename] (R_index_222_resized) (R_index_222_scaled) 
    $flowthrough 
    &/ [array_obj_ref_223_index_offset] (R_index_222_scaled) (array_obj_ref_223_final_offset) 
    $flowthrough 
    &/ [array_obj_ref_223_root_address_inst] (array_obj_ref_223_final_offset) (array_obj_ref_223_root_address) 
    $flowthrough 
    &/ [array_obj_ref_223_addr_0] (array_obj_ref_223_root_address) (array_obj_ref_223_word_address_0) 
    $flowthrough 
    $load [array_obj_ref_223_load_0] $from memory_space_0 (array_obj_ref_223_word_address_0) (array_obj_ref_223_data_0) 
    $buffering  $in array_obj_ref_223_load_0 array_obj_ref_223_word_address_0 2
    $buffering  $out array_obj_ref_223_load_0 array_obj_ref_223_data_0 2
    $delay array_obj_ref_223_load_0 5
    &/ [array_obj_ref_223_gather_scatter] (array_obj_ref_223_data_0) (rval_224) 
    $flowthrough 
    // 			rwbar_232_delayed_5_0 := rwbar $buffering 5 $cut_through // bits of buffering = 5. 
    //  file nic.linked.opt.aa, line 134
    # := [W_rwbar_232_delayed_5_0_228_inst] (rwbar_208) (rwbar_232_delayed_5_0_230)  $cut_through    $fullrate
    $buffering  $out W_rwbar_232_delayed_5_0_228_inst rwbar_232_delayed_5_0_230 5
    // 			bmask_233_delayed_5_0 := bmask $buffering 5 $cut_through // bits of buffering = 20. 
    //  file nic.linked.opt.aa, line 135
    # := [W_bmask_233_delayed_5_0_231_inst] (bmask_212) (bmask_233_delayed_5_0_233)  $cut_through    $fullrate
    $buffering  $out W_bmask_233_delayed_5_0_231_inst bmask_233_delayed_5_0_233 5
    // 			wdata_235_delayed_5_0 := wdata $buffering 5 $cut_through // bits of buffering = 160. 
    //  file nic.linked.opt.aa, line 136
    # := [W_wdata_235_delayed_5_0_234_inst] (wdata_220) (wdata_235_delayed_5_0_236)  $cut_through    $fullrate
    $buffering  $out W_wdata_235_delayed_5_0_234_inst wdata_235_delayed_5_0_236 5
    // 			index_236_delayed_5_0 := index $buffering 5 $cut_through // bits of buffering = 30. 
    //  file nic.linked.opt.aa, line 137
    # := [W_index_236_delayed_5_0_237_inst] (index_216) (index_236_delayed_5_0_239)  $cut_through    $fullrate
    $buffering  $out W_index_236_delayed_5_0_237_inst index_236_delayed_5_0_239 5
    // 			$guard (~rwbar_232_delayed_5_0) $call UpdateRegister (bmask_233_delayed_5_0 rval wdata_235_delayed_5_0 index_236_delayed_5_0 ) (wval ) 
    //  file nic.linked.opt.aa, line 138
    $call [call_stmt_246_call] $module UpdateRegister(bmask_233_delayed_5_0_233 rval_224 wdata_235_delayed_5_0_236 index_236_delayed_5_0_239) (wval_246) $guard ( ~ rwbar_232_delayed_5_0_230 )   $fullrate
    $delay call_stmt_246_call 4
    $buffering  $in call_stmt_246_call bmask_233_delayed_5_0_233 1
    $buffering  $in call_stmt_246_call rval_224 1
    $buffering  $in call_stmt_246_call wdata_235_delayed_5_0_236 1
    $buffering  $in call_stmt_246_call index_236_delayed_5_0_239 1
    $buffering  $out call_stmt_246_call wval_246 1
    // 			rwbar_240_delayed_5_0 := rwbar $buffering 5 $cut_through // bits of buffering = 5. 
    //  file nic.linked.opt.aa, line 139
    # := [W_rwbar_240_delayed_5_0_247_inst] (rwbar_208) (rwbar_240_delayed_5_0_249)  $cut_through    $fullrate
    $buffering  $out W_rwbar_240_delayed_5_0_247_inst rwbar_240_delayed_5_0_249 5
    // 			$volatile rdata := ( $mux rwbar_240_delayed_5_0 rval  ($bitcast ($uint<32>) _b0  ) )  $buffering 1
    //  file nic.linked.opt.aa, line 140
    // ( $mux rwbar_240_delayed_5_0 rval  ($bitcast ($uint<32>) _b0  ) ) 
    ? [MUX_255_inst] (rwbar_240_delayed_5_0_249 rval_224 type_cast_254_wire_constant) (rdata_256)  $flowthrough
    // 			$volatile resp := (($bitcast ($uint<1>) _b0  ) && rdata) $buffering 1
    //  file nic.linked.opt.aa, line 141
    // (($bitcast ($uint<1>) _b0  ) && rdata)
    &&[CONCAT_u1_u33_261_inst] (type_cast_259_wire_constant rdata_256) (resp_262)   $flowthrough 
    $delay CONCAT_u1_u33_261_inst 0
    // 			NIC_RESPONSE_REGISTER_ACCESS_PIPE := resp $buffering 1// bits of buffering = 33. 
    //  file nic.linked.opt.aa, line 142
    // NIC_RESPONSE_REGISTER_ACCESS_PIPE
    $ioport $out [WPIPE_NIC_RESPONSE_REGISTER_ACCESS_PIPE_263_inst]  (resp_262) (NIC_RESPONSE_REGISTER_ACCESS_PIPE)  $fullrate 
  }
  // end data-path
  // CP-DP links for do-while  do_while_stmt_199
  //  file nic.linked.opt.aa, line 122
  // 			req := NIC_REQUEST_REGISTER_ACCESS_PIPE $buffering 1// bits of buffering = 43. 
  //  file nic.linked.opt.aa, line 126
  // NIC_REQUEST_REGISTER_ACCESS_PIPE
  RPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_202_inst <=> (branch_block_stmt_198/do_while_stmt_199/do_while_stmt_199_loop_body/RPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_202_Sample/rr branch_block_stmt_198/do_while_stmt_199/do_while_stmt_199_loop_body/RPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_202_Update/cr) (branch_block_stmt_198/do_while_stmt_199/do_while_stmt_199_loop_body/RPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_202_Sample/ra branch_block_stmt_198/do_while_stmt_199/do_while_stmt_199_loop_body/RPIPE_NIC_REQUEST_REGISTER_ACCESS_PIPE_202_Update/ca)
  // 			$volatile rwbar := ( $slice req 42 42 )  $buffering 1
  //  file nic.linked.opt.aa, line 128
  // req
  // 			$volatile bmask := ( $slice req 41 38 )  $buffering 1
  //  file nic.linked.opt.aa, line 129
  // req
  // 			$volatile index := ( $slice req 37 32 )  $buffering 1
  //  file nic.linked.opt.aa, line 130
  // req
  // 			$volatile wdata := ( $slice req 31 0 )  $buffering 1
  //  file nic.linked.opt.aa, line 131
  // req
  // 			rval := nic_registers[index] $buffering 1// bits of buffering = 32. 
  //  file nic.linked.opt.aa, line 132
  // nic_registers[index]
  // index
  array_obj_ref_223_index_0_resize <=> (branch_block_stmt_198/do_while_stmt_199/do_while_stmt_199_loop_body/array_obj_ref_223_index_resize_0/index_resize_req) (branch_block_stmt_198/do_while_stmt_199/do_while_stmt_199_loop_body/array_obj_ref_223_index_resize_0/index_resize_ack)
  array_obj_ref_223_index_0_rename <=> (branch_block_stmt_198/do_while_stmt_199/do_while_stmt_199_loop_body/array_obj_ref_223_index_scale_0/scale_rename_req) (branch_block_stmt_198/do_while_stmt_199/do_while_stmt_199_loop_body/array_obj_ref_223_index_scale_0/scale_rename_ack)
  array_obj_ref_223_index_offset <=> (branch_block_stmt_198/do_while_stmt_199/do_while_stmt_199_loop_body/array_obj_ref_223_final_index_sum_regn/req) (branch_block_stmt_198/do_while_stmt_199/do_while_stmt_199_loop_body/array_obj_ref_223_final_index_sum_regn/ack)
  array_obj_ref_223_root_address_inst <=> (branch_block_stmt_198/do_while_stmt_199/do_while_stmt_199_loop_body/array_obj_ref_223_base_plus_offset/sum_rename_req) (branch_block_stmt_198/do_while_stmt_199/do_while_stmt_199_loop_body/array_obj_ref_223_base_plus_offset/sum_rename_ack)
  array_obj_ref_223_addr_0 <=> (branch_block_stmt_198/do_while_stmt_199/do_while_stmt_199_loop_body/array_obj_ref_223_word_addrgen/root_register_req) (branch_block_stmt_198/do_while_stmt_199/do_while_stmt_199_loop_body/array_obj_ref_223_word_addrgen/root_register_ack)
  array_obj_ref_223_gather_scatter <=> (branch_block_stmt_198/do_while_stmt_199/do_while_stmt_199_loop_body/array_obj_ref_223_Update/array_obj_ref_223_Merge/merge_req) (branch_block_stmt_198/do_while_stmt_199/do_while_stmt_199_loop_body/array_obj_ref_223_Update/array_obj_ref_223_Merge/merge_ack)
  array_obj_ref_223_load_0 <=> (branch_block_stmt_198/do_while_stmt_199/do_while_stmt_199_loop_body/array_obj_ref_223_Sample/word_access_start/word_0/rr branch_block_stmt_198/do_while_stmt_199/do_while_stmt_199_loop_body/array_obj_ref_223_Update/word_access_complete/word_0/cr) (branch_block_stmt_198/do_while_stmt_199/do_while_stmt_199_loop_body/array_obj_ref_223_Sample/word_access_start/word_0/ra branch_block_stmt_198/do_while_stmt_199/do_while_stmt_199_loop_body/array_obj_ref_223_Update/word_access_complete/word_0/ca)
  // 			rwbar_232_delayed_5_0 := rwbar $buffering 5 $cut_through // bits of buffering = 5. 
  //  file nic.linked.opt.aa, line 134
  // rwbar
  W_rwbar_232_delayed_5_0_228_inst <=> (branch_block_stmt_198/do_while_stmt_199/do_while_stmt_199_loop_body/assign_stmt_230_Sample/req branch_block_stmt_198/do_while_stmt_199/do_while_stmt_199_loop_body/assign_stmt_230_Update/req) (branch_block_stmt_198/do_while_stmt_199/do_while_stmt_199_loop_body/assign_stmt_230_Sample/ack branch_block_stmt_198/do_while_stmt_199/do_while_stmt_199_loop_body/assign_stmt_230_Update/ack)
  // 			bmask_233_delayed_5_0 := bmask $buffering 5 $cut_through // bits of buffering = 20. 
  //  file nic.linked.opt.aa, line 135
  // bmask
  W_bmask_233_delayed_5_0_231_inst <=> (branch_block_stmt_198/do_while_stmt_199/do_while_stmt_199_loop_body/assign_stmt_233_Sample/req branch_block_stmt_198/do_while_stmt_199/do_while_stmt_199_loop_body/assign_stmt_233_Update/req) (branch_block_stmt_198/do_while_stmt_199/do_while_stmt_199_loop_body/assign_stmt_233_Sample/ack branch_block_stmt_198/do_while_stmt_199/do_while_stmt_199_loop_body/assign_stmt_233_Update/ack)
  // 			wdata_235_delayed_5_0 := wdata $buffering 5 $cut_through // bits of buffering = 160. 
  //  file nic.linked.opt.aa, line 136
  // wdata
  W_wdata_235_delayed_5_0_234_inst <=> (branch_block_stmt_198/do_while_stmt_199/do_while_stmt_199_loop_body/assign_stmt_236_Sample/req branch_block_stmt_198/do_while_stmt_199/do_while_stmt_199_loop_body/assign_stmt_236_Update/req) (branch_block_stmt_198/do_while_stmt_199/do_while_stmt_199_loop_body/assign_stmt_236_Sample/ack branch_block_stmt_198/do_while_stmt_199/do_while_stmt_199_loop_body/assign_stmt_236_Update/ack)
  // 			index_236_delayed_5_0 := index $buffering 5 $cut_through // bits of buffering = 30. 
  //  file nic.linked.opt.aa, line 137
  // index
  W_index_236_delayed_5_0_237_inst <=> (branch_block_stmt_198/do_while_stmt_199/do_while_stmt_199_loop_body/assign_stmt_239_Sample/req branch_block_stmt_198/do_while_stmt_199/do_while_stmt_199_loop_body/assign_stmt_239_Update/req) (branch_block_stmt_198/do_while_stmt_199/do_while_stmt_199_loop_body/assign_stmt_239_Sample/ack branch_block_stmt_198/do_while_stmt_199/do_while_stmt_199_loop_body/assign_stmt_239_Update/ack)
  // 			$guard (~rwbar_232_delayed_5_0) $call UpdateRegister (bmask_233_delayed_5_0 rval wdata_235_delayed_5_0 index_236_delayed_5_0 ) (wval ) 
  //  file nic.linked.opt.aa, line 138
  // bmask_233_delayed_5_0
  // rval
  // wdata_235_delayed_5_0
  // index_236_delayed_5_0
  call_stmt_246_call <=> (branch_block_stmt_198/do_while_stmt_199/do_while_stmt_199_loop_body/call_stmt_246_Sample/crr branch_block_stmt_198/do_while_stmt_199/do_while_stmt_199_loop_body/call_stmt_246_Update/ccr) (branch_block_stmt_198/do_while_stmt_199/do_while_stmt_199_loop_body/call_stmt_246_Sample/cra branch_block_stmt_198/do_while_stmt_199/do_while_stmt_199_loop_body/call_stmt_246_Update/cca)
  // 			rwbar_240_delayed_5_0 := rwbar $buffering 5 $cut_through // bits of buffering = 5. 
  //  file nic.linked.opt.aa, line 139
  // rwbar
  W_rwbar_240_delayed_5_0_247_inst <=> (branch_block_stmt_198/do_while_stmt_199/do_while_stmt_199_loop_body/assign_stmt_249_Sample/req branch_block_stmt_198/do_while_stmt_199/do_while_stmt_199_loop_body/assign_stmt_249_Update/req) (branch_block_stmt_198/do_while_stmt_199/do_while_stmt_199_loop_body/assign_stmt_249_Sample/ack branch_block_stmt_198/do_while_stmt_199/do_while_stmt_199_loop_body/assign_stmt_249_Update/ack)
  // 			$volatile rdata := ( $mux rwbar_240_delayed_5_0 rval  ($bitcast ($uint<32>) _b0  ) )  $buffering 1
  //  file nic.linked.opt.aa, line 140
  // rwbar_240_delayed_5_0
  // rval
  // ( $mux rwbar_240_delayed_5_0 rval  ($bitcast ($uint<32>) _b0  ) ) 
  // 			$volatile resp := (($bitcast ($uint<1>) _b0  ) && rdata) $buffering 1
  //  file nic.linked.opt.aa, line 141
  // (($bitcast ($uint<1>) _b0  ) && rdata)
  // rdata
  // 			NIC_RESPONSE_REGISTER_ACCESS_PIPE := resp $buffering 1// bits of buffering = 33. 
  //  file nic.linked.opt.aa, line 142
  // resp
  // NIC_RESPONSE_REGISTER_ACCESS_PIPE
  WPIPE_NIC_RESPONSE_REGISTER_ACCESS_PIPE_263_inst <=> (branch_block_stmt_198/do_while_stmt_199/do_while_stmt_199_loop_body/WPIPE_NIC_RESPONSE_REGISTER_ACCESS_PIPE_263_Sample/req branch_block_stmt_198/do_while_stmt_199/do_while_stmt_199_loop_body/WPIPE_NIC_RESPONSE_REGISTER_ACCESS_PIPE_263_Update/req) (branch_block_stmt_198/do_while_stmt_199/do_while_stmt_199_loop_body/WPIPE_NIC_RESPONSE_REGISTER_ACCESS_PIPE_263_Sample/ack branch_block_stmt_198/do_while_stmt_199/do_while_stmt_199_loop_body/WPIPE_NIC_RESPONSE_REGISTER_ACCESS_PIPE_263_Update/ack)
  do_while_stmt_199_branch <=> (branch_block_stmt_198/do_while_stmt_199/do_while_stmt_199_loop_body/condition_evaluated) (branch_block_stmt_198/do_while_stmt_199/loop_exit/ack branch_block_stmt_198/do_while_stmt_199/loop_taken/ack)
}
$pipeline $depth 15 $buffering 1 $fullrate $module [accessMemory] 
{
  $in lock:$int<1>
  // can point into 
  rwbar:$int<1>
  // can point into 
  bmask:$int<8>
  // can point into 
  addr:$int<36>
  // can point into 
  wdata:$int<64>
  // can point into 
  $out rdata:$int<64>
  // can point into 
  // pipe-declarations for block %accessMemory
  //  file nic.linked.opt.aa, line 146
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    // pipelined module
    :|:[assign_stmt_287_to_stmt_307] 
    {
      $T [lock_update_enable] 
      $T [lock_update_enable_out] 
      lock_update_enable &-> (lock_update_enable_out)
      $null &-> (lock_update_enable)
      $T [rwbar_update_enable] 
      $T [rwbar_update_enable_out] 
      rwbar_update_enable &-> (rwbar_update_enable_out)
      $null &-> (rwbar_update_enable)
      $T [bmask_update_enable] 
      $T [bmask_update_enable_out] 
      bmask_update_enable &-> (bmask_update_enable_out)
      $null &-> (bmask_update_enable)
      $T [addr_update_enable] 
      $T [addr_update_enable_out] 
      addr_update_enable &-> (addr_update_enable_out)
      $null &-> (addr_update_enable)
      $T [wdata_update_enable] 
      $T [wdata_update_enable_out] 
      wdata_update_enable &-> (wdata_update_enable_out)
      $null &-> (wdata_update_enable)
      $T [rdata_update_enable] 
      $T [rdata_update_enable_in] 
      $null &-> (rdata_update_enable)
      $null <-& (rdata_update_enable_in) 
      $null &-> (rdata_update_enable)
      rdata_update_enable <-& (rdata_update_enable_in) 
      // start: WAR dependencies for request
      // done: WAR dependencies for request
      // start:  	$volatile request := (((lock && rwbar) && bmask) && (addr && wdata)) $buffering 1
      //  file nic.linked.opt.aa, line 151
      // volatile! 
      // Source expression
      // (((lock && rwbar) && bmask) && (addr && wdata))
      // ((lock && rwbar) && bmask)
      // (lock && rwbar)
      // lock
      // rwbar
      // bmask
      // (addr && wdata)
      // addr
      // wdata
      // Target expression
      // (as target) request
      // start: WAR dependencies for request
      // done: WAR dependencies for request
      // end:  	$volatile request := (((lock && rwbar) && bmask) && (addr && wdata)) $buffering 1
      // start:  	NIC_TO_MEMORY_REQUEST := request $buffering 1// bits of buffering = 110. 
      //  file nic.linked.opt.aa, line 152
      // Source expression
      // request
      // Target expression
      // (as target) NIC_TO_MEMORY_REQUEST
      $T[WPIPE_NIC_TO_MEMORY_REQUEST_288_sample_start_] 
      $T[WPIPE_NIC_TO_MEMORY_REQUEST_288_sample_completed_] 
      $T[WPIPE_NIC_TO_MEMORY_REQUEST_288_update_start_] 
      $T[WPIPE_NIC_TO_MEMORY_REQUEST_288_update_completed_] 
      ;;[WPIPE_NIC_TO_MEMORY_REQUEST_288_Sample] 
      {
        // pipe write sample-start NIC_TO_MEMORY_REQUEST
        $T [req] $T [ack] 
      }
      ;;[WPIPE_NIC_TO_MEMORY_REQUEST_288_Update] 
      {
        // pipe write update (complete) NIC_TO_MEMORY_REQUEST
        $T [req] $T [ack] 
      }
      WPIPE_NIC_TO_MEMORY_REQUEST_288_sample_start_ &-> (WPIPE_NIC_TO_MEMORY_REQUEST_288_Sample)
      WPIPE_NIC_TO_MEMORY_REQUEST_288_sample_completed_ <-& (WPIPE_NIC_TO_MEMORY_REQUEST_288_Sample)
      WPIPE_NIC_TO_MEMORY_REQUEST_288_update_start_ <-& (WPIPE_NIC_TO_MEMORY_REQUEST_288_sample_completed_)
      WPIPE_NIC_TO_MEMORY_REQUEST_288_update_start_ &-> (WPIPE_NIC_TO_MEMORY_REQUEST_288_Update)
      WPIPE_NIC_TO_MEMORY_REQUEST_288_update_completed_ <-& (WPIPE_NIC_TO_MEMORY_REQUEST_288_Update)
      WPIPE_NIC_TO_MEMORY_REQUEST_288_sample_start_ o<-& (WPIPE_NIC_TO_MEMORY_REQUEST_288_update_completed_ 0)
      // start: Forward dependencies from request to transition WPIPE_NIC_TO_MEMORY_REQUEST_288_sample_start_
      WPIPE_NIC_TO_MEMORY_REQUEST_288_sample_start_ <-& ($entry)
      WPIPE_NIC_TO_MEMORY_REQUEST_288_sample_start_ <-& ($entry)
      WPIPE_NIC_TO_MEMORY_REQUEST_288_sample_start_ <-& ($entry)
      WPIPE_NIC_TO_MEMORY_REQUEST_288_sample_start_ <-& ($entry)
      WPIPE_NIC_TO_MEMORY_REQUEST_288_sample_start_ <-& ($entry)
      // done: Forward dependencies from request to transition WPIPE_NIC_TO_MEMORY_REQUEST_288_sample_start_
      // RAW reenables for request
      lock_update_enable o<-& (WPIPE_NIC_TO_MEMORY_REQUEST_288_sample_completed_ 0)
      rwbar_update_enable o<-& (WPIPE_NIC_TO_MEMORY_REQUEST_288_sample_completed_ 0)
      bmask_update_enable o<-& (WPIPE_NIC_TO_MEMORY_REQUEST_288_sample_completed_ 0)
      addr_update_enable o<-& (WPIPE_NIC_TO_MEMORY_REQUEST_288_sample_completed_ 0)
      wdata_update_enable o<-& (WPIPE_NIC_TO_MEMORY_REQUEST_288_sample_completed_ 0)
      // end:  	NIC_TO_MEMORY_REQUEST := request $buffering 1// bits of buffering = 110. 
      // start:  	response := MEMORY_TO_NIC_RESPONSE $buffering 1// bits of buffering = 65. 
      //  file nic.linked.opt.aa, line 153
      // Source expression
      // MEMORY_TO_NIC_RESPONSE
      $T[RPIPE_MEMORY_TO_NIC_RESPONSE_292_sample_start_] 
      $T[RPIPE_MEMORY_TO_NIC_RESPONSE_292_sample_completed_] 
      $T[RPIPE_MEMORY_TO_NIC_RESPONSE_292_update_start_] 
      $T[RPIPE_MEMORY_TO_NIC_RESPONSE_292_update_completed_] 
      ;;[RPIPE_MEMORY_TO_NIC_RESPONSE_292_Sample] 
      {
        // pipe read sample
        $T [rr] $T [ra] 
      }
      ;;[RPIPE_MEMORY_TO_NIC_RESPONSE_292_Update] 
      {
        // pipe read update
        $T [cr] $T [ca] 
      }
      RPIPE_MEMORY_TO_NIC_RESPONSE_292_sample_start_ &-> (RPIPE_MEMORY_TO_NIC_RESPONSE_292_Sample)
      RPIPE_MEMORY_TO_NIC_RESPONSE_292_sample_completed_ <-& (RPIPE_MEMORY_TO_NIC_RESPONSE_292_Sample)
      RPIPE_MEMORY_TO_NIC_RESPONSE_292_update_start_ <-& (RPIPE_MEMORY_TO_NIC_RESPONSE_292_sample_completed_)
      RPIPE_MEMORY_TO_NIC_RESPONSE_292_update_start_ &-> (RPIPE_MEMORY_TO_NIC_RESPONSE_292_Update)
      RPIPE_MEMORY_TO_NIC_RESPONSE_292_update_completed_ <-& (RPIPE_MEMORY_TO_NIC_RESPONSE_292_Update)
      RPIPE_MEMORY_TO_NIC_RESPONSE_292_sample_start_ o<-& (RPIPE_MEMORY_TO_NIC_RESPONSE_292_update_completed_ 0)
      // Target expression
      // (as target) response
      // start: WAR dependencies for response
      // done: WAR dependencies for response
      // end:  	response := MEMORY_TO_NIC_RESPONSE $buffering 1// bits of buffering = 65. 
      // start: WAR dependencies for err
      // done: WAR dependencies for err
      // start:  	$volatile err := ( $slice response 64 64 )  $buffering 1
      //  file nic.linked.opt.aa, line 154
      // volatile! 
      // Source expression
      // ( $slice response 64 64 ) 
      // response
      // Target expression
      // (as target) err
      // start: WAR dependencies for err
      // done: WAR dependencies for err
      // end:  	$volatile err := ( $slice response 64 64 )  $buffering 1
      // start: WAR dependencies for rdata
      // done: WAR dependencies for rdata
      // start:  	$volatile rdata := ( $slice response 63 0 )  $buffering 1
      //  file nic.linked.opt.aa, line 155
      // volatile! 
      // Source expression
      // ( $slice response 63 0 ) 
      // response
      // Target expression
      // (as target) rdata
      // rdata
      // write to interface object
      // start: WAR dependencies for rdata
      // done: WAR dependencies for rdata
      // rdata
      // write to interface object
      RPIPE_MEMORY_TO_NIC_RESPONSE_292_update_start_ <-& (rdata_update_enable)
      // end:  	$volatile rdata := ( $slice response 63 0 )  $buffering 1
      // load-store dependencies..
      // pipe read/write dependencies for pipe MEMORY_TO_NIC_RESPONSE
      // read-dependencies for pipe MEMORY_TO_NIC_RESPONSE
      // write-dependencies for pipe MEMORY_TO_NIC_RESPONSE
      // signal write dependencies for MEMORY_TO_NIC_RESPONSE
      // pipe read/write dependencies for pipe NIC_TO_MEMORY_REQUEST
      // read-dependencies for pipe NIC_TO_MEMORY_REQUEST
      // write-dependencies for pipe NIC_TO_MEMORY_REQUEST
      // signal write dependencies for NIC_TO_MEMORY_REQUEST
    }
    ( rdata_update_enable_in)
    ( lock_update_enable_out rwbar_update_enable_out bmask_update_enable_out addr_update_enable_out wdata_update_enable_out)
    $P [lock_update_enable] 
    $P [rwbar_update_enable] 
    $P [bmask_update_enable] 
    $P [addr_update_enable] 
    $P [wdata_update_enable] 
    $P [rdata_update_enable] 
    $bind lock_update_enable <= assign_stmt_287_to_stmt_307 : lock_update_enable_out
    $bind rwbar_update_enable <= assign_stmt_287_to_stmt_307 : rwbar_update_enable_out
    $bind bmask_update_enable <= assign_stmt_287_to_stmt_307 : bmask_update_enable_out
    $bind addr_update_enable <= assign_stmt_287_to_stmt_307 : addr_update_enable_out
    $bind wdata_update_enable <= assign_stmt_287_to_stmt_307 : wdata_update_enable_out
    $bind rdata_update_enable => assign_stmt_287_to_stmt_307 : rdata_update_enable_in
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %accessMemory
    //  file nic.linked.opt.aa, line 146
    // 	$volatile request := (((lock && rwbar) && bmask) && (addr && wdata)) $buffering 1
    //  file nic.linked.opt.aa, line 151
    // (lock && rwbar)
    $intermediate $W[CONCAT_u1_u2_280_wire] : $int<2>
    // ((lock && rwbar) && bmask)
    $intermediate $W[CONCAT_u2_u10_282_wire] : $int<10>
    // (addr && wdata)
    $intermediate $W[CONCAT_u36_u100_285_wire] : $int<100>
    // request
    $W[request_287] : $int<110>
    // 	NIC_TO_MEMORY_REQUEST := request $buffering 1// bits of buffering = 110. 
    //  file nic.linked.opt.aa, line 152
    // NIC_TO_MEMORY_REQUEST
    // 	response := MEMORY_TO_NIC_RESPONSE $buffering 1// bits of buffering = 65. 
    //  file nic.linked.opt.aa, line 153
    // response
    $W[response_293] : $int<65>
    // 	$volatile err := ( $slice response 64 64 )  $buffering 1
    //  file nic.linked.opt.aa, line 154
    // err
    $W[err_297] : $int<1>
    // 	$volatile rdata := ( $slice response 63 0 )  $buffering 1
    //  file nic.linked.opt.aa, line 155
    // rdata
    // 	$volatile request := (((lock && rwbar) && bmask) && (addr && wdata)) $buffering 1
    //  file nic.linked.opt.aa, line 151
    // (lock && rwbar)
    &&[CONCAT_u1_u2_280_inst] (lock rwbar) (CONCAT_u1_u2_280_wire)   $flowthrough 
    $delay CONCAT_u1_u2_280_inst 0
    // ((lock && rwbar) && bmask)
    &&[CONCAT_u2_u10_282_inst] (CONCAT_u1_u2_280_wire bmask) (CONCAT_u2_u10_282_wire)   $flowthrough 
    $delay CONCAT_u2_u10_282_inst 0
    // (addr && wdata)
    &&[CONCAT_u36_u100_285_inst] (addr wdata) (CONCAT_u36_u100_285_wire)   $flowthrough 
    $delay CONCAT_u36_u100_285_inst 0
    // (((lock && rwbar) && bmask) && (addr && wdata))
    &&[CONCAT_u10_u110_286_inst] (CONCAT_u2_u10_282_wire CONCAT_u36_u100_285_wire) (request_287)   $flowthrough 
    $delay CONCAT_u10_u110_286_inst 0
    // 	NIC_TO_MEMORY_REQUEST := request $buffering 1// bits of buffering = 110. 
    //  file nic.linked.opt.aa, line 152
    // NIC_TO_MEMORY_REQUEST
    $ioport $out [WPIPE_NIC_TO_MEMORY_REQUEST_288_inst]  (request_287) (NIC_TO_MEMORY_REQUEST)  $fullrate 
    // 	response := MEMORY_TO_NIC_RESPONSE $buffering 1// bits of buffering = 65. 
    //  file nic.linked.opt.aa, line 153
    // MEMORY_TO_NIC_RESPONSE
    $ioport $in [RPIPE_MEMORY_TO_NIC_RESPONSE_292_inst] (MEMORY_TO_NIC_RESPONSE) (response_293)  $fullrate 
    $buffering $out RPIPE_MEMORY_TO_NIC_RESPONSE_292_inst response_293 1
    // 	$volatile err := ( $slice response 64 64 )  $buffering 1
    //  file nic.linked.opt.aa, line 154
    // ( $slice response 64 64 ) 
    [:] [slice_296_inst] (response_293 64 64) (err_297)  $flowthrough
    $delay slice_296_inst 0
    // 	$volatile rdata := ( $slice response 63 0 )  $buffering 1
    //  file nic.linked.opt.aa, line 155
    // ( $slice response 63 0 ) 
    [:] [slice_300_inst] (response_293 63 0) (rdata)  $flowthrough
    $delay slice_300_inst 0
  }
  // end data-path
  // 	$volatile request := (((lock && rwbar) && bmask) && (addr && wdata)) $buffering 1
  //  file nic.linked.opt.aa, line 151
  // (((lock && rwbar) && bmask) && (addr && wdata))
  // ((lock && rwbar) && bmask)
  // (lock && rwbar)
  // lock
  // rwbar
  // bmask
  // (addr && wdata)
  // addr
  // wdata
  // 	NIC_TO_MEMORY_REQUEST := request $buffering 1// bits of buffering = 110. 
  //  file nic.linked.opt.aa, line 152
  // request
  // NIC_TO_MEMORY_REQUEST
  WPIPE_NIC_TO_MEMORY_REQUEST_288_inst <=> (assign_stmt_287_to_stmt_307/WPIPE_NIC_TO_MEMORY_REQUEST_288_Sample/req assign_stmt_287_to_stmt_307/WPIPE_NIC_TO_MEMORY_REQUEST_288_Update/req) (assign_stmt_287_to_stmt_307/WPIPE_NIC_TO_MEMORY_REQUEST_288_Sample/ack assign_stmt_287_to_stmt_307/WPIPE_NIC_TO_MEMORY_REQUEST_288_Update/ack)
  // 	response := MEMORY_TO_NIC_RESPONSE $buffering 1// bits of buffering = 65. 
  //  file nic.linked.opt.aa, line 153
  // MEMORY_TO_NIC_RESPONSE
  RPIPE_MEMORY_TO_NIC_RESPONSE_292_inst <=> (assign_stmt_287_to_stmt_307/RPIPE_MEMORY_TO_NIC_RESPONSE_292_Sample/rr assign_stmt_287_to_stmt_307/RPIPE_MEMORY_TO_NIC_RESPONSE_292_Update/cr) (assign_stmt_287_to_stmt_307/RPIPE_MEMORY_TO_NIC_RESPONSE_292_Sample/ra assign_stmt_287_to_stmt_307/RPIPE_MEMORY_TO_NIC_RESPONSE_292_Update/ca)
  // 	$volatile err := ( $slice response 64 64 )  $buffering 1
  //  file nic.linked.opt.aa, line 154
  // response
  // 	$volatile rdata := ( $slice response 63 0 )  $buffering 1
  //  file nic.linked.opt.aa, line 155
  // response
  $attribute delay => "3"
}
$module [acquireLock] 
{
  $in q_base_address:$int<36>
  // can point into 
  $out m_ok:$int<1> := _b1
  // can point into 
  // pipe-declarations for block %acquireLock
  //  file nic.linked.opt.aa, line 159
  // pipe-declarations for block %acquireLock%loop
  //  file nic.linked.opt.aa, line 164
  // pipe-declarations for block %acquireLock%loop%
  //  file nic.linked.opt.aa, line 167
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    <>[branch_block_stmt_312] // Branch Block  file nic.linked.opt.aa, line 164
    {
      $P [branch_block_stmt_312__entry__]
      branch_block_stmt_312__entry__ <-| ($entry)
      $P [branch_block_stmt_312__exit__]
      branch_block_stmt_312__exit__ |-> ($exit)
      $P [assign_stmt_318__entry__] 
      $P [assign_stmt_318__exit__] 
      $P [merge_stmt_319__entry__] 
      $P [merge_stmt_319__exit__] 
      $P [call_stmt_331_to_assign_stmt_444__entry__] 
      $P [call_stmt_331_to_assign_stmt_444__exit__] 
      $P [if_stmt_445__entry__] 
      $P [if_stmt_445__exit__] 
      $P [assign_stmt_469_to_call_stmt_575__entry__] 
      $P [assign_stmt_469_to_call_stmt_575__exit__] 
      ::[assign_stmt_318] 
      {
        // start: WAR dependencies for lock_address_pointer
        // ignored out-of-scope w_root  q_base_address : $uint<36> 
        // done: WAR dependencies for lock_address_pointer
        // start:  		$volatile lock_address_pointer := (q_base_address + ($bitcast ($uint<36>) 20  )) $buffering 1
        //  file nic.linked.opt.aa, line 166
        // volatile! 
        // Source expression
        // (q_base_address + ($bitcast ($uint<36>) 20  ))
        // q_base_address
        // Target expression
        // (as target) lock_address_pointer
        // start: WAR dependencies for lock_address_pointer
        // ignored out-of-scope w_root  q_base_address : $uint<36> 
        // done: WAR dependencies for lock_address_pointer
        // end:  		$volatile lock_address_pointer := (q_base_address + ($bitcast ($uint<36>) 20  )) $buffering 1
        // load-store dependencies..
      }
      assign_stmt_318__entry__ |-> (assign_stmt_318)
      assign_stmt_318__exit__ <-| (assign_stmt_318)
      ::[call_stmt_331_to_assign_stmt_444] 
      {
        // start: 		$call accessMemory (($bitcast ($uint<1>) _b1  ) ($bitcast ($uint<1>) _b1  ) ( ~ ($bitcast ($uint<8>) _b0  ) ) lock_address_pointer ($bitcast ($uint<64>) _b0  ) ) (msg_size_plus_lock ) 
        //  file nic.linked.opt.aa, line 169
        $T[call_stmt_331_sample_start_] 
        $T[call_stmt_331_sample_completed_] 
        $T[call_stmt_331_update_start_] 
        $T[call_stmt_331_update_completed_] 
        // Call input argument 0
        // Call input argument 1
        // Call input argument 2
        // Call input argument 3
        // lock_address_pointer
        // Call input argument 4
        // start: Forward dependencies from lock_address_pointer to transition call_stmt_331_sample_start_
        // done: Forward dependencies from lock_address_pointer to transition call_stmt_331_sample_start_
        ;;[call_stmt_331_Sample] 
        {
          $T [crr] $T [cra] 
        }
        ;;[call_stmt_331_Update] 
        {
          $T [ccr] $T [cca] 
        }
        call_stmt_331_sample_start_ &-> (call_stmt_331_Sample)
        call_stmt_331_sample_completed_ <-& (call_stmt_331_Sample)
        call_stmt_331_sample_completed_ &-> ($null)
        call_stmt_331_update_start_ &-> (call_stmt_331_Update)
        call_stmt_331_update_completed_ <-& (call_stmt_331_Update)
        // Call output argument 0
        // (as target) msg_size_plus_lock
        // start: WAR dependencies for msg_size_plus_lock
        // done: WAR dependencies for msg_size_plus_lock
        // end: 		$call accessMemory (($bitcast ($uint<1>) _b1  ) ($bitcast ($uint<1>) _b1  ) ( ~ ($bitcast ($uint<8>) _b0  ) ) lock_address_pointer ($bitcast ($uint<64>) _b0  ) ) (msg_size_plus_lock ) 
        // start: WAR dependencies for lock_addr_32
        // done: WAR dependencies for lock_addr_32
        // start:  		$volatile lock_addr_32 := ( $slice msg_size_plus_lock 31 0 )  $buffering 1
        //  file nic.linked.opt.aa, line 170
        // volatile! 
        // Source expression
        // ( $slice msg_size_plus_lock 31 0 ) 
        // msg_size_plus_lock
        // Target expression
        // (as target) lock_addr_32
        // start: WAR dependencies for lock_addr_32
        // done: WAR dependencies for lock_addr_32
        // end:  		$volatile lock_addr_32 := ( $slice msg_size_plus_lock 31 0 )  $buffering 1
        // start: WAR dependencies for sel
        // done: WAR dependencies for sel
        // start:  		$volatile sel := ( $slice lock_addr_32 2 0 )  $buffering 1
        //  file nic.linked.opt.aa, line 171
        // volatile! 
        // Source expression
        // ( $slice lock_addr_32 2 0 ) 
        // lock_addr_32
        // Target expression
        // (as target) sel
        // start: WAR dependencies for sel
        // done: WAR dependencies for sel
        // end:  		$volatile sel := ( $slice lock_addr_32 2 0 )  $buffering 1
        // start: 		$call accessMemory (($bitcast ($uint<1>) _b1  ) ($bitcast ($uint<1>) _b1  ) ( ~ ($bitcast ($uint<8>) _b0  ) ) (($bitcast ($uint<4>) _b0  ) && lock_addr_32) ($bitcast ($uint<64>) _b0  ) ) (lock_values ) 
        //  file nic.linked.opt.aa, line 172
        $T[call_stmt_355_sample_start_] 
        $T[call_stmt_355_sample_completed_] 
        $T[call_stmt_355_update_start_] 
        $T[call_stmt_355_update_completed_] 
        // Call input argument 0
        // Call input argument 1
        // Call input argument 2
        // Call input argument 3
        // (($bitcast ($uint<4>) _b0  ) && lock_addr_32)
        // lock_addr_32
        // Call input argument 4
        // start: Forward dependencies from (($bitcast ($uint<4>) _b0  ) && lock_addr_32) to transition call_stmt_355_sample_start_
        call_stmt_355_sample_start_ <-& (call_stmt_331_update_completed_)
        // done: Forward dependencies from (($bitcast ($uint<4>) _b0  ) && lock_addr_32) to transition call_stmt_355_sample_start_
        ;;[call_stmt_355_Sample] 
        {
          $T [crr] $T [cra] 
        }
        ;;[call_stmt_355_Update] 
        {
          $T [ccr] $T [cca] 
        }
        call_stmt_355_sample_start_ &-> (call_stmt_355_Sample)
        call_stmt_355_sample_completed_ <-& (call_stmt_355_Sample)
        call_stmt_355_sample_completed_ &-> ($null)
        call_stmt_355_update_start_ &-> (call_stmt_355_Update)
        call_stmt_355_update_completed_ <-& (call_stmt_355_Update)
        // Call output argument 0
        // (as target) lock_values
        // start: WAR dependencies for lock_values
        // done: WAR dependencies for lock_values
        // end: 		$call accessMemory (($bitcast ($uint<1>) _b1  ) ($bitcast ($uint<1>) _b1  ) ( ~ ($bitcast ($uint<8>) _b0  ) ) (($bitcast ($uint<4>) _b0  ) && lock_addr_32) ($bitcast ($uint<64>) _b0  ) ) (lock_values ) 
        // start: WAR dependencies for l0
        // done: WAR dependencies for l0
        // start:  		$volatile l0 := ( $slice lock_values 63 56 )  $buffering 1
        //  file nic.linked.opt.aa, line 173
        // volatile! 
        // Source expression
        // ( $slice lock_values 63 56 ) 
        // lock_values
        // Target expression
        // (as target) l0
        // start: WAR dependencies for l0
        // done: WAR dependencies for l0
        // end:  		$volatile l0 := ( $slice lock_values 63 56 )  $buffering 1
        // start: WAR dependencies for l1
        // done: WAR dependencies for l1
        // start:  		$volatile l1 := ( $slice lock_values 55 48 )  $buffering 1
        //  file nic.linked.opt.aa, line 174
        // volatile! 
        // Source expression
        // ( $slice lock_values 55 48 ) 
        // lock_values
        // Target expression
        // (as target) l1
        // start: WAR dependencies for l1
        // done: WAR dependencies for l1
        // end:  		$volatile l1 := ( $slice lock_values 55 48 )  $buffering 1
        // start: WAR dependencies for l2
        // done: WAR dependencies for l2
        // start:  		$volatile l2 := ( $slice lock_values 47 40 )  $buffering 1
        //  file nic.linked.opt.aa, line 175
        // volatile! 
        // Source expression
        // ( $slice lock_values 47 40 ) 
        // lock_values
        // Target expression
        // (as target) l2
        // start: WAR dependencies for l2
        // done: WAR dependencies for l2
        // end:  		$volatile l2 := ( $slice lock_values 47 40 )  $buffering 1
        // start: WAR dependencies for l3
        // done: WAR dependencies for l3
        // start:  		$volatile l3 := ( $slice lock_values 39 32 )  $buffering 1
        //  file nic.linked.opt.aa, line 176
        // volatile! 
        // Source expression
        // ( $slice lock_values 39 32 ) 
        // lock_values
        // Target expression
        // (as target) l3
        // start: WAR dependencies for l3
        // done: WAR dependencies for l3
        // end:  		$volatile l3 := ( $slice lock_values 39 32 )  $buffering 1
        // start: WAR dependencies for l4
        // done: WAR dependencies for l4
        // start:  		$volatile l4 := ( $slice lock_values 31 24 )  $buffering 1
        //  file nic.linked.opt.aa, line 177
        // volatile! 
        // Source expression
        // ( $slice lock_values 31 24 ) 
        // lock_values
        // Target expression
        // (as target) l4
        // start: WAR dependencies for l4
        // done: WAR dependencies for l4
        // end:  		$volatile l4 := ( $slice lock_values 31 24 )  $buffering 1
        // start: WAR dependencies for l5
        // done: WAR dependencies for l5
        // start:  		$volatile l5 := ( $slice lock_values 23 16 )  $buffering 1
        //  file nic.linked.opt.aa, line 178
        // volatile! 
        // Source expression
        // ( $slice lock_values 23 16 ) 
        // lock_values
        // Target expression
        // (as target) l5
        // start: WAR dependencies for l5
        // done: WAR dependencies for l5
        // end:  		$volatile l5 := ( $slice lock_values 23 16 )  $buffering 1
        // start: WAR dependencies for l6
        // done: WAR dependencies for l6
        // start:  		$volatile l6 := ( $slice lock_values 15 8 )  $buffering 1
        //  file nic.linked.opt.aa, line 179
        // volatile! 
        // Source expression
        // ( $slice lock_values 15 8 ) 
        // lock_values
        // Target expression
        // (as target) l6
        // start: WAR dependencies for l6
        // done: WAR dependencies for l6
        // end:  		$volatile l6 := ( $slice lock_values 15 8 )  $buffering 1
        // start: WAR dependencies for l7
        // done: WAR dependencies for l7
        // start:  		$volatile l7 := ( $slice lock_values 7 0 )  $buffering 1
        //  file nic.linked.opt.aa, line 180
        // volatile! 
        // Source expression
        // ( $slice lock_values 7 0 ) 
        // lock_values
        // Target expression
        // (as target) l7
        // start: WAR dependencies for l7
        // done: WAR dependencies for l7
        // end:  		$volatile l7 := ( $slice lock_values 7 0 )  $buffering 1
        // start: WAR dependencies for lock_val
        // done: WAR dependencies for lock_val
        // start:  		$volatile lock_val := (((( $mux (sel == 0 ) l0  _b0  )  | ( $mux (sel == 1 ) l1  _b0  ) ) | (( $mux (sel == 2 ) l2  _b0  )  | ( $mux (sel == 3 ) l3  _b0  ) )) | ((( $mux (sel == 4 ) l4  _b0  )  | ( $mux (sel == 5 ) l5  _b0  ) ) | (( $mux (sel == 6 ) l6  _b0  )  | ( $mux (sel == 7 ) l7  _b0  ) ))) $buffering 1
        //  file nic.linked.opt.aa, line 181
        // volatile! 
        // Source expression
        // (((( $mux (sel == 0 ) l0  _b0  )  | ( $mux (sel == 1 ) l1  _b0  ) ) | (( $mux (sel == 2 ) l2  _b0  )  | ( $mux (sel == 3 ) l3  _b0  ) )) | ((( $mux (sel == 4 ) l4  _b0  )  | ( $mux (sel == 5 ) l5  _b0  ) ) | (( $mux (sel == 6 ) l6  _b0  )  | ( $mux (sel == 7 ) l7  _b0  ) )))
        // ((( $mux (sel == 0 ) l0  _b0  )  | ( $mux (sel == 1 ) l1  _b0  ) ) | (( $mux (sel == 2 ) l2  _b0  )  | ( $mux (sel == 3 ) l3  _b0  ) ))
        // (( $mux (sel == 0 ) l0  _b0  )  | ( $mux (sel == 1 ) l1  _b0  ) )
        // ( $mux (sel == 0 ) l0  _b0  ) 
        // (sel == 0 )
        // sel
        // l0
        // ( $mux (sel == 1 ) l1  _b0  ) 
        // (sel == 1 )
        // sel
        // l1
        // (( $mux (sel == 2 ) l2  _b0  )  | ( $mux (sel == 3 ) l3  _b0  ) )
        // ( $mux (sel == 2 ) l2  _b0  ) 
        // (sel == 2 )
        // sel
        // l2
        // ( $mux (sel == 3 ) l3  _b0  ) 
        // (sel == 3 )
        // sel
        // l3
        // ((( $mux (sel == 4 ) l4  _b0  )  | ( $mux (sel == 5 ) l5  _b0  ) ) | (( $mux (sel == 6 ) l6  _b0  )  | ( $mux (sel == 7 ) l7  _b0  ) ))
        // (( $mux (sel == 4 ) l4  _b0  )  | ( $mux (sel == 5 ) l5  _b0  ) )
        // ( $mux (sel == 4 ) l4  _b0  ) 
        // (sel == 4 )
        // sel
        // l4
        // ( $mux (sel == 5 ) l5  _b0  ) 
        // (sel == 5 )
        // sel
        // l5
        // (( $mux (sel == 6 ) l6  _b0  )  | ( $mux (sel == 7 ) l7  _b0  ) )
        // ( $mux (sel == 6 ) l6  _b0  ) 
        // (sel == 6 )
        // sel
        // l6
        // ( $mux (sel == 7 ) l7  _b0  ) 
        // (sel == 7 )
        // sel
        // l7
        // Target expression
        // (as target) lock_val
        // start: WAR dependencies for lock_val
        // done: WAR dependencies for lock_val
        // end:  		$volatile lock_val := (((( $mux (sel == 0 ) l0  _b0  )  | ( $mux (sel == 1 ) l1  _b0  ) ) | (( $mux (sel == 2 ) l2  _b0  )  | ( $mux (sel == 3 ) l3  _b0  ) )) | ((( $mux (sel == 4 ) l4  _b0  )  | ( $mux (sel == 5 ) l5  _b0  ) ) | (( $mux (sel == 6 ) l6  _b0  )  | ( $mux (sel == 7 ) l7  _b0  ) ))) $buffering 1
        // load-store dependencies..
        // pipe read/write dependencies for pipe MEMORY_TO_NIC_RESPONSE
        // read-dependencies for pipe MEMORY_TO_NIC_RESPONSE
        call_stmt_355_sample_start_ <-& (call_stmt_331_update_completed_)
        // write-dependencies for pipe MEMORY_TO_NIC_RESPONSE
        // signal write dependencies for MEMORY_TO_NIC_RESPONSE
        // pipe read/write dependencies for pipe NIC_TO_MEMORY_REQUEST
        // read-dependencies for pipe NIC_TO_MEMORY_REQUEST
        // write-dependencies for pipe NIC_TO_MEMORY_REQUEST
        call_stmt_355_sample_start_ <-& (call_stmt_331_update_completed_)
        // signal write dependencies for NIC_TO_MEMORY_REQUEST
      }
      call_stmt_331_to_assign_stmt_444__entry__ |-> (call_stmt_331_to_assign_stmt_444)
      call_stmt_331_to_assign_stmt_444__exit__ <-| (call_stmt_331_to_assign_stmt_444)
      // if-statement  
      //  file nic.linked.opt.aa, line -1575179400
      ;;[if_stmt_445_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      if_stmt_445__entry__ |-> (if_stmt_445_dead_link)
      if_stmt_445__exit__ <-| (if_stmt_445_dead_link)
      ;;[if_stmt_445_eval_test] 
      {
        // test expression evaluate and trigger branch 
        // (lock_val == ( ~ ($bitcast ($uint<8>) _b0  ) ))
        ;;[EQ_u8_u1_450] 
        {
          // binary expression 
          ||[EQ_u8_u1_450_inputs] 
          {
            // ( ~ ($bitcast ($uint<8>) _b0  ) )
          }
          // flow-through
          ;;[SplitProtocol] 
          {
            ;;[Sample] 
            {
              $T [rr] $T [ra]
            }
            ;;[Update] 
            {
              $T [cr] $T [ca]
            }
          }
        }
        $T [branch_req] 
      }
      if_stmt_445__entry__ |-> (if_stmt_445_eval_test)
      $P [EQ_u8_u1_450_place]
      EQ_u8_u1_450_place <-| (if_stmt_445_eval_test)
      ;;[if_stmt_445_if_link] 
      {
        $T [if_choice_transition] 
      }
      ;;[if_stmt_445_else_link] 
      {
        $T [else_choice_transition] 
      }
      EQ_u8_u1_450_place |-> (if_stmt_445_if_link if_stmt_445_else_link)
      $P [call_stmt_462__entry__] 
      $P [call_stmt_462__exit__] 
      $P [loopback]
      ::[call_stmt_462] 
      {
        // start: 			$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b1  ) ( ~ ($bitcast ($uint<8>) _b0  ) ) lock_address_pointer ($bitcast ($uint<64>) _b0  ) ) (err ) 
        //  file nic.linked.opt.aa, line 183
        $T[call_stmt_462_sample_start_] 
        $T[call_stmt_462_sample_completed_] 
        $T[call_stmt_462_update_start_] 
        $T[call_stmt_462_update_completed_] 
        // Call input argument 0
        // Call input argument 1
        // Call input argument 2
        // Call input argument 3
        // lock_address_pointer
        // Call input argument 4
        // start: Forward dependencies from lock_address_pointer to transition call_stmt_462_sample_start_
        // done: Forward dependencies from lock_address_pointer to transition call_stmt_462_sample_start_
        ;;[call_stmt_462_Sample] 
        {
          $T [crr] $T [cra] 
        }
        ;;[call_stmt_462_Update] 
        {
          $T [ccr] $T [cca] 
        }
        call_stmt_462_sample_start_ &-> (call_stmt_462_Sample)
        call_stmt_462_sample_completed_ <-& (call_stmt_462_Sample)
        call_stmt_462_sample_completed_ &-> ($null)
        call_stmt_462_update_start_ &-> (call_stmt_462_Update)
        call_stmt_462_update_completed_ <-& (call_stmt_462_Update)
        // Call output argument 0
        // (as target) err
        // start: WAR dependencies for err
        // done: WAR dependencies for err
        // end: 			$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b1  ) ( ~ ($bitcast ($uint<8>) _b0  ) ) lock_address_pointer ($bitcast ($uint<64>) _b0  ) ) (err ) 
        // load-store dependencies..
        // pipe read/write dependencies for pipe MEMORY_TO_NIC_RESPONSE
        // read-dependencies for pipe MEMORY_TO_NIC_RESPONSE
        // write-dependencies for pipe MEMORY_TO_NIC_RESPONSE
        // signal write dependencies for MEMORY_TO_NIC_RESPONSE
        // pipe read/write dependencies for pipe NIC_TO_MEMORY_REQUEST
        // read-dependencies for pipe NIC_TO_MEMORY_REQUEST
        // write-dependencies for pipe NIC_TO_MEMORY_REQUEST
        // signal write dependencies for NIC_TO_MEMORY_REQUEST
      }
      call_stmt_462__entry__ |-> (call_stmt_462)
      call_stmt_462__exit__ <-| (call_stmt_462)
      call_stmt_462__entry__ <-| (if_stmt_445_if_link)
      loopback <-| (call_stmt_462__exit__)
      if_stmt_445__exit__ <-| (if_stmt_445_else_link)
      ::[assign_stmt_469_to_call_stmt_575] 
      {
        // start: WAR dependencies for s0
        // ignored out-of-scope w_root 		$call accessMemory (($bitcast ($uint<1>) _b1  ) ($bitcast ($uint<1>) _b1  ) ( ~ ($bitcast ($uint<8>) _b0  ) ) lock_address_pointer ($bitcast ($uint<64>) _b0  ) ) (msg_size_plus_lock ) 
        // done: WAR dependencies for s0
        // start:  		$volatile s0 := (sel == 0 ) $buffering 1
        //  file nic.linked.opt.aa, line 186
        // volatile! 
        // Source expression
        // (sel == 0 )
        // sel
        // Target expression
        // (as target) s0
        // start: WAR dependencies for s0
        // ignored out-of-scope w_root 		$call accessMemory (($bitcast ($uint<1>) _b1  ) ($bitcast ($uint<1>) _b1  ) ( ~ ($bitcast ($uint<8>) _b0  ) ) lock_address_pointer ($bitcast ($uint<64>) _b0  ) ) (msg_size_plus_lock ) 
        // done: WAR dependencies for s0
        // end:  		$volatile s0 := (sel == 0 ) $buffering 1
        // start: WAR dependencies for s1
        // ignored out-of-scope w_root 		$call accessMemory (($bitcast ($uint<1>) _b1  ) ($bitcast ($uint<1>) _b1  ) ( ~ ($bitcast ($uint<8>) _b0  ) ) lock_address_pointer ($bitcast ($uint<64>) _b0  ) ) (msg_size_plus_lock ) 
        // done: WAR dependencies for s1
        // start:  		$volatile s1 := (sel == 1 ) $buffering 1
        //  file nic.linked.opt.aa, line 187
        // volatile! 
        // Source expression
        // (sel == 1 )
        // sel
        // Target expression
        // (as target) s1
        // start: WAR dependencies for s1
        // ignored out-of-scope w_root 		$call accessMemory (($bitcast ($uint<1>) _b1  ) ($bitcast ($uint<1>) _b1  ) ( ~ ($bitcast ($uint<8>) _b0  ) ) lock_address_pointer ($bitcast ($uint<64>) _b0  ) ) (msg_size_plus_lock ) 
        // done: WAR dependencies for s1
        // end:  		$volatile s1 := (sel == 1 ) $buffering 1
        // start: WAR dependencies for s2
        // ignored out-of-scope w_root 		$call accessMemory (($bitcast ($uint<1>) _b1  ) ($bitcast ($uint<1>) _b1  ) ( ~ ($bitcast ($uint<8>) _b0  ) ) lock_address_pointer ($bitcast ($uint<64>) _b0  ) ) (msg_size_plus_lock ) 
        // done: WAR dependencies for s2
        // start:  		$volatile s2 := (sel == 2 ) $buffering 1
        //  file nic.linked.opt.aa, line 188
        // volatile! 
        // Source expression
        // (sel == 2 )
        // sel
        // Target expression
        // (as target) s2
        // start: WAR dependencies for s2
        // ignored out-of-scope w_root 		$call accessMemory (($bitcast ($uint<1>) _b1  ) ($bitcast ($uint<1>) _b1  ) ( ~ ($bitcast ($uint<8>) _b0  ) ) lock_address_pointer ($bitcast ($uint<64>) _b0  ) ) (msg_size_plus_lock ) 
        // done: WAR dependencies for s2
        // end:  		$volatile s2 := (sel == 2 ) $buffering 1
        // start: WAR dependencies for s3
        // ignored out-of-scope w_root 		$call accessMemory (($bitcast ($uint<1>) _b1  ) ($bitcast ($uint<1>) _b1  ) ( ~ ($bitcast ($uint<8>) _b0  ) ) lock_address_pointer ($bitcast ($uint<64>) _b0  ) ) (msg_size_plus_lock ) 
        // done: WAR dependencies for s3
        // start:  		$volatile s3 := (sel == 3 ) $buffering 1
        //  file nic.linked.opt.aa, line 189
        // volatile! 
        // Source expression
        // (sel == 3 )
        // sel
        // Target expression
        // (as target) s3
        // start: WAR dependencies for s3
        // ignored out-of-scope w_root 		$call accessMemory (($bitcast ($uint<1>) _b1  ) ($bitcast ($uint<1>) _b1  ) ( ~ ($bitcast ($uint<8>) _b0  ) ) lock_address_pointer ($bitcast ($uint<64>) _b0  ) ) (msg_size_plus_lock ) 
        // done: WAR dependencies for s3
        // end:  		$volatile s3 := (sel == 3 ) $buffering 1
        // start: WAR dependencies for s4
        // ignored out-of-scope w_root 		$call accessMemory (($bitcast ($uint<1>) _b1  ) ($bitcast ($uint<1>) _b1  ) ( ~ ($bitcast ($uint<8>) _b0  ) ) lock_address_pointer ($bitcast ($uint<64>) _b0  ) ) (msg_size_plus_lock ) 
        // done: WAR dependencies for s4
        // start:  		$volatile s4 := (sel == 4 ) $buffering 1
        //  file nic.linked.opt.aa, line 190
        // volatile! 
        // Source expression
        // (sel == 4 )
        // sel
        // Target expression
        // (as target) s4
        // start: WAR dependencies for s4
        // ignored out-of-scope w_root 		$call accessMemory (($bitcast ($uint<1>) _b1  ) ($bitcast ($uint<1>) _b1  ) ( ~ ($bitcast ($uint<8>) _b0  ) ) lock_address_pointer ($bitcast ($uint<64>) _b0  ) ) (msg_size_plus_lock ) 
        // done: WAR dependencies for s4
        // end:  		$volatile s4 := (sel == 4 ) $buffering 1
        // start: WAR dependencies for s5
        // ignored out-of-scope w_root 		$call accessMemory (($bitcast ($uint<1>) _b1  ) ($bitcast ($uint<1>) _b1  ) ( ~ ($bitcast ($uint<8>) _b0  ) ) lock_address_pointer ($bitcast ($uint<64>) _b0  ) ) (msg_size_plus_lock ) 
        // done: WAR dependencies for s5
        // start:  		$volatile s5 := (sel == 5 ) $buffering 1
        //  file nic.linked.opt.aa, line 191
        // volatile! 
        // Source expression
        // (sel == 5 )
        // sel
        // Target expression
        // (as target) s5
        // start: WAR dependencies for s5
        // ignored out-of-scope w_root 		$call accessMemory (($bitcast ($uint<1>) _b1  ) ($bitcast ($uint<1>) _b1  ) ( ~ ($bitcast ($uint<8>) _b0  ) ) lock_address_pointer ($bitcast ($uint<64>) _b0  ) ) (msg_size_plus_lock ) 
        // done: WAR dependencies for s5
        // end:  		$volatile s5 := (sel == 5 ) $buffering 1
        // start: WAR dependencies for s6
        // ignored out-of-scope w_root 		$call accessMemory (($bitcast ($uint<1>) _b1  ) ($bitcast ($uint<1>) _b1  ) ( ~ ($bitcast ($uint<8>) _b0  ) ) lock_address_pointer ($bitcast ($uint<64>) _b0  ) ) (msg_size_plus_lock ) 
        // done: WAR dependencies for s6
        // start:  		$volatile s6 := (sel == 6 ) $buffering 1
        //  file nic.linked.opt.aa, line 192
        // volatile! 
        // Source expression
        // (sel == 6 )
        // sel
        // Target expression
        // (as target) s6
        // start: WAR dependencies for s6
        // ignored out-of-scope w_root 		$call accessMemory (($bitcast ($uint<1>) _b1  ) ($bitcast ($uint<1>) _b1  ) ( ~ ($bitcast ($uint<8>) _b0  ) ) lock_address_pointer ($bitcast ($uint<64>) _b0  ) ) (msg_size_plus_lock ) 
        // done: WAR dependencies for s6
        // end:  		$volatile s6 := (sel == 6 ) $buffering 1
        // start: WAR dependencies for s7
        // ignored out-of-scope w_root 		$call accessMemory (($bitcast ($uint<1>) _b1  ) ($bitcast ($uint<1>) _b1  ) ( ~ ($bitcast ($uint<8>) _b0  ) ) lock_address_pointer ($bitcast ($uint<64>) _b0  ) ) (msg_size_plus_lock ) 
        // done: WAR dependencies for s7
        // start:  		$volatile s7 := (sel == 7 ) $buffering 1
        //  file nic.linked.opt.aa, line 193
        // volatile! 
        // Source expression
        // (sel == 7 )
        // sel
        // Target expression
        // (as target) s7
        // start: WAR dependencies for s7
        // ignored out-of-scope w_root 		$call accessMemory (($bitcast ($uint<1>) _b1  ) ($bitcast ($uint<1>) _b1  ) ( ~ ($bitcast ($uint<8>) _b0  ) ) lock_address_pointer ($bitcast ($uint<64>) _b0  ) ) (msg_size_plus_lock ) 
        // done: WAR dependencies for s7
        // end:  		$volatile s7 := (sel == 7 ) $buffering 1
        // start: WAR dependencies for new_bmask
        // ignored out-of-scope w_root 		$call accessMemory (($bitcast ($uint<1>) _b1  ) ($bitcast ($uint<1>) _b1  ) ( ~ ($bitcast ($uint<8>) _b0  ) ) lock_address_pointer ($bitcast ($uint<64>) _b0  ) ) (msg_size_plus_lock ) 
        // done: WAR dependencies for new_bmask
        // start:  		$volatile new_bmask := (((( $mux s0 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) )  && ( $mux s1 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) ) && (( $mux s2 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) )  && ( $mux s3 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) )) && ((( $mux s4 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) )  && ( $mux s5 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) ) && (( $mux s6 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) )  && ( $mux s7 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) ))) $buffering 1
        //  file nic.linked.opt.aa, line 194
        // volatile! 
        // Source expression
        // (((( $mux s0 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) )  && ( $mux s1 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) ) && (( $mux s2 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) )  && ( $mux s3 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) )) && ((( $mux s4 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) )  && ( $mux s5 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) ) && (( $mux s6 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) )  && ( $mux s7 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) )))
        // ((( $mux s0 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) )  && ( $mux s1 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) ) && (( $mux s2 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) )  && ( $mux s3 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) ))
        // (( $mux s0 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) )  && ( $mux s1 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) )
        // ( $mux s0 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) 
        // s0
        // ( $mux s1 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) 
        // s1
        // (( $mux s2 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) )  && ( $mux s3 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) )
        // ( $mux s2 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) 
        // s2
        // ( $mux s3 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) 
        // s3
        // ((( $mux s4 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) )  && ( $mux s5 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) ) && (( $mux s6 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) )  && ( $mux s7 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) ))
        // (( $mux s4 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) )  && ( $mux s5 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) )
        // ( $mux s4 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) 
        // s4
        // ( $mux s5 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) 
        // s5
        // (( $mux s6 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) )  && ( $mux s7 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) )
        // ( $mux s6 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) 
        // s6
        // ( $mux s7 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) 
        // s7
        // Target expression
        // (as target) new_bmask
        // start: WAR dependencies for new_bmask
        // ignored out-of-scope w_root 		$call accessMemory (($bitcast ($uint<1>) _b1  ) ($bitcast ($uint<1>) _b1  ) ( ~ ($bitcast ($uint<8>) _b0  ) ) lock_address_pointer ($bitcast ($uint<64>) _b0  ) ) (msg_size_plus_lock ) 
        // done: WAR dependencies for new_bmask
        // end:  		$volatile new_bmask := (((( $mux s0 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) )  && ( $mux s1 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) ) && (( $mux s2 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) )  && ( $mux s3 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) )) && ((( $mux s4 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) )  && ( $mux s5 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) ) && (( $mux s6 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) )  && ( $mux s7 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) ))) $buffering 1
        // start: 		$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b0  ) new_bmask (($bitcast ($uint<4>) _b0  ) && lock_addr_32) ( ~ ($bitcast ($uint<64>) _b0  ) ) ) (ignore ) 
        //  file nic.linked.opt.aa, line 195
        $T[call_stmt_575_sample_start_] 
        $T[call_stmt_575_sample_completed_] 
        $T[call_stmt_575_update_start_] 
        $T[call_stmt_575_update_completed_] 
        // Call input argument 0
        // Call input argument 1
        // Call input argument 2
        // new_bmask
        // Call input argument 3
        // (($bitcast ($uint<4>) _b0  ) && lock_addr_32)
        // lock_addr_32
        // Call input argument 4
        // start: Forward dependencies from new_bmask to transition call_stmt_575_sample_start_
        // done: Forward dependencies from new_bmask to transition call_stmt_575_sample_start_
        // start: Forward dependencies from (($bitcast ($uint<4>) _b0  ) && lock_addr_32) to transition call_stmt_575_sample_start_
        // done: Forward dependencies from (($bitcast ($uint<4>) _b0  ) && lock_addr_32) to transition call_stmt_575_sample_start_
        ;;[call_stmt_575_Sample] 
        {
          $T [crr] $T [cra] 
        }
        ;;[call_stmt_575_Update] 
        {
          $T [ccr] $T [cca] 
        }
        call_stmt_575_sample_start_ &-> (call_stmt_575_Sample)
        call_stmt_575_sample_completed_ <-& (call_stmt_575_Sample)
        call_stmt_575_sample_completed_ &-> ($null)
        call_stmt_575_update_start_ &-> (call_stmt_575_Update)
        call_stmt_575_update_completed_ <-& (call_stmt_575_Update)
        // Call output argument 0
        // (as target) ignore
        // start: WAR dependencies for ignore
        // done: WAR dependencies for ignore
        // end: 		$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b0  ) new_bmask (($bitcast ($uint<4>) _b0  ) && lock_addr_32) ( ~ ($bitcast ($uint<64>) _b0  ) ) ) (ignore ) 
        // load-store dependencies..
        // pipe read/write dependencies for pipe MEMORY_TO_NIC_RESPONSE
        // read-dependencies for pipe MEMORY_TO_NIC_RESPONSE
        // write-dependencies for pipe MEMORY_TO_NIC_RESPONSE
        // signal write dependencies for MEMORY_TO_NIC_RESPONSE
        // pipe read/write dependencies for pipe NIC_TO_MEMORY_REQUEST
        // read-dependencies for pipe NIC_TO_MEMORY_REQUEST
        // write-dependencies for pipe NIC_TO_MEMORY_REQUEST
        // signal write dependencies for NIC_TO_MEMORY_REQUEST
      }
      assign_stmt_469_to_call_stmt_575__entry__ |-> (assign_stmt_469_to_call_stmt_575)
      assign_stmt_469_to_call_stmt_575__exit__ <-| (assign_stmt_469_to_call_stmt_575)
      // control-path for merge  
      //  file nic.linked.opt.aa, line 167
      ;;[merge_stmt_319_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      merge_stmt_319__entry__ |-> (merge_stmt_319_dead_link)
      merge_stmt_319__exit__ <-| (merge_stmt_319_dead_link)
      //---------------------   merge statement  file nic.linked.opt.aa, line 167  --------------------------
      ||[merge_stmt_319__entry___PhiReq] 
      {
        // no phi statements in merge..
      }
      merge_stmt_319__entry__ |-> (merge_stmt_319__entry___PhiReq)
      ||[loopback_PhiReq] 
      {
        // no phi statements in merge..
      }
      loopback |-> (loopback_PhiReq)
      $P [merge_stmt_319_PhiReqMerge] 
      merge_stmt_319_PhiReqMerge <-| ( merge_stmt_319__entry___PhiReq  loopback_PhiReq )
      ||[merge_stmt_319_PhiAck] 
      {
        $T [dummy] 
      }
      merge_stmt_319_PhiReqMerge |-> (merge_stmt_319_PhiAck)
      merge_stmt_319__exit__  <-| (merge_stmt_319_PhiAck)
      //---------------------  end of merge statement  file nic.linked.opt.aa, line 167  --------------------------
      assign_stmt_318__entry__ <-| (branch_block_stmt_312__entry__)
      merge_stmt_319__entry__ <-| (assign_stmt_318__exit__)
      call_stmt_331_to_assign_stmt_444__entry__ <-| (merge_stmt_319__exit__)
      if_stmt_445__entry__ <-| (call_stmt_331_to_assign_stmt_444__exit__)
      assign_stmt_469_to_call_stmt_575__entry__ <-| (if_stmt_445__exit__)
      assign_stmt_469_to_call_stmt_575__exit__ |-> (branch_block_stmt_312__exit__)
    }
    ::[assign_stmt_580] 
    {
      // start:  	m_ok := ($bitcast ($uint<1>) _b1  ) $buffering 1// bits of buffering = 1. 
      //  file nic.linked.opt.aa, line 197
      // constant! 
      // m_ok
      // write to interface object
      // end:  	m_ok := ($bitcast ($uint<1>) _b1  ) $buffering 1// bits of buffering = 1. 
      // load-store dependencies..
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %acquireLock%loop%
    //  file nic.linked.opt.aa, line 167
    // constant-object-declarations for block %acquireLock%loop
    //  file nic.linked.opt.aa, line 164
    // constant-object-declarations for block %acquireLock
    //  file nic.linked.opt.aa, line 159
    // constant-declarations for block %acquireLock%loop
    //  file nic.linked.opt.aa, line 164
    // ($bitcast ($uint<36>) 20  )
    $constant $W[type_cast_316_wire_constant] : $int<36> := _b000000000000000000000000000000010100// 20
    // constant-declarations for block %acquireLock%loop%
    //  file nic.linked.opt.aa, line 167
    // 		$call accessMemory (($bitcast ($uint<1>) _b1  ) ($bitcast ($uint<1>) _b1  ) ( ~ ($bitcast ($uint<8>) _b0  ) ) lock_address_pointer ($bitcast ($uint<64>) _b0  ) ) (msg_size_plus_lock ) 
    //  file nic.linked.opt.aa, line 169
    // ($bitcast ($uint<1>) _b1  )
    $constant $W[type_cast_321_wire_constant] : $int<1> := _b1// 1
    // ($bitcast ($uint<1>) _b1  )
    $constant $W[type_cast_323_wire_constant] : $int<1> := _b1// 1
    // ( ~ ($bitcast ($uint<8>) _b0  ) )
    $constant $W[NOT_u8_u8_326_wire_constant] : $int<8> := _b11111111// -1
    // ($bitcast ($uint<64>) _b0  )
    $constant $W[type_cast_329_wire_constant] : $int<64> := _b0000000000000000000000000000000000000000000000000000000000000000// 0
    // 		$call accessMemory (($bitcast ($uint<1>) _b1  ) ($bitcast ($uint<1>) _b1  ) ( ~ ($bitcast ($uint<8>) _b0  ) ) (($bitcast ($uint<4>) _b0  ) && lock_addr_32) ($bitcast ($uint<64>) _b0  ) ) (lock_values ) 
    //  file nic.linked.opt.aa, line 172
    // ($bitcast ($uint<1>) _b1  )
    $constant $W[type_cast_342_wire_constant] : $int<1> := _b1// 1
    // ($bitcast ($uint<1>) _b1  )
    $constant $W[type_cast_344_wire_constant] : $int<1> := _b1// 1
    // ( ~ ($bitcast ($uint<8>) _b0  ) )
    $constant $W[NOT_u8_u8_347_wire_constant] : $int<8> := _b11111111// -1
    // ($bitcast ($uint<4>) _b0  )
    $constant $W[type_cast_349_wire_constant] : $int<4> := _b0000// 0
    // ($bitcast ($uint<64>) _b0  )
    $constant $W[type_cast_353_wire_constant] : $int<64> := _b0000000000000000000000000000000000000000000000000000000000000000// 0
    // ( $mux (sel == 0 ) l0  _b0  ) 
    // 0 
    $constant $W[konst_390_wire_constant] : $int<3> := _b000// 0
    // _b0 
    $constant $W[konst_393_wire_constant] : $int<8> := _b00000000// 0
    // ( $mux (sel == 1 ) l1  _b0  ) 
    // 1 
    $constant $W[konst_396_wire_constant] : $int<3> := _b001// 1
    // _b0 
    $constant $W[konst_399_wire_constant] : $int<8> := _b00000000// 0
    // ( $mux (sel == 2 ) l2  _b0  ) 
    // 2 
    $constant $W[konst_403_wire_constant] : $int<3> := _b010// 2
    // _b0 
    $constant $W[konst_406_wire_constant] : $int<8> := _b00000000// 0
    // ( $mux (sel == 3 ) l3  _b0  ) 
    // 3 
    $constant $W[konst_409_wire_constant] : $int<3> := _b011// 3
    // _b0 
    $constant $W[konst_412_wire_constant] : $int<8> := _b00000000// 0
    // ( $mux (sel == 4 ) l4  _b0  ) 
    // 4 
    $constant $W[konst_417_wire_constant] : $int<3> := _b100// 4
    // _b0 
    $constant $W[konst_420_wire_constant] : $int<8> := _b00000000// 0
    // ( $mux (sel == 5 ) l5  _b0  ) 
    // 5 
    $constant $W[konst_423_wire_constant] : $int<3> := _b101// 5
    // _b0 
    $constant $W[konst_426_wire_constant] : $int<8> := _b00000000// 0
    // ( $mux (sel == 6 ) l6  _b0  ) 
    // 6 
    $constant $W[konst_430_wire_constant] : $int<3> := _b110// 6
    // _b0 
    $constant $W[konst_433_wire_constant] : $int<8> := _b00000000// 0
    // ( $mux (sel == 7 ) l7  _b0  ) 
    // 7 
    $constant $W[konst_436_wire_constant] : $int<3> := _b111// 7
    // _b0 
    $constant $W[konst_439_wire_constant] : $int<8> := _b00000000// 0
    // if-statement  
    //  file nic.linked.opt.aa, line -1575179400
    // ( ~ ($bitcast ($uint<8>) _b0  ) )
    $constant $W[NOT_u8_u8_449_wire_constant] : $int<8> := _b11111111// -1
    // 			$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b1  ) ( ~ ($bitcast ($uint<8>) _b0  ) ) lock_address_pointer ($bitcast ($uint<64>) _b0  ) ) (err ) 
    //  file nic.linked.opt.aa, line 183
    // ($bitcast ($uint<1>) _b0  )
    $constant $W[type_cast_452_wire_constant] : $int<1> := _b0// 0
    // ($bitcast ($uint<1>) _b1  )
    $constant $W[type_cast_454_wire_constant] : $int<1> := _b1// 1
    // ( ~ ($bitcast ($uint<8>) _b0  ) )
    $constant $W[NOT_u8_u8_457_wire_constant] : $int<8> := _b11111111// -1
    // ($bitcast ($uint<64>) _b0  )
    $constant $W[type_cast_460_wire_constant] : $int<64> := _b0000000000000000000000000000000000000000000000000000000000000000// 0
    // 0 
    $constant $W[konst_467_wire_constant] : $int<3> := _b000// 0
    // 1 
    $constant $W[konst_472_wire_constant] : $int<3> := _b001// 1
    // 2 
    $constant $W[konst_477_wire_constant] : $int<3> := _b010// 2
    // 3 
    $constant $W[konst_482_wire_constant] : $int<3> := _b011// 3
    // 4 
    $constant $W[konst_487_wire_constant] : $int<3> := _b100// 4
    // 5 
    $constant $W[konst_492_wire_constant] : $int<3> := _b101// 5
    // 6 
    $constant $W[konst_497_wire_constant] : $int<3> := _b110// 6
    // 7 
    $constant $W[konst_502_wire_constant] : $int<3> := _b111// 7
    // ( $mux s0 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) 
    // ($bitcast ($uint<1>) _b1  )
    $constant $W[type_cast_508_wire_constant] : $int<1> := _b1// 1
    // ($bitcast ($uint<1>) _b0  )
    $constant $W[type_cast_510_wire_constant] : $int<1> := _b0// 0
    // ( $mux s1 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) 
    // ($bitcast ($uint<1>) _b1  )
    $constant $W[type_cast_514_wire_constant] : $int<1> := _b1// 1
    // ($bitcast ($uint<1>) _b0  )
    $constant $W[type_cast_516_wire_constant] : $int<1> := _b0// 0
    // ( $mux s2 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) 
    // ($bitcast ($uint<1>) _b1  )
    $constant $W[type_cast_521_wire_constant] : $int<1> := _b1// 1
    // ($bitcast ($uint<1>) _b0  )
    $constant $W[type_cast_523_wire_constant] : $int<1> := _b0// 0
    // ( $mux s3 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) 
    // ($bitcast ($uint<1>) _b1  )
    $constant $W[type_cast_527_wire_constant] : $int<1> := _b1// 1
    // ($bitcast ($uint<1>) _b0  )
    $constant $W[type_cast_529_wire_constant] : $int<1> := _b0// 0
    // ( $mux s4 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) 
    // ($bitcast ($uint<1>) _b1  )
    $constant $W[type_cast_535_wire_constant] : $int<1> := _b1// 1
    // ($bitcast ($uint<1>) _b0  )
    $constant $W[type_cast_537_wire_constant] : $int<1> := _b0// 0
    // ( $mux s5 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) 
    // ($bitcast ($uint<1>) _b1  )
    $constant $W[type_cast_541_wire_constant] : $int<1> := _b1// 1
    // ($bitcast ($uint<1>) _b0  )
    $constant $W[type_cast_543_wire_constant] : $int<1> := _b0// 0
    // ( $mux s6 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) 
    // ($bitcast ($uint<1>) _b1  )
    $constant $W[type_cast_548_wire_constant] : $int<1> := _b1// 1
    // ($bitcast ($uint<1>) _b0  )
    $constant $W[type_cast_550_wire_constant] : $int<1> := _b0// 0
    // ( $mux s7 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) 
    // ($bitcast ($uint<1>) _b1  )
    $constant $W[type_cast_554_wire_constant] : $int<1> := _b1// 1
    // ($bitcast ($uint<1>) _b0  )
    $constant $W[type_cast_556_wire_constant] : $int<1> := _b0// 0
    // 		$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b0  ) new_bmask (($bitcast ($uint<4>) _b0  ) && lock_addr_32) ( ~ ($bitcast ($uint<64>) _b0  ) ) ) (ignore ) 
    //  file nic.linked.opt.aa, line 195
    // ($bitcast ($uint<1>) _b0  )
    $constant $W[type_cast_563_wire_constant] : $int<1> := _b0// 0
    // ($bitcast ($uint<1>) _b0  )
    $constant $W[type_cast_565_wire_constant] : $int<1> := _b0// 0
    // ($bitcast ($uint<4>) _b0  )
    $constant $W[type_cast_568_wire_constant] : $int<4> := _b0000// 0
    // ( ~ ($bitcast ($uint<64>) _b0  ) )
    $constant $W[NOT_u64_u64_573_wire_constant] : $int<64> := _b1111111111111111111111111111111111111111111111111111111111111111// -1
    // 	m_ok := ($bitcast ($uint<1>) _b1  ) $buffering 1// bits of buffering = 1. 
    //  file nic.linked.opt.aa, line 197
    // block %acquireLock%loop
    //  file nic.linked.opt.aa, line 164
    // 		$volatile lock_address_pointer := (q_base_address + ($bitcast ($uint<36>) 20  )) $buffering 1
    //  file nic.linked.opt.aa, line 166
    // lock_address_pointer
    $W[lock_address_pointer_318] : $int<36>
    // 		$call accessMemory (($bitcast ($uint<1>) _b1  ) ($bitcast ($uint<1>) _b1  ) ( ~ ($bitcast ($uint<8>) _b0  ) ) lock_address_pointer ($bitcast ($uint<64>) _b0  ) ) (msg_size_plus_lock ) 
    //  file nic.linked.opt.aa, line 169
    // msg_size_plus_lock
    $W[msg_size_plus_lock_331] : $int<64>
    // 		$volatile lock_addr_32 := ( $slice msg_size_plus_lock 31 0 )  $buffering 1
    //  file nic.linked.opt.aa, line 170
    // lock_addr_32
    $W[lock_addr_32_335] : $int<32>
    // 		$volatile sel := ( $slice lock_addr_32 2 0 )  $buffering 1
    //  file nic.linked.opt.aa, line 171
    // sel
    $W[sel_340] : $int<3>
    // 		$call accessMemory (($bitcast ($uint<1>) _b1  ) ($bitcast ($uint<1>) _b1  ) ( ~ ($bitcast ($uint<8>) _b0  ) ) (($bitcast ($uint<4>) _b0  ) && lock_addr_32) ($bitcast ($uint<64>) _b0  ) ) (lock_values ) 
    //  file nic.linked.opt.aa, line 172
    // (($bitcast ($uint<4>) _b0  ) && lock_addr_32)
    $intermediate $W[CONCAT_u4_u36_351_wire] : $int<36>
    // lock_values
    $W[lock_values_355] : $int<64>
    // 		$volatile l0 := ( $slice lock_values 63 56 )  $buffering 1
    //  file nic.linked.opt.aa, line 173
    // l0
    $W[l0_359] : $int<8>
    // 		$volatile l1 := ( $slice lock_values 55 48 )  $buffering 1
    //  file nic.linked.opt.aa, line 174
    // l1
    $W[l1_363] : $int<8>
    // 		$volatile l2 := ( $slice lock_values 47 40 )  $buffering 1
    //  file nic.linked.opt.aa, line 175
    // l2
    $W[l2_367] : $int<8>
    // 		$volatile l3 := ( $slice lock_values 39 32 )  $buffering 1
    //  file nic.linked.opt.aa, line 176
    // l3
    $W[l3_371] : $int<8>
    // 		$volatile l4 := ( $slice lock_values 31 24 )  $buffering 1
    //  file nic.linked.opt.aa, line 177
    // l4
    $W[l4_375] : $int<8>
    // 		$volatile l5 := ( $slice lock_values 23 16 )  $buffering 1
    //  file nic.linked.opt.aa, line 178
    // l5
    $W[l5_379] : $int<8>
    // 		$volatile l6 := ( $slice lock_values 15 8 )  $buffering 1
    //  file nic.linked.opt.aa, line 179
    // l6
    $W[l6_383] : $int<8>
    // 		$volatile l7 := ( $slice lock_values 7 0 )  $buffering 1
    //  file nic.linked.opt.aa, line 180
    // l7
    $W[l7_387] : $int<8>
    // 		$volatile lock_val := (((( $mux (sel == 0 ) l0  _b0  )  | ( $mux (sel == 1 ) l1  _b0  ) ) | (( $mux (sel == 2 ) l2  _b0  )  | ( $mux (sel == 3 ) l3  _b0  ) )) | ((( $mux (sel == 4 ) l4  _b0  )  | ( $mux (sel == 5 ) l5  _b0  ) ) | (( $mux (sel == 6 ) l6  _b0  )  | ( $mux (sel == 7 ) l7  _b0  ) ))) $buffering 1
    //  file nic.linked.opt.aa, line 181
    // (sel == 0 )
    $intermediate $W[EQ_u3_u1_391_wire] : $int<1>
    // ( $mux (sel == 0 ) l0  _b0  ) 
    $intermediate $W[MUX_394_wire] : $int<8>
    // (sel == 1 )
    $intermediate $W[EQ_u3_u1_397_wire] : $int<1>
    // ( $mux (sel == 1 ) l1  _b0  ) 
    $intermediate $W[MUX_400_wire] : $int<8>
    // (( $mux (sel == 0 ) l0  _b0  )  | ( $mux (sel == 1 ) l1  _b0  ) )
    $intermediate $W[OR_u8_u8_401_wire] : $int<8>
    // (sel == 2 )
    $intermediate $W[EQ_u3_u1_404_wire] : $int<1>
    // ( $mux (sel == 2 ) l2  _b0  ) 
    $intermediate $W[MUX_407_wire] : $int<8>
    // (sel == 3 )
    $intermediate $W[EQ_u3_u1_410_wire] : $int<1>
    // ( $mux (sel == 3 ) l3  _b0  ) 
    $intermediate $W[MUX_413_wire] : $int<8>
    // (( $mux (sel == 2 ) l2  _b0  )  | ( $mux (sel == 3 ) l3  _b0  ) )
    $intermediate $W[OR_u8_u8_414_wire] : $int<8>
    // ((( $mux (sel == 0 ) l0  _b0  )  | ( $mux (sel == 1 ) l1  _b0  ) ) | (( $mux (sel == 2 ) l2  _b0  )  | ( $mux (sel == 3 ) l3  _b0  ) ))
    $intermediate $W[OR_u8_u8_415_wire] : $int<8>
    // (sel == 4 )
    $intermediate $W[EQ_u3_u1_418_wire] : $int<1>
    // ( $mux (sel == 4 ) l4  _b0  ) 
    $intermediate $W[MUX_421_wire] : $int<8>
    // (sel == 5 )
    $intermediate $W[EQ_u3_u1_424_wire] : $int<1>
    // ( $mux (sel == 5 ) l5  _b0  ) 
    $intermediate $W[MUX_427_wire] : $int<8>
    // (( $mux (sel == 4 ) l4  _b0  )  | ( $mux (sel == 5 ) l5  _b0  ) )
    $intermediate $W[OR_u8_u8_428_wire] : $int<8>
    // (sel == 6 )
    $intermediate $W[EQ_u3_u1_431_wire] : $int<1>
    // ( $mux (sel == 6 ) l6  _b0  ) 
    $intermediate $W[MUX_434_wire] : $int<8>
    // (sel == 7 )
    $intermediate $W[EQ_u3_u1_437_wire] : $int<1>
    // ( $mux (sel == 7 ) l7  _b0  ) 
    $intermediate $W[MUX_440_wire] : $int<8>
    // (( $mux (sel == 6 ) l6  _b0  )  | ( $mux (sel == 7 ) l7  _b0  ) )
    $intermediate $W[OR_u8_u8_441_wire] : $int<8>
    // ((( $mux (sel == 4 ) l4  _b0  )  | ( $mux (sel == 5 ) l5  _b0  ) ) | (( $mux (sel == 6 ) l6  _b0  )  | ( $mux (sel == 7 ) l7  _b0  ) ))
    $intermediate $W[OR_u8_u8_442_wire] : $int<8>
    // lock_val
    $W[lock_val_444] : $int<8>
    // if statement  
    //  file nic.linked.opt.aa, line -1575179400
    // (lock_val == ( ~ ($bitcast ($uint<8>) _b0  ) ))
    $intermediate $W[EQ_u8_u1_450_wire] : $int<1>
    // 			$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b1  ) ( ~ ($bitcast ($uint<8>) _b0  ) ) lock_address_pointer ($bitcast ($uint<64>) _b0  ) ) (err ) 
    //  file nic.linked.opt.aa, line 183
    // err
    $W[err_462] : $int<64>
    // 		$volatile s0 := (sel == 0 ) $buffering 1
    //  file nic.linked.opt.aa, line 186
    // s0
    $W[s0_469] : $int<1>
    // 		$volatile s1 := (sel == 1 ) $buffering 1
    //  file nic.linked.opt.aa, line 187
    // s1
    $W[s1_474] : $int<1>
    // 		$volatile s2 := (sel == 2 ) $buffering 1
    //  file nic.linked.opt.aa, line 188
    // s2
    $W[s2_479] : $int<1>
    // 		$volatile s3 := (sel == 3 ) $buffering 1
    //  file nic.linked.opt.aa, line 189
    // s3
    $W[s3_484] : $int<1>
    // 		$volatile s4 := (sel == 4 ) $buffering 1
    //  file nic.linked.opt.aa, line 190
    // s4
    $W[s4_489] : $int<1>
    // 		$volatile s5 := (sel == 5 ) $buffering 1
    //  file nic.linked.opt.aa, line 191
    // s5
    $W[s5_494] : $int<1>
    // 		$volatile s6 := (sel == 6 ) $buffering 1
    //  file nic.linked.opt.aa, line 192
    // s6
    $W[s6_499] : $int<1>
    // 		$volatile s7 := (sel == 7 ) $buffering 1
    //  file nic.linked.opt.aa, line 193
    // s7
    $W[s7_504] : $int<1>
    // 		$volatile new_bmask := (((( $mux s0 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) )  && ( $mux s1 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) ) && (( $mux s2 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) )  && ( $mux s3 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) )) && ((( $mux s4 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) )  && ( $mux s5 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) ) && (( $mux s6 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) )  && ( $mux s7 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) ))) $buffering 1
    //  file nic.linked.opt.aa, line 194
    // ( $mux s0 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) 
    $intermediate $W[MUX_511_wire] : $int<1>
    // ( $mux s1 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) 
    $intermediate $W[MUX_517_wire] : $int<1>
    // (( $mux s0 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) )  && ( $mux s1 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) )
    $intermediate $W[CONCAT_u1_u2_518_wire] : $int<2>
    // ( $mux s2 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) 
    $intermediate $W[MUX_524_wire] : $int<1>
    // ( $mux s3 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) 
    $intermediate $W[MUX_530_wire] : $int<1>
    // (( $mux s2 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) )  && ( $mux s3 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) )
    $intermediate $W[CONCAT_u1_u2_531_wire] : $int<2>
    // ((( $mux s0 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) )  && ( $mux s1 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) ) && (( $mux s2 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) )  && ( $mux s3 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) ))
    $intermediate $W[CONCAT_u2_u4_532_wire] : $int<4>
    // ( $mux s4 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) 
    $intermediate $W[MUX_538_wire] : $int<1>
    // ( $mux s5 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) 
    $intermediate $W[MUX_544_wire] : $int<1>
    // (( $mux s4 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) )  && ( $mux s5 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) )
    $intermediate $W[CONCAT_u1_u2_545_wire] : $int<2>
    // ( $mux s6 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) 
    $intermediate $W[MUX_551_wire] : $int<1>
    // ( $mux s7 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) 
    $intermediate $W[MUX_557_wire] : $int<1>
    // (( $mux s6 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) )  && ( $mux s7 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) )
    $intermediate $W[CONCAT_u1_u2_558_wire] : $int<2>
    // ((( $mux s4 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) )  && ( $mux s5 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) ) && (( $mux s6 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) )  && ( $mux s7 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) ))
    $intermediate $W[CONCAT_u2_u4_559_wire] : $int<4>
    // new_bmask
    $W[new_bmask_561] : $int<8>
    // 		$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b0  ) new_bmask (($bitcast ($uint<4>) _b0  ) && lock_addr_32) ( ~ ($bitcast ($uint<64>) _b0  ) ) ) (ignore ) 
    //  file nic.linked.opt.aa, line 195
    // (($bitcast ($uint<4>) _b0  ) && lock_addr_32)
    $intermediate $W[CONCAT_u4_u36_570_wire] : $int<36>
    // ignore
    $W[ignore_575] : $int<64>
    // datapath-instances for block %acquireLock%loop
    //  file nic.linked.opt.aa, line 164
    // 		$volatile lock_address_pointer := (q_base_address + ($bitcast ($uint<36>) 20  )) $buffering 1
    //  file nic.linked.opt.aa, line 166
    // (q_base_address + ($bitcast ($uint<36>) 20  ))
    +[ADD_u36_u36_317_inst] (q_base_address type_cast_316_wire_constant) (lock_address_pointer_318)   $flowthrough 
    $delay ADD_u36_u36_317_inst 0
    // 		$call accessMemory (($bitcast ($uint<1>) _b1  ) ($bitcast ($uint<1>) _b1  ) ( ~ ($bitcast ($uint<8>) _b0  ) ) lock_address_pointer ($bitcast ($uint<64>) _b0  ) ) (msg_size_plus_lock ) 
    //  file nic.linked.opt.aa, line 169
    $call [call_stmt_331_call] $module accessMemory(type_cast_321_wire_constant type_cast_323_wire_constant NOT_u8_u8_326_wire_constant lock_address_pointer_318 type_cast_329_wire_constant) (msg_size_plus_lock_331)  
    $delay call_stmt_331_call 3
    $buffering  $in call_stmt_331_call type_cast_321_wire_constant 1
    $buffering  $in call_stmt_331_call type_cast_323_wire_constant 1
    $buffering  $in call_stmt_331_call NOT_u8_u8_326_wire_constant 1
    $buffering  $in call_stmt_331_call lock_address_pointer_318 1
    $buffering  $in call_stmt_331_call type_cast_329_wire_constant 1
    $buffering  $out call_stmt_331_call msg_size_plus_lock_331 1
    // 		$volatile lock_addr_32 := ( $slice msg_size_plus_lock 31 0 )  $buffering 1
    //  file nic.linked.opt.aa, line 170
    // ( $slice msg_size_plus_lock 31 0 ) 
    [:] [slice_334_inst] (msg_size_plus_lock_331 31 0) (lock_addr_32_335)  $flowthrough
    $delay slice_334_inst 0
    // 		$volatile sel := ( $slice lock_addr_32 2 0 )  $buffering 1
    //  file nic.linked.opt.aa, line 171
    // ( $slice lock_addr_32 2 0 ) 
    [:] [slice_339_inst] (lock_addr_32_335 2 0) (sel_340)  $flowthrough
    $delay slice_339_inst 0
    // 		$call accessMemory (($bitcast ($uint<1>) _b1  ) ($bitcast ($uint<1>) _b1  ) ( ~ ($bitcast ($uint<8>) _b0  ) ) (($bitcast ($uint<4>) _b0  ) && lock_addr_32) ($bitcast ($uint<64>) _b0  ) ) (lock_values ) 
    //  file nic.linked.opt.aa, line 172
    // (($bitcast ($uint<4>) _b0  ) && lock_addr_32)
    &&[CONCAT_u4_u36_351_inst] (type_cast_349_wire_constant lock_addr_32_335) (CONCAT_u4_u36_351_wire)   $flowthrough 
    $delay CONCAT_u4_u36_351_inst 0
    $call [call_stmt_355_call] $module accessMemory(type_cast_342_wire_constant type_cast_344_wire_constant NOT_u8_u8_347_wire_constant CONCAT_u4_u36_351_wire type_cast_353_wire_constant) (lock_values_355)  
    $delay call_stmt_355_call 3
    $buffering  $in call_stmt_355_call type_cast_342_wire_constant 1
    $buffering  $in call_stmt_355_call type_cast_344_wire_constant 1
    $buffering  $in call_stmt_355_call NOT_u8_u8_347_wire_constant 1
    $buffering  $in call_stmt_355_call CONCAT_u4_u36_351_wire 1
    $buffering  $in call_stmt_355_call type_cast_353_wire_constant 1
    $buffering  $out call_stmt_355_call lock_values_355 1
    // 		$volatile l0 := ( $slice lock_values 63 56 )  $buffering 1
    //  file nic.linked.opt.aa, line 173
    // ( $slice lock_values 63 56 ) 
    [:] [slice_358_inst] (lock_values_355 63 56) (l0_359)  $flowthrough
    $delay slice_358_inst 0
    // 		$volatile l1 := ( $slice lock_values 55 48 )  $buffering 1
    //  file nic.linked.opt.aa, line 174
    // ( $slice lock_values 55 48 ) 
    [:] [slice_362_inst] (lock_values_355 55 48) (l1_363)  $flowthrough
    $delay slice_362_inst 0
    // 		$volatile l2 := ( $slice lock_values 47 40 )  $buffering 1
    //  file nic.linked.opt.aa, line 175
    // ( $slice lock_values 47 40 ) 
    [:] [slice_366_inst] (lock_values_355 47 40) (l2_367)  $flowthrough
    $delay slice_366_inst 0
    // 		$volatile l3 := ( $slice lock_values 39 32 )  $buffering 1
    //  file nic.linked.opt.aa, line 176
    // ( $slice lock_values 39 32 ) 
    [:] [slice_370_inst] (lock_values_355 39 32) (l3_371)  $flowthrough
    $delay slice_370_inst 0
    // 		$volatile l4 := ( $slice lock_values 31 24 )  $buffering 1
    //  file nic.linked.opt.aa, line 177
    // ( $slice lock_values 31 24 ) 
    [:] [slice_374_inst] (lock_values_355 31 24) (l4_375)  $flowthrough
    $delay slice_374_inst 0
    // 		$volatile l5 := ( $slice lock_values 23 16 )  $buffering 1
    //  file nic.linked.opt.aa, line 178
    // ( $slice lock_values 23 16 ) 
    [:] [slice_378_inst] (lock_values_355 23 16) (l5_379)  $flowthrough
    $delay slice_378_inst 0
    // 		$volatile l6 := ( $slice lock_values 15 8 )  $buffering 1
    //  file nic.linked.opt.aa, line 179
    // ( $slice lock_values 15 8 ) 
    [:] [slice_382_inst] (lock_values_355 15 8) (l6_383)  $flowthrough
    $delay slice_382_inst 0
    // 		$volatile l7 := ( $slice lock_values 7 0 )  $buffering 1
    //  file nic.linked.opt.aa, line 180
    // ( $slice lock_values 7 0 ) 
    [:] [slice_386_inst] (lock_values_355 7 0) (l7_387)  $flowthrough
    $delay slice_386_inst 0
    // 		$volatile lock_val := (((( $mux (sel == 0 ) l0  _b0  )  | ( $mux (sel == 1 ) l1  _b0  ) ) | (( $mux (sel == 2 ) l2  _b0  )  | ( $mux (sel == 3 ) l3  _b0  ) )) | ((( $mux (sel == 4 ) l4  _b0  )  | ( $mux (sel == 5 ) l5  _b0  ) ) | (( $mux (sel == 6 ) l6  _b0  )  | ( $mux (sel == 7 ) l7  _b0  ) ))) $buffering 1
    //  file nic.linked.opt.aa, line 181
    // (sel == 0 )
    ==[EQ_u3_u1_391_inst] (sel_340 konst_390_wire_constant) (EQ_u3_u1_391_wire)   $flowthrough 
    $delay EQ_u3_u1_391_inst 0
    // ( $mux (sel == 0 ) l0  _b0  ) 
    ? [MUX_394_inst] (EQ_u3_u1_391_wire l0_359 konst_393_wire_constant) (MUX_394_wire)  $flowthrough
    // (sel == 1 )
    ==[EQ_u3_u1_397_inst] (sel_340 konst_396_wire_constant) (EQ_u3_u1_397_wire)   $flowthrough 
    $delay EQ_u3_u1_397_inst 0
    // ( $mux (sel == 1 ) l1  _b0  ) 
    ? [MUX_400_inst] (EQ_u3_u1_397_wire l1_363 konst_399_wire_constant) (MUX_400_wire)  $flowthrough
    // (( $mux (sel == 0 ) l0  _b0  )  | ( $mux (sel == 1 ) l1  _b0  ) )
    |[OR_u8_u8_401_inst] (MUX_394_wire MUX_400_wire) (OR_u8_u8_401_wire)   $flowthrough 
    $delay OR_u8_u8_401_inst 0
    // (sel == 2 )
    ==[EQ_u3_u1_404_inst] (sel_340 konst_403_wire_constant) (EQ_u3_u1_404_wire)   $flowthrough 
    $delay EQ_u3_u1_404_inst 0
    // ( $mux (sel == 2 ) l2  _b0  ) 
    ? [MUX_407_inst] (EQ_u3_u1_404_wire l2_367 konst_406_wire_constant) (MUX_407_wire)  $flowthrough
    // (sel == 3 )
    ==[EQ_u3_u1_410_inst] (sel_340 konst_409_wire_constant) (EQ_u3_u1_410_wire)   $flowthrough 
    $delay EQ_u3_u1_410_inst 0
    // ( $mux (sel == 3 ) l3  _b0  ) 
    ? [MUX_413_inst] (EQ_u3_u1_410_wire l3_371 konst_412_wire_constant) (MUX_413_wire)  $flowthrough
    // (( $mux (sel == 2 ) l2  _b0  )  | ( $mux (sel == 3 ) l3  _b0  ) )
    |[OR_u8_u8_414_inst] (MUX_407_wire MUX_413_wire) (OR_u8_u8_414_wire)   $flowthrough 
    $delay OR_u8_u8_414_inst 0
    // ((( $mux (sel == 0 ) l0  _b0  )  | ( $mux (sel == 1 ) l1  _b0  ) ) | (( $mux (sel == 2 ) l2  _b0  )  | ( $mux (sel == 3 ) l3  _b0  ) ))
    |[OR_u8_u8_415_inst] (OR_u8_u8_401_wire OR_u8_u8_414_wire) (OR_u8_u8_415_wire)   $flowthrough 
    $delay OR_u8_u8_415_inst 0
    // (sel == 4 )
    ==[EQ_u3_u1_418_inst] (sel_340 konst_417_wire_constant) (EQ_u3_u1_418_wire)   $flowthrough 
    $delay EQ_u3_u1_418_inst 0
    // ( $mux (sel == 4 ) l4  _b0  ) 
    ? [MUX_421_inst] (EQ_u3_u1_418_wire l4_375 konst_420_wire_constant) (MUX_421_wire)  $flowthrough
    // (sel == 5 )
    ==[EQ_u3_u1_424_inst] (sel_340 konst_423_wire_constant) (EQ_u3_u1_424_wire)   $flowthrough 
    $delay EQ_u3_u1_424_inst 0
    // ( $mux (sel == 5 ) l5  _b0  ) 
    ? [MUX_427_inst] (EQ_u3_u1_424_wire l5_379 konst_426_wire_constant) (MUX_427_wire)  $flowthrough
    // (( $mux (sel == 4 ) l4  _b0  )  | ( $mux (sel == 5 ) l5  _b0  ) )
    |[OR_u8_u8_428_inst] (MUX_421_wire MUX_427_wire) (OR_u8_u8_428_wire)   $flowthrough 
    $delay OR_u8_u8_428_inst 0
    // (sel == 6 )
    ==[EQ_u3_u1_431_inst] (sel_340 konst_430_wire_constant) (EQ_u3_u1_431_wire)   $flowthrough 
    $delay EQ_u3_u1_431_inst 0
    // ( $mux (sel == 6 ) l6  _b0  ) 
    ? [MUX_434_inst] (EQ_u3_u1_431_wire l6_383 konst_433_wire_constant) (MUX_434_wire)  $flowthrough
    // (sel == 7 )
    ==[EQ_u3_u1_437_inst] (sel_340 konst_436_wire_constant) (EQ_u3_u1_437_wire)   $flowthrough 
    $delay EQ_u3_u1_437_inst 0
    // ( $mux (sel == 7 ) l7  _b0  ) 
    ? [MUX_440_inst] (EQ_u3_u1_437_wire l7_387 konst_439_wire_constant) (MUX_440_wire)  $flowthrough
    // (( $mux (sel == 6 ) l6  _b0  )  | ( $mux (sel == 7 ) l7  _b0  ) )
    |[OR_u8_u8_441_inst] (MUX_434_wire MUX_440_wire) (OR_u8_u8_441_wire)   $flowthrough 
    $delay OR_u8_u8_441_inst 0
    // ((( $mux (sel == 4 ) l4  _b0  )  | ( $mux (sel == 5 ) l5  _b0  ) ) | (( $mux (sel == 6 ) l6  _b0  )  | ( $mux (sel == 7 ) l7  _b0  ) ))
    |[OR_u8_u8_442_inst] (OR_u8_u8_428_wire OR_u8_u8_441_wire) (OR_u8_u8_442_wire)   $flowthrough 
    $delay OR_u8_u8_442_inst 0
    // (((( $mux (sel == 0 ) l0  _b0  )  | ( $mux (sel == 1 ) l1  _b0  ) ) | (( $mux (sel == 2 ) l2  _b0  )  | ( $mux (sel == 3 ) l3  _b0  ) )) | ((( $mux (sel == 4 ) l4  _b0  )  | ( $mux (sel == 5 ) l5  _b0  ) ) | (( $mux (sel == 6 ) l6  _b0  )  | ( $mux (sel == 7 ) l7  _b0  ) )))
    |[OR_u8_u8_443_inst] (OR_u8_u8_415_wire OR_u8_u8_442_wire) (lock_val_444)   $flowthrough 
    $delay OR_u8_u8_443_inst 0
    // datapath-instances for if  
    //  file nic.linked.opt.aa, line -1575179400
    // (lock_val == ( ~ ($bitcast ($uint<8>) _b0  ) ))
    ==[EQ_u8_u1_450_inst] (lock_val_444 NOT_u8_u8_449_wire_constant) (EQ_u8_u1_450_wire)   $flowthrough 
    $delay EQ_u8_u1_450_inst 0
    ==0? [if_stmt_445_branch] (EQ_u8_u1_450_wire)
    // 			$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b1  ) ( ~ ($bitcast ($uint<8>) _b0  ) ) lock_address_pointer ($bitcast ($uint<64>) _b0  ) ) (err ) 
    //  file nic.linked.opt.aa, line 183
    $call [call_stmt_462_call] $module accessMemory(type_cast_452_wire_constant type_cast_454_wire_constant NOT_u8_u8_457_wire_constant lock_address_pointer_318 type_cast_460_wire_constant) (err_462)  
    $delay call_stmt_462_call 3
    $buffering  $in call_stmt_462_call type_cast_452_wire_constant 1
    $buffering  $in call_stmt_462_call type_cast_454_wire_constant 1
    $buffering  $in call_stmt_462_call NOT_u8_u8_457_wire_constant 1
    $buffering  $in call_stmt_462_call lock_address_pointer_318 1
    $buffering  $in call_stmt_462_call type_cast_460_wire_constant 1
    $buffering  $out call_stmt_462_call err_462 1
    // 		$volatile s0 := (sel == 0 ) $buffering 1
    //  file nic.linked.opt.aa, line 186
    // (sel == 0 )
    ==[EQ_u3_u1_468_inst] (sel_340 konst_467_wire_constant) (s0_469)   $flowthrough 
    $delay EQ_u3_u1_468_inst 0
    // 		$volatile s1 := (sel == 1 ) $buffering 1
    //  file nic.linked.opt.aa, line 187
    // (sel == 1 )
    ==[EQ_u3_u1_473_inst] (sel_340 konst_472_wire_constant) (s1_474)   $flowthrough 
    $delay EQ_u3_u1_473_inst 0
    // 		$volatile s2 := (sel == 2 ) $buffering 1
    //  file nic.linked.opt.aa, line 188
    // (sel == 2 )
    ==[EQ_u3_u1_478_inst] (sel_340 konst_477_wire_constant) (s2_479)   $flowthrough 
    $delay EQ_u3_u1_478_inst 0
    // 		$volatile s3 := (sel == 3 ) $buffering 1
    //  file nic.linked.opt.aa, line 189
    // (sel == 3 )
    ==[EQ_u3_u1_483_inst] (sel_340 konst_482_wire_constant) (s3_484)   $flowthrough 
    $delay EQ_u3_u1_483_inst 0
    // 		$volatile s4 := (sel == 4 ) $buffering 1
    //  file nic.linked.opt.aa, line 190
    // (sel == 4 )
    ==[EQ_u3_u1_488_inst] (sel_340 konst_487_wire_constant) (s4_489)   $flowthrough 
    $delay EQ_u3_u1_488_inst 0
    // 		$volatile s5 := (sel == 5 ) $buffering 1
    //  file nic.linked.opt.aa, line 191
    // (sel == 5 )
    ==[EQ_u3_u1_493_inst] (sel_340 konst_492_wire_constant) (s5_494)   $flowthrough 
    $delay EQ_u3_u1_493_inst 0
    // 		$volatile s6 := (sel == 6 ) $buffering 1
    //  file nic.linked.opt.aa, line 192
    // (sel == 6 )
    ==[EQ_u3_u1_498_inst] (sel_340 konst_497_wire_constant) (s6_499)   $flowthrough 
    $delay EQ_u3_u1_498_inst 0
    // 		$volatile s7 := (sel == 7 ) $buffering 1
    //  file nic.linked.opt.aa, line 193
    // (sel == 7 )
    ==[EQ_u3_u1_503_inst] (sel_340 konst_502_wire_constant) (s7_504)   $flowthrough 
    $delay EQ_u3_u1_503_inst 0
    // 		$volatile new_bmask := (((( $mux s0 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) )  && ( $mux s1 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) ) && (( $mux s2 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) )  && ( $mux s3 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) )) && ((( $mux s4 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) )  && ( $mux s5 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) ) && (( $mux s6 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) )  && ( $mux s7 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) ))) $buffering 1
    //  file nic.linked.opt.aa, line 194
    // ( $mux s0 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) 
    ? [MUX_511_inst] (s0_469 type_cast_508_wire_constant type_cast_510_wire_constant) (MUX_511_wire)  $flowthrough
    // ( $mux s1 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) 
    ? [MUX_517_inst] (s1_474 type_cast_514_wire_constant type_cast_516_wire_constant) (MUX_517_wire)  $flowthrough
    // (( $mux s0 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) )  && ( $mux s1 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) )
    &&[CONCAT_u1_u2_518_inst] (MUX_511_wire MUX_517_wire) (CONCAT_u1_u2_518_wire)   $flowthrough 
    $delay CONCAT_u1_u2_518_inst 0
    // ( $mux s2 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) 
    ? [MUX_524_inst] (s2_479 type_cast_521_wire_constant type_cast_523_wire_constant) (MUX_524_wire)  $flowthrough
    // ( $mux s3 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) 
    ? [MUX_530_inst] (s3_484 type_cast_527_wire_constant type_cast_529_wire_constant) (MUX_530_wire)  $flowthrough
    // (( $mux s2 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) )  && ( $mux s3 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) )
    &&[CONCAT_u1_u2_531_inst] (MUX_524_wire MUX_530_wire) (CONCAT_u1_u2_531_wire)   $flowthrough 
    $delay CONCAT_u1_u2_531_inst 0
    // ((( $mux s0 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) )  && ( $mux s1 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) ) && (( $mux s2 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) )  && ( $mux s3 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) ))
    &&[CONCAT_u2_u4_532_inst] (CONCAT_u1_u2_518_wire CONCAT_u1_u2_531_wire) (CONCAT_u2_u4_532_wire)   $flowthrough 
    $delay CONCAT_u2_u4_532_inst 0
    // ( $mux s4 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) 
    ? [MUX_538_inst] (s4_489 type_cast_535_wire_constant type_cast_537_wire_constant) (MUX_538_wire)  $flowthrough
    // ( $mux s5 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) 
    ? [MUX_544_inst] (s5_494 type_cast_541_wire_constant type_cast_543_wire_constant) (MUX_544_wire)  $flowthrough
    // (( $mux s4 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) )  && ( $mux s5 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) )
    &&[CONCAT_u1_u2_545_inst] (MUX_538_wire MUX_544_wire) (CONCAT_u1_u2_545_wire)   $flowthrough 
    $delay CONCAT_u1_u2_545_inst 0
    // ( $mux s6 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) 
    ? [MUX_551_inst] (s6_499 type_cast_548_wire_constant type_cast_550_wire_constant) (MUX_551_wire)  $flowthrough
    // ( $mux s7 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) 
    ? [MUX_557_inst] (s7_504 type_cast_554_wire_constant type_cast_556_wire_constant) (MUX_557_wire)  $flowthrough
    // (( $mux s6 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) )  && ( $mux s7 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) )
    &&[CONCAT_u1_u2_558_inst] (MUX_551_wire MUX_557_wire) (CONCAT_u1_u2_558_wire)   $flowthrough 
    $delay CONCAT_u1_u2_558_inst 0
    // ((( $mux s4 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) )  && ( $mux s5 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) ) && (( $mux s6 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) )  && ( $mux s7 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) ))
    &&[CONCAT_u2_u4_559_inst] (CONCAT_u1_u2_545_wire CONCAT_u1_u2_558_wire) (CONCAT_u2_u4_559_wire)   $flowthrough 
    $delay CONCAT_u2_u4_559_inst 0
    // (((( $mux s0 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) )  && ( $mux s1 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) ) && (( $mux s2 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) )  && ( $mux s3 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) )) && ((( $mux s4 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) )  && ( $mux s5 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) ) && (( $mux s6 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) )  && ( $mux s7 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) )))
    &&[CONCAT_u4_u8_560_inst] (CONCAT_u2_u4_532_wire CONCAT_u2_u4_559_wire) (new_bmask_561)   $flowthrough 
    $delay CONCAT_u4_u8_560_inst 0
    // 		$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b0  ) new_bmask (($bitcast ($uint<4>) _b0  ) && lock_addr_32) ( ~ ($bitcast ($uint<64>) _b0  ) ) ) (ignore ) 
    //  file nic.linked.opt.aa, line 195
    // (($bitcast ($uint<4>) _b0  ) && lock_addr_32)
    &&[CONCAT_u4_u36_570_inst] (type_cast_568_wire_constant lock_addr_32_335) (CONCAT_u4_u36_570_wire)   $flowthrough 
    $delay CONCAT_u4_u36_570_inst 0
    $call [call_stmt_575_call] $module accessMemory(type_cast_563_wire_constant type_cast_565_wire_constant new_bmask_561 CONCAT_u4_u36_570_wire NOT_u64_u64_573_wire_constant) (ignore_575)  
    $delay call_stmt_575_call 3
    $buffering  $in call_stmt_575_call type_cast_563_wire_constant 1
    $buffering  $in call_stmt_575_call type_cast_565_wire_constant 1
    $buffering  $in call_stmt_575_call new_bmask_561 1
    $buffering  $in call_stmt_575_call CONCAT_u4_u36_570_wire 1
    $buffering  $in call_stmt_575_call NOT_u64_u64_573_wire_constant 1
    $buffering  $out call_stmt_575_call ignore_575 1
  }
  // end data-path
  // 		$volatile lock_address_pointer := (q_base_address + ($bitcast ($uint<36>) 20  )) $buffering 1
  //  file nic.linked.opt.aa, line 166
  // (q_base_address + ($bitcast ($uint<36>) 20  ))
  // q_base_address
  // CP-DP links for merge  
  //  file nic.linked.opt.aa, line 167
  // 		$call accessMemory (($bitcast ($uint<1>) _b1  ) ($bitcast ($uint<1>) _b1  ) ( ~ ($bitcast ($uint<8>) _b0  ) ) lock_address_pointer ($bitcast ($uint<64>) _b0  ) ) (msg_size_plus_lock ) 
  //  file nic.linked.opt.aa, line 169
  // lock_address_pointer
  call_stmt_331_call <=> (branch_block_stmt_312/call_stmt_331_to_assign_stmt_444/call_stmt_331_Sample/crr branch_block_stmt_312/call_stmt_331_to_assign_stmt_444/call_stmt_331_Update/ccr) (branch_block_stmt_312/call_stmt_331_to_assign_stmt_444/call_stmt_331_Sample/cra branch_block_stmt_312/call_stmt_331_to_assign_stmt_444/call_stmt_331_Update/cca)
  // 		$volatile lock_addr_32 := ( $slice msg_size_plus_lock 31 0 )  $buffering 1
  //  file nic.linked.opt.aa, line 170
  // msg_size_plus_lock
  // 		$volatile sel := ( $slice lock_addr_32 2 0 )  $buffering 1
  //  file nic.linked.opt.aa, line 171
  // lock_addr_32
  // 		$call accessMemory (($bitcast ($uint<1>) _b1  ) ($bitcast ($uint<1>) _b1  ) ( ~ ($bitcast ($uint<8>) _b0  ) ) (($bitcast ($uint<4>) _b0  ) && lock_addr_32) ($bitcast ($uint<64>) _b0  ) ) (lock_values ) 
  //  file nic.linked.opt.aa, line 172
  // (($bitcast ($uint<4>) _b0  ) && lock_addr_32)
  // lock_addr_32
  call_stmt_355_call <=> (branch_block_stmt_312/call_stmt_331_to_assign_stmt_444/call_stmt_355_Sample/crr branch_block_stmt_312/call_stmt_331_to_assign_stmt_444/call_stmt_355_Update/ccr) (branch_block_stmt_312/call_stmt_331_to_assign_stmt_444/call_stmt_355_Sample/cra branch_block_stmt_312/call_stmt_331_to_assign_stmt_444/call_stmt_355_Update/cca)
  // 		$volatile l0 := ( $slice lock_values 63 56 )  $buffering 1
  //  file nic.linked.opt.aa, line 173
  // lock_values
  // 		$volatile l1 := ( $slice lock_values 55 48 )  $buffering 1
  //  file nic.linked.opt.aa, line 174
  // lock_values
  // 		$volatile l2 := ( $slice lock_values 47 40 )  $buffering 1
  //  file nic.linked.opt.aa, line 175
  // lock_values
  // 		$volatile l3 := ( $slice lock_values 39 32 )  $buffering 1
  //  file nic.linked.opt.aa, line 176
  // lock_values
  // 		$volatile l4 := ( $slice lock_values 31 24 )  $buffering 1
  //  file nic.linked.opt.aa, line 177
  // lock_values
  // 		$volatile l5 := ( $slice lock_values 23 16 )  $buffering 1
  //  file nic.linked.opt.aa, line 178
  // lock_values
  // 		$volatile l6 := ( $slice lock_values 15 8 )  $buffering 1
  //  file nic.linked.opt.aa, line 179
  // lock_values
  // 		$volatile l7 := ( $slice lock_values 7 0 )  $buffering 1
  //  file nic.linked.opt.aa, line 180
  // lock_values
  // 		$volatile lock_val := (((( $mux (sel == 0 ) l0  _b0  )  | ( $mux (sel == 1 ) l1  _b0  ) ) | (( $mux (sel == 2 ) l2  _b0  )  | ( $mux (sel == 3 ) l3  _b0  ) )) | ((( $mux (sel == 4 ) l4  _b0  )  | ( $mux (sel == 5 ) l5  _b0  ) ) | (( $mux (sel == 6 ) l6  _b0  )  | ( $mux (sel == 7 ) l7  _b0  ) ))) $buffering 1
  //  file nic.linked.opt.aa, line 181
  // (((( $mux (sel == 0 ) l0  _b0  )  | ( $mux (sel == 1 ) l1  _b0  ) ) | (( $mux (sel == 2 ) l2  _b0  )  | ( $mux (sel == 3 ) l3  _b0  ) )) | ((( $mux (sel == 4 ) l4  _b0  )  | ( $mux (sel == 5 ) l5  _b0  ) ) | (( $mux (sel == 6 ) l6  _b0  )  | ( $mux (sel == 7 ) l7  _b0  ) )))
  // ((( $mux (sel == 0 ) l0  _b0  )  | ( $mux (sel == 1 ) l1  _b0  ) ) | (( $mux (sel == 2 ) l2  _b0  )  | ( $mux (sel == 3 ) l3  _b0  ) ))
  // (( $mux (sel == 0 ) l0  _b0  )  | ( $mux (sel == 1 ) l1  _b0  ) )
  // (sel == 0 )
  // sel
  // l0
  // ( $mux (sel == 0 ) l0  _b0  ) 
  // (sel == 1 )
  // sel
  // l1
  // ( $mux (sel == 1 ) l1  _b0  ) 
  // (( $mux (sel == 2 ) l2  _b0  )  | ( $mux (sel == 3 ) l3  _b0  ) )
  // (sel == 2 )
  // sel
  // l2
  // ( $mux (sel == 2 ) l2  _b0  ) 
  // (sel == 3 )
  // sel
  // l3
  // ( $mux (sel == 3 ) l3  _b0  ) 
  // ((( $mux (sel == 4 ) l4  _b0  )  | ( $mux (sel == 5 ) l5  _b0  ) ) | (( $mux (sel == 6 ) l6  _b0  )  | ( $mux (sel == 7 ) l7  _b0  ) ))
  // (( $mux (sel == 4 ) l4  _b0  )  | ( $mux (sel == 5 ) l5  _b0  ) )
  // (sel == 4 )
  // sel
  // l4
  // ( $mux (sel == 4 ) l4  _b0  ) 
  // (sel == 5 )
  // sel
  // l5
  // ( $mux (sel == 5 ) l5  _b0  ) 
  // (( $mux (sel == 6 ) l6  _b0  )  | ( $mux (sel == 7 ) l7  _b0  ) )
  // (sel == 6 )
  // sel
  // l6
  // ( $mux (sel == 6 ) l6  _b0  ) 
  // (sel == 7 )
  // sel
  // l7
  // ( $mux (sel == 7 ) l7  _b0  ) 
  // CP-DP links for if  
  //  file nic.linked.opt.aa, line -1575179400
  // (lock_val == ( ~ ($bitcast ($uint<8>) _b0  ) ))
  if_stmt_445_branch <=> (branch_block_stmt_312/if_stmt_445_eval_test/branch_req) (branch_block_stmt_312/if_stmt_445_else_link/else_choice_transition branch_block_stmt_312/if_stmt_445_if_link/if_choice_transition)
  // 			$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b1  ) ( ~ ($bitcast ($uint<8>) _b0  ) ) lock_address_pointer ($bitcast ($uint<64>) _b0  ) ) (err ) 
  //  file nic.linked.opt.aa, line 183
  // lock_address_pointer
  call_stmt_462_call <=> (branch_block_stmt_312/call_stmt_462/call_stmt_462_Sample/crr branch_block_stmt_312/call_stmt_462/call_stmt_462_Update/ccr) (branch_block_stmt_312/call_stmt_462/call_stmt_462_Sample/cra branch_block_stmt_312/call_stmt_462/call_stmt_462_Update/cca)
  // 		$volatile s0 := (sel == 0 ) $buffering 1
  //  file nic.linked.opt.aa, line 186
  // (sel == 0 )
  // sel
  // 		$volatile s1 := (sel == 1 ) $buffering 1
  //  file nic.linked.opt.aa, line 187
  // (sel == 1 )
  // sel
  // 		$volatile s2 := (sel == 2 ) $buffering 1
  //  file nic.linked.opt.aa, line 188
  // (sel == 2 )
  // sel
  // 		$volatile s3 := (sel == 3 ) $buffering 1
  //  file nic.linked.opt.aa, line 189
  // (sel == 3 )
  // sel
  // 		$volatile s4 := (sel == 4 ) $buffering 1
  //  file nic.linked.opt.aa, line 190
  // (sel == 4 )
  // sel
  // 		$volatile s5 := (sel == 5 ) $buffering 1
  //  file nic.linked.opt.aa, line 191
  // (sel == 5 )
  // sel
  // 		$volatile s6 := (sel == 6 ) $buffering 1
  //  file nic.linked.opt.aa, line 192
  // (sel == 6 )
  // sel
  // 		$volatile s7 := (sel == 7 ) $buffering 1
  //  file nic.linked.opt.aa, line 193
  // (sel == 7 )
  // sel
  // 		$volatile new_bmask := (((( $mux s0 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) )  && ( $mux s1 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) ) && (( $mux s2 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) )  && ( $mux s3 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) )) && ((( $mux s4 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) )  && ( $mux s5 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) ) && (( $mux s6 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) )  && ( $mux s7 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) ))) $buffering 1
  //  file nic.linked.opt.aa, line 194
  // (((( $mux s0 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) )  && ( $mux s1 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) ) && (( $mux s2 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) )  && ( $mux s3 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) )) && ((( $mux s4 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) )  && ( $mux s5 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) ) && (( $mux s6 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) )  && ( $mux s7 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) )))
  // ((( $mux s0 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) )  && ( $mux s1 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) ) && (( $mux s2 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) )  && ( $mux s3 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) ))
  // (( $mux s0 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) )  && ( $mux s1 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) )
  // s0
  // ( $mux s0 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) 
  // s1
  // ( $mux s1 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) 
  // (( $mux s2 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) )  && ( $mux s3 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) )
  // s2
  // ( $mux s2 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) 
  // s3
  // ( $mux s3 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) 
  // ((( $mux s4 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) )  && ( $mux s5 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) ) && (( $mux s6 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) )  && ( $mux s7 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) ))
  // (( $mux s4 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) )  && ( $mux s5 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) )
  // s4
  // ( $mux s4 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) 
  // s5
  // ( $mux s5 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) 
  // (( $mux s6 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) )  && ( $mux s7 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) )
  // s6
  // ( $mux s6 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) 
  // s7
  // ( $mux s7 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) 
  // 		$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b0  ) new_bmask (($bitcast ($uint<4>) _b0  ) && lock_addr_32) ( ~ ($bitcast ($uint<64>) _b0  ) ) ) (ignore ) 
  //  file nic.linked.opt.aa, line 195
  // new_bmask
  // (($bitcast ($uint<4>) _b0  ) && lock_addr_32)
  // lock_addr_32
  call_stmt_575_call <=> (branch_block_stmt_312/assign_stmt_469_to_call_stmt_575/call_stmt_575_Sample/crr branch_block_stmt_312/assign_stmt_469_to_call_stmt_575/call_stmt_575_Update/ccr) (branch_block_stmt_312/assign_stmt_469_to_call_stmt_575/call_stmt_575_Sample/cra branch_block_stmt_312/assign_stmt_469_to_call_stmt_575/call_stmt_575_Update/cca)
}
$module [getQueuePointers] 
{
  $in q_base_address:$int<36>
  // can point into 
  $out wp:$int<32>
  // can point into 
  rp:$int<32>
  // can point into 
  // pipe-declarations for block %getQueuePointers
  //  file nic.linked.opt.aa, line 199
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    ::[call_stmt_599_to_assign_stmt_607] 
    {
      // start: 	$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b1  ) ( ~ ($bitcast ($uint<8>) _b0  ) ) (q_base_address + 4 ) ($bitcast ($uint<64>) _b0  ) ) (wp_rp ) 
      //  file nic.linked.opt.aa, line 204
      $T[call_stmt_599_sample_start_] 
      $T[call_stmt_599_sample_completed_] 
      $T[call_stmt_599_update_start_] 
      $T[call_stmt_599_update_completed_] 
      // Call input argument 0
      // Call input argument 1
      // Call input argument 2
      // Call input argument 3
      // (q_base_address + 4 )
      // q_base_address
      // Call input argument 4
      // start: Forward dependencies from (q_base_address + 4 ) to transition call_stmt_599_sample_start_
      // done: Forward dependencies from (q_base_address + 4 ) to transition call_stmt_599_sample_start_
      ;;[call_stmt_599_Sample] 
      {
        $T [crr] $T [cra] 
      }
      ;;[call_stmt_599_Update] 
      {
        $T [ccr] $T [cca] 
      }
      call_stmt_599_sample_start_ &-> (call_stmt_599_Sample)
      call_stmt_599_sample_completed_ <-& (call_stmt_599_Sample)
      call_stmt_599_sample_completed_ &-> ($null)
      call_stmt_599_update_start_ &-> (call_stmt_599_Update)
      call_stmt_599_update_completed_ <-& (call_stmt_599_Update)
      // Call output argument 0
      // (as target) wp_rp
      // start: WAR dependencies for wp_rp
      // done: WAR dependencies for wp_rp
      // end: 	$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b1  ) ( ~ ($bitcast ($uint<8>) _b0  ) ) (q_base_address + 4 ) ($bitcast ($uint<64>) _b0  ) ) (wp_rp ) 
      // start: WAR dependencies for rp
      // done: WAR dependencies for rp
      // start:  	$volatile rp := ( $slice wp_rp 63 32 )  $buffering 1
      //  file nic.linked.opt.aa, line 205
      // volatile! 
      // Source expression
      // ( $slice wp_rp 63 32 ) 
      // wp_rp
      // Target expression
      // (as target) rp
      // rp
      // write to interface object
      // start: WAR dependencies for rp
      // done: WAR dependencies for rp
      // rp
      // write to interface object
      // end:  	$volatile rp := ( $slice wp_rp 63 32 )  $buffering 1
      // start: WAR dependencies for wp
      // done: WAR dependencies for wp
      // start:  	$volatile wp := ( $slice wp_rp 31 0 )  $buffering 1
      //  file nic.linked.opt.aa, line 206
      // volatile! 
      // Source expression
      // ( $slice wp_rp 31 0 ) 
      // wp_rp
      // Target expression
      // (as target) wp
      // wp
      // write to interface object
      // start: WAR dependencies for wp
      // done: WAR dependencies for wp
      // wp
      // write to interface object
      // end:  	$volatile wp := ( $slice wp_rp 31 0 )  $buffering 1
      // load-store dependencies..
      // pipe read/write dependencies for pipe MEMORY_TO_NIC_RESPONSE
      // read-dependencies for pipe MEMORY_TO_NIC_RESPONSE
      // write-dependencies for pipe MEMORY_TO_NIC_RESPONSE
      // signal write dependencies for MEMORY_TO_NIC_RESPONSE
      // pipe read/write dependencies for pipe NIC_TO_MEMORY_REQUEST
      // read-dependencies for pipe NIC_TO_MEMORY_REQUEST
      // write-dependencies for pipe NIC_TO_MEMORY_REQUEST
      // signal write dependencies for NIC_TO_MEMORY_REQUEST
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %getQueuePointers
    //  file nic.linked.opt.aa, line 199
    // 	$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b1  ) ( ~ ($bitcast ($uint<8>) _b0  ) ) (q_base_address + 4 ) ($bitcast ($uint<64>) _b0  ) ) (wp_rp ) 
    //  file nic.linked.opt.aa, line 204
    // ($bitcast ($uint<1>) _b0  )
    $constant $W[type_cast_587_wire_constant] : $int<1> := _b0// 0
    // ($bitcast ($uint<1>) _b1  )
    $constant $W[type_cast_589_wire_constant] : $int<1> := _b1// 1
    // ( ~ ($bitcast ($uint<8>) _b0  ) )
    $constant $W[NOT_u8_u8_592_wire_constant] : $int<8> := _b11111111// -1
    // 4 
    $constant $W[konst_594_wire_constant] : $int<36> := _b000000000000000000000000000000000100// 4
    // ($bitcast ($uint<64>) _b0  )
    $constant $W[type_cast_597_wire_constant] : $int<64> := _b0000000000000000000000000000000000000000000000000000000000000000// 0
    // 	$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b1  ) ( ~ ($bitcast ($uint<8>) _b0  ) ) (q_base_address + 4 ) ($bitcast ($uint<64>) _b0  ) ) (wp_rp ) 
    //  file nic.linked.opt.aa, line 204
    // (q_base_address + 4 )
    $intermediate $W[ADD_u36_u36_595_wire] : $int<36>
    // wp_rp
    $W[wp_rp_599] : $int<64>
    // 	$volatile rp := ( $slice wp_rp 63 32 )  $buffering 1
    //  file nic.linked.opt.aa, line 205
    // rp
    // 	$volatile wp := ( $slice wp_rp 31 0 )  $buffering 1
    //  file nic.linked.opt.aa, line 206
    // wp
    // 	$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b1  ) ( ~ ($bitcast ($uint<8>) _b0  ) ) (q_base_address + 4 ) ($bitcast ($uint<64>) _b0  ) ) (wp_rp ) 
    //  file nic.linked.opt.aa, line 204
    // (q_base_address + 4 )
    +[ADD_u36_u36_595_inst] (q_base_address konst_594_wire_constant) (ADD_u36_u36_595_wire)   $flowthrough 
    $delay ADD_u36_u36_595_inst 0
    $call [call_stmt_599_call] $module accessMemory(type_cast_587_wire_constant type_cast_589_wire_constant NOT_u8_u8_592_wire_constant ADD_u36_u36_595_wire type_cast_597_wire_constant) (wp_rp_599)  
    $delay call_stmt_599_call 3
    $buffering  $in call_stmt_599_call type_cast_587_wire_constant 1
    $buffering  $in call_stmt_599_call type_cast_589_wire_constant 1
    $buffering  $in call_stmt_599_call NOT_u8_u8_592_wire_constant 1
    $buffering  $in call_stmt_599_call ADD_u36_u36_595_wire 1
    $buffering  $in call_stmt_599_call type_cast_597_wire_constant 1
    $buffering  $out call_stmt_599_call wp_rp_599 1
    // 	$volatile rp := ( $slice wp_rp 63 32 )  $buffering 1
    //  file nic.linked.opt.aa, line 205
    // ( $slice wp_rp 63 32 ) 
    [:] [slice_602_inst] (wp_rp_599 63 32) (rp)  $flowthrough
    $delay slice_602_inst 0
    // 	$volatile wp := ( $slice wp_rp 31 0 )  $buffering 1
    //  file nic.linked.opt.aa, line 206
    // ( $slice wp_rp 31 0 ) 
    [:] [slice_606_inst] (wp_rp_599 31 0) (wp)  $flowthrough
    $delay slice_606_inst 0
  }
  // end data-path
  // 	$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b1  ) ( ~ ($bitcast ($uint<8>) _b0  ) ) (q_base_address + 4 ) ($bitcast ($uint<64>) _b0  ) ) (wp_rp ) 
  //  file nic.linked.opt.aa, line 204
  // (q_base_address + 4 )
  // q_base_address
  call_stmt_599_call <=> (call_stmt_599_to_assign_stmt_607/call_stmt_599_Sample/crr call_stmt_599_to_assign_stmt_607/call_stmt_599_Update/ccr) (call_stmt_599_to_assign_stmt_607/call_stmt_599_Sample/cra call_stmt_599_to_assign_stmt_607/call_stmt_599_Update/cca)
  // 	$volatile rp := ( $slice wp_rp 63 32 )  $buffering 1
  //  file nic.linked.opt.aa, line 205
  // wp_rp
  // 	$volatile wp := ( $slice wp_rp 31 0 )  $buffering 1
  //  file nic.linked.opt.aa, line 206
  // wp_rp
}
$module [getQueueLength] 
{
  $in q_base_address:$int<36>
  // can point into 
  $out Queue_Length:$int<32>
  // can point into 
  // pipe-declarations for block %getQueueLength
  //  file nic.linked.opt.aa, line 209
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    ::[call_stmt_629_to_assign_stmt_633] 
    {
      // start: 	$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b1  ) ( ~ ($bitcast ($uint<8>) _b0  ) ) (q_base_address + 8 ) ($bitcast ($uint<64>) _b0  ) ) (wi_and_len ) 
      //  file nic.linked.opt.aa, line 214
      $T[call_stmt_629_sample_start_] 
      $T[call_stmt_629_sample_completed_] 
      $T[call_stmt_629_update_start_] 
      $T[call_stmt_629_update_completed_] 
      // Call input argument 0
      // Call input argument 1
      // Call input argument 2
      // Call input argument 3
      // (q_base_address + 8 )
      // q_base_address
      // Call input argument 4
      // start: Forward dependencies from (q_base_address + 8 ) to transition call_stmt_629_sample_start_
      // done: Forward dependencies from (q_base_address + 8 ) to transition call_stmt_629_sample_start_
      ;;[call_stmt_629_Sample] 
      {
        $T [crr] $T [cra] 
      }
      ;;[call_stmt_629_Update] 
      {
        $T [ccr] $T [cca] 
      }
      call_stmt_629_sample_start_ &-> (call_stmt_629_Sample)
      call_stmt_629_sample_completed_ <-& (call_stmt_629_Sample)
      call_stmt_629_sample_completed_ &-> ($null)
      call_stmt_629_update_start_ &-> (call_stmt_629_Update)
      call_stmt_629_update_completed_ <-& (call_stmt_629_Update)
      // Call output argument 0
      // (as target) wi_and_len
      // start: WAR dependencies for wi_and_len
      // done: WAR dependencies for wi_and_len
      // end: 	$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b1  ) ( ~ ($bitcast ($uint<8>) _b0  ) ) (q_base_address + 8 ) ($bitcast ($uint<64>) _b0  ) ) (wi_and_len ) 
      // start:  	Queue_Length := ( $slice wi_and_len 31 0 )  $buffering 1// bits of buffering = 32. 
      //  file nic.linked.opt.aa, line 215
      // Source expression
      // ( $slice wi_and_len 31 0 ) 
      $T[slice_632_sample_start_] 
      $T[slice_632_sample_completed_] 
      $T[slice_632_update_start_] 
      $T[slice_632_update_completed_] 
      // wi_and_len
      // start: Forward dependencies from wi_and_len to transition slice_632_sample_start_
      slice_632_sample_start_ <-& (call_stmt_629_update_completed_)
      // done: Forward dependencies from wi_and_len to transition slice_632_sample_start_
      ;;[slice_632_Sample] 
      {
        // unary expression 
        $T [rr] $T [ra] // (split) unary operation
      }
      ;;[slice_632_Update] 
      {
        // unary expression 
        $T [cr] $T [ca] //(split) unary operation
      }
      slice_632_sample_start_ &-> (slice_632_Sample)
      slice_632_sample_completed_ <-& (slice_632_Sample)
      slice_632_sample_completed_ &-> ($null)
      slice_632_update_start_ &-> (slice_632_Update)
      slice_632_update_completed_ <-& (slice_632_Update)
      // Target expression
      // (as target) Queue_Length
      // Queue_Length
      // write to interface object
      // start: WAR dependencies for Queue_Length
      // done: WAR dependencies for Queue_Length
      // Queue_Length
      // write to interface object
      // end:  	Queue_Length := ( $slice wi_and_len 31 0 )  $buffering 1// bits of buffering = 32. 
      // load-store dependencies..
      // pipe read/write dependencies for pipe MEMORY_TO_NIC_RESPONSE
      // read-dependencies for pipe MEMORY_TO_NIC_RESPONSE
      // write-dependencies for pipe MEMORY_TO_NIC_RESPONSE
      // signal write dependencies for MEMORY_TO_NIC_RESPONSE
      // pipe read/write dependencies for pipe NIC_TO_MEMORY_REQUEST
      // read-dependencies for pipe NIC_TO_MEMORY_REQUEST
      // write-dependencies for pipe NIC_TO_MEMORY_REQUEST
      // signal write dependencies for NIC_TO_MEMORY_REQUEST
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %getQueueLength
    //  file nic.linked.opt.aa, line 209
    // 	$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b1  ) ( ~ ($bitcast ($uint<8>) _b0  ) ) (q_base_address + 8 ) ($bitcast ($uint<64>) _b0  ) ) (wi_and_len ) 
    //  file nic.linked.opt.aa, line 214
    // ($bitcast ($uint<1>) _b0  )
    $constant $W[type_cast_617_wire_constant] : $int<1> := _b0// 0
    // ($bitcast ($uint<1>) _b1  )
    $constant $W[type_cast_619_wire_constant] : $int<1> := _b1// 1
    // ( ~ ($bitcast ($uint<8>) _b0  ) )
    $constant $W[NOT_u8_u8_622_wire_constant] : $int<8> := _b11111111// -1
    // 8 
    $constant $W[konst_624_wire_constant] : $int<36> := _b000000000000000000000000000000001000// 8
    // ($bitcast ($uint<64>) _b0  )
    $constant $W[type_cast_627_wire_constant] : $int<64> := _b0000000000000000000000000000000000000000000000000000000000000000// 0
    // 	$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b1  ) ( ~ ($bitcast ($uint<8>) _b0  ) ) (q_base_address + 8 ) ($bitcast ($uint<64>) _b0  ) ) (wi_and_len ) 
    //  file nic.linked.opt.aa, line 214
    // (q_base_address + 8 )
    $intermediate $W[ADD_u36_u36_625_wire] : $int<36>
    // wi_and_len
    $W[wi_and_len_629] : $int<64>
    // 	Queue_Length := ( $slice wi_and_len 31 0 )  $buffering 1// bits of buffering = 32. 
    //  file nic.linked.opt.aa, line 215
    // Queue_Length
    // 	$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b1  ) ( ~ ($bitcast ($uint<8>) _b0  ) ) (q_base_address + 8 ) ($bitcast ($uint<64>) _b0  ) ) (wi_and_len ) 
    //  file nic.linked.opt.aa, line 214
    // (q_base_address + 8 )
    +[ADD_u36_u36_625_inst] (q_base_address konst_624_wire_constant) (ADD_u36_u36_625_wire)   $flowthrough 
    $delay ADD_u36_u36_625_inst 0
    $call [call_stmt_629_call] $module accessMemory(type_cast_617_wire_constant type_cast_619_wire_constant NOT_u8_u8_622_wire_constant ADD_u36_u36_625_wire type_cast_627_wire_constant) (wi_and_len_629)  
    $delay call_stmt_629_call 3
    $buffering  $in call_stmt_629_call type_cast_617_wire_constant 1
    $buffering  $in call_stmt_629_call type_cast_619_wire_constant 1
    $buffering  $in call_stmt_629_call NOT_u8_u8_622_wire_constant 1
    $buffering  $in call_stmt_629_call ADD_u36_u36_625_wire 1
    $buffering  $in call_stmt_629_call type_cast_627_wire_constant 1
    $buffering  $out call_stmt_629_call wi_and_len_629 1
    // 	Queue_Length := ( $slice wi_and_len 31 0 )  $buffering 1// bits of buffering = 32. 
    //  file nic.linked.opt.aa, line 215
    // ( $slice wi_and_len 31 0 ) 
    [:] [slice_632_inst] (wi_and_len_629 31 0) (Queue_Length) 
    $buffering  $out slice_632_inst Queue_Length 1
    $delay slice_632_inst 1
  }
  // end data-path
  // 	$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b1  ) ( ~ ($bitcast ($uint<8>) _b0  ) ) (q_base_address + 8 ) ($bitcast ($uint<64>) _b0  ) ) (wi_and_len ) 
  //  file nic.linked.opt.aa, line 214
  // (q_base_address + 8 )
  // q_base_address
  call_stmt_629_call <=> (call_stmt_629_to_assign_stmt_633/call_stmt_629_Sample/crr call_stmt_629_to_assign_stmt_633/call_stmt_629_Update/ccr) (call_stmt_629_to_assign_stmt_633/call_stmt_629_Sample/cra call_stmt_629_to_assign_stmt_633/call_stmt_629_Update/cca)
  // 	Queue_Length := ( $slice wi_and_len 31 0 )  $buffering 1// bits of buffering = 32. 
  //  file nic.linked.opt.aa, line 215
  // wi_and_len
  // ( $slice wi_and_len 31 0 ) 
  slice_632_inst <=> (call_stmt_629_to_assign_stmt_633/slice_632_Sample/rr call_stmt_629_to_assign_stmt_633/slice_632_Update/cr) (call_stmt_629_to_assign_stmt_633/slice_632_Sample/ra call_stmt_629_to_assign_stmt_633/slice_632_Update/ca)
}
$module [getQueueElement] 
{
  $in q_base_address:$int<36>
  // can point into 
  read_index:$int<32>
  // can point into 
  $out q_r_data:$int<32>
  // can point into 
  // pipe-declarations for block %getQueueElement
  //  file nic.linked.opt.aa, line 217
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    ::[assign_stmt_644_to_assign_stmt_684] 
    {
      // start: WAR dependencies for buffer_address
      // ignored out-of-scope w_root  q_base_address : $uint<36> 
      // done: WAR dependencies for buffer_address
      // start:  	$volatile buffer_address := (q_base_address + ($bitcast ($uint<36>) 24  )) $buffering 1
      //  file nic.linked.opt.aa, line 222
      // volatile! 
      // Source expression
      // (q_base_address + ($bitcast ($uint<36>) 24  ))
      // q_base_address
      // Target expression
      // (as target) buffer_address
      // start: WAR dependencies for buffer_address
      // ignored out-of-scope w_root  q_base_address : $uint<36> 
      // done: WAR dependencies for buffer_address
      // end:  	$volatile buffer_address := (q_base_address + ($bitcast ($uint<36>) 24  )) $buffering 1
      // start: WAR dependencies for element_pair_address
      // ignored out-of-scope w_root  q_base_address : $uint<36> 
      // ignored out-of-scope w_root  read_index : $uint<32> 
      // done: WAR dependencies for element_pair_address
      // start:  	$volatile element_pair_address := (buffer_address + ($bitcast ($uint<36>) (( $slice read_index 31 1 )  && ($bitcast ($uint<3>) _b0  )) )) $buffering 1
      //  file nic.linked.opt.aa, line 223
      // volatile! 
      // Source expression
      // (buffer_address + ($bitcast ($uint<36>) (( $slice read_index 31 1 )  && ($bitcast ($uint<3>) _b0  )) ))
      // buffer_address
      // ($bitcast ($uint<36>) (( $slice read_index 31 1 )  && ($bitcast ($uint<3>) _b0  )) )
      // (( $slice read_index 31 1 )  && ($bitcast ($uint<3>) _b0  ))
      // ( $slice read_index 31 1 ) 
      // read_index
      // Target expression
      // (as target) element_pair_address
      // start: WAR dependencies for element_pair_address
      // ignored out-of-scope w_root  q_base_address : $uint<36> 
      // ignored out-of-scope w_root  read_index : $uint<32> 
      // done: WAR dependencies for element_pair_address
      // end:  	$volatile element_pair_address := (buffer_address + ($bitcast ($uint<36>) (( $slice read_index 31 1 )  && ($bitcast ($uint<3>) _b0  )) )) $buffering 1
      // start: 	$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b1  ) ( ~ ($bitcast ($uint<8>) _b0  ) ) element_pair_address ($bitcast ($uint<64>) _b0  ) ) (element_pair ) 
      //  file nic.linked.opt.aa, line 224
      $T[call_stmt_668_sample_start_] 
      $T[call_stmt_668_sample_completed_] 
      $T[call_stmt_668_update_start_] 
      $T[call_stmt_668_update_completed_] 
      // Call input argument 0
      // Call input argument 1
      // Call input argument 2
      // Call input argument 3
      // element_pair_address
      // Call input argument 4
      // start: Forward dependencies from element_pair_address to transition call_stmt_668_sample_start_
      // done: Forward dependencies from element_pair_address to transition call_stmt_668_sample_start_
      ;;[call_stmt_668_Sample] 
      {
        $T [crr] $T [cra] 
      }
      ;;[call_stmt_668_Update] 
      {
        $T [ccr] $T [cca] 
      }
      call_stmt_668_sample_start_ &-> (call_stmt_668_Sample)
      call_stmt_668_sample_completed_ <-& (call_stmt_668_Sample)
      call_stmt_668_sample_completed_ &-> ($null)
      call_stmt_668_update_start_ &-> (call_stmt_668_Update)
      call_stmt_668_update_completed_ <-& (call_stmt_668_Update)
      // Call output argument 0
      // (as target) element_pair
      // start: WAR dependencies for element_pair
      // done: WAR dependencies for element_pair
      // end: 	$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b1  ) ( ~ ($bitcast ($uint<8>) _b0  ) ) element_pair_address ($bitcast ($uint<64>) _b0  ) ) (element_pair ) 
      // start: WAR dependencies for e0
      // done: WAR dependencies for e0
      // start:  	$volatile e0 := ( $slice element_pair 63 32 )  $buffering 1
      //  file nic.linked.opt.aa, line 225
      // volatile! 
      // Source expression
      // ( $slice element_pair 63 32 ) 
      // element_pair
      // Target expression
      // (as target) e0
      // start: WAR dependencies for e0
      // done: WAR dependencies for e0
      // end:  	$volatile e0 := ( $slice element_pair 63 32 )  $buffering 1
      // start: WAR dependencies for e1
      // done: WAR dependencies for e1
      // start:  	$volatile e1 := ( $slice element_pair 31 0 )  $buffering 1
      //  file nic.linked.opt.aa, line 226
      // volatile! 
      // Source expression
      // ( $slice element_pair 31 0 ) 
      // element_pair
      // Target expression
      // (as target) e1
      // start: WAR dependencies for e1
      // done: WAR dependencies for e1
      // end:  	$volatile e1 := ( $slice element_pair 31 0 )  $buffering 1
      // start:  	q_r_data := ( $mux (read_index [] 0 ) e1  e0 )  $buffering 1// bits of buffering = 32. 
      //  file nic.linked.opt.aa, line 227
      // Source expression
      // ( $mux (read_index [] 0 ) e1  e0 ) 
      $T[MUX_683_sample_start_] 
      $T[MUX_683_sample_completed_] 
      $T[MUX_683_update_start_] 
      $T[MUX_683_update_completed_] 
      // (read_index [] 0 )
      // read_index
      // e1
      // e0
      // start: Forward dependencies from (read_index [] 0 ) to transition MUX_683_sample_start_
      // done: Forward dependencies from (read_index [] 0 ) to transition MUX_683_sample_start_
      // start: Forward dependencies from e1 to transition MUX_683_sample_start_
      MUX_683_sample_start_ <-& (call_stmt_668_update_completed_)
      // done: Forward dependencies from e1 to transition MUX_683_sample_start_
      // start: Forward dependencies from e0 to transition MUX_683_sample_start_
      MUX_683_sample_start_ <-& (call_stmt_668_update_completed_)
      // done: Forward dependencies from e0 to transition MUX_683_sample_start_
      ;;[MUX_683_start] 
      {
        // ternary expression: 
        $T [req] $T [ack] // sample req/ack
      }
      ;;[MUX_683_complete] 
      {
        // ternary expression: 
        $T [req] $T [ack] // update req/ack
      }
      MUX_683_sample_start_ &-> (MUX_683_start)
      MUX_683_sample_completed_ <-& (MUX_683_start)
      MUX_683_sample_completed_ &-> ($null)
      MUX_683_update_start_ &-> (MUX_683_complete)
      MUX_683_update_completed_ <-& (MUX_683_complete)
      // Target expression
      // (as target) q_r_data
      // q_r_data
      // write to interface object
      // start: WAR dependencies for q_r_data
      // done: WAR dependencies for q_r_data
      // q_r_data
      // write to interface object
      // end:  	q_r_data := ( $mux (read_index [] 0 ) e1  e0 )  $buffering 1// bits of buffering = 32. 
      // load-store dependencies..
      // pipe read/write dependencies for pipe MEMORY_TO_NIC_RESPONSE
      // read-dependencies for pipe MEMORY_TO_NIC_RESPONSE
      // write-dependencies for pipe MEMORY_TO_NIC_RESPONSE
      // signal write dependencies for MEMORY_TO_NIC_RESPONSE
      // pipe read/write dependencies for pipe NIC_TO_MEMORY_REQUEST
      // read-dependencies for pipe NIC_TO_MEMORY_REQUEST
      // write-dependencies for pipe NIC_TO_MEMORY_REQUEST
      // signal write dependencies for NIC_TO_MEMORY_REQUEST
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %getQueueElement
    //  file nic.linked.opt.aa, line 217
    // ($bitcast ($uint<36>) 24  )
    $constant $W[type_cast_642_wire_constant] : $int<36> := _b000000000000000000000000000000011000// 24
    // ($bitcast ($uint<3>) _b0  )
    $constant $W[type_cast_651_wire_constant] : $int<3> := _b000// 0
    // 	$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b1  ) ( ~ ($bitcast ($uint<8>) _b0  ) ) element_pair_address ($bitcast ($uint<64>) _b0  ) ) (element_pair ) 
    //  file nic.linked.opt.aa, line 224
    // ($bitcast ($uint<1>) _b0  )
    $constant $W[type_cast_658_wire_constant] : $int<1> := _b0// 0
    // ($bitcast ($uint<1>) _b1  )
    $constant $W[type_cast_660_wire_constant] : $int<1> := _b1// 1
    // ( ~ ($bitcast ($uint<8>) _b0  ) )
    $constant $W[NOT_u8_u8_663_wire_constant] : $int<8> := _b11111111// -1
    // ($bitcast ($uint<64>) _b0  )
    $constant $W[type_cast_666_wire_constant] : $int<64> := _b0000000000000000000000000000000000000000000000000000000000000000// 0
    // ( $mux (read_index [] 0 ) e1  e0 ) 
    // 0 
    $constant $W[konst_679_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // 	$volatile buffer_address := (q_base_address + ($bitcast ($uint<36>) 24  )) $buffering 1
    //  file nic.linked.opt.aa, line 222
    // buffer_address
    $W[buffer_address_644] : $int<36>
    // 	$volatile element_pair_address := (buffer_address + ($bitcast ($uint<36>) (( $slice read_index 31 1 )  && ($bitcast ($uint<3>) _b0  )) )) $buffering 1
    //  file nic.linked.opt.aa, line 223
    // ( $slice read_index 31 1 ) 
    $intermediate $W[slice_649_wire] : $int<31>
    // (( $slice read_index 31 1 )  && ($bitcast ($uint<3>) _b0  ))
    $intermediate $W[CONCAT_u31_u34_652_wire] : $int<34>
    // ($bitcast ($uint<36>) (( $slice read_index 31 1 )  && ($bitcast ($uint<3>) _b0  )) )
    $intermediate $W[type_cast_654_wire] : $int<36>
    // element_pair_address
    $W[element_pair_address_656] : $int<36>
    // 	$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b1  ) ( ~ ($bitcast ($uint<8>) _b0  ) ) element_pair_address ($bitcast ($uint<64>) _b0  ) ) (element_pair ) 
    //  file nic.linked.opt.aa, line 224
    // element_pair
    $W[element_pair_668] : $int<64>
    // 	$volatile e0 := ( $slice element_pair 63 32 )  $buffering 1
    //  file nic.linked.opt.aa, line 225
    // e0
    $W[e0_672] : $int<32>
    // 	$volatile e1 := ( $slice element_pair 31 0 )  $buffering 1
    //  file nic.linked.opt.aa, line 226
    // e1
    $W[e1_676] : $int<32>
    // 	q_r_data := ( $mux (read_index [] 0 ) e1  e0 )  $buffering 1// bits of buffering = 32. 
    //  file nic.linked.opt.aa, line 227
    // (read_index [] 0 )
    $intermediate $W[BITSEL_u32_u1_680_wire] : $int<1>
    // q_r_data
    // 	$volatile buffer_address := (q_base_address + ($bitcast ($uint<36>) 24  )) $buffering 1
    //  file nic.linked.opt.aa, line 222
    // (q_base_address + ($bitcast ($uint<36>) 24  ))
    +[ADD_u36_u36_643_inst] (q_base_address type_cast_642_wire_constant) (buffer_address_644)   $flowthrough 
    $delay ADD_u36_u36_643_inst 0
    // 	$volatile element_pair_address := (buffer_address + ($bitcast ($uint<36>) (( $slice read_index 31 1 )  && ($bitcast ($uint<3>) _b0  )) )) $buffering 1
    //  file nic.linked.opt.aa, line 223
    // ( $slice read_index 31 1 ) 
    [:] [slice_649_inst] (read_index 31 1) (slice_649_wire)  $flowthrough
    $delay slice_649_inst 0
    // (( $slice read_index 31 1 )  && ($bitcast ($uint<3>) _b0  ))
    &&[CONCAT_u31_u34_652_inst] (slice_649_wire type_cast_651_wire_constant) (CONCAT_u31_u34_652_wire)   $flowthrough 
    $delay CONCAT_u31_u34_652_inst 0
    // ($bitcast ($uint<36>) (( $slice read_index 31 1 )  && ($bitcast ($uint<3>) _b0  )) )
    # := [type_cast_654_inst] (CONCAT_u31_u34_652_wire) (type_cast_654_wire)   $flowthrough
    $delay type_cast_654_inst 0
    // (buffer_address + ($bitcast ($uint<36>) (( $slice read_index 31 1 )  && ($bitcast ($uint<3>) _b0  )) ))
    +[ADD_u36_u36_655_inst] (buffer_address_644 type_cast_654_wire) (element_pair_address_656)   $flowthrough 
    $delay ADD_u36_u36_655_inst 0
    // 	$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b1  ) ( ~ ($bitcast ($uint<8>) _b0  ) ) element_pair_address ($bitcast ($uint<64>) _b0  ) ) (element_pair ) 
    //  file nic.linked.opt.aa, line 224
    $call [call_stmt_668_call] $module accessMemory(type_cast_658_wire_constant type_cast_660_wire_constant NOT_u8_u8_663_wire_constant element_pair_address_656 type_cast_666_wire_constant) (element_pair_668)  
    $delay call_stmt_668_call 3
    $buffering  $in call_stmt_668_call type_cast_658_wire_constant 1
    $buffering  $in call_stmt_668_call type_cast_660_wire_constant 1
    $buffering  $in call_stmt_668_call NOT_u8_u8_663_wire_constant 1
    $buffering  $in call_stmt_668_call element_pair_address_656 1
    $buffering  $in call_stmt_668_call type_cast_666_wire_constant 1
    $buffering  $out call_stmt_668_call element_pair_668 1
    // 	$volatile e0 := ( $slice element_pair 63 32 )  $buffering 1
    //  file nic.linked.opt.aa, line 225
    // ( $slice element_pair 63 32 ) 
    [:] [slice_671_inst] (element_pair_668 63 32) (e0_672)  $flowthrough
    $delay slice_671_inst 0
    // 	$volatile e1 := ( $slice element_pair 31 0 )  $buffering 1
    //  file nic.linked.opt.aa, line 226
    // ( $slice element_pair 31 0 ) 
    [:] [slice_675_inst] (element_pair_668 31 0) (e1_676)  $flowthrough
    $delay slice_675_inst 0
    // 	q_r_data := ( $mux (read_index [] 0 ) e1  e0 )  $buffering 1// bits of buffering = 32. 
    //  file nic.linked.opt.aa, line 227
    // (read_index [] 0 )
    [][BITSEL_u32_u1_680_inst] (read_index konst_679_wire_constant) (BITSEL_u32_u1_680_wire)   $flowthrough 
    $delay BITSEL_u32_u1_680_inst 0
    // ( $mux (read_index [] 0 ) e1  e0 ) 
    ? [MUX_683_inst] (BITSEL_u32_u1_680_wire e1_676 e0_672) (q_r_data) 
    $buffering  $out MUX_683_inst q_r_data 1
  }
  // end data-path
  // 	$volatile buffer_address := (q_base_address + ($bitcast ($uint<36>) 24  )) $buffering 1
  //  file nic.linked.opt.aa, line 222
  // (q_base_address + ($bitcast ($uint<36>) 24  ))
  // q_base_address
  // 	$volatile element_pair_address := (buffer_address + ($bitcast ($uint<36>) (( $slice read_index 31 1 )  && ($bitcast ($uint<3>) _b0  )) )) $buffering 1
  //  file nic.linked.opt.aa, line 223
  // (buffer_address + ($bitcast ($uint<36>) (( $slice read_index 31 1 )  && ($bitcast ($uint<3>) _b0  )) ))
  // buffer_address
  // (( $slice read_index 31 1 )  && ($bitcast ($uint<3>) _b0  ))
  // read_index
  // 	$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b1  ) ( ~ ($bitcast ($uint<8>) _b0  ) ) element_pair_address ($bitcast ($uint<64>) _b0  ) ) (element_pair ) 
  //  file nic.linked.opt.aa, line 224
  // element_pair_address
  call_stmt_668_call <=> (assign_stmt_644_to_assign_stmt_684/call_stmt_668_Sample/crr assign_stmt_644_to_assign_stmt_684/call_stmt_668_Update/ccr) (assign_stmt_644_to_assign_stmt_684/call_stmt_668_Sample/cra assign_stmt_644_to_assign_stmt_684/call_stmt_668_Update/cca)
  // 	$volatile e0 := ( $slice element_pair 63 32 )  $buffering 1
  //  file nic.linked.opt.aa, line 225
  // element_pair
  // 	$volatile e1 := ( $slice element_pair 31 0 )  $buffering 1
  //  file nic.linked.opt.aa, line 226
  // element_pair
  // 	q_r_data := ( $mux (read_index [] 0 ) e1  e0 )  $buffering 1// bits of buffering = 32. 
  //  file nic.linked.opt.aa, line 227
  // (read_index [] 0 )
  // read_index
  // e1
  // e0
  // ( $mux (read_index [] 0 ) e1  e0 ) 
  MUX_683_inst <=> (assign_stmt_644_to_assign_stmt_684/MUX_683_start/req assign_stmt_644_to_assign_stmt_684/MUX_683_complete/req) (assign_stmt_644_to_assign_stmt_684/MUX_683_start/ack assign_stmt_644_to_assign_stmt_684/MUX_683_complete/ack)
}
$module [setQueuePointers] 
{
  $in q_base_address:$int<36>
  // can point into 
  wp:$int<32>
  // can point into 
  rp:$int<32>
  // can point into 
  // pipe-declarations for block %setQueuePointers
  //  file nic.linked.opt.aa, line 230
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    ::[call_stmt_713] 
    {
      // start: 	$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b0  ) ( ~ ($bitcast ($uint<8>) _b0  ) ) (q_base_address + 4 ) (rp && wp) ) (ignore ) 
      //  file nic.linked.opt.aa, line 236
      $T[call_stmt_713_sample_start_] 
      $T[call_stmt_713_sample_completed_] 
      $T[call_stmt_713_update_start_] 
      $T[call_stmt_713_update_completed_] 
      // Call input argument 0
      // Call input argument 1
      // Call input argument 2
      // Call input argument 3
      // (q_base_address + 4 )
      // q_base_address
      // Call input argument 4
      // (rp && wp)
      // rp
      // wp
      // start: Forward dependencies from (q_base_address + 4 ) to transition call_stmt_713_sample_start_
      // done: Forward dependencies from (q_base_address + 4 ) to transition call_stmt_713_sample_start_
      // start: Forward dependencies from (rp && wp) to transition call_stmt_713_sample_start_
      // done: Forward dependencies from (rp && wp) to transition call_stmt_713_sample_start_
      ;;[call_stmt_713_Sample] 
      {
        $T [crr] $T [cra] 
      }
      ;;[call_stmt_713_Update] 
      {
        $T [ccr] $T [cca] 
      }
      call_stmt_713_sample_start_ &-> (call_stmt_713_Sample)
      call_stmt_713_sample_completed_ <-& (call_stmt_713_Sample)
      call_stmt_713_sample_completed_ &-> ($null)
      call_stmt_713_update_start_ &-> (call_stmt_713_Update)
      call_stmt_713_update_completed_ <-& (call_stmt_713_Update)
      // Call output argument 0
      // (as target) ignore
      // start: WAR dependencies for ignore
      // done: WAR dependencies for ignore
      // end: 	$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b0  ) ( ~ ($bitcast ($uint<8>) _b0  ) ) (q_base_address + 4 ) (rp && wp) ) (ignore ) 
      // load-store dependencies..
      // pipe read/write dependencies for pipe MEMORY_TO_NIC_RESPONSE
      // read-dependencies for pipe MEMORY_TO_NIC_RESPONSE
      // write-dependencies for pipe MEMORY_TO_NIC_RESPONSE
      // signal write dependencies for MEMORY_TO_NIC_RESPONSE
      // pipe read/write dependencies for pipe NIC_TO_MEMORY_REQUEST
      // read-dependencies for pipe NIC_TO_MEMORY_REQUEST
      // write-dependencies for pipe NIC_TO_MEMORY_REQUEST
      // signal write dependencies for NIC_TO_MEMORY_REQUEST
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %setQueuePointers
    //  file nic.linked.opt.aa, line 230
    // 	$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b0  ) ( ~ ($bitcast ($uint<8>) _b0  ) ) (q_base_address + 4 ) (rp && wp) ) (ignore ) 
    //  file nic.linked.opt.aa, line 236
    // ($bitcast ($uint<1>) _b0  )
    $constant $W[type_cast_700_wire_constant] : $int<1> := _b0// 0
    // ($bitcast ($uint<1>) _b0  )
    $constant $W[type_cast_702_wire_constant] : $int<1> := _b0// 0
    // ( ~ ($bitcast ($uint<8>) _b0  ) )
    $constant $W[NOT_u8_u8_705_wire_constant] : $int<8> := _b11111111// -1
    // 4 
    $constant $W[konst_707_wire_constant] : $int<36> := _b000000000000000000000000000000000100// 4
    // 	$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b0  ) ( ~ ($bitcast ($uint<8>) _b0  ) ) (q_base_address + 4 ) (rp && wp) ) (ignore ) 
    //  file nic.linked.opt.aa, line 236
    // (q_base_address + 4 )
    $intermediate $W[ADD_u36_u36_708_wire] : $int<36>
    // (rp && wp)
    $intermediate $W[CONCAT_u32_u64_711_wire] : $int<64>
    // ignore
    $W[ignore_713] : $int<64>
    // 	$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b0  ) ( ~ ($bitcast ($uint<8>) _b0  ) ) (q_base_address + 4 ) (rp && wp) ) (ignore ) 
    //  file nic.linked.opt.aa, line 236
    // (q_base_address + 4 )
    +[ADD_u36_u36_708_inst] (q_base_address konst_707_wire_constant) (ADD_u36_u36_708_wire)   $flowthrough 
    $delay ADD_u36_u36_708_inst 0
    // (rp && wp)
    &&[CONCAT_u32_u64_711_inst] (rp wp) (CONCAT_u32_u64_711_wire)   $flowthrough 
    $delay CONCAT_u32_u64_711_inst 0
    $call [call_stmt_713_call] $module accessMemory(type_cast_700_wire_constant type_cast_702_wire_constant NOT_u8_u8_705_wire_constant ADD_u36_u36_708_wire CONCAT_u32_u64_711_wire) (ignore_713)  
    $delay call_stmt_713_call 3
    $buffering  $in call_stmt_713_call type_cast_700_wire_constant 1
    $buffering  $in call_stmt_713_call type_cast_702_wire_constant 1
    $buffering  $in call_stmt_713_call NOT_u8_u8_705_wire_constant 1
    $buffering  $in call_stmt_713_call ADD_u36_u36_708_wire 1
    $buffering  $in call_stmt_713_call CONCAT_u32_u64_711_wire 1
    $buffering  $out call_stmt_713_call ignore_713 1
  }
  // end data-path
  // 	$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b0  ) ( ~ ($bitcast ($uint<8>) _b0  ) ) (q_base_address + 4 ) (rp && wp) ) (ignore ) 
  //  file nic.linked.opt.aa, line 236
  // (q_base_address + 4 )
  // q_base_address
  // (rp && wp)
  // rp
  // wp
  call_stmt_713_call <=> (call_stmt_713/call_stmt_713_Sample/crr call_stmt_713/call_stmt_713_Update/ccr) (call_stmt_713/call_stmt_713_Sample/cra call_stmt_713/call_stmt_713_Update/cca)
}
$module [releaseLock] 
{
  $in q_base_address:$int<36>
  // can point into 
  // pipe-declarations for block %releaseLock
  //  file nic.linked.opt.aa, line 238
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    ::[assign_stmt_722_to_call_stmt_852] 
    {
      // start: WAR dependencies for lock_address_pointer
      // ignored out-of-scope w_root  q_base_address : $uint<36> 
      // done: WAR dependencies for lock_address_pointer
      // start:  	$volatile lock_address_pointer := (q_base_address + ($bitcast ($uint<36>) 20  )) $buffering 1
      //  file nic.linked.opt.aa, line 243
      // volatile! 
      // Source expression
      // (q_base_address + ($bitcast ($uint<36>) 20  ))
      // q_base_address
      // Target expression
      // (as target) lock_address_pointer
      // start: WAR dependencies for lock_address_pointer
      // ignored out-of-scope w_root  q_base_address : $uint<36> 
      // done: WAR dependencies for lock_address_pointer
      // end:  	$volatile lock_address_pointer := (q_base_address + ($bitcast ($uint<36>) 20  )) $buffering 1
      // start: 	$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b1  ) ( ~ ($bitcast ($uint<8>) _b0  ) ) lock_address_pointer ($bitcast ($uint<64>) _b0  ) ) (msg_size_plus_lock ) 
      //  file nic.linked.opt.aa, line 244
      $T[call_stmt_734_sample_start_] 
      $T[call_stmt_734_sample_completed_] 
      $T[call_stmt_734_update_start_] 
      $T[call_stmt_734_update_completed_] 
      // Call input argument 0
      // Call input argument 1
      // Call input argument 2
      // Call input argument 3
      // lock_address_pointer
      // Call input argument 4
      // start: Forward dependencies from lock_address_pointer to transition call_stmt_734_sample_start_
      // done: Forward dependencies from lock_address_pointer to transition call_stmt_734_sample_start_
      ;;[call_stmt_734_Sample] 
      {
        $T [crr] $T [cra] 
      }
      ;;[call_stmt_734_Update] 
      {
        $T [ccr] $T [cca] 
      }
      call_stmt_734_sample_start_ &-> (call_stmt_734_Sample)
      call_stmt_734_sample_completed_ <-& (call_stmt_734_Sample)
      call_stmt_734_sample_completed_ &-> ($null)
      call_stmt_734_update_start_ &-> (call_stmt_734_Update)
      call_stmt_734_update_completed_ <-& (call_stmt_734_Update)
      // Call output argument 0
      // (as target) msg_size_plus_lock
      // start: WAR dependencies for msg_size_plus_lock
      // done: WAR dependencies for msg_size_plus_lock
      // end: 	$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b1  ) ( ~ ($bitcast ($uint<8>) _b0  ) ) lock_address_pointer ($bitcast ($uint<64>) _b0  ) ) (msg_size_plus_lock ) 
      // start: WAR dependencies for lock_addr_32
      // done: WAR dependencies for lock_addr_32
      // start:  	$volatile lock_addr_32 := ( $slice msg_size_plus_lock 31 0 )  $buffering 1
      //  file nic.linked.opt.aa, line 245
      // volatile! 
      // Source expression
      // ( $slice msg_size_plus_lock 31 0 ) 
      // msg_size_plus_lock
      // Target expression
      // (as target) lock_addr_32
      // start: WAR dependencies for lock_addr_32
      // done: WAR dependencies for lock_addr_32
      // end:  	$volatile lock_addr_32 := ( $slice msg_size_plus_lock 31 0 )  $buffering 1
      // start: WAR dependencies for sel
      // done: WAR dependencies for sel
      // start:  	$volatile sel := ( $slice lock_addr_32 2 0 )  $buffering 1
      //  file nic.linked.opt.aa, line 246
      // volatile! 
      // Source expression
      // ( $slice lock_addr_32 2 0 ) 
      // lock_addr_32
      // Target expression
      // (as target) sel
      // start: WAR dependencies for sel
      // done: WAR dependencies for sel
      // end:  	$volatile sel := ( $slice lock_addr_32 2 0 )  $buffering 1
      // start: WAR dependencies for s0
      // done: WAR dependencies for s0
      // start:  	$volatile s0 := (sel == 0 ) $buffering 1
      //  file nic.linked.opt.aa, line 247
      // volatile! 
      // Source expression
      // (sel == 0 )
      // sel
      // Target expression
      // (as target) s0
      // start: WAR dependencies for s0
      // done: WAR dependencies for s0
      // end:  	$volatile s0 := (sel == 0 ) $buffering 1
      // start: WAR dependencies for s1
      // done: WAR dependencies for s1
      // start:  	$volatile s1 := (sel == 1 ) $buffering 1
      //  file nic.linked.opt.aa, line 248
      // volatile! 
      // Source expression
      // (sel == 1 )
      // sel
      // Target expression
      // (as target) s1
      // start: WAR dependencies for s1
      // done: WAR dependencies for s1
      // end:  	$volatile s1 := (sel == 1 ) $buffering 1
      // start: WAR dependencies for s2
      // done: WAR dependencies for s2
      // start:  	$volatile s2 := (sel == 2 ) $buffering 1
      //  file nic.linked.opt.aa, line 249
      // volatile! 
      // Source expression
      // (sel == 2 )
      // sel
      // Target expression
      // (as target) s2
      // start: WAR dependencies for s2
      // done: WAR dependencies for s2
      // end:  	$volatile s2 := (sel == 2 ) $buffering 1
      // start: WAR dependencies for s3
      // done: WAR dependencies for s3
      // start:  	$volatile s3 := (sel == 3 ) $buffering 1
      //  file nic.linked.opt.aa, line 250
      // volatile! 
      // Source expression
      // (sel == 3 )
      // sel
      // Target expression
      // (as target) s3
      // start: WAR dependencies for s3
      // done: WAR dependencies for s3
      // end:  	$volatile s3 := (sel == 3 ) $buffering 1
      // start: WAR dependencies for s4
      // done: WAR dependencies for s4
      // start:  	$volatile s4 := (sel == 4 ) $buffering 1
      //  file nic.linked.opt.aa, line 251
      // volatile! 
      // Source expression
      // (sel == 4 )
      // sel
      // Target expression
      // (as target) s4
      // start: WAR dependencies for s4
      // done: WAR dependencies for s4
      // end:  	$volatile s4 := (sel == 4 ) $buffering 1
      // start: WAR dependencies for s5
      // done: WAR dependencies for s5
      // start:  	$volatile s5 := (sel == 5 ) $buffering 1
      //  file nic.linked.opt.aa, line 252
      // volatile! 
      // Source expression
      // (sel == 5 )
      // sel
      // Target expression
      // (as target) s5
      // start: WAR dependencies for s5
      // done: WAR dependencies for s5
      // end:  	$volatile s5 := (sel == 5 ) $buffering 1
      // start: WAR dependencies for s6
      // done: WAR dependencies for s6
      // start:  	$volatile s6 := (sel == 6 ) $buffering 1
      //  file nic.linked.opt.aa, line 253
      // volatile! 
      // Source expression
      // (sel == 6 )
      // sel
      // Target expression
      // (as target) s6
      // start: WAR dependencies for s6
      // done: WAR dependencies for s6
      // end:  	$volatile s6 := (sel == 6 ) $buffering 1
      // start: WAR dependencies for s7
      // done: WAR dependencies for s7
      // start:  	$volatile s7 := (sel == 7 ) $buffering 1
      //  file nic.linked.opt.aa, line 254
      // volatile! 
      // Source expression
      // (sel == 7 )
      // sel
      // Target expression
      // (as target) s7
      // start: WAR dependencies for s7
      // done: WAR dependencies for s7
      // end:  	$volatile s7 := (sel == 7 ) $buffering 1
      // start: WAR dependencies for new_bmask
      // done: WAR dependencies for new_bmask
      // start:  	$volatile new_bmask := (((( $mux s0 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) )  && ( $mux s1 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) ) && (( $mux s2 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) )  && ( $mux s3 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) )) && ((( $mux s4 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) )  && ( $mux s5 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) ) && (( $mux s6 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) )  && ( $mux s7 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) ))) $buffering 1
      //  file nic.linked.opt.aa, line 255
      // volatile! 
      // Source expression
      // (((( $mux s0 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) )  && ( $mux s1 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) ) && (( $mux s2 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) )  && ( $mux s3 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) )) && ((( $mux s4 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) )  && ( $mux s5 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) ) && (( $mux s6 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) )  && ( $mux s7 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) )))
      // ((( $mux s0 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) )  && ( $mux s1 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) ) && (( $mux s2 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) )  && ( $mux s3 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) ))
      // (( $mux s0 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) )  && ( $mux s1 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) )
      // ( $mux s0 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) 
      // s0
      // ( $mux s1 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) 
      // s1
      // (( $mux s2 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) )  && ( $mux s3 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) )
      // ( $mux s2 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) 
      // s2
      // ( $mux s3 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) 
      // s3
      // ((( $mux s4 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) )  && ( $mux s5 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) ) && (( $mux s6 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) )  && ( $mux s7 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) ))
      // (( $mux s4 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) )  && ( $mux s5 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) )
      // ( $mux s4 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) 
      // s4
      // ( $mux s5 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) 
      // s5
      // (( $mux s6 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) )  && ( $mux s7 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) )
      // ( $mux s6 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) 
      // s6
      // ( $mux s7 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) 
      // s7
      // Target expression
      // (as target) new_bmask
      // start: WAR dependencies for new_bmask
      // done: WAR dependencies for new_bmask
      // end:  	$volatile new_bmask := (((( $mux s0 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) )  && ( $mux s1 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) ) && (( $mux s2 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) )  && ( $mux s3 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) )) && ((( $mux s4 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) )  && ( $mux s5 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) ) && (( $mux s6 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) )  && ( $mux s7 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) ))) $buffering 1
      // start: 	$call accessMemory (($bitcast ($uint<1>) _b1  ) ($bitcast ($uint<1>) _b0  ) new_bmask (($bitcast ($uint<4>) _b0  ) && lock_addr_32) ($bitcast ($uint<64>) _b0  ) ) (ignore ) 
      //  file nic.linked.opt.aa, line 256
      $T[call_stmt_852_sample_start_] 
      $T[call_stmt_852_sample_completed_] 
      $T[call_stmt_852_update_start_] 
      $T[call_stmt_852_update_completed_] 
      // Call input argument 0
      // Call input argument 1
      // Call input argument 2
      // new_bmask
      // Call input argument 3
      // (($bitcast ($uint<4>) _b0  ) && lock_addr_32)
      // lock_addr_32
      // Call input argument 4
      // start: Forward dependencies from new_bmask to transition call_stmt_852_sample_start_
      call_stmt_852_sample_start_ <-& (call_stmt_734_update_completed_)
      // done: Forward dependencies from new_bmask to transition call_stmt_852_sample_start_
      // start: Forward dependencies from (($bitcast ($uint<4>) _b0  ) && lock_addr_32) to transition call_stmt_852_sample_start_
      call_stmt_852_sample_start_ <-& (call_stmt_734_update_completed_)
      // done: Forward dependencies from (($bitcast ($uint<4>) _b0  ) && lock_addr_32) to transition call_stmt_852_sample_start_
      ;;[call_stmt_852_Sample] 
      {
        $T [crr] $T [cra] 
      }
      ;;[call_stmt_852_Update] 
      {
        $T [ccr] $T [cca] 
      }
      call_stmt_852_sample_start_ &-> (call_stmt_852_Sample)
      call_stmt_852_sample_completed_ <-& (call_stmt_852_Sample)
      call_stmt_852_sample_completed_ &-> ($null)
      call_stmt_852_update_start_ &-> (call_stmt_852_Update)
      call_stmt_852_update_completed_ <-& (call_stmt_852_Update)
      // Call output argument 0
      // (as target) ignore
      // start: WAR dependencies for ignore
      // done: WAR dependencies for ignore
      // end: 	$call accessMemory (($bitcast ($uint<1>) _b1  ) ($bitcast ($uint<1>) _b0  ) new_bmask (($bitcast ($uint<4>) _b0  ) && lock_addr_32) ($bitcast ($uint<64>) _b0  ) ) (ignore ) 
      // load-store dependencies..
      // pipe read/write dependencies for pipe MEMORY_TO_NIC_RESPONSE
      // read-dependencies for pipe MEMORY_TO_NIC_RESPONSE
      call_stmt_852_sample_start_ <-& (call_stmt_734_update_completed_)
      // write-dependencies for pipe MEMORY_TO_NIC_RESPONSE
      // signal write dependencies for MEMORY_TO_NIC_RESPONSE
      // pipe read/write dependencies for pipe NIC_TO_MEMORY_REQUEST
      // read-dependencies for pipe NIC_TO_MEMORY_REQUEST
      // write-dependencies for pipe NIC_TO_MEMORY_REQUEST
      call_stmt_852_sample_start_ <-& (call_stmt_734_update_completed_)
      // signal write dependencies for NIC_TO_MEMORY_REQUEST
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %releaseLock
    //  file nic.linked.opt.aa, line 238
    // ($bitcast ($uint<36>) 20  )
    $constant $W[type_cast_720_wire_constant] : $int<36> := _b000000000000000000000000000000010100// 20
    // 	$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b1  ) ( ~ ($bitcast ($uint<8>) _b0  ) ) lock_address_pointer ($bitcast ($uint<64>) _b0  ) ) (msg_size_plus_lock ) 
    //  file nic.linked.opt.aa, line 244
    // ($bitcast ($uint<1>) _b0  )
    $constant $W[type_cast_724_wire_constant] : $int<1> := _b0// 0
    // ($bitcast ($uint<1>) _b1  )
    $constant $W[type_cast_726_wire_constant] : $int<1> := _b1// 1
    // ( ~ ($bitcast ($uint<8>) _b0  ) )
    $constant $W[NOT_u8_u8_729_wire_constant] : $int<8> := _b11111111// -1
    // ($bitcast ($uint<64>) _b0  )
    $constant $W[type_cast_732_wire_constant] : $int<64> := _b0000000000000000000000000000000000000000000000000000000000000000// 0
    // 0 
    $constant $W[konst_745_wire_constant] : $int<3> := _b000// 0
    // 1 
    $constant $W[konst_750_wire_constant] : $int<3> := _b001// 1
    // 2 
    $constant $W[konst_755_wire_constant] : $int<3> := _b010// 2
    // 3 
    $constant $W[konst_760_wire_constant] : $int<3> := _b011// 3
    // 4 
    $constant $W[konst_765_wire_constant] : $int<3> := _b100// 4
    // 5 
    $constant $W[konst_770_wire_constant] : $int<3> := _b101// 5
    // 6 
    $constant $W[konst_775_wire_constant] : $int<3> := _b110// 6
    // 7 
    $constant $W[konst_780_wire_constant] : $int<3> := _b111// 7
    // ( $mux s0 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) 
    // ($bitcast ($uint<1>) _b1  )
    $constant $W[type_cast_786_wire_constant] : $int<1> := _b1// 1
    // ($bitcast ($uint<1>) _b0  )
    $constant $W[type_cast_788_wire_constant] : $int<1> := _b0// 0
    // ( $mux s1 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) 
    // ($bitcast ($uint<1>) _b1  )
    $constant $W[type_cast_792_wire_constant] : $int<1> := _b1// 1
    // ($bitcast ($uint<1>) _b0  )
    $constant $W[type_cast_794_wire_constant] : $int<1> := _b0// 0
    // ( $mux s2 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) 
    // ($bitcast ($uint<1>) _b1  )
    $constant $W[type_cast_799_wire_constant] : $int<1> := _b1// 1
    // ($bitcast ($uint<1>) _b0  )
    $constant $W[type_cast_801_wire_constant] : $int<1> := _b0// 0
    // ( $mux s3 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) 
    // ($bitcast ($uint<1>) _b1  )
    $constant $W[type_cast_805_wire_constant] : $int<1> := _b1// 1
    // ($bitcast ($uint<1>) _b0  )
    $constant $W[type_cast_807_wire_constant] : $int<1> := _b0// 0
    // ( $mux s4 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) 
    // ($bitcast ($uint<1>) _b1  )
    $constant $W[type_cast_813_wire_constant] : $int<1> := _b1// 1
    // ($bitcast ($uint<1>) _b0  )
    $constant $W[type_cast_815_wire_constant] : $int<1> := _b0// 0
    // ( $mux s5 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) 
    // ($bitcast ($uint<1>) _b1  )
    $constant $W[type_cast_819_wire_constant] : $int<1> := _b1// 1
    // ($bitcast ($uint<1>) _b0  )
    $constant $W[type_cast_821_wire_constant] : $int<1> := _b0// 0
    // ( $mux s6 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) 
    // ($bitcast ($uint<1>) _b1  )
    $constant $W[type_cast_826_wire_constant] : $int<1> := _b1// 1
    // ($bitcast ($uint<1>) _b0  )
    $constant $W[type_cast_828_wire_constant] : $int<1> := _b0// 0
    // ( $mux s7 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) 
    // ($bitcast ($uint<1>) _b1  )
    $constant $W[type_cast_832_wire_constant] : $int<1> := _b1// 1
    // ($bitcast ($uint<1>) _b0  )
    $constant $W[type_cast_834_wire_constant] : $int<1> := _b0// 0
    // 	$call accessMemory (($bitcast ($uint<1>) _b1  ) ($bitcast ($uint<1>) _b0  ) new_bmask (($bitcast ($uint<4>) _b0  ) && lock_addr_32) ($bitcast ($uint<64>) _b0  ) ) (ignore ) 
    //  file nic.linked.opt.aa, line 256
    // ($bitcast ($uint<1>) _b1  )
    $constant $W[type_cast_841_wire_constant] : $int<1> := _b1// 1
    // ($bitcast ($uint<1>) _b0  )
    $constant $W[type_cast_843_wire_constant] : $int<1> := _b0// 0
    // ($bitcast ($uint<4>) _b0  )
    $constant $W[type_cast_846_wire_constant] : $int<4> := _b0000// 0
    // ($bitcast ($uint<64>) _b0  )
    $constant $W[type_cast_850_wire_constant] : $int<64> := _b0000000000000000000000000000000000000000000000000000000000000000// 0
    // 	$volatile lock_address_pointer := (q_base_address + ($bitcast ($uint<36>) 20  )) $buffering 1
    //  file nic.linked.opt.aa, line 243
    // lock_address_pointer
    $W[lock_address_pointer_722] : $int<36>
    // 	$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b1  ) ( ~ ($bitcast ($uint<8>) _b0  ) ) lock_address_pointer ($bitcast ($uint<64>) _b0  ) ) (msg_size_plus_lock ) 
    //  file nic.linked.opt.aa, line 244
    // msg_size_plus_lock
    $W[msg_size_plus_lock_734] : $int<64>
    // 	$volatile lock_addr_32 := ( $slice msg_size_plus_lock 31 0 )  $buffering 1
    //  file nic.linked.opt.aa, line 245
    // lock_addr_32
    $W[lock_addr_32_738] : $int<32>
    // 	$volatile sel := ( $slice lock_addr_32 2 0 )  $buffering 1
    //  file nic.linked.opt.aa, line 246
    // sel
    $W[sel_742] : $int<3>
    // 	$volatile s0 := (sel == 0 ) $buffering 1
    //  file nic.linked.opt.aa, line 247
    // s0
    $W[s0_747] : $int<1>
    // 	$volatile s1 := (sel == 1 ) $buffering 1
    //  file nic.linked.opt.aa, line 248
    // s1
    $W[s1_752] : $int<1>
    // 	$volatile s2 := (sel == 2 ) $buffering 1
    //  file nic.linked.opt.aa, line 249
    // s2
    $W[s2_757] : $int<1>
    // 	$volatile s3 := (sel == 3 ) $buffering 1
    //  file nic.linked.opt.aa, line 250
    // s3
    $W[s3_762] : $int<1>
    // 	$volatile s4 := (sel == 4 ) $buffering 1
    //  file nic.linked.opt.aa, line 251
    // s4
    $W[s4_767] : $int<1>
    // 	$volatile s5 := (sel == 5 ) $buffering 1
    //  file nic.linked.opt.aa, line 252
    // s5
    $W[s5_772] : $int<1>
    // 	$volatile s6 := (sel == 6 ) $buffering 1
    //  file nic.linked.opt.aa, line 253
    // s6
    $W[s6_777] : $int<1>
    // 	$volatile s7 := (sel == 7 ) $buffering 1
    //  file nic.linked.opt.aa, line 254
    // s7
    $W[s7_782] : $int<1>
    // 	$volatile new_bmask := (((( $mux s0 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) )  && ( $mux s1 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) ) && (( $mux s2 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) )  && ( $mux s3 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) )) && ((( $mux s4 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) )  && ( $mux s5 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) ) && (( $mux s6 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) )  && ( $mux s7 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) ))) $buffering 1
    //  file nic.linked.opt.aa, line 255
    // ( $mux s0 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) 
    $intermediate $W[MUX_789_wire] : $int<1>
    // ( $mux s1 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) 
    $intermediate $W[MUX_795_wire] : $int<1>
    // (( $mux s0 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) )  && ( $mux s1 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) )
    $intermediate $W[CONCAT_u1_u2_796_wire] : $int<2>
    // ( $mux s2 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) 
    $intermediate $W[MUX_802_wire] : $int<1>
    // ( $mux s3 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) 
    $intermediate $W[MUX_808_wire] : $int<1>
    // (( $mux s2 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) )  && ( $mux s3 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) )
    $intermediate $W[CONCAT_u1_u2_809_wire] : $int<2>
    // ((( $mux s0 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) )  && ( $mux s1 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) ) && (( $mux s2 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) )  && ( $mux s3 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) ))
    $intermediate $W[CONCAT_u2_u4_810_wire] : $int<4>
    // ( $mux s4 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) 
    $intermediate $W[MUX_816_wire] : $int<1>
    // ( $mux s5 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) 
    $intermediate $W[MUX_822_wire] : $int<1>
    // (( $mux s4 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) )  && ( $mux s5 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) )
    $intermediate $W[CONCAT_u1_u2_823_wire] : $int<2>
    // ( $mux s6 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) 
    $intermediate $W[MUX_829_wire] : $int<1>
    // ( $mux s7 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) 
    $intermediate $W[MUX_835_wire] : $int<1>
    // (( $mux s6 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) )  && ( $mux s7 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) )
    $intermediate $W[CONCAT_u1_u2_836_wire] : $int<2>
    // ((( $mux s4 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) )  && ( $mux s5 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) ) && (( $mux s6 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) )  && ( $mux s7 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) ))
    $intermediate $W[CONCAT_u2_u4_837_wire] : $int<4>
    // new_bmask
    $W[new_bmask_839] : $int<8>
    // 	$call accessMemory (($bitcast ($uint<1>) _b1  ) ($bitcast ($uint<1>) _b0  ) new_bmask (($bitcast ($uint<4>) _b0  ) && lock_addr_32) ($bitcast ($uint<64>) _b0  ) ) (ignore ) 
    //  file nic.linked.opt.aa, line 256
    // (($bitcast ($uint<4>) _b0  ) && lock_addr_32)
    $intermediate $W[CONCAT_u4_u36_848_wire] : $int<36>
    // ignore
    $W[ignore_852] : $int<64>
    // 	$volatile lock_address_pointer := (q_base_address + ($bitcast ($uint<36>) 20  )) $buffering 1
    //  file nic.linked.opt.aa, line 243
    // (q_base_address + ($bitcast ($uint<36>) 20  ))
    +[ADD_u36_u36_721_inst] (q_base_address type_cast_720_wire_constant) (lock_address_pointer_722)   $flowthrough 
    $delay ADD_u36_u36_721_inst 0
    // 	$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b1  ) ( ~ ($bitcast ($uint<8>) _b0  ) ) lock_address_pointer ($bitcast ($uint<64>) _b0  ) ) (msg_size_plus_lock ) 
    //  file nic.linked.opt.aa, line 244
    $call [call_stmt_734_call] $module accessMemory(type_cast_724_wire_constant type_cast_726_wire_constant NOT_u8_u8_729_wire_constant lock_address_pointer_722 type_cast_732_wire_constant) (msg_size_plus_lock_734)  
    $delay call_stmt_734_call 3
    $buffering  $in call_stmt_734_call type_cast_724_wire_constant 1
    $buffering  $in call_stmt_734_call type_cast_726_wire_constant 1
    $buffering  $in call_stmt_734_call NOT_u8_u8_729_wire_constant 1
    $buffering  $in call_stmt_734_call lock_address_pointer_722 1
    $buffering  $in call_stmt_734_call type_cast_732_wire_constant 1
    $buffering  $out call_stmt_734_call msg_size_plus_lock_734 1
    // 	$volatile lock_addr_32 := ( $slice msg_size_plus_lock 31 0 )  $buffering 1
    //  file nic.linked.opt.aa, line 245
    // ( $slice msg_size_plus_lock 31 0 ) 
    [:] [slice_737_inst] (msg_size_plus_lock_734 31 0) (lock_addr_32_738)  $flowthrough
    $delay slice_737_inst 0
    // 	$volatile sel := ( $slice lock_addr_32 2 0 )  $buffering 1
    //  file nic.linked.opt.aa, line 246
    // ( $slice lock_addr_32 2 0 ) 
    [:] [slice_741_inst] (lock_addr_32_738 2 0) (sel_742)  $flowthrough
    $delay slice_741_inst 0
    // 	$volatile s0 := (sel == 0 ) $buffering 1
    //  file nic.linked.opt.aa, line 247
    // (sel == 0 )
    ==[EQ_u3_u1_746_inst] (sel_742 konst_745_wire_constant) (s0_747)   $flowthrough 
    $delay EQ_u3_u1_746_inst 0
    // 	$volatile s1 := (sel == 1 ) $buffering 1
    //  file nic.linked.opt.aa, line 248
    // (sel == 1 )
    ==[EQ_u3_u1_751_inst] (sel_742 konst_750_wire_constant) (s1_752)   $flowthrough 
    $delay EQ_u3_u1_751_inst 0
    // 	$volatile s2 := (sel == 2 ) $buffering 1
    //  file nic.linked.opt.aa, line 249
    // (sel == 2 )
    ==[EQ_u3_u1_756_inst] (sel_742 konst_755_wire_constant) (s2_757)   $flowthrough 
    $delay EQ_u3_u1_756_inst 0
    // 	$volatile s3 := (sel == 3 ) $buffering 1
    //  file nic.linked.opt.aa, line 250
    // (sel == 3 )
    ==[EQ_u3_u1_761_inst] (sel_742 konst_760_wire_constant) (s3_762)   $flowthrough 
    $delay EQ_u3_u1_761_inst 0
    // 	$volatile s4 := (sel == 4 ) $buffering 1
    //  file nic.linked.opt.aa, line 251
    // (sel == 4 )
    ==[EQ_u3_u1_766_inst] (sel_742 konst_765_wire_constant) (s4_767)   $flowthrough 
    $delay EQ_u3_u1_766_inst 0
    // 	$volatile s5 := (sel == 5 ) $buffering 1
    //  file nic.linked.opt.aa, line 252
    // (sel == 5 )
    ==[EQ_u3_u1_771_inst] (sel_742 konst_770_wire_constant) (s5_772)   $flowthrough 
    $delay EQ_u3_u1_771_inst 0
    // 	$volatile s6 := (sel == 6 ) $buffering 1
    //  file nic.linked.opt.aa, line 253
    // (sel == 6 )
    ==[EQ_u3_u1_776_inst] (sel_742 konst_775_wire_constant) (s6_777)   $flowthrough 
    $delay EQ_u3_u1_776_inst 0
    // 	$volatile s7 := (sel == 7 ) $buffering 1
    //  file nic.linked.opt.aa, line 254
    // (sel == 7 )
    ==[EQ_u3_u1_781_inst] (sel_742 konst_780_wire_constant) (s7_782)   $flowthrough 
    $delay EQ_u3_u1_781_inst 0
    // 	$volatile new_bmask := (((( $mux s0 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) )  && ( $mux s1 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) ) && (( $mux s2 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) )  && ( $mux s3 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) )) && ((( $mux s4 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) )  && ( $mux s5 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) ) && (( $mux s6 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) )  && ( $mux s7 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) ))) $buffering 1
    //  file nic.linked.opt.aa, line 255
    // ( $mux s0 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) 
    ? [MUX_789_inst] (s0_747 type_cast_786_wire_constant type_cast_788_wire_constant) (MUX_789_wire)  $flowthrough
    // ( $mux s1 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) 
    ? [MUX_795_inst] (s1_752 type_cast_792_wire_constant type_cast_794_wire_constant) (MUX_795_wire)  $flowthrough
    // (( $mux s0 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) )  && ( $mux s1 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) )
    &&[CONCAT_u1_u2_796_inst] (MUX_789_wire MUX_795_wire) (CONCAT_u1_u2_796_wire)   $flowthrough 
    $delay CONCAT_u1_u2_796_inst 0
    // ( $mux s2 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) 
    ? [MUX_802_inst] (s2_757 type_cast_799_wire_constant type_cast_801_wire_constant) (MUX_802_wire)  $flowthrough
    // ( $mux s3 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) 
    ? [MUX_808_inst] (s3_762 type_cast_805_wire_constant type_cast_807_wire_constant) (MUX_808_wire)  $flowthrough
    // (( $mux s2 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) )  && ( $mux s3 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) )
    &&[CONCAT_u1_u2_809_inst] (MUX_802_wire MUX_808_wire) (CONCAT_u1_u2_809_wire)   $flowthrough 
    $delay CONCAT_u1_u2_809_inst 0
    // ((( $mux s0 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) )  && ( $mux s1 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) ) && (( $mux s2 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) )  && ( $mux s3 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) ))
    &&[CONCAT_u2_u4_810_inst] (CONCAT_u1_u2_796_wire CONCAT_u1_u2_809_wire) (CONCAT_u2_u4_810_wire)   $flowthrough 
    $delay CONCAT_u2_u4_810_inst 0
    // ( $mux s4 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) 
    ? [MUX_816_inst] (s4_767 type_cast_813_wire_constant type_cast_815_wire_constant) (MUX_816_wire)  $flowthrough
    // ( $mux s5 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) 
    ? [MUX_822_inst] (s5_772 type_cast_819_wire_constant type_cast_821_wire_constant) (MUX_822_wire)  $flowthrough
    // (( $mux s4 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) )  && ( $mux s5 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) )
    &&[CONCAT_u1_u2_823_inst] (MUX_816_wire MUX_822_wire) (CONCAT_u1_u2_823_wire)   $flowthrough 
    $delay CONCAT_u1_u2_823_inst 0
    // ( $mux s6 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) 
    ? [MUX_829_inst] (s6_777 type_cast_826_wire_constant type_cast_828_wire_constant) (MUX_829_wire)  $flowthrough
    // ( $mux s7 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) 
    ? [MUX_835_inst] (s7_782 type_cast_832_wire_constant type_cast_834_wire_constant) (MUX_835_wire)  $flowthrough
    // (( $mux s6 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) )  && ( $mux s7 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) )
    &&[CONCAT_u1_u2_836_inst] (MUX_829_wire MUX_835_wire) (CONCAT_u1_u2_836_wire)   $flowthrough 
    $delay CONCAT_u1_u2_836_inst 0
    // ((( $mux s4 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) )  && ( $mux s5 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) ) && (( $mux s6 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) )  && ( $mux s7 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) ))
    &&[CONCAT_u2_u4_837_inst] (CONCAT_u1_u2_823_wire CONCAT_u1_u2_836_wire) (CONCAT_u2_u4_837_wire)   $flowthrough 
    $delay CONCAT_u2_u4_837_inst 0
    // (((( $mux s0 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) )  && ( $mux s1 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) ) && (( $mux s2 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) )  && ( $mux s3 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) )) && ((( $mux s4 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) )  && ( $mux s5 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) ) && (( $mux s6 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) )  && ( $mux s7 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) )))
    &&[CONCAT_u4_u8_838_inst] (CONCAT_u2_u4_810_wire CONCAT_u2_u4_837_wire) (new_bmask_839)   $flowthrough 
    $delay CONCAT_u4_u8_838_inst 0
    // 	$call accessMemory (($bitcast ($uint<1>) _b1  ) ($bitcast ($uint<1>) _b0  ) new_bmask (($bitcast ($uint<4>) _b0  ) && lock_addr_32) ($bitcast ($uint<64>) _b0  ) ) (ignore ) 
    //  file nic.linked.opt.aa, line 256
    // (($bitcast ($uint<4>) _b0  ) && lock_addr_32)
    &&[CONCAT_u4_u36_848_inst] (type_cast_846_wire_constant lock_addr_32_738) (CONCAT_u4_u36_848_wire)   $flowthrough 
    $delay CONCAT_u4_u36_848_inst 0
    $call [call_stmt_852_call] $module accessMemory(type_cast_841_wire_constant type_cast_843_wire_constant new_bmask_839 CONCAT_u4_u36_848_wire type_cast_850_wire_constant) (ignore_852)  
    $delay call_stmt_852_call 3
    $buffering  $in call_stmt_852_call type_cast_841_wire_constant 1
    $buffering  $in call_stmt_852_call type_cast_843_wire_constant 1
    $buffering  $in call_stmt_852_call new_bmask_839 1
    $buffering  $in call_stmt_852_call CONCAT_u4_u36_848_wire 1
    $buffering  $in call_stmt_852_call type_cast_850_wire_constant 1
    $buffering  $out call_stmt_852_call ignore_852 1
  }
  // end data-path
  // 	$volatile lock_address_pointer := (q_base_address + ($bitcast ($uint<36>) 20  )) $buffering 1
  //  file nic.linked.opt.aa, line 243
  // (q_base_address + ($bitcast ($uint<36>) 20  ))
  // q_base_address
  // 	$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b1  ) ( ~ ($bitcast ($uint<8>) _b0  ) ) lock_address_pointer ($bitcast ($uint<64>) _b0  ) ) (msg_size_plus_lock ) 
  //  file nic.linked.opt.aa, line 244
  // lock_address_pointer
  call_stmt_734_call <=> (assign_stmt_722_to_call_stmt_852/call_stmt_734_Sample/crr assign_stmt_722_to_call_stmt_852/call_stmt_734_Update/ccr) (assign_stmt_722_to_call_stmt_852/call_stmt_734_Sample/cra assign_stmt_722_to_call_stmt_852/call_stmt_734_Update/cca)
  // 	$volatile lock_addr_32 := ( $slice msg_size_plus_lock 31 0 )  $buffering 1
  //  file nic.linked.opt.aa, line 245
  // msg_size_plus_lock
  // 	$volatile sel := ( $slice lock_addr_32 2 0 )  $buffering 1
  //  file nic.linked.opt.aa, line 246
  // lock_addr_32
  // 	$volatile s0 := (sel == 0 ) $buffering 1
  //  file nic.linked.opt.aa, line 247
  // (sel == 0 )
  // sel
  // 	$volatile s1 := (sel == 1 ) $buffering 1
  //  file nic.linked.opt.aa, line 248
  // (sel == 1 )
  // sel
  // 	$volatile s2 := (sel == 2 ) $buffering 1
  //  file nic.linked.opt.aa, line 249
  // (sel == 2 )
  // sel
  // 	$volatile s3 := (sel == 3 ) $buffering 1
  //  file nic.linked.opt.aa, line 250
  // (sel == 3 )
  // sel
  // 	$volatile s4 := (sel == 4 ) $buffering 1
  //  file nic.linked.opt.aa, line 251
  // (sel == 4 )
  // sel
  // 	$volatile s5 := (sel == 5 ) $buffering 1
  //  file nic.linked.opt.aa, line 252
  // (sel == 5 )
  // sel
  // 	$volatile s6 := (sel == 6 ) $buffering 1
  //  file nic.linked.opt.aa, line 253
  // (sel == 6 )
  // sel
  // 	$volatile s7 := (sel == 7 ) $buffering 1
  //  file nic.linked.opt.aa, line 254
  // (sel == 7 )
  // sel
  // 	$volatile new_bmask := (((( $mux s0 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) )  && ( $mux s1 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) ) && (( $mux s2 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) )  && ( $mux s3 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) )) && ((( $mux s4 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) )  && ( $mux s5 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) ) && (( $mux s6 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) )  && ( $mux s7 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) ))) $buffering 1
  //  file nic.linked.opt.aa, line 255
  // (((( $mux s0 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) )  && ( $mux s1 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) ) && (( $mux s2 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) )  && ( $mux s3 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) )) && ((( $mux s4 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) )  && ( $mux s5 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) ) && (( $mux s6 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) )  && ( $mux s7 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) )))
  // ((( $mux s0 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) )  && ( $mux s1 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) ) && (( $mux s2 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) )  && ( $mux s3 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) ))
  // (( $mux s0 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) )  && ( $mux s1 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) )
  // s0
  // ( $mux s0 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) 
  // s1
  // ( $mux s1 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) 
  // (( $mux s2 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) )  && ( $mux s3 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) )
  // s2
  // ( $mux s2 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) 
  // s3
  // ( $mux s3 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) 
  // ((( $mux s4 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) )  && ( $mux s5 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) ) && (( $mux s6 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) )  && ( $mux s7 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) ))
  // (( $mux s4 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) )  && ( $mux s5 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) )
  // s4
  // ( $mux s4 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) 
  // s5
  // ( $mux s5 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) 
  // (( $mux s6 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) )  && ( $mux s7 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) )
  // s6
  // ( $mux s6 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) 
  // s7
  // ( $mux s7 ($bitcast ($uint<1>) _b1  )  ($bitcast ($uint<1>) _b0  ) ) 
  // 	$call accessMemory (($bitcast ($uint<1>) _b1  ) ($bitcast ($uint<1>) _b0  ) new_bmask (($bitcast ($uint<4>) _b0  ) && lock_addr_32) ($bitcast ($uint<64>) _b0  ) ) (ignore ) 
  //  file nic.linked.opt.aa, line 256
  // new_bmask
  // (($bitcast ($uint<4>) _b0  ) && lock_addr_32)
  // lock_addr_32
  call_stmt_852_call <=> (assign_stmt_722_to_call_stmt_852/call_stmt_852_Sample/crr assign_stmt_722_to_call_stmt_852/call_stmt_852_Update/ccr) (assign_stmt_722_to_call_stmt_852/call_stmt_852_Sample/cra assign_stmt_722_to_call_stmt_852/call_stmt_852_Update/cca)
}
$module [popFromQueue] 
{
  $in lock:$int<1>
  // can point into 
  q_base_address:$int<36>
  // can point into 
  $out q_r_data:$int<32>
  // can point into 
  status:$int<1>
  // can point into 
  // pipe-declarations for block %popFromQueue
  //  file nic.linked.opt.aa, line 258
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    ::[call_stmt_862] 
    {
      // start: 	$guard (lock) $call acquireLock (q_base_address ) (m_ok ) 
      //  file nic.linked.opt.aa, line 263
      $T[call_stmt_862_sample_start_] 
      $T[call_stmt_862_sample_completed_] 
      $T[call_stmt_862_update_start_] 
      $T[call_stmt_862_update_completed_] 
      // Guard expression
      // lock
      // start: Forward dependencies from lock to transition call_stmt_862_sample_start_
      // done: Forward dependencies from lock to transition call_stmt_862_sample_start_
      // Call input argument 0
      // q_base_address
      // start: Forward dependencies from q_base_address to transition call_stmt_862_sample_start_
      // done: Forward dependencies from q_base_address to transition call_stmt_862_sample_start_
      ;;[call_stmt_862_Sample] 
      {
        $T [crr] $T [cra] 
      }
      ;;[call_stmt_862_Update] 
      {
        $T [ccr] $T [cca] 
      }
      call_stmt_862_sample_start_ &-> (call_stmt_862_Sample)
      call_stmt_862_sample_completed_ <-& (call_stmt_862_Sample)
      call_stmt_862_sample_completed_ &-> ($null)
      call_stmt_862_update_start_ &-> (call_stmt_862_Update)
      call_stmt_862_update_completed_ <-& (call_stmt_862_Update)
      // Call output argument 0
      // (as target) m_ok
      // start: WAR dependencies for m_ok
      // done: WAR dependencies for m_ok
      // end: 	$guard (lock) $call acquireLock (q_base_address ) (m_ok ) 
      // load-store dependencies..
      // pipe read/write dependencies for pipe MEMORY_TO_NIC_RESPONSE
      // read-dependencies for pipe MEMORY_TO_NIC_RESPONSE
      // write-dependencies for pipe MEMORY_TO_NIC_RESPONSE
      // signal write dependencies for MEMORY_TO_NIC_RESPONSE
      // pipe read/write dependencies for pipe NIC_TO_MEMORY_REQUEST
      // read-dependencies for pipe NIC_TO_MEMORY_REQUEST
      // write-dependencies for pipe NIC_TO_MEMORY_REQUEST
      // signal write dependencies for NIC_TO_MEMORY_REQUEST
    }
    ::[call_stmt_867_to_call_stmt_900] 
    {
      // start: 	$call getQueuePointers (q_base_address ) (write_index read_index ) 
      //  file nic.linked.opt.aa, line 265
      $T[call_stmt_867_sample_start_] 
      $T[call_stmt_867_sample_completed_] 
      $T[call_stmt_867_update_start_] 
      $T[call_stmt_867_update_completed_] 
      // Call input argument 0
      // q_base_address
      // start: Forward dependencies from q_base_address to transition call_stmt_867_sample_start_
      // done: Forward dependencies from q_base_address to transition call_stmt_867_sample_start_
      ;;[call_stmt_867_Sample] 
      {
        $T [crr] $T [cra] 
      }
      ;;[call_stmt_867_Update] 
      {
        $T [ccr] $T [cca] 
      }
      call_stmt_867_sample_start_ &-> (call_stmt_867_Sample)
      call_stmt_867_sample_completed_ <-& (call_stmt_867_Sample)
      call_stmt_867_sample_completed_ &-> ($null)
      call_stmt_867_update_start_ &-> (call_stmt_867_Update)
      call_stmt_867_update_completed_ <-& (call_stmt_867_Update)
      // Call output argument 0
      // (as target) write_index
      // Call output argument 1
      // (as target) read_index
      // start: WAR dependencies for write_index
      // done: WAR dependencies for write_index
      // start: WAR dependencies for read_index
      // done: WAR dependencies for read_index
      // end: 	$call getQueuePointers (q_base_address ) (write_index read_index ) 
      // start: WAR dependencies for q_empty
      // done: WAR dependencies for q_empty
      // start:  	$volatile q_empty := (write_index == read_index) $buffering 1
      //  file nic.linked.opt.aa, line 266
      // volatile! 
      // Source expression
      // (write_index == read_index)
      // write_index
      // read_index
      // Target expression
      // (as target) q_empty
      // start: WAR dependencies for q_empty
      // done: WAR dependencies for q_empty
      // end:  	$volatile q_empty := (write_index == read_index) $buffering 1
      // start: 	$call getQueueLength (q_base_address ) (Queue_Length ) 
      //  file nic.linked.opt.aa, line 267
      $T[call_stmt_875_sample_start_] 
      $T[call_stmt_875_sample_completed_] 
      $T[call_stmt_875_update_start_] 
      $T[call_stmt_875_update_completed_] 
      // Call input argument 0
      // q_base_address
      // start: Forward dependencies from q_base_address to transition call_stmt_875_sample_start_
      // done: Forward dependencies from q_base_address to transition call_stmt_875_sample_start_
      ;;[call_stmt_875_Sample] 
      {
        $T [crr] $T [cra] 
      }
      ;;[call_stmt_875_Update] 
      {
        $T [ccr] $T [cca] 
      }
      call_stmt_875_sample_start_ &-> (call_stmt_875_Sample)
      call_stmt_875_sample_completed_ <-& (call_stmt_875_Sample)
      call_stmt_875_sample_completed_ &-> ($null)
      call_stmt_875_update_start_ &-> (call_stmt_875_Update)
      call_stmt_875_update_completed_ <-& (call_stmt_875_Update)
      // Call output argument 0
      // (as target) Queue_Length
      // start: WAR dependencies for Queue_Length
      // done: WAR dependencies for Queue_Length
      // end: 	$call getQueueLength (q_base_address ) (Queue_Length ) 
      // start: WAR dependencies for round_off
      // done: WAR dependencies for round_off
      // start:  	$volatile round_off := (read_index == (Queue_Length - 1 )) $buffering 1
      //  file nic.linked.opt.aa, line 268
      // volatile! 
      // Source expression
      // (read_index == (Queue_Length - 1 ))
      // read_index
      // (Queue_Length - 1 )
      // Queue_Length
      // Target expression
      // (as target) round_off
      // start: WAR dependencies for round_off
      // done: WAR dependencies for round_off
      // end:  	$volatile round_off := (read_index == (Queue_Length - 1 )) $buffering 1
      // start: WAR dependencies for next_ri
      // done: WAR dependencies for next_ri
      // start:  	$volatile next_ri := ( $mux round_off 0   (read_index + 1 ) )  $buffering 1
      //  file nic.linked.opt.aa, line 269
      // volatile! 
      // Source expression
      // ( $mux round_off 0   (read_index + 1 ) ) 
      // round_off
      // (read_index + 1 )
      // read_index
      // Target expression
      // (as target) next_ri
      // start: WAR dependencies for next_ri
      // done: WAR dependencies for next_ri
      // end:  	$volatile next_ri := ( $mux round_off 0   (read_index + 1 ) )  $buffering 1
      // start: 	$guard (~q_empty) $call getQueueElement (q_base_address read_index ) (q_r_data ) 
      //  file nic.linked.opt.aa, line 270
      $T[call_stmt_895_sample_start_] 
      $T[call_stmt_895_sample_completed_] 
      $T[call_stmt_895_update_start_] 
      $T[call_stmt_895_update_completed_] 
      // Guard expression
      // q_empty
      // start: Forward dependencies from q_empty to transition call_stmt_895_sample_start_
      call_stmt_895_sample_start_ <-& (call_stmt_867_update_completed_)
      // done: Forward dependencies from q_empty to transition call_stmt_895_sample_start_
      // Call input argument 0
      // q_base_address
      // Call input argument 1
      // read_index
      // start: Forward dependencies from q_base_address to transition call_stmt_895_sample_start_
      // done: Forward dependencies from q_base_address to transition call_stmt_895_sample_start_
      // start: Forward dependencies from read_index to transition call_stmt_895_sample_start_
      call_stmt_895_sample_start_ <-& (call_stmt_867_update_completed_)
      // done: Forward dependencies from read_index to transition call_stmt_895_sample_start_
      ;;[call_stmt_895_Sample] 
      {
        $T [crr] $T [cra] 
      }
      ;;[call_stmt_895_Update] 
      {
        $T [ccr] $T [cca] 
      }
      call_stmt_895_sample_start_ &-> (call_stmt_895_Sample)
      call_stmt_895_sample_completed_ <-& (call_stmt_895_Sample)
      call_stmt_895_sample_completed_ &-> ($null)
      call_stmt_895_update_start_ &-> (call_stmt_895_Update)
      call_stmt_895_update_completed_ <-& (call_stmt_895_Update)
      // Call output argument 0
      // (as target) q_r_data
      // q_r_data
      // write to interface object
      // q_r_data
      // write to interface object
      // start: WAR dependencies for q_r_data
      // done: WAR dependencies for q_r_data
      // end: 	$guard (~q_empty) $call getQueueElement (q_base_address read_index ) (q_r_data ) 
      // start: 	$guard (~q_empty) $call setQueuePointers (q_base_address write_index next_ri ) () 
      //  file nic.linked.opt.aa, line 271
      $T[call_stmt_900_sample_start_] 
      $T[call_stmt_900_sample_completed_] 
      $T[call_stmt_900_update_start_] 
      $T[call_stmt_900_update_completed_] 
      // Guard expression
      // q_empty
      // start: Forward dependencies from q_empty to transition call_stmt_900_sample_start_
      call_stmt_900_sample_start_ <-& (call_stmt_867_update_completed_)
      // done: Forward dependencies from q_empty to transition call_stmt_900_sample_start_
      // Call input argument 0
      // q_base_address
      // Call input argument 1
      // write_index
      // Call input argument 2
      // next_ri
      // start: Forward dependencies from q_base_address to transition call_stmt_900_sample_start_
      // done: Forward dependencies from q_base_address to transition call_stmt_900_sample_start_
      // start: Forward dependencies from write_index to transition call_stmt_900_sample_start_
      call_stmt_900_sample_start_ <-& (call_stmt_867_update_completed_)
      // done: Forward dependencies from write_index to transition call_stmt_900_sample_start_
      // start: Forward dependencies from next_ri to transition call_stmt_900_sample_start_
      call_stmt_900_sample_start_ <-& (call_stmt_867_update_completed_)
      call_stmt_900_sample_start_ <-& (call_stmt_875_update_completed_)
      // done: Forward dependencies from next_ri to transition call_stmt_900_sample_start_
      ;;[call_stmt_900_Sample] 
      {
        $T [crr] $T [cra] 
      }
      ;;[call_stmt_900_Update] 
      {
        $T [ccr] $T [cca] 
      }
      call_stmt_900_sample_start_ &-> (call_stmt_900_Sample)
      call_stmt_900_sample_completed_ <-& (call_stmt_900_Sample)
      call_stmt_900_sample_completed_ &-> ($null)
      call_stmt_900_update_start_ &-> (call_stmt_900_Update)
      call_stmt_900_update_completed_ <-& (call_stmt_900_Update)
      // end: 	$guard (~q_empty) $call setQueuePointers (q_base_address write_index next_ri ) () 
      // load-store dependencies..
      // pipe read/write dependencies for pipe MEMORY_TO_NIC_RESPONSE
      // read-dependencies for pipe MEMORY_TO_NIC_RESPONSE
      call_stmt_875_sample_start_ <-& (call_stmt_867_update_completed_)
      call_stmt_895_sample_start_ <-& (call_stmt_875_update_completed_)
      call_stmt_900_sample_start_ <-& (call_stmt_895_update_completed_)
      // write-dependencies for pipe MEMORY_TO_NIC_RESPONSE
      // signal write dependencies for MEMORY_TO_NIC_RESPONSE
      // pipe read/write dependencies for pipe NIC_TO_MEMORY_REQUEST
      // read-dependencies for pipe NIC_TO_MEMORY_REQUEST
      // write-dependencies for pipe NIC_TO_MEMORY_REQUEST
      call_stmt_875_sample_start_ <-& (call_stmt_867_update_completed_)
      call_stmt_895_sample_start_ <-& (call_stmt_875_update_completed_)
      call_stmt_900_sample_start_ <-& (call_stmt_895_update_completed_)
      // signal write dependencies for NIC_TO_MEMORY_REQUEST
    }
    ::[call_stmt_911_to_assign_stmt_914] 
    {
      // start: 	$guard (lock) $call releaseLock (q_base_address ) () 
      //  file nic.linked.opt.aa, line 274
      $T[call_stmt_911_sample_start_] 
      $T[call_stmt_911_sample_completed_] 
      $T[call_stmt_911_update_start_] 
      $T[call_stmt_911_update_completed_] 
      // Guard expression
      // lock
      // start: Forward dependencies from lock to transition call_stmt_911_sample_start_
      // done: Forward dependencies from lock to transition call_stmt_911_sample_start_
      // Call input argument 0
      // q_base_address
      // start: Forward dependencies from q_base_address to transition call_stmt_911_sample_start_
      // done: Forward dependencies from q_base_address to transition call_stmt_911_sample_start_
      ;;[call_stmt_911_Sample] 
      {
        $T [crr] $T [cra] 
      }
      ;;[call_stmt_911_Update] 
      {
        $T [ccr] $T [cca] 
      }
      call_stmt_911_sample_start_ &-> (call_stmt_911_Sample)
      call_stmt_911_sample_completed_ <-& (call_stmt_911_Sample)
      call_stmt_911_sample_completed_ &-> ($null)
      call_stmt_911_update_start_ &-> (call_stmt_911_Update)
      call_stmt_911_update_completed_ <-& (call_stmt_911_Update)
      // end: 	$guard (lock) $call releaseLock (q_base_address ) () 
      // start:  	status := q_empty $buffering 1// bits of buffering = 1. 
      //  file nic.linked.opt.aa, line 275
      $T[assign_stmt_914_sample_start_] 
      $T[assign_stmt_914_sample_completed_] 
      $T[assign_stmt_914_update_start_] 
      $T[assign_stmt_914_update_completed_] 
      // Source expression
      // q_empty
      // Target expression
      // (as target) status
      // status
      // write to interface object
      // both source and target are implicit: use interlock 
      // Interlock 
      ;;[assign_stmt_914_Sample] 
      {
        $T [req] $T [ack] // interlock-sample.
      }
      ;;[assign_stmt_914_Update] 
      {
        $T [req] $T [ack] // interlock-update.
      }
      assign_stmt_914_sample_start_ &-> (assign_stmt_914_Sample)
      assign_stmt_914_sample_completed_ <-& (assign_stmt_914_Sample)
      assign_stmt_914_sample_completed_ &-> ($null)
      assign_stmt_914_update_start_ &-> (assign_stmt_914_Update)
      assign_stmt_914_update_completed_ <-& (assign_stmt_914_Update)
      // start: Forward dependencies from q_empty to transition assign_stmt_914_sample_start_
      // done: Forward dependencies from q_empty to transition assign_stmt_914_sample_start_
      // start: WAR dependencies for status
      // done: WAR dependencies for status
      // status
      // write to interface object
      // end:  	status := q_empty $buffering 1// bits of buffering = 1. 
      // load-store dependencies..
      // pipe read/write dependencies for pipe MEMORY_TO_NIC_RESPONSE
      // read-dependencies for pipe MEMORY_TO_NIC_RESPONSE
      // write-dependencies for pipe MEMORY_TO_NIC_RESPONSE
      // signal write dependencies for MEMORY_TO_NIC_RESPONSE
      // pipe read/write dependencies for pipe NIC_TO_MEMORY_REQUEST
      // read-dependencies for pipe NIC_TO_MEMORY_REQUEST
      // write-dependencies for pipe NIC_TO_MEMORY_REQUEST
      // signal write dependencies for NIC_TO_MEMORY_REQUEST
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %popFromQueue
    //  file nic.linked.opt.aa, line 258
    // 	$guard (lock) $call acquireLock (q_base_address ) (m_ok ) 
    //  file nic.linked.opt.aa, line 263
    // 	$call getQueuePointers (q_base_address ) (write_index read_index ) 
    //  file nic.linked.opt.aa, line 265
    // 	$call getQueueLength (q_base_address ) (Queue_Length ) 
    //  file nic.linked.opt.aa, line 267
    // 1 
    $constant $W[konst_879_wire_constant] : $int<32> := _b00000000000000000000000000000001// 1
    // ( $mux round_off 0   (read_index + 1 ) ) 
    // 0 
    $constant $W[konst_885_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // 1 
    $constant $W[konst_887_wire_constant] : $int<32> := _b00000000000000000000000000000001// 1
    // 	$guard (~q_empty) $call getQueueElement (q_base_address read_index ) (q_r_data ) 
    //  file nic.linked.opt.aa, line 270
    // 	$guard (~q_empty) $call setQueuePointers (q_base_address write_index next_ri ) () 
    //  file nic.linked.opt.aa, line 271
    // 	$guard (lock) $call releaseLock (q_base_address ) () 
    //  file nic.linked.opt.aa, line 274
    // 	$guard (lock) $call acquireLock (q_base_address ) (m_ok ) 
    //  file nic.linked.opt.aa, line 263
    // m_ok
    $W[m_ok_862] : $int<1>
    // 	$call getQueuePointers (q_base_address ) (write_index read_index ) 
    //  file nic.linked.opt.aa, line 265
    // write_index
    $W[write_index_867] : $int<32>
    // read_index
    $W[read_index_867] : $int<32>
    // 	$volatile q_empty := (write_index == read_index) $buffering 1
    //  file nic.linked.opt.aa, line 266
    // q_empty
    $W[q_empty_872] : $int<1>
    // 	$call getQueueLength (q_base_address ) (Queue_Length ) 
    //  file nic.linked.opt.aa, line 267
    // Queue_Length
    $W[Queue_Length_875] : $int<32>
    // 	$volatile round_off := (read_index == (Queue_Length - 1 )) $buffering 1
    //  file nic.linked.opt.aa, line 268
    // (Queue_Length - 1 )
    $intermediate $W[SUB_u32_u32_880_wire] : $int<32>
    // round_off
    $W[round_off_882] : $int<1>
    // 	$volatile next_ri := ( $mux round_off 0   (read_index + 1 ) )  $buffering 1
    //  file nic.linked.opt.aa, line 269
    // (read_index + 1 )
    $intermediate $W[ADD_u32_u32_888_wire] : $int<32>
    // next_ri
    $W[next_ri_890] : $int<32>
    // 	$guard (~q_empty) $call getQueueElement (q_base_address read_index ) (q_r_data ) 
    //  file nic.linked.opt.aa, line 270
    // q_r_data
    // 	$guard (~q_empty) $call setQueuePointers (q_base_address write_index next_ri ) () 
    //  file nic.linked.opt.aa, line 271
    // 	$guard (lock) $call releaseLock (q_base_address ) () 
    //  file nic.linked.opt.aa, line 274
    // 	status := q_empty $buffering 1// bits of buffering = 1. 
    //  file nic.linked.opt.aa, line 275
    // status
    // 	$guard (lock) $call acquireLock (q_base_address ) (m_ok ) 
    //  file nic.linked.opt.aa, line 263
    $call [call_stmt_862_call] $module acquireLock(q_base_address) (m_ok_862) $guard ( lock )  
    $delay call_stmt_862_call 4
    $buffering  $in call_stmt_862_call q_base_address 1
    $buffering  $out call_stmt_862_call m_ok_862 1
    // 	$call getQueuePointers (q_base_address ) (write_index read_index ) 
    //  file nic.linked.opt.aa, line 265
    $call [call_stmt_867_call] $module getQueuePointers(q_base_address) (write_index_867 read_index_867)  
    $delay call_stmt_867_call 4
    $buffering  $in call_stmt_867_call q_base_address 1
    $buffering  $out call_stmt_867_call write_index_867 1
    $buffering  $out call_stmt_867_call read_index_867 1
    // 	$volatile q_empty := (write_index == read_index) $buffering 1
    //  file nic.linked.opt.aa, line 266
    // (write_index == read_index)
    ==[EQ_u32_u1_871_inst] (write_index_867 read_index_867) (q_empty_872)   $flowthrough 
    $delay EQ_u32_u1_871_inst 0
    // 	$call getQueueLength (q_base_address ) (Queue_Length ) 
    //  file nic.linked.opt.aa, line 267
    $call [call_stmt_875_call] $module getQueueLength(q_base_address) (Queue_Length_875)  
    $delay call_stmt_875_call 4
    $buffering  $in call_stmt_875_call q_base_address 1
    $buffering  $out call_stmt_875_call Queue_Length_875 1
    // 	$volatile round_off := (read_index == (Queue_Length - 1 )) $buffering 1
    //  file nic.linked.opt.aa, line 268
    // (Queue_Length - 1 )
    -[SUB_u32_u32_880_inst] (Queue_Length_875 konst_879_wire_constant) (SUB_u32_u32_880_wire)   $flowthrough 
    $delay SUB_u32_u32_880_inst 0
    // (read_index == (Queue_Length - 1 ))
    ==[EQ_u32_u1_881_inst] (read_index_867 SUB_u32_u32_880_wire) (round_off_882)   $flowthrough 
    $delay EQ_u32_u1_881_inst 0
    // 	$volatile next_ri := ( $mux round_off 0   (read_index + 1 ) )  $buffering 1
    //  file nic.linked.opt.aa, line 269
    // (read_index + 1 )
    +[ADD_u32_u32_888_inst] (read_index_867 konst_887_wire_constant) (ADD_u32_u32_888_wire)   $flowthrough 
    $delay ADD_u32_u32_888_inst 0
    // ( $mux round_off 0   (read_index + 1 ) ) 
    ? [MUX_889_inst] (round_off_882 konst_885_wire_constant ADD_u32_u32_888_wire) (next_ri_890)  $flowthrough
    // 	$guard (~q_empty) $call getQueueElement (q_base_address read_index ) (q_r_data ) 
    //  file nic.linked.opt.aa, line 270
    $call [call_stmt_895_call] $module getQueueElement(q_base_address read_index_867) (q_r_data) $guard ( ~ q_empty_872 )  
    $delay call_stmt_895_call 4
    $buffering  $in call_stmt_895_call q_base_address 1
    $buffering  $in call_stmt_895_call read_index_867 1
    $buffering  $out call_stmt_895_call q_r_data 1
    // 	$guard (~q_empty) $call setQueuePointers (q_base_address write_index next_ri ) () 
    //  file nic.linked.opt.aa, line 271
    $call [call_stmt_900_call] $module setQueuePointers(q_base_address write_index_867 next_ri_890) () $guard ( ~ q_empty_872 )  
    $delay call_stmt_900_call 4
    $buffering  $in call_stmt_900_call q_base_address 1
    $buffering  $in call_stmt_900_call write_index_867 1
    $buffering  $in call_stmt_900_call next_ri_890 1
    // 	$guard (lock) $call releaseLock (q_base_address ) () 
    //  file nic.linked.opt.aa, line 274
    $call [call_stmt_911_call] $module releaseLock(q_base_address) () $guard ( lock )  
    $delay call_stmt_911_call 4
    $buffering  $in call_stmt_911_call q_base_address 1
    // 	status := q_empty $buffering 1// bits of buffering = 1. 
    //  file nic.linked.opt.aa, line 275
    # := [W_status_912_inst] (q_empty_872) (status)    
  }
  // end data-path
  // 	$guard (lock) $call acquireLock (q_base_address ) (m_ok ) 
  //  file nic.linked.opt.aa, line 263
  // q_base_address
  call_stmt_862_call <=> (call_stmt_862/call_stmt_862_Sample/crr call_stmt_862/call_stmt_862_Update/ccr) (call_stmt_862/call_stmt_862_Sample/cra call_stmt_862/call_stmt_862_Update/cca)
  // 	$call getQueuePointers (q_base_address ) (write_index read_index ) 
  //  file nic.linked.opt.aa, line 265
  // q_base_address
  call_stmt_867_call <=> (call_stmt_867_to_call_stmt_900/call_stmt_867_Sample/crr call_stmt_867_to_call_stmt_900/call_stmt_867_Update/ccr) (call_stmt_867_to_call_stmt_900/call_stmt_867_Sample/cra call_stmt_867_to_call_stmt_900/call_stmt_867_Update/cca)
  // 	$volatile q_empty := (write_index == read_index) $buffering 1
  //  file nic.linked.opt.aa, line 266
  // (write_index == read_index)
  // write_index
  // read_index
  // 	$call getQueueLength (q_base_address ) (Queue_Length ) 
  //  file nic.linked.opt.aa, line 267
  // q_base_address
  call_stmt_875_call <=> (call_stmt_867_to_call_stmt_900/call_stmt_875_Sample/crr call_stmt_867_to_call_stmt_900/call_stmt_875_Update/ccr) (call_stmt_867_to_call_stmt_900/call_stmt_875_Sample/cra call_stmt_867_to_call_stmt_900/call_stmt_875_Update/cca)
  // 	$volatile round_off := (read_index == (Queue_Length - 1 )) $buffering 1
  //  file nic.linked.opt.aa, line 268
  // (read_index == (Queue_Length - 1 ))
  // read_index
  // (Queue_Length - 1 )
  // Queue_Length
  // 	$volatile next_ri := ( $mux round_off 0   (read_index + 1 ) )  $buffering 1
  //  file nic.linked.opt.aa, line 269
  // round_off
  // (read_index + 1 )
  // read_index
  // ( $mux round_off 0   (read_index + 1 ) ) 
  // 	$guard (~q_empty) $call getQueueElement (q_base_address read_index ) (q_r_data ) 
  //  file nic.linked.opt.aa, line 270
  // q_base_address
  // read_index
  call_stmt_895_call <=> (call_stmt_867_to_call_stmt_900/call_stmt_895_Sample/crr call_stmt_867_to_call_stmt_900/call_stmt_895_Update/ccr) (call_stmt_867_to_call_stmt_900/call_stmt_895_Sample/cra call_stmt_867_to_call_stmt_900/call_stmt_895_Update/cca)
  // 	$guard (~q_empty) $call setQueuePointers (q_base_address write_index next_ri ) () 
  //  file nic.linked.opt.aa, line 271
  // q_base_address
  // write_index
  // next_ri
  call_stmt_900_call <=> (call_stmt_867_to_call_stmt_900/call_stmt_900_Sample/crr call_stmt_867_to_call_stmt_900/call_stmt_900_Update/ccr) (call_stmt_867_to_call_stmt_900/call_stmt_900_Sample/cra call_stmt_867_to_call_stmt_900/call_stmt_900_Update/cca)
  // 	$guard (lock) $call releaseLock (q_base_address ) () 
  //  file nic.linked.opt.aa, line 274
  // q_base_address
  call_stmt_911_call <=> (call_stmt_911_to_assign_stmt_914/call_stmt_911_Sample/crr call_stmt_911_to_assign_stmt_914/call_stmt_911_Update/ccr) (call_stmt_911_to_assign_stmt_914/call_stmt_911_Sample/cra call_stmt_911_to_assign_stmt_914/call_stmt_911_Update/cca)
  // 	status := q_empty $buffering 1// bits of buffering = 1. 
  //  file nic.linked.opt.aa, line 275
  // q_empty
  W_status_912_inst <=> (call_stmt_911_to_assign_stmt_914/assign_stmt_914_Sample/req call_stmt_911_to_assign_stmt_914/assign_stmt_914_Update/req) (call_stmt_911_to_assign_stmt_914/assign_stmt_914_Sample/ack call_stmt_911_to_assign_stmt_914/assign_stmt_914_Update/ack)
}
$module [writeEthernetHeaderToMem] 
{
  $in buf_pointer:$int<36>
  // can point into 
  $out buf_position:$int<36>
  // can point into 
  // pipe-declarations for block %writeEthernetHeaderToMem
  //  file nic.linked.opt.aa, line 277
  // pipe-declarations for block %writeEthernetHeaderToMem%main
  //  file nic.linked.opt.aa, line 282
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    <>[branch_block_stmt_919] // Branch Block  file nic.linked.opt.aa, line 282
    {
      $P [branch_block_stmt_919__entry__]
      branch_block_stmt_919__entry__ <-| ($entry)
      $P [branch_block_stmt_919__exit__]
      branch_block_stmt_919__exit__ |-> ($exit)
      $P [do_while_stmt_920__entry__] 
      $P [do_while_stmt_920__exit__] 
      // do-while-statement  
      //  file nic.linked.opt.aa, line 284
      <o> [do_while_stmt_920]  $depth 15 $buffering 1 
      {
        $P[do_while_stmt_920__entry__] 
        $P[do_while_stmt_920__exit__] 
        $P[loop_back] 
        $P[condition_done] 
        $P[loop_body_done] 
        $pipeline [do_while_stmt_920_loop_body] 
        {
          // Pipelined!
          $T[back_edge_to_loop_body] 
          $T[first_time_through_loop_body] 
          $T[loop_body_start] 
          $T[condition_evaluated] 
          $transitionmerge [entry_tmerge] (back_edge_to_loop_body first_time_through_loop_body) (loop_body_start)
          $entry <-& (loop_body_start)
          $T[aggregated_phi_sample_req] 
          $T[aggregated_phi_sample_ack] 
          $T[aggregated_phi_update_req] 
          $T[aggregated_phi_update_ack] 
          // do not loop-back unless all phi's have used up their triggering tokens.
          condition_evaluated <-& (aggregated_phi_update_ack)
          aggregated_phi_sample_req o<-& (aggregated_phi_update_ack 0)
          // start:  PHI statement phi_stmt_922
          // 			$phi buf_position := 			  (buf_pointer + 8 ) $on   $entry 			  nbuf_position $on   $loopback 
          // type of target is $uint<36>
          $T[phi_stmt_922_sample_start_] 
          $T[phi_stmt_922_sample_completed_] 
          $T[phi_stmt_922_update_start_] 
          $T[phi_stmt_922_update_completed_] 
          $T[phi_stmt_922_sample_start__ps] 
          phi_stmt_922_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_922_sample_completed__ps] 
          phi_stmt_922_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_922_update_start__ps] 
          phi_stmt_922_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_922_update_completed__ps] 
          phi_stmt_922_update_completed_ <-& (phi_stmt_922_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_922_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_922_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_922_update_start_)
          $T[phi_stmt_922_loopback_trigger] 
          phi_stmt_922_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_922_loopback_sample_req] 
          $T[phi_stmt_922_loopback_sample_req_ps] 
          phi_stmt_922_loopback_sample_req <-& (phi_stmt_922_loopback_sample_req_ps)
          phi_stmt_922_loopback_sample_req &-> ($null)
          $T[phi_stmt_922_entry_trigger] 
          phi_stmt_922_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_922_entry_sample_req] 
          $T[phi_stmt_922_entry_sample_req_ps] 
          phi_stmt_922_entry_sample_req <-& (phi_stmt_922_entry_sample_req_ps)
          phi_stmt_922_entry_sample_req &-> ($null)
          phi_stmt_922_update_start_ o<-& (phi_stmt_922_update_completed_ 0)
          phi_stmt_922_sample_start_ o<-& (phi_stmt_922_sample_completed_ 1)
          $T[phi_stmt_922_merged_reqs] 
          $T[phi_stmt_922_phi_mux_ack] 
          $T[phi_stmt_922_phi_mux_ack_ps] 
          phi_stmt_922_phi_mux_ack_ps <-& (phi_stmt_922_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_922_update_completed_)
          $T[ADD_u36_u36_926_sample_start__ps] 
          $T[ADD_u36_u36_926_sample_completed__ps] 
          $T[ADD_u36_u36_926_update_start__ps] 
          $T[ADD_u36_u36_926_update_completed__ps] 
          // source expression in Phi alternative 0
          // (buf_pointer + 8 )
          $T[ADD_u36_u36_926_sample_start_] 
          $T[ADD_u36_u36_926_sample_completed_] 
          $T[ADD_u36_u36_926_update_start_] 
          $T[ADD_u36_u36_926_update_completed_] 
          // buf_pointer
          // start: Forward dependencies from buf_pointer to transition ADD_u36_u36_926_sample_start_
          // done: Forward dependencies from buf_pointer to transition ADD_u36_u36_926_sample_start_
          ;;[ADD_u36_u36_926_Sample] 
          {
            // binary expression 
            $T [rr] $T [ra]  // (split) binary operation 
          }
          ;;[ADD_u36_u36_926_Update] 
          {
            // binary expression 
            $T [cr] $T [ca] // (split) binary operation 
          }
          ADD_u36_u36_926_sample_start_ &-> (ADD_u36_u36_926_Sample)
          ADD_u36_u36_926_sample_completed_ <-& (ADD_u36_u36_926_Sample)
          ADD_u36_u36_926_sample_completed_ &-> ($null)
          ADD_u36_u36_926_update_start_ &-> (ADD_u36_u36_926_Update)
          ADD_u36_u36_926_update_completed_ <-& (ADD_u36_u36_926_Update)
          // RAW reenables for buf_pointer
          // self-release: 
          ADD_u36_u36_926_sample_start_ o<-& (ADD_u36_u36_926_sample_completed_ 1)
          $null &-> (ADD_u36_u36_926_update_start_)
          ADD_u36_u36_926_update_start_ o<-& (ADD_u36_u36_926_update_completed_ 0)
          // Phi start dependency
          ADD_u36_u36_926_sample_start_ <-& (ADD_u36_u36_926_sample_start__ps)
          ADD_u36_u36_926_update_start_ <-& (ADD_u36_u36_926_update_start__ps)
          // RAW reenables for (buf_pointer + 8 )
          // producer  and  consumer are both determined by PHI statements.
          // Phi complete dependency.
          ADD_u36_u36_926_sample_completed__ps <-& (ADD_u36_u36_926_sample_completed_)
          ADD_u36_u36_926_update_completed__ps <-& (ADD_u36_u36_926_update_completed_)
          $T[R_nbuf_position_927_sample_start__ps] 
          $T[R_nbuf_position_927_sample_completed__ps] 
          $T[R_nbuf_position_927_update_start__ps] 
          $T[R_nbuf_position_927_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_nbuf_position_927_sample_start_] 
          $T[R_nbuf_position_927_sample_completed_] 
          $T[R_nbuf_position_927_update_start_] 
          $T[R_nbuf_position_927_update_completed_] 
          ;;[R_nbuf_position_927_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_nbuf_position_927_sample_start_ &-> (R_nbuf_position_927_Sample)
          R_nbuf_position_927_sample_completed_ <-& (R_nbuf_position_927_Sample)
          ;;[R_nbuf_position_927_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_nbuf_position_927_update_start_ &-> (R_nbuf_position_927_Update)
          R_nbuf_position_927_update_completed_ <-& (R_nbuf_position_927_Update)
          // RAW reenables for nbuf_position
          // Phi start dependency for implicit/constant alternative.
          R_nbuf_position_927_sample_start_ <-& (R_nbuf_position_927_sample_start__ps)
          R_nbuf_position_927_update_start_ <-& (R_nbuf_position_927_update_start__ps)
          // Phi complete dependency.
          R_nbuf_position_927_sample_completed__ps <-& (R_nbuf_position_927_sample_completed_)
          R_nbuf_position_927_update_completed__ps <-& (R_nbuf_position_927_update_completed_)
          $phisequencer [ phi_stmt_922_phi_seq] : 
          phi_stmt_922_entry_trigger ADD_u36_u36_926_sample_start__ps ADD_u36_u36_926_sample_completed__ps ADD_u36_u36_926_update_start__ps ADD_u36_u36_926_update_completed__ps phi_stmt_922_loopback_trigger R_nbuf_position_927_sample_start__ps R_nbuf_position_927_sample_completed__ps R_nbuf_position_927_update_start__ps R_nbuf_position_927_update_completed__ps :
          phi_stmt_922_sample_start__ps phi_stmt_922_sample_completed__ps phi_stmt_922_update_start__ps phi_stmt_922_update_completed__ps :
          phi_stmt_922_entry_sample_req_ps phi_stmt_922_loopback_sample_req_ps : 
          phi_stmt_922_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_922
          // start:  PHI statement phi_stmt_928
          // 			$phi I := 			  ($bitcast ($uint<4>) _b0  ) $on   $entry 			  nI $on   $loopback 
          // type of target is $uint<4>
          $T[phi_stmt_928_sample_start_] 
          $T[phi_stmt_928_sample_completed_] 
          $T[phi_stmt_928_update_start_] 
          $T[phi_stmt_928_update_completed_] 
          $T[phi_stmt_928_sample_start__ps] 
          phi_stmt_928_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_928_sample_completed__ps] 
          phi_stmt_928_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_928_update_start__ps] 
          phi_stmt_928_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_928_update_completed__ps] 
          phi_stmt_928_update_completed_ <-& (phi_stmt_928_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_928_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_928_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_928_update_start_)
          $T[phi_stmt_928_loopback_trigger] 
          phi_stmt_928_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_928_loopback_sample_req] 
          $T[phi_stmt_928_loopback_sample_req_ps] 
          phi_stmt_928_loopback_sample_req <-& (phi_stmt_928_loopback_sample_req_ps)
          phi_stmt_928_loopback_sample_req &-> ($null)
          $T[phi_stmt_928_entry_trigger] 
          phi_stmt_928_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_928_entry_sample_req] 
          $T[phi_stmt_928_entry_sample_req_ps] 
          phi_stmt_928_entry_sample_req <-& (phi_stmt_928_entry_sample_req_ps)
          phi_stmt_928_entry_sample_req &-> ($null)
          phi_stmt_928_update_start_ o<-& (phi_stmt_928_update_completed_ 0)
          phi_stmt_928_sample_start_ o<-& (phi_stmt_928_sample_completed_ 1)
          $T[phi_stmt_928_merged_reqs] 
          $T[phi_stmt_928_phi_mux_ack] 
          $T[phi_stmt_928_phi_mux_ack_ps] 
          phi_stmt_928_phi_mux_ack_ps <-& (phi_stmt_928_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_928_update_completed_)
          $T[type_cast_931_sample_start__ps] 
          $T[type_cast_931_sample_completed__ps] 
          $T[type_cast_931_update_start__ps] 
          $T[type_cast_931_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[type_cast_931_sample_start_] 
          $T[type_cast_931_sample_completed_] 
          type_cast_931_sample_completed_ <-& (type_cast_931_sample_start_)
          $T[type_cast_931_update_start_] 
          $T [type_cast_931_update_completed_] $delay 
          type_cast_931_update_completed_ <-& (type_cast_931_update_start_)
          // Phi start dependency for implicit/constant alternative.
          type_cast_931_sample_start_ <-& (type_cast_931_sample_start__ps)
          type_cast_931_update_start_ <-& (type_cast_931_update_start__ps)
          // Phi complete dependency.
          type_cast_931_sample_completed__ps <-& (type_cast_931_sample_completed_)
          type_cast_931_update_completed__ps <-& (type_cast_931_update_completed_)
          $T[R_nI_932_sample_start__ps] 
          $T[R_nI_932_sample_completed__ps] 
          $T[R_nI_932_update_start__ps] 
          $T[R_nI_932_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_nI_932_sample_start_] 
          $T[R_nI_932_sample_completed_] 
          $T[R_nI_932_update_start_] 
          $T[R_nI_932_update_completed_] 
          ;;[R_nI_932_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_nI_932_sample_start_ &-> (R_nI_932_Sample)
          R_nI_932_sample_completed_ <-& (R_nI_932_Sample)
          ;;[R_nI_932_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_nI_932_update_start_ &-> (R_nI_932_Update)
          R_nI_932_update_completed_ <-& (R_nI_932_Update)
          // RAW reenables for nI
          // Phi start dependency for implicit/constant alternative.
          R_nI_932_sample_start_ <-& (R_nI_932_sample_start__ps)
          R_nI_932_update_start_ <-& (R_nI_932_update_start__ps)
          // Phi complete dependency.
          R_nI_932_sample_completed__ps <-& (R_nI_932_sample_completed_)
          R_nI_932_update_completed__ps <-& (R_nI_932_update_completed_)
          $phisequencer [ phi_stmt_928_phi_seq] : 
          phi_stmt_928_entry_trigger type_cast_931_sample_start__ps type_cast_931_sample_completed__ps type_cast_931_update_start__ps type_cast_931_update_completed__ps phi_stmt_928_loopback_trigger R_nI_932_sample_start__ps R_nI_932_sample_completed__ps R_nI_932_update_start__ps R_nI_932_update_completed__ps :
          phi_stmt_928_sample_start__ps phi_stmt_928_sample_completed__ps phi_stmt_928_update_start__ps phi_stmt_928_update_completed__ps :
          phi_stmt_928_entry_sample_req_ps phi_stmt_928_loopback_sample_req_ps : 
          phi_stmt_928_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_928
          // start:  single source PHI statement phi_stmt_933
          // 			$phi ethernet_header := 			  nic_rx_to_header $on   $entry ,   $loopback 
          // type of target is $uint<73>
          $T[phi_stmt_933_sample_start_] 
          $T[phi_stmt_933_sample_completed_] 
          $T[phi_stmt_933_update_start_] 
          $T[phi_stmt_933_update_completed_] 
          aggregated_phi_sample_req <-& (phi_stmt_933_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_933_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_933_update_start_)
          // non-implicit source expression in single-source phi
          // nic_rx_to_header
          $T[RPIPE_nic_rx_to_header_935_sample_start_] 
          $T[RPIPE_nic_rx_to_header_935_sample_completed_] 
          $T[RPIPE_nic_rx_to_header_935_update_start_] 
          $T[RPIPE_nic_rx_to_header_935_update_completed_] 
          ;;[RPIPE_nic_rx_to_header_935_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_nic_rx_to_header_935_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_nic_rx_to_header_935_sample_start_ &-> (RPIPE_nic_rx_to_header_935_Sample)
          RPIPE_nic_rx_to_header_935_sample_completed_ <-& (RPIPE_nic_rx_to_header_935_Sample)
          RPIPE_nic_rx_to_header_935_update_start_ <-& (RPIPE_nic_rx_to_header_935_sample_completed_)
          RPIPE_nic_rx_to_header_935_update_start_ &-> (RPIPE_nic_rx_to_header_935_Update)
          RPIPE_nic_rx_to_header_935_update_completed_ <-& (RPIPE_nic_rx_to_header_935_Update)
          RPIPE_nic_rx_to_header_935_sample_start_ o<-& (RPIPE_nic_rx_to_header_935_update_completed_ 0)
          // RAW reenables for nic_rx_to_header
          // producer  and  consumer are both determined by PHI statements.
          aggregated_phi_sample_req &-> (RPIPE_nic_rx_to_header_935_sample_start_)
          aggregated_phi_sample_ack <-& (RPIPE_nic_rx_to_header_935_sample_completed_)
          aggregated_phi_update_req &-> (RPIPE_nic_rx_to_header_935_update_start_)
          phi_stmt_933_update_completed_ <-& (RPIPE_nic_rx_to_header_935_update_completed_)
          aggregated_phi_update_ack <-& (phi_stmt_933_update_completed_)
          // done: PHI Statement phi_stmt_933
          // start: WAR dependencies for wdata
          // done: WAR dependencies for wdata
          // start:  			$volatile wdata := ( $slice ethernet_header 71 8 )  $buffering 1
          //  file nic.linked.opt.aa, line 294
          // volatile! 
          // Source expression
          // ( $slice ethernet_header 71 8 ) 
          // ethernet_header
          // Target expression
          // (as target) wdata
          // start: WAR dependencies for wdata
          // done: WAR dependencies for wdata
          // end:  			$volatile wdata := ( $slice ethernet_header 71 8 )  $buffering 1
          // start: WAR dependencies for wkeep
          // done: WAR dependencies for wkeep
          // start:  			$volatile wkeep := ( $slice ethernet_header 7 0 )  $buffering 1
          //  file nic.linked.opt.aa, line 295
          // volatile! 
          // Source expression
          // ( $slice ethernet_header 7 0 ) 
          // ethernet_header
          // Target expression
          // (as target) wkeep
          // start: WAR dependencies for wkeep
          // done: WAR dependencies for wkeep
          // end:  			$volatile wkeep := ( $slice ethernet_header 7 0 )  $buffering 1
          // start: 			$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b0  ) wkeep buf_position wdata ) (ignore_return ) 
          //  file nic.linked.opt.aa, line 296
          $T[call_stmt_956_sample_start_] 
          $T[call_stmt_956_sample_completed_] 
          $T[call_stmt_956_update_start_] 
          $T[call_stmt_956_update_completed_] 
          // Call input argument 0
          // Call input argument 1
          // Call input argument 2
          // wkeep
          // Call input argument 3
          // buf_position
          // Call input argument 4
          // wdata
          // start: Forward dependencies from wkeep to transition call_stmt_956_sample_start_
          call_stmt_956_sample_start_ <-& (phi_stmt_933_update_completed_)
          // done: Forward dependencies from wkeep to transition call_stmt_956_sample_start_
          // RAW reenables for wkeep
          phi_stmt_933_update_start_ o<-& (call_stmt_956_sample_completed_ 0)
          // start: Forward dependencies from buf_position to transition call_stmt_956_sample_start_
          // non-constant expression which depends only on signals/constants?
          // done: Forward dependencies from buf_position to transition call_stmt_956_sample_start_
          // RAW reenables for buf_position
          // start: Forward dependencies from wdata to transition call_stmt_956_sample_start_
          call_stmt_956_sample_start_ <-& (phi_stmt_933_update_completed_)
          // done: Forward dependencies from wdata to transition call_stmt_956_sample_start_
          // RAW reenables for wdata
          phi_stmt_933_update_start_ o<-& (call_stmt_956_sample_completed_ 0)
          ;;[call_stmt_956_Sample] 
          {
            $T [crr] $T [cra] 
          }
          ;;[call_stmt_956_Update] 
          {
            $T [ccr] $T [cca] 
          }
          call_stmt_956_sample_start_ &-> (call_stmt_956_Sample)
          call_stmt_956_sample_completed_ <-& (call_stmt_956_Sample)
          call_stmt_956_sample_completed_ &-> ($null)
          call_stmt_956_update_start_ &-> (call_stmt_956_Update)
          call_stmt_956_update_completed_ <-& (call_stmt_956_Update)
          // Call output argument 0
          // (as target) ignore_return
          // self-release: 
          call_stmt_956_sample_start_ o<-& (call_stmt_956_sample_completed_ 1)
          $null &-> (call_stmt_956_update_start_)
          call_stmt_956_update_start_ o<-& (call_stmt_956_update_completed_ 0)
          // start: WAR dependencies for ignore_return
          // done: WAR dependencies for ignore_return
          // end: 			$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b0  ) wkeep buf_position wdata ) (ignore_return ) 
          // start: WAR dependencies for nI
          // WAR dependency: Read: nI before Write: 			$volatile nI := (I + 1 ) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for nI
          // start:  			$volatile nI := (I + 1 ) $buffering 1
          //  file nic.linked.opt.aa, line 297
          // volatile! 
          // Source expression
          // (I + 1 )
          // I
          // Target expression
          // (as target) nI
          // start: WAR dependencies for nI
          // WAR dependency: Read: nI before Write: 			$volatile nI := (I + 1 ) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for nI
          // end:  			$volatile nI := (I + 1 ) $buffering 1
          // start: WAR dependencies for nbuf_position
          // WAR dependency: Read: nbuf_position before Write: 			$volatile nbuf_position := (buf_position + 8 ) $buffering 1
          // done: WAR dependencies for nbuf_position
          // start:  			$volatile nbuf_position := (buf_position + 8 ) $buffering 1
          //  file nic.linked.opt.aa, line 298
          // volatile! 
          // Source expression
          // (buf_position + 8 )
          // buf_position
          // Target expression
          // (as target) nbuf_position
          // start: WAR dependencies for nbuf_position
          // WAR dependency: Read: nbuf_position before Write: 			$volatile nbuf_position := (buf_position + 8 ) $buffering 1
          // done: WAR dependencies for nbuf_position
          // end:  			$volatile nbuf_position := (buf_position + 8 ) $buffering 1
          // (nI <= 1 )
          // nI
          $T [loop_body_delay_to_condition_start] $delay
          loop_body_start &-> (loop_body_delay_to_condition_start)
          loop_body_delay_to_condition_start &-> (condition_evaluated)
          // start: Forward dependencies from (nI <= 1 ) to transition condition_evaluated
          condition_evaluated <-& (phi_stmt_928_update_completed_)
          // done: Forward dependencies from (nI <= 1 ) to transition condition_evaluated
          condition_evaluated &-> ($null)
          // load-store dependencies..
          // pipe read/write dependencies for pipe MEMORY_TO_NIC_RESPONSE
          // read-dependencies for pipe MEMORY_TO_NIC_RESPONSE
          // write-dependencies for pipe MEMORY_TO_NIC_RESPONSE
          // signal write dependencies for MEMORY_TO_NIC_RESPONSE
          // pipe read/write dependencies for pipe NIC_TO_MEMORY_REQUEST
          // read-dependencies for pipe NIC_TO_MEMORY_REQUEST
          // write-dependencies for pipe NIC_TO_MEMORY_REQUEST
          // signal write dependencies for NIC_TO_MEMORY_REQUEST
          // pipe read/write dependencies for pipe nic_rx_to_header
          // read-dependencies for pipe nic_rx_to_header
          // write-dependencies for pipe nic_rx_to_header
          // signal write dependencies for nic_rx_to_header
        }
        ( first_time_through_loop_body  back_edge_to_loop_body) 
        ( condition_evaluated )
        ;; [loop_exit] 
        {
          $T [ack] 
        }
        ;; [loop_taken] 
        {
          $T [ack] 
        }
        do_while_stmt_920__entry__ <-| ($entry)
        loop_body_done <-| ( do_while_stmt_920_loop_body ) 
        condition_done |-> (loop_exit loop_taken)
        do_while_stmt_920__exit__ |-> ($exit)
        $bind condition_done <= do_while_stmt_920_loop_body : condition_evaluated
        $bind do_while_stmt_920__entry__  => do_while_stmt_920_loop_body : first_time_through_loop_body 
        $bind loop_back  => do_while_stmt_920_loop_body : back_edge_to_loop_body 
        $terminate (loop_exit loop_taken loop_body_done) (loop_back do_while_stmt_920__exit__)
      }
      do_while_stmt_920__entry__ |-> (do_while_stmt_920)
      do_while_stmt_920__exit__ <-| (do_while_stmt_920)
      do_while_stmt_920__entry__ <-| (branch_block_stmt_919__entry__)
      do_while_stmt_920__exit__ |-> (branch_block_stmt_919__exit__)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %writeEthernetHeaderToMem%main%
    //  file nic.linked.opt.aa, line 285
    // constant-object-declarations for block %writeEthernetHeaderToMem%main
    //  file nic.linked.opt.aa, line 282
    // constant-object-declarations for block %writeEthernetHeaderToMem
    //  file nic.linked.opt.aa, line 277
    // constant-declarations for block %writeEthernetHeaderToMem%main
    //  file nic.linked.opt.aa, line 282
    // do-while statement  
    //  file nic.linked.opt.aa, line 284
    // 1 
    $constant $W[konst_969_wire_constant] : $int<4> := _b0001// 1
    // constant-declarations for block %writeEthernetHeaderToMem%main%
    //  file nic.linked.opt.aa, line 285
    // constant-declarations for phi:  			$phi buf_position := 			  (buf_pointer + 8 ) $on   $entry 			  nbuf_position $on   $loopback 
    // type of target is $uint<36>
    //  file nic.linked.opt.aa, line 286
    // 8 
    $constant $W[konst_925_wire_constant] : $int<36> := _b000000000000000000000000000000001000// 8
    // constant-declarations for phi:  			$phi I := 			  ($bitcast ($uint<4>) _b0  ) $on   $entry 			  nI $on   $loopback 
    // type of target is $uint<4>
    //  file nic.linked.opt.aa, line 288
    // ($bitcast ($uint<4>) _b0  )
    $constant $W[type_cast_931_wire_constant] : $int<4> := _b0000// 0
    // constant-declarations for phi:  			$phi ethernet_header := 			  nic_rx_to_header $on   $entry ,   $loopback 
    // type of target is $uint<73>
    //  file nic.linked.opt.aa, line 290
    // 			$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b0  ) wkeep buf_position wdata ) (ignore_return ) 
    //  file nic.linked.opt.aa, line 296
    // ($bitcast ($uint<1>) _b0  )
    $constant $W[type_cast_949_wire_constant] : $int<1> := _b0// 0
    // ($bitcast ($uint<1>) _b0  )
    $constant $W[type_cast_951_wire_constant] : $int<1> := _b0// 0
    // 1 
    $constant $W[konst_959_wire_constant] : $int<4> := _b0001// 1
    // 8 
    $constant $W[konst_964_wire_constant] : $int<36> := _b000000000000000000000000000000001000// 8
    // block %writeEthernetHeaderToMem%main
    //  file nic.linked.opt.aa, line 282
    // do-while statement  
    //  file nic.linked.opt.aa, line 284
    // (nI <= 1 )
    $intermediate $W[ULE_u4_u1_970_wire] : $int<1>
    // merge-statement  
    //  file nic.linked.opt.aa, line 285
    // 			$phi buf_position := 			  (buf_pointer + 8 ) $on   $entry 			  nbuf_position $on   $loopback 
    // type of target is $uint<36>
    //  file nic.linked.opt.aa, line 286
    // (buf_pointer + 8 )
    $intermediate $W[ADD_u36_u36_926_wire] : $int<36>
    $W[nbuf_position_966_927_buffered] : $int<36>
    // buf_position
    // 			$phi I := 			  ($bitcast ($uint<4>) _b0  ) $on   $entry 			  nI $on   $loopback 
    // type of target is $uint<4>
    //  file nic.linked.opt.aa, line 288
    $W[nI_961_932_buffered] : $int<4>
    // I
    $W[I_928] : $int<4>
    // 			$phi ethernet_header := 			  nic_rx_to_header $on   $entry ,   $loopback 
    // type of target is $uint<73>
    //  file nic.linked.opt.aa, line 290
    // nic_rx_to_header
    $W[RPIPE_nic_rx_to_header_935_wire] : $int<73>
    // ethernet_header
    $W[ethernet_header_933] : $int<73>
    // 			$volatile wdata := ( $slice ethernet_header 71 8 )  $buffering 1
    //  file nic.linked.opt.aa, line 294
    // wdata
    $W[wdata_943] : $int<64>
    // 			$volatile wkeep := ( $slice ethernet_header 7 0 )  $buffering 1
    //  file nic.linked.opt.aa, line 295
    // wkeep
    $W[wkeep_947] : $int<8>
    // 			$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b0  ) wkeep buf_position wdata ) (ignore_return ) 
    //  file nic.linked.opt.aa, line 296
    // ignore_return
    $W[ignore_return_956] : $int<64>
    // 			$volatile nI := (I + 1 ) $buffering 1
    //  file nic.linked.opt.aa, line 297
    // nI
    $W[nI_961] : $int<4>
    // 			$volatile nbuf_position := (buf_position + 8 ) $buffering 1
    //  file nic.linked.opt.aa, line 298
    // nbuf_position
    $W[nbuf_position_966] : $int<36>
    // datapath-instances for block %writeEthernetHeaderToMem%main
    //  file nic.linked.opt.aa, line 282
    // datapath-instances for do-while  
    //  file nic.linked.opt.aa, line 284
    // (nI <= 1 )
    <=[ULE_u4_u1_970_inst] (nI_961 konst_969_wire_constant) (ULE_u4_u1_970_wire)   $flowthrough 
    $delay ULE_u4_u1_970_inst 0
    ==0? [do_while_stmt_920_branch] (ULE_u4_u1_970_wire)
    $flowthrough
    // data-path instances for merge  
    //  file nic.linked.opt.aa, line 285
    // 			$phi buf_position := 			  (buf_pointer + 8 ) $on   $entry 			  nbuf_position $on   $loopback 
    // type of target is $uint<36>
    //  file nic.linked.opt.aa, line 286
    // (buf_pointer + 8 )
    +[ADD_u36_u36_926_inst] (buf_pointer konst_925_wire_constant) (ADD_u36_u36_926_wire)   
    $buffering  $out ADD_u36_u36_926_inst ADD_u36_u36_926_wire 1
    $delay ADD_u36_u36_926_inst 1
    # := [nbuf_position_966_927_buf] (nbuf_position_966) (nbuf_position_966_927_buffered)    
    $buffering $out nbuf_position_966_927_buf nbuf_position_966_927_buffered  1
    # $phi [phi_stmt_922] (ADD_u36_u36_926_wire nbuf_position_966_927_buffered) ( buf_position ) 
    // $buffering  $out phi_stmt_922 buf_position 2
    // 			$phi I := 			  ($bitcast ($uint<4>) _b0  ) $on   $entry 			  nI $on   $loopback 
    // type of target is $uint<4>
    //  file nic.linked.opt.aa, line 288
    # := [nI_961_932_buf] (nI_961) (nI_961_932_buffered)    
    $buffering $out nI_961_932_buf nI_961_932_buffered  1
    # $phi [phi_stmt_928] (type_cast_931_wire_constant nI_961_932_buffered) ( I_928 ) 
    // $buffering  $out phi_stmt_928 I_928 2
    // 			$phi ethernet_header := 			  nic_rx_to_header $on   $entry ,   $loopback 
    // type of target is $uint<73>
    //  file nic.linked.opt.aa, line 290
    // nic_rx_to_header
    $ioport $in [RPIPE_nic_rx_to_header_935_inst] (nic_rx_to_header) (RPIPE_nic_rx_to_header_935_wire) 
    $buffering $out RPIPE_nic_rx_to_header_935_inst RPIPE_nic_rx_to_header_935_wire 1
    # := [ssrc_phi_stmt_933] (RPIPE_nic_rx_to_header_935_wire) (ethernet_header_933)    $flowthrough 
    // 			$volatile wdata := ( $slice ethernet_header 71 8 )  $buffering 1
    //  file nic.linked.opt.aa, line 294
    // ( $slice ethernet_header 71 8 ) 
    [:] [slice_942_inst] (ethernet_header_933 71 8) (wdata_943)  $flowthrough
    $delay slice_942_inst 0
    // 			$volatile wkeep := ( $slice ethernet_header 7 0 )  $buffering 1
    //  file nic.linked.opt.aa, line 295
    // ( $slice ethernet_header 7 0 ) 
    [:] [slice_946_inst] (ethernet_header_933 7 0) (wkeep_947)  $flowthrough
    $delay slice_946_inst 0
    // 			$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b0  ) wkeep buf_position wdata ) (ignore_return ) 
    //  file nic.linked.opt.aa, line 296
    $call [call_stmt_956_call] $module accessMemory(type_cast_949_wire_constant type_cast_951_wire_constant wkeep_947 buf_position wdata_943) (ignore_return_956)  
    $delay call_stmt_956_call 3
    $buffering  $in call_stmt_956_call type_cast_949_wire_constant 1
    $buffering  $in call_stmt_956_call type_cast_951_wire_constant 1
    $buffering  $in call_stmt_956_call wkeep_947 1
    $buffering  $in call_stmt_956_call buf_position 1
    $buffering  $in call_stmt_956_call wdata_943 1
    $buffering  $out call_stmt_956_call ignore_return_956 1
    // 			$volatile nI := (I + 1 ) $buffering 1
    //  file nic.linked.opt.aa, line 297
    // (I + 1 )
    +[ADD_u4_u4_960_inst] (I_928 konst_959_wire_constant) (nI_961)   $flowthrough 
    $delay ADD_u4_u4_960_inst 0
    // 			$volatile nbuf_position := (buf_position + 8 ) $buffering 1
    //  file nic.linked.opt.aa, line 298
    // (buf_position + 8 )
    +[ADD_u36_u36_965_inst] (buf_position konst_964_wire_constant) (nbuf_position_966)   $flowthrough 
    $delay ADD_u36_u36_965_inst 0
  }
  // end data-path
  // CP-DP links for do-while  do_while_stmt_920
  //  file nic.linked.opt.aa, line 284
  phi_stmt_922 <=> (branch_block_stmt_919/do_while_stmt_920/do_while_stmt_920_loop_body/phi_stmt_922_entry_sample_req branch_block_stmt_919/do_while_stmt_920/do_while_stmt_920_loop_body/phi_stmt_922_loopback_sample_req) (branch_block_stmt_919/do_while_stmt_920/do_while_stmt_920_loop_body/phi_stmt_922_phi_mux_ack)
  // (buf_pointer + 8 )
  // buf_pointer
  ADD_u36_u36_926_inst <=> (branch_block_stmt_919/do_while_stmt_920/do_while_stmt_920_loop_body/ADD_u36_u36_926_Sample/rr branch_block_stmt_919/do_while_stmt_920/do_while_stmt_920_loop_body/ADD_u36_u36_926_Update/cr) (branch_block_stmt_919/do_while_stmt_920/do_while_stmt_920_loop_body/ADD_u36_u36_926_Sample/ra branch_block_stmt_919/do_while_stmt_920/do_while_stmt_920_loop_body/ADD_u36_u36_926_Update/ca)
  nbuf_position_966_927_buf <=> (branch_block_stmt_919/do_while_stmt_920/do_while_stmt_920_loop_body/R_nbuf_position_927_Sample/req branch_block_stmt_919/do_while_stmt_920/do_while_stmt_920_loop_body/R_nbuf_position_927_Update/req) (branch_block_stmt_919/do_while_stmt_920/do_while_stmt_920_loop_body/R_nbuf_position_927_Sample/ack branch_block_stmt_919/do_while_stmt_920/do_while_stmt_920_loop_body/R_nbuf_position_927_Update/ack)
  phi_stmt_928 <=> (branch_block_stmt_919/do_while_stmt_920/do_while_stmt_920_loop_body/phi_stmt_928_entry_sample_req branch_block_stmt_919/do_while_stmt_920/do_while_stmt_920_loop_body/phi_stmt_928_loopback_sample_req) (branch_block_stmt_919/do_while_stmt_920/do_while_stmt_920_loop_body/phi_stmt_928_phi_mux_ack)
  nI_961_932_buf <=> (branch_block_stmt_919/do_while_stmt_920/do_while_stmt_920_loop_body/R_nI_932_Sample/req branch_block_stmt_919/do_while_stmt_920/do_while_stmt_920_loop_body/R_nI_932_Update/req) (branch_block_stmt_919/do_while_stmt_920/do_while_stmt_920_loop_body/R_nI_932_Sample/ack branch_block_stmt_919/do_while_stmt_920/do_while_stmt_920_loop_body/R_nI_932_Update/ack)
  // nic_rx_to_header
  RPIPE_nic_rx_to_header_935_inst <=> (branch_block_stmt_919/do_while_stmt_920/do_while_stmt_920_loop_body/RPIPE_nic_rx_to_header_935_Sample/rr branch_block_stmt_919/do_while_stmt_920/do_while_stmt_920_loop_body/RPIPE_nic_rx_to_header_935_Update/cr) (branch_block_stmt_919/do_while_stmt_920/do_while_stmt_920_loop_body/RPIPE_nic_rx_to_header_935_Sample/ra branch_block_stmt_919/do_while_stmt_920/do_while_stmt_920_loop_body/RPIPE_nic_rx_to_header_935_Update/ca)
  // 			$volatile wdata := ( $slice ethernet_header 71 8 )  $buffering 1
  //  file nic.linked.opt.aa, line 294
  // ethernet_header
  // 			$volatile wkeep := ( $slice ethernet_header 7 0 )  $buffering 1
  //  file nic.linked.opt.aa, line 295
  // ethernet_header
  // 			$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b0  ) wkeep buf_position wdata ) (ignore_return ) 
  //  file nic.linked.opt.aa, line 296
  // wkeep
  // buf_position
  // wdata
  call_stmt_956_call <=> (branch_block_stmt_919/do_while_stmt_920/do_while_stmt_920_loop_body/call_stmt_956_Sample/crr branch_block_stmt_919/do_while_stmt_920/do_while_stmt_920_loop_body/call_stmt_956_Update/ccr) (branch_block_stmt_919/do_while_stmt_920/do_while_stmt_920_loop_body/call_stmt_956_Sample/cra branch_block_stmt_919/do_while_stmt_920/do_while_stmt_920_loop_body/call_stmt_956_Update/cca)
  // 			$volatile nI := (I + 1 ) $buffering 1
  //  file nic.linked.opt.aa, line 297
  // (I + 1 )
  // I
  // 			$volatile nbuf_position := (buf_position + 8 ) $buffering 1
  //  file nic.linked.opt.aa, line 298
  // (buf_position + 8 )
  // buf_position
  // (nI <= 1 )
  // nI
  do_while_stmt_920_branch <=> (branch_block_stmt_919/do_while_stmt_920/do_while_stmt_920_loop_body/condition_evaluated) (branch_block_stmt_919/do_while_stmt_920/loop_exit/ack branch_block_stmt_919/do_while_stmt_920/loop_taken/ack)
  $attribute delay => "4"
}
$module [writePayloadToMem] 
{
  $in base_buf_pointer:$int<36>
  // can point into 
  buf_pointer:$int<36>
  // can point into 
  $out packet_size_32:$int<8>
  // can point into 
  bad_packet_identifier:$int<1>
  // can point into 
  last_keep:$int<8>
  // can point into 
  // pipe-declarations for block %writePayloadToMem
  //  file nic.linked.opt.aa, line 303
  // pipe-declarations for block %writePayloadToMem%loop
  //  file nic.linked.opt.aa, line 308
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    <>[branch_block_stmt_979] // Branch Block  file nic.linked.opt.aa, line 308
    {
      $P [branch_block_stmt_979__entry__]
      branch_block_stmt_979__entry__ <-| ($entry)
      $P [branch_block_stmt_979__exit__]
      branch_block_stmt_979__exit__ |-> ($exit)
      $P [do_while_stmt_980__entry__] 
      $P [do_while_stmt_980__exit__] 
      // do-while-statement  
      //  file nic.linked.opt.aa, line 310
      <o> [do_while_stmt_980]  $depth 15 $buffering 1 
      {
        $P[do_while_stmt_980__entry__] 
        $P[do_while_stmt_980__exit__] 
        $P[loop_back] 
        $P[condition_done] 
        $P[loop_body_done] 
        $pipeline [do_while_stmt_980_loop_body] 
        {
          // Pipelined!
          $T[back_edge_to_loop_body] 
          $T[first_time_through_loop_body] 
          $T[loop_body_start] 
          $T[condition_evaluated] 
          $transitionmerge [entry_tmerge] (back_edge_to_loop_body first_time_through_loop_body) (loop_body_start)
          $entry <-& (loop_body_start)
          $T[aggregated_phi_sample_req] 
          $T[aggregated_phi_sample_ack] 
          $T[aggregated_phi_update_req] 
          $T[aggregated_phi_update_ack] 
          // do not loop-back unless all phi's have used up their triggering tokens.
          condition_evaluated <-& (aggregated_phi_update_ack)
          aggregated_phi_sample_req o<-& (aggregated_phi_update_ack 0)
          // start:  PHI statement phi_stmt_982
          // 			$phi buf_position := 			  (buf_pointer + 8 ) $on   $entry 			  (buf_position + 8 ) $on   $loopback 
          // type of target is $uint<36>
          $T[phi_stmt_982_sample_start_] 
          $T[phi_stmt_982_sample_completed_] 
          $T[phi_stmt_982_update_start_] 
          $T[phi_stmt_982_update_completed_] 
          $T[phi_stmt_982_sample_start__ps] 
          phi_stmt_982_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_982_sample_completed__ps] 
          phi_stmt_982_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_982_update_start__ps] 
          phi_stmt_982_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_982_update_completed__ps] 
          phi_stmt_982_update_completed_ <-& (phi_stmt_982_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_982_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_982_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_982_update_start_)
          $T[phi_stmt_982_loopback_trigger] 
          phi_stmt_982_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_982_loopback_sample_req] 
          $T[phi_stmt_982_loopback_sample_req_ps] 
          phi_stmt_982_loopback_sample_req <-& (phi_stmt_982_loopback_sample_req_ps)
          phi_stmt_982_loopback_sample_req &-> ($null)
          $T[phi_stmt_982_entry_trigger] 
          phi_stmt_982_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_982_entry_sample_req] 
          $T[phi_stmt_982_entry_sample_req_ps] 
          phi_stmt_982_entry_sample_req <-& (phi_stmt_982_entry_sample_req_ps)
          phi_stmt_982_entry_sample_req &-> ($null)
          phi_stmt_982_update_start_ o<-& (phi_stmt_982_update_completed_ 0)
          phi_stmt_982_sample_start_ o<-& (phi_stmt_982_sample_completed_ 1)
          $T[phi_stmt_982_merged_reqs] 
          $T[phi_stmt_982_phi_mux_ack] 
          $T[phi_stmt_982_phi_mux_ack_ps] 
          phi_stmt_982_phi_mux_ack_ps <-& (phi_stmt_982_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_982_update_completed_)
          $T[ADD_u36_u36_986_sample_start__ps] 
          $T[ADD_u36_u36_986_sample_completed__ps] 
          $T[ADD_u36_u36_986_update_start__ps] 
          $T[ADD_u36_u36_986_update_completed__ps] 
          // source expression in Phi alternative 0
          // (buf_pointer + 8 )
          $T[ADD_u36_u36_986_sample_start_] 
          $T[ADD_u36_u36_986_sample_completed_] 
          $T[ADD_u36_u36_986_update_start_] 
          $T[ADD_u36_u36_986_update_completed_] 
          // buf_pointer
          // start: Forward dependencies from buf_pointer to transition ADD_u36_u36_986_sample_start_
          // done: Forward dependencies from buf_pointer to transition ADD_u36_u36_986_sample_start_
          ;;[ADD_u36_u36_986_Sample] 
          {
            // binary expression 
            $T [rr] $T [ra]  // (split) binary operation 
          }
          ;;[ADD_u36_u36_986_Update] 
          {
            // binary expression 
            $T [cr] $T [ca] // (split) binary operation 
          }
          ADD_u36_u36_986_sample_start_ &-> (ADD_u36_u36_986_Sample)
          ADD_u36_u36_986_sample_completed_ <-& (ADD_u36_u36_986_Sample)
          ADD_u36_u36_986_sample_completed_ &-> ($null)
          ADD_u36_u36_986_update_start_ &-> (ADD_u36_u36_986_Update)
          ADD_u36_u36_986_update_completed_ <-& (ADD_u36_u36_986_Update)
          // RAW reenables for buf_pointer
          // self-release: 
          ADD_u36_u36_986_sample_start_ o<-& (ADD_u36_u36_986_sample_completed_ 1)
          $null &-> (ADD_u36_u36_986_update_start_)
          ADD_u36_u36_986_update_start_ o<-& (ADD_u36_u36_986_update_completed_ 0)
          // Phi start dependency
          ADD_u36_u36_986_sample_start_ <-& (ADD_u36_u36_986_sample_start__ps)
          ADD_u36_u36_986_update_start_ <-& (ADD_u36_u36_986_update_start__ps)
          // RAW reenables for (buf_pointer + 8 )
          // producer  and  consumer are both determined by PHI statements.
          // Phi complete dependency.
          ADD_u36_u36_986_sample_completed__ps <-& (ADD_u36_u36_986_sample_completed_)
          ADD_u36_u36_986_update_completed__ps <-& (ADD_u36_u36_986_update_completed_)
          $T[ADD_u36_u36_989_sample_start__ps] 
          $T[ADD_u36_u36_989_sample_completed__ps] 
          $T[ADD_u36_u36_989_update_start__ps] 
          $T[ADD_u36_u36_989_update_completed__ps] 
          // source expression in Phi alternative 1
          // (buf_position + 8 )
          $T[ADD_u36_u36_989_sample_start_] 
          $T[ADD_u36_u36_989_sample_completed_] 
          $T[ADD_u36_u36_989_update_start_] 
          $T[ADD_u36_u36_989_update_completed_] 
          // buf_position
          // start: Forward dependencies from buf_position to transition ADD_u36_u36_989_sample_start_
          // done: Forward dependencies from buf_position to transition ADD_u36_u36_989_sample_start_
          ;;[ADD_u36_u36_989_Sample] 
          {
            // binary expression 
            $T [rr] $T [ra]  // (split) binary operation 
          }
          ;;[ADD_u36_u36_989_Update] 
          {
            // binary expression 
            $T [cr] $T [ca] // (split) binary operation 
          }
          ADD_u36_u36_989_sample_start_ &-> (ADD_u36_u36_989_Sample)
          ADD_u36_u36_989_sample_completed_ <-& (ADD_u36_u36_989_Sample)
          ADD_u36_u36_989_sample_completed_ &-> ($null)
          ADD_u36_u36_989_update_start_ &-> (ADD_u36_u36_989_Update)
          ADD_u36_u36_989_update_completed_ <-& (ADD_u36_u36_989_Update)
          // RAW reenables for buf_position
          // self-release: 
          ADD_u36_u36_989_sample_start_ o<-& (ADD_u36_u36_989_sample_completed_ 1)
          $null &-> (ADD_u36_u36_989_update_start_)
          ADD_u36_u36_989_update_start_ o<-& (ADD_u36_u36_989_update_completed_ 0)
          // Phi start dependency
          ADD_u36_u36_989_sample_start_ <-& (ADD_u36_u36_989_sample_start__ps)
          ADD_u36_u36_989_update_start_ <-& (ADD_u36_u36_989_update_start__ps)
          // RAW reenables for (buf_position + 8 )
          // producer  and  consumer are both determined by PHI statements.
          // Phi complete dependency.
          ADD_u36_u36_989_sample_completed__ps <-& (ADD_u36_u36_989_sample_completed_)
          ADD_u36_u36_989_update_completed__ps <-& (ADD_u36_u36_989_update_completed_)
          $phisequencer [ phi_stmt_982_phi_seq] : 
          phi_stmt_982_entry_trigger ADD_u36_u36_986_sample_start__ps ADD_u36_u36_986_sample_completed__ps ADD_u36_u36_986_update_start__ps ADD_u36_u36_986_update_completed__ps phi_stmt_982_loopback_trigger ADD_u36_u36_989_sample_start__ps ADD_u36_u36_989_sample_completed__ps ADD_u36_u36_989_update_start__ps ADD_u36_u36_989_update_completed__ps :
          phi_stmt_982_sample_start__ps phi_stmt_982_sample_completed__ps phi_stmt_982_update_start__ps phi_stmt_982_update_completed__ps :
          phi_stmt_982_entry_sample_req_ps phi_stmt_982_loopback_sample_req_ps : 
          phi_stmt_982_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_982
          // start:  single source PHI statement phi_stmt_990
          // 			$phi payload_data := 			  nic_rx_to_packet $on   $entry ,   $loopback 
          // type of target is $uint<73>
          $T[phi_stmt_990_sample_start_] 
          $T[phi_stmt_990_sample_completed_] 
          $T[phi_stmt_990_update_start_] 
          $T[phi_stmt_990_update_completed_] 
          aggregated_phi_sample_req <-& (phi_stmt_990_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_990_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_990_update_start_)
          // non-implicit source expression in single-source phi
          // nic_rx_to_packet
          $T[RPIPE_nic_rx_to_packet_992_sample_start_] 
          $T[RPIPE_nic_rx_to_packet_992_sample_completed_] 
          $T[RPIPE_nic_rx_to_packet_992_update_start_] 
          $T[RPIPE_nic_rx_to_packet_992_update_completed_] 
          ;;[RPIPE_nic_rx_to_packet_992_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_nic_rx_to_packet_992_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_nic_rx_to_packet_992_sample_start_ &-> (RPIPE_nic_rx_to_packet_992_Sample)
          RPIPE_nic_rx_to_packet_992_sample_completed_ <-& (RPIPE_nic_rx_to_packet_992_Sample)
          RPIPE_nic_rx_to_packet_992_update_start_ <-& (RPIPE_nic_rx_to_packet_992_sample_completed_)
          RPIPE_nic_rx_to_packet_992_update_start_ &-> (RPIPE_nic_rx_to_packet_992_Update)
          RPIPE_nic_rx_to_packet_992_update_completed_ <-& (RPIPE_nic_rx_to_packet_992_Update)
          RPIPE_nic_rx_to_packet_992_sample_start_ o<-& (RPIPE_nic_rx_to_packet_992_update_completed_ 0)
          // RAW reenables for nic_rx_to_packet
          // producer  and  consumer are both determined by PHI statements.
          aggregated_phi_sample_req &-> (RPIPE_nic_rx_to_packet_992_sample_start_)
          aggregated_phi_sample_ack <-& (RPIPE_nic_rx_to_packet_992_sample_completed_)
          aggregated_phi_update_req &-> (RPIPE_nic_rx_to_packet_992_update_start_)
          phi_stmt_990_update_completed_ <-& (RPIPE_nic_rx_to_packet_992_update_completed_)
          aggregated_phi_update_ack <-& (phi_stmt_990_update_completed_)
          // done: PHI Statement phi_stmt_990
          // start: WAR dependencies for last_bit
          // done: WAR dependencies for last_bit
          // start:  			$volatile last_bit := ( $slice payload_data 72 72 )  $buffering 1
          //  file nic.linked.opt.aa, line 318
          // volatile! 
          // Source expression
          // ( $slice payload_data 72 72 ) 
          // payload_data
          // Target expression
          // (as target) last_bit
          // start: WAR dependencies for last_bit
          // done: WAR dependencies for last_bit
          // end:  			$volatile last_bit := ( $slice payload_data 72 72 )  $buffering 1
          // start: WAR dependencies for wdata
          // done: WAR dependencies for wdata
          // start:  			$volatile wdata := ( $slice payload_data 71 8 )  $buffering 1
          //  file nic.linked.opt.aa, line 319
          // volatile! 
          // Source expression
          // ( $slice payload_data 71 8 ) 
          // payload_data
          // Target expression
          // (as target) wdata
          // start: WAR dependencies for wdata
          // done: WAR dependencies for wdata
          // end:  			$volatile wdata := ( $slice payload_data 71 8 )  $buffering 1
          // start: WAR dependencies for wkeep
          // done: WAR dependencies for wkeep
          // start:  			$volatile wkeep := ( $slice payload_data 7 0 )  $buffering 1
          //  file nic.linked.opt.aa, line 320
          // volatile! 
          // Source expression
          // ( $slice payload_data 7 0 ) 
          // payload_data
          // Target expression
          // (as target) wkeep
          // start: WAR dependencies for wkeep
          // done: WAR dependencies for wkeep
          // end:  			$volatile wkeep := ( $slice payload_data 7 0 )  $buffering 1
          // start: 			$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b0  ) wkeep buf_position wdata ) (ignore_return ) 
          //  file nic.linked.opt.aa, line 322
          $T[call_stmt_1019_sample_start_] 
          $T[call_stmt_1019_sample_completed_] 
          $T[call_stmt_1019_update_start_] 
          $T[call_stmt_1019_update_completed_] 
          // Call input argument 0
          // Call input argument 1
          // Call input argument 2
          // wkeep
          // Call input argument 3
          // buf_position
          // Call input argument 4
          // wdata
          // start: Forward dependencies from wkeep to transition call_stmt_1019_sample_start_
          call_stmt_1019_sample_start_ <-& (phi_stmt_990_update_completed_)
          // done: Forward dependencies from wkeep to transition call_stmt_1019_sample_start_
          // RAW reenables for wkeep
          phi_stmt_990_update_start_ o<-& (call_stmt_1019_sample_completed_ 0)
          // start: Forward dependencies from buf_position to transition call_stmt_1019_sample_start_
          call_stmt_1019_sample_start_ <-& (phi_stmt_982_update_completed_)
          // done: Forward dependencies from buf_position to transition call_stmt_1019_sample_start_
          // RAW reenables for buf_position
          phi_stmt_982_update_start_ o<-& (call_stmt_1019_sample_completed_ 0)
          // start: Forward dependencies from wdata to transition call_stmt_1019_sample_start_
          call_stmt_1019_sample_start_ <-& (phi_stmt_990_update_completed_)
          // done: Forward dependencies from wdata to transition call_stmt_1019_sample_start_
          // RAW reenables for wdata
          phi_stmt_990_update_start_ o<-& (call_stmt_1019_sample_completed_ 0)
          ;;[call_stmt_1019_Sample] 
          {
            $T [crr] $T [cra] 
          }
          ;;[call_stmt_1019_Update] 
          {
            $T [ccr] $T [cca] 
          }
          call_stmt_1019_sample_start_ &-> (call_stmt_1019_Sample)
          call_stmt_1019_sample_completed_ <-& (call_stmt_1019_Sample)
          call_stmt_1019_sample_completed_ &-> ($null)
          call_stmt_1019_update_start_ &-> (call_stmt_1019_Update)
          call_stmt_1019_update_completed_ <-& (call_stmt_1019_Update)
          // Call output argument 0
          // (as target) ignore_return
          // self-release: 
          call_stmt_1019_sample_start_ o<-& (call_stmt_1019_sample_completed_ 1)
          $null &-> (call_stmt_1019_update_start_)
          call_stmt_1019_update_start_ o<-& (call_stmt_1019_update_completed_ 0)
          // start: WAR dependencies for ignore_return
          // done: WAR dependencies for ignore_return
          // end: 			$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b0  ) wkeep buf_position wdata ) (ignore_return ) 
          // ( ~ last_bit )
          // last_bit
          $T [loop_body_delay_to_condition_start] $delay
          loop_body_start &-> (loop_body_delay_to_condition_start)
          loop_body_delay_to_condition_start &-> (condition_evaluated)
          // start: Forward dependencies from ( ~ last_bit ) to transition condition_evaluated
          condition_evaluated <-& (phi_stmt_990_update_completed_)
          // done: Forward dependencies from ( ~ last_bit ) to transition condition_evaluated
          condition_evaluated &-> ($null)
          // load-store dependencies..
          // pipe read/write dependencies for pipe MEMORY_TO_NIC_RESPONSE
          // read-dependencies for pipe MEMORY_TO_NIC_RESPONSE
          // write-dependencies for pipe MEMORY_TO_NIC_RESPONSE
          // signal write dependencies for MEMORY_TO_NIC_RESPONSE
          // pipe read/write dependencies for pipe NIC_TO_MEMORY_REQUEST
          // read-dependencies for pipe NIC_TO_MEMORY_REQUEST
          // write-dependencies for pipe NIC_TO_MEMORY_REQUEST
          // signal write dependencies for NIC_TO_MEMORY_REQUEST
          // pipe read/write dependencies for pipe nic_rx_to_packet
          // read-dependencies for pipe nic_rx_to_packet
          // write-dependencies for pipe nic_rx_to_packet
          // signal write dependencies for nic_rx_to_packet
        }
        ( first_time_through_loop_body  back_edge_to_loop_body) 
        ( condition_evaluated )
        ;; [loop_exit] 
        {
          $T [ack] 
        }
        ;; [loop_taken] 
        {
          $T [ack] 
        }
        do_while_stmt_980__entry__ <-| ($entry)
        loop_body_done <-| ( do_while_stmt_980_loop_body ) 
        condition_done |-> (loop_exit loop_taken)
        do_while_stmt_980__exit__ |-> ($exit)
        $bind condition_done <= do_while_stmt_980_loop_body : condition_evaluated
        $bind do_while_stmt_980__entry__  => do_while_stmt_980_loop_body : first_time_through_loop_body 
        $bind loop_back  => do_while_stmt_980_loop_body : back_edge_to_loop_body 
        $terminate (loop_exit loop_taken loop_body_done) (loop_back do_while_stmt_980__exit__)
      }
      do_while_stmt_980__entry__ |-> (do_while_stmt_980)
      do_while_stmt_980__exit__ <-| (do_while_stmt_980)
      do_while_stmt_980__entry__ <-| (branch_block_stmt_979__entry__)
      do_while_stmt_980__exit__ |-> (branch_block_stmt_979__exit__)
    }
    ::[assign_stmt_1032_to_assign_stmt_1047] 
    {
      // start: WAR dependencies for bad_packet_identifier
      // ignored out-of-scope w_root 			$phi payload_data := 			  nic_rx_to_packet $on   $entry ,   $loopback 
      // type of target is $uint<73>
      // done: WAR dependencies for bad_packet_identifier
      // start:  	$volatile bad_packet_identifier := ((tdata == BAD_PACKET_DATA) & (tkeep == 0 )) $buffering 1
      //  file nic.linked.opt.aa, line 326
      // volatile! 
      // Source expression
      // ((tdata == BAD_PACKET_DATA) & (tkeep == 0 ))
      // (tdata == BAD_PACKET_DATA)
      // tdata
      // (tkeep == 0 )
      // tkeep
      // Target expression
      // (as target) bad_packet_identifier
      // bad_packet_identifier
      // write to interface object
      // start: WAR dependencies for bad_packet_identifier
      // ignored out-of-scope w_root 			$phi payload_data := 			  nic_rx_to_packet $on   $entry ,   $loopback 
      // type of target is $uint<73>
      // done: WAR dependencies for bad_packet_identifier
      // bad_packet_identifier
      // write to interface object
      // end:  	$volatile bad_packet_identifier := ((tdata == BAD_PACKET_DATA) & (tkeep == 0 )) $buffering 1
      // start: WAR dependencies for packet_size_8
      // ignored out-of-scope w_root  base_buf_pointer : $uint<36> 
      // ignored out-of-scope w_root 			$phi buf_position := 			  (buf_pointer + 8 ) $on   $entry 			  (buf_position + 8 ) $on   $loopback 
      // type of target is $uint<36>
      // done: WAR dependencies for packet_size_8
      // start:  	$volatile packet_size_8 := ($bitcast ($uint<8>) (buf_position - base_buf_pointer) ) $buffering 1
      //  file nic.linked.opt.aa, line 327
      // volatile! 
      // Source expression
      // ($bitcast ($uint<8>) (buf_position - base_buf_pointer) )
      // (buf_position - base_buf_pointer)
      // buf_position
      // base_buf_pointer
      // Target expression
      // (as target) packet_size_8
      // start: WAR dependencies for packet_size_8
      // ignored out-of-scope w_root  base_buf_pointer : $uint<36> 
      // ignored out-of-scope w_root 			$phi buf_position := 			  (buf_pointer + 8 ) $on   $entry 			  (buf_position + 8 ) $on   $loopback 
      // type of target is $uint<36>
      // done: WAR dependencies for packet_size_8
      // end:  	$volatile packet_size_8 := ($bitcast ($uint<8>) (buf_position - base_buf_pointer) ) $buffering 1
      // start: WAR dependencies for packet_size_32
      // ignored out-of-scope w_root  base_buf_pointer : $uint<36> 
      // ignored out-of-scope w_root 			$phi buf_position := 			  (buf_pointer + 8 ) $on   $entry 			  (buf_position + 8 ) $on   $loopback 
      // type of target is $uint<36>
      // done: WAR dependencies for packet_size_32
      // start:  	$volatile packet_size_32 := packet_size_8 $buffering 1
      //  file nic.linked.opt.aa, line 328
      // volatile! 
      // Source expression
      // packet_size_8
      // Target expression
      // (as target) packet_size_32
      // packet_size_32
      // write to interface object
      // start: WAR dependencies for packet_size_32
      // ignored out-of-scope w_root  base_buf_pointer : $uint<36> 
      // ignored out-of-scope w_root 			$phi buf_position := 			  (buf_pointer + 8 ) $on   $entry 			  (buf_position + 8 ) $on   $loopback 
      // type of target is $uint<36>
      // done: WAR dependencies for packet_size_32
      // packet_size_32
      // write to interface object
      // end:  	$volatile packet_size_32 := packet_size_8 $buffering 1
      // start: WAR dependencies for last_keep
      // ignored out-of-scope w_root 			$phi payload_data := 			  nic_rx_to_packet $on   $entry ,   $loopback 
      // type of target is $uint<73>
      // done: WAR dependencies for last_keep
      // start:  	$volatile last_keep := tkeep $buffering 1
      //  file nic.linked.opt.aa, line 330
      // volatile! 
      // Source expression
      // tkeep
      // Target expression
      // (as target) last_keep
      // last_keep
      // write to interface object
      // start: WAR dependencies for last_keep
      // ignored out-of-scope w_root 			$phi payload_data := 			  nic_rx_to_packet $on   $entry ,   $loopback 
      // type of target is $uint<73>
      // done: WAR dependencies for last_keep
      // last_keep
      // write to interface object
      // end:  	$volatile last_keep := tkeep $buffering 1
      // load-store dependencies..
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %writePayloadToMem%loop%
    //  file nic.linked.opt.aa, line 312
    // constant-object-declarations for block %writePayloadToMem%loop
    //  file nic.linked.opt.aa, line 308
    // constant-object-declarations for block %writePayloadToMem
    //  file nic.linked.opt.aa, line 303
    // constant-declarations for block %writePayloadToMem%loop
    //  file nic.linked.opt.aa, line 308
    // do-while statement  
    //  file nic.linked.opt.aa, line 310
    // constant-declarations for block %writePayloadToMem%loop%
    //  file nic.linked.opt.aa, line 312
    // constant-declarations for phi:  			$phi buf_position := 			  (buf_pointer + 8 ) $on   $entry 			  (buf_position + 8 ) $on   $loopback 
    // type of target is $uint<36>
    //  file nic.linked.opt.aa, line 313
    // 8 
    $constant $W[konst_985_wire_constant] : $int<36> := _b000000000000000000000000000000001000// 8
    // 8 
    $constant $W[konst_988_wire_constant] : $int<36> := _b000000000000000000000000000000001000// 8
    // constant-declarations for phi:  			$phi payload_data := 			  nic_rx_to_packet $on   $entry ,   $loopback 
    // type of target is $uint<73>
    //  file nic.linked.opt.aa, line 315
    // 			$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b0  ) wkeep buf_position wdata ) (ignore_return ) 
    //  file nic.linked.opt.aa, line 322
    // ($bitcast ($uint<1>) _b0  )
    $constant $W[type_cast_1012_wire_constant] : $int<1> := _b0// 0
    // ($bitcast ($uint<1>) _b0  )
    $constant $W[type_cast_1014_wire_constant] : $int<1> := _b0// 0
    // BAD_PACKET_DATA
    $constant $W[R_BAD_PACKET_DATA_1026_wire_constant] : $int<64> := _b1111111111111111111111111111111111111111111111111111111111111111// -1
    // 0 
    $constant $W[konst_1029_wire_constant] : $int<8> := _b00000000// 0
    // block %writePayloadToMem%loop
    //  file nic.linked.opt.aa, line 308
    // do-while statement  
    //  file nic.linked.opt.aa, line 310
    // ( ~ last_bit )
    $intermediate $W[NOT_u1_u1_1022_wire] : $int<1>
    // merge-statement  
    //  file nic.linked.opt.aa, line 312
    // 			$phi buf_position := 			  (buf_pointer + 8 ) $on   $entry 			  (buf_position + 8 ) $on   $loopback 
    // type of target is $uint<36>
    //  file nic.linked.opt.aa, line 313
    // (buf_pointer + 8 )
    $intermediate $W[ADD_u36_u36_986_wire] : $int<36>
    // (buf_position + 8 )
    $intermediate $W[ADD_u36_u36_989_wire] : $int<36>
    // buf_position
    $W[buf_position_982] : $int<36>
    // 			$phi payload_data := 			  nic_rx_to_packet $on   $entry ,   $loopback 
    // type of target is $uint<73>
    //  file nic.linked.opt.aa, line 315
    // nic_rx_to_packet
    $W[RPIPE_nic_rx_to_packet_992_wire] : $int<73>
    // payload_data
    $W[payload_data_990] : $int<73>
    // 			$volatile last_bit := ( $slice payload_data 72 72 )  $buffering 1
    //  file nic.linked.opt.aa, line 318
    // last_bit
    $W[last_bit_997] : $int<1>
    // 			$volatile wdata := ( $slice payload_data 71 8 )  $buffering 1
    //  file nic.linked.opt.aa, line 319
    // wdata
    $W[wdata_1001] : $int<64>
    // 			$volatile wkeep := ( $slice payload_data 7 0 )  $buffering 1
    //  file nic.linked.opt.aa, line 320
    // wkeep
    $W[wkeep_1005] : $int<8>
    // 			$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b0  ) wkeep buf_position wdata ) (ignore_return ) 
    //  file nic.linked.opt.aa, line 322
    // ignore_return
    $W[ignore_return_1019] : $int<64>
    // 	$volatile bad_packet_identifier := ((tdata == BAD_PACKET_DATA) & (tkeep == 0 )) $buffering 1
    //  file nic.linked.opt.aa, line 326
    // (tdata == BAD_PACKET_DATA)
    $intermediate $W[EQ_u64_u1_1027_wire] : $int<1>
    // (tkeep == 0 )
    $intermediate $W[EQ_u8_u1_1030_wire] : $int<1>
    // bad_packet_identifier
    // 	$volatile packet_size_8 := ($bitcast ($uint<8>) (buf_position - base_buf_pointer) ) $buffering 1
    //  file nic.linked.opt.aa, line 327
    // (buf_position - base_buf_pointer)
    $intermediate $W[SUB_u36_u36_1036_wire] : $int<36>
    // packet_size_8
    $W[packet_size_8_1038] : $int<8>
    // 	$volatile packet_size_32 := packet_size_8 $buffering 1
    //  file nic.linked.opt.aa, line 328
    // packet_size_32
    // 	$volatile last_keep := tkeep $buffering 1
    //  file nic.linked.opt.aa, line 330
    // last_keep
    // datapath-instances for block %writePayloadToMem%loop
    //  file nic.linked.opt.aa, line 308
    // datapath-instances for do-while  
    //  file nic.linked.opt.aa, line 310
    // ( ~ last_bit )
    ~ [NOT_u1_u1_1022_inst] (last_bit_997) (NOT_u1_u1_1022_wire)   $flowthrough
    $delay NOT_u1_u1_1022_inst 0
    ==0? [do_while_stmt_980_branch] (NOT_u1_u1_1022_wire)
    $flowthrough
    // data-path instances for merge  
    //  file nic.linked.opt.aa, line 312
    // 			$phi buf_position := 			  (buf_pointer + 8 ) $on   $entry 			  (buf_position + 8 ) $on   $loopback 
    // type of target is $uint<36>
    //  file nic.linked.opt.aa, line 313
    // (buf_pointer + 8 )
    +[ADD_u36_u36_986_inst] (buf_pointer konst_985_wire_constant) (ADD_u36_u36_986_wire)    $fullrate
    $buffering  $out ADD_u36_u36_986_inst ADD_u36_u36_986_wire 1
    $delay ADD_u36_u36_986_inst 1
    // (buf_position + 8 )
    +[ADD_u36_u36_989_inst] (buf_position_982 konst_988_wire_constant) (ADD_u36_u36_989_wire)    $fullrate
    $buffering  $out ADD_u36_u36_989_inst ADD_u36_u36_989_wire 1
    $delay ADD_u36_u36_989_inst 1
    # $phi [phi_stmt_982] (ADD_u36_u36_986_wire ADD_u36_u36_989_wire) ( buf_position_982 ) $fullrate
    // $buffering  $out phi_stmt_982 buf_position_982 2
    // 			$phi payload_data := 			  nic_rx_to_packet $on   $entry ,   $loopback 
    // type of target is $uint<73>
    //  file nic.linked.opt.aa, line 315
    // nic_rx_to_packet
    $ioport $in [RPIPE_nic_rx_to_packet_992_inst] (nic_rx_to_packet) (RPIPE_nic_rx_to_packet_992_wire)  $fullrate 
    $buffering $out RPIPE_nic_rx_to_packet_992_inst RPIPE_nic_rx_to_packet_992_wire 1
    # := [ssrc_phi_stmt_990] (RPIPE_nic_rx_to_packet_992_wire) (payload_data_990)    $flowthrough 
    // 			$volatile last_bit := ( $slice payload_data 72 72 )  $buffering 1
    //  file nic.linked.opt.aa, line 318
    // ( $slice payload_data 72 72 ) 
    [:] [slice_996_inst] (payload_data_990 72 72) (last_bit_997)  $flowthrough
    $delay slice_996_inst 0
    // 			$volatile wdata := ( $slice payload_data 71 8 )  $buffering 1
    //  file nic.linked.opt.aa, line 319
    // ( $slice payload_data 71 8 ) 
    [:] [slice_1000_inst] (payload_data_990 71 8) (wdata_1001)  $flowthrough
    $delay slice_1000_inst 0
    // 			$volatile wkeep := ( $slice payload_data 7 0 )  $buffering 1
    //  file nic.linked.opt.aa, line 320
    // ( $slice payload_data 7 0 ) 
    [:] [slice_1004_inst] (payload_data_990 7 0) (wkeep_1005)  $flowthrough
    $delay slice_1004_inst 0
    // 			$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b0  ) wkeep buf_position wdata ) (ignore_return ) 
    //  file nic.linked.opt.aa, line 322
    $call [call_stmt_1019_call] $module accessMemory(type_cast_1012_wire_constant type_cast_1014_wire_constant wkeep_1005 buf_position_982 wdata_1001) (ignore_return_1019)   $fullrate
    $delay call_stmt_1019_call 3
    $buffering  $in call_stmt_1019_call type_cast_1012_wire_constant 1
    $buffering  $in call_stmt_1019_call type_cast_1014_wire_constant 1
    $buffering  $in call_stmt_1019_call wkeep_1005 1
    $buffering  $in call_stmt_1019_call buf_position_982 1
    $buffering  $in call_stmt_1019_call wdata_1001 1
    $buffering  $out call_stmt_1019_call ignore_return_1019 1
    // 	$volatile bad_packet_identifier := ((tdata == BAD_PACKET_DATA) & (tkeep == 0 )) $buffering 1
    //  file nic.linked.opt.aa, line 326
    // (tdata == BAD_PACKET_DATA)
    ==[EQ_u64_u1_1027_inst] (wdata_1001 R_BAD_PACKET_DATA_1026_wire_constant) (EQ_u64_u1_1027_wire)   $flowthrough 
    $delay EQ_u64_u1_1027_inst 0
    // (tkeep == 0 )
    ==[EQ_u8_u1_1030_inst] (wkeep_1005 konst_1029_wire_constant) (EQ_u8_u1_1030_wire)   $flowthrough 
    $delay EQ_u8_u1_1030_inst 0
    // ((tdata == BAD_PACKET_DATA) & (tkeep == 0 ))
    &[AND_u1_u1_1031_inst] (EQ_u64_u1_1027_wire EQ_u8_u1_1030_wire) (bad_packet_identifier)   $flowthrough 
    $delay AND_u1_u1_1031_inst 0
    // 	$volatile packet_size_8 := ($bitcast ($uint<8>) (buf_position - base_buf_pointer) ) $buffering 1
    //  file nic.linked.opt.aa, line 327
    // (buf_position - base_buf_pointer)
    -[SUB_u36_u36_1036_inst] (buf_position_982 base_buf_pointer) (SUB_u36_u36_1036_wire)   $flowthrough 
    $delay SUB_u36_u36_1036_inst 0
    // ($bitcast ($uint<8>) (buf_position - base_buf_pointer) )
    # := [type_cast_1037_inst] (SUB_u36_u36_1036_wire) (packet_size_8_1038)   $flowthrough
    $delay type_cast_1037_inst 0
    // 	$volatile packet_size_32 := packet_size_8 $buffering 1
    //  file nic.linked.opt.aa, line 328
    # := [W_packet_size_32_1039_inst] (packet_size_8_1038) (packet_size_32)    $flowthrough 
    // 	$volatile last_keep := tkeep $buffering 1
    //  file nic.linked.opt.aa, line 330
    # := [W_last_keep_1045_inst] (wkeep_1005) (last_keep)    $flowthrough 
  }
  // end data-path
  // CP-DP links for do-while  do_while_stmt_980
  //  file nic.linked.opt.aa, line 310
  phi_stmt_982 <=> (branch_block_stmt_979/do_while_stmt_980/do_while_stmt_980_loop_body/phi_stmt_982_entry_sample_req branch_block_stmt_979/do_while_stmt_980/do_while_stmt_980_loop_body/phi_stmt_982_loopback_sample_req) (branch_block_stmt_979/do_while_stmt_980/do_while_stmt_980_loop_body/phi_stmt_982_phi_mux_ack)
  // (buf_pointer + 8 )
  // buf_pointer
  ADD_u36_u36_986_inst <=> (branch_block_stmt_979/do_while_stmt_980/do_while_stmt_980_loop_body/ADD_u36_u36_986_Sample/rr branch_block_stmt_979/do_while_stmt_980/do_while_stmt_980_loop_body/ADD_u36_u36_986_Update/cr) (branch_block_stmt_979/do_while_stmt_980/do_while_stmt_980_loop_body/ADD_u36_u36_986_Sample/ra branch_block_stmt_979/do_while_stmt_980/do_while_stmt_980_loop_body/ADD_u36_u36_986_Update/ca)
  // (buf_position + 8 )
  // buf_position
  ADD_u36_u36_989_inst <=> (branch_block_stmt_979/do_while_stmt_980/do_while_stmt_980_loop_body/ADD_u36_u36_989_Sample/rr branch_block_stmt_979/do_while_stmt_980/do_while_stmt_980_loop_body/ADD_u36_u36_989_Update/cr) (branch_block_stmt_979/do_while_stmt_980/do_while_stmt_980_loop_body/ADD_u36_u36_989_Sample/ra branch_block_stmt_979/do_while_stmt_980/do_while_stmt_980_loop_body/ADD_u36_u36_989_Update/ca)
  // nic_rx_to_packet
  RPIPE_nic_rx_to_packet_992_inst <=> (branch_block_stmt_979/do_while_stmt_980/do_while_stmt_980_loop_body/RPIPE_nic_rx_to_packet_992_Sample/rr branch_block_stmt_979/do_while_stmt_980/do_while_stmt_980_loop_body/RPIPE_nic_rx_to_packet_992_Update/cr) (branch_block_stmt_979/do_while_stmt_980/do_while_stmt_980_loop_body/RPIPE_nic_rx_to_packet_992_Sample/ra branch_block_stmt_979/do_while_stmt_980/do_while_stmt_980_loop_body/RPIPE_nic_rx_to_packet_992_Update/ca)
  // 			$volatile last_bit := ( $slice payload_data 72 72 )  $buffering 1
  //  file nic.linked.opt.aa, line 318
  // payload_data
  // 			$volatile wdata := ( $slice payload_data 71 8 )  $buffering 1
  //  file nic.linked.opt.aa, line 319
  // payload_data
  // 			$volatile wkeep := ( $slice payload_data 7 0 )  $buffering 1
  //  file nic.linked.opt.aa, line 320
  // payload_data
  // 			$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b0  ) wkeep buf_position wdata ) (ignore_return ) 
  //  file nic.linked.opt.aa, line 322
  // wkeep
  // buf_position
  // wdata
  call_stmt_1019_call <=> (branch_block_stmt_979/do_while_stmt_980/do_while_stmt_980_loop_body/call_stmt_1019_Sample/crr branch_block_stmt_979/do_while_stmt_980/do_while_stmt_980_loop_body/call_stmt_1019_Update/ccr) (branch_block_stmt_979/do_while_stmt_980/do_while_stmt_980_loop_body/call_stmt_1019_Sample/cra branch_block_stmt_979/do_while_stmt_980/do_while_stmt_980_loop_body/call_stmt_1019_Update/cca)
  // last_bit
  do_while_stmt_980_branch <=> (branch_block_stmt_979/do_while_stmt_980/do_while_stmt_980_loop_body/condition_evaluated) (branch_block_stmt_979/do_while_stmt_980/loop_exit/ack branch_block_stmt_979/do_while_stmt_980/loop_taken/ack)
  // 	$volatile bad_packet_identifier := ((tdata == BAD_PACKET_DATA) & (tkeep == 0 )) $buffering 1
  //  file nic.linked.opt.aa, line 326
  // ((tdata == BAD_PACKET_DATA) & (tkeep == 0 ))
  // (tdata == BAD_PACKET_DATA)
  // tdata
  // (tkeep == 0 )
  // tkeep
  // 	$volatile packet_size_8 := ($bitcast ($uint<8>) (buf_position - base_buf_pointer) ) $buffering 1
  //  file nic.linked.opt.aa, line 327
  // (buf_position - base_buf_pointer)
  // buf_position
  // base_buf_pointer
  // 	$volatile packet_size_32 := packet_size_8 $buffering 1
  //  file nic.linked.opt.aa, line 328
  // packet_size_8
  // 	$volatile last_keep := tkeep $buffering 1
  //  file nic.linked.opt.aa, line 330
  // tkeep
}
$module [writeControlInformationToMem] 
{
  $in base_buffer_pointer:$int<36>
  // can point into 
  packet_size:$int<8>
  // can point into 
  last_keep:$int<8>
  // can point into 
  // pipe-declarations for block %writeControlInformationToMem
  //  file nic.linked.opt.aa, line 332
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    ::[assign_stmt_1058_to_call_stmt_1067] 
    {
      // start: WAR dependencies for control_data
      // ignored out-of-scope w_root  packet_size : $uint<8> 
      // ignored out-of-scope w_root  last_keep : $uint<8> 
      // done: WAR dependencies for control_data
      // start:  	$volatile control_data := ($bitcast ($uint<64>) (packet_size && last_keep) ) $buffering 1
      //  file nic.linked.opt.aa, line 337
      // volatile! 
      // Source expression
      // ($bitcast ($uint<64>) (packet_size && last_keep) )
      // (packet_size && last_keep)
      // packet_size
      // last_keep
      // Target expression
      // (as target) control_data
      // start: WAR dependencies for control_data
      // ignored out-of-scope w_root  packet_size : $uint<8> 
      // ignored out-of-scope w_root  last_keep : $uint<8> 
      // done: WAR dependencies for control_data
      // end:  	$volatile control_data := ($bitcast ($uint<64>) (packet_size && last_keep) ) $buffering 1
      // start: 	$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b0  ) FULL_BYTE_MASK base_buffer_pointer control_data ) (ignore_return ) 
      //  file nic.linked.opt.aa, line 338
      $T[call_stmt_1067_sample_start_] 
      $T[call_stmt_1067_sample_completed_] 
      $T[call_stmt_1067_update_start_] 
      $T[call_stmt_1067_update_completed_] 
      // Call input argument 0
      // Call input argument 1
      // Call input argument 2
      // Call input argument 3
      // base_buffer_pointer
      // Call input argument 4
      // control_data
      // start: Forward dependencies from base_buffer_pointer to transition call_stmt_1067_sample_start_
      // done: Forward dependencies from base_buffer_pointer to transition call_stmt_1067_sample_start_
      // start: Forward dependencies from control_data to transition call_stmt_1067_sample_start_
      // done: Forward dependencies from control_data to transition call_stmt_1067_sample_start_
      ;;[call_stmt_1067_Sample] 
      {
        $T [crr] $T [cra] 
      }
      ;;[call_stmt_1067_Update] 
      {
        $T [ccr] $T [cca] 
      }
      call_stmt_1067_sample_start_ &-> (call_stmt_1067_Sample)
      call_stmt_1067_sample_completed_ <-& (call_stmt_1067_Sample)
      call_stmt_1067_sample_completed_ &-> ($null)
      call_stmt_1067_update_start_ &-> (call_stmt_1067_Update)
      call_stmt_1067_update_completed_ <-& (call_stmt_1067_Update)
      // Call output argument 0
      // (as target) ignore_return
      // start: WAR dependencies for ignore_return
      // done: WAR dependencies for ignore_return
      // end: 	$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b0  ) FULL_BYTE_MASK base_buffer_pointer control_data ) (ignore_return ) 
      // load-store dependencies..
      // pipe read/write dependencies for pipe MEMORY_TO_NIC_RESPONSE
      // read-dependencies for pipe MEMORY_TO_NIC_RESPONSE
      // write-dependencies for pipe MEMORY_TO_NIC_RESPONSE
      // signal write dependencies for MEMORY_TO_NIC_RESPONSE
      // pipe read/write dependencies for pipe NIC_TO_MEMORY_REQUEST
      // read-dependencies for pipe NIC_TO_MEMORY_REQUEST
      // write-dependencies for pipe NIC_TO_MEMORY_REQUEST
      // signal write dependencies for NIC_TO_MEMORY_REQUEST
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %writeControlInformationToMem
    //  file nic.linked.opt.aa, line 332
    // 	$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b0  ) FULL_BYTE_MASK base_buffer_pointer control_data ) (ignore_return ) 
    //  file nic.linked.opt.aa, line 338
    // ($bitcast ($uint<1>) _b0  )
    $constant $W[type_cast_1060_wire_constant] : $int<1> := _b0// 0
    // ($bitcast ($uint<1>) _b0  )
    $constant $W[type_cast_1062_wire_constant] : $int<1> := _b0// 0
    // FULL_BYTE_MASK
    $constant $W[R_FULL_BYTE_MASK_1063_wire_constant] : $int<8> := _b11111111// 255
    // 	$volatile control_data := ($bitcast ($uint<64>) (packet_size && last_keep) ) $buffering 1
    //  file nic.linked.opt.aa, line 337
    // (packet_size && last_keep)
    $intermediate $W[CONCAT_u8_u16_1056_wire] : $int<16>
    // control_data
    $W[control_data_1058] : $int<64>
    // 	$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b0  ) FULL_BYTE_MASK base_buffer_pointer control_data ) (ignore_return ) 
    //  file nic.linked.opt.aa, line 338
    // ignore_return
    $W[ignore_return_1067] : $int<64>
    // 	$volatile control_data := ($bitcast ($uint<64>) (packet_size && last_keep) ) $buffering 1
    //  file nic.linked.opt.aa, line 337
    // (packet_size && last_keep)
    &&[CONCAT_u8_u16_1056_inst] (packet_size last_keep) (CONCAT_u8_u16_1056_wire)   $flowthrough 
    $delay CONCAT_u8_u16_1056_inst 0
    // ($bitcast ($uint<64>) (packet_size && last_keep) )
    # := [type_cast_1057_inst] (CONCAT_u8_u16_1056_wire) (control_data_1058)   $flowthrough
    $delay type_cast_1057_inst 0
    // 	$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b0  ) FULL_BYTE_MASK base_buffer_pointer control_data ) (ignore_return ) 
    //  file nic.linked.opt.aa, line 338
    $call [call_stmt_1067_call] $module accessMemory(type_cast_1060_wire_constant type_cast_1062_wire_constant R_FULL_BYTE_MASK_1063_wire_constant base_buffer_pointer control_data_1058) (ignore_return_1067)  
    $delay call_stmt_1067_call 3
    $buffering  $in call_stmt_1067_call type_cast_1060_wire_constant 1
    $buffering  $in call_stmt_1067_call type_cast_1062_wire_constant 1
    $buffering  $in call_stmt_1067_call R_FULL_BYTE_MASK_1063_wire_constant 1
    $buffering  $in call_stmt_1067_call base_buffer_pointer 1
    $buffering  $in call_stmt_1067_call control_data_1058 1
    $buffering  $out call_stmt_1067_call ignore_return_1067 1
  }
  // end data-path
  // 	$volatile control_data := ($bitcast ($uint<64>) (packet_size && last_keep) ) $buffering 1
  //  file nic.linked.opt.aa, line 337
  // (packet_size && last_keep)
  // packet_size
  // last_keep
  // 	$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b0  ) FULL_BYTE_MASK base_buffer_pointer control_data ) (ignore_return ) 
  //  file nic.linked.opt.aa, line 338
  // base_buffer_pointer
  // control_data
  call_stmt_1067_call <=> (assign_stmt_1058_to_call_stmt_1067/call_stmt_1067_Sample/crr assign_stmt_1058_to_call_stmt_1067/call_stmt_1067_Update/ccr) (assign_stmt_1058_to_call_stmt_1067/call_stmt_1067_Sample/cra assign_stmt_1058_to_call_stmt_1067/call_stmt_1067_Update/cca)
}
$pipeline $depth 31 $buffering 1 $module [loadBuffer] 
{
  $in rx_buffer_pointer:$int<36>
  // can point into 
  $out bad_packet_identifier:$int<1>
  // can point into 
  // pipe-declarations for block %loadBuffer
  //  file nic.linked.opt.aa, line 340
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    // pipelined module
    :|:[call_stmt_1074_to_call_stmt_1094] 
    {
      $T [rx_buffer_pointer_update_enable] 
      $T [rx_buffer_pointer_update_enable_out] 
      rx_buffer_pointer_update_enable &-> (rx_buffer_pointer_update_enable_out)
      $null &-> (rx_buffer_pointer_update_enable)
      $T [bad_packet_identifier_update_enable] 
      $T [bad_packet_identifier_update_enable_in] 
      $null &-> (bad_packet_identifier_update_enable)
      $null <-& (bad_packet_identifier_update_enable_in) 
      $null &-> (bad_packet_identifier_update_enable)
      bad_packet_identifier_update_enable <-& (bad_packet_identifier_update_enable_in) 
      // start: 	$call writeEthernetHeaderToMem (rx_buffer_pointer ) (new_buf_pointer ) 
      //  file nic.linked.opt.aa, line 345
      $T[call_stmt_1074_sample_start_] 
      $T[call_stmt_1074_sample_completed_] 
      $T[call_stmt_1074_update_start_] 
      $T[call_stmt_1074_update_completed_] 
      // Call input argument 0
      // rx_buffer_pointer
      // start: Forward dependencies from rx_buffer_pointer to transition call_stmt_1074_sample_start_
      call_stmt_1074_sample_start_ <-& ($entry)
      // done: Forward dependencies from rx_buffer_pointer to transition call_stmt_1074_sample_start_
      // RAW reenables for rx_buffer_pointer
      rx_buffer_pointer_update_enable o<-& (call_stmt_1074_sample_completed_ 0)
      ;;[call_stmt_1074_Sample] 
      {
        $T [crr] $T [cra] 
      }
      ;;[call_stmt_1074_Update] 
      {
        $T [ccr] $T [cca] 
      }
      call_stmt_1074_sample_start_ &-> (call_stmt_1074_Sample)
      call_stmt_1074_sample_completed_ <-& (call_stmt_1074_Sample)
      call_stmt_1074_sample_completed_ &-> ($null)
      call_stmt_1074_update_start_ &-> (call_stmt_1074_Update)
      call_stmt_1074_update_completed_ <-& (call_stmt_1074_Update)
      // Call output argument 0
      // (as target) new_buf_pointer
      // self-release: 
      call_stmt_1074_sample_start_ o<-& (call_stmt_1074_sample_completed_ 1)
      $null &-> (call_stmt_1074_update_start_)
      call_stmt_1074_update_start_ o<-& (call_stmt_1074_update_completed_ 0)
      // start: WAR dependencies for new_buf_pointer
      // done: WAR dependencies for new_buf_pointer
      // end: 	$call writeEthernetHeaderToMem (rx_buffer_pointer ) (new_buf_pointer ) 
      // start:  	rx_buffer_pointer_1068_delayed_4_0 := rx_buffer_pointer $buffering 4 $cut_through // bits of buffering = 144. 
      //  file nic.linked.opt.aa, line 346
      $T[assign_stmt_1077_sample_start_] 
      $T[assign_stmt_1077_sample_completed_] 
      $T[assign_stmt_1077_update_start_] 
      $T[assign_stmt_1077_update_completed_] 
      // Source expression
      // rx_buffer_pointer
      // Target expression
      // (as target) rx_buffer_pointer_1068_delayed_4_0
      // both source and target are implicit: use interlock 
      // Interlock 
      ;;[assign_stmt_1077_Sample] 
      {
        $T [req] $T [ack] // interlock-sample.
      }
      ;;[assign_stmt_1077_Update] 
      {
        $T [req] $T [ack] // interlock-update.
      }
      assign_stmt_1077_sample_start_ &-> (assign_stmt_1077_Sample)
      assign_stmt_1077_sample_completed_ <-& (assign_stmt_1077_Sample)
      assign_stmt_1077_sample_completed_ &-> ($null)
      assign_stmt_1077_update_start_ &-> (assign_stmt_1077_Update)
      assign_stmt_1077_update_completed_ <-& (assign_stmt_1077_Update)
      // start: Forward dependencies from rx_buffer_pointer to transition assign_stmt_1077_sample_start_
      assign_stmt_1077_sample_start_ <-& ($entry)
      // done: Forward dependencies from rx_buffer_pointer to transition assign_stmt_1077_sample_start_
      // RAW reenables for rx_buffer_pointer
      rx_buffer_pointer_update_enable o<-& (assign_stmt_1077_sample_completed_ 0)
      // self-release: 
      assign_stmt_1077_sample_start_ o<-& (assign_stmt_1077_sample_completed_ 1)
      $null &-> (assign_stmt_1077_update_start_)
      assign_stmt_1077_update_start_ o<-& (assign_stmt_1077_update_completed_ 0)
      // start: WAR dependencies for rx_buffer_pointer_1068_delayed_4_0
      // done: WAR dependencies for rx_buffer_pointer_1068_delayed_4_0
      // end:  	rx_buffer_pointer_1068_delayed_4_0 := rx_buffer_pointer $buffering 4 $cut_through // bits of buffering = 144. 
      // start: 	$call writePayloadToMem (rx_buffer_pointer_1068_delayed_4_0 new_buf_pointer ) (packet_size bad_packet_identifier last_keep ) 
      //  file nic.linked.opt.aa, line 347
      $T[call_stmt_1083_sample_start_] 
      $T[call_stmt_1083_sample_completed_] 
      $T[call_stmt_1083_update_start_] 
      $T[call_stmt_1083_update_completed_] 
      // Call input argument 0
      // rx_buffer_pointer_1068_delayed_4_0
      // Call input argument 1
      // new_buf_pointer
      // start: Forward dependencies from rx_buffer_pointer_1068_delayed_4_0 to transition call_stmt_1083_sample_start_
      call_stmt_1083_sample_start_ <-& (assign_stmt_1077_update_completed_)
      // done: Forward dependencies from rx_buffer_pointer_1068_delayed_4_0 to transition call_stmt_1083_sample_start_
      // RAW reenables for rx_buffer_pointer_1068_delayed_4_0
      assign_stmt_1077_update_start_ o<-& (call_stmt_1083_sample_completed_ 0)
      // start: Forward dependencies from new_buf_pointer to transition call_stmt_1083_sample_start_
      call_stmt_1083_sample_start_ <-& (call_stmt_1074_update_completed_)
      // done: Forward dependencies from new_buf_pointer to transition call_stmt_1083_sample_start_
      // RAW reenables for new_buf_pointer
      call_stmt_1074_update_start_ o<-& (call_stmt_1083_sample_completed_ 0)
      ;;[call_stmt_1083_Sample] 
      {
        $T [crr] $T [cra] 
      }
      ;;[call_stmt_1083_Update] 
      {
        $T [ccr] $T [cca] 
      }
      call_stmt_1083_sample_start_ &-> (call_stmt_1083_Sample)
      call_stmt_1083_sample_completed_ <-& (call_stmt_1083_Sample)
      call_stmt_1083_sample_completed_ &-> ($null)
      call_stmt_1083_update_start_ &-> (call_stmt_1083_Update)
      call_stmt_1083_update_completed_ <-& (call_stmt_1083_Update)
      // Call output argument 0
      // (as target) packet_size
      // Call output argument 1
      // (as target) bad_packet_identifier
      // bad_packet_identifier
      // write to interface object
      // bad_packet_identifier
      // write to interface object
      call_stmt_1083_update_start_ <-& (bad_packet_identifier_update_enable)
      // Call output argument 2
      // (as target) last_keep
      // self-release: 
      call_stmt_1083_sample_start_ o<-& (call_stmt_1083_sample_completed_ 1)
      $null &-> (call_stmt_1083_update_start_)
      call_stmt_1083_update_start_ o<-& (call_stmt_1083_update_completed_ 0)
      // start: WAR dependencies for packet_size
      // done: WAR dependencies for packet_size
      // start: WAR dependencies for bad_packet_identifier
      // done: WAR dependencies for bad_packet_identifier
      // start: WAR dependencies for last_keep
      // done: WAR dependencies for last_keep
      // end: 	$call writePayloadToMem (rx_buffer_pointer_1068_delayed_4_0 new_buf_pointer ) (packet_size bad_packet_identifier last_keep ) 
      // start:  	bad_packet_identifier_1074_delayed_8_0 := bad_packet_identifier $buffering 8 $cut_through // bits of buffering = 8. 
      //  file nic.linked.opt.aa, line 348
      $T[assign_stmt_1086_sample_start_] 
      $T[assign_stmt_1086_sample_completed_] 
      $T[assign_stmt_1086_update_start_] 
      $T[assign_stmt_1086_update_completed_] 
      // Source expression
      // bad_packet_identifier
      // Target expression
      // (as target) bad_packet_identifier_1074_delayed_8_0
      // both source and target are implicit: use interlock 
      // Interlock 
      ;;[assign_stmt_1086_Sample] 
      {
        $T [req] $T [ack] // interlock-sample.
      }
      ;;[assign_stmt_1086_Update] 
      {
        $T [req] $T [ack] // interlock-update.
      }
      assign_stmt_1086_sample_start_ &-> (assign_stmt_1086_Sample)
      assign_stmt_1086_sample_completed_ <-& (assign_stmt_1086_Sample)
      assign_stmt_1086_sample_completed_ &-> ($null)
      assign_stmt_1086_update_start_ &-> (assign_stmt_1086_Update)
      assign_stmt_1086_update_completed_ <-& (assign_stmt_1086_Update)
      // start: Forward dependencies from bad_packet_identifier to transition assign_stmt_1086_sample_start_
      assign_stmt_1086_sample_start_ <-& (call_stmt_1083_update_completed_)
      // done: Forward dependencies from bad_packet_identifier to transition assign_stmt_1086_sample_start_
      // RAW reenables for bad_packet_identifier
      call_stmt_1083_update_start_ o<-& (assign_stmt_1086_sample_completed_ 0)
      // self-release: 
      assign_stmt_1086_sample_start_ o<-& (assign_stmt_1086_sample_completed_ 1)
      $null &-> (assign_stmt_1086_update_start_)
      assign_stmt_1086_update_start_ o<-& (assign_stmt_1086_update_completed_ 0)
      // start: WAR dependencies for bad_packet_identifier_1074_delayed_8_0
      // done: WAR dependencies for bad_packet_identifier_1074_delayed_8_0
      // end:  	bad_packet_identifier_1074_delayed_8_0 := bad_packet_identifier $buffering 8 $cut_through // bits of buffering = 8. 
      // start:  	rx_buffer_pointer_1075_delayed_8_0 := rx_buffer_pointer $buffering 8 $cut_through // bits of buffering = 288. 
      //  file nic.linked.opt.aa, line 349
      $T[assign_stmt_1089_sample_start_] 
      $T[assign_stmt_1089_sample_completed_] 
      $T[assign_stmt_1089_update_start_] 
      $T[assign_stmt_1089_update_completed_] 
      // Source expression
      // rx_buffer_pointer
      // Target expression
      // (as target) rx_buffer_pointer_1075_delayed_8_0
      // both source and target are implicit: use interlock 
      // Interlock 
      ;;[assign_stmt_1089_Sample] 
      {
        $T [req] $T [ack] // interlock-sample.
      }
      ;;[assign_stmt_1089_Update] 
      {
        $T [req] $T [ack] // interlock-update.
      }
      assign_stmt_1089_sample_start_ &-> (assign_stmt_1089_Sample)
      assign_stmt_1089_sample_completed_ <-& (assign_stmt_1089_Sample)
      assign_stmt_1089_sample_completed_ &-> ($null)
      assign_stmt_1089_update_start_ &-> (assign_stmt_1089_Update)
      assign_stmt_1089_update_completed_ <-& (assign_stmt_1089_Update)
      // start: Forward dependencies from rx_buffer_pointer to transition assign_stmt_1089_sample_start_
      assign_stmt_1089_sample_start_ <-& ($entry)
      // done: Forward dependencies from rx_buffer_pointer to transition assign_stmt_1089_sample_start_
      // RAW reenables for rx_buffer_pointer
      rx_buffer_pointer_update_enable o<-& (assign_stmt_1089_sample_completed_ 0)
      // self-release: 
      assign_stmt_1089_sample_start_ o<-& (assign_stmt_1089_sample_completed_ 1)
      $null &-> (assign_stmt_1089_update_start_)
      assign_stmt_1089_update_start_ o<-& (assign_stmt_1089_update_completed_ 0)
      // start: WAR dependencies for rx_buffer_pointer_1075_delayed_8_0
      // done: WAR dependencies for rx_buffer_pointer_1075_delayed_8_0
      // end:  	rx_buffer_pointer_1075_delayed_8_0 := rx_buffer_pointer $buffering 8 $cut_through // bits of buffering = 288. 
      // start: 	$guard (~bad_packet_identifier_1074_delayed_8_0) $call writeControlInformationToMem (rx_buffer_pointer_1075_delayed_8_0 packet_size last_keep ) () 
      //  file nic.linked.opt.aa, line 350
      $T[call_stmt_1094_sample_start_] 
      $T[call_stmt_1094_sample_completed_] 
      $T[call_stmt_1094_update_start_] 
      $T[call_stmt_1094_update_completed_] 
      // Guard expression
      // bad_packet_identifier_1074_delayed_8_0
      // start: Forward dependencies from bad_packet_identifier_1074_delayed_8_0 to transition call_stmt_1094_sample_start_
      call_stmt_1094_sample_start_ <-& (assign_stmt_1086_update_completed_)
      // done: Forward dependencies from bad_packet_identifier_1074_delayed_8_0 to transition call_stmt_1094_sample_start_
      // RAW reenables for bad_packet_identifier_1074_delayed_8_0
      assign_stmt_1086_update_start_ o<-& (call_stmt_1094_sample_completed_ 0)
      // Call input argument 0
      // rx_buffer_pointer_1075_delayed_8_0
      // Call input argument 1
      // packet_size
      // Call input argument 2
      // last_keep
      // start: Forward dependencies from rx_buffer_pointer_1075_delayed_8_0 to transition call_stmt_1094_sample_start_
      call_stmt_1094_sample_start_ <-& (assign_stmt_1089_update_completed_)
      // done: Forward dependencies from rx_buffer_pointer_1075_delayed_8_0 to transition call_stmt_1094_sample_start_
      // RAW reenables for rx_buffer_pointer_1075_delayed_8_0
      assign_stmt_1089_update_start_ o<-& (call_stmt_1094_sample_completed_ 0)
      // start: Forward dependencies from packet_size to transition call_stmt_1094_sample_start_
      call_stmt_1094_sample_start_ <-& (call_stmt_1083_update_completed_)
      // done: Forward dependencies from packet_size to transition call_stmt_1094_sample_start_
      // RAW reenables for packet_size
      call_stmt_1083_update_start_ o<-& (call_stmt_1094_sample_completed_ 0)
      // start: Forward dependencies from last_keep to transition call_stmt_1094_sample_start_
      call_stmt_1094_sample_start_ <-& (call_stmt_1083_update_completed_)
      // done: Forward dependencies from last_keep to transition call_stmt_1094_sample_start_
      // RAW reenables for last_keep
      call_stmt_1083_update_start_ o<-& (call_stmt_1094_sample_completed_ 0)
      ;;[call_stmt_1094_Sample] 
      {
        $T [crr] $T [cra] 
      }
      ;;[call_stmt_1094_Update] 
      {
        $T [ccr] $T [cca] 
      }
      call_stmt_1094_sample_start_ &-> (call_stmt_1094_Sample)
      call_stmt_1094_sample_completed_ <-& (call_stmt_1094_Sample)
      call_stmt_1094_sample_completed_ &-> ($null)
      call_stmt_1094_update_start_ &-> (call_stmt_1094_Update)
      call_stmt_1094_update_completed_ <-& (call_stmt_1094_Update)
      // self-release: 
      call_stmt_1094_sample_start_ o<-& (call_stmt_1094_sample_completed_ 1)
      $null &-> (call_stmt_1094_update_start_)
      call_stmt_1094_update_start_ o<-& (call_stmt_1094_update_completed_ 0)
      // end: 	$guard (~bad_packet_identifier_1074_delayed_8_0) $call writeControlInformationToMem (rx_buffer_pointer_1075_delayed_8_0 packet_size last_keep ) () 
      // load-store dependencies..
      // pipe read/write dependencies for pipe MEMORY_TO_NIC_RESPONSE
      // read-dependencies for pipe MEMORY_TO_NIC_RESPONSE
      call_stmt_1083_sample_start_ <-& (call_stmt_1074_update_completed_)
      call_stmt_1094_sample_start_ <-& (call_stmt_1083_update_completed_)
      // ring dependency in pipeline.
      call_stmt_1074_update_start_ o<-& (call_stmt_1094_update_completed_ 0)
      // write-dependencies for pipe MEMORY_TO_NIC_RESPONSE
      // signal write dependencies for MEMORY_TO_NIC_RESPONSE
      // pipe read/write dependencies for pipe NIC_TO_MEMORY_REQUEST
      // read-dependencies for pipe NIC_TO_MEMORY_REQUEST
      // write-dependencies for pipe NIC_TO_MEMORY_REQUEST
      call_stmt_1083_sample_start_ <-& (call_stmt_1074_update_completed_)
      call_stmt_1094_sample_start_ <-& (call_stmt_1083_update_completed_)
      // ring dependency in pipeline.
      call_stmt_1074_sample_start_ o<-& (call_stmt_1094_update_completed_ 0)
      // signal write dependencies for NIC_TO_MEMORY_REQUEST
      // pipe read/write dependencies for pipe nic_rx_to_header
      // read-dependencies for pipe nic_rx_to_header
      // write-dependencies for pipe nic_rx_to_header
      // signal write dependencies for nic_rx_to_header
      // pipe read/write dependencies for pipe nic_rx_to_packet
      // read-dependencies for pipe nic_rx_to_packet
      // write-dependencies for pipe nic_rx_to_packet
      // signal write dependencies for nic_rx_to_packet
    }
    ( bad_packet_identifier_update_enable_in)
    ( rx_buffer_pointer_update_enable_out)
    $P [rx_buffer_pointer_update_enable] 
    $P [bad_packet_identifier_update_enable] 
    $bind rx_buffer_pointer_update_enable <= call_stmt_1074_to_call_stmt_1094 : rx_buffer_pointer_update_enable_out
    $bind bad_packet_identifier_update_enable => call_stmt_1074_to_call_stmt_1094 : bad_packet_identifier_update_enable_in
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %loadBuffer
    //  file nic.linked.opt.aa, line 340
    // 	$call writeEthernetHeaderToMem (rx_buffer_pointer ) (new_buf_pointer ) 
    //  file nic.linked.opt.aa, line 345
    // 	$call writePayloadToMem (rx_buffer_pointer_1068_delayed_4_0 new_buf_pointer ) (packet_size bad_packet_identifier last_keep ) 
    //  file nic.linked.opt.aa, line 347
    // 	$guard (~bad_packet_identifier_1074_delayed_8_0) $call writeControlInformationToMem (rx_buffer_pointer_1075_delayed_8_0 packet_size last_keep ) () 
    //  file nic.linked.opt.aa, line 350
    // 	$call writeEthernetHeaderToMem (rx_buffer_pointer ) (new_buf_pointer ) 
    //  file nic.linked.opt.aa, line 345
    // new_buf_pointer
    $W[new_buf_pointer_1074] : $int<36>
    // 	rx_buffer_pointer_1068_delayed_4_0 := rx_buffer_pointer $buffering 4 $cut_through // bits of buffering = 144. 
    //  file nic.linked.opt.aa, line 346
    // rx_buffer_pointer_1068_delayed_4_0
    $W[rx_buffer_pointer_1068_delayed_4_0_1077] : $int<36>
    // 	$call writePayloadToMem (rx_buffer_pointer_1068_delayed_4_0 new_buf_pointer ) (packet_size bad_packet_identifier last_keep ) 
    //  file nic.linked.opt.aa, line 347
    // packet_size
    $W[packet_size_1083] : $int<8>
    // bad_packet_identifier
    // last_keep
    $W[last_keep_1083] : $int<8>
    // 	bad_packet_identifier_1074_delayed_8_0 := bad_packet_identifier $buffering 8 $cut_through // bits of buffering = 8. 
    //  file nic.linked.opt.aa, line 348
    // bad_packet_identifier_1074_delayed_8_0
    $W[bad_packet_identifier_1074_delayed_8_0_1086] : $int<1>
    // 	rx_buffer_pointer_1075_delayed_8_0 := rx_buffer_pointer $buffering 8 $cut_through // bits of buffering = 288. 
    //  file nic.linked.opt.aa, line 349
    // rx_buffer_pointer_1075_delayed_8_0
    $W[rx_buffer_pointer_1075_delayed_8_0_1089] : $int<36>
    // 	$guard (~bad_packet_identifier_1074_delayed_8_0) $call writeControlInformationToMem (rx_buffer_pointer_1075_delayed_8_0 packet_size last_keep ) () 
    //  file nic.linked.opt.aa, line 350
    // 	$call writeEthernetHeaderToMem (rx_buffer_pointer ) (new_buf_pointer ) 
    //  file nic.linked.opt.aa, line 345
    $call [call_stmt_1074_call] $module writeEthernetHeaderToMem(rx_buffer_pointer) (new_buf_pointer_1074)  
    $delay call_stmt_1074_call 4
    $buffering  $in call_stmt_1074_call rx_buffer_pointer 1
    $buffering  $out call_stmt_1074_call new_buf_pointer_1074 1
    // 	rx_buffer_pointer_1068_delayed_4_0 := rx_buffer_pointer $buffering 4 $cut_through // bits of buffering = 144. 
    //  file nic.linked.opt.aa, line 346
    # := [W_rx_buffer_pointer_1068_delayed_4_0_1075_inst] (rx_buffer_pointer) (rx_buffer_pointer_1068_delayed_4_0_1077)  $cut_through   
    $buffering  $out W_rx_buffer_pointer_1068_delayed_4_0_1075_inst rx_buffer_pointer_1068_delayed_4_0_1077 4
    // 	$call writePayloadToMem (rx_buffer_pointer_1068_delayed_4_0 new_buf_pointer ) (packet_size bad_packet_identifier last_keep ) 
    //  file nic.linked.opt.aa, line 347
    $call [call_stmt_1083_call] $module writePayloadToMem(rx_buffer_pointer_1068_delayed_4_0_1077 new_buf_pointer_1074) (packet_size_1083 bad_packet_identifier last_keep_1083)  
    $delay call_stmt_1083_call 4
    $buffering  $in call_stmt_1083_call rx_buffer_pointer_1068_delayed_4_0_1077 1
    $buffering  $in call_stmt_1083_call new_buf_pointer_1074 1
    $buffering  $out call_stmt_1083_call packet_size_1083 1
    $buffering  $out call_stmt_1083_call bad_packet_identifier 1
    $buffering  $out call_stmt_1083_call last_keep_1083 1
    // 	bad_packet_identifier_1074_delayed_8_0 := bad_packet_identifier $buffering 8 $cut_through // bits of buffering = 8. 
    //  file nic.linked.opt.aa, line 348
    # := [W_bad_packet_identifier_1074_delayed_8_0_1084_inst] (bad_packet_identifier) (bad_packet_identifier_1074_delayed_8_0_1086)  $cut_through   
    $buffering  $out W_bad_packet_identifier_1074_delayed_8_0_1084_inst bad_packet_identifier_1074_delayed_8_0_1086 8
    // 	rx_buffer_pointer_1075_delayed_8_0 := rx_buffer_pointer $buffering 8 $cut_through // bits of buffering = 288. 
    //  file nic.linked.opt.aa, line 349
    # := [W_rx_buffer_pointer_1075_delayed_8_0_1087_inst] (rx_buffer_pointer) (rx_buffer_pointer_1075_delayed_8_0_1089)  $cut_through   
    $buffering  $out W_rx_buffer_pointer_1075_delayed_8_0_1087_inst rx_buffer_pointer_1075_delayed_8_0_1089 8
    // 	$guard (~bad_packet_identifier_1074_delayed_8_0) $call writeControlInformationToMem (rx_buffer_pointer_1075_delayed_8_0 packet_size last_keep ) () 
    //  file nic.linked.opt.aa, line 350
    $call [call_stmt_1094_call] $module writeControlInformationToMem(rx_buffer_pointer_1075_delayed_8_0_1089 packet_size_1083 last_keep_1083) () $guard ( ~ bad_packet_identifier_1074_delayed_8_0_1086 )  
    $delay call_stmt_1094_call 4
    $buffering  $in call_stmt_1094_call rx_buffer_pointer_1075_delayed_8_0_1089 1
    $buffering  $in call_stmt_1094_call packet_size_1083 1
    $buffering  $in call_stmt_1094_call last_keep_1083 1
  }
  // end data-path
  // 	$call writeEthernetHeaderToMem (rx_buffer_pointer ) (new_buf_pointer ) 
  //  file nic.linked.opt.aa, line 345
  // rx_buffer_pointer
  call_stmt_1074_call <=> (call_stmt_1074_to_call_stmt_1094/call_stmt_1074_Sample/crr call_stmt_1074_to_call_stmt_1094/call_stmt_1074_Update/ccr) (call_stmt_1074_to_call_stmt_1094/call_stmt_1074_Sample/cra call_stmt_1074_to_call_stmt_1094/call_stmt_1074_Update/cca)
  // 	rx_buffer_pointer_1068_delayed_4_0 := rx_buffer_pointer $buffering 4 $cut_through // bits of buffering = 144. 
  //  file nic.linked.opt.aa, line 346
  // rx_buffer_pointer
  W_rx_buffer_pointer_1068_delayed_4_0_1075_inst <=> (call_stmt_1074_to_call_stmt_1094/assign_stmt_1077_Sample/req call_stmt_1074_to_call_stmt_1094/assign_stmt_1077_Update/req) (call_stmt_1074_to_call_stmt_1094/assign_stmt_1077_Sample/ack call_stmt_1074_to_call_stmt_1094/assign_stmt_1077_Update/ack)
  // 	$call writePayloadToMem (rx_buffer_pointer_1068_delayed_4_0 new_buf_pointer ) (packet_size bad_packet_identifier last_keep ) 
  //  file nic.linked.opt.aa, line 347
  // rx_buffer_pointer_1068_delayed_4_0
  // new_buf_pointer
  call_stmt_1083_call <=> (call_stmt_1074_to_call_stmt_1094/call_stmt_1083_Sample/crr call_stmt_1074_to_call_stmt_1094/call_stmt_1083_Update/ccr) (call_stmt_1074_to_call_stmt_1094/call_stmt_1083_Sample/cra call_stmt_1074_to_call_stmt_1094/call_stmt_1083_Update/cca)
  // 	bad_packet_identifier_1074_delayed_8_0 := bad_packet_identifier $buffering 8 $cut_through // bits of buffering = 8. 
  //  file nic.linked.opt.aa, line 348
  // bad_packet_identifier
  W_bad_packet_identifier_1074_delayed_8_0_1084_inst <=> (call_stmt_1074_to_call_stmt_1094/assign_stmt_1086_Sample/req call_stmt_1074_to_call_stmt_1094/assign_stmt_1086_Update/req) (call_stmt_1074_to_call_stmt_1094/assign_stmt_1086_Sample/ack call_stmt_1074_to_call_stmt_1094/assign_stmt_1086_Update/ack)
  // 	rx_buffer_pointer_1075_delayed_8_0 := rx_buffer_pointer $buffering 8 $cut_through // bits of buffering = 288. 
  //  file nic.linked.opt.aa, line 349
  // rx_buffer_pointer
  W_rx_buffer_pointer_1075_delayed_8_0_1087_inst <=> (call_stmt_1074_to_call_stmt_1094/assign_stmt_1089_Sample/req call_stmt_1074_to_call_stmt_1094/assign_stmt_1089_Update/req) (call_stmt_1074_to_call_stmt_1094/assign_stmt_1089_Sample/ack call_stmt_1074_to_call_stmt_1094/assign_stmt_1089_Update/ack)
  // 	$guard (~bad_packet_identifier_1074_delayed_8_0) $call writeControlInformationToMem (rx_buffer_pointer_1075_delayed_8_0 packet_size last_keep ) () 
  //  file nic.linked.opt.aa, line 350
  // rx_buffer_pointer_1075_delayed_8_0
  // packet_size
  // last_keep
  call_stmt_1094_call <=> (call_stmt_1074_to_call_stmt_1094/call_stmt_1094_Sample/crr call_stmt_1074_to_call_stmt_1094/call_stmt_1094_Update/ccr) (call_stmt_1074_to_call_stmt_1094/call_stmt_1094_Sample/cra call_stmt_1074_to_call_stmt_1094/call_stmt_1094_Update/cca)
  $attribute delay => "10"
}
$module [setQueueElement] 
{
  $in q_base_address:$int<36>
  // can point into 
  write_index:$int<32>
  // can point into 
  q_w_data:$int<32>
  // can point into 
  // pipe-declarations for block %setQueueElement
  //  file nic.linked.opt.aa, line 353
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    ::[assign_stmt_1105_to_call_stmt_1161] 
    {
      // start: WAR dependencies for buffer_address
      // ignored out-of-scope w_root  q_base_address : $uint<36> 
      // done: WAR dependencies for buffer_address
      // start:  	$volatile buffer_address := (q_base_address + ($bitcast ($uint<36>) 24  )) $buffering 1
      //  file nic.linked.opt.aa, line 358
      // volatile! 
      // Source expression
      // (q_base_address + ($bitcast ($uint<36>) 24  ))
      // q_base_address
      // Target expression
      // (as target) buffer_address
      // start: WAR dependencies for buffer_address
      // ignored out-of-scope w_root  q_base_address : $uint<36> 
      // done: WAR dependencies for buffer_address
      // end:  	$volatile buffer_address := (q_base_address + ($bitcast ($uint<36>) 24  )) $buffering 1
      // start: WAR dependencies for element_pair_address
      // ignored out-of-scope w_root  q_base_address : $uint<36> 
      // ignored out-of-scope w_root  write_index : $uint<32> 
      // done: WAR dependencies for element_pair_address
      // start:  	$volatile element_pair_address := (buffer_address + ($bitcast ($uint<36>) (( $slice write_index 31 1 )  && ($bitcast ($uint<3>) _b0  )) )) $buffering 1
      //  file nic.linked.opt.aa, line 359
      // volatile! 
      // Source expression
      // (buffer_address + ($bitcast ($uint<36>) (( $slice write_index 31 1 )  && ($bitcast ($uint<3>) _b0  )) ))
      // buffer_address
      // ($bitcast ($uint<36>) (( $slice write_index 31 1 )  && ($bitcast ($uint<3>) _b0  )) )
      // (( $slice write_index 31 1 )  && ($bitcast ($uint<3>) _b0  ))
      // ( $slice write_index 31 1 ) 
      // write_index
      // Target expression
      // (as target) element_pair_address
      // start: WAR dependencies for element_pair_address
      // ignored out-of-scope w_root  q_base_address : $uint<36> 
      // ignored out-of-scope w_root  write_index : $uint<32> 
      // done: WAR dependencies for element_pair_address
      // end:  	$volatile element_pair_address := (buffer_address + ($bitcast ($uint<36>) (( $slice write_index 31 1 )  && ($bitcast ($uint<3>) _b0  )) )) $buffering 1
      // start: WAR dependencies for bmask
      // ignored out-of-scope w_root  write_index : $uint<32> 
      // done: WAR dependencies for bmask
      // start:  	$volatile bmask := ( $mux (write_index [] 0 ) (($bitcast ($uint<4>) _b0  ) && ( ~ ($bitcast ($uint<4>) _b0  ) ))  (( ~ ($bitcast ($uint<4>) _b0  ) ) && ($bitcast ($uint<4>) _b0  )) )  $buffering 1
      //  file nic.linked.opt.aa, line 360
      // volatile! 
      // Source expression
      // ( $mux (write_index [] 0 ) (($bitcast ($uint<4>) _b0  ) && ( ~ ($bitcast ($uint<4>) _b0  ) ))  (( ~ ($bitcast ($uint<4>) _b0  ) ) && ($bitcast ($uint<4>) _b0  )) ) 
      // (write_index [] 0 )
      // write_index
      // Target expression
      // (as target) bmask
      // start: WAR dependencies for bmask
      // ignored out-of-scope w_root  write_index : $uint<32> 
      // done: WAR dependencies for bmask
      // end:  	$volatile bmask := ( $mux (write_index [] 0 ) (($bitcast ($uint<4>) _b0  ) && ( ~ ($bitcast ($uint<4>) _b0  ) ))  (( ~ ($bitcast ($uint<4>) _b0  ) ) && ($bitcast ($uint<4>) _b0  )) )  $buffering 1
      // start: WAR dependencies for wval
      // ignored out-of-scope w_root  write_index : $uint<32> 
      // ignored out-of-scope w_root  q_w_data : $uint<32> 
      // done: WAR dependencies for wval
      // start:  	$volatile wval := ( $mux (write_index [] 0 ) (($bitcast ($uint<32>) _b0  ) && q_w_data)  (q_w_data && ($bitcast ($uint<32>) _b0  )) )  $buffering 1
      //  file nic.linked.opt.aa, line 361
      // volatile! 
      // Source expression
      // ( $mux (write_index [] 0 ) (($bitcast ($uint<32>) _b0  ) && q_w_data)  (q_w_data && ($bitcast ($uint<32>) _b0  )) ) 
      // (write_index [] 0 )
      // write_index
      // (($bitcast ($uint<32>) _b0  ) && q_w_data)
      // q_w_data
      // (q_w_data && ($bitcast ($uint<32>) _b0  ))
      // q_w_data
      // Target expression
      // (as target) wval
      // start: WAR dependencies for wval
      // ignored out-of-scope w_root  write_index : $uint<32> 
      // ignored out-of-scope w_root  q_w_data : $uint<32> 
      // done: WAR dependencies for wval
      // end:  	$volatile wval := ( $mux (write_index [] 0 ) (($bitcast ($uint<32>) _b0  ) && q_w_data)  (q_w_data && ($bitcast ($uint<32>) _b0  )) )  $buffering 1
      // start: 	$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b0  ) bmask element_pair_address wval ) (ignore ) 
      //  file nic.linked.opt.aa, line 363
      $T[call_stmt_1161_sample_start_] 
      $T[call_stmt_1161_sample_completed_] 
      $T[call_stmt_1161_update_start_] 
      $T[call_stmt_1161_update_completed_] 
      // Call input argument 0
      // Call input argument 1
      // Call input argument 2
      // bmask
      // Call input argument 3
      // element_pair_address
      // Call input argument 4
      // wval
      // start: Forward dependencies from bmask to transition call_stmt_1161_sample_start_
      // done: Forward dependencies from bmask to transition call_stmt_1161_sample_start_
      // start: Forward dependencies from element_pair_address to transition call_stmt_1161_sample_start_
      // done: Forward dependencies from element_pair_address to transition call_stmt_1161_sample_start_
      // start: Forward dependencies from wval to transition call_stmt_1161_sample_start_
      // done: Forward dependencies from wval to transition call_stmt_1161_sample_start_
      ;;[call_stmt_1161_Sample] 
      {
        $T [crr] $T [cra] 
      }
      ;;[call_stmt_1161_Update] 
      {
        $T [ccr] $T [cca] 
      }
      call_stmt_1161_sample_start_ &-> (call_stmt_1161_Sample)
      call_stmt_1161_sample_completed_ <-& (call_stmt_1161_Sample)
      call_stmt_1161_sample_completed_ &-> ($null)
      call_stmt_1161_update_start_ &-> (call_stmt_1161_Update)
      call_stmt_1161_update_completed_ <-& (call_stmt_1161_Update)
      // Call output argument 0
      // (as target) ignore
      // start: WAR dependencies for ignore
      // done: WAR dependencies for ignore
      // end: 	$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b0  ) bmask element_pair_address wval ) (ignore ) 
      // load-store dependencies..
      // pipe read/write dependencies for pipe MEMORY_TO_NIC_RESPONSE
      // read-dependencies for pipe MEMORY_TO_NIC_RESPONSE
      // write-dependencies for pipe MEMORY_TO_NIC_RESPONSE
      // signal write dependencies for MEMORY_TO_NIC_RESPONSE
      // pipe read/write dependencies for pipe NIC_TO_MEMORY_REQUEST
      // read-dependencies for pipe NIC_TO_MEMORY_REQUEST
      // write-dependencies for pipe NIC_TO_MEMORY_REQUEST
      // signal write dependencies for NIC_TO_MEMORY_REQUEST
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %setQueueElement
    //  file nic.linked.opt.aa, line 353
    // ($bitcast ($uint<36>) 24  )
    $constant $W[type_cast_1103_wire_constant] : $int<36> := _b000000000000000000000000000000011000// 24
    // ($bitcast ($uint<3>) _b0  )
    $constant $W[type_cast_1111_wire_constant] : $int<3> := _b000// 0
    // ( $mux (write_index [] 0 ) (($bitcast ($uint<4>) _b0  ) && ( ~ ($bitcast ($uint<4>) _b0  ) ))  (( ~ ($bitcast ($uint<4>) _b0  ) ) && ($bitcast ($uint<4>) _b0  )) ) 
    // 0 
    $constant $W[konst_1118_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // (($bitcast ($uint<4>) _b0  ) && ( ~ ($bitcast ($uint<4>) _b0  ) ))
    $constant $W[CONCAT_u4_u8_1125_wire_constant] : $int<8> := _b00001111// 15
    // (( ~ ($bitcast ($uint<4>) _b0  ) ) && ($bitcast ($uint<4>) _b0  ))
    $constant $W[CONCAT_u4_u8_1131_wire_constant] : $int<8> := _b11110000// 240
    // ( $mux (write_index [] 0 ) (($bitcast ($uint<32>) _b0  ) && q_w_data)  (q_w_data && ($bitcast ($uint<32>) _b0  )) ) 
    // 0 
    $constant $W[konst_1136_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // ($bitcast ($uint<32>) _b0  )
    $constant $W[type_cast_1139_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // ($bitcast ($uint<32>) _b0  )
    $constant $W[type_cast_1144_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // 	$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b0  ) bmask element_pair_address wval ) (ignore ) 
    //  file nic.linked.opt.aa, line 363
    // ($bitcast ($uint<1>) _b0  )
    $constant $W[type_cast_1154_wire_constant] : $int<1> := _b0// 0
    // ($bitcast ($uint<1>) _b0  )
    $constant $W[type_cast_1156_wire_constant] : $int<1> := _b0// 0
    // 	$volatile buffer_address := (q_base_address + ($bitcast ($uint<36>) 24  )) $buffering 1
    //  file nic.linked.opt.aa, line 358
    // buffer_address
    $W[buffer_address_1105] : $int<36>
    // 	$volatile element_pair_address := (buffer_address + ($bitcast ($uint<36>) (( $slice write_index 31 1 )  && ($bitcast ($uint<3>) _b0  )) )) $buffering 1
    //  file nic.linked.opt.aa, line 359
    // ( $slice write_index 31 1 ) 
    $intermediate $W[slice_1109_wire] : $int<31>
    // (( $slice write_index 31 1 )  && ($bitcast ($uint<3>) _b0  ))
    $intermediate $W[CONCAT_u31_u34_1112_wire] : $int<34>
    // ($bitcast ($uint<36>) (( $slice write_index 31 1 )  && ($bitcast ($uint<3>) _b0  )) )
    $intermediate $W[type_cast_1113_wire] : $int<36>
    // element_pair_address
    $W[element_pair_address_1115] : $int<36>
    // 	$volatile bmask := ( $mux (write_index [] 0 ) (($bitcast ($uint<4>) _b0  ) && ( ~ ($bitcast ($uint<4>) _b0  ) ))  (( ~ ($bitcast ($uint<4>) _b0  ) ) && ($bitcast ($uint<4>) _b0  )) )  $buffering 1
    //  file nic.linked.opt.aa, line 360
    // (write_index [] 0 )
    $intermediate $W[BITSEL_u32_u1_1119_wire] : $int<1>
    // bmask
    $W[bmask_1133] : $int<8>
    // 	$volatile wval := ( $mux (write_index [] 0 ) (($bitcast ($uint<32>) _b0  ) && q_w_data)  (q_w_data && ($bitcast ($uint<32>) _b0  )) )  $buffering 1
    //  file nic.linked.opt.aa, line 361
    // (write_index [] 0 )
    $intermediate $W[BITSEL_u32_u1_1137_wire] : $int<1>
    // (($bitcast ($uint<32>) _b0  ) && q_w_data)
    $intermediate $W[CONCAT_u32_u64_1141_wire] : $int<64>
    // (q_w_data && ($bitcast ($uint<32>) _b0  ))
    $intermediate $W[CONCAT_u32_u64_1145_wire] : $int<64>
    // wval
    $W[wval_1147] : $int<64>
    // 	$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b0  ) bmask element_pair_address wval ) (ignore ) 
    //  file nic.linked.opt.aa, line 363
    // ignore
    $W[ignore_1161] : $int<64>
    // 	$volatile buffer_address := (q_base_address + ($bitcast ($uint<36>) 24  )) $buffering 1
    //  file nic.linked.opt.aa, line 358
    // (q_base_address + ($bitcast ($uint<36>) 24  ))
    +[ADD_u36_u36_1104_inst] (q_base_address type_cast_1103_wire_constant) (buffer_address_1105)   $flowthrough 
    $delay ADD_u36_u36_1104_inst 0
    // 	$volatile element_pair_address := (buffer_address + ($bitcast ($uint<36>) (( $slice write_index 31 1 )  && ($bitcast ($uint<3>) _b0  )) )) $buffering 1
    //  file nic.linked.opt.aa, line 359
    // ( $slice write_index 31 1 ) 
    [:] [slice_1109_inst] (write_index 31 1) (slice_1109_wire)  $flowthrough
    $delay slice_1109_inst 0
    // (( $slice write_index 31 1 )  && ($bitcast ($uint<3>) _b0  ))
    &&[CONCAT_u31_u34_1112_inst] (slice_1109_wire type_cast_1111_wire_constant) (CONCAT_u31_u34_1112_wire)   $flowthrough 
    $delay CONCAT_u31_u34_1112_inst 0
    // ($bitcast ($uint<36>) (( $slice write_index 31 1 )  && ($bitcast ($uint<3>) _b0  )) )
    # := [type_cast_1113_inst] (CONCAT_u31_u34_1112_wire) (type_cast_1113_wire)   $flowthrough
    $delay type_cast_1113_inst 0
    // (buffer_address + ($bitcast ($uint<36>) (( $slice write_index 31 1 )  && ($bitcast ($uint<3>) _b0  )) ))
    +[ADD_u36_u36_1114_inst] (buffer_address_1105 type_cast_1113_wire) (element_pair_address_1115)   $flowthrough 
    $delay ADD_u36_u36_1114_inst 0
    // 	$volatile bmask := ( $mux (write_index [] 0 ) (($bitcast ($uint<4>) _b0  ) && ( ~ ($bitcast ($uint<4>) _b0  ) ))  (( ~ ($bitcast ($uint<4>) _b0  ) ) && ($bitcast ($uint<4>) _b0  )) )  $buffering 1
    //  file nic.linked.opt.aa, line 360
    // (write_index [] 0 )
    [][BITSEL_u32_u1_1119_inst] (write_index konst_1118_wire_constant) (BITSEL_u32_u1_1119_wire)   $flowthrough 
    $delay BITSEL_u32_u1_1119_inst 0
    // ( $mux (write_index [] 0 ) (($bitcast ($uint<4>) _b0  ) && ( ~ ($bitcast ($uint<4>) _b0  ) ))  (( ~ ($bitcast ($uint<4>) _b0  ) ) && ($bitcast ($uint<4>) _b0  )) ) 
    ? [MUX_1132_inst] (BITSEL_u32_u1_1119_wire CONCAT_u4_u8_1125_wire_constant CONCAT_u4_u8_1131_wire_constant) (bmask_1133)  $flowthrough
    // 	$volatile wval := ( $mux (write_index [] 0 ) (($bitcast ($uint<32>) _b0  ) && q_w_data)  (q_w_data && ($bitcast ($uint<32>) _b0  )) )  $buffering 1
    //  file nic.linked.opt.aa, line 361
    // (write_index [] 0 )
    [][BITSEL_u32_u1_1137_inst] (write_index konst_1136_wire_constant) (BITSEL_u32_u1_1137_wire)   $flowthrough 
    $delay BITSEL_u32_u1_1137_inst 0
    // (($bitcast ($uint<32>) _b0  ) && q_w_data)
    &&[CONCAT_u32_u64_1141_inst] (type_cast_1139_wire_constant q_w_data) (CONCAT_u32_u64_1141_wire)   $flowthrough 
    $delay CONCAT_u32_u64_1141_inst 0
    // (q_w_data && ($bitcast ($uint<32>) _b0  ))
    &&[CONCAT_u32_u64_1145_inst] (q_w_data type_cast_1144_wire_constant) (CONCAT_u32_u64_1145_wire)   $flowthrough 
    $delay CONCAT_u32_u64_1145_inst 0
    // ( $mux (write_index [] 0 ) (($bitcast ($uint<32>) _b0  ) && q_w_data)  (q_w_data && ($bitcast ($uint<32>) _b0  )) ) 
    ? [MUX_1146_inst] (BITSEL_u32_u1_1137_wire CONCAT_u32_u64_1141_wire CONCAT_u32_u64_1145_wire) (wval_1147)  $flowthrough
    // 	$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b0  ) bmask element_pair_address wval ) (ignore ) 
    //  file nic.linked.opt.aa, line 363
    $call [call_stmt_1161_call] $module accessMemory(type_cast_1154_wire_constant type_cast_1156_wire_constant bmask_1133 element_pair_address_1115 wval_1147) (ignore_1161)  
    $delay call_stmt_1161_call 3
    $buffering  $in call_stmt_1161_call type_cast_1154_wire_constant 1
    $buffering  $in call_stmt_1161_call type_cast_1156_wire_constant 1
    $buffering  $in call_stmt_1161_call bmask_1133 1
    $buffering  $in call_stmt_1161_call element_pair_address_1115 1
    $buffering  $in call_stmt_1161_call wval_1147 1
    $buffering  $out call_stmt_1161_call ignore_1161 1
  }
  // end data-path
  // 	$volatile buffer_address := (q_base_address + ($bitcast ($uint<36>) 24  )) $buffering 1
  //  file nic.linked.opt.aa, line 358
  // (q_base_address + ($bitcast ($uint<36>) 24  ))
  // q_base_address
  // 	$volatile element_pair_address := (buffer_address + ($bitcast ($uint<36>) (( $slice write_index 31 1 )  && ($bitcast ($uint<3>) _b0  )) )) $buffering 1
  //  file nic.linked.opt.aa, line 359
  // (buffer_address + ($bitcast ($uint<36>) (( $slice write_index 31 1 )  && ($bitcast ($uint<3>) _b0  )) ))
  // buffer_address
  // (( $slice write_index 31 1 )  && ($bitcast ($uint<3>) _b0  ))
  // write_index
  // 	$volatile bmask := ( $mux (write_index [] 0 ) (($bitcast ($uint<4>) _b0  ) && ( ~ ($bitcast ($uint<4>) _b0  ) ))  (( ~ ($bitcast ($uint<4>) _b0  ) ) && ($bitcast ($uint<4>) _b0  )) )  $buffering 1
  //  file nic.linked.opt.aa, line 360
  // (write_index [] 0 )
  // write_index
  // ( $mux (write_index [] 0 ) (($bitcast ($uint<4>) _b0  ) && ( ~ ($bitcast ($uint<4>) _b0  ) ))  (( ~ ($bitcast ($uint<4>) _b0  ) ) && ($bitcast ($uint<4>) _b0  )) ) 
  // 	$volatile wval := ( $mux (write_index [] 0 ) (($bitcast ($uint<32>) _b0  ) && q_w_data)  (q_w_data && ($bitcast ($uint<32>) _b0  )) )  $buffering 1
  //  file nic.linked.opt.aa, line 361
  // (write_index [] 0 )
  // write_index
  // (($bitcast ($uint<32>) _b0  ) && q_w_data)
  // q_w_data
  // (q_w_data && ($bitcast ($uint<32>) _b0  ))
  // q_w_data
  // ( $mux (write_index [] 0 ) (($bitcast ($uint<32>) _b0  ) && q_w_data)  (q_w_data && ($bitcast ($uint<32>) _b0  )) ) 
  // 	$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b0  ) bmask element_pair_address wval ) (ignore ) 
  //  file nic.linked.opt.aa, line 363
  // bmask
  // element_pair_address
  // wval
  call_stmt_1161_call <=> (assign_stmt_1105_to_call_stmt_1161/call_stmt_1161_Sample/crr assign_stmt_1105_to_call_stmt_1161/call_stmt_1161_Update/ccr) (assign_stmt_1105_to_call_stmt_1161/call_stmt_1161_Sample/cra assign_stmt_1105_to_call_stmt_1161/call_stmt_1161_Update/cca)
}
$module [pushIntoQueue] 
{
  $in lock:$int<1>
  // can point into 
  q_base_address:$int<36>
  // can point into 
  q_w_data:$int<32>
  // can point into 
  $out status:$int<1>
  // can point into 
  // pipe-declarations for block %pushIntoQueue
  //  file nic.linked.opt.aa, line 365
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    ::[call_stmt_1171] 
    {
      // start: 	$guard (lock) $call acquireLock (q_base_address ) (m_ok ) 
      //  file nic.linked.opt.aa, line 370
      $T[call_stmt_1171_sample_start_] 
      $T[call_stmt_1171_sample_completed_] 
      $T[call_stmt_1171_update_start_] 
      $T[call_stmt_1171_update_completed_] 
      // Guard expression
      // lock
      // start: Forward dependencies from lock to transition call_stmt_1171_sample_start_
      // done: Forward dependencies from lock to transition call_stmt_1171_sample_start_
      // Call input argument 0
      // q_base_address
      // start: Forward dependencies from q_base_address to transition call_stmt_1171_sample_start_
      // done: Forward dependencies from q_base_address to transition call_stmt_1171_sample_start_
      ;;[call_stmt_1171_Sample] 
      {
        $T [crr] $T [cra] 
      }
      ;;[call_stmt_1171_Update] 
      {
        $T [ccr] $T [cca] 
      }
      call_stmt_1171_sample_start_ &-> (call_stmt_1171_Sample)
      call_stmt_1171_sample_completed_ <-& (call_stmt_1171_Sample)
      call_stmt_1171_sample_completed_ &-> ($null)
      call_stmt_1171_update_start_ &-> (call_stmt_1171_Update)
      call_stmt_1171_update_completed_ <-& (call_stmt_1171_Update)
      // Call output argument 0
      // (as target) m_ok
      // start: WAR dependencies for m_ok
      // done: WAR dependencies for m_ok
      // end: 	$guard (lock) $call acquireLock (q_base_address ) (m_ok ) 
      // load-store dependencies..
      // pipe read/write dependencies for pipe MEMORY_TO_NIC_RESPONSE
      // read-dependencies for pipe MEMORY_TO_NIC_RESPONSE
      // write-dependencies for pipe MEMORY_TO_NIC_RESPONSE
      // signal write dependencies for MEMORY_TO_NIC_RESPONSE
      // pipe read/write dependencies for pipe NIC_TO_MEMORY_REQUEST
      // read-dependencies for pipe NIC_TO_MEMORY_REQUEST
      // write-dependencies for pipe NIC_TO_MEMORY_REQUEST
      // signal write dependencies for NIC_TO_MEMORY_REQUEST
    }
    ::[call_stmt_1179_to_call_stmt_1218] 
    {
      // start: 	$call getQueuePointers (q_base_address ) (write_index read_index ) 
      //  file nic.linked.opt.aa, line 373
      $T[call_stmt_1179_sample_start_] 
      $T[call_stmt_1179_sample_completed_] 
      $T[call_stmt_1179_update_start_] 
      $T[call_stmt_1179_update_completed_] 
      // Call input argument 0
      // q_base_address
      // start: Forward dependencies from q_base_address to transition call_stmt_1179_sample_start_
      // done: Forward dependencies from q_base_address to transition call_stmt_1179_sample_start_
      ;;[call_stmt_1179_Sample] 
      {
        $T [crr] $T [cra] 
      }
      ;;[call_stmt_1179_Update] 
      {
        $T [ccr] $T [cca] 
      }
      call_stmt_1179_sample_start_ &-> (call_stmt_1179_Sample)
      call_stmt_1179_sample_completed_ <-& (call_stmt_1179_Sample)
      call_stmt_1179_sample_completed_ &-> ($null)
      call_stmt_1179_update_start_ &-> (call_stmt_1179_Update)
      call_stmt_1179_update_completed_ <-& (call_stmt_1179_Update)
      // Call output argument 0
      // (as target) write_index
      // Call output argument 1
      // (as target) read_index
      // start: WAR dependencies for write_index
      // done: WAR dependencies for write_index
      // start: WAR dependencies for read_index
      // done: WAR dependencies for read_index
      // end: 	$call getQueuePointers (q_base_address ) (write_index read_index ) 
      // start: 	$call getQueueLength (q_base_address ) (Queue_Length ) 
      //  file nic.linked.opt.aa, line 374
      $T[call_stmt_1182_sample_start_] 
      $T[call_stmt_1182_sample_completed_] 
      $T[call_stmt_1182_update_start_] 
      $T[call_stmt_1182_update_completed_] 
      // Call input argument 0
      // q_base_address
      // start: Forward dependencies from q_base_address to transition call_stmt_1182_sample_start_
      // done: Forward dependencies from q_base_address to transition call_stmt_1182_sample_start_
      ;;[call_stmt_1182_Sample] 
      {
        $T [crr] $T [cra] 
      }
      ;;[call_stmt_1182_Update] 
      {
        $T [ccr] $T [cca] 
      }
      call_stmt_1182_sample_start_ &-> (call_stmt_1182_Sample)
      call_stmt_1182_sample_completed_ <-& (call_stmt_1182_Sample)
      call_stmt_1182_sample_completed_ &-> ($null)
      call_stmt_1182_update_start_ &-> (call_stmt_1182_Update)
      call_stmt_1182_update_completed_ <-& (call_stmt_1182_Update)
      // Call output argument 0
      // (as target) Queue_Length
      // start: WAR dependencies for Queue_Length
      // done: WAR dependencies for Queue_Length
      // end: 	$call getQueueLength (q_base_address ) (Queue_Length ) 
      // start: WAR dependencies for round_off
      // done: WAR dependencies for round_off
      // start:  	$volatile round_off := (read_index == (Queue_Length - 1 )) $buffering 1
      //  file nic.linked.opt.aa, line 375
      // volatile! 
      // Source expression
      // (read_index == (Queue_Length - 1 ))
      // read_index
      // (Queue_Length - 1 )
      // Queue_Length
      // Target expression
      // (as target) round_off
      // start: WAR dependencies for round_off
      // done: WAR dependencies for round_off
      // end:  	$volatile round_off := (read_index == (Queue_Length - 1 )) $buffering 1
      // start: WAR dependencies for next_wi
      // done: WAR dependencies for next_wi
      // start:  	$volatile next_wi := ( $mux round_off 0   (write_index + 1 ) )  $buffering 1
      //  file nic.linked.opt.aa, line 376
      // volatile! 
      // Source expression
      // ( $mux round_off 0   (write_index + 1 ) ) 
      // round_off
      // (write_index + 1 )
      // write_index
      // Target expression
      // (as target) next_wi
      // start: WAR dependencies for next_wi
      // done: WAR dependencies for next_wi
      // end:  	$volatile next_wi := ( $mux round_off 0   (write_index + 1 ) )  $buffering 1
      // start: WAR dependencies for q_full
      // done: WAR dependencies for q_full
      // start:  	$volatile q_full := (next_wi == read_index) $buffering 1
      //  file nic.linked.opt.aa, line 377
      // volatile! 
      // Source expression
      // (next_wi == read_index)
      // next_wi
      // read_index
      // Target expression
      // (as target) q_full
      // start: WAR dependencies for q_full
      // done: WAR dependencies for q_full
      // end:  	$volatile q_full := (next_wi == read_index) $buffering 1
      // start: 	$guard (~q_full) $call setQueueElement (q_base_address write_index q_w_data ) () 
      //  file nic.linked.opt.aa, line 379
      $T[call_stmt_1213_sample_start_] 
      $T[call_stmt_1213_sample_completed_] 
      $T[call_stmt_1213_update_start_] 
      $T[call_stmt_1213_update_completed_] 
      // Guard expression
      // q_full
      // start: Forward dependencies from q_full to transition call_stmt_1213_sample_start_
      call_stmt_1213_sample_start_ <-& (call_stmt_1179_update_completed_)
      call_stmt_1213_sample_start_ <-& (call_stmt_1182_update_completed_)
      // done: Forward dependencies from q_full to transition call_stmt_1213_sample_start_
      // Call input argument 0
      // q_base_address
      // Call input argument 1
      // write_index
      // Call input argument 2
      // q_w_data
      // start: Forward dependencies from q_base_address to transition call_stmt_1213_sample_start_
      // done: Forward dependencies from q_base_address to transition call_stmt_1213_sample_start_
      // start: Forward dependencies from write_index to transition call_stmt_1213_sample_start_
      call_stmt_1213_sample_start_ <-& (call_stmt_1179_update_completed_)
      // done: Forward dependencies from write_index to transition call_stmt_1213_sample_start_
      // start: Forward dependencies from q_w_data to transition call_stmt_1213_sample_start_
      // done: Forward dependencies from q_w_data to transition call_stmt_1213_sample_start_
      ;;[call_stmt_1213_Sample] 
      {
        $T [crr] $T [cra] 
      }
      ;;[call_stmt_1213_Update] 
      {
        $T [ccr] $T [cca] 
      }
      call_stmt_1213_sample_start_ &-> (call_stmt_1213_Sample)
      call_stmt_1213_sample_completed_ <-& (call_stmt_1213_Sample)
      call_stmt_1213_sample_completed_ &-> ($null)
      call_stmt_1213_update_start_ &-> (call_stmt_1213_Update)
      call_stmt_1213_update_completed_ <-& (call_stmt_1213_Update)
      // end: 	$guard (~q_full) $call setQueueElement (q_base_address write_index q_w_data ) () 
      // start: 	$guard (~q_full) $call setQueuePointers (q_base_address next_wi read_index ) () 
      //  file nic.linked.opt.aa, line 380
      $T[call_stmt_1218_sample_start_] 
      $T[call_stmt_1218_sample_completed_] 
      $T[call_stmt_1218_update_start_] 
      $T[call_stmt_1218_update_completed_] 
      // Guard expression
      // q_full
      // start: Forward dependencies from q_full to transition call_stmt_1218_sample_start_
      call_stmt_1218_sample_start_ <-& (call_stmt_1179_update_completed_)
      call_stmt_1218_sample_start_ <-& (call_stmt_1182_update_completed_)
      // done: Forward dependencies from q_full to transition call_stmt_1218_sample_start_
      // Call input argument 0
      // q_base_address
      // Call input argument 1
      // next_wi
      // Call input argument 2
      // read_index
      // start: Forward dependencies from q_base_address to transition call_stmt_1218_sample_start_
      // done: Forward dependencies from q_base_address to transition call_stmt_1218_sample_start_
      // start: Forward dependencies from next_wi to transition call_stmt_1218_sample_start_
      call_stmt_1218_sample_start_ <-& (call_stmt_1179_update_completed_)
      call_stmt_1218_sample_start_ <-& (call_stmt_1182_update_completed_)
      // done: Forward dependencies from next_wi to transition call_stmt_1218_sample_start_
      // start: Forward dependencies from read_index to transition call_stmt_1218_sample_start_
      call_stmt_1218_sample_start_ <-& (call_stmt_1179_update_completed_)
      // done: Forward dependencies from read_index to transition call_stmt_1218_sample_start_
      ;;[call_stmt_1218_Sample] 
      {
        $T [crr] $T [cra] 
      }
      ;;[call_stmt_1218_Update] 
      {
        $T [ccr] $T [cca] 
      }
      call_stmt_1218_sample_start_ &-> (call_stmt_1218_Sample)
      call_stmt_1218_sample_completed_ <-& (call_stmt_1218_Sample)
      call_stmt_1218_sample_completed_ &-> ($null)
      call_stmt_1218_update_start_ &-> (call_stmt_1218_Update)
      call_stmt_1218_update_completed_ <-& (call_stmt_1218_Update)
      // end: 	$guard (~q_full) $call setQueuePointers (q_base_address next_wi read_index ) () 
      // load-store dependencies..
      // pipe read/write dependencies for pipe MEMORY_TO_NIC_RESPONSE
      // read-dependencies for pipe MEMORY_TO_NIC_RESPONSE
      call_stmt_1182_sample_start_ <-& (call_stmt_1179_update_completed_)
      call_stmt_1213_sample_start_ <-& (call_stmt_1182_update_completed_)
      call_stmt_1218_sample_start_ <-& (call_stmt_1213_update_completed_)
      // write-dependencies for pipe MEMORY_TO_NIC_RESPONSE
      // signal write dependencies for MEMORY_TO_NIC_RESPONSE
      // pipe read/write dependencies for pipe NIC_TO_MEMORY_REQUEST
      // read-dependencies for pipe NIC_TO_MEMORY_REQUEST
      // write-dependencies for pipe NIC_TO_MEMORY_REQUEST
      call_stmt_1182_sample_start_ <-& (call_stmt_1179_update_completed_)
      call_stmt_1213_sample_start_ <-& (call_stmt_1182_update_completed_)
      call_stmt_1218_sample_start_ <-& (call_stmt_1213_update_completed_)
      // signal write dependencies for NIC_TO_MEMORY_REQUEST
    }
    ::[call_stmt_1222_to_assign_stmt_1226] 
    {
      // start: 	$guard (lock) $call releaseLock (q_base_address ) () 
      //  file nic.linked.opt.aa, line 382
      $T[call_stmt_1222_sample_start_] 
      $T[call_stmt_1222_sample_completed_] 
      $T[call_stmt_1222_update_start_] 
      $T[call_stmt_1222_update_completed_] 
      // Guard expression
      // lock
      // start: Forward dependencies from lock to transition call_stmt_1222_sample_start_
      // done: Forward dependencies from lock to transition call_stmt_1222_sample_start_
      // Call input argument 0
      // q_base_address
      // start: Forward dependencies from q_base_address to transition call_stmt_1222_sample_start_
      // done: Forward dependencies from q_base_address to transition call_stmt_1222_sample_start_
      ;;[call_stmt_1222_Sample] 
      {
        $T [crr] $T [cra] 
      }
      ;;[call_stmt_1222_Update] 
      {
        $T [ccr] $T [cca] 
      }
      call_stmt_1222_sample_start_ &-> (call_stmt_1222_Sample)
      call_stmt_1222_sample_completed_ <-& (call_stmt_1222_Sample)
      call_stmt_1222_sample_completed_ &-> ($null)
      call_stmt_1222_update_start_ &-> (call_stmt_1222_Update)
      call_stmt_1222_update_completed_ <-& (call_stmt_1222_Update)
      // end: 	$guard (lock) $call releaseLock (q_base_address ) () 
      // start:  	status := ( ~ q_full ) $buffering 1// bits of buffering = 1. 
      //  file nic.linked.opt.aa, line 383
      // Source expression
      // ( ~ q_full )
      $T[NOT_u1_u1_1225_sample_start_] 
      $T[NOT_u1_u1_1225_sample_completed_] 
      $T[NOT_u1_u1_1225_update_start_] 
      $T[NOT_u1_u1_1225_update_completed_] 
      // q_full
      // start: Forward dependencies from q_full to transition NOT_u1_u1_1225_sample_start_
      // done: Forward dependencies from q_full to transition NOT_u1_u1_1225_sample_start_
      ;;[NOT_u1_u1_1225_Sample] 
      {
        // unary expression 
        $T [rr] $T [ra] // (split) unary operation
      }
      ;;[NOT_u1_u1_1225_Update] 
      {
        // unary expression 
        $T [cr] $T [ca] //(split) unary operation
      }
      NOT_u1_u1_1225_sample_start_ &-> (NOT_u1_u1_1225_Sample)
      NOT_u1_u1_1225_sample_completed_ <-& (NOT_u1_u1_1225_Sample)
      NOT_u1_u1_1225_sample_completed_ &-> ($null)
      NOT_u1_u1_1225_update_start_ &-> (NOT_u1_u1_1225_Update)
      NOT_u1_u1_1225_update_completed_ <-& (NOT_u1_u1_1225_Update)
      // Target expression
      // (as target) status
      // status
      // write to interface object
      // start: WAR dependencies for status
      // done: WAR dependencies for status
      // status
      // write to interface object
      // end:  	status := ( ~ q_full ) $buffering 1// bits of buffering = 1. 
      // load-store dependencies..
      // pipe read/write dependencies for pipe MEMORY_TO_NIC_RESPONSE
      // read-dependencies for pipe MEMORY_TO_NIC_RESPONSE
      // write-dependencies for pipe MEMORY_TO_NIC_RESPONSE
      // signal write dependencies for MEMORY_TO_NIC_RESPONSE
      // pipe read/write dependencies for pipe NIC_TO_MEMORY_REQUEST
      // read-dependencies for pipe NIC_TO_MEMORY_REQUEST
      // write-dependencies for pipe NIC_TO_MEMORY_REQUEST
      // signal write dependencies for NIC_TO_MEMORY_REQUEST
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %pushIntoQueue
    //  file nic.linked.opt.aa, line 365
    // 	$guard (lock) $call acquireLock (q_base_address ) (m_ok ) 
    //  file nic.linked.opt.aa, line 370
    // 	$call getQueuePointers (q_base_address ) (write_index read_index ) 
    //  file nic.linked.opt.aa, line 373
    // 	$call getQueueLength (q_base_address ) (Queue_Length ) 
    //  file nic.linked.opt.aa, line 374
    // 1 
    $constant $W[konst_1186_wire_constant] : $int<32> := _b00000000000000000000000000000001// 1
    // ( $mux round_off 0   (write_index + 1 ) ) 
    // 0 
    $constant $W[konst_1192_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // 1 
    $constant $W[konst_1194_wire_constant] : $int<32> := _b00000000000000000000000000000001// 1
    // 	$guard (~q_full) $call setQueueElement (q_base_address write_index q_w_data ) () 
    //  file nic.linked.opt.aa, line 379
    // 	$guard (~q_full) $call setQueuePointers (q_base_address next_wi read_index ) () 
    //  file nic.linked.opt.aa, line 380
    // 	$guard (lock) $call releaseLock (q_base_address ) () 
    //  file nic.linked.opt.aa, line 382
    // 	$guard (lock) $call acquireLock (q_base_address ) (m_ok ) 
    //  file nic.linked.opt.aa, line 370
    // m_ok
    $W[m_ok_1171] : $int<1>
    // 	$call getQueuePointers (q_base_address ) (write_index read_index ) 
    //  file nic.linked.opt.aa, line 373
    // write_index
    $W[write_index_1179] : $int<32>
    // read_index
    $W[read_index_1179] : $int<32>
    // 	$call getQueueLength (q_base_address ) (Queue_Length ) 
    //  file nic.linked.opt.aa, line 374
    // Queue_Length
    $W[Queue_Length_1182] : $int<32>
    // 	$volatile round_off := (read_index == (Queue_Length - 1 )) $buffering 1
    //  file nic.linked.opt.aa, line 375
    // (Queue_Length - 1 )
    $intermediate $W[SUB_u32_u32_1187_wire] : $int<32>
    // round_off
    $W[round_off_1189] : $int<1>
    // 	$volatile next_wi := ( $mux round_off 0   (write_index + 1 ) )  $buffering 1
    //  file nic.linked.opt.aa, line 376
    // (write_index + 1 )
    $intermediate $W[ADD_u32_u32_1195_wire] : $int<32>
    // next_wi
    $W[next_wi_1197] : $int<32>
    // 	$volatile q_full := (next_wi == read_index) $buffering 1
    //  file nic.linked.opt.aa, line 377
    // q_full
    $W[q_full_1202] : $int<1>
    // 	$guard (~q_full) $call setQueueElement (q_base_address write_index q_w_data ) () 
    //  file nic.linked.opt.aa, line 379
    // 	$guard (~q_full) $call setQueuePointers (q_base_address next_wi read_index ) () 
    //  file nic.linked.opt.aa, line 380
    // 	$guard (lock) $call releaseLock (q_base_address ) () 
    //  file nic.linked.opt.aa, line 382
    // 	status := ( ~ q_full ) $buffering 1// bits of buffering = 1. 
    //  file nic.linked.opt.aa, line 383
    // status
    // 	$guard (lock) $call acquireLock (q_base_address ) (m_ok ) 
    //  file nic.linked.opt.aa, line 370
    $call [call_stmt_1171_call] $module acquireLock(q_base_address) (m_ok_1171) $guard ( lock )  
    $delay call_stmt_1171_call 4
    $buffering  $in call_stmt_1171_call q_base_address 1
    $buffering  $out call_stmt_1171_call m_ok_1171 1
    // 	$call getQueuePointers (q_base_address ) (write_index read_index ) 
    //  file nic.linked.opt.aa, line 373
    $call [call_stmt_1179_call] $module getQueuePointers(q_base_address) (write_index_1179 read_index_1179)  
    $delay call_stmt_1179_call 4
    $buffering  $in call_stmt_1179_call q_base_address 1
    $buffering  $out call_stmt_1179_call write_index_1179 1
    $buffering  $out call_stmt_1179_call read_index_1179 1
    // 	$call getQueueLength (q_base_address ) (Queue_Length ) 
    //  file nic.linked.opt.aa, line 374
    $call [call_stmt_1182_call] $module getQueueLength(q_base_address) (Queue_Length_1182)  
    $delay call_stmt_1182_call 4
    $buffering  $in call_stmt_1182_call q_base_address 1
    $buffering  $out call_stmt_1182_call Queue_Length_1182 1
    // 	$volatile round_off := (read_index == (Queue_Length - 1 )) $buffering 1
    //  file nic.linked.opt.aa, line 375
    // (Queue_Length - 1 )
    -[SUB_u32_u32_1187_inst] (Queue_Length_1182 konst_1186_wire_constant) (SUB_u32_u32_1187_wire)   $flowthrough 
    $delay SUB_u32_u32_1187_inst 0
    // (read_index == (Queue_Length - 1 ))
    ==[EQ_u32_u1_1188_inst] (read_index_1179 SUB_u32_u32_1187_wire) (round_off_1189)   $flowthrough 
    $delay EQ_u32_u1_1188_inst 0
    // 	$volatile next_wi := ( $mux round_off 0   (write_index + 1 ) )  $buffering 1
    //  file nic.linked.opt.aa, line 376
    // (write_index + 1 )
    +[ADD_u32_u32_1195_inst] (write_index_1179 konst_1194_wire_constant) (ADD_u32_u32_1195_wire)   $flowthrough 
    $delay ADD_u32_u32_1195_inst 0
    // ( $mux round_off 0   (write_index + 1 ) ) 
    ? [MUX_1196_inst] (round_off_1189 konst_1192_wire_constant ADD_u32_u32_1195_wire) (next_wi_1197)  $flowthrough
    // 	$volatile q_full := (next_wi == read_index) $buffering 1
    //  file nic.linked.opt.aa, line 377
    // (next_wi == read_index)
    ==[EQ_u32_u1_1201_inst] (next_wi_1197 read_index_1179) (q_full_1202)   $flowthrough 
    $delay EQ_u32_u1_1201_inst 0
    // 	$guard (~q_full) $call setQueueElement (q_base_address write_index q_w_data ) () 
    //  file nic.linked.opt.aa, line 379
    $call [call_stmt_1213_call] $module setQueueElement(q_base_address write_index_1179 q_w_data) () $guard ( ~ q_full_1202 )  
    $delay call_stmt_1213_call 4
    $buffering  $in call_stmt_1213_call q_base_address 1
    $buffering  $in call_stmt_1213_call write_index_1179 1
    $buffering  $in call_stmt_1213_call q_w_data 1
    // 	$guard (~q_full) $call setQueuePointers (q_base_address next_wi read_index ) () 
    //  file nic.linked.opt.aa, line 380
    $call [call_stmt_1218_call] $module setQueuePointers(q_base_address next_wi_1197 read_index_1179) () $guard ( ~ q_full_1202 )  
    $delay call_stmt_1218_call 4
    $buffering  $in call_stmt_1218_call q_base_address 1
    $buffering  $in call_stmt_1218_call next_wi_1197 1
    $buffering  $in call_stmt_1218_call read_index_1179 1
    // 	$guard (lock) $call releaseLock (q_base_address ) () 
    //  file nic.linked.opt.aa, line 382
    $call [call_stmt_1222_call] $module releaseLock(q_base_address) () $guard ( lock )  
    $delay call_stmt_1222_call 4
    $buffering  $in call_stmt_1222_call q_base_address 1
    // 	status := ( ~ q_full ) $buffering 1// bits of buffering = 1. 
    //  file nic.linked.opt.aa, line 383
    // ( ~ q_full )
    ~ [NOT_u1_u1_1225_inst] (q_full_1202) (status)  
    $buffering  $out NOT_u1_u1_1225_inst status 1
    $delay NOT_u1_u1_1225_inst 1
  }
  // end data-path
  // 	$guard (lock) $call acquireLock (q_base_address ) (m_ok ) 
  //  file nic.linked.opt.aa, line 370
  // q_base_address
  call_stmt_1171_call <=> (call_stmt_1171/call_stmt_1171_Sample/crr call_stmt_1171/call_stmt_1171_Update/ccr) (call_stmt_1171/call_stmt_1171_Sample/cra call_stmt_1171/call_stmt_1171_Update/cca)
  // 	$call getQueuePointers (q_base_address ) (write_index read_index ) 
  //  file nic.linked.opt.aa, line 373
  // q_base_address
  call_stmt_1179_call <=> (call_stmt_1179_to_call_stmt_1218/call_stmt_1179_Sample/crr call_stmt_1179_to_call_stmt_1218/call_stmt_1179_Update/ccr) (call_stmt_1179_to_call_stmt_1218/call_stmt_1179_Sample/cra call_stmt_1179_to_call_stmt_1218/call_stmt_1179_Update/cca)
  // 	$call getQueueLength (q_base_address ) (Queue_Length ) 
  //  file nic.linked.opt.aa, line 374
  // q_base_address
  call_stmt_1182_call <=> (call_stmt_1179_to_call_stmt_1218/call_stmt_1182_Sample/crr call_stmt_1179_to_call_stmt_1218/call_stmt_1182_Update/ccr) (call_stmt_1179_to_call_stmt_1218/call_stmt_1182_Sample/cra call_stmt_1179_to_call_stmt_1218/call_stmt_1182_Update/cca)
  // 	$volatile round_off := (read_index == (Queue_Length - 1 )) $buffering 1
  //  file nic.linked.opt.aa, line 375
  // (read_index == (Queue_Length - 1 ))
  // read_index
  // (Queue_Length - 1 )
  // Queue_Length
  // 	$volatile next_wi := ( $mux round_off 0   (write_index + 1 ) )  $buffering 1
  //  file nic.linked.opt.aa, line 376
  // round_off
  // (write_index + 1 )
  // write_index
  // ( $mux round_off 0   (write_index + 1 ) ) 
  // 	$volatile q_full := (next_wi == read_index) $buffering 1
  //  file nic.linked.opt.aa, line 377
  // (next_wi == read_index)
  // next_wi
  // read_index
  // 	$guard (~q_full) $call setQueueElement (q_base_address write_index q_w_data ) () 
  //  file nic.linked.opt.aa, line 379
  // q_base_address
  // write_index
  // q_w_data
  call_stmt_1213_call <=> (call_stmt_1179_to_call_stmt_1218/call_stmt_1213_Sample/crr call_stmt_1179_to_call_stmt_1218/call_stmt_1213_Update/ccr) (call_stmt_1179_to_call_stmt_1218/call_stmt_1213_Sample/cra call_stmt_1179_to_call_stmt_1218/call_stmt_1213_Update/cca)
  // 	$guard (~q_full) $call setQueuePointers (q_base_address next_wi read_index ) () 
  //  file nic.linked.opt.aa, line 380
  // q_base_address
  // next_wi
  // read_index
  call_stmt_1218_call <=> (call_stmt_1179_to_call_stmt_1218/call_stmt_1218_Sample/crr call_stmt_1179_to_call_stmt_1218/call_stmt_1218_Update/ccr) (call_stmt_1179_to_call_stmt_1218/call_stmt_1218_Sample/cra call_stmt_1179_to_call_stmt_1218/call_stmt_1218_Update/cca)
  // 	$guard (lock) $call releaseLock (q_base_address ) () 
  //  file nic.linked.opt.aa, line 382
  // q_base_address
  call_stmt_1222_call <=> (call_stmt_1222_to_assign_stmt_1226/call_stmt_1222_Sample/crr call_stmt_1222_to_assign_stmt_1226/call_stmt_1222_Update/ccr) (call_stmt_1222_to_assign_stmt_1226/call_stmt_1222_Sample/cra call_stmt_1222_to_assign_stmt_1226/call_stmt_1222_Update/cca)
  // 	status := ( ~ q_full ) $buffering 1// bits of buffering = 1. 
  //  file nic.linked.opt.aa, line 383
  // q_full
  // ( ~ q_full )
  NOT_u1_u1_1225_inst <=> (call_stmt_1222_to_assign_stmt_1226/NOT_u1_u1_1225_Sample/rr call_stmt_1222_to_assign_stmt_1226/NOT_u1_u1_1225_Update/cr) (call_stmt_1222_to_assign_stmt_1226/NOT_u1_u1_1225_Sample/ra call_stmt_1222_to_assign_stmt_1226/NOT_u1_u1_1225_Update/ca)
}
$operator $module [delay_time] 
{
  $in T:$int<32>
  // can point into 
  $out delay_done:$int<1> := _b1
  // can point into 
  // pipe-declarations for block %delay_time
  //  file nic.linked.opt.aa, line 385
  // pipe-declarations for block %delay_time%loop
  //  file nic.linked.opt.aa, line 390
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    <>[branch_block_stmt_1231] // Branch Block  file nic.linked.opt.aa, line 390
    {
      $P [branch_block_stmt_1231__entry__]
      branch_block_stmt_1231__entry__ <-| ($entry)
      $P [branch_block_stmt_1231__exit__]
      branch_block_stmt_1231__exit__ |-> ($exit)
      $P [do_while_stmt_1232__entry__] 
      $P [do_while_stmt_1232__exit__] 
      $P [assign_stmt_1250__entry__] 
      $P [assign_stmt_1250__exit__] 
      // do-while-statement  
      //  file nic.linked.opt.aa, line 392
      <o> [do_while_stmt_1232]  $depth 7 $buffering 1 
      {
        $P[do_while_stmt_1232__entry__] 
        $P[do_while_stmt_1232__exit__] 
        $P[loop_back] 
        $P[condition_done] 
        $P[loop_body_done] 
        $pipeline [do_while_stmt_1232_loop_body] 
        {
          // Pipelined!
          $T[back_edge_to_loop_body] 
          $T[first_time_through_loop_body] 
          $T[loop_body_start] 
          $T[condition_evaluated] 
          $transitionmerge [entry_tmerge] (back_edge_to_loop_body first_time_through_loop_body) (loop_body_start)
          $entry <-& (loop_body_start)
          $T[aggregated_phi_sample_req] 
          $T[aggregated_phi_sample_ack] 
          $T[aggregated_phi_update_req] 
          $T[aggregated_phi_update_ack] 
          // do not loop-back unless all phi's have used up their triggering tokens.
          condition_evaluated <-& (aggregated_phi_update_ack)
          aggregated_phi_sample_req o<-& (aggregated_phi_update_ack 0)
          // start:  PHI statement phi_stmt_1234
          // 			$phi R := 			  nR $on   $loopback 			  T $on   $entry 
          // type of target is $uint<32>
          $T[phi_stmt_1234_sample_start_] 
          $T[phi_stmt_1234_sample_completed_] 
          $T[phi_stmt_1234_update_start_] 
          $T[phi_stmt_1234_update_completed_] 
          $T[phi_stmt_1234_sample_start__ps] 
          phi_stmt_1234_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_1234_sample_completed__ps] 
          phi_stmt_1234_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_1234_update_start__ps] 
          phi_stmt_1234_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_1234_update_completed__ps] 
          phi_stmt_1234_update_completed_ <-& (phi_stmt_1234_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_1234_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_1234_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_1234_update_start_)
          $T[phi_stmt_1234_loopback_trigger] 
          phi_stmt_1234_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_1234_loopback_sample_req] 
          $T[phi_stmt_1234_loopback_sample_req_ps] 
          phi_stmt_1234_loopback_sample_req <-& (phi_stmt_1234_loopback_sample_req_ps)
          phi_stmt_1234_loopback_sample_req &-> ($null)
          $T[phi_stmt_1234_entry_trigger] 
          phi_stmt_1234_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_1234_entry_sample_req] 
          $T[phi_stmt_1234_entry_sample_req_ps] 
          phi_stmt_1234_entry_sample_req <-& (phi_stmt_1234_entry_sample_req_ps)
          phi_stmt_1234_entry_sample_req &-> ($null)
          phi_stmt_1234_update_start_ o<-& (phi_stmt_1234_update_completed_ 0)
          phi_stmt_1234_sample_start_ o<-& (phi_stmt_1234_sample_completed_ 1)
          $T[phi_stmt_1234_merged_reqs] 
          $T[phi_stmt_1234_phi_mux_ack] 
          $T[phi_stmt_1234_phi_mux_ack_ps] 
          phi_stmt_1234_phi_mux_ack_ps <-& (phi_stmt_1234_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_1234_update_completed_)
          $T[R_nR_1236_sample_start__ps] 
          $T[R_nR_1236_sample_completed__ps] 
          $T[R_nR_1236_update_start__ps] 
          $T[R_nR_1236_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 0
          $T[R_nR_1236_sample_start_] 
          $T[R_nR_1236_sample_completed_] 
          $T[R_nR_1236_update_start_] 
          $T[R_nR_1236_update_completed_] 
          ;;[R_nR_1236_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_nR_1236_sample_start_ &-> (R_nR_1236_Sample)
          R_nR_1236_sample_completed_ <-& (R_nR_1236_Sample)
          ;;[R_nR_1236_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_nR_1236_update_start_ &-> (R_nR_1236_Update)
          R_nR_1236_update_completed_ <-& (R_nR_1236_Update)
          // RAW reenables for nR
          // Phi start dependency for implicit/constant alternative.
          R_nR_1236_sample_start_ <-& (R_nR_1236_sample_start__ps)
          R_nR_1236_update_start_ <-& (R_nR_1236_update_start__ps)
          // Phi complete dependency.
          R_nR_1236_sample_completed__ps <-& (R_nR_1236_sample_completed_)
          R_nR_1236_update_completed__ps <-& (R_nR_1236_update_completed_)
          $T[R_T_1237_sample_start__ps] 
          $T[R_T_1237_sample_completed__ps] 
          $T[R_T_1237_update_start__ps] 
          $T[R_T_1237_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_T_1237_sample_start_] 
          $T[R_T_1237_sample_completed_] 
          $T[R_T_1237_update_start_] 
          $T[R_T_1237_update_completed_] 
          ;;[R_T_1237_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_T_1237_sample_start_ &-> (R_T_1237_Sample)
          R_T_1237_sample_completed_ <-& (R_T_1237_Sample)
          ;;[R_T_1237_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_T_1237_update_start_ &-> (R_T_1237_Update)
          R_T_1237_update_completed_ <-& (R_T_1237_Update)
          // RAW reenables for T
          // Phi start dependency for implicit/constant alternative.
          R_T_1237_sample_start_ <-& (R_T_1237_sample_start__ps)
          R_T_1237_update_start_ <-& (R_T_1237_update_start__ps)
          // Phi complete dependency.
          R_T_1237_sample_completed__ps <-& (R_T_1237_sample_completed_)
          R_T_1237_update_completed__ps <-& (R_T_1237_update_completed_)
          $phisequencer [ phi_stmt_1234_phi_seq] : 
          phi_stmt_1234_loopback_trigger R_nR_1236_sample_start__ps R_nR_1236_sample_completed__ps R_nR_1236_update_start__ps R_nR_1236_update_completed__ps phi_stmt_1234_entry_trigger R_T_1237_sample_start__ps R_T_1237_sample_completed__ps R_T_1237_update_start__ps R_T_1237_update_completed__ps :
          phi_stmt_1234_sample_start__ps phi_stmt_1234_sample_completed__ps phi_stmt_1234_update_start__ps phi_stmt_1234_update_completed__ps :
          phi_stmt_1234_loopback_sample_req_ps phi_stmt_1234_entry_sample_req_ps : 
          phi_stmt_1234_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_1234
          // start: WAR dependencies for nR
          // WAR dependency: Read: nR before Write: 			$volatile nR := (R - 1 ) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for nR
          // start:  			$volatile nR := (R - 1 ) $buffering 1
          //  file nic.linked.opt.aa, line 398
          // volatile! 
          // Source expression
          // (R - 1 )
          // R
          // Target expression
          // (as target) nR
          // start: WAR dependencies for nR
          // WAR dependency: Read: nR before Write: 			$volatile nR := (R - 1 ) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for nR
          // end:  			$volatile nR := (R - 1 ) $buffering 1
          // (R > 0 )
          // R
          $T [loop_body_delay_to_condition_start] $delay
          loop_body_start &-> (loop_body_delay_to_condition_start)
          loop_body_delay_to_condition_start &-> (condition_evaluated)
          // start: Forward dependencies from (R > 0 ) to transition condition_evaluated
          condition_evaluated <-& (phi_stmt_1234_update_completed_)
          // done: Forward dependencies from (R > 0 ) to transition condition_evaluated
          condition_evaluated &-> ($null)
          // load-store dependencies..
        }
        ( first_time_through_loop_body  back_edge_to_loop_body) 
        ( condition_evaluated )
        ;; [loop_exit] 
        {
          $T [ack] 
        }
        ;; [loop_taken] 
        {
          $T [ack] 
        }
        do_while_stmt_1232__entry__ <-| ($entry)
        loop_body_done <-| ( do_while_stmt_1232_loop_body ) 
        condition_done |-> (loop_exit loop_taken)
        do_while_stmt_1232__exit__ |-> ($exit)
        $bind condition_done <= do_while_stmt_1232_loop_body : condition_evaluated
        $bind do_while_stmt_1232__entry__  => do_while_stmt_1232_loop_body : first_time_through_loop_body 
        $bind loop_back  => do_while_stmt_1232_loop_body : back_edge_to_loop_body 
        $terminate (loop_exit loop_taken loop_body_done) (loop_back do_while_stmt_1232__exit__)
      }
      do_while_stmt_1232__entry__ |-> (do_while_stmt_1232)
      do_while_stmt_1232__exit__ <-| (do_while_stmt_1232)
      ::[assign_stmt_1250] 
      {
        // start:  		delay_done := 1  $buffering 1// bits of buffering = 1. 
        //  file nic.linked.opt.aa, line 400
        // constant! 
        // delay_done
        // write to interface object
        // end:  		delay_done := 1  $buffering 1// bits of buffering = 1. 
        // load-store dependencies..
      }
      assign_stmt_1250__entry__ |-> (assign_stmt_1250)
      assign_stmt_1250__exit__ <-| (assign_stmt_1250)
      do_while_stmt_1232__entry__ <-| (branch_block_stmt_1231__entry__)
      assign_stmt_1250__entry__ <-| (do_while_stmt_1232__exit__)
      assign_stmt_1250__exit__ |-> (branch_block_stmt_1231__exit__)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %delay_time%loop%
    //  file nic.linked.opt.aa, line 394
    // constant-object-declarations for block %delay_time%loop
    //  file nic.linked.opt.aa, line 390
    // constant-object-declarations for block %delay_time
    //  file nic.linked.opt.aa, line 385
    // constant-declarations for block %delay_time%loop
    //  file nic.linked.opt.aa, line 390
    // do-while statement  
    //  file nic.linked.opt.aa, line 392
    // 0 
    $constant $W[konst_1246_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // constant-declarations for block %delay_time%loop%
    //  file nic.linked.opt.aa, line 394
    // constant-declarations for phi:  			$phi R := 			  nR $on   $loopback 			  T $on   $entry 
    // type of target is $uint<32>
    //  file nic.linked.opt.aa, line 395
    // 1 
    $constant $W[konst_1241_wire_constant] : $int<32> := _b00000000000000000000000000000001// 1
    // 		delay_done := 1  $buffering 1// bits of buffering = 1. 
    //  file nic.linked.opt.aa, line 400
    // block %delay_time%loop
    //  file nic.linked.opt.aa, line 390
    // do-while statement  
    //  file nic.linked.opt.aa, line 392
    // (R > 0 )
    $intermediate $W[UGT_u32_u1_1247_wire] : $int<1>
    // merge-statement  
    //  file nic.linked.opt.aa, line 394
    // 			$phi R := 			  nR $on   $loopback 			  T $on   $entry 
    // type of target is $uint<32>
    //  file nic.linked.opt.aa, line 395
    $W[nR_1243_1236_buffered] : $int<32>
    $W[T_1237_buffered] : $int<32>
    // R
    $W[R_1234] : $int<32>
    // 			$volatile nR := (R - 1 ) $buffering 1
    //  file nic.linked.opt.aa, line 398
    // nR
    $W[nR_1243] : $int<32>
    // datapath-instances for block %delay_time%loop
    //  file nic.linked.opt.aa, line 390
    // datapath-instances for do-while  
    //  file nic.linked.opt.aa, line 392
    // (R > 0 )
    >[UGT_u32_u1_1247_inst] (R_1234 konst_1246_wire_constant) (UGT_u32_u1_1247_wire)   $flowthrough 
    $delay UGT_u32_u1_1247_inst 0
    ==0? [do_while_stmt_1232_branch] (UGT_u32_u1_1247_wire)
    $flowthrough
    // data-path instances for merge  
    //  file nic.linked.opt.aa, line 394
    // 			$phi R := 			  nR $on   $loopback 			  T $on   $entry 
    // type of target is $uint<32>
    //  file nic.linked.opt.aa, line 395
    # := [nR_1243_1236_buf] (nR_1243) (nR_1243_1236_buffered)     $fullrate
    $buffering $out nR_1243_1236_buf nR_1243_1236_buffered  1
    # := [T_1237_buf] (T) (T_1237_buffered)     $fullrate
    $buffering $out T_1237_buf T_1237_buffered  1
    # $phi [phi_stmt_1234] (nR_1243_1236_buffered T_1237_buffered) ( R_1234 ) $fullrate
    // $buffering  $out phi_stmt_1234 R_1234 2
    // 			$volatile nR := (R - 1 ) $buffering 1
    //  file nic.linked.opt.aa, line 398
    // (R - 1 )
    -[SUB_u32_u32_1242_inst] (R_1234 konst_1241_wire_constant) (nR_1243)   $flowthrough 
    $delay SUB_u32_u32_1242_inst 0
  }
  // end data-path
  // CP-DP links for do-while  do_while_stmt_1232
  //  file nic.linked.opt.aa, line 392
  phi_stmt_1234 <=> (branch_block_stmt_1231/do_while_stmt_1232/do_while_stmt_1232_loop_body/phi_stmt_1234_loopback_sample_req branch_block_stmt_1231/do_while_stmt_1232/do_while_stmt_1232_loop_body/phi_stmt_1234_entry_sample_req) (branch_block_stmt_1231/do_while_stmt_1232/do_while_stmt_1232_loop_body/phi_stmt_1234_phi_mux_ack)
  nR_1243_1236_buf <=> (branch_block_stmt_1231/do_while_stmt_1232/do_while_stmt_1232_loop_body/R_nR_1236_Sample/req branch_block_stmt_1231/do_while_stmt_1232/do_while_stmt_1232_loop_body/R_nR_1236_Update/req) (branch_block_stmt_1231/do_while_stmt_1232/do_while_stmt_1232_loop_body/R_nR_1236_Sample/ack branch_block_stmt_1231/do_while_stmt_1232/do_while_stmt_1232_loop_body/R_nR_1236_Update/ack)
  T_1237_buf <=> (branch_block_stmt_1231/do_while_stmt_1232/do_while_stmt_1232_loop_body/R_T_1237_Sample/req branch_block_stmt_1231/do_while_stmt_1232/do_while_stmt_1232_loop_body/R_T_1237_Update/req) (branch_block_stmt_1231/do_while_stmt_1232/do_while_stmt_1232_loop_body/R_T_1237_Sample/ack branch_block_stmt_1231/do_while_stmt_1232/do_while_stmt_1232_loop_body/R_T_1237_Update/ack)
  // 			$volatile nR := (R - 1 ) $buffering 1
  //  file nic.linked.opt.aa, line 398
  // (R - 1 )
  // R
  // (R > 0 )
  // R
  do_while_stmt_1232_branch <=> (branch_block_stmt_1231/do_while_stmt_1232/do_while_stmt_1232_loop_body/condition_evaluated) (branch_block_stmt_1231/do_while_stmt_1232/loop_exit/ack branch_block_stmt_1231/do_while_stmt_1232/loop_taken/ack)
}
$module [populateRxQueue] 
{
  $in rx_buffer_pointer:$int<36>
  // can point into 
  // pipe-declarations for block %populateRxQueue
  //  file nic.linked.opt.aa, line 403
  // pipe-declarations for block %populateRxQueue%PushIntoQueue
  //  file nic.linked.opt.aa, line 409
  // pipe-declarations for block %populateRxQueue%PushIntoQueue%
  //  file nic.linked.opt.aa, line 411
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    <>[branch_block_stmt_1257] // Branch Block  file nic.linked.opt.aa, line 409
    {
      $P [branch_block_stmt_1257__entry__]
      branch_block_stmt_1257__entry__ <-| ($entry)
      $P [branch_block_stmt_1257__exit__]
      branch_block_stmt_1257__exit__ |-> ($exit)
      $P [merge_stmt_1258__entry__] 
      $P [merge_stmt_1258__exit__] 
      $P [assign_stmt_1278_to_assign_stmt_1317__entry__] 
      $P [assign_stmt_1278_to_assign_stmt_1317__exit__] 
      $P [if_stmt_1321__entry__] 
      $P [if_stmt_1321__exit__] 
      ::[assign_stmt_1278_to_assign_stmt_1317] 
      {
        // start: WAR dependencies for register_index
        // ignored out-of-scope w_root 			$phi q_index := 			  ((LAST_WRITTEN_RX_QUEUE_INDEX + 1 ) & ($bitcast ($uint<6>) (NUMBER_OF_SERVERS - 1 ) )) $on   $entry 			  n_q_index $on   loopback 
        // type of target is $uint<6>
        // done: WAR dependencies for register_index
        // start:  		$volatile register_index := ($bitcast ($uint<6>) (q_index + RX_QUEUES_REG_START_OFFSET) ) $buffering 1
        //  file nic.linked.opt.aa, line 416
        // volatile! 
        // Source expression
        // ($bitcast ($uint<6>) (q_index + RX_QUEUES_REG_START_OFFSET) )
        // (q_index + RX_QUEUES_REG_START_OFFSET)
        // q_index
        // Target expression
        // (as target) register_index
        // start: WAR dependencies for register_index
        // ignored out-of-scope w_root 			$phi q_index := 			  ((LAST_WRITTEN_RX_QUEUE_INDEX + 1 ) & ($bitcast ($uint<6>) (NUMBER_OF_SERVERS - 1 ) )) $on   $entry 			  n_q_index $on   loopback 
        // type of target is $uint<6>
        // done: WAR dependencies for register_index
        // end:  		$volatile register_index := ($bitcast ($uint<6>) (q_index + RX_QUEUES_REG_START_OFFSET) ) $buffering 1
        // start: 		$call AccessRegister (($bitcast ($uint<1>) _b1  ) ( ~ ($bitcast ($uint<4>) _b0  ) ) register_index ($bitcast ($uint<32>) _b0  ) ) (rx_queue_pointer_32 ) 
        //  file nic.linked.opt.aa, line 418
        $T[call_stmt_1290_sample_start_] 
        $T[call_stmt_1290_sample_completed_] 
        $T[call_stmt_1290_update_start_] 
        $T[call_stmt_1290_update_completed_] 
        // Call input argument 0
        // Call input argument 1
        // Call input argument 2
        // register_index
        // Call input argument 3
        // start: Forward dependencies from register_index to transition call_stmt_1290_sample_start_
        // done: Forward dependencies from register_index to transition call_stmt_1290_sample_start_
        ;;[call_stmt_1290_Sample] 
        {
          $T [crr] $T [cra] 
        }
        ;;[call_stmt_1290_Update] 
        {
          $T [ccr] $T [cca] 
        }
        call_stmt_1290_sample_start_ &-> (call_stmt_1290_Sample)
        call_stmt_1290_sample_completed_ <-& (call_stmt_1290_Sample)
        call_stmt_1290_sample_completed_ &-> ($null)
        call_stmt_1290_update_start_ &-> (call_stmt_1290_Update)
        call_stmt_1290_update_completed_ <-& (call_stmt_1290_Update)
        // Call output argument 0
        // (as target) rx_queue_pointer_32
        // start: WAR dependencies for rx_queue_pointer_32
        // done: WAR dependencies for rx_queue_pointer_32
        // end: 		$call AccessRegister (($bitcast ($uint<1>) _b1  ) ( ~ ($bitcast ($uint<4>) _b0  ) ) register_index ($bitcast ($uint<32>) _b0  ) ) (rx_queue_pointer_32 ) 
        // start: WAR dependencies for rx_queue_pointer_36
        // done: WAR dependencies for rx_queue_pointer_36
        // start:  		$volatile rx_queue_pointer_36 := (rx_queue_pointer_32 && ($bitcast ($uint<4>) _b0  )) $buffering 1
        //  file nic.linked.opt.aa, line 419
        // volatile! 
        // Source expression
        // (rx_queue_pointer_32 && ($bitcast ($uint<4>) _b0  ))
        // rx_queue_pointer_32
        // Target expression
        // (as target) rx_queue_pointer_36
        // start: WAR dependencies for rx_queue_pointer_36
        // done: WAR dependencies for rx_queue_pointer_36
        // end:  		$volatile rx_queue_pointer_36 := (rx_queue_pointer_32 && ($bitcast ($uint<4>) _b0  )) $buffering 1
        // start: 		$call pushIntoQueue (($bitcast ($uint<1>) _b0  ) rx_queue_pointer_36 ( $slice rx_buffer_pointer 35 4 )  ) (push_status ) 
        //  file nic.linked.opt.aa, line 421
        $T[call_stmt_1307_sample_start_] 
        $T[call_stmt_1307_sample_completed_] 
        $T[call_stmt_1307_update_start_] 
        $T[call_stmt_1307_update_completed_] 
        // Call input argument 0
        // Call input argument 1
        // rx_queue_pointer_36
        // Call input argument 2
        // ( $slice rx_buffer_pointer 35 4 ) 
        // rx_buffer_pointer
        // start: Forward dependencies from rx_queue_pointer_36 to transition call_stmt_1307_sample_start_
        call_stmt_1307_sample_start_ <-& (call_stmt_1290_update_completed_)
        // done: Forward dependencies from rx_queue_pointer_36 to transition call_stmt_1307_sample_start_
        // start: Forward dependencies from ( $slice rx_buffer_pointer 35 4 )  to transition call_stmt_1307_sample_start_
        // done: Forward dependencies from ( $slice rx_buffer_pointer 35 4 )  to transition call_stmt_1307_sample_start_
        ;;[call_stmt_1307_Sample] 
        {
          $T [crr] $T [cra] 
        }
        ;;[call_stmt_1307_Update] 
        {
          $T [ccr] $T [cca] 
        }
        call_stmt_1307_sample_start_ &-> (call_stmt_1307_Sample)
        call_stmt_1307_sample_completed_ <-& (call_stmt_1307_Sample)
        call_stmt_1307_sample_completed_ &-> ($null)
        call_stmt_1307_update_start_ &-> (call_stmt_1307_Update)
        call_stmt_1307_update_completed_ <-& (call_stmt_1307_Update)
        // Call output argument 0
        // (as target) push_status
        // start: WAR dependencies for push_status
        // done: WAR dependencies for push_status
        // end: 		$call pushIntoQueue (($bitcast ($uint<1>) _b0  ) rx_queue_pointer_36 ( $slice rx_buffer_pointer 35 4 )  ) (push_status ) 
        // start:  		n_q_index := ((q_index + 1 ) & ($bitcast ($uint<6>) (NUMBER_OF_SERVERS - 1 ) )) $buffering 1// bits of buffering = 6. 
        //  file nic.linked.opt.aa, line 422
        // Source expression
        // ((q_index + 1 ) & ($bitcast ($uint<6>) (NUMBER_OF_SERVERS - 1 ) ))
        $T[AND_u6_u6_1316_sample_start_] 
        $T[AND_u6_u6_1316_sample_completed_] 
        $T[AND_u6_u6_1316_update_start_] 
        $T[AND_u6_u6_1316_update_completed_] 
        // (q_index + 1 )
        // q_index
        // ($bitcast ($uint<6>) (NUMBER_OF_SERVERS - 1 ) )
        // (NUMBER_OF_SERVERS - 1 )
        // NUMBER_OF_SERVERS
        // start: Forward dependencies from (q_index + 1 ) to transition AND_u6_u6_1316_sample_start_
        // done: Forward dependencies from (q_index + 1 ) to transition AND_u6_u6_1316_sample_start_
        // start: Forward dependencies from ($bitcast ($uint<6>) (NUMBER_OF_SERVERS - 1 ) ) to transition AND_u6_u6_1316_sample_start_
        // non-constant expression which depends only on signals/constants?
        // done: Forward dependencies from ($bitcast ($uint<6>) (NUMBER_OF_SERVERS - 1 ) ) to transition AND_u6_u6_1316_sample_start_
        ;;[AND_u6_u6_1316_Sample] 
        {
          // binary expression 
          $T [rr] $T [ra]  // (split) binary operation 
        }
        ;;[AND_u6_u6_1316_Update] 
        {
          // binary expression 
          $T [cr] $T [ca] // (split) binary operation 
        }
        AND_u6_u6_1316_sample_start_ &-> (AND_u6_u6_1316_Sample)
        AND_u6_u6_1316_sample_completed_ <-& (AND_u6_u6_1316_Sample)
        AND_u6_u6_1316_sample_completed_ &-> ($null)
        AND_u6_u6_1316_update_start_ &-> (AND_u6_u6_1316_Update)
        AND_u6_u6_1316_update_completed_ <-& (AND_u6_u6_1316_Update)
        // Target expression
        // (as target) n_q_index
        // start: WAR dependencies for n_q_index
        // done: WAR dependencies for n_q_index
        // end:  		n_q_index := ((q_index + 1 ) & ($bitcast ($uint<6>) (NUMBER_OF_SERVERS - 1 ) )) $buffering 1// bits of buffering = 6. 
        // load-store dependencies..
        // pipe read/write dependencies for pipe MEMORY_TO_NIC_RESPONSE
        // read-dependencies for pipe MEMORY_TO_NIC_RESPONSE
        // write-dependencies for pipe MEMORY_TO_NIC_RESPONSE
        // signal write dependencies for MEMORY_TO_NIC_RESPONSE
        // pipe read/write dependencies for pipe NIC_REQUEST_REGISTER_ACCESS_PIPE
        // read-dependencies for pipe NIC_REQUEST_REGISTER_ACCESS_PIPE
        // write-dependencies for pipe NIC_REQUEST_REGISTER_ACCESS_PIPE
        // signal write dependencies for NIC_REQUEST_REGISTER_ACCESS_PIPE
        // pipe read/write dependencies for pipe NIC_RESPONSE_REGISTER_ACCESS_PIPE
        // read-dependencies for pipe NIC_RESPONSE_REGISTER_ACCESS_PIPE
        // write-dependencies for pipe NIC_RESPONSE_REGISTER_ACCESS_PIPE
        // signal write dependencies for NIC_RESPONSE_REGISTER_ACCESS_PIPE
        // pipe read/write dependencies for pipe NIC_TO_MEMORY_REQUEST
        // read-dependencies for pipe NIC_TO_MEMORY_REQUEST
        // write-dependencies for pipe NIC_TO_MEMORY_REQUEST
        // signal write dependencies for NIC_TO_MEMORY_REQUEST
      }
      assign_stmt_1278_to_assign_stmt_1317__entry__ |-> (assign_stmt_1278_to_assign_stmt_1317)
      assign_stmt_1278_to_assign_stmt_1317__exit__ <-| (assign_stmt_1278_to_assign_stmt_1317)
      // if-statement  
      //  file nic.linked.opt.aa, line 424
      ;;[if_stmt_1321_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      if_stmt_1321__entry__ |-> (if_stmt_1321_dead_link)
      if_stmt_1321__exit__ <-| (if_stmt_1321_dead_link)
      ;;[if_stmt_1321_eval_test] 
      {
        // test expression evaluate and trigger branch 
        // ( ~ push_status )
        ;;[NOT_u1_u1_1323] 
        {
          // unary expression 
          // flow-through
          ;;[SplitProtocol] 
          {
            ;;[Sample] 
            {
              $T [rr] $T [ra]
            }
            ;;[Update] 
            {
              $T [cr] $T [ca]
            }
          }
        }
        $T [branch_req] 
      }
      if_stmt_1321__entry__ |-> (if_stmt_1321_eval_test)
      $P [NOT_u1_u1_1323_place]
      NOT_u1_u1_1323_place <-| (if_stmt_1321_eval_test)
      ;;[if_stmt_1321_if_link] 
      {
        $T [if_choice_transition] 
      }
      ;;[if_stmt_1321_else_link] 
      {
        $T [else_choice_transition] 
      }
      NOT_u1_u1_1323_place |-> (if_stmt_1321_if_link if_stmt_1321_else_link)
      $P [call_stmt_1326__entry__] 
      $P [call_stmt_1326__exit__] 
      $P [if_stmt_1327__entry__] 
      $P [if_stmt_1327__exit__] 
      ::[call_stmt_1326] 
      {
        // start: 			$call delay_time (32  ) (status ) 
        //  file nic.linked.opt.aa, line 425
        $T[call_stmt_1326_sample_start_] 
        $T[call_stmt_1326_sample_completed_] 
        $T[call_stmt_1326_update_start_] 
        $T[call_stmt_1326_update_completed_] 
        // Call input argument 0
        ;;[call_stmt_1326_Sample] 
        {
          $T [crr] $T [cra] 
        }
        ;;[call_stmt_1326_Update] 
        {
          $T [ccr] $T [cca] 
        }
        call_stmt_1326_sample_start_ &-> (call_stmt_1326_Sample)
        call_stmt_1326_sample_completed_ <-& (call_stmt_1326_Sample)
        call_stmt_1326_sample_completed_ &-> ($null)
        call_stmt_1326_update_start_ &-> (call_stmt_1326_Update)
        call_stmt_1326_update_completed_ <-& (call_stmt_1326_Update)
        // Call output argument 0
        // (as target) status
        // start: WAR dependencies for status
        // done: WAR dependencies for status
        // end: 			$call delay_time (32  ) (status ) 
        // load-store dependencies..
      }
      call_stmt_1326__entry__ |-> (call_stmt_1326)
      call_stmt_1326__exit__ <-| (call_stmt_1326)
      // if-statement  
      //  file nic.linked.opt.aa, line 0
      ;;[if_stmt_1327_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      if_stmt_1327__entry__ |-> (if_stmt_1327_dead_link)
      if_stmt_1327__exit__ <-| (if_stmt_1327_dead_link)
      ;;[if_stmt_1327_eval_test] 
      {
        // test expression evaluate and trigger branch 
        // (status == 0 )
        ;;[EQ_u1_u1_1330] 
        {
          // binary expression 
          ||[EQ_u1_u1_1330_inputs] 
          {
          }
          // flow-through
          ;;[SplitProtocol] 
          {
            ;;[Sample] 
            {
              $T [rr] $T [ra]
            }
            ;;[Update] 
            {
              $T [cr] $T [ca]
            }
          }
        }
        $T [branch_req] 
      }
      if_stmt_1327__entry__ |-> (if_stmt_1327_eval_test)
      $P [EQ_u1_u1_1330_place]
      EQ_u1_u1_1330_place <-| (if_stmt_1327_eval_test)
      ;;[if_stmt_1327_if_link] 
      {
        $T [if_choice_transition] 
      }
      ;;[if_stmt_1327_else_link] 
      {
        $T [else_choice_transition] 
      }
      EQ_u1_u1_1330_place |-> (if_stmt_1327_if_link if_stmt_1327_else_link)
      $P [loopback]
      loopback <-| (if_stmt_1327_if_link)
      if_stmt_1327__exit__ <-| (if_stmt_1327_else_link)
      call_stmt_1326__entry__ <-| (if_stmt_1321_if_link)
      if_stmt_1327__entry__ <-| (call_stmt_1326__exit__)
      if_stmt_1327__exit__ |-> (if_stmt_1321__exit__)
      $P [assign_stmt_1336__entry__] 
      $P [assign_stmt_1336__exit__] 
      ::[assign_stmt_1336] 
      {
        // start:  			LAST_WRITTEN_RX_QUEUE_INDEX := q_index $buffering 1// bits of buffering = 6. 
        //  file nic.linked.opt.aa, line 430
        // Source expression
        // q_index
        // Target expression
        // (as target) LAST_WRITTEN_RX_QUEUE_INDEX
        $T[WPIPE_LAST_WRITTEN_RX_QUEUE_INDEX_1334_sample_start_] 
        $T[WPIPE_LAST_WRITTEN_RX_QUEUE_INDEX_1334_sample_completed_] 
        $T[WPIPE_LAST_WRITTEN_RX_QUEUE_INDEX_1334_update_start_] 
        $T[WPIPE_LAST_WRITTEN_RX_QUEUE_INDEX_1334_update_completed_] 
        ;;[WPIPE_LAST_WRITTEN_RX_QUEUE_INDEX_1334_Sample] 
        {
          // pipe write sample-start LAST_WRITTEN_RX_QUEUE_INDEX
          $T [req] $T [ack] 
        }
        ;;[WPIPE_LAST_WRITTEN_RX_QUEUE_INDEX_1334_Update] 
        {
          // pipe write update (complete) LAST_WRITTEN_RX_QUEUE_INDEX
          $T [req] $T [ack] 
        }
        WPIPE_LAST_WRITTEN_RX_QUEUE_INDEX_1334_sample_start_ &-> (WPIPE_LAST_WRITTEN_RX_QUEUE_INDEX_1334_Sample)
        WPIPE_LAST_WRITTEN_RX_QUEUE_INDEX_1334_sample_completed_ <-& (WPIPE_LAST_WRITTEN_RX_QUEUE_INDEX_1334_Sample)
        WPIPE_LAST_WRITTEN_RX_QUEUE_INDEX_1334_update_start_ <-& (WPIPE_LAST_WRITTEN_RX_QUEUE_INDEX_1334_sample_completed_)
        WPIPE_LAST_WRITTEN_RX_QUEUE_INDEX_1334_update_start_ &-> (WPIPE_LAST_WRITTEN_RX_QUEUE_INDEX_1334_Update)
        WPIPE_LAST_WRITTEN_RX_QUEUE_INDEX_1334_update_completed_ <-& (WPIPE_LAST_WRITTEN_RX_QUEUE_INDEX_1334_Update)
        // start: Forward dependencies from q_index to transition WPIPE_LAST_WRITTEN_RX_QUEUE_INDEX_1334_sample_start_
        // done: Forward dependencies from q_index to transition WPIPE_LAST_WRITTEN_RX_QUEUE_INDEX_1334_sample_start_
        // end:  			LAST_WRITTEN_RX_QUEUE_INDEX := q_index $buffering 1// bits of buffering = 6. 
        // load-store dependencies..
        // pipe read/write dependencies for pipe LAST_WRITTEN_RX_QUEUE_INDEX
        // read-dependencies for pipe LAST_WRITTEN_RX_QUEUE_INDEX
        // write-dependencies for pipe LAST_WRITTEN_RX_QUEUE_INDEX
        // signal write dependencies for LAST_WRITTEN_RX_QUEUE_INDEX
      }
      assign_stmt_1336__entry__ |-> (assign_stmt_1336)
      assign_stmt_1336__exit__ <-| (assign_stmt_1336)
      assign_stmt_1336__entry__ <-| (if_stmt_1321_else_link)
      assign_stmt_1336__exit__ |-> (if_stmt_1321__exit__)
      // control-path for merge  
      //  file nic.linked.opt.aa, line 411
      ;;[merge_stmt_1258_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      merge_stmt_1258__entry__ |-> (merge_stmt_1258_dead_link)
      merge_stmt_1258__exit__ <-| (merge_stmt_1258_dead_link)
      //---------------------   merge statement  file nic.linked.opt.aa, line 411  --------------------------
      ||[merge_stmt_1258__entry___PhiReq] 
      {
        ;;[phi_stmt_1259] 
        {
          ||[phi_stmt_1259_sources] 
          {
            // sources for 			$phi q_index := 			  ((LAST_WRITTEN_RX_QUEUE_INDEX + 1 ) & ($bitcast ($uint<6>) (NUMBER_OF_SERVERS - 1 ) )) $on   $entry 			  n_q_index $on   loopback 
            // type of target is $uint<6>
            // trivial non-constant source .... interlock-buffer introduced 
            // ((LAST_WRITTEN_RX_QUEUE_INDEX + 1 ) & ($bitcast ($uint<6>) (NUMBER_OF_SERVERS - 1 ) ))
            ;;[AND_u6_u6_1268] 
            {
              // binary expression 
              ||[AND_u6_u6_1268_inputs] 
              {
                // (LAST_WRITTEN_RX_QUEUE_INDEX + 1 )
                ;;[ADD_u6_u6_1263] 
                {
                  // binary expression 
                  ||[ADD_u6_u6_1263_inputs] 
                  {
                    // LAST_WRITTEN_RX_QUEUE_INDEX
                    ;;[RPIPE_LAST_WRITTEN_RX_QUEUE_INDEX_1261] 
                    {
                      // pipe read
                      ;;[Sample] 
                      {
                        $T [req] $T [ack] 
                      }
                      ;;[Update] 
                      {
                        $T [req] $T [ack] 
                      }
                    }
                  }
                  // flow-through
                  ;;[SplitProtocol] 
                  {
                    ;;[Sample] 
                    {
                      $T [rr] $T [ra]
                    }
                    ;;[Update] 
                    {
                      $T [cr] $T [ca]
                    }
                  }
                }
                // ($bitcast ($uint<6>) (NUMBER_OF_SERVERS - 1 ) )
                ;;[type_cast_1267] 
                {
                  // type-cast expression
                  // (NUMBER_OF_SERVERS - 1 )
                  ;;[SUB_u32_u32_1266] 
                  {
                    // binary expression 
                    ||[SUB_u32_u32_1266_inputs] 
                    {
                      // NUMBER_OF_SERVERS
                      ;;[RPIPE_NUMBER_OF_SERVERS_1264] 
                      {
                        // pipe read
                        ;;[Sample] 
                        {
                          $T [req] $T [ack] 
                        }
                        ;;[Update] 
                        {
                          $T [req] $T [ack] 
                        }
                      }
                    }
                    // flow-through
                    ;;[SplitProtocol] 
                    {
                      ;;[Sample] 
                      {
                        $T [rr] $T [ra]
                      }
                      ;;[Update] 
                      {
                        $T [cr] $T [ca]
                      }
                    }
                  }
                  // flow-through
                  ;;[SplitProtocol] 
                  {
                    ;;[Sample] 
                    {
                      $T [rr] $T [ra]  
                    }
                    ;;[Update] 
                    {
                      $T [cr] $T [ca] 
                    }
                  }
                }
              }
              ||[SplitProtocol] 
              {
                ;;[Sample] 
                {
                  $T [rr] $T [ra]
                }
                ;;[Update] 
                {
                  $T [cr] $T [ca]
                }
              }
            }
          }
          $T [phi_stmt_1259_req] 
        }
      }
      merge_stmt_1258__entry__ |-> (merge_stmt_1258__entry___PhiReq)
      ||[loopback_PhiReq] 
      {
        ;;[phi_stmt_1259] 
        {
          ||[phi_stmt_1259_sources] 
          {
            // sources for 			$phi q_index := 			  ((LAST_WRITTEN_RX_QUEUE_INDEX + 1 ) & ($bitcast ($uint<6>) (NUMBER_OF_SERVERS - 1 ) )) $on   $entry 			  n_q_index $on   loopback 
            // type of target is $uint<6>
            // trivial non-constant source .... interlock-buffer introduced 
            || [Interlock] 
            {
              ;;[Sample] 
              {
                $T [req] $T [ack]
              }
              ;;[Update] 
              {
                $T [req] $T [ack]
              }
            }
          }
          $T [phi_stmt_1259_req] 
        }
      }
      loopback |-> (loopback_PhiReq)
      $P [merge_stmt_1258_PhiReqMerge] 
      merge_stmt_1258_PhiReqMerge <-| ( merge_stmt_1258__entry___PhiReq  loopback_PhiReq )
      ||[merge_stmt_1258_PhiAck] 
      {
        $T [phi_stmt_1259_ack] 
      }
      merge_stmt_1258_PhiReqMerge |-> (merge_stmt_1258_PhiAck)
      merge_stmt_1258__exit__  <-| (merge_stmt_1258_PhiAck)
      //---------------------  end of merge statement  file nic.linked.opt.aa, line 411  --------------------------
      merge_stmt_1258__entry__ <-| (branch_block_stmt_1257__entry__)
      assign_stmt_1278_to_assign_stmt_1317__entry__ <-| (merge_stmt_1258__exit__)
      if_stmt_1321__entry__ <-| (assign_stmt_1278_to_assign_stmt_1317__exit__)
      if_stmt_1321__exit__ |-> (branch_block_stmt_1257__exit__)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %populateRxQueue%PushIntoQueue%
    //  file nic.linked.opt.aa, line 411
    // constant-object-declarations for block %populateRxQueue%PushIntoQueue
    //  file nic.linked.opt.aa, line 409
    // constant-object-declarations for block %populateRxQueue
    //  file nic.linked.opt.aa, line 403
    // constant-declarations for block %populateRxQueue%PushIntoQueue
    //  file nic.linked.opt.aa, line 409
    // constant-declarations for block %populateRxQueue%PushIntoQueue%
    //  file nic.linked.opt.aa, line 411
    // constant-declarations for phi:  			$phi q_index := 			  ((LAST_WRITTEN_RX_QUEUE_INDEX + 1 ) & ($bitcast ($uint<6>) (NUMBER_OF_SERVERS - 1 ) )) $on   $entry 			  n_q_index $on   loopback 
    // type of target is $uint<6>
    //  file nic.linked.opt.aa, line 412
    // 1 
    $constant $W[konst_1262_wire_constant] : $int<6> := _b000001// 1
    // 1 
    $constant $W[konst_1265_wire_constant] : $int<32> := _b00000000000000000000000000000001// 1
    // RX_QUEUES_REG_START_OFFSET
    $constant $W[R_RX_QUEUES_REG_START_OFFSET_1275_wire_constant] : $int<6> := _b000010// 2
    // 		$call AccessRegister (($bitcast ($uint<1>) _b1  ) ( ~ ($bitcast ($uint<4>) _b0  ) ) register_index ($bitcast ($uint<32>) _b0  ) ) (rx_queue_pointer_32 ) 
    //  file nic.linked.opt.aa, line 418
    // ($bitcast ($uint<1>) _b1  )
    $constant $W[type_cast_1282_wire_constant] : $int<1> := _b1// 1
    // ( ~ ($bitcast ($uint<4>) _b0  ) )
    $constant $W[NOT_u4_u4_1285_wire_constant] : $int<4> := _b1111// -1
    // ($bitcast ($uint<32>) _b0  )
    $constant $W[type_cast_1288_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // ($bitcast ($uint<4>) _b0  )
    $constant $W[type_cast_1294_wire_constant] : $int<4> := _b0000// 0
    // 		$call pushIntoQueue (($bitcast ($uint<1>) _b0  ) rx_queue_pointer_36 ( $slice rx_buffer_pointer 35 4 )  ) (push_status ) 
    //  file nic.linked.opt.aa, line 421
    // ($bitcast ($uint<1>) _b0  )
    $constant $W[type_cast_1302_wire_constant] : $int<1> := _b0// 0
    // 1 
    $constant $W[konst_1310_wire_constant] : $int<6> := _b000001// 1
    // 1 
    $constant $W[konst_1313_wire_constant] : $int<32> := _b00000000000000000000000000000001// 1
    // if-statement  
    //  file nic.linked.opt.aa, line 424
    // 			$call delay_time (32  ) (status ) 
    //  file nic.linked.opt.aa, line 425
    // 32 
    $constant $W[konst_1324_wire_constant] : $int<32> := _b00000000000000000000000000100000// 32
    // if-statement  
    //  file nic.linked.opt.aa, line 0
    // 0 
    $constant $W[konst_1329_wire_constant] : $int<1> := _b0// 0
    // block %populateRxQueue%PushIntoQueue
    //  file nic.linked.opt.aa, line 409
    // merge-statement  
    //  file nic.linked.opt.aa, line 411
    // 			$phi q_index := 			  ((LAST_WRITTEN_RX_QUEUE_INDEX + 1 ) & ($bitcast ($uint<6>) (NUMBER_OF_SERVERS - 1 ) )) $on   $entry 			  n_q_index $on   loopback 
    // type of target is $uint<6>
    //  file nic.linked.opt.aa, line 412
    // LAST_WRITTEN_RX_QUEUE_INDEX
    $W[RPIPE_LAST_WRITTEN_RX_QUEUE_INDEX_1261_wire] : $int<6>
    // (LAST_WRITTEN_RX_QUEUE_INDEX + 1 )
    $intermediate $W[ADD_u6_u6_1263_wire] : $int<6>
    // NUMBER_OF_SERVERS
    $W[RPIPE_NUMBER_OF_SERVERS_1264_wire] : $int<32>
    // (NUMBER_OF_SERVERS - 1 )
    $intermediate $W[SUB_u32_u32_1266_wire] : $int<32>
    // ($bitcast ($uint<6>) (NUMBER_OF_SERVERS - 1 ) )
    $intermediate $W[type_cast_1267_wire] : $int<6>
    // ((LAST_WRITTEN_RX_QUEUE_INDEX + 1 ) & ($bitcast ($uint<6>) (NUMBER_OF_SERVERS - 1 ) ))
    $intermediate $W[AND_u6_u6_1268_wire] : $int<6>
    $W[n_q_index_1317_1269_buffered] : $int<6>
    // q_index
    $W[q_index_1259] : $int<6>
    // 		$volatile register_index := ($bitcast ($uint<6>) (q_index + RX_QUEUES_REG_START_OFFSET) ) $buffering 1
    //  file nic.linked.opt.aa, line 416
    // (q_index + RX_QUEUES_REG_START_OFFSET)
    $intermediate $W[ADD_u6_u6_1276_wire] : $int<6>
    // register_index
    $W[register_index_1278] : $int<6>
    // 		$call AccessRegister (($bitcast ($uint<1>) _b1  ) ( ~ ($bitcast ($uint<4>) _b0  ) ) register_index ($bitcast ($uint<32>) _b0  ) ) (rx_queue_pointer_32 ) 
    //  file nic.linked.opt.aa, line 418
    // rx_queue_pointer_32
    $W[rx_queue_pointer_32_1290] : $int<32>
    // 		$volatile rx_queue_pointer_36 := (rx_queue_pointer_32 && ($bitcast ($uint<4>) _b0  )) $buffering 1
    //  file nic.linked.opt.aa, line 419
    // rx_queue_pointer_36
    $W[rx_queue_pointer_36_1296] : $int<36>
    // 		$call pushIntoQueue (($bitcast ($uint<1>) _b0  ) rx_queue_pointer_36 ( $slice rx_buffer_pointer 35 4 )  ) (push_status ) 
    //  file nic.linked.opt.aa, line 421
    // ( $slice rx_buffer_pointer 35 4 ) 
    $intermediate $W[slice_1305_wire] : $int<32>
    // push_status
    $W[push_status_1307] : $int<1>
    // 		n_q_index := ((q_index + 1 ) & ($bitcast ($uint<6>) (NUMBER_OF_SERVERS - 1 ) )) $buffering 1// bits of buffering = 6. 
    //  file nic.linked.opt.aa, line 422
    // (q_index + 1 )
    $intermediate $W[ADD_u6_u6_1311_wire] : $int<6>
    // NUMBER_OF_SERVERS
    $W[RPIPE_NUMBER_OF_SERVERS_1312_wire] : $int<32>
    // (NUMBER_OF_SERVERS - 1 )
    $intermediate $W[SUB_u32_u32_1314_wire] : $int<32>
    // ($bitcast ($uint<6>) (NUMBER_OF_SERVERS - 1 ) )
    $intermediate $W[type_cast_1315_wire] : $int<6>
    // n_q_index
    $W[n_q_index_1317] : $int<6>
    // if statement  
    //  file nic.linked.opt.aa, line 424
    // ( ~ push_status )
    $intermediate $W[NOT_u1_u1_1323_wire] : $int<1>
    // 			$call delay_time (32  ) (status ) 
    //  file nic.linked.opt.aa, line 425
    // status
    $W[status_1326] : $int<1>
    // if statement  
    //  file nic.linked.opt.aa, line 0
    // (status == 0 )
    $intermediate $W[EQ_u1_u1_1330_wire] : $int<1>
    // 			LAST_WRITTEN_RX_QUEUE_INDEX := q_index $buffering 1// bits of buffering = 6. 
    //  file nic.linked.opt.aa, line 430
    // LAST_WRITTEN_RX_QUEUE_INDEX
    // datapath-instances for block %populateRxQueue%PushIntoQueue
    //  file nic.linked.opt.aa, line 409
    // data-path instances for merge  
    //  file nic.linked.opt.aa, line 411
    // 			$phi q_index := 			  ((LAST_WRITTEN_RX_QUEUE_INDEX + 1 ) & ($bitcast ($uint<6>) (NUMBER_OF_SERVERS - 1 ) )) $on   $entry 			  n_q_index $on   loopback 
    // type of target is $uint<6>
    //  file nic.linked.opt.aa, line 412
    // LAST_WRITTEN_RX_QUEUE_INDEX
    $ioport $in [RPIPE_LAST_WRITTEN_RX_QUEUE_INDEX_1261_inst] (LAST_WRITTEN_RX_QUEUE_INDEX) (RPIPE_LAST_WRITTEN_RX_QUEUE_INDEX_1261_wire) 
    $buffering $out RPIPE_LAST_WRITTEN_RX_QUEUE_INDEX_1261_inst RPIPE_LAST_WRITTEN_RX_QUEUE_INDEX_1261_wire 1
    // (LAST_WRITTEN_RX_QUEUE_INDEX + 1 )
    +[ADD_u6_u6_1263_inst] (RPIPE_LAST_WRITTEN_RX_QUEUE_INDEX_1261_wire konst_1262_wire_constant) (ADD_u6_u6_1263_wire)   $flowthrough 
    $delay ADD_u6_u6_1263_inst 0
    // NUMBER_OF_SERVERS
    $ioport $in [RPIPE_NUMBER_OF_SERVERS_1264_inst] (NUMBER_OF_SERVERS) (RPIPE_NUMBER_OF_SERVERS_1264_wire) 
    $buffering $out RPIPE_NUMBER_OF_SERVERS_1264_inst RPIPE_NUMBER_OF_SERVERS_1264_wire 1
    // (NUMBER_OF_SERVERS - 1 )
    -[SUB_u32_u32_1266_inst] (RPIPE_NUMBER_OF_SERVERS_1264_wire konst_1265_wire_constant) (SUB_u32_u32_1266_wire)   $flowthrough 
    $delay SUB_u32_u32_1266_inst 0
    // ($bitcast ($uint<6>) (NUMBER_OF_SERVERS - 1 ) )
    # := [type_cast_1267_inst] (SUB_u32_u32_1266_wire) (type_cast_1267_wire)   $flowthrough
    $delay type_cast_1267_inst 0
    // ((LAST_WRITTEN_RX_QUEUE_INDEX + 1 ) & ($bitcast ($uint<6>) (NUMBER_OF_SERVERS - 1 ) ))
    &[AND_u6_u6_1268_inst] (ADD_u6_u6_1263_wire type_cast_1267_wire) (AND_u6_u6_1268_wire)   
    $buffering  $out AND_u6_u6_1268_inst AND_u6_u6_1268_wire 1
    $delay AND_u6_u6_1268_inst 1
    # := [n_q_index_1317_1269_buf] (n_q_index_1317) (n_q_index_1317_1269_buffered)    
    $phi [phi_stmt_1259] (AND_u6_u6_1268_wire n_q_index_1317_1269_buffered) ( q_index_1259 ) 
    // 		$volatile register_index := ($bitcast ($uint<6>) (q_index + RX_QUEUES_REG_START_OFFSET) ) $buffering 1
    //  file nic.linked.opt.aa, line 416
    // (q_index + RX_QUEUES_REG_START_OFFSET)
    +[ADD_u6_u6_1276_inst] (q_index_1259 R_RX_QUEUES_REG_START_OFFSET_1275_wire_constant) (ADD_u6_u6_1276_wire)   $flowthrough 
    $delay ADD_u6_u6_1276_inst 0
    // ($bitcast ($uint<6>) (q_index + RX_QUEUES_REG_START_OFFSET) )
    # := [type_cast_1277_inst] (ADD_u6_u6_1276_wire) (register_index_1278)   $flowthrough
    $delay type_cast_1277_inst 0
    // 		$call AccessRegister (($bitcast ($uint<1>) _b1  ) ( ~ ($bitcast ($uint<4>) _b0  ) ) register_index ($bitcast ($uint<32>) _b0  ) ) (rx_queue_pointer_32 ) 
    //  file nic.linked.opt.aa, line 418
    $call [call_stmt_1290_call] $module AccessRegister(type_cast_1282_wire_constant NOT_u4_u4_1285_wire_constant register_index_1278 type_cast_1288_wire_constant) (rx_queue_pointer_32_1290)  
    $delay call_stmt_1290_call 4
    $buffering  $in call_stmt_1290_call type_cast_1282_wire_constant 1
    $buffering  $in call_stmt_1290_call NOT_u4_u4_1285_wire_constant 1
    $buffering  $in call_stmt_1290_call register_index_1278 1
    $buffering  $in call_stmt_1290_call type_cast_1288_wire_constant 1
    $buffering  $out call_stmt_1290_call rx_queue_pointer_32_1290 1
    // 		$volatile rx_queue_pointer_36 := (rx_queue_pointer_32 && ($bitcast ($uint<4>) _b0  )) $buffering 1
    //  file nic.linked.opt.aa, line 419
    // (rx_queue_pointer_32 && ($bitcast ($uint<4>) _b0  ))
    &&[CONCAT_u32_u36_1295_inst] (rx_queue_pointer_32_1290 type_cast_1294_wire_constant) (rx_queue_pointer_36_1296)   $flowthrough 
    $delay CONCAT_u32_u36_1295_inst 0
    // 		$call pushIntoQueue (($bitcast ($uint<1>) _b0  ) rx_queue_pointer_36 ( $slice rx_buffer_pointer 35 4 )  ) (push_status ) 
    //  file nic.linked.opt.aa, line 421
    // ( $slice rx_buffer_pointer 35 4 ) 
    [:] [slice_1305_inst] (rx_buffer_pointer 35 4) (slice_1305_wire)  $flowthrough
    $delay slice_1305_inst 0
    $call [call_stmt_1307_call] $module pushIntoQueue(type_cast_1302_wire_constant rx_queue_pointer_36_1296 slice_1305_wire) (push_status_1307)  
    $delay call_stmt_1307_call 4
    $buffering  $in call_stmt_1307_call type_cast_1302_wire_constant 1
    $buffering  $in call_stmt_1307_call rx_queue_pointer_36_1296 1
    $buffering  $in call_stmt_1307_call slice_1305_wire 1
    $buffering  $out call_stmt_1307_call push_status_1307 1
    // 		n_q_index := ((q_index + 1 ) & ($bitcast ($uint<6>) (NUMBER_OF_SERVERS - 1 ) )) $buffering 1// bits of buffering = 6. 
    //  file nic.linked.opt.aa, line 422
    // (q_index + 1 )
    +[ADD_u6_u6_1311_inst] (q_index_1259 konst_1310_wire_constant) (ADD_u6_u6_1311_wire)   $flowthrough 
    $delay ADD_u6_u6_1311_inst 0
    // NUMBER_OF_SERVERS
    $ioport $in [RPIPE_NUMBER_OF_SERVERS_1312_inst] (NUMBER_OF_SERVERS) (RPIPE_NUMBER_OF_SERVERS_1312_wire) 
    $buffering $out RPIPE_NUMBER_OF_SERVERS_1312_inst RPIPE_NUMBER_OF_SERVERS_1312_wire 1
    // (NUMBER_OF_SERVERS - 1 )
    -[SUB_u32_u32_1314_inst] (RPIPE_NUMBER_OF_SERVERS_1312_wire konst_1313_wire_constant) (SUB_u32_u32_1314_wire)   $flowthrough 
    $delay SUB_u32_u32_1314_inst 0
    // ($bitcast ($uint<6>) (NUMBER_OF_SERVERS - 1 ) )
    # := [type_cast_1315_inst] (SUB_u32_u32_1314_wire) (type_cast_1315_wire)   $flowthrough
    $delay type_cast_1315_inst 0
    // ((q_index + 1 ) & ($bitcast ($uint<6>) (NUMBER_OF_SERVERS - 1 ) ))
    &[AND_u6_u6_1316_inst] (ADD_u6_u6_1311_wire type_cast_1315_wire) (n_q_index_1317)   
    $buffering  $out AND_u6_u6_1316_inst n_q_index_1317 1
    $delay AND_u6_u6_1316_inst 1
    // datapath-instances for if  
    //  file nic.linked.opt.aa, line 424
    // ( ~ push_status )
    ~ [NOT_u1_u1_1323_inst] (push_status_1307) (NOT_u1_u1_1323_wire)   $flowthrough
    $delay NOT_u1_u1_1323_inst 0
    ==0? [if_stmt_1321_branch] (NOT_u1_u1_1323_wire)
    // 			$call delay_time (32  ) (status ) 
    //  file nic.linked.opt.aa, line 425
    $call [call_stmt_1326_call] $module delay_time(konst_1324_wire_constant) (status_1326)  
    $delay call_stmt_1326_call 2
    $buffering  $in call_stmt_1326_call konst_1324_wire_constant 1
    $buffering  $out call_stmt_1326_call status_1326 1
    // datapath-instances for if  
    //  file nic.linked.opt.aa, line 0
    // (status == 0 )
    ==[EQ_u1_u1_1330_inst] (status_1326 konst_1329_wire_constant) (EQ_u1_u1_1330_wire)   $flowthrough 
    $delay EQ_u1_u1_1330_inst 0
    ==0? [if_stmt_1327_branch] (EQ_u1_u1_1330_wire)
    // 			LAST_WRITTEN_RX_QUEUE_INDEX := q_index $buffering 1// bits of buffering = 6. 
    //  file nic.linked.opt.aa, line 430
    // LAST_WRITTEN_RX_QUEUE_INDEX
    $ioport $out [WPIPE_LAST_WRITTEN_RX_QUEUE_INDEX_1334_inst]  (q_index_1259) (LAST_WRITTEN_RX_QUEUE_INDEX) 
  }
  // end data-path
  // CP-DP links for merge  
  //  file nic.linked.opt.aa, line 411
  // LAST_WRITTEN_RX_QUEUE_INDEX
  // (LAST_WRITTEN_RX_QUEUE_INDEX + 1 )
  // NUMBER_OF_SERVERS
  // (NUMBER_OF_SERVERS - 1 )
  // ((LAST_WRITTEN_RX_QUEUE_INDEX + 1 ) & ($bitcast ($uint<6>) (NUMBER_OF_SERVERS - 1 ) ))
  AND_u6_u6_1268_inst <=> (branch_block_stmt_1257/merge_stmt_1258__entry___PhiReq/phi_stmt_1259/phi_stmt_1259_sources/AND_u6_u6_1268/SplitProtocol/Sample/rr branch_block_stmt_1257/merge_stmt_1258__entry___PhiReq/phi_stmt_1259/phi_stmt_1259_sources/AND_u6_u6_1268/SplitProtocol/Update/cr) (branch_block_stmt_1257/merge_stmt_1258__entry___PhiReq/phi_stmt_1259/phi_stmt_1259_sources/AND_u6_u6_1268/SplitProtocol/Sample/ra branch_block_stmt_1257/merge_stmt_1258__entry___PhiReq/phi_stmt_1259/phi_stmt_1259_sources/AND_u6_u6_1268/SplitProtocol/Update/ca)
  n_q_index_1317_1269_buf <=> (branch_block_stmt_1257/loopback_PhiReq/phi_stmt_1259/phi_stmt_1259_sources/Interlock/Sample/req branch_block_stmt_1257/loopback_PhiReq/phi_stmt_1259/phi_stmt_1259_sources/Interlock/Update/req) (branch_block_stmt_1257/loopback_PhiReq/phi_stmt_1259/phi_stmt_1259_sources/Interlock/Sample/ack branch_block_stmt_1257/loopback_PhiReq/phi_stmt_1259/phi_stmt_1259_sources/Interlock/Update/ack)
  phi_stmt_1259 <=> (branch_block_stmt_1257/merge_stmt_1258__entry___PhiReq/phi_stmt_1259/phi_stmt_1259_req branch_block_stmt_1257/loopback_PhiReq/phi_stmt_1259/phi_stmt_1259_req) (branch_block_stmt_1257/merge_stmt_1258_PhiAck/phi_stmt_1259_ack)
  // 		$volatile register_index := ($bitcast ($uint<6>) (q_index + RX_QUEUES_REG_START_OFFSET) ) $buffering 1
  //  file nic.linked.opt.aa, line 416
  // (q_index + RX_QUEUES_REG_START_OFFSET)
  // q_index
  // 		$call AccessRegister (($bitcast ($uint<1>) _b1  ) ( ~ ($bitcast ($uint<4>) _b0  ) ) register_index ($bitcast ($uint<32>) _b0  ) ) (rx_queue_pointer_32 ) 
  //  file nic.linked.opt.aa, line 418
  // register_index
  call_stmt_1290_call <=> (branch_block_stmt_1257/assign_stmt_1278_to_assign_stmt_1317/call_stmt_1290_Sample/crr branch_block_stmt_1257/assign_stmt_1278_to_assign_stmt_1317/call_stmt_1290_Update/ccr) (branch_block_stmt_1257/assign_stmt_1278_to_assign_stmt_1317/call_stmt_1290_Sample/cra branch_block_stmt_1257/assign_stmt_1278_to_assign_stmt_1317/call_stmt_1290_Update/cca)
  // 		$volatile rx_queue_pointer_36 := (rx_queue_pointer_32 && ($bitcast ($uint<4>) _b0  )) $buffering 1
  //  file nic.linked.opt.aa, line 419
  // (rx_queue_pointer_32 && ($bitcast ($uint<4>) _b0  ))
  // rx_queue_pointer_32
  // 		$call pushIntoQueue (($bitcast ($uint<1>) _b0  ) rx_queue_pointer_36 ( $slice rx_buffer_pointer 35 4 )  ) (push_status ) 
  //  file nic.linked.opt.aa, line 421
  // rx_queue_pointer_36
  // rx_buffer_pointer
  call_stmt_1307_call <=> (branch_block_stmt_1257/assign_stmt_1278_to_assign_stmt_1317/call_stmt_1307_Sample/crr branch_block_stmt_1257/assign_stmt_1278_to_assign_stmt_1317/call_stmt_1307_Update/ccr) (branch_block_stmt_1257/assign_stmt_1278_to_assign_stmt_1317/call_stmt_1307_Sample/cra branch_block_stmt_1257/assign_stmt_1278_to_assign_stmt_1317/call_stmt_1307_Update/cca)
  // 		n_q_index := ((q_index + 1 ) & ($bitcast ($uint<6>) (NUMBER_OF_SERVERS - 1 ) )) $buffering 1// bits of buffering = 6. 
  //  file nic.linked.opt.aa, line 422
  // ((q_index + 1 ) & ($bitcast ($uint<6>) (NUMBER_OF_SERVERS - 1 ) ))
  // (q_index + 1 )
  // q_index
  // (NUMBER_OF_SERVERS - 1 )
  // NUMBER_OF_SERVERS
  AND_u6_u6_1316_inst <=> (branch_block_stmt_1257/assign_stmt_1278_to_assign_stmt_1317/AND_u6_u6_1316_Sample/rr branch_block_stmt_1257/assign_stmt_1278_to_assign_stmt_1317/AND_u6_u6_1316_Update/cr) (branch_block_stmt_1257/assign_stmt_1278_to_assign_stmt_1317/AND_u6_u6_1316_Sample/ra branch_block_stmt_1257/assign_stmt_1278_to_assign_stmt_1317/AND_u6_u6_1316_Update/ca)
  // CP-DP links for if  
  //  file nic.linked.opt.aa, line 424
  // ( ~ push_status )
  if_stmt_1321_branch <=> (branch_block_stmt_1257/if_stmt_1321_eval_test/branch_req) (branch_block_stmt_1257/if_stmt_1321_else_link/else_choice_transition branch_block_stmt_1257/if_stmt_1321_if_link/if_choice_transition)
  // 			$call delay_time (32  ) (status ) 
  //  file nic.linked.opt.aa, line 425
  call_stmt_1326_call <=> (branch_block_stmt_1257/call_stmt_1326/call_stmt_1326_Sample/crr branch_block_stmt_1257/call_stmt_1326/call_stmt_1326_Update/ccr) (branch_block_stmt_1257/call_stmt_1326/call_stmt_1326_Sample/cra branch_block_stmt_1257/call_stmt_1326/call_stmt_1326_Update/cca)
  // CP-DP links for if  
  //  file nic.linked.opt.aa, line 0
  // (status == 0 )
  if_stmt_1327_branch <=> (branch_block_stmt_1257/if_stmt_1327_eval_test/branch_req) (branch_block_stmt_1257/if_stmt_1327_else_link/else_choice_transition branch_block_stmt_1257/if_stmt_1327_if_link/if_choice_transition)
  // 			LAST_WRITTEN_RX_QUEUE_INDEX := q_index $buffering 1// bits of buffering = 6. 
  //  file nic.linked.opt.aa, line 430
  // q_index
  // LAST_WRITTEN_RX_QUEUE_INDEX
  WPIPE_LAST_WRITTEN_RX_QUEUE_INDEX_1334_inst <=> (branch_block_stmt_1257/assign_stmt_1336/WPIPE_LAST_WRITTEN_RX_QUEUE_INDEX_1334_Sample/req branch_block_stmt_1257/assign_stmt_1336/WPIPE_LAST_WRITTEN_RX_QUEUE_INDEX_1334_Update/req) (branch_block_stmt_1257/assign_stmt_1336/WPIPE_LAST_WRITTEN_RX_QUEUE_INDEX_1334_Sample/ack branch_block_stmt_1257/assign_stmt_1336/WPIPE_LAST_WRITTEN_RX_QUEUE_INDEX_1334_Update/ack)
}
$module [ReceiveEngineDaemon] 
{
  // pipe-declarations for block %ReceiveEngineDaemon
  //  file nic.linked.opt.aa, line 434
  // pipe-declarations for block %ReceiveEngineDaemon%main
  //  file nic.linked.opt.aa, line 440
  // pipe-declarations for block %ReceiveEngineDaemon%main%
  //  file nic.linked.opt.aa, line 443
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    ::[assign_stmt_1343] 
    {
      // start:  	LAST_WRITTEN_RX_QUEUE_INDEX := 0  $buffering 1// bits of buffering = 6. 
      //  file nic.linked.opt.aa, line 439
      // Target expression
      // (as target) LAST_WRITTEN_RX_QUEUE_INDEX
      $T[WPIPE_LAST_WRITTEN_RX_QUEUE_INDEX_1341_sample_start_] 
      $T[WPIPE_LAST_WRITTEN_RX_QUEUE_INDEX_1341_sample_completed_] 
      $T[WPIPE_LAST_WRITTEN_RX_QUEUE_INDEX_1341_update_start_] 
      $T[WPIPE_LAST_WRITTEN_RX_QUEUE_INDEX_1341_update_completed_] 
      ;;[WPIPE_LAST_WRITTEN_RX_QUEUE_INDEX_1341_Sample] 
      {
        // pipe write sample-start LAST_WRITTEN_RX_QUEUE_INDEX
        $T [req] $T [ack] 
      }
      ;;[WPIPE_LAST_WRITTEN_RX_QUEUE_INDEX_1341_Update] 
      {
        // pipe write update (complete) LAST_WRITTEN_RX_QUEUE_INDEX
        $T [req] $T [ack] 
      }
      WPIPE_LAST_WRITTEN_RX_QUEUE_INDEX_1341_sample_start_ &-> (WPIPE_LAST_WRITTEN_RX_QUEUE_INDEX_1341_Sample)
      WPIPE_LAST_WRITTEN_RX_QUEUE_INDEX_1341_sample_completed_ <-& (WPIPE_LAST_WRITTEN_RX_QUEUE_INDEX_1341_Sample)
      WPIPE_LAST_WRITTEN_RX_QUEUE_INDEX_1341_update_start_ <-& (WPIPE_LAST_WRITTEN_RX_QUEUE_INDEX_1341_sample_completed_)
      WPIPE_LAST_WRITTEN_RX_QUEUE_INDEX_1341_update_start_ &-> (WPIPE_LAST_WRITTEN_RX_QUEUE_INDEX_1341_Update)
      WPIPE_LAST_WRITTEN_RX_QUEUE_INDEX_1341_update_completed_ <-& (WPIPE_LAST_WRITTEN_RX_QUEUE_INDEX_1341_Update)
      // end:  	LAST_WRITTEN_RX_QUEUE_INDEX := 0  $buffering 1// bits of buffering = 6. 
      // load-store dependencies..
      // pipe read/write dependencies for pipe LAST_WRITTEN_RX_QUEUE_INDEX
      // read-dependencies for pipe LAST_WRITTEN_RX_QUEUE_INDEX
      // write-dependencies for pipe LAST_WRITTEN_RX_QUEUE_INDEX
      // signal write dependencies for LAST_WRITTEN_RX_QUEUE_INDEX
    }
    <>[branch_block_stmt_1344] // Branch Block  file nic.linked.opt.aa, line 440
    {
      $P [branch_block_stmt_1344__entry__]
      branch_block_stmt_1344__entry__ <-| ($entry)
      $P [branch_block_stmt_1344__exit__]
      branch_block_stmt_1344__exit__ |-> ($exit)
      $P [merge_stmt_1346__entry__] 
      $P [merge_stmt_1346__exit__] 
      $P [if_stmt_1347__entry__] 
      $P [if_stmt_1347__exit__] 
      $P [do_while_stmt_1355__entry__] 
      $P [do_while_stmt_1355__exit__] 
      $P [disable_loopback]
      // if-statement  
      //  file nic.linked.opt.aa, line 0
      ;;[if_stmt_1347_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      if_stmt_1347__entry__ |-> (if_stmt_1347_dead_link)
      if_stmt_1347__exit__ <-| (if_stmt_1347_dead_link)
      ;;[if_stmt_1347_eval_test] 
      {
        // test expression evaluate and trigger branch 
        // ( ~ (CONTROL_REGISTER [] 0 ) )
        ;;[NOT_u1_u1_1351] 
        {
          // unary expression 
          // (CONTROL_REGISTER [] 0 )
          ;;[BITSEL_u32_u1_1350] 
          {
            // binary expression 
            ||[BITSEL_u32_u1_1350_inputs] 
            {
              // CONTROL_REGISTER
              ;;[RPIPE_CONTROL_REGISTER_1348] 
              {
                // pipe read
                ;;[Sample] 
                {
                  $T [req] $T [ack] 
                }
                ;;[Update] 
                {
                  $T [req] $T [ack] 
                }
              }
            }
            // flow-through
            ;;[SplitProtocol] 
            {
              ;;[Sample] 
              {
                $T [rr] $T [ra]
              }
              ;;[Update] 
              {
                $T [cr] $T [ca]
              }
            }
          }
          // flow-through
          ;;[SplitProtocol] 
          {
            ;;[Sample] 
            {
              $T [rr] $T [ra]
            }
            ;;[Update] 
            {
              $T [cr] $T [ca]
            }
          }
        }
        $T [branch_req] 
      }
      if_stmt_1347__entry__ |-> (if_stmt_1347_eval_test)
      $P [NOT_u1_u1_1351_place]
      NOT_u1_u1_1351_place <-| (if_stmt_1347_eval_test)
      ;;[if_stmt_1347_if_link] 
      {
        $T [if_choice_transition] 
      }
      ;;[if_stmt_1347_else_link] 
      {
        $T [else_choice_transition] 
      }
      NOT_u1_u1_1351_place |-> (if_stmt_1347_if_link if_stmt_1347_else_link)
      $P [not_enabled_yet_loopback]
      not_enabled_yet_loopback <-| (if_stmt_1347_if_link)
      if_stmt_1347__exit__ <-| (if_stmt_1347_else_link)
      // do-while-statement  
      //  file nic.linked.opt.aa, line 449
      <o> [do_while_stmt_1355]  $depth 31 $buffering 1 
      {
        $P[do_while_stmt_1355__entry__] 
        $P[do_while_stmt_1355__exit__] 
        $P[loop_back] 
        $P[condition_done] 
        $P[loop_body_done] 
        $pipeline [do_while_stmt_1355_loop_body] 
        {
          // Pipelined!
          $T[back_edge_to_loop_body] 
          $T[first_time_through_loop_body] 
          $T[loop_body_start] 
          $T[condition_evaluated] 
          $transitionmerge [entry_tmerge] (back_edge_to_loop_body first_time_through_loop_body) (loop_body_start)
          $entry <-& (loop_body_start)
          // start: 			$call popFromQueue (($bitcast ($uint<1>) _b1  ) FREE_Q ) (rx_buffer_pointer_32 status ) 
          //  file nic.linked.opt.aa, line 454
          $T[call_stmt_1363_sample_start_] 
          $T[call_stmt_1363_sample_completed_] 
          $T[call_stmt_1363_update_start_] 
          $T[call_stmt_1363_update_completed_] 
          // Call input argument 0
          // Call input argument 1
          // FREE_Q
          // start: Forward dependencies from FREE_Q to transition call_stmt_1363_sample_start_
          // special case... expr is signal read, which does not involve control..
          // RAW reenables for FREE_Q
          ;;[call_stmt_1363_Sample] 
          {
            $T [crr] $T [cra] 
          }
          ;;[call_stmt_1363_Update] 
          {
            $T [ccr] $T [cca] 
          }
          call_stmt_1363_sample_start_ &-> (call_stmt_1363_Sample)
          call_stmt_1363_sample_completed_ <-& (call_stmt_1363_Sample)
          call_stmt_1363_sample_completed_ &-> ($null)
          call_stmt_1363_update_start_ &-> (call_stmt_1363_Update)
          call_stmt_1363_update_completed_ <-& (call_stmt_1363_Update)
          // Call output argument 0
          // (as target) rx_buffer_pointer_32
          // Call output argument 1
          // (as target) status
          // self-release: 
          call_stmt_1363_sample_start_ o<-& (call_stmt_1363_sample_completed_ 1)
          $null &-> (call_stmt_1363_update_start_)
          call_stmt_1363_update_start_ o<-& (call_stmt_1363_update_completed_ 0)
          // start: WAR dependencies for rx_buffer_pointer_32
          // done: WAR dependencies for rx_buffer_pointer_32
          // start: WAR dependencies for status
          // done: WAR dependencies for status
          // end: 			$call popFromQueue (($bitcast ($uint<1>) _b1  ) FREE_Q ) (rx_buffer_pointer_32 status ) 
          // start: WAR dependencies for rx_buffer_pointer_36
          // done: WAR dependencies for rx_buffer_pointer_36
          // start:  			$volatile rx_buffer_pointer_36 := (rx_buffer_pointer_32 && ($bitcast ($uint<4>) _b0  )) $buffering 1
          //  file nic.linked.opt.aa, line 456
          // volatile! 
          // Source expression
          // (rx_buffer_pointer_32 && ($bitcast ($uint<4>) _b0  ))
          // rx_buffer_pointer_32
          // Target expression
          // (as target) rx_buffer_pointer_36
          // start: WAR dependencies for rx_buffer_pointer_36
          // done: WAR dependencies for rx_buffer_pointer_36
          // end:  			$volatile rx_buffer_pointer_36 := (rx_buffer_pointer_32 && ($bitcast ($uint<4>) _b0  )) $buffering 1
          // start: 			$guard (~status) $call loadBuffer (rx_buffer_pointer_36 ) (bad_packet_identifier ) 
          //  file nic.linked.opt.aa, line 459
          $T[call_stmt_1381_sample_start_] 
          $T[call_stmt_1381_sample_completed_] 
          $T[call_stmt_1381_update_start_] 
          $T[call_stmt_1381_update_completed_] 
          // Guard expression
          // status
          // start: Forward dependencies from status to transition call_stmt_1381_sample_start_
          call_stmt_1381_sample_start_ <-& (call_stmt_1363_update_completed_)
          // done: Forward dependencies from status to transition call_stmt_1381_sample_start_
          // RAW reenables for status
          call_stmt_1363_update_start_ o<-& (call_stmt_1381_sample_completed_ 0)
          // Call input argument 0
          // rx_buffer_pointer_36
          // start: Forward dependencies from rx_buffer_pointer_36 to transition call_stmt_1381_sample_start_
          call_stmt_1381_sample_start_ <-& (call_stmt_1363_update_completed_)
          // done: Forward dependencies from rx_buffer_pointer_36 to transition call_stmt_1381_sample_start_
          // RAW reenables for rx_buffer_pointer_36
          call_stmt_1363_update_start_ o<-& (call_stmt_1381_sample_completed_ 0)
          ;;[call_stmt_1381_Sample] 
          {
            $T [crr] $T [cra] 
          }
          ;;[call_stmt_1381_Update] 
          {
            $T [ccr] $T [cca] 
          }
          call_stmt_1381_sample_start_ &-> (call_stmt_1381_Sample)
          call_stmt_1381_sample_completed_ <-& (call_stmt_1381_Sample)
          call_stmt_1381_sample_completed_ &-> ($null)
          call_stmt_1381_update_start_ &-> (call_stmt_1381_Update)
          call_stmt_1381_update_completed_ <-& (call_stmt_1381_Update)
          // Call output argument 0
          // (as target) bad_packet_identifier
          // self-release: 
          call_stmt_1381_sample_start_ o<-& (call_stmt_1381_sample_completed_ 1)
          $null &-> (call_stmt_1381_update_start_)
          call_stmt_1381_update_start_ o<-& (call_stmt_1381_update_completed_ 0)
          // start: WAR dependencies for bad_packet_identifier
          // done: WAR dependencies for bad_packet_identifier
          // end: 			$guard (~status) $call loadBuffer (rx_buffer_pointer_36 ) (bad_packet_identifier ) 
          // start:  			NOT_u1_u1_1371_1371_delayed_10_0 := ( ~ status ) $buffering 10 $cut_through // bits of buffering = 10. 
          //  file nic.linked.opt.aa, line 460
          // Source expression
          // ( ~ status )
          $T[NOT_u1_u1_1384_sample_start_] 
          $T[NOT_u1_u1_1384_sample_completed_] 
          $T[NOT_u1_u1_1384_update_start_] 
          $T[NOT_u1_u1_1384_update_completed_] 
          // status
          // start: Forward dependencies from status to transition NOT_u1_u1_1384_sample_start_
          NOT_u1_u1_1384_sample_start_ <-& (call_stmt_1363_update_completed_)
          // done: Forward dependencies from status to transition NOT_u1_u1_1384_sample_start_
          ;;[NOT_u1_u1_1384_Sample] 
          {
            // unary expression 
            $T [rr] $T [ra] // (split) unary operation
          }
          ;;[NOT_u1_u1_1384_Update] 
          {
            // unary expression 
            $T [cr] $T [ca] //(split) unary operation
          }
          NOT_u1_u1_1384_sample_start_ &-> (NOT_u1_u1_1384_Sample)
          NOT_u1_u1_1384_sample_completed_ <-& (NOT_u1_u1_1384_Sample)
          NOT_u1_u1_1384_sample_completed_ &-> ($null)
          NOT_u1_u1_1384_update_start_ &-> (NOT_u1_u1_1384_Update)
          NOT_u1_u1_1384_update_completed_ <-& (NOT_u1_u1_1384_Update)
          // RAW reenables for status
          call_stmt_1363_update_start_ o<-& (NOT_u1_u1_1384_sample_completed_ 0)
          // self-release: 
          NOT_u1_u1_1384_sample_start_ o<-& (NOT_u1_u1_1384_sample_completed_ 1)
          $null &-> (NOT_u1_u1_1384_update_start_)
          NOT_u1_u1_1384_update_start_ o<-& (NOT_u1_u1_1384_update_completed_ 0)
          // Target expression
          // (as target) NOT_u1_u1_1371_1371_delayed_10_0
          // start: WAR dependencies for NOT_u1_u1_1371_1371_delayed_10_0
          // done: WAR dependencies for NOT_u1_u1_1371_1371_delayed_10_0
          // end:  			NOT_u1_u1_1371_1371_delayed_10_0 := ( ~ status ) $buffering 10 $cut_through // bits of buffering = 10. 
          // start: WAR dependencies for ok_flag
          // done: WAR dependencies for ok_flag
          // start:  			$volatile ok_flag := (NOT_u1_u1_1371_1371_delayed_10_0 & ( ~ bad_packet_identifier )) $buffering 1
          //  file nic.linked.opt.aa, line 461
          // volatile! 
          // Source expression
          // (NOT_u1_u1_1371_1371_delayed_10_0 & ( ~ bad_packet_identifier ))
          // NOT_u1_u1_1371_1371_delayed_10_0
          // ( ~ bad_packet_identifier )
          // bad_packet_identifier
          // Target expression
          // (as target) ok_flag
          // start: WAR dependencies for ok_flag
          // done: WAR dependencies for ok_flag
          // end:  			$volatile ok_flag := (NOT_u1_u1_1371_1371_delayed_10_0 & ( ~ bad_packet_identifier )) $buffering 1
          // start:  			NOT_u1_u1_1378_1378_delayed_10_0 := ( ~ status ) $buffering 10 $cut_through // bits of buffering = 10. 
          //  file nic.linked.opt.aa, line 462
          // Source expression
          // ( ~ status )
          $T[NOT_u1_u1_1394_sample_start_] 
          $T[NOT_u1_u1_1394_sample_completed_] 
          $T[NOT_u1_u1_1394_update_start_] 
          $T[NOT_u1_u1_1394_update_completed_] 
          // status
          // start: Forward dependencies from status to transition NOT_u1_u1_1394_sample_start_
          NOT_u1_u1_1394_sample_start_ <-& (call_stmt_1363_update_completed_)
          // done: Forward dependencies from status to transition NOT_u1_u1_1394_sample_start_
          ;;[NOT_u1_u1_1394_Sample] 
          {
            // unary expression 
            $T [rr] $T [ra] // (split) unary operation
          }
          ;;[NOT_u1_u1_1394_Update] 
          {
            // unary expression 
            $T [cr] $T [ca] //(split) unary operation
          }
          NOT_u1_u1_1394_sample_start_ &-> (NOT_u1_u1_1394_Sample)
          NOT_u1_u1_1394_sample_completed_ <-& (NOT_u1_u1_1394_Sample)
          NOT_u1_u1_1394_sample_completed_ &-> ($null)
          NOT_u1_u1_1394_update_start_ &-> (NOT_u1_u1_1394_Update)
          NOT_u1_u1_1394_update_completed_ <-& (NOT_u1_u1_1394_Update)
          // RAW reenables for status
          call_stmt_1363_update_start_ o<-& (NOT_u1_u1_1394_sample_completed_ 0)
          // self-release: 
          NOT_u1_u1_1394_sample_start_ o<-& (NOT_u1_u1_1394_sample_completed_ 1)
          $null &-> (NOT_u1_u1_1394_update_start_)
          NOT_u1_u1_1394_update_start_ o<-& (NOT_u1_u1_1394_update_completed_ 0)
          // Target expression
          // (as target) NOT_u1_u1_1378_1378_delayed_10_0
          // start: WAR dependencies for NOT_u1_u1_1378_1378_delayed_10_0
          // done: WAR dependencies for NOT_u1_u1_1378_1378_delayed_10_0
          // end:  			NOT_u1_u1_1378_1378_delayed_10_0 := ( ~ status ) $buffering 10 $cut_through // bits of buffering = 10. 
          // start: WAR dependencies for free_flag
          // done: WAR dependencies for free_flag
          // start:  			$volatile free_flag := (NOT_u1_u1_1378_1378_delayed_10_0 & bad_packet_identifier) $buffering 1
          //  file nic.linked.opt.aa, line 463
          // volatile! 
          // Source expression
          // (NOT_u1_u1_1378_1378_delayed_10_0 & bad_packet_identifier)
          // NOT_u1_u1_1378_1378_delayed_10_0
          // bad_packet_identifier
          // Target expression
          // (as target) free_flag
          // start: WAR dependencies for free_flag
          // done: WAR dependencies for free_flag
          // end:  			$volatile free_flag := (NOT_u1_u1_1378_1378_delayed_10_0 & bad_packet_identifier) $buffering 1
          // start: WAR dependencies for cond
          // done: WAR dependencies for cond
          // start:  			$volatile cond := (ok_flag == 1 ) $buffering 1
          //  file nic.linked.opt.aa, line 464
          // volatile! 
          // Source expression
          // (ok_flag == 1 )
          // ok_flag
          // Target expression
          // (as target) cond
          // start: WAR dependencies for cond
          // done: WAR dependencies for cond
          // end:  			$volatile cond := (ok_flag == 1 ) $buffering 1
          // start:  			rx_buffer_pointer_36_1392_delayed_10_0 := rx_buffer_pointer_36 $buffering 10 $cut_through // bits of buffering = 360. 
          //  file nic.linked.opt.aa, line 467
          $T[assign_stmt_1412_sample_start_] 
          $T[assign_stmt_1412_sample_completed_] 
          $T[assign_stmt_1412_update_start_] 
          $T[assign_stmt_1412_update_completed_] 
          // Source expression
          // rx_buffer_pointer_36
          // Target expression
          // (as target) rx_buffer_pointer_36_1392_delayed_10_0
          // both source and target are implicit: use interlock 
          // Interlock 
          ;;[assign_stmt_1412_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          ;;[assign_stmt_1412_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          assign_stmt_1412_sample_start_ &-> (assign_stmt_1412_Sample)
          assign_stmt_1412_sample_completed_ <-& (assign_stmt_1412_Sample)
          assign_stmt_1412_sample_completed_ &-> ($null)
          assign_stmt_1412_update_start_ &-> (assign_stmt_1412_Update)
          assign_stmt_1412_update_completed_ <-& (assign_stmt_1412_Update)
          // start: Forward dependencies from rx_buffer_pointer_36 to transition assign_stmt_1412_sample_start_
          assign_stmt_1412_sample_start_ <-& (call_stmt_1363_update_completed_)
          // done: Forward dependencies from rx_buffer_pointer_36 to transition assign_stmt_1412_sample_start_
          // RAW reenables for rx_buffer_pointer_36
          call_stmt_1363_update_start_ o<-& (assign_stmt_1412_sample_completed_ 0)
          // self-release: 
          assign_stmt_1412_sample_start_ o<-& (assign_stmt_1412_sample_completed_ 1)
          $null &-> (assign_stmt_1412_update_start_)
          assign_stmt_1412_update_start_ o<-& (assign_stmt_1412_update_completed_ 0)
          // start: WAR dependencies for rx_buffer_pointer_36_1392_delayed_10_0
          // done: WAR dependencies for rx_buffer_pointer_36_1392_delayed_10_0
          // end:  			rx_buffer_pointer_36_1392_delayed_10_0 := rx_buffer_pointer_36 $buffering 10 $cut_through // bits of buffering = 360. 
          // start: 			$guard (ok_flag) $call populateRxQueue (rx_buffer_pointer_36_1392_delayed_10_0 ) () 
          //  file nic.linked.opt.aa, line 468
          $T[call_stmt_1415_sample_start_] 
          $T[call_stmt_1415_sample_completed_] 
          $T[call_stmt_1415_update_start_] 
          $T[call_stmt_1415_update_completed_] 
          // Guard expression
          // ok_flag
          // start: Forward dependencies from ok_flag to transition call_stmt_1415_sample_start_
          call_stmt_1415_sample_start_ <-& (call_stmt_1381_update_completed_)
          call_stmt_1415_sample_start_ <-& (NOT_u1_u1_1384_update_completed_)
          // done: Forward dependencies from ok_flag to transition call_stmt_1415_sample_start_
          // RAW reenables for ok_flag
          call_stmt_1381_update_start_ o<-& (call_stmt_1415_sample_completed_ 0)
          NOT_u1_u1_1384_update_start_ o<-& (call_stmt_1415_sample_completed_ 0)
          // Call input argument 0
          // rx_buffer_pointer_36_1392_delayed_10_0
          // start: Forward dependencies from rx_buffer_pointer_36_1392_delayed_10_0 to transition call_stmt_1415_sample_start_
          call_stmt_1415_sample_start_ <-& (assign_stmt_1412_update_completed_)
          // done: Forward dependencies from rx_buffer_pointer_36_1392_delayed_10_0 to transition call_stmt_1415_sample_start_
          // RAW reenables for rx_buffer_pointer_36_1392_delayed_10_0
          assign_stmt_1412_update_start_ o<-& (call_stmt_1415_sample_completed_ 0)
          ;;[call_stmt_1415_Sample] 
          {
            $T [crr] $T [cra] 
          }
          ;;[call_stmt_1415_Update] 
          {
            $T [ccr] $T [cca] 
          }
          call_stmt_1415_sample_start_ &-> (call_stmt_1415_Sample)
          call_stmt_1415_sample_completed_ <-& (call_stmt_1415_Sample)
          call_stmt_1415_sample_completed_ &-> ($null)
          call_stmt_1415_update_start_ &-> (call_stmt_1415_Update)
          call_stmt_1415_update_completed_ <-& (call_stmt_1415_Update)
          // self-release: 
          call_stmt_1415_sample_start_ o<-& (call_stmt_1415_sample_completed_ 1)
          $null &-> (call_stmt_1415_update_start_)
          call_stmt_1415_update_start_ o<-& (call_stmt_1415_update_completed_ 0)
          // end: 			$guard (ok_flag) $call populateRxQueue (rx_buffer_pointer_36_1392_delayed_10_0 ) () 
          // start:  			rx_buffer_pointer_36_1400_delayed_10_0 := rx_buffer_pointer_36 $buffering 10 $cut_through // bits of buffering = 360. 
          //  file nic.linked.opt.aa, line 470
          $T[assign_stmt_1420_sample_start_] 
          $T[assign_stmt_1420_sample_completed_] 
          $T[assign_stmt_1420_update_start_] 
          $T[assign_stmt_1420_update_completed_] 
          // Source expression
          // rx_buffer_pointer_36
          // Target expression
          // (as target) rx_buffer_pointer_36_1400_delayed_10_0
          // both source and target are implicit: use interlock 
          // Interlock 
          ;;[assign_stmt_1420_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          ;;[assign_stmt_1420_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          assign_stmt_1420_sample_start_ &-> (assign_stmt_1420_Sample)
          assign_stmt_1420_sample_completed_ <-& (assign_stmt_1420_Sample)
          assign_stmt_1420_sample_completed_ &-> ($null)
          assign_stmt_1420_update_start_ &-> (assign_stmt_1420_Update)
          assign_stmt_1420_update_completed_ <-& (assign_stmt_1420_Update)
          // start: Forward dependencies from rx_buffer_pointer_36 to transition assign_stmt_1420_sample_start_
          assign_stmt_1420_sample_start_ <-& (call_stmt_1363_update_completed_)
          // done: Forward dependencies from rx_buffer_pointer_36 to transition assign_stmt_1420_sample_start_
          // RAW reenables for rx_buffer_pointer_36
          call_stmt_1363_update_start_ o<-& (assign_stmt_1420_sample_completed_ 0)
          // self-release: 
          assign_stmt_1420_sample_start_ o<-& (assign_stmt_1420_sample_completed_ 1)
          $null &-> (assign_stmt_1420_update_start_)
          assign_stmt_1420_update_start_ o<-& (assign_stmt_1420_update_completed_ 0)
          // start: WAR dependencies for rx_buffer_pointer_36_1400_delayed_10_0
          // done: WAR dependencies for rx_buffer_pointer_36_1400_delayed_10_0
          // end:  			rx_buffer_pointer_36_1400_delayed_10_0 := rx_buffer_pointer_36 $buffering 10 $cut_through // bits of buffering = 360. 
          // start: 			$guard (free_flag) $call pushIntoQueue (($bitcast ($uint<1>) _b1  ) FREE_Q ( $slice rx_buffer_pointer_36_1400_delayed_10_0 35 4 )  ) (push_status ) 
          //  file nic.linked.opt.aa, line 471
          $T[call_stmt_1428_sample_start_] 
          $T[call_stmt_1428_sample_completed_] 
          $T[call_stmt_1428_update_start_] 
          $T[call_stmt_1428_update_completed_] 
          // Guard expression
          // free_flag
          // start: Forward dependencies from free_flag to transition call_stmt_1428_sample_start_
          call_stmt_1428_sample_start_ <-& (call_stmt_1381_update_completed_)
          call_stmt_1428_sample_start_ <-& (NOT_u1_u1_1394_update_completed_)
          // done: Forward dependencies from free_flag to transition call_stmt_1428_sample_start_
          // RAW reenables for free_flag
          call_stmt_1381_update_start_ o<-& (call_stmt_1428_sample_completed_ 0)
          NOT_u1_u1_1394_update_start_ o<-& (call_stmt_1428_sample_completed_ 0)
          // Call input argument 0
          // Call input argument 1
          // FREE_Q
          // Call input argument 2
          // ( $slice rx_buffer_pointer_36_1400_delayed_10_0 35 4 ) 
          // rx_buffer_pointer_36_1400_delayed_10_0
          // start: Forward dependencies from FREE_Q to transition call_stmt_1428_sample_start_
          // special case... expr is signal read, which does not involve control..
          // RAW reenables for FREE_Q
          // start: Forward dependencies from ( $slice rx_buffer_pointer_36_1400_delayed_10_0 35 4 )  to transition call_stmt_1428_sample_start_
          call_stmt_1428_sample_start_ <-& (assign_stmt_1420_update_completed_)
          // done: Forward dependencies from ( $slice rx_buffer_pointer_36_1400_delayed_10_0 35 4 )  to transition call_stmt_1428_sample_start_
          // RAW reenables for ( $slice rx_buffer_pointer_36_1400_delayed_10_0 35 4 ) 
          assign_stmt_1420_update_start_ o<-& (call_stmt_1428_sample_completed_ 0)
          ;;[call_stmt_1428_Sample] 
          {
            $T [crr] $T [cra] 
          }
          ;;[call_stmt_1428_Update] 
          {
            $T [ccr] $T [cca] 
          }
          call_stmt_1428_sample_start_ &-> (call_stmt_1428_Sample)
          call_stmt_1428_sample_completed_ <-& (call_stmt_1428_Sample)
          call_stmt_1428_sample_completed_ &-> ($null)
          call_stmt_1428_update_start_ &-> (call_stmt_1428_Update)
          call_stmt_1428_update_completed_ <-& (call_stmt_1428_Update)
          // Call output argument 0
          // (as target) push_status
          // self-release: 
          call_stmt_1428_sample_start_ o<-& (call_stmt_1428_sample_completed_ 1)
          $null &-> (call_stmt_1428_update_start_)
          call_stmt_1428_update_start_ o<-& (call_stmt_1428_update_completed_ 0)
          // start: WAR dependencies for push_status
          // done: WAR dependencies for push_status
          // end: 			$guard (free_flag) $call pushIntoQueue (($bitcast ($uint<1>) _b1  ) FREE_Q ( $slice rx_buffer_pointer_36_1400_delayed_10_0 35 4 )  ) (push_status ) 
          // (CONTROL_REGISTER [] 0 )
          // CONTROL_REGISTER
          $T [loop_body_delay_to_condition_start] $delay
          loop_body_start &-> (loop_body_delay_to_condition_start)
          loop_body_delay_to_condition_start &-> (condition_evaluated)
          // start: Forward dependencies from (CONTROL_REGISTER [] 0 ) to transition condition_evaluated
          // non-constant expression which depends only on signals/constants?
          // done: Forward dependencies from (CONTROL_REGISTER [] 0 ) to transition condition_evaluated
          condition_evaluated &-> ($null)
          // load-store dependencies..
          // pipe read/write dependencies for pipe NUMBER_OF_SERVERS
          // read-dependencies for pipe NUMBER_OF_SERVERS
          // write-dependencies for pipe NUMBER_OF_SERVERS
          // signal write dependencies for NUMBER_OF_SERVERS
          // pipe read/write dependencies for pipe LAST_WRITTEN_RX_QUEUE_INDEX
          // read-dependencies for pipe LAST_WRITTEN_RX_QUEUE_INDEX
          // write-dependencies for pipe LAST_WRITTEN_RX_QUEUE_INDEX
          // signal write dependencies for LAST_WRITTEN_RX_QUEUE_INDEX
          // pipe read/write dependencies for pipe MEMORY_TO_NIC_RESPONSE
          // read-dependencies for pipe MEMORY_TO_NIC_RESPONSE
          call_stmt_1381_sample_start_ <-& (call_stmt_1363_update_completed_)
          call_stmt_1415_sample_start_ <-& (call_stmt_1381_update_completed_)
          call_stmt_1428_sample_start_ <-& (call_stmt_1415_update_completed_)
          // ring dependency in pipeline.
          call_stmt_1363_update_start_ o<-& (call_stmt_1428_update_completed_ 0)
          // write-dependencies for pipe MEMORY_TO_NIC_RESPONSE
          // signal write dependencies for MEMORY_TO_NIC_RESPONSE
          // pipe read/write dependencies for pipe NIC_REQUEST_REGISTER_ACCESS_PIPE
          // read-dependencies for pipe NIC_REQUEST_REGISTER_ACCESS_PIPE
          // write-dependencies for pipe NIC_REQUEST_REGISTER_ACCESS_PIPE
          // signal write dependencies for NIC_REQUEST_REGISTER_ACCESS_PIPE
          // pipe read/write dependencies for pipe NIC_RESPONSE_REGISTER_ACCESS_PIPE
          // read-dependencies for pipe NIC_RESPONSE_REGISTER_ACCESS_PIPE
          // write-dependencies for pipe NIC_RESPONSE_REGISTER_ACCESS_PIPE
          // signal write dependencies for NIC_RESPONSE_REGISTER_ACCESS_PIPE
          // pipe read/write dependencies for pipe NIC_TO_MEMORY_REQUEST
          // read-dependencies for pipe NIC_TO_MEMORY_REQUEST
          // write-dependencies for pipe NIC_TO_MEMORY_REQUEST
          call_stmt_1381_sample_start_ <-& (call_stmt_1363_update_completed_)
          call_stmt_1415_sample_start_ <-& (call_stmt_1381_update_completed_)
          call_stmt_1428_sample_start_ <-& (call_stmt_1415_update_completed_)
          // ring dependency in pipeline.
          call_stmt_1363_sample_start_ o<-& (call_stmt_1428_update_completed_ 0)
          // signal write dependencies for NIC_TO_MEMORY_REQUEST
          // pipe read/write dependencies for pipe nic_rx_to_header
          // read-dependencies for pipe nic_rx_to_header
          // write-dependencies for pipe nic_rx_to_header
          // signal write dependencies for nic_rx_to_header
          // pipe read/write dependencies for pipe nic_rx_to_packet
          // read-dependencies for pipe nic_rx_to_packet
          // write-dependencies for pipe nic_rx_to_packet
          // signal write dependencies for nic_rx_to_packet
        }
        ( first_time_through_loop_body  back_edge_to_loop_body) 
        ( condition_evaluated )
        ;; [loop_exit] 
        {
          $T [ack] 
        }
        ;; [loop_taken] 
        {
          $T [ack] 
        }
        do_while_stmt_1355__entry__ <-| ($entry)
        loop_body_done <-| ( do_while_stmt_1355_loop_body ) 
        condition_done |-> (loop_exit loop_taken)
        do_while_stmt_1355__exit__ |-> ($exit)
        $bind condition_done <= do_while_stmt_1355_loop_body : condition_evaluated
        $bind do_while_stmt_1355__entry__  => do_while_stmt_1355_loop_body : first_time_through_loop_body 
        $bind loop_back  => do_while_stmt_1355_loop_body : back_edge_to_loop_body 
        $terminate (loop_exit loop_taken loop_body_done) (loop_back do_while_stmt_1355__exit__)
      }
      do_while_stmt_1355__entry__ |-> (do_while_stmt_1355)
      do_while_stmt_1355__exit__ <-| (do_while_stmt_1355)
      // control-path for merge  
      //  file nic.linked.opt.aa, line 443
      ;;[merge_stmt_1346_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      merge_stmt_1346__entry__ |-> (merge_stmt_1346_dead_link)
      merge_stmt_1346__exit__ <-| (merge_stmt_1346_dead_link)
      //---------------------   merge statement  file nic.linked.opt.aa, line 443  --------------------------
      ||[merge_stmt_1346__entry___PhiReq] 
      {
        // no phi statements in merge..
      }
      merge_stmt_1346__entry__ |-> (merge_stmt_1346__entry___PhiReq)
      ||[disable_loopback_PhiReq] 
      {
        // no phi statements in merge..
      }
      disable_loopback |-> (disable_loopback_PhiReq)
      ||[not_enabled_yet_loopback_PhiReq] 
      {
        // no phi statements in merge..
      }
      not_enabled_yet_loopback |-> (not_enabled_yet_loopback_PhiReq)
      $P [merge_stmt_1346_PhiReqMerge] 
      merge_stmt_1346_PhiReqMerge <-| ( merge_stmt_1346__entry___PhiReq  disable_loopback_PhiReq  not_enabled_yet_loopback_PhiReq )
      ||[merge_stmt_1346_PhiAck] 
      {
        $T [dummy] 
      }
      merge_stmt_1346_PhiReqMerge |-> (merge_stmt_1346_PhiAck)
      merge_stmt_1346__exit__  <-| (merge_stmt_1346_PhiAck)
      //---------------------  end of merge statement  file nic.linked.opt.aa, line 443  --------------------------
      merge_stmt_1346__entry__ <-| (branch_block_stmt_1344__entry__)
      if_stmt_1347__entry__ <-| (merge_stmt_1346__exit__)
      do_while_stmt_1355__entry__ <-| (if_stmt_1347__exit__)
      disable_loopback <-| (do_while_stmt_1355__exit__)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %ReceiveEngineDaemon%main%
    //  file nic.linked.opt.aa, line 443
    // constant-object-declarations for block %ReceiveEngineDaemon%main%
    //  file nic.linked.opt.aa, line 451
    // constant-object-declarations for block %ReceiveEngineDaemon%main
    //  file nic.linked.opt.aa, line 440
    // constant-object-declarations for block %ReceiveEngineDaemon
    //  file nic.linked.opt.aa, line 434
    // 0 
    $constant $W[konst_1342_wire_constant] : $int<6> := _b000000// 0
    // constant-declarations for block %ReceiveEngineDaemon%main
    //  file nic.linked.opt.aa, line 440
    // constant-declarations for block %ReceiveEngineDaemon%main%
    //  file nic.linked.opt.aa, line 443
    // if-statement  
    //  file nic.linked.opt.aa, line 0
    // 0 
    $constant $W[konst_1349_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // do-while statement  
    //  file nic.linked.opt.aa, line 449
    // 0 
    $constant $W[konst_1432_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // constant-declarations for block %ReceiveEngineDaemon%main%
    //  file nic.linked.opt.aa, line 451
    // 			$call popFromQueue (($bitcast ($uint<1>) _b1  ) FREE_Q ) (rx_buffer_pointer_32 status ) 
    //  file nic.linked.opt.aa, line 454
    // ($bitcast ($uint<1>) _b1  )
    $constant $W[type_cast_1359_wire_constant] : $int<1> := _b1// 1
    // ($bitcast ($uint<4>) _b0  )
    $constant $W[type_cast_1369_wire_constant] : $int<4> := _b0000// 0
    // 			$guard (~status) $call loadBuffer (rx_buffer_pointer_36 ) (bad_packet_identifier ) 
    //  file nic.linked.opt.aa, line 459
    // 1 
    $constant $W[konst_1403_wire_constant] : $int<1> := _b1// 1
    // 			$guard (ok_flag) $call populateRxQueue (rx_buffer_pointer_36_1392_delayed_10_0 ) () 
    //  file nic.linked.opt.aa, line 468
    // 			$guard (free_flag) $call pushIntoQueue (($bitcast ($uint<1>) _b1  ) FREE_Q ( $slice rx_buffer_pointer_36_1400_delayed_10_0 35 4 )  ) (push_status ) 
    //  file nic.linked.opt.aa, line 471
    // ($bitcast ($uint<1>) _b1  )
    $constant $W[type_cast_1423_wire_constant] : $int<1> := _b1// 1
    // 	LAST_WRITTEN_RX_QUEUE_INDEX := 0  $buffering 1// bits of buffering = 6. 
    //  file nic.linked.opt.aa, line 439
    // LAST_WRITTEN_RX_QUEUE_INDEX
    // block %ReceiveEngineDaemon%main
    //  file nic.linked.opt.aa, line 440
    // if statement  
    //  file nic.linked.opt.aa, line 0
    // CONTROL_REGISTER
    $W[RPIPE_CONTROL_REGISTER_1348_wire] : $int<32>
    // (CONTROL_REGISTER [] 0 )
    $intermediate $W[BITSEL_u32_u1_1350_wire] : $int<1>
    // ( ~ (CONTROL_REGISTER [] 0 ) )
    $intermediate $W[NOT_u1_u1_1351_wire] : $int<1>
    // do-while statement  
    //  file nic.linked.opt.aa, line 449
    // CONTROL_REGISTER
    $W[RPIPE_CONTROL_REGISTER_1431_wire] : $int<32>
    // (CONTROL_REGISTER [] 0 )
    $intermediate $W[BITSEL_u32_u1_1433_wire] : $int<1>
    // 			$call popFromQueue (($bitcast ($uint<1>) _b1  ) FREE_Q ) (rx_buffer_pointer_32 status ) 
    //  file nic.linked.opt.aa, line 454
    // FREE_Q
    $W[RPIPE_FREE_Q_1360_wire] : $int<36>
    // rx_buffer_pointer_32
    $W[rx_buffer_pointer_32_1363] : $int<32>
    // status
    $W[status_1363] : $int<1>
    // 			$volatile rx_buffer_pointer_36 := (rx_buffer_pointer_32 && ($bitcast ($uint<4>) _b0  )) $buffering 1
    //  file nic.linked.opt.aa, line 456
    // rx_buffer_pointer_36
    $W[rx_buffer_pointer_36_1371] : $int<36>
    // 			$guard (~status) $call loadBuffer (rx_buffer_pointer_36 ) (bad_packet_identifier ) 
    //  file nic.linked.opt.aa, line 459
    // bad_packet_identifier
    $W[bad_packet_identifier_1381] : $int<1>
    // 			NOT_u1_u1_1371_1371_delayed_10_0 := ( ~ status ) $buffering 10 $cut_through // bits of buffering = 10. 
    //  file nic.linked.opt.aa, line 460
    // NOT_u1_u1_1371_1371_delayed_10_0
    $W[NOT_u1_u1_1371_1371_delayed_10_0_1385] : $int<1>
    // 			$volatile ok_flag := (NOT_u1_u1_1371_1371_delayed_10_0 & ( ~ bad_packet_identifier )) $buffering 1
    //  file nic.linked.opt.aa, line 461
    // ( ~ bad_packet_identifier )
    $intermediate $W[NOT_u1_u1_1389_wire] : $int<1>
    // ok_flag
    $W[ok_flag_1391] : $int<1>
    // 			NOT_u1_u1_1378_1378_delayed_10_0 := ( ~ status ) $buffering 10 $cut_through // bits of buffering = 10. 
    //  file nic.linked.opt.aa, line 462
    // NOT_u1_u1_1378_1378_delayed_10_0
    $W[NOT_u1_u1_1378_1378_delayed_10_0_1395] : $int<1>
    // 			$volatile free_flag := (NOT_u1_u1_1378_1378_delayed_10_0 & bad_packet_identifier) $buffering 1
    //  file nic.linked.opt.aa, line 463
    // free_flag
    $W[free_flag_1400] : $int<1>
    // 			$volatile cond := (ok_flag == 1 ) $buffering 1
    //  file nic.linked.opt.aa, line 464
    // cond
    $W[cond_1405] : $int<1>
    // 			rx_buffer_pointer_36_1392_delayed_10_0 := rx_buffer_pointer_36 $buffering 10 $cut_through // bits of buffering = 360. 
    //  file nic.linked.opt.aa, line 467
    // rx_buffer_pointer_36_1392_delayed_10_0
    $W[rx_buffer_pointer_36_1392_delayed_10_0_1412] : $int<36>
    // 			$guard (ok_flag) $call populateRxQueue (rx_buffer_pointer_36_1392_delayed_10_0 ) () 
    //  file nic.linked.opt.aa, line 468
    // 			rx_buffer_pointer_36_1400_delayed_10_0 := rx_buffer_pointer_36 $buffering 10 $cut_through // bits of buffering = 360. 
    //  file nic.linked.opt.aa, line 470
    // rx_buffer_pointer_36_1400_delayed_10_0
    $W[rx_buffer_pointer_36_1400_delayed_10_0_1420] : $int<36>
    // 			$guard (free_flag) $call pushIntoQueue (($bitcast ($uint<1>) _b1  ) FREE_Q ( $slice rx_buffer_pointer_36_1400_delayed_10_0 35 4 )  ) (push_status ) 
    //  file nic.linked.opt.aa, line 471
    // FREE_Q
    $W[RPIPE_FREE_Q_1424_wire] : $int<36>
    // ( $slice rx_buffer_pointer_36_1400_delayed_10_0 35 4 ) 
    $intermediate $W[slice_1426_wire] : $int<32>
    // push_status
    $W[push_status_1428] : $int<1>
    // 	LAST_WRITTEN_RX_QUEUE_INDEX := 0  $buffering 1// bits of buffering = 6. 
    //  file nic.linked.opt.aa, line 439
    // LAST_WRITTEN_RX_QUEUE_INDEX
    $ioport $out [WPIPE_LAST_WRITTEN_RX_QUEUE_INDEX_1341_inst]  (konst_1342_wire_constant) (LAST_WRITTEN_RX_QUEUE_INDEX) 
    // datapath-instances for block %ReceiveEngineDaemon%main
    //  file nic.linked.opt.aa, line 440
    // datapath-instances for if  
    //  file nic.linked.opt.aa, line 0
    // CONTROL_REGISTER
    $ioport $in [RPIPE_CONTROL_REGISTER_1348_inst] (CONTROL_REGISTER) (RPIPE_CONTROL_REGISTER_1348_wire) 
    $buffering $out RPIPE_CONTROL_REGISTER_1348_inst RPIPE_CONTROL_REGISTER_1348_wire 1
    // (CONTROL_REGISTER [] 0 )
    [][BITSEL_u32_u1_1350_inst] (RPIPE_CONTROL_REGISTER_1348_wire konst_1349_wire_constant) (BITSEL_u32_u1_1350_wire)   $flowthrough 
    $delay BITSEL_u32_u1_1350_inst 0
    // ( ~ (CONTROL_REGISTER [] 0 ) )
    ~ [NOT_u1_u1_1351_inst] (BITSEL_u32_u1_1350_wire) (NOT_u1_u1_1351_wire)   $flowthrough
    $delay NOT_u1_u1_1351_inst 0
    ==0? [if_stmt_1347_branch] (NOT_u1_u1_1351_wire)
    // datapath-instances for do-while  
    //  file nic.linked.opt.aa, line 449
    // CONTROL_REGISTER
    $ioport $in [RPIPE_CONTROL_REGISTER_1431_inst] (CONTROL_REGISTER) (RPIPE_CONTROL_REGISTER_1431_wire)  $fullrate 
    $buffering $out RPIPE_CONTROL_REGISTER_1431_inst RPIPE_CONTROL_REGISTER_1431_wire 1
    // (CONTROL_REGISTER [] 0 )
    [][BITSEL_u32_u1_1433_inst] (RPIPE_CONTROL_REGISTER_1431_wire konst_1432_wire_constant) (BITSEL_u32_u1_1433_wire)   $flowthrough 
    $delay BITSEL_u32_u1_1433_inst 0
    ==0? [do_while_stmt_1355_branch] (BITSEL_u32_u1_1433_wire)
    $flowthrough
    // 			$call popFromQueue (($bitcast ($uint<1>) _b1  ) FREE_Q ) (rx_buffer_pointer_32 status ) 
    //  file nic.linked.opt.aa, line 454
    // FREE_Q
    $ioport $in [RPIPE_FREE_Q_1360_inst] (FREE_Q) (RPIPE_FREE_Q_1360_wire)  $fullrate 
    $buffering $out RPIPE_FREE_Q_1360_inst RPIPE_FREE_Q_1360_wire 1
    $call [call_stmt_1363_call] $module popFromQueue(type_cast_1359_wire_constant RPIPE_FREE_Q_1360_wire) (rx_buffer_pointer_32_1363 status_1363)   $fullrate
    $delay call_stmt_1363_call 4
    $buffering  $in call_stmt_1363_call type_cast_1359_wire_constant 1
    $buffering  $in call_stmt_1363_call RPIPE_FREE_Q_1360_wire 1
    $buffering  $out call_stmt_1363_call rx_buffer_pointer_32_1363 1
    $buffering  $out call_stmt_1363_call status_1363 1
    // 			$volatile rx_buffer_pointer_36 := (rx_buffer_pointer_32 && ($bitcast ($uint<4>) _b0  )) $buffering 1
    //  file nic.linked.opt.aa, line 456
    // (rx_buffer_pointer_32 && ($bitcast ($uint<4>) _b0  ))
    &&[CONCAT_u32_u36_1370_inst] (rx_buffer_pointer_32_1363 type_cast_1369_wire_constant) (rx_buffer_pointer_36_1371)   $flowthrough 
    $delay CONCAT_u32_u36_1370_inst 0
    // 			$guard (~status) $call loadBuffer (rx_buffer_pointer_36 ) (bad_packet_identifier ) 
    //  file nic.linked.opt.aa, line 459
    $call [call_stmt_1381_call] $module loadBuffer(rx_buffer_pointer_36_1371) (bad_packet_identifier_1381) $guard ( ~ status_1363 )   $fullrate
    $delay call_stmt_1381_call 10
    $buffering  $in call_stmt_1381_call rx_buffer_pointer_36_1371 1
    $buffering  $out call_stmt_1381_call bad_packet_identifier_1381 1
    // 			NOT_u1_u1_1371_1371_delayed_10_0 := ( ~ status ) $buffering 10 $cut_through // bits of buffering = 10. 
    //  file nic.linked.opt.aa, line 460
    // ( ~ status )
    ~ [NOT_u1_u1_1384_inst] (status_1363) (NOT_u1_u1_1371_1371_delayed_10_0_1385)   $fullrate
    $buffering  $out NOT_u1_u1_1384_inst NOT_u1_u1_1371_1371_delayed_10_0_1385 10
    $delay NOT_u1_u1_1384_inst 1
    // 			$volatile ok_flag := (NOT_u1_u1_1371_1371_delayed_10_0 & ( ~ bad_packet_identifier )) $buffering 1
    //  file nic.linked.opt.aa, line 461
    // ( ~ bad_packet_identifier )
    ~ [NOT_u1_u1_1389_inst] (bad_packet_identifier_1381) (NOT_u1_u1_1389_wire)   $flowthrough
    $delay NOT_u1_u1_1389_inst 0
    // (NOT_u1_u1_1371_1371_delayed_10_0 & ( ~ bad_packet_identifier ))
    &[AND_u1_u1_1390_inst] (NOT_u1_u1_1371_1371_delayed_10_0_1385 NOT_u1_u1_1389_wire) (ok_flag_1391)   $flowthrough 
    $delay AND_u1_u1_1390_inst 0
    // 			NOT_u1_u1_1378_1378_delayed_10_0 := ( ~ status ) $buffering 10 $cut_through // bits of buffering = 10. 
    //  file nic.linked.opt.aa, line 462
    // ( ~ status )
    ~ [NOT_u1_u1_1394_inst] (status_1363) (NOT_u1_u1_1378_1378_delayed_10_0_1395)   $fullrate
    $buffering  $out NOT_u1_u1_1394_inst NOT_u1_u1_1378_1378_delayed_10_0_1395 10
    $delay NOT_u1_u1_1394_inst 1
    // 			$volatile free_flag := (NOT_u1_u1_1378_1378_delayed_10_0 & bad_packet_identifier) $buffering 1
    //  file nic.linked.opt.aa, line 463
    // (NOT_u1_u1_1378_1378_delayed_10_0 & bad_packet_identifier)
    &[AND_u1_u1_1399_inst] (NOT_u1_u1_1378_1378_delayed_10_0_1395 bad_packet_identifier_1381) (free_flag_1400)   $flowthrough 
    $delay AND_u1_u1_1399_inst 0
    // 			$volatile cond := (ok_flag == 1 ) $buffering 1
    //  file nic.linked.opt.aa, line 464
    // (ok_flag == 1 )
    ==[EQ_u1_u1_1404_inst] (ok_flag_1391 konst_1403_wire_constant) (cond_1405)   $flowthrough 
    $delay EQ_u1_u1_1404_inst 0
    // 			rx_buffer_pointer_36_1392_delayed_10_0 := rx_buffer_pointer_36 $buffering 10 $cut_through // bits of buffering = 360. 
    //  file nic.linked.opt.aa, line 467
    # := [W_rx_buffer_pointer_36_1392_delayed_10_0_1410_inst] (rx_buffer_pointer_36_1371) (rx_buffer_pointer_36_1392_delayed_10_0_1412)  $cut_through    $fullrate
    $buffering  $out W_rx_buffer_pointer_36_1392_delayed_10_0_1410_inst rx_buffer_pointer_36_1392_delayed_10_0_1412 10
    // 			$guard (ok_flag) $call populateRxQueue (rx_buffer_pointer_36_1392_delayed_10_0 ) () 
    //  file nic.linked.opt.aa, line 468
    $call [call_stmt_1415_call] $module populateRxQueue(rx_buffer_pointer_36_1392_delayed_10_0_1412) () $guard ( ok_flag_1391 )   $fullrate
    $delay call_stmt_1415_call 4
    $buffering  $in call_stmt_1415_call rx_buffer_pointer_36_1392_delayed_10_0_1412 1
    // 			rx_buffer_pointer_36_1400_delayed_10_0 := rx_buffer_pointer_36 $buffering 10 $cut_through // bits of buffering = 360. 
    //  file nic.linked.opt.aa, line 470
    # := [W_rx_buffer_pointer_36_1400_delayed_10_0_1418_inst] (rx_buffer_pointer_36_1371) (rx_buffer_pointer_36_1400_delayed_10_0_1420)  $cut_through    $fullrate
    $buffering  $out W_rx_buffer_pointer_36_1400_delayed_10_0_1418_inst rx_buffer_pointer_36_1400_delayed_10_0_1420 10
    // 			$guard (free_flag) $call pushIntoQueue (($bitcast ($uint<1>) _b1  ) FREE_Q ( $slice rx_buffer_pointer_36_1400_delayed_10_0 35 4 )  ) (push_status ) 
    //  file nic.linked.opt.aa, line 471
    // FREE_Q
    $ioport $in [RPIPE_FREE_Q_1424_inst] (FREE_Q) (RPIPE_FREE_Q_1424_wire) $guard ( free_flag_1400 )  $fullrate 
    $buffering $out RPIPE_FREE_Q_1424_inst RPIPE_FREE_Q_1424_wire 1
    // ( $slice rx_buffer_pointer_36_1400_delayed_10_0 35 4 ) 
    [:] [slice_1426_inst] (rx_buffer_pointer_36_1400_delayed_10_0_1420 35 4) (slice_1426_wire) $guard ( free_flag_1400 )  $flowthrough
    $delay slice_1426_inst 0
    $call [call_stmt_1428_call] $module pushIntoQueue(type_cast_1423_wire_constant RPIPE_FREE_Q_1424_wire slice_1426_wire) (push_status_1428) $guard ( free_flag_1400 )   $fullrate
    $delay call_stmt_1428_call 4
    $buffering  $in call_stmt_1428_call type_cast_1423_wire_constant 1
    $buffering  $in call_stmt_1428_call RPIPE_FREE_Q_1424_wire 1
    $buffering  $in call_stmt_1428_call slice_1426_wire 1
    $buffering  $out call_stmt_1428_call push_status_1428 1
  }
  // end data-path
  // 	LAST_WRITTEN_RX_QUEUE_INDEX := 0  $buffering 1// bits of buffering = 6. 
  //  file nic.linked.opt.aa, line 439
  // LAST_WRITTEN_RX_QUEUE_INDEX
  WPIPE_LAST_WRITTEN_RX_QUEUE_INDEX_1341_inst <=> (assign_stmt_1343/WPIPE_LAST_WRITTEN_RX_QUEUE_INDEX_1341_Sample/req assign_stmt_1343/WPIPE_LAST_WRITTEN_RX_QUEUE_INDEX_1341_Update/req) (assign_stmt_1343/WPIPE_LAST_WRITTEN_RX_QUEUE_INDEX_1341_Sample/ack assign_stmt_1343/WPIPE_LAST_WRITTEN_RX_QUEUE_INDEX_1341_Update/ack)
  // CP-DP links for merge  
  //  file nic.linked.opt.aa, line 443
  // CP-DP links for if  
  //  file nic.linked.opt.aa, line 0
  // CONTROL_REGISTER
  // (CONTROL_REGISTER [] 0 )
  // ( ~ (CONTROL_REGISTER [] 0 ) )
  if_stmt_1347_branch <=> (branch_block_stmt_1344/if_stmt_1347_eval_test/branch_req) (branch_block_stmt_1344/if_stmt_1347_else_link/else_choice_transition branch_block_stmt_1344/if_stmt_1347_if_link/if_choice_transition)
  // CP-DP links for do-while  do_while_stmt_1355
  //  file nic.linked.opt.aa, line 449
  // 			$call popFromQueue (($bitcast ($uint<1>) _b1  ) FREE_Q ) (rx_buffer_pointer_32 status ) 
  //  file nic.linked.opt.aa, line 454
  // FREE_Q
  call_stmt_1363_call <=> (branch_block_stmt_1344/do_while_stmt_1355/do_while_stmt_1355_loop_body/call_stmt_1363_Sample/crr branch_block_stmt_1344/do_while_stmt_1355/do_while_stmt_1355_loop_body/call_stmt_1363_Update/ccr) (branch_block_stmt_1344/do_while_stmt_1355/do_while_stmt_1355_loop_body/call_stmt_1363_Sample/cra branch_block_stmt_1344/do_while_stmt_1355/do_while_stmt_1355_loop_body/call_stmt_1363_Update/cca)
  // 			$volatile rx_buffer_pointer_36 := (rx_buffer_pointer_32 && ($bitcast ($uint<4>) _b0  )) $buffering 1
  //  file nic.linked.opt.aa, line 456
  // (rx_buffer_pointer_32 && ($bitcast ($uint<4>) _b0  ))
  // rx_buffer_pointer_32
  // 			$guard (~status) $call loadBuffer (rx_buffer_pointer_36 ) (bad_packet_identifier ) 
  //  file nic.linked.opt.aa, line 459
  // rx_buffer_pointer_36
  call_stmt_1381_call <=> (branch_block_stmt_1344/do_while_stmt_1355/do_while_stmt_1355_loop_body/call_stmt_1381_Sample/crr branch_block_stmt_1344/do_while_stmt_1355/do_while_stmt_1355_loop_body/call_stmt_1381_Update/ccr) (branch_block_stmt_1344/do_while_stmt_1355/do_while_stmt_1355_loop_body/call_stmt_1381_Sample/cra branch_block_stmt_1344/do_while_stmt_1355/do_while_stmt_1355_loop_body/call_stmt_1381_Update/cca)
  // 			NOT_u1_u1_1371_1371_delayed_10_0 := ( ~ status ) $buffering 10 $cut_through // bits of buffering = 10. 
  //  file nic.linked.opt.aa, line 460
  // status
  // ( ~ status )
  NOT_u1_u1_1384_inst <=> (branch_block_stmt_1344/do_while_stmt_1355/do_while_stmt_1355_loop_body/NOT_u1_u1_1384_Sample/rr branch_block_stmt_1344/do_while_stmt_1355/do_while_stmt_1355_loop_body/NOT_u1_u1_1384_Update/cr) (branch_block_stmt_1344/do_while_stmt_1355/do_while_stmt_1355_loop_body/NOT_u1_u1_1384_Sample/ra branch_block_stmt_1344/do_while_stmt_1355/do_while_stmt_1355_loop_body/NOT_u1_u1_1384_Update/ca)
  // 			$volatile ok_flag := (NOT_u1_u1_1371_1371_delayed_10_0 & ( ~ bad_packet_identifier )) $buffering 1
  //  file nic.linked.opt.aa, line 461
  // (NOT_u1_u1_1371_1371_delayed_10_0 & ( ~ bad_packet_identifier ))
  // NOT_u1_u1_1371_1371_delayed_10_0
  // bad_packet_identifier
  // 			NOT_u1_u1_1378_1378_delayed_10_0 := ( ~ status ) $buffering 10 $cut_through // bits of buffering = 10. 
  //  file nic.linked.opt.aa, line 462
  // status
  // ( ~ status )
  NOT_u1_u1_1394_inst <=> (branch_block_stmt_1344/do_while_stmt_1355/do_while_stmt_1355_loop_body/NOT_u1_u1_1394_Sample/rr branch_block_stmt_1344/do_while_stmt_1355/do_while_stmt_1355_loop_body/NOT_u1_u1_1394_Update/cr) (branch_block_stmt_1344/do_while_stmt_1355/do_while_stmt_1355_loop_body/NOT_u1_u1_1394_Sample/ra branch_block_stmt_1344/do_while_stmt_1355/do_while_stmt_1355_loop_body/NOT_u1_u1_1394_Update/ca)
  // 			$volatile free_flag := (NOT_u1_u1_1378_1378_delayed_10_0 & bad_packet_identifier) $buffering 1
  //  file nic.linked.opt.aa, line 463
  // (NOT_u1_u1_1378_1378_delayed_10_0 & bad_packet_identifier)
  // NOT_u1_u1_1378_1378_delayed_10_0
  // bad_packet_identifier
  // 			$volatile cond := (ok_flag == 1 ) $buffering 1
  //  file nic.linked.opt.aa, line 464
  // (ok_flag == 1 )
  // ok_flag
  // 			rx_buffer_pointer_36_1392_delayed_10_0 := rx_buffer_pointer_36 $buffering 10 $cut_through // bits of buffering = 360. 
  //  file nic.linked.opt.aa, line 467
  // rx_buffer_pointer_36
  W_rx_buffer_pointer_36_1392_delayed_10_0_1410_inst <=> (branch_block_stmt_1344/do_while_stmt_1355/do_while_stmt_1355_loop_body/assign_stmt_1412_Sample/req branch_block_stmt_1344/do_while_stmt_1355/do_while_stmt_1355_loop_body/assign_stmt_1412_Update/req) (branch_block_stmt_1344/do_while_stmt_1355/do_while_stmt_1355_loop_body/assign_stmt_1412_Sample/ack branch_block_stmt_1344/do_while_stmt_1355/do_while_stmt_1355_loop_body/assign_stmt_1412_Update/ack)
  // 			$guard (ok_flag) $call populateRxQueue (rx_buffer_pointer_36_1392_delayed_10_0 ) () 
  //  file nic.linked.opt.aa, line 468
  // rx_buffer_pointer_36_1392_delayed_10_0
  call_stmt_1415_call <=> (branch_block_stmt_1344/do_while_stmt_1355/do_while_stmt_1355_loop_body/call_stmt_1415_Sample/crr branch_block_stmt_1344/do_while_stmt_1355/do_while_stmt_1355_loop_body/call_stmt_1415_Update/ccr) (branch_block_stmt_1344/do_while_stmt_1355/do_while_stmt_1355_loop_body/call_stmt_1415_Sample/cra branch_block_stmt_1344/do_while_stmt_1355/do_while_stmt_1355_loop_body/call_stmt_1415_Update/cca)
  // 			rx_buffer_pointer_36_1400_delayed_10_0 := rx_buffer_pointer_36 $buffering 10 $cut_through // bits of buffering = 360. 
  //  file nic.linked.opt.aa, line 470
  // rx_buffer_pointer_36
  W_rx_buffer_pointer_36_1400_delayed_10_0_1418_inst <=> (branch_block_stmt_1344/do_while_stmt_1355/do_while_stmt_1355_loop_body/assign_stmt_1420_Sample/req branch_block_stmt_1344/do_while_stmt_1355/do_while_stmt_1355_loop_body/assign_stmt_1420_Update/req) (branch_block_stmt_1344/do_while_stmt_1355/do_while_stmt_1355_loop_body/assign_stmt_1420_Sample/ack branch_block_stmt_1344/do_while_stmt_1355/do_while_stmt_1355_loop_body/assign_stmt_1420_Update/ack)
  // 			$guard (free_flag) $call pushIntoQueue (($bitcast ($uint<1>) _b1  ) FREE_Q ( $slice rx_buffer_pointer_36_1400_delayed_10_0 35 4 )  ) (push_status ) 
  //  file nic.linked.opt.aa, line 471
  // FREE_Q
  // rx_buffer_pointer_36_1400_delayed_10_0
  call_stmt_1428_call <=> (branch_block_stmt_1344/do_while_stmt_1355/do_while_stmt_1355_loop_body/call_stmt_1428_Sample/crr branch_block_stmt_1344/do_while_stmt_1355/do_while_stmt_1355_loop_body/call_stmt_1428_Update/ccr) (branch_block_stmt_1344/do_while_stmt_1355/do_while_stmt_1355_loop_body/call_stmt_1428_Sample/cra branch_block_stmt_1344/do_while_stmt_1355/do_while_stmt_1355_loop_body/call_stmt_1428_Update/cca)
  // (CONTROL_REGISTER [] 0 )
  // CONTROL_REGISTER
  do_while_stmt_1355_branch <=> (branch_block_stmt_1344/do_while_stmt_1355/do_while_stmt_1355_loop_body/condition_evaluated) (branch_block_stmt_1344/do_while_stmt_1355/loop_exit/ack branch_block_stmt_1344/do_while_stmt_1355/loop_taken/ack)
}
$module [SoftwareRegisterAccessDaemon] 
{
  // pipe-declarations for block %SoftwareRegisterAccessDaemon
  //  file nic.linked.opt.aa, line 477
  // pipe-declarations for block %SoftwareRegisterAccessDaemon%loop
  //  file nic.linked.opt.aa, line 483
  // memory-space 0 is read from.
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    <>[branch_block_stmt_1439] // Branch Block  file nic.linked.opt.aa, line 483
    {
      $P [branch_block_stmt_1439__entry__]
      branch_block_stmt_1439__entry__ <-| ($entry)
      $P [branch_block_stmt_1439__exit__]
      branch_block_stmt_1439__exit__ |-> ($exit)
      $P [do_while_stmt_1440__entry__] 
      $P [do_while_stmt_1440__exit__] 
      // do-while-statement  
      //  file nic.linked.opt.aa, line 485
      <o> [do_while_stmt_1440]  $depth 31 $buffering 1 
      {
        $P[do_while_stmt_1440__entry__] 
        $P[do_while_stmt_1440__exit__] 
        $P[loop_back] 
        $P[condition_done] 
        $P[loop_body_done] 
        $pipeline [do_while_stmt_1440_loop_body] 
        {
          // Pipelined!
          $T[back_edge_to_loop_body] 
          $T[first_time_through_loop_body] 
          $T[loop_body_start] 
          $T[condition_evaluated] 
          $transitionmerge [entry_tmerge] (back_edge_to_loop_body first_time_through_loop_body) (loop_body_start)
          $entry <-& (loop_body_start)
          $T[aggregated_phi_sample_req] 
          $T[aggregated_phi_sample_ack] 
          $T[aggregated_phi_update_req] 
          $T[aggregated_phi_update_ack] 
          // do not loop-back unless all phi's have used up their triggering tokens.
          condition_evaluated <-& (aggregated_phi_update_ack)
          aggregated_phi_sample_req o<-& (aggregated_phi_update_ack 0)
          // start:  PHI statement phi_stmt_1442
          // 			$phi INIT := 			  ($bitcast ($uint<1>) _b0  ) $on   $entry 			  ($bitcast ($uint<1>) _b1  ) $on   $loopback 
          // type of target is $uint<1>
          $T[phi_stmt_1442_sample_start_] 
          $T[phi_stmt_1442_sample_completed_] 
          $T[phi_stmt_1442_update_start_] 
          $T[phi_stmt_1442_update_completed_] 
          $T[phi_stmt_1442_sample_start__ps] 
          phi_stmt_1442_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_1442_sample_completed__ps] 
          phi_stmt_1442_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_1442_update_start__ps] 
          phi_stmt_1442_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_1442_update_completed__ps] 
          phi_stmt_1442_update_completed_ <-& (phi_stmt_1442_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_1442_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_1442_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_1442_update_start_)
          $T[phi_stmt_1442_loopback_trigger] 
          phi_stmt_1442_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_1442_loopback_sample_req] 
          $T[phi_stmt_1442_loopback_sample_req_ps] 
          phi_stmt_1442_loopback_sample_req <-& (phi_stmt_1442_loopback_sample_req_ps)
          phi_stmt_1442_loopback_sample_req &-> ($null)
          $T[phi_stmt_1442_entry_trigger] 
          phi_stmt_1442_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_1442_entry_sample_req] 
          $T[phi_stmt_1442_entry_sample_req_ps] 
          phi_stmt_1442_entry_sample_req <-& (phi_stmt_1442_entry_sample_req_ps)
          phi_stmt_1442_entry_sample_req &-> ($null)
          phi_stmt_1442_update_start_ o<-& (phi_stmt_1442_update_completed_ 0)
          phi_stmt_1442_sample_start_ o<-& (phi_stmt_1442_sample_completed_ 1)
          $T[phi_stmt_1442_merged_reqs] 
          $T[phi_stmt_1442_phi_mux_ack] 
          $T[phi_stmt_1442_phi_mux_ack_ps] 
          phi_stmt_1442_phi_mux_ack_ps <-& (phi_stmt_1442_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_1442_update_completed_)
          $T[type_cast_1445_sample_start__ps] 
          $T[type_cast_1445_sample_completed__ps] 
          $T[type_cast_1445_update_start__ps] 
          $T[type_cast_1445_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[type_cast_1445_sample_start_] 
          $T[type_cast_1445_sample_completed_] 
          type_cast_1445_sample_completed_ <-& (type_cast_1445_sample_start_)
          $T[type_cast_1445_update_start_] 
          $T [type_cast_1445_update_completed_] $delay 
          type_cast_1445_update_completed_ <-& (type_cast_1445_update_start_)
          // Phi start dependency for implicit/constant alternative.
          type_cast_1445_sample_start_ <-& (type_cast_1445_sample_start__ps)
          type_cast_1445_update_start_ <-& (type_cast_1445_update_start__ps)
          // Phi complete dependency.
          type_cast_1445_sample_completed__ps <-& (type_cast_1445_sample_completed_)
          type_cast_1445_update_completed__ps <-& (type_cast_1445_update_completed_)
          $T[type_cast_1447_sample_start__ps] 
          $T[type_cast_1447_sample_completed__ps] 
          $T[type_cast_1447_update_start__ps] 
          $T[type_cast_1447_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[type_cast_1447_sample_start_] 
          $T[type_cast_1447_sample_completed_] 
          type_cast_1447_sample_completed_ <-& (type_cast_1447_sample_start_)
          $T[type_cast_1447_update_start_] 
          $T [type_cast_1447_update_completed_] $delay 
          type_cast_1447_update_completed_ <-& (type_cast_1447_update_start_)
          // Phi start dependency for implicit/constant alternative.
          type_cast_1447_sample_start_ <-& (type_cast_1447_sample_start__ps)
          type_cast_1447_update_start_ <-& (type_cast_1447_update_start__ps)
          // Phi complete dependency.
          type_cast_1447_sample_completed__ps <-& (type_cast_1447_sample_completed_)
          type_cast_1447_update_completed__ps <-& (type_cast_1447_update_completed_)
          $phisequencer [ phi_stmt_1442_phi_seq] : 
          phi_stmt_1442_entry_trigger type_cast_1445_sample_start__ps type_cast_1445_sample_completed__ps type_cast_1445_update_start__ps type_cast_1445_update_completed__ps phi_stmt_1442_loopback_trigger type_cast_1447_sample_start__ps type_cast_1447_sample_completed__ps type_cast_1447_update_start__ps type_cast_1447_update_completed__ps :
          phi_stmt_1442_sample_start__ps phi_stmt_1442_sample_completed__ps phi_stmt_1442_update_start__ps phi_stmt_1442_update_completed__ps :
          phi_stmt_1442_entry_sample_req_ps phi_stmt_1442_loopback_sample_req_ps : 
          phi_stmt_1442_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_1442
          // start:  PHI statement phi_stmt_1448
          // 			$phi control_register := 			  ($bitcast ($uint<1>) _b0  ) $on   $entry 			  check_control_regsiter $on   $loopback 
          // type of target is $uint<1>
          $T[phi_stmt_1448_sample_start_] 
          $T[phi_stmt_1448_sample_completed_] 
          $T[phi_stmt_1448_update_start_] 
          $T[phi_stmt_1448_update_completed_] 
          $T[phi_stmt_1448_sample_start__ps] 
          phi_stmt_1448_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_1448_sample_completed__ps] 
          phi_stmt_1448_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_1448_update_start__ps] 
          phi_stmt_1448_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_1448_update_completed__ps] 
          phi_stmt_1448_update_completed_ <-& (phi_stmt_1448_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_1448_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_1448_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_1448_update_start_)
          $T[phi_stmt_1448_loopback_trigger] 
          phi_stmt_1448_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_1448_loopback_sample_req] 
          $T[phi_stmt_1448_loopback_sample_req_ps] 
          phi_stmt_1448_loopback_sample_req <-& (phi_stmt_1448_loopback_sample_req_ps)
          phi_stmt_1448_loopback_sample_req &-> ($null)
          $T[phi_stmt_1448_entry_trigger] 
          phi_stmt_1448_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_1448_entry_sample_req] 
          $T[phi_stmt_1448_entry_sample_req_ps] 
          phi_stmt_1448_entry_sample_req <-& (phi_stmt_1448_entry_sample_req_ps)
          phi_stmt_1448_entry_sample_req &-> ($null)
          phi_stmt_1448_update_start_ o<-& (phi_stmt_1448_update_completed_ 0)
          phi_stmt_1448_sample_start_ o<-& (phi_stmt_1448_sample_completed_ 1)
          $T[phi_stmt_1448_merged_reqs] 
          $T[phi_stmt_1448_phi_mux_ack] 
          $T[phi_stmt_1448_phi_mux_ack_ps] 
          phi_stmt_1448_phi_mux_ack_ps <-& (phi_stmt_1448_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_1448_update_completed_)
          $T[type_cast_1451_sample_start__ps] 
          $T[type_cast_1451_sample_completed__ps] 
          $T[type_cast_1451_update_start__ps] 
          $T[type_cast_1451_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[type_cast_1451_sample_start_] 
          $T[type_cast_1451_sample_completed_] 
          type_cast_1451_sample_completed_ <-& (type_cast_1451_sample_start_)
          $T[type_cast_1451_update_start_] 
          $T [type_cast_1451_update_completed_] $delay 
          type_cast_1451_update_completed_ <-& (type_cast_1451_update_start_)
          // Phi start dependency for implicit/constant alternative.
          type_cast_1451_sample_start_ <-& (type_cast_1451_sample_start__ps)
          type_cast_1451_update_start_ <-& (type_cast_1451_update_start__ps)
          // Phi complete dependency.
          type_cast_1451_sample_completed__ps <-& (type_cast_1451_sample_completed_)
          type_cast_1451_update_completed__ps <-& (type_cast_1451_update_completed_)
          $T[R_check_control_regsiter_1452_sample_start__ps] 
          $T[R_check_control_regsiter_1452_sample_completed__ps] 
          $T[R_check_control_regsiter_1452_update_start__ps] 
          $T[R_check_control_regsiter_1452_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_check_control_regsiter_1452_sample_start_] 
          $T[R_check_control_regsiter_1452_sample_completed_] 
          $T[R_check_control_regsiter_1452_update_start_] 
          $T[R_check_control_regsiter_1452_update_completed_] 
          ;;[R_check_control_regsiter_1452_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_check_control_regsiter_1452_sample_start_ &-> (R_check_control_regsiter_1452_Sample)
          R_check_control_regsiter_1452_sample_completed_ <-& (R_check_control_regsiter_1452_Sample)
          ;;[R_check_control_regsiter_1452_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_check_control_regsiter_1452_update_start_ &-> (R_check_control_regsiter_1452_Update)
          R_check_control_regsiter_1452_update_completed_ <-& (R_check_control_regsiter_1452_Update)
          // RAW reenables for check_control_regsiter
          // Phi start dependency for implicit/constant alternative.
          R_check_control_regsiter_1452_sample_start_ <-& (R_check_control_regsiter_1452_sample_start__ps)
          R_check_control_regsiter_1452_update_start_ <-& (R_check_control_regsiter_1452_update_start__ps)
          // Phi complete dependency.
          R_check_control_regsiter_1452_sample_completed__ps <-& (R_check_control_regsiter_1452_sample_completed_)
          R_check_control_regsiter_1452_update_completed__ps <-& (R_check_control_regsiter_1452_update_completed_)
          $phisequencer [ phi_stmt_1448_phi_seq] : 
          phi_stmt_1448_entry_trigger type_cast_1451_sample_start__ps type_cast_1451_sample_completed__ps type_cast_1451_update_start__ps type_cast_1451_update_completed__ps phi_stmt_1448_loopback_trigger R_check_control_regsiter_1452_sample_start__ps R_check_control_regsiter_1452_sample_completed__ps R_check_control_regsiter_1452_update_start__ps R_check_control_regsiter_1452_update_completed__ps :
          phi_stmt_1448_sample_start__ps phi_stmt_1448_sample_completed__ps phi_stmt_1448_update_start__ps phi_stmt_1448_update_completed__ps :
          phi_stmt_1448_entry_sample_req_ps phi_stmt_1448_loopback_sample_req_ps : 
          phi_stmt_1448_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_1448
          // start:  PHI statement phi_stmt_1453
          // 			$phi free_q := 			  ($bitcast ($uint<1>) _b0  ) $on   $entry 			  check_free_q $on   $loopback 
          // type of target is $uint<1>
          $T[phi_stmt_1453_sample_start_] 
          $T[phi_stmt_1453_sample_completed_] 
          $T[phi_stmt_1453_update_start_] 
          $T[phi_stmt_1453_update_completed_] 
          $T[phi_stmt_1453_sample_start__ps] 
          phi_stmt_1453_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_1453_sample_completed__ps] 
          phi_stmt_1453_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_1453_update_start__ps] 
          phi_stmt_1453_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_1453_update_completed__ps] 
          phi_stmt_1453_update_completed_ <-& (phi_stmt_1453_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_1453_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_1453_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_1453_update_start_)
          $T[phi_stmt_1453_loopback_trigger] 
          phi_stmt_1453_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_1453_loopback_sample_req] 
          $T[phi_stmt_1453_loopback_sample_req_ps] 
          phi_stmt_1453_loopback_sample_req <-& (phi_stmt_1453_loopback_sample_req_ps)
          phi_stmt_1453_loopback_sample_req &-> ($null)
          $T[phi_stmt_1453_entry_trigger] 
          phi_stmt_1453_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_1453_entry_sample_req] 
          $T[phi_stmt_1453_entry_sample_req_ps] 
          phi_stmt_1453_entry_sample_req <-& (phi_stmt_1453_entry_sample_req_ps)
          phi_stmt_1453_entry_sample_req &-> ($null)
          phi_stmt_1453_update_start_ o<-& (phi_stmt_1453_update_completed_ 0)
          phi_stmt_1453_sample_start_ o<-& (phi_stmt_1453_sample_completed_ 1)
          $T[phi_stmt_1453_merged_reqs] 
          $T[phi_stmt_1453_phi_mux_ack] 
          $T[phi_stmt_1453_phi_mux_ack_ps] 
          phi_stmt_1453_phi_mux_ack_ps <-& (phi_stmt_1453_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_1453_update_completed_)
          $T[type_cast_1456_sample_start__ps] 
          $T[type_cast_1456_sample_completed__ps] 
          $T[type_cast_1456_update_start__ps] 
          $T[type_cast_1456_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[type_cast_1456_sample_start_] 
          $T[type_cast_1456_sample_completed_] 
          type_cast_1456_sample_completed_ <-& (type_cast_1456_sample_start_)
          $T[type_cast_1456_update_start_] 
          $T [type_cast_1456_update_completed_] $delay 
          type_cast_1456_update_completed_ <-& (type_cast_1456_update_start_)
          // Phi start dependency for implicit/constant alternative.
          type_cast_1456_sample_start_ <-& (type_cast_1456_sample_start__ps)
          type_cast_1456_update_start_ <-& (type_cast_1456_update_start__ps)
          // Phi complete dependency.
          type_cast_1456_sample_completed__ps <-& (type_cast_1456_sample_completed_)
          type_cast_1456_update_completed__ps <-& (type_cast_1456_update_completed_)
          $T[R_check_free_q_1457_sample_start__ps] 
          $T[R_check_free_q_1457_sample_completed__ps] 
          $T[R_check_free_q_1457_update_start__ps] 
          $T[R_check_free_q_1457_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_check_free_q_1457_sample_start_] 
          $T[R_check_free_q_1457_sample_completed_] 
          $T[R_check_free_q_1457_update_start_] 
          $T[R_check_free_q_1457_update_completed_] 
          ;;[R_check_free_q_1457_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_check_free_q_1457_sample_start_ &-> (R_check_free_q_1457_Sample)
          R_check_free_q_1457_sample_completed_ <-& (R_check_free_q_1457_Sample)
          ;;[R_check_free_q_1457_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_check_free_q_1457_update_start_ &-> (R_check_free_q_1457_Update)
          R_check_free_q_1457_update_completed_ <-& (R_check_free_q_1457_Update)
          // RAW reenables for check_free_q
          // Phi start dependency for implicit/constant alternative.
          R_check_free_q_1457_sample_start_ <-& (R_check_free_q_1457_sample_start__ps)
          R_check_free_q_1457_update_start_ <-& (R_check_free_q_1457_update_start__ps)
          // Phi complete dependency.
          R_check_free_q_1457_sample_completed__ps <-& (R_check_free_q_1457_sample_completed_)
          R_check_free_q_1457_update_completed__ps <-& (R_check_free_q_1457_update_completed_)
          $phisequencer [ phi_stmt_1453_phi_seq] : 
          phi_stmt_1453_entry_trigger type_cast_1456_sample_start__ps type_cast_1456_sample_completed__ps type_cast_1456_update_start__ps type_cast_1456_update_completed__ps phi_stmt_1453_loopback_trigger R_check_free_q_1457_sample_start__ps R_check_free_q_1457_sample_completed__ps R_check_free_q_1457_update_start__ps R_check_free_q_1457_update_completed__ps :
          phi_stmt_1453_sample_start__ps phi_stmt_1453_sample_completed__ps phi_stmt_1453_update_start__ps phi_stmt_1453_update_completed__ps :
          phi_stmt_1453_entry_sample_req_ps phi_stmt_1453_loopback_sample_req_ps : 
          phi_stmt_1453_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_1453
          // start:  PHI statement phi_stmt_1458
          // 			$phi num_server := 			  ($bitcast ($uint<1>) _b0  ) $on   $entry 			  check_num_server $on   $loopback 
          // type of target is $uint<1>
          $T[phi_stmt_1458_sample_start_] 
          $T[phi_stmt_1458_sample_completed_] 
          $T[phi_stmt_1458_update_start_] 
          $T[phi_stmt_1458_update_completed_] 
          $T[phi_stmt_1458_sample_start__ps] 
          phi_stmt_1458_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_1458_sample_completed__ps] 
          phi_stmt_1458_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_1458_update_start__ps] 
          phi_stmt_1458_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_1458_update_completed__ps] 
          phi_stmt_1458_update_completed_ <-& (phi_stmt_1458_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_1458_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_1458_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_1458_update_start_)
          $T[phi_stmt_1458_loopback_trigger] 
          phi_stmt_1458_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_1458_loopback_sample_req] 
          $T[phi_stmt_1458_loopback_sample_req_ps] 
          phi_stmt_1458_loopback_sample_req <-& (phi_stmt_1458_loopback_sample_req_ps)
          phi_stmt_1458_loopback_sample_req &-> ($null)
          $T[phi_stmt_1458_entry_trigger] 
          phi_stmt_1458_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_1458_entry_sample_req] 
          $T[phi_stmt_1458_entry_sample_req_ps] 
          phi_stmt_1458_entry_sample_req <-& (phi_stmt_1458_entry_sample_req_ps)
          phi_stmt_1458_entry_sample_req &-> ($null)
          phi_stmt_1458_update_start_ o<-& (phi_stmt_1458_update_completed_ 0)
          phi_stmt_1458_sample_start_ o<-& (phi_stmt_1458_sample_completed_ 1)
          $T[phi_stmt_1458_merged_reqs] 
          $T[phi_stmt_1458_phi_mux_ack] 
          $T[phi_stmt_1458_phi_mux_ack_ps] 
          phi_stmt_1458_phi_mux_ack_ps <-& (phi_stmt_1458_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_1458_update_completed_)
          $T[type_cast_1461_sample_start__ps] 
          $T[type_cast_1461_sample_completed__ps] 
          $T[type_cast_1461_update_start__ps] 
          $T[type_cast_1461_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[type_cast_1461_sample_start_] 
          $T[type_cast_1461_sample_completed_] 
          type_cast_1461_sample_completed_ <-& (type_cast_1461_sample_start_)
          $T[type_cast_1461_update_start_] 
          $T [type_cast_1461_update_completed_] $delay 
          type_cast_1461_update_completed_ <-& (type_cast_1461_update_start_)
          // Phi start dependency for implicit/constant alternative.
          type_cast_1461_sample_start_ <-& (type_cast_1461_sample_start__ps)
          type_cast_1461_update_start_ <-& (type_cast_1461_update_start__ps)
          // Phi complete dependency.
          type_cast_1461_sample_completed__ps <-& (type_cast_1461_sample_completed_)
          type_cast_1461_update_completed__ps <-& (type_cast_1461_update_completed_)
          $T[R_check_num_server_1462_sample_start__ps] 
          $T[R_check_num_server_1462_sample_completed__ps] 
          $T[R_check_num_server_1462_update_start__ps] 
          $T[R_check_num_server_1462_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 1
          $T[R_check_num_server_1462_sample_start_] 
          $T[R_check_num_server_1462_sample_completed_] 
          $T[R_check_num_server_1462_update_start_] 
          $T[R_check_num_server_1462_update_completed_] 
          ;;[R_check_num_server_1462_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_check_num_server_1462_sample_start_ &-> (R_check_num_server_1462_Sample)
          R_check_num_server_1462_sample_completed_ <-& (R_check_num_server_1462_Sample)
          ;;[R_check_num_server_1462_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_check_num_server_1462_update_start_ &-> (R_check_num_server_1462_Update)
          R_check_num_server_1462_update_completed_ <-& (R_check_num_server_1462_Update)
          // RAW reenables for check_num_server
          // Phi start dependency for implicit/constant alternative.
          R_check_num_server_1462_sample_start_ <-& (R_check_num_server_1462_sample_start__ps)
          R_check_num_server_1462_update_start_ <-& (R_check_num_server_1462_update_start__ps)
          // Phi complete dependency.
          R_check_num_server_1462_sample_completed__ps <-& (R_check_num_server_1462_sample_completed_)
          R_check_num_server_1462_update_completed__ps <-& (R_check_num_server_1462_update_completed_)
          $phisequencer [ phi_stmt_1458_phi_seq] : 
          phi_stmt_1458_entry_trigger type_cast_1461_sample_start__ps type_cast_1461_sample_completed__ps type_cast_1461_update_start__ps type_cast_1461_update_completed__ps phi_stmt_1458_loopback_trigger R_check_num_server_1462_sample_start__ps R_check_num_server_1462_sample_completed__ps R_check_num_server_1462_update_start__ps R_check_num_server_1462_update_completed__ps :
          phi_stmt_1458_sample_start__ps phi_stmt_1458_sample_completed__ps phi_stmt_1458_update_start__ps phi_stmt_1458_update_completed__ps :
          phi_stmt_1458_entry_sample_req_ps phi_stmt_1458_loopback_sample_req_ps : 
          phi_stmt_1458_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_1458
          // start:  			control_data := nic_registers[0 ] $buffering 1// bits of buffering = 32. 
          //  file nic.linked.opt.aa, line 498
          // Source expression
          // nic_registers[0 ]
          $T[array_obj_ref_1467_base_address_calculated] 
          $T[array_obj_ref_1467_sample_start_] 
          $T[array_obj_ref_1467_sample_completed_] 
          $T[array_obj_ref_1467_update_start_] 
          $T[array_obj_ref_1467_update_completed_] 
          $T[array_obj_ref_1467_word_address_calculated] 
          $T[array_obj_ref_1467_root_address_calculated] 
          array_obj_ref_1467_word_address_calculated <-& (array_obj_ref_1467_root_address_calculated)
          ;;[array_obj_ref_1467_Sample] 
          {
            ||[word_access_start] 
            {
              ;;[word_0] 
              {
                $T [rr] $T [ra] 
              }
            }
          }
          ;;[array_obj_ref_1467_Update] 
          {
            ||[word_access_complete] 
            {
              ;;[word_0] 
              {
                $T [cr] $T [ca] 
              }
            }
            ;;[array_obj_ref_1467_Merge] 
            {
              $T [merge_req] $T [merge_ack]
            }
          }
          array_obj_ref_1467_sample_start_ <-& (array_obj_ref_1467_word_address_calculated)
          // reenable-joins
          array_obj_ref_1467_sample_start_ &-> (array_obj_ref_1467_Sample)
          array_obj_ref_1467_sample_completed_ <-& (array_obj_ref_1467_Sample)
          array_obj_ref_1467_sample_completed_ &-> ($null)
          array_obj_ref_1467_update_start_ &-> (array_obj_ref_1467_Update)
          array_obj_ref_1467_update_completed_ <-& (array_obj_ref_1467_Update)
          // self-release: 
          array_obj_ref_1467_sample_start_ o<-& (array_obj_ref_1467_sample_completed_ 1)
          $null &-> (array_obj_ref_1467_update_start_)
          array_obj_ref_1467_update_start_ o<-& (array_obj_ref_1467_update_completed_ 0)
          // Target expression
          // (as target) control_data
          // start: WAR dependencies for control_data
          // done: WAR dependencies for control_data
          // end:  			control_data := nic_registers[0 ] $buffering 1// bits of buffering = 32. 
          // start: WAR dependencies for update_control_register_pipe
          // done: WAR dependencies for update_control_register_pipe
          // start:  			$volatile update_control_register_pipe := (( ~ INIT ) | (INIT & control_register)) $buffering 1
          //  file nic.linked.opt.aa, line 500
          // volatile! 
          // Source expression
          // (( ~ INIT ) | (INIT & control_register))
          // ( ~ INIT )
          // INIT
          // (INIT & control_register)
          // INIT
          // control_register
          // Target expression
          // (as target) update_control_register_pipe
          // start: WAR dependencies for update_control_register_pipe
          // done: WAR dependencies for update_control_register_pipe
          // end:  			$volatile update_control_register_pipe := (( ~ INIT ) | (INIT & control_register)) $buffering 1
          // start: WAR dependencies for update_free_q_pipe
          // done: WAR dependencies for update_free_q_pipe
          // start:  			$volatile update_free_q_pipe := (( ~ INIT ) | (INIT & free_q)) $buffering 1
          //  file nic.linked.opt.aa, line 501
          // volatile! 
          // Source expression
          // (( ~ INIT ) | (INIT & free_q))
          // ( ~ INIT )
          // INIT
          // (INIT & free_q)
          // INIT
          // free_q
          // Target expression
          // (as target) update_free_q_pipe
          // start: WAR dependencies for update_free_q_pipe
          // done: WAR dependencies for update_free_q_pipe
          // end:  			$volatile update_free_q_pipe := (( ~ INIT ) | (INIT & free_q)) $buffering 1
          // start: WAR dependencies for update_server_num
          // done: WAR dependencies for update_server_num
          // start:  			$volatile update_server_num := (( ~ INIT ) | (INIT & num_server)) $buffering 1
          //  file nic.linked.opt.aa, line 502
          // volatile! 
          // Source expression
          // (( ~ INIT ) | (INIT & num_server))
          // ( ~ INIT )
          // INIT
          // (INIT & num_server)
          // INIT
          // num_server
          // Target expression
          // (as target) update_server_num
          // start: WAR dependencies for update_server_num
          // done: WAR dependencies for update_server_num
          // end:  			$volatile update_server_num := (( ~ INIT ) | (INIT & num_server)) $buffering 1
          // start:  			$guard (update_control_register_pipe) CONTROL_REGISTER := nic_registers[0 ] $buffering 1// bits of buffering = 32. 
          //  file nic.linked.opt.aa, line 503
          // Guard expression 
          // update_control_register_pipe
          // Source expression
          // nic_registers[0 ]
          $T[array_obj_ref_1498_base_address_calculated] 
          $T[array_obj_ref_1498_sample_start_] 
          $T[array_obj_ref_1498_sample_completed_] 
          $T[array_obj_ref_1498_update_start_] 
          $T[array_obj_ref_1498_update_completed_] 
          $T[array_obj_ref_1498_word_address_calculated] 
          $T[array_obj_ref_1498_root_address_calculated] 
          array_obj_ref_1498_word_address_calculated <-& (array_obj_ref_1498_root_address_calculated)
          ;;[array_obj_ref_1498_Sample] 
          {
            ||[word_access_start] 
            {
              ;;[word_0] 
              {
                $T [rr] $T [ra] 
              }
            }
          }
          ;;[array_obj_ref_1498_Update] 
          {
            ||[word_access_complete] 
            {
              ;;[word_0] 
              {
                $T [cr] $T [ca] 
              }
            }
            ;;[array_obj_ref_1498_Merge] 
            {
              $T [merge_req] $T [merge_ack]
            }
          }
          array_obj_ref_1498_sample_start_ <-& (array_obj_ref_1498_word_address_calculated)
          // reenable-joins
          array_obj_ref_1498_sample_start_ &-> (array_obj_ref_1498_Sample)
          array_obj_ref_1498_sample_completed_ <-& (array_obj_ref_1498_Sample)
          array_obj_ref_1498_sample_completed_ &-> ($null)
          array_obj_ref_1498_update_start_ &-> (array_obj_ref_1498_Update)
          array_obj_ref_1498_update_completed_ <-& (array_obj_ref_1498_Update)
          // self-release: 
          array_obj_ref_1498_sample_start_ o<-& (array_obj_ref_1498_sample_completed_ 1)
          $null &-> (array_obj_ref_1498_update_start_)
          array_obj_ref_1498_update_start_ o<-& (array_obj_ref_1498_update_completed_ 0)
          // Guard dependency for expression array_obj_ref_1498 with guard R_update_control_register_pipe_1495
          array_obj_ref_1498_sample_start_ <-& (phi_stmt_1442_update_completed_)
          array_obj_ref_1498_sample_start_ <-& (phi_stmt_1448_update_completed_)
          // RAW reenables for update_control_register_pipe
          phi_stmt_1442_update_start_ o<-& (array_obj_ref_1498_sample_completed_ 0)
          phi_stmt_1448_update_start_ o<-& (array_obj_ref_1498_sample_completed_ 0)
          // Target expression
          // (as target) CONTROL_REGISTER
          $T[WPIPE_CONTROL_REGISTER_1496_sample_start_] 
          $T[WPIPE_CONTROL_REGISTER_1496_sample_completed_] 
          $T[WPIPE_CONTROL_REGISTER_1496_update_start_] 
          $T[WPIPE_CONTROL_REGISTER_1496_update_completed_] 
          // Guard dependency for expression WPIPE_CONTROL_REGISTER_1496 with guard R_update_control_register_pipe_1495
          WPIPE_CONTROL_REGISTER_1496_sample_start_ <-& (phi_stmt_1442_update_completed_)
          WPIPE_CONTROL_REGISTER_1496_sample_start_ <-& (phi_stmt_1448_update_completed_)
          // RAW reenables for update_control_register_pipe
          phi_stmt_1442_update_start_ o<-& (WPIPE_CONTROL_REGISTER_1496_sample_completed_ 0)
          phi_stmt_1448_update_start_ o<-& (WPIPE_CONTROL_REGISTER_1496_sample_completed_ 0)
          ;;[WPIPE_CONTROL_REGISTER_1496_Sample] 
          {
            // pipe write sample-start CONTROL_REGISTER
            $T [req] $T [ack] 
          }
          ;;[WPIPE_CONTROL_REGISTER_1496_Update] 
          {
            // pipe write update (complete) CONTROL_REGISTER
            $T [req] $T [ack] 
          }
          WPIPE_CONTROL_REGISTER_1496_sample_start_ &-> (WPIPE_CONTROL_REGISTER_1496_Sample)
          WPIPE_CONTROL_REGISTER_1496_sample_completed_ <-& (WPIPE_CONTROL_REGISTER_1496_Sample)
          WPIPE_CONTROL_REGISTER_1496_update_start_ <-& (WPIPE_CONTROL_REGISTER_1496_sample_completed_)
          WPIPE_CONTROL_REGISTER_1496_update_start_ &-> (WPIPE_CONTROL_REGISTER_1496_Update)
          WPIPE_CONTROL_REGISTER_1496_update_completed_ <-& (WPIPE_CONTROL_REGISTER_1496_Update)
          WPIPE_CONTROL_REGISTER_1496_sample_start_ o<-& (WPIPE_CONTROL_REGISTER_1496_update_completed_ 0)
          // start: Forward dependencies from nic_registers[0 ] to transition WPIPE_CONTROL_REGISTER_1496_sample_start_
          WPIPE_CONTROL_REGISTER_1496_sample_start_ <-& (array_obj_ref_1498_update_completed_)
          // done: Forward dependencies from nic_registers[0 ] to transition WPIPE_CONTROL_REGISTER_1496_sample_start_
          // RAW reenables for nic_registers[0 ]
          array_obj_ref_1498_update_start_ o<-& (WPIPE_CONTROL_REGISTER_1496_sample_completed_ 0)
          // end:  			$guard (update_control_register_pipe) CONTROL_REGISTER := nic_registers[0 ] $buffering 1// bits of buffering = 32. 
          // start:  			$guard (update_free_q_pipe) FREE_Q_32 := nic_registers[18 ] $buffering 1// bits of buffering = 32. 
          //  file nic.linked.opt.aa, line 504
          // Guard expression 
          // update_free_q_pipe
          // Source expression
          // nic_registers[18 ]
          $T[array_obj_ref_1503_base_address_calculated] 
          $T[array_obj_ref_1503_sample_start_] 
          $T[array_obj_ref_1503_sample_completed_] 
          $T[array_obj_ref_1503_update_start_] 
          $T[array_obj_ref_1503_update_completed_] 
          $T[array_obj_ref_1503_word_address_calculated] 
          $T[array_obj_ref_1503_root_address_calculated] 
          array_obj_ref_1503_word_address_calculated <-& (array_obj_ref_1503_root_address_calculated)
          ;;[array_obj_ref_1503_Sample] 
          {
            ||[word_access_start] 
            {
              ;;[word_0] 
              {
                $T [rr] $T [ra] 
              }
            }
          }
          ;;[array_obj_ref_1503_Update] 
          {
            ||[word_access_complete] 
            {
              ;;[word_0] 
              {
                $T [cr] $T [ca] 
              }
            }
            ;;[array_obj_ref_1503_Merge] 
            {
              $T [merge_req] $T [merge_ack]
            }
          }
          array_obj_ref_1503_sample_start_ <-& (array_obj_ref_1503_word_address_calculated)
          // reenable-joins
          array_obj_ref_1503_sample_start_ &-> (array_obj_ref_1503_Sample)
          array_obj_ref_1503_sample_completed_ <-& (array_obj_ref_1503_Sample)
          array_obj_ref_1503_sample_completed_ &-> ($null)
          array_obj_ref_1503_update_start_ &-> (array_obj_ref_1503_Update)
          array_obj_ref_1503_update_completed_ <-& (array_obj_ref_1503_Update)
          // self-release: 
          array_obj_ref_1503_sample_start_ o<-& (array_obj_ref_1503_sample_completed_ 1)
          $null &-> (array_obj_ref_1503_update_start_)
          array_obj_ref_1503_update_start_ o<-& (array_obj_ref_1503_update_completed_ 0)
          // Guard dependency for expression array_obj_ref_1503 with guard R_update_free_q_pipe_1500
          array_obj_ref_1503_sample_start_ <-& (phi_stmt_1442_update_completed_)
          array_obj_ref_1503_sample_start_ <-& (phi_stmt_1453_update_completed_)
          // RAW reenables for update_free_q_pipe
          phi_stmt_1442_update_start_ o<-& (array_obj_ref_1503_sample_completed_ 0)
          phi_stmt_1453_update_start_ o<-& (array_obj_ref_1503_sample_completed_ 0)
          // Target expression
          // (as target) FREE_Q_32
          // start: WAR dependencies for FREE_Q_32
          // done: WAR dependencies for FREE_Q_32
          // end:  			$guard (update_free_q_pipe) FREE_Q_32 := nic_registers[18 ] $buffering 1// bits of buffering = 32. 
          // start:  			update_free_q_pipe_1480_delayed_5_0 := update_free_q_pipe $buffering 5 $cut_through // bits of buffering = 5. 
          //  file nic.linked.opt.aa, line 505
          $T[assign_stmt_1507_sample_start_] 
          $T[assign_stmt_1507_sample_completed_] 
          $T[assign_stmt_1507_update_start_] 
          $T[assign_stmt_1507_update_completed_] 
          // Source expression
          // update_free_q_pipe
          // Target expression
          // (as target) update_free_q_pipe_1480_delayed_5_0
          // both source and target are implicit: use interlock 
          // Interlock 
          ;;[assign_stmt_1507_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          ;;[assign_stmt_1507_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          assign_stmt_1507_sample_start_ &-> (assign_stmt_1507_Sample)
          assign_stmt_1507_sample_completed_ <-& (assign_stmt_1507_Sample)
          assign_stmt_1507_sample_completed_ &-> ($null)
          assign_stmt_1507_update_start_ &-> (assign_stmt_1507_Update)
          assign_stmt_1507_update_completed_ <-& (assign_stmt_1507_Update)
          // start: Forward dependencies from update_free_q_pipe to transition assign_stmt_1507_sample_start_
          assign_stmt_1507_sample_start_ <-& (phi_stmt_1442_update_completed_)
          assign_stmt_1507_sample_start_ <-& (phi_stmt_1453_update_completed_)
          // done: Forward dependencies from update_free_q_pipe to transition assign_stmt_1507_sample_start_
          // RAW reenables for update_free_q_pipe
          phi_stmt_1442_update_start_ o<-& (assign_stmt_1507_sample_completed_ 0)
          phi_stmt_1453_update_start_ o<-& (assign_stmt_1507_sample_completed_ 0)
          // self-release: 
          assign_stmt_1507_sample_start_ o<-& (assign_stmt_1507_sample_completed_ 1)
          $null &-> (assign_stmt_1507_update_start_)
          assign_stmt_1507_update_start_ o<-& (assign_stmt_1507_update_completed_ 0)
          // start: WAR dependencies for update_free_q_pipe_1480_delayed_5_0
          // done: WAR dependencies for update_free_q_pipe_1480_delayed_5_0
          // end:  			update_free_q_pipe_1480_delayed_5_0 := update_free_q_pipe $buffering 5 $cut_through // bits of buffering = 5. 
          // start:  			$guard (update_free_q_pipe_1480_delayed_5_0) FREE_Q := ($bitcast ($uint<36>) (FREE_Q_32 && ($bitcast ($uint<3>) _b0  )) ) $buffering 1// bits of buffering = 36. 
          //  file nic.linked.opt.aa, line 506
          // Guard expression 
          // update_free_q_pipe_1480_delayed_5_0
          // Source expression
          // ($bitcast ($uint<36>) (FREE_Q_32 && ($bitcast ($uint<3>) _b0  )) )
          $T[type_cast_1514_sample_start_] 
          $T[type_cast_1514_sample_completed_] 
          $T[type_cast_1514_update_start_] 
          $T[type_cast_1514_update_completed_] 
          // Guard dependency for expression type_cast_1514 with guard R_update_free_q_pipe_1480_delayed_5_0_1508
          type_cast_1514_sample_start_ <-& (assign_stmt_1507_update_completed_)
          // RAW reenables for update_free_q_pipe_1480_delayed_5_0
          assign_stmt_1507_update_start_ o<-& (type_cast_1514_sample_completed_ 0)
          // (FREE_Q_32 && ($bitcast ($uint<3>) _b0  ))
          // FREE_Q_32
          // start: Forward dependencies from (FREE_Q_32 && ($bitcast ($uint<3>) _b0  )) to transition type_cast_1514_sample_start_
          type_cast_1514_sample_start_ <-& (array_obj_ref_1503_update_completed_)
          // done: Forward dependencies from (FREE_Q_32 && ($bitcast ($uint<3>) _b0  )) to transition type_cast_1514_sample_start_
          ;;[type_cast_1514_Sample] 
          {
            // unary expression 
            $T [rr] $T [ra] // (split) unary operation
          }
          ;;[type_cast_1514_Update] 
          {
            // unary expression 
            $T [cr] $T [ca] //(split) unary operation
          }
          type_cast_1514_sample_start_ &-> (type_cast_1514_Sample)
          type_cast_1514_sample_completed_ <-& (type_cast_1514_Sample)
          type_cast_1514_sample_completed_ &-> ($null)
          type_cast_1514_update_start_ &-> (type_cast_1514_Update)
          type_cast_1514_update_completed_ <-& (type_cast_1514_Update)
          // RAW reenables for (FREE_Q_32 && ($bitcast ($uint<3>) _b0  ))
          array_obj_ref_1503_update_start_ o<-& (type_cast_1514_sample_completed_ 0)
          // self-release: 
          type_cast_1514_sample_start_ o<-& (type_cast_1514_sample_completed_ 1)
          $null &-> (type_cast_1514_update_start_)
          type_cast_1514_update_start_ o<-& (type_cast_1514_update_completed_ 0)
          // Target expression
          // (as target) FREE_Q
          $T[WPIPE_FREE_Q_1509_sample_start_] 
          $T[WPIPE_FREE_Q_1509_sample_completed_] 
          $T[WPIPE_FREE_Q_1509_update_start_] 
          $T[WPIPE_FREE_Q_1509_update_completed_] 
          // Guard dependency for expression WPIPE_FREE_Q_1509 with guard R_update_free_q_pipe_1480_delayed_5_0_1508
          WPIPE_FREE_Q_1509_sample_start_ <-& (assign_stmt_1507_update_completed_)
          // RAW reenables for update_free_q_pipe_1480_delayed_5_0
          assign_stmt_1507_update_start_ o<-& (WPIPE_FREE_Q_1509_sample_completed_ 0)
          ;;[WPIPE_FREE_Q_1509_Sample] 
          {
            // pipe write sample-start FREE_Q
            $T [req] $T [ack] 
          }
          ;;[WPIPE_FREE_Q_1509_Update] 
          {
            // pipe write update (complete) FREE_Q
            $T [req] $T [ack] 
          }
          WPIPE_FREE_Q_1509_sample_start_ &-> (WPIPE_FREE_Q_1509_Sample)
          WPIPE_FREE_Q_1509_sample_completed_ <-& (WPIPE_FREE_Q_1509_Sample)
          WPIPE_FREE_Q_1509_update_start_ <-& (WPIPE_FREE_Q_1509_sample_completed_)
          WPIPE_FREE_Q_1509_update_start_ &-> (WPIPE_FREE_Q_1509_Update)
          WPIPE_FREE_Q_1509_update_completed_ <-& (WPIPE_FREE_Q_1509_Update)
          WPIPE_FREE_Q_1509_sample_start_ o<-& (WPIPE_FREE_Q_1509_update_completed_ 0)
          // start: Forward dependencies from ($bitcast ($uint<36>) (FREE_Q_32 && ($bitcast ($uint<3>) _b0  )) ) to transition WPIPE_FREE_Q_1509_sample_start_
          WPIPE_FREE_Q_1509_sample_start_ <-& (type_cast_1514_update_completed_)
          // done: Forward dependencies from ($bitcast ($uint<36>) (FREE_Q_32 && ($bitcast ($uint<3>) _b0  )) ) to transition WPIPE_FREE_Q_1509_sample_start_
          // RAW reenables for ($bitcast ($uint<36>) (FREE_Q_32 && ($bitcast ($uint<3>) _b0  )) )
          type_cast_1514_update_start_ o<-& (WPIPE_FREE_Q_1509_sample_completed_ 0)
          // end:  			$guard (update_free_q_pipe_1480_delayed_5_0) FREE_Q := ($bitcast ($uint<36>) (FREE_Q_32 && ($bitcast ($uint<3>) _b0  )) ) $buffering 1// bits of buffering = 36. 
          // start:  			$guard (update_server_num) NUMBER_OF_SERVERS := nic_registers[1 ] $buffering 1// bits of buffering = 32. 
          //  file nic.linked.opt.aa, line 507
          // Guard expression 
          // update_server_num
          // Source expression
          // nic_registers[1 ]
          $T[array_obj_ref_1519_base_address_calculated] 
          $T[array_obj_ref_1519_sample_start_] 
          $T[array_obj_ref_1519_sample_completed_] 
          $T[array_obj_ref_1519_update_start_] 
          $T[array_obj_ref_1519_update_completed_] 
          $T[array_obj_ref_1519_word_address_calculated] 
          $T[array_obj_ref_1519_root_address_calculated] 
          array_obj_ref_1519_word_address_calculated <-& (array_obj_ref_1519_root_address_calculated)
          ;;[array_obj_ref_1519_Sample] 
          {
            ||[word_access_start] 
            {
              ;;[word_0] 
              {
                $T [rr] $T [ra] 
              }
            }
          }
          ;;[array_obj_ref_1519_Update] 
          {
            ||[word_access_complete] 
            {
              ;;[word_0] 
              {
                $T [cr] $T [ca] 
              }
            }
            ;;[array_obj_ref_1519_Merge] 
            {
              $T [merge_req] $T [merge_ack]
            }
          }
          array_obj_ref_1519_sample_start_ <-& (array_obj_ref_1519_word_address_calculated)
          // reenable-joins
          array_obj_ref_1519_sample_start_ &-> (array_obj_ref_1519_Sample)
          array_obj_ref_1519_sample_completed_ <-& (array_obj_ref_1519_Sample)
          array_obj_ref_1519_sample_completed_ &-> ($null)
          array_obj_ref_1519_update_start_ &-> (array_obj_ref_1519_Update)
          array_obj_ref_1519_update_completed_ <-& (array_obj_ref_1519_Update)
          // self-release: 
          array_obj_ref_1519_sample_start_ o<-& (array_obj_ref_1519_sample_completed_ 1)
          $null &-> (array_obj_ref_1519_update_start_)
          array_obj_ref_1519_update_start_ o<-& (array_obj_ref_1519_update_completed_ 0)
          // Guard dependency for expression array_obj_ref_1519 with guard R_update_server_num_1516
          array_obj_ref_1519_sample_start_ <-& (phi_stmt_1442_update_completed_)
          array_obj_ref_1519_sample_start_ <-& (phi_stmt_1458_update_completed_)
          // RAW reenables for update_server_num
          phi_stmt_1442_update_start_ o<-& (array_obj_ref_1519_sample_completed_ 0)
          phi_stmt_1458_update_start_ o<-& (array_obj_ref_1519_sample_completed_ 0)
          // Target expression
          // (as target) NUMBER_OF_SERVERS
          $T[WPIPE_NUMBER_OF_SERVERS_1517_sample_start_] 
          $T[WPIPE_NUMBER_OF_SERVERS_1517_sample_completed_] 
          $T[WPIPE_NUMBER_OF_SERVERS_1517_update_start_] 
          $T[WPIPE_NUMBER_OF_SERVERS_1517_update_completed_] 
          // Guard dependency for expression WPIPE_NUMBER_OF_SERVERS_1517 with guard R_update_server_num_1516
          WPIPE_NUMBER_OF_SERVERS_1517_sample_start_ <-& (phi_stmt_1442_update_completed_)
          WPIPE_NUMBER_OF_SERVERS_1517_sample_start_ <-& (phi_stmt_1458_update_completed_)
          // RAW reenables for update_server_num
          phi_stmt_1442_update_start_ o<-& (WPIPE_NUMBER_OF_SERVERS_1517_sample_completed_ 0)
          phi_stmt_1458_update_start_ o<-& (WPIPE_NUMBER_OF_SERVERS_1517_sample_completed_ 0)
          ;;[WPIPE_NUMBER_OF_SERVERS_1517_Sample] 
          {
            // pipe write sample-start NUMBER_OF_SERVERS
            $T [req] $T [ack] 
          }
          ;;[WPIPE_NUMBER_OF_SERVERS_1517_Update] 
          {
            // pipe write update (complete) NUMBER_OF_SERVERS
            $T [req] $T [ack] 
          }
          WPIPE_NUMBER_OF_SERVERS_1517_sample_start_ &-> (WPIPE_NUMBER_OF_SERVERS_1517_Sample)
          WPIPE_NUMBER_OF_SERVERS_1517_sample_completed_ <-& (WPIPE_NUMBER_OF_SERVERS_1517_Sample)
          WPIPE_NUMBER_OF_SERVERS_1517_update_start_ <-& (WPIPE_NUMBER_OF_SERVERS_1517_sample_completed_)
          WPIPE_NUMBER_OF_SERVERS_1517_update_start_ &-> (WPIPE_NUMBER_OF_SERVERS_1517_Update)
          WPIPE_NUMBER_OF_SERVERS_1517_update_completed_ <-& (WPIPE_NUMBER_OF_SERVERS_1517_Update)
          WPIPE_NUMBER_OF_SERVERS_1517_sample_start_ o<-& (WPIPE_NUMBER_OF_SERVERS_1517_update_completed_ 0)
          // start: Forward dependencies from nic_registers[1 ] to transition WPIPE_NUMBER_OF_SERVERS_1517_sample_start_
          WPIPE_NUMBER_OF_SERVERS_1517_sample_start_ <-& (array_obj_ref_1519_update_completed_)
          // done: Forward dependencies from nic_registers[1 ] to transition WPIPE_NUMBER_OF_SERVERS_1517_sample_start_
          // RAW reenables for nic_registers[1 ]
          array_obj_ref_1519_update_start_ o<-& (WPIPE_NUMBER_OF_SERVERS_1517_sample_completed_ 0)
          // end:  			$guard (update_server_num) NUMBER_OF_SERVERS := nic_registers[1 ] $buffering 1// bits of buffering = 32. 
          // start:  			req := AFB_NIC_REQUEST $buffering 1// bits of buffering = 74. 
          //  file nic.linked.opt.aa, line 508
          // Source expression
          // AFB_NIC_REQUEST
          $T[RPIPE_AFB_NIC_REQUEST_1522_sample_start_] 
          $T[RPIPE_AFB_NIC_REQUEST_1522_sample_completed_] 
          $T[RPIPE_AFB_NIC_REQUEST_1522_update_start_] 
          $T[RPIPE_AFB_NIC_REQUEST_1522_update_completed_] 
          ;;[RPIPE_AFB_NIC_REQUEST_1522_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_AFB_NIC_REQUEST_1522_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_AFB_NIC_REQUEST_1522_sample_start_ &-> (RPIPE_AFB_NIC_REQUEST_1522_Sample)
          RPIPE_AFB_NIC_REQUEST_1522_sample_completed_ <-& (RPIPE_AFB_NIC_REQUEST_1522_Sample)
          RPIPE_AFB_NIC_REQUEST_1522_update_start_ <-& (RPIPE_AFB_NIC_REQUEST_1522_sample_completed_)
          RPIPE_AFB_NIC_REQUEST_1522_update_start_ &-> (RPIPE_AFB_NIC_REQUEST_1522_Update)
          RPIPE_AFB_NIC_REQUEST_1522_update_completed_ <-& (RPIPE_AFB_NIC_REQUEST_1522_Update)
          RPIPE_AFB_NIC_REQUEST_1522_sample_start_ o<-& (RPIPE_AFB_NIC_REQUEST_1522_update_completed_ 0)
          // Target expression
          // (as target) req
          // start: WAR dependencies for req
          // done: WAR dependencies for req
          // end:  			req := AFB_NIC_REQUEST $buffering 1// bits of buffering = 74. 
          // start: WAR dependencies for rwbar
          // done: WAR dependencies for rwbar
          // start:  			$volatile rwbar := ( $slice req 72 72 )  $buffering 1
          //  file nic.linked.opt.aa, line 510
          // volatile! 
          // Source expression
          // ( $slice req 72 72 ) 
          // req
          // Target expression
          // (as target) rwbar
          // start: WAR dependencies for rwbar
          // done: WAR dependencies for rwbar
          // end:  			$volatile rwbar := ( $slice req 72 72 )  $buffering 1
          // start: WAR dependencies for bmask
          // done: WAR dependencies for bmask
          // start:  			$volatile bmask := ( $slice req 71 68 )  $buffering 1
          //  file nic.linked.opt.aa, line 511
          // volatile! 
          // Source expression
          // ( $slice req 71 68 ) 
          // req
          // Target expression
          // (as target) bmask
          // start: WAR dependencies for bmask
          // done: WAR dependencies for bmask
          // end:  			$volatile bmask := ( $slice req 71 68 )  $buffering 1
          // start: WAR dependencies for addr
          // done: WAR dependencies for addr
          // start:  			$volatile addr := ( $slice req 67 32 )  $buffering 1
          //  file nic.linked.opt.aa, line 512
          // volatile! 
          // Source expression
          // ( $slice req 67 32 ) 
          // req
          // Target expression
          // (as target) addr
          // start: WAR dependencies for addr
          // done: WAR dependencies for addr
          // end:  			$volatile addr := ( $slice req 67 32 )  $buffering 1
          // start: WAR dependencies for wdata
          // done: WAR dependencies for wdata
          // start:  			$volatile wdata := ( $slice req 31 0 )  $buffering 1
          //  file nic.linked.opt.aa, line 513
          // volatile! 
          // Source expression
          // ( $slice req 31 0 ) 
          // req
          // Target expression
          // (as target) wdata
          // start: WAR dependencies for wdata
          // done: WAR dependencies for wdata
          // end:  			$volatile wdata := ( $slice req 31 0 )  $buffering 1
          // start: WAR dependencies for index
          // done: WAR dependencies for index
          // start:  			$volatile index := ( $slice addr 7 2 )  $buffering 1
          //  file nic.linked.opt.aa, line 514
          // volatile! 
          // Source expression
          // ( $slice addr 7 2 ) 
          // addr
          // Target expression
          // (as target) index
          // start: WAR dependencies for index
          // done: WAR dependencies for index
          // end:  			$volatile index := ( $slice addr 7 2 )  $buffering 1
          // start: WAR dependencies for check_control_regsiter
          // WAR dependency: Read: check_control_regsiter before Write: 			$volatile check_control_regsiter := ((index == 0 ) & (rwbar == 0 )) $buffering 1
          RPIPE_AFB_NIC_REQUEST_1522_update_start_ <-& (phi_stmt_1448_sample_completed_)
          phi_stmt_1448_sample_start_ o<-& (RPIPE_AFB_NIC_REQUEST_1522_update_completed_ 0)
          // WAR dependency: release  Read: check_control_regsiter with Write: 			req := AFB_NIC_REQUEST $buffering 1// bits of buffering = 74. 
          // done: WAR dependencies for check_control_regsiter
          // start:  			$volatile check_control_regsiter := ((index == 0 ) & (rwbar == 0 )) $buffering 1
          //  file nic.linked.opt.aa, line 515
          // volatile! 
          // Source expression
          // ((index == 0 ) & (rwbar == 0 ))
          // (index == 0 )
          // index
          // (rwbar == 0 )
          // rwbar
          // Target expression
          // (as target) check_control_regsiter
          // start: WAR dependencies for check_control_regsiter
          // WAR dependency: Read: check_control_regsiter before Write: 			$volatile check_control_regsiter := ((index == 0 ) & (rwbar == 0 )) $buffering 1
          RPIPE_AFB_NIC_REQUEST_1522_update_start_ <-& (phi_stmt_1448_sample_completed_)
          phi_stmt_1448_sample_start_ o<-& (RPIPE_AFB_NIC_REQUEST_1522_update_completed_ 0)
          // WAR dependency: release  Read: check_control_regsiter with Write: 			req := AFB_NIC_REQUEST $buffering 2// bits of buffering = 148. 
          // done: WAR dependencies for check_control_regsiter
          // end:  			$volatile check_control_regsiter := ((index == 0 ) & (rwbar == 0 )) $buffering 1
          // start: WAR dependencies for check_free_q
          // WAR dependency: Read: check_free_q before Write: 			$volatile check_free_q := ((index == 18 ) & (rwbar == 0 )) $buffering 1
          RPIPE_AFB_NIC_REQUEST_1522_update_start_ <-& (phi_stmt_1453_sample_completed_)
          phi_stmt_1453_sample_start_ o<-& (RPIPE_AFB_NIC_REQUEST_1522_update_completed_ 0)
          // WAR dependency: release  Read: check_free_q with Write: 			req := AFB_NIC_REQUEST $buffering 2// bits of buffering = 148. 
          // done: WAR dependencies for check_free_q
          // start:  			$volatile check_free_q := ((index == 18 ) & (rwbar == 0 )) $buffering 1
          //  file nic.linked.opt.aa, line 516
          // volatile! 
          // Source expression
          // ((index == 18 ) & (rwbar == 0 ))
          // (index == 18 )
          // index
          // (rwbar == 0 )
          // rwbar
          // Target expression
          // (as target) check_free_q
          // start: WAR dependencies for check_free_q
          // WAR dependency: Read: check_free_q before Write: 			$volatile check_free_q := ((index == 18 ) & (rwbar == 0 )) $buffering 1
          RPIPE_AFB_NIC_REQUEST_1522_update_start_ <-& (phi_stmt_1453_sample_completed_)
          phi_stmt_1453_sample_start_ o<-& (RPIPE_AFB_NIC_REQUEST_1522_update_completed_ 0)
          // WAR dependency: release  Read: check_free_q with Write: 			req := AFB_NIC_REQUEST $buffering 2// bits of buffering = 148. 
          // done: WAR dependencies for check_free_q
          // end:  			$volatile check_free_q := ((index == 18 ) & (rwbar == 0 )) $buffering 1
          // start: WAR dependencies for check_num_server
          // WAR dependency: Read: check_num_server before Write: 			$volatile check_num_server := ((index == 1 ) & (rwbar == 0 )) $buffering 1
          RPIPE_AFB_NIC_REQUEST_1522_update_start_ <-& (phi_stmt_1458_sample_completed_)
          phi_stmt_1458_sample_start_ o<-& (RPIPE_AFB_NIC_REQUEST_1522_update_completed_ 0)
          // WAR dependency: release  Read: check_num_server with Write: 			req := AFB_NIC_REQUEST $buffering 2// bits of buffering = 148. 
          // done: WAR dependencies for check_num_server
          // start:  			$volatile check_num_server := ((index == 1 ) & (rwbar == 0 )) $buffering 1
          //  file nic.linked.opt.aa, line 517
          // volatile! 
          // Source expression
          // ((index == 1 ) & (rwbar == 0 ))
          // (index == 1 )
          // index
          // (rwbar == 0 )
          // rwbar
          // Target expression
          // (as target) check_num_server
          // start: WAR dependencies for check_num_server
          // WAR dependency: Read: check_num_server before Write: 			$volatile check_num_server := ((index == 1 ) & (rwbar == 0 )) $buffering 1
          RPIPE_AFB_NIC_REQUEST_1522_update_start_ <-& (phi_stmt_1458_sample_completed_)
          phi_stmt_1458_sample_start_ o<-& (RPIPE_AFB_NIC_REQUEST_1522_update_completed_ 0)
          // WAR dependency: release  Read: check_num_server with Write: 			req := AFB_NIC_REQUEST $buffering 2// bits of buffering = 148. 
          // done: WAR dependencies for check_num_server
          // end:  			$volatile check_num_server := ((index == 1 ) & (rwbar == 0 )) $buffering 1
          // start:  			rval := nic_registers[index] $buffering 1// bits of buffering = 32. 
          //  file nic.linked.opt.aa, line 518
          // Source expression
          // nic_registers[index]
          $T[array_obj_ref_1575_base_address_calculated] 
          $T[array_obj_ref_1575_sample_start_] 
          $T[array_obj_ref_1575_sample_completed_] 
          $T[array_obj_ref_1575_update_start_] 
          $T[array_obj_ref_1575_update_completed_] 
          $T[array_obj_ref_1575_word_address_calculated] 
          $T[array_obj_ref_1575_root_address_calculated] 
          $T[array_obj_ref_1575_offset_calculated] 
          $T[array_obj_ref_1575_index_resized_0] 
          $T[array_obj_ref_1575_index_scaled_0] 
          $T[array_obj_ref_1575_index_computed_0] 
          // index
          // start: Forward dependencies from index to transition array_obj_ref_1575_index_computed_0
          array_obj_ref_1575_index_computed_0 <-& (RPIPE_AFB_NIC_REQUEST_1522_update_completed_)
          // done: Forward dependencies from index to transition array_obj_ref_1575_index_computed_0
          ;;[array_obj_ref_1575_index_resize_0] 
          {
            $T [index_resize_req] $T [index_resize_ack] // resize index to address-width
          }
          array_obj_ref_1575_index_computed_0 &-> (array_obj_ref_1575_index_resize_0)
          array_obj_ref_1575_index_resized_0 <-& (array_obj_ref_1575_index_resize_0)
          ;;[array_obj_ref_1575_index_scale_0] 
          {
            $T [scale_rename_req] $T [scale_rename_ack] // rename 
          }
          array_obj_ref_1575_index_resized_0 &-> (array_obj_ref_1575_index_scale_0)
          array_obj_ref_1575_index_scaled_0 <-& (array_obj_ref_1575_index_scale_0)
          ;;[array_obj_ref_1575_final_index_sum_regn] 
          {
            $T [req] $T [ack] // rename
          }
          array_obj_ref_1575_index_scaled_0 &-> (array_obj_ref_1575_final_index_sum_regn)
          array_obj_ref_1575_offset_calculated <-& (array_obj_ref_1575_final_index_sum_regn)
          ;;[array_obj_ref_1575_base_plus_offset] 
          {
            $T [sum_rename_req] $T [sum_rename_ack] // one gets through 
          }
          array_obj_ref_1575_offset_calculated &-> (array_obj_ref_1575_base_plus_offset)
          array_obj_ref_1575_root_address_calculated <-& (array_obj_ref_1575_base_plus_offset)
          ;;[array_obj_ref_1575_word_addrgen] 
          {
            $T [root_register_req] $T [root_register_ack]
          }
          array_obj_ref_1575_root_address_calculated &-> (array_obj_ref_1575_word_addrgen)
          array_obj_ref_1575_word_address_calculated <-& (array_obj_ref_1575_word_addrgen)
          ;;[array_obj_ref_1575_Sample] 
          {
            ||[word_access_start] 
            {
              ;;[word_0] 
              {
                $T [rr] $T [ra] 
              }
            }
          }
          ;;[array_obj_ref_1575_Update] 
          {
            ||[word_access_complete] 
            {
              ;;[word_0] 
              {
                $T [cr] $T [ca] 
              }
            }
            ;;[array_obj_ref_1575_Merge] 
            {
              $T [merge_req] $T [merge_ack]
            }
          }
          array_obj_ref_1575_sample_start_ <-& (array_obj_ref_1575_word_address_calculated)
          // reenable-joins
          RPIPE_AFB_NIC_REQUEST_1522_update_start_ o<-& (array_obj_ref_1575_sample_completed_ 0)
          array_obj_ref_1575_sample_start_ &-> (array_obj_ref_1575_Sample)
          array_obj_ref_1575_sample_completed_ <-& (array_obj_ref_1575_Sample)
          array_obj_ref_1575_sample_completed_ &-> ($null)
          array_obj_ref_1575_update_start_ &-> (array_obj_ref_1575_Update)
          array_obj_ref_1575_update_completed_ <-& (array_obj_ref_1575_Update)
          // self-release: 
          array_obj_ref_1575_sample_start_ o<-& (array_obj_ref_1575_sample_completed_ 1)
          $null &-> (array_obj_ref_1575_update_start_)
          array_obj_ref_1575_update_start_ o<-& (array_obj_ref_1575_update_completed_ 0)
          // Target expression
          // (as target) rval
          // start: WAR dependencies for rval
          // done: WAR dependencies for rval
          // end:  			rval := nic_registers[index] $buffering 1// bits of buffering = 32. 
          // start:  			rwbar_1553_delayed_5_0 := rwbar $buffering 5 $cut_through // bits of buffering = 5. 
          //  file nic.linked.opt.aa, line 519
          $T[assign_stmt_1579_sample_start_] 
          $T[assign_stmt_1579_sample_completed_] 
          $T[assign_stmt_1579_update_start_] 
          $T[assign_stmt_1579_update_completed_] 
          // Source expression
          // rwbar
          // Target expression
          // (as target) rwbar_1553_delayed_5_0
          // both source and target are implicit: use interlock 
          // Interlock 
          ;;[assign_stmt_1579_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          ;;[assign_stmt_1579_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          assign_stmt_1579_sample_start_ &-> (assign_stmt_1579_Sample)
          assign_stmt_1579_sample_completed_ <-& (assign_stmt_1579_Sample)
          assign_stmt_1579_sample_completed_ &-> ($null)
          assign_stmt_1579_update_start_ &-> (assign_stmt_1579_Update)
          assign_stmt_1579_update_completed_ <-& (assign_stmt_1579_Update)
          // start: Forward dependencies from rwbar to transition assign_stmt_1579_sample_start_
          assign_stmt_1579_sample_start_ <-& (RPIPE_AFB_NIC_REQUEST_1522_update_completed_)
          // done: Forward dependencies from rwbar to transition assign_stmt_1579_sample_start_
          // RAW reenables for rwbar
          RPIPE_AFB_NIC_REQUEST_1522_update_start_ o<-& (assign_stmt_1579_sample_completed_ 0)
          // self-release: 
          assign_stmt_1579_sample_start_ o<-& (assign_stmt_1579_sample_completed_ 1)
          $null &-> (assign_stmt_1579_update_start_)
          assign_stmt_1579_update_start_ o<-& (assign_stmt_1579_update_completed_ 0)
          // start: WAR dependencies for rwbar_1553_delayed_5_0
          // done: WAR dependencies for rwbar_1553_delayed_5_0
          // end:  			rwbar_1553_delayed_5_0 := rwbar $buffering 5 $cut_through // bits of buffering = 5. 
          // start:  			bmask_1554_delayed_5_0 := bmask $buffering 5 $cut_through // bits of buffering = 20. 
          //  file nic.linked.opt.aa, line 520
          $T[assign_stmt_1582_sample_start_] 
          $T[assign_stmt_1582_sample_completed_] 
          $T[assign_stmt_1582_update_start_] 
          $T[assign_stmt_1582_update_completed_] 
          // Source expression
          // bmask
          // Target expression
          // (as target) bmask_1554_delayed_5_0
          // both source and target are implicit: use interlock 
          // Interlock 
          ;;[assign_stmt_1582_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          ;;[assign_stmt_1582_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          assign_stmt_1582_sample_start_ &-> (assign_stmt_1582_Sample)
          assign_stmt_1582_sample_completed_ <-& (assign_stmt_1582_Sample)
          assign_stmt_1582_sample_completed_ &-> ($null)
          assign_stmt_1582_update_start_ &-> (assign_stmt_1582_Update)
          assign_stmt_1582_update_completed_ <-& (assign_stmt_1582_Update)
          // start: Forward dependencies from bmask to transition assign_stmt_1582_sample_start_
          assign_stmt_1582_sample_start_ <-& (RPIPE_AFB_NIC_REQUEST_1522_update_completed_)
          // done: Forward dependencies from bmask to transition assign_stmt_1582_sample_start_
          // RAW reenables for bmask
          RPIPE_AFB_NIC_REQUEST_1522_update_start_ o<-& (assign_stmt_1582_sample_completed_ 0)
          // self-release: 
          assign_stmt_1582_sample_start_ o<-& (assign_stmt_1582_sample_completed_ 1)
          $null &-> (assign_stmt_1582_update_start_)
          assign_stmt_1582_update_start_ o<-& (assign_stmt_1582_update_completed_ 0)
          // start: WAR dependencies for bmask_1554_delayed_5_0
          // done: WAR dependencies for bmask_1554_delayed_5_0
          // end:  			bmask_1554_delayed_5_0 := bmask $buffering 5 $cut_through // bits of buffering = 20. 
          // start:  			wdata_1556_delayed_5_0 := wdata $buffering 5 $cut_through // bits of buffering = 160. 
          //  file nic.linked.opt.aa, line 521
          $T[assign_stmt_1585_sample_start_] 
          $T[assign_stmt_1585_sample_completed_] 
          $T[assign_stmt_1585_update_start_] 
          $T[assign_stmt_1585_update_completed_] 
          // Source expression
          // wdata
          // Target expression
          // (as target) wdata_1556_delayed_5_0
          // both source and target are implicit: use interlock 
          // Interlock 
          ;;[assign_stmt_1585_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          ;;[assign_stmt_1585_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          assign_stmt_1585_sample_start_ &-> (assign_stmt_1585_Sample)
          assign_stmt_1585_sample_completed_ <-& (assign_stmt_1585_Sample)
          assign_stmt_1585_sample_completed_ &-> ($null)
          assign_stmt_1585_update_start_ &-> (assign_stmt_1585_Update)
          assign_stmt_1585_update_completed_ <-& (assign_stmt_1585_Update)
          // start: Forward dependencies from wdata to transition assign_stmt_1585_sample_start_
          assign_stmt_1585_sample_start_ <-& (RPIPE_AFB_NIC_REQUEST_1522_update_completed_)
          // done: Forward dependencies from wdata to transition assign_stmt_1585_sample_start_
          // RAW reenables for wdata
          RPIPE_AFB_NIC_REQUEST_1522_update_start_ o<-& (assign_stmt_1585_sample_completed_ 0)
          // self-release: 
          assign_stmt_1585_sample_start_ o<-& (assign_stmt_1585_sample_completed_ 1)
          $null &-> (assign_stmt_1585_update_start_)
          assign_stmt_1585_update_start_ o<-& (assign_stmt_1585_update_completed_ 0)
          // start: WAR dependencies for wdata_1556_delayed_5_0
          // done: WAR dependencies for wdata_1556_delayed_5_0
          // end:  			wdata_1556_delayed_5_0 := wdata $buffering 5 $cut_through // bits of buffering = 160. 
          // start:  			index_1557_delayed_5_0 := index $buffering 5 $cut_through // bits of buffering = 30. 
          //  file nic.linked.opt.aa, line 522
          $T[assign_stmt_1588_sample_start_] 
          $T[assign_stmt_1588_sample_completed_] 
          $T[assign_stmt_1588_update_start_] 
          $T[assign_stmt_1588_update_completed_] 
          // Source expression
          // index
          // Target expression
          // (as target) index_1557_delayed_5_0
          // both source and target are implicit: use interlock 
          // Interlock 
          ;;[assign_stmt_1588_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          ;;[assign_stmt_1588_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          assign_stmt_1588_sample_start_ &-> (assign_stmt_1588_Sample)
          assign_stmt_1588_sample_completed_ <-& (assign_stmt_1588_Sample)
          assign_stmt_1588_sample_completed_ &-> ($null)
          assign_stmt_1588_update_start_ &-> (assign_stmt_1588_Update)
          assign_stmt_1588_update_completed_ <-& (assign_stmt_1588_Update)
          // start: Forward dependencies from index to transition assign_stmt_1588_sample_start_
          assign_stmt_1588_sample_start_ <-& (RPIPE_AFB_NIC_REQUEST_1522_update_completed_)
          // done: Forward dependencies from index to transition assign_stmt_1588_sample_start_
          // RAW reenables for index
          RPIPE_AFB_NIC_REQUEST_1522_update_start_ o<-& (assign_stmt_1588_sample_completed_ 0)
          // self-release: 
          assign_stmt_1588_sample_start_ o<-& (assign_stmt_1588_sample_completed_ 1)
          $null &-> (assign_stmt_1588_update_start_)
          assign_stmt_1588_update_start_ o<-& (assign_stmt_1588_update_completed_ 0)
          // start: WAR dependencies for index_1557_delayed_5_0
          // done: WAR dependencies for index_1557_delayed_5_0
          // end:  			index_1557_delayed_5_0 := index $buffering 5 $cut_through // bits of buffering = 30. 
          // start: 			$guard (~rwbar_1553_delayed_5_0) $call UpdateRegister (bmask_1554_delayed_5_0 rval wdata_1556_delayed_5_0 index_1557_delayed_5_0 ) (wval ) 
          //  file nic.linked.opt.aa, line 523
          $T[call_stmt_1595_sample_start_] 
          $T[call_stmt_1595_sample_completed_] 
          $T[call_stmt_1595_update_start_] 
          $T[call_stmt_1595_update_completed_] 
          // Guard expression
          // rwbar_1553_delayed_5_0
          // start: Forward dependencies from rwbar_1553_delayed_5_0 to transition call_stmt_1595_sample_start_
          call_stmt_1595_sample_start_ <-& (assign_stmt_1579_update_completed_)
          // done: Forward dependencies from rwbar_1553_delayed_5_0 to transition call_stmt_1595_sample_start_
          // RAW reenables for rwbar_1553_delayed_5_0
          assign_stmt_1579_update_start_ o<-& (call_stmt_1595_sample_completed_ 0)
          // Call input argument 0
          // bmask_1554_delayed_5_0
          // Call input argument 1
          // rval
          // Call input argument 2
          // wdata_1556_delayed_5_0
          // Call input argument 3
          // index_1557_delayed_5_0
          // start: Forward dependencies from bmask_1554_delayed_5_0 to transition call_stmt_1595_sample_start_
          call_stmt_1595_sample_start_ <-& (assign_stmt_1582_update_completed_)
          // done: Forward dependencies from bmask_1554_delayed_5_0 to transition call_stmt_1595_sample_start_
          // RAW reenables for bmask_1554_delayed_5_0
          assign_stmt_1582_update_start_ o<-& (call_stmt_1595_sample_completed_ 0)
          // start: Forward dependencies from rval to transition call_stmt_1595_sample_start_
          call_stmt_1595_sample_start_ <-& (array_obj_ref_1575_update_completed_)
          // done: Forward dependencies from rval to transition call_stmt_1595_sample_start_
          // RAW reenables for rval
          array_obj_ref_1575_update_start_ o<-& (call_stmt_1595_sample_completed_ 0)
          // start: Forward dependencies from wdata_1556_delayed_5_0 to transition call_stmt_1595_sample_start_
          call_stmt_1595_sample_start_ <-& (assign_stmt_1585_update_completed_)
          // done: Forward dependencies from wdata_1556_delayed_5_0 to transition call_stmt_1595_sample_start_
          // RAW reenables for wdata_1556_delayed_5_0
          assign_stmt_1585_update_start_ o<-& (call_stmt_1595_sample_completed_ 0)
          // start: Forward dependencies from index_1557_delayed_5_0 to transition call_stmt_1595_sample_start_
          call_stmt_1595_sample_start_ <-& (assign_stmt_1588_update_completed_)
          // done: Forward dependencies from index_1557_delayed_5_0 to transition call_stmt_1595_sample_start_
          // RAW reenables for index_1557_delayed_5_0
          assign_stmt_1588_update_start_ o<-& (call_stmt_1595_sample_completed_ 0)
          ;;[call_stmt_1595_Sample] 
          {
            $T [crr] $T [cra] 
          }
          ;;[call_stmt_1595_Update] 
          {
            $T [ccr] $T [cca] 
          }
          call_stmt_1595_sample_start_ &-> (call_stmt_1595_Sample)
          call_stmt_1595_sample_completed_ <-& (call_stmt_1595_Sample)
          call_stmt_1595_sample_completed_ &-> ($null)
          call_stmt_1595_update_start_ &-> (call_stmt_1595_Update)
          call_stmt_1595_update_completed_ <-& (call_stmt_1595_Update)
          // Call output argument 0
          // (as target) wval
          // self-release: 
          call_stmt_1595_sample_start_ o<-& (call_stmt_1595_sample_completed_ 1)
          $null &-> (call_stmt_1595_update_start_)
          call_stmt_1595_update_start_ o<-& (call_stmt_1595_update_completed_ 0)
          // start: WAR dependencies for wval
          // done: WAR dependencies for wval
          // end: 			$guard (~rwbar_1553_delayed_5_0) $call UpdateRegister (bmask_1554_delayed_5_0 rval wdata_1556_delayed_5_0 index_1557_delayed_5_0 ) (wval ) 
          // start:  			rwbar_1561_delayed_5_0 := rwbar $buffering 5 $cut_through // bits of buffering = 5. 
          //  file nic.linked.opt.aa, line 524
          $T[assign_stmt_1598_sample_start_] 
          $T[assign_stmt_1598_sample_completed_] 
          $T[assign_stmt_1598_update_start_] 
          $T[assign_stmt_1598_update_completed_] 
          // Source expression
          // rwbar
          // Target expression
          // (as target) rwbar_1561_delayed_5_0
          // both source and target are implicit: use interlock 
          // Interlock 
          ;;[assign_stmt_1598_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          ;;[assign_stmt_1598_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          assign_stmt_1598_sample_start_ &-> (assign_stmt_1598_Sample)
          assign_stmt_1598_sample_completed_ <-& (assign_stmt_1598_Sample)
          assign_stmt_1598_sample_completed_ &-> ($null)
          assign_stmt_1598_update_start_ &-> (assign_stmt_1598_Update)
          assign_stmt_1598_update_completed_ <-& (assign_stmt_1598_Update)
          // start: Forward dependencies from rwbar to transition assign_stmt_1598_sample_start_
          assign_stmt_1598_sample_start_ <-& (RPIPE_AFB_NIC_REQUEST_1522_update_completed_)
          // done: Forward dependencies from rwbar to transition assign_stmt_1598_sample_start_
          // RAW reenables for rwbar
          RPIPE_AFB_NIC_REQUEST_1522_update_start_ o<-& (assign_stmt_1598_sample_completed_ 0)
          // self-release: 
          assign_stmt_1598_sample_start_ o<-& (assign_stmt_1598_sample_completed_ 1)
          $null &-> (assign_stmt_1598_update_start_)
          assign_stmt_1598_update_start_ o<-& (assign_stmt_1598_update_completed_ 0)
          // start: WAR dependencies for rwbar_1561_delayed_5_0
          // done: WAR dependencies for rwbar_1561_delayed_5_0
          // end:  			rwbar_1561_delayed_5_0 := rwbar $buffering 5 $cut_through // bits of buffering = 5. 
          // start: WAR dependencies for rdata
          // done: WAR dependencies for rdata
          // start:  			$volatile rdata := ( $mux rwbar_1561_delayed_5_0 rval  ($bitcast ($uint<32>) _b0  ) )  $buffering 1
          //  file nic.linked.opt.aa, line 525
          // volatile! 
          // Source expression
          // ( $mux rwbar_1561_delayed_5_0 rval  ($bitcast ($uint<32>) _b0  ) ) 
          // rwbar_1561_delayed_5_0
          // rval
          // Target expression
          // (as target) rdata
          // start: WAR dependencies for rdata
          // done: WAR dependencies for rdata
          // end:  			$volatile rdata := ( $mux rwbar_1561_delayed_5_0 rval  ($bitcast ($uint<32>) _b0  ) )  $buffering 1
          // start: WAR dependencies for resp
          // done: WAR dependencies for resp
          // start:  			$volatile resp := (($bitcast ($uint<1>) _b0  ) && rdata) $buffering 1
          //  file nic.linked.opt.aa, line 526
          // volatile! 
          // Source expression
          // (($bitcast ($uint<1>) _b0  ) && rdata)
          // rdata
          // Target expression
          // (as target) resp
          // start: WAR dependencies for resp
          // done: WAR dependencies for resp
          // end:  			$volatile resp := (($bitcast ($uint<1>) _b0  ) && rdata) $buffering 1
          // start:  			AFB_NIC_RESPONSE := resp $buffering 1// bits of buffering = 33. 
          //  file nic.linked.opt.aa, line 527
          // Source expression
          // resp
          // Target expression
          // (as target) AFB_NIC_RESPONSE
          $T[WPIPE_AFB_NIC_RESPONSE_1612_sample_start_] 
          $T[WPIPE_AFB_NIC_RESPONSE_1612_sample_completed_] 
          $T[WPIPE_AFB_NIC_RESPONSE_1612_update_start_] 
          $T[WPIPE_AFB_NIC_RESPONSE_1612_update_completed_] 
          ;;[WPIPE_AFB_NIC_RESPONSE_1612_Sample] 
          {
            // pipe write sample-start AFB_NIC_RESPONSE
            $T [req] $T [ack] 
          }
          ;;[WPIPE_AFB_NIC_RESPONSE_1612_Update] 
          {
            // pipe write update (complete) AFB_NIC_RESPONSE
            $T [req] $T [ack] 
          }
          WPIPE_AFB_NIC_RESPONSE_1612_sample_start_ &-> (WPIPE_AFB_NIC_RESPONSE_1612_Sample)
          WPIPE_AFB_NIC_RESPONSE_1612_sample_completed_ <-& (WPIPE_AFB_NIC_RESPONSE_1612_Sample)
          WPIPE_AFB_NIC_RESPONSE_1612_update_start_ <-& (WPIPE_AFB_NIC_RESPONSE_1612_sample_completed_)
          WPIPE_AFB_NIC_RESPONSE_1612_update_start_ &-> (WPIPE_AFB_NIC_RESPONSE_1612_Update)
          WPIPE_AFB_NIC_RESPONSE_1612_update_completed_ <-& (WPIPE_AFB_NIC_RESPONSE_1612_Update)
          WPIPE_AFB_NIC_RESPONSE_1612_sample_start_ o<-& (WPIPE_AFB_NIC_RESPONSE_1612_update_completed_ 0)
          // start: Forward dependencies from resp to transition WPIPE_AFB_NIC_RESPONSE_1612_sample_start_
          WPIPE_AFB_NIC_RESPONSE_1612_sample_start_ <-& (array_obj_ref_1575_update_completed_)
          WPIPE_AFB_NIC_RESPONSE_1612_sample_start_ <-& (assign_stmt_1598_update_completed_)
          // done: Forward dependencies from resp to transition WPIPE_AFB_NIC_RESPONSE_1612_sample_start_
          // RAW reenables for resp
          array_obj_ref_1575_update_start_ o<-& (WPIPE_AFB_NIC_RESPONSE_1612_sample_completed_ 0)
          assign_stmt_1598_update_start_ o<-& (WPIPE_AFB_NIC_RESPONSE_1612_sample_completed_ 0)
          // end:  			AFB_NIC_RESPONSE := resp $buffering 1// bits of buffering = 33. 
          $T [loop_body_delay_to_condition_start] $delay
          loop_body_start &-> (loop_body_delay_to_condition_start)
          loop_body_delay_to_condition_start &-> (condition_evaluated)
          condition_evaluated &-> ($null)
          // load-store dependencies..
          // memory-space  memory_space_0
          //  array_obj_ref_1467 load
          //  array_obj_ref_1498 load
          //  array_obj_ref_1503 load
          //  array_obj_ref_1519 load
          //  array_obj_ref_1575 load
          //  call_stmt_1595 store
          $T [array_obj_ref_1467_call_stmt_1595_delay] $delay
          // array_obj_ref_1467(load) -> call_stmt_1595(store)
          call_stmt_1595_sample_start_ <-& (array_obj_ref_1467_call_stmt_1595_delay)
          array_obj_ref_1467_call_stmt_1595_delay <-& (array_obj_ref_1467_sample_completed_)
          $T [array_obj_ref_1498_call_stmt_1595_delay] $delay
          // array_obj_ref_1498(load) -> call_stmt_1595(store)
          call_stmt_1595_sample_start_ <-& (array_obj_ref_1498_call_stmt_1595_delay)
          array_obj_ref_1498_call_stmt_1595_delay <-& (array_obj_ref_1498_sample_completed_)
          $T [array_obj_ref_1503_call_stmt_1595_delay] $delay
          // array_obj_ref_1503(load) -> call_stmt_1595(store)
          call_stmt_1595_sample_start_ <-& (array_obj_ref_1503_call_stmt_1595_delay)
          array_obj_ref_1503_call_stmt_1595_delay <-& (array_obj_ref_1503_sample_completed_)
          $T [array_obj_ref_1519_call_stmt_1595_delay] $delay
          // array_obj_ref_1519(load) -> call_stmt_1595(store)
          call_stmt_1595_sample_start_ <-& (array_obj_ref_1519_call_stmt_1595_delay)
          array_obj_ref_1519_call_stmt_1595_delay <-& (array_obj_ref_1519_sample_completed_)
          $T [array_obj_ref_1575_call_stmt_1595_delay] $delay
          // array_obj_ref_1575(load) -> call_stmt_1595(store)
          call_stmt_1595_sample_start_ <-& (array_obj_ref_1575_call_stmt_1595_delay)
          array_obj_ref_1575_call_stmt_1595_delay <-& (array_obj_ref_1575_sample_completed_)
          // reenable across ring for memory space memory_space_0
          $T[ring_reenable_memory_space_0] 
          ring_reenable_memory_space_0 <-& (call_stmt_1595_update_completed_)
          array_obj_ref_1467_sample_start_ o<-& (ring_reenable_memory_space_0 1)
          array_obj_ref_1498_sample_start_ o<-& (ring_reenable_memory_space_0 1)
          array_obj_ref_1503_sample_start_ o<-& (ring_reenable_memory_space_0 1)
          array_obj_ref_1519_sample_start_ o<-& (ring_reenable_memory_space_0 1)
          array_obj_ref_1575_sample_start_ o<-& (ring_reenable_memory_space_0 1)
          // pipe read/write dependencies for pipe AFB_NIC_REQUEST
          // read-dependencies for pipe AFB_NIC_REQUEST
          // write-dependencies for pipe AFB_NIC_REQUEST
          // signal write dependencies for AFB_NIC_REQUEST
          // pipe read/write dependencies for pipe CONTROL_REGISTER
          // read-dependencies for pipe CONTROL_REGISTER
          // write-dependencies for pipe CONTROL_REGISTER
          // signal write dependencies for CONTROL_REGISTER
          // pipe read/write dependencies for pipe AFB_NIC_RESPONSE
          // read-dependencies for pipe AFB_NIC_RESPONSE
          // write-dependencies for pipe AFB_NIC_RESPONSE
          // signal write dependencies for AFB_NIC_RESPONSE
          // pipe read/write dependencies for pipe FREE_Q
          // read-dependencies for pipe FREE_Q
          // write-dependencies for pipe FREE_Q
          // signal write dependencies for FREE_Q
          // pipe read/write dependencies for pipe NUMBER_OF_SERVERS
          // read-dependencies for pipe NUMBER_OF_SERVERS
          // write-dependencies for pipe NUMBER_OF_SERVERS
          // signal write dependencies for NUMBER_OF_SERVERS
        }
        ( first_time_through_loop_body  back_edge_to_loop_body) 
        ( condition_evaluated )
        ;; [loop_exit] 
        {
          $T [ack] 
        }
        ;; [loop_taken] 
        {
          $T [ack] 
        }
        do_while_stmt_1440__entry__ <-| ($entry)
        loop_body_done <-| ( do_while_stmt_1440_loop_body ) 
        condition_done |-> (loop_exit loop_taken)
        do_while_stmt_1440__exit__ |-> ($exit)
        $bind condition_done <= do_while_stmt_1440_loop_body : condition_evaluated
        $bind do_while_stmt_1440__entry__  => do_while_stmt_1440_loop_body : first_time_through_loop_body 
        $bind loop_back  => do_while_stmt_1440_loop_body : back_edge_to_loop_body 
        $terminate (loop_exit loop_taken loop_body_done) (loop_back do_while_stmt_1440__exit__)
      }
      do_while_stmt_1440__entry__ |-> (do_while_stmt_1440)
      do_while_stmt_1440__exit__ <-| (do_while_stmt_1440)
      do_while_stmt_1440__entry__ <-| (branch_block_stmt_1439__entry__)
      do_while_stmt_1440__exit__ |-> (branch_block_stmt_1439__exit__)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %SoftwareRegisterAccessDaemon%loop%
    //  file nic.linked.opt.aa, line 487
    // constant-object-declarations for block %SoftwareRegisterAccessDaemon%loop
    //  file nic.linked.opt.aa, line 483
    // constant-object-declarations for block %SoftwareRegisterAccessDaemon
    //  file nic.linked.opt.aa, line 477
    // constant-declarations for block %SoftwareRegisterAccessDaemon%loop
    //  file nic.linked.opt.aa, line 483
    // do-while statement  
    //  file nic.linked.opt.aa, line 485
    // 1 
    $constant $W[konst_1616_wire_constant] : $int<1> := _b1// 1
    // constant-declarations for block %SoftwareRegisterAccessDaemon%loop%
    //  file nic.linked.opt.aa, line 487
    // constant-declarations for phi:  			$phi INIT := 			  ($bitcast ($uint<1>) _b0  ) $on   $entry 			  ($bitcast ($uint<1>) _b1  ) $on   $loopback 
    // type of target is $uint<1>
    //  file nic.linked.opt.aa, line 488
    // ($bitcast ($uint<1>) _b0  )
    $constant $W[type_cast_1445_wire_constant] : $int<1> := _b0// 0
    // ($bitcast ($uint<1>) _b1  )
    $constant $W[type_cast_1447_wire_constant] : $int<1> := _b1// 1
    // constant-declarations for phi:  			$phi control_register := 			  ($bitcast ($uint<1>) _b0  ) $on   $entry 			  check_control_regsiter $on   $loopback 
    // type of target is $uint<1>
    //  file nic.linked.opt.aa, line 490
    // ($bitcast ($uint<1>) _b0  )
    $constant $W[type_cast_1451_wire_constant] : $int<1> := _b0// 0
    // constant-declarations for phi:  			$phi free_q := 			  ($bitcast ($uint<1>) _b0  ) $on   $entry 			  check_free_q $on   $loopback 
    // type of target is $uint<1>
    //  file nic.linked.opt.aa, line 492
    // ($bitcast ($uint<1>) _b0  )
    $constant $W[type_cast_1456_wire_constant] : $int<1> := _b0// 0
    // constant-declarations for phi:  			$phi num_server := 			  ($bitcast ($uint<1>) _b0  ) $on   $entry 			  check_num_server $on   $loopback 
    // type of target is $uint<1>
    //  file nic.linked.opt.aa, line 494
    // ($bitcast ($uint<1>) _b0  )
    $constant $W[type_cast_1461_wire_constant] : $int<1> := _b0// 0
    // nic_registers[0 ]
    $constant $W[array_obj_ref_1467_word_address_0] : $pointer<memory_space_0> := _b000000
    // nic_registers[0 ]
    $constant $W[array_obj_ref_1498_word_address_0] : $pointer<memory_space_0> := _b000000
    // nic_registers[18 ]
    $constant $W[array_obj_ref_1503_word_address_0] : $pointer<memory_space_0> := _b010010
    // ($bitcast ($uint<3>) _b0  )
    $constant $W[type_cast_1512_wire_constant] : $int<3> := _b000// 0
    // nic_registers[1 ]
    $constant $W[array_obj_ref_1519_word_address_0] : $pointer<memory_space_0> := _b000001
    // 0 
    $constant $W[konst_1548_wire_constant] : $int<6> := _b000000// 0
    // 0 
    $constant $W[konst_1551_wire_constant] : $int<1> := _b0// 0
    // 18 
    $constant $W[konst_1557_wire_constant] : $int<6> := _b010010// 18
    // 0 
    $constant $W[konst_1560_wire_constant] : $int<1> := _b0// 0
    // 1 
    $constant $W[konst_1566_wire_constant] : $int<6> := _b000001// 1
    // 0 
    $constant $W[konst_1569_wire_constant] : $int<1> := _b0// 0
    // nic_registers[index]
    $constant $W[array_obj_ref_1575_resized_base_address] : $int<6> := _b000000// 0
    $constant $W[array_obj_ref_1575_offset_scale_factor_0] : $int<6> := _b000001// 1
    $constant $W[array_obj_ref_1575_word_offset_0] : $int<6> := _b000000// 0
    // 			$guard (~rwbar_1553_delayed_5_0) $call UpdateRegister (bmask_1554_delayed_5_0 rval wdata_1556_delayed_5_0 index_1557_delayed_5_0 ) (wval ) 
    //  file nic.linked.opt.aa, line 523
    // ( $mux rwbar_1561_delayed_5_0 rval  ($bitcast ($uint<32>) _b0  ) ) 
    // ($bitcast ($uint<32>) _b0  )
    $constant $W[type_cast_1603_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // ($bitcast ($uint<1>) _b0  )
    $constant $W[type_cast_1608_wire_constant] : $int<1> := _b0// 0
    // block %SoftwareRegisterAccessDaemon%loop
    //  file nic.linked.opt.aa, line 483
    // do-while statement  
    //  file nic.linked.opt.aa, line 485
    // merge-statement  
    //  file nic.linked.opt.aa, line 487
    // 			$phi INIT := 			  ($bitcast ($uint<1>) _b0  ) $on   $entry 			  ($bitcast ($uint<1>) _b1  ) $on   $loopback 
    // type of target is $uint<1>
    //  file nic.linked.opt.aa, line 488
    // INIT
    $W[INIT_1442] : $int<1>
    // 			$phi control_register := 			  ($bitcast ($uint<1>) _b0  ) $on   $entry 			  check_control_regsiter $on   $loopback 
    // type of target is $uint<1>
    //  file nic.linked.opt.aa, line 490
    $W[check_control_regsiter_1554_1452_buffered] : $int<1>
    // control_register
    $W[control_register_1448] : $int<1>
    // 			$phi free_q := 			  ($bitcast ($uint<1>) _b0  ) $on   $entry 			  check_free_q $on   $loopback 
    // type of target is $uint<1>
    //  file nic.linked.opt.aa, line 492
    $W[check_free_q_1563_1457_buffered] : $int<1>
    // free_q
    $W[free_q_1453] : $int<1>
    // 			$phi num_server := 			  ($bitcast ($uint<1>) _b0  ) $on   $entry 			  check_num_server $on   $loopback 
    // type of target is $uint<1>
    //  file nic.linked.opt.aa, line 494
    $W[check_num_server_1572_1462_buffered] : $int<1>
    // num_server
    $W[num_server_1458] : $int<1>
    // 			control_data := nic_registers[0 ] $buffering 1// bits of buffering = 32. 
    //  file nic.linked.opt.aa, line 498
    // nic_registers[0 ]
    $W[array_obj_ref_1467_data_0] : $int<32>
    // control_data
    $W[control_data_1468] : $int<32>
    // 			$volatile update_control_register_pipe := (( ~ INIT ) | (INIT & control_register)) $buffering 1
    //  file nic.linked.opt.aa, line 500
    // ( ~ INIT )
    $intermediate $W[NOT_u1_u1_1473_wire] : $int<1>
    // (INIT & control_register)
    $intermediate $W[AND_u1_u1_1476_wire] : $int<1>
    // update_control_register_pipe
    $W[update_control_register_pipe_1478] : $int<1>
    // 			$volatile update_free_q_pipe := (( ~ INIT ) | (INIT & free_q)) $buffering 1
    //  file nic.linked.opt.aa, line 501
    // ( ~ INIT )
    $intermediate $W[NOT_u1_u1_1481_wire] : $int<1>
    // (INIT & free_q)
    $intermediate $W[AND_u1_u1_1484_wire] : $int<1>
    // update_free_q_pipe
    $W[update_free_q_pipe_1486] : $int<1>
    // 			$volatile update_server_num := (( ~ INIT ) | (INIT & num_server)) $buffering 1
    //  file nic.linked.opt.aa, line 502
    // ( ~ INIT )
    $intermediate $W[NOT_u1_u1_1489_wire] : $int<1>
    // (INIT & num_server)
    $intermediate $W[AND_u1_u1_1492_wire] : $int<1>
    // update_server_num
    $W[update_server_num_1494] : $int<1>
    // 			$guard (update_control_register_pipe) CONTROL_REGISTER := nic_registers[0 ] $buffering 1// bits of buffering = 32. 
    //  file nic.linked.opt.aa, line 503
    // nic_registers[0 ]
    $W[array_obj_ref_1498_data_0] : $int<32>
    $W[array_obj_ref_1498_wire] : $int<32>
    // CONTROL_REGISTER
    // 			$guard (update_free_q_pipe) FREE_Q_32 := nic_registers[18 ] $buffering 1// bits of buffering = 32. 
    //  file nic.linked.opt.aa, line 504
    // nic_registers[18 ]
    $W[array_obj_ref_1503_data_0] : $int<32>
    // FREE_Q_32
    $W[FREE_Q_32_1504] : $int<32>
    // 			update_free_q_pipe_1480_delayed_5_0 := update_free_q_pipe $buffering 5 $cut_through // bits of buffering = 5. 
    //  file nic.linked.opt.aa, line 505
    // update_free_q_pipe_1480_delayed_5_0
    $W[update_free_q_pipe_1480_delayed_5_0_1507] : $int<1>
    // 			$guard (update_free_q_pipe_1480_delayed_5_0) FREE_Q := ($bitcast ($uint<36>) (FREE_Q_32 && ($bitcast ($uint<3>) _b0  )) ) $buffering 1// bits of buffering = 36. 
    //  file nic.linked.opt.aa, line 506
    // (FREE_Q_32 && ($bitcast ($uint<3>) _b0  ))
    $intermediate $W[CONCAT_u32_u35_1513_wire] : $int<35>
    // ($bitcast ($uint<36>) (FREE_Q_32 && ($bitcast ($uint<3>) _b0  )) )
    $intermediate $W[type_cast_1514_wire] : $int<36>
    // FREE_Q
    // 			$guard (update_server_num) NUMBER_OF_SERVERS := nic_registers[1 ] $buffering 1// bits of buffering = 32. 
    //  file nic.linked.opt.aa, line 507
    // nic_registers[1 ]
    $W[array_obj_ref_1519_data_0] : $int<32>
    $W[array_obj_ref_1519_wire] : $int<32>
    // NUMBER_OF_SERVERS
    // 			req := AFB_NIC_REQUEST $buffering 2// bits of buffering = 148. 
    //  file nic.linked.opt.aa, line 508
    // req
    $W[req_1523] : $int<74>
    // 			$volatile rwbar := ( $slice req 72 72 )  $buffering 1
    //  file nic.linked.opt.aa, line 510
    // rwbar
    $W[rwbar_1529] : $int<1>
    // 			$volatile bmask := ( $slice req 71 68 )  $buffering 1
    //  file nic.linked.opt.aa, line 511
    // bmask
    $W[bmask_1533] : $int<4>
    // 			$volatile addr := ( $slice req 67 32 )  $buffering 1
    //  file nic.linked.opt.aa, line 512
    // addr
    $W[addr_1537] : $int<36>
    // 			$volatile wdata := ( $slice req 31 0 )  $buffering 1
    //  file nic.linked.opt.aa, line 513
    // wdata
    $W[wdata_1541] : $int<32>
    // 			$volatile index := ( $slice addr 7 2 )  $buffering 1
    //  file nic.linked.opt.aa, line 514
    // index
    $W[index_1545] : $int<6>
    // 			$volatile check_control_regsiter := ((index == 0 ) & (rwbar == 0 )) $buffering 1
    //  file nic.linked.opt.aa, line 515
    // (index == 0 )
    $intermediate $W[EQ_u6_u1_1549_wire] : $int<1>
    // (rwbar == 0 )
    $intermediate $W[EQ_u1_u1_1552_wire] : $int<1>
    // check_control_regsiter
    $W[check_control_regsiter_1554] : $int<1>
    // 			$volatile check_free_q := ((index == 18 ) & (rwbar == 0 )) $buffering 1
    //  file nic.linked.opt.aa, line 516
    // (index == 18 )
    $intermediate $W[EQ_u6_u1_1558_wire] : $int<1>
    // (rwbar == 0 )
    $intermediate $W[EQ_u1_u1_1561_wire] : $int<1>
    // check_free_q
    $W[check_free_q_1563] : $int<1>
    // 			$volatile check_num_server := ((index == 1 ) & (rwbar == 0 )) $buffering 1
    //  file nic.linked.opt.aa, line 517
    // (index == 1 )
    $intermediate $W[EQ_u6_u1_1567_wire] : $int<1>
    // (rwbar == 0 )
    $intermediate $W[EQ_u1_u1_1570_wire] : $int<1>
    // check_num_server
    $W[check_num_server_1572] : $int<1>
    // 			rval := nic_registers[index] $buffering 1// bits of buffering = 32. 
    //  file nic.linked.opt.aa, line 518
    // nic_registers[index]
    $intermediate $W[R_index_1574_resized] : $int<6>
    $intermediate $W[R_index_1574_scaled] : $int<6>
    $intermediate $W[array_obj_ref_1575_final_offset] : $int<6>
    $intermediate $W[array_obj_ref_1575_root_address] : $int<6>
    $W[array_obj_ref_1575_word_address_0] : $pointer<memory_space_0>
    $W[array_obj_ref_1575_data_0] : $int<32>
    // rval
    $W[rval_1576] : $int<32>
    // 			rwbar_1553_delayed_5_0 := rwbar $buffering 5 $cut_through // bits of buffering = 5. 
    //  file nic.linked.opt.aa, line 519
    // rwbar_1553_delayed_5_0
    $W[rwbar_1553_delayed_5_0_1579] : $int<1>
    // 			bmask_1554_delayed_5_0 := bmask $buffering 5 $cut_through // bits of buffering = 20. 
    //  file nic.linked.opt.aa, line 520
    // bmask_1554_delayed_5_0
    $W[bmask_1554_delayed_5_0_1582] : $int<4>
    // 			wdata_1556_delayed_5_0 := wdata $buffering 5 $cut_through // bits of buffering = 160. 
    //  file nic.linked.opt.aa, line 521
    // wdata_1556_delayed_5_0
    $W[wdata_1556_delayed_5_0_1585] : $int<32>
    // 			index_1557_delayed_5_0 := index $buffering 5 $cut_through // bits of buffering = 30. 
    //  file nic.linked.opt.aa, line 522
    // index_1557_delayed_5_0
    $W[index_1557_delayed_5_0_1588] : $int<6>
    // 			$guard (~rwbar_1553_delayed_5_0) $call UpdateRegister (bmask_1554_delayed_5_0 rval wdata_1556_delayed_5_0 index_1557_delayed_5_0 ) (wval ) 
    //  file nic.linked.opt.aa, line 523
    // wval
    $W[wval_1595] : $int<32>
    // 			rwbar_1561_delayed_5_0 := rwbar $buffering 5 $cut_through // bits of buffering = 5. 
    //  file nic.linked.opt.aa, line 524
    // rwbar_1561_delayed_5_0
    $W[rwbar_1561_delayed_5_0_1598] : $int<1>
    // 			$volatile rdata := ( $mux rwbar_1561_delayed_5_0 rval  ($bitcast ($uint<32>) _b0  ) )  $buffering 1
    //  file nic.linked.opt.aa, line 525
    // rdata
    $W[rdata_1605] : $int<32>
    // 			$volatile resp := (($bitcast ($uint<1>) _b0  ) && rdata) $buffering 1
    //  file nic.linked.opt.aa, line 526
    // resp
    $W[resp_1611] : $int<33>
    // 			AFB_NIC_RESPONSE := resp $buffering 1// bits of buffering = 33. 
    //  file nic.linked.opt.aa, line 527
    // AFB_NIC_RESPONSE
    // datapath-instances for block %SoftwareRegisterAccessDaemon%loop
    //  file nic.linked.opt.aa, line 483
    // datapath-instances for do-while  
    //  file nic.linked.opt.aa, line 485
    ==0? [do_while_stmt_1440_branch] (konst_1616_wire_constant)
    $flowthrough
    // data-path instances for merge  
    //  file nic.linked.opt.aa, line 487
    // 			$phi INIT := 			  ($bitcast ($uint<1>) _b0  ) $on   $entry 			  ($bitcast ($uint<1>) _b1  ) $on   $loopback 
    // type of target is $uint<1>
    //  file nic.linked.opt.aa, line 488
    # $phi [phi_stmt_1442] (type_cast_1445_wire_constant type_cast_1447_wire_constant) ( INIT_1442 ) $fullrate
    // $buffering  $out phi_stmt_1442 INIT_1442 2
    // 			$phi control_register := 			  ($bitcast ($uint<1>) _b0  ) $on   $entry 			  check_control_regsiter $on   $loopback 
    // type of target is $uint<1>
    //  file nic.linked.opt.aa, line 490
    # := [check_control_regsiter_1554_1452_buf] (check_control_regsiter_1554) (check_control_regsiter_1554_1452_buffered)     $fullrate
    $buffering $out check_control_regsiter_1554_1452_buf check_control_regsiter_1554_1452_buffered  1
    # $phi [phi_stmt_1448] (type_cast_1451_wire_constant check_control_regsiter_1554_1452_buffered) ( control_register_1448 ) $fullrate
    // $buffering  $out phi_stmt_1448 control_register_1448 2
    // 			$phi free_q := 			  ($bitcast ($uint<1>) _b0  ) $on   $entry 			  check_free_q $on   $loopback 
    // type of target is $uint<1>
    //  file nic.linked.opt.aa, line 492
    # := [check_free_q_1563_1457_buf] (check_free_q_1563) (check_free_q_1563_1457_buffered)     $fullrate
    $buffering $out check_free_q_1563_1457_buf check_free_q_1563_1457_buffered  1
    # $phi [phi_stmt_1453] (type_cast_1456_wire_constant check_free_q_1563_1457_buffered) ( free_q_1453 ) $fullrate
    // $buffering  $out phi_stmt_1453 free_q_1453 2
    // 			$phi num_server := 			  ($bitcast ($uint<1>) _b0  ) $on   $entry 			  check_num_server $on   $loopback 
    // type of target is $uint<1>
    //  file nic.linked.opt.aa, line 494
    # := [check_num_server_1572_1462_buf] (check_num_server_1572) (check_num_server_1572_1462_buffered)     $fullrate
    $buffering $out check_num_server_1572_1462_buf check_num_server_1572_1462_buffered  1
    # $phi [phi_stmt_1458] (type_cast_1461_wire_constant check_num_server_1572_1462_buffered) ( num_server_1458 ) $fullrate
    // $buffering  $out phi_stmt_1458 num_server_1458 2
    // 			control_data := nic_registers[0 ] $buffering 1// bits of buffering = 32. 
    //  file nic.linked.opt.aa, line 498
    // nic_registers[0 ]
    $load [array_obj_ref_1467_load_0] $from memory_space_0 (array_obj_ref_1467_word_address_0) (array_obj_ref_1467_data_0) 
    $buffering  $in array_obj_ref_1467_load_0 array_obj_ref_1467_word_address_0 2
    $buffering  $out array_obj_ref_1467_load_0 array_obj_ref_1467_data_0 2
    $delay array_obj_ref_1467_load_0 5
    &/ [array_obj_ref_1467_gather_scatter] (array_obj_ref_1467_data_0) (control_data_1468) 
    $flowthrough 
    // 			$volatile update_control_register_pipe := (( ~ INIT ) | (INIT & control_register)) $buffering 1
    //  file nic.linked.opt.aa, line 500
    // ( ~ INIT )
    ~ [NOT_u1_u1_1473_inst] (INIT_1442) (NOT_u1_u1_1473_wire)   $flowthrough
    $delay NOT_u1_u1_1473_inst 0
    // (INIT & control_register)
    &[AND_u1_u1_1476_inst] (INIT_1442 control_register_1448) (AND_u1_u1_1476_wire)   $flowthrough 
    $delay AND_u1_u1_1476_inst 0
    // (( ~ INIT ) | (INIT & control_register))
    |[OR_u1_u1_1477_inst] (NOT_u1_u1_1473_wire AND_u1_u1_1476_wire) (update_control_register_pipe_1478)   $flowthrough 
    $delay OR_u1_u1_1477_inst 0
    // 			$volatile update_free_q_pipe := (( ~ INIT ) | (INIT & free_q)) $buffering 1
    //  file nic.linked.opt.aa, line 501
    // ( ~ INIT )
    ~ [NOT_u1_u1_1481_inst] (INIT_1442) (NOT_u1_u1_1481_wire)   $flowthrough
    $delay NOT_u1_u1_1481_inst 0
    // (INIT & free_q)
    &[AND_u1_u1_1484_inst] (INIT_1442 free_q_1453) (AND_u1_u1_1484_wire)   $flowthrough 
    $delay AND_u1_u1_1484_inst 0
    // (( ~ INIT ) | (INIT & free_q))
    |[OR_u1_u1_1485_inst] (NOT_u1_u1_1481_wire AND_u1_u1_1484_wire) (update_free_q_pipe_1486)   $flowthrough 
    $delay OR_u1_u1_1485_inst 0
    // 			$volatile update_server_num := (( ~ INIT ) | (INIT & num_server)) $buffering 1
    //  file nic.linked.opt.aa, line 502
    // ( ~ INIT )
    ~ [NOT_u1_u1_1489_inst] (INIT_1442) (NOT_u1_u1_1489_wire)   $flowthrough
    $delay NOT_u1_u1_1489_inst 0
    // (INIT & num_server)
    &[AND_u1_u1_1492_inst] (INIT_1442 num_server_1458) (AND_u1_u1_1492_wire)   $flowthrough 
    $delay AND_u1_u1_1492_inst 0
    // (( ~ INIT ) | (INIT & num_server))
    |[OR_u1_u1_1493_inst] (NOT_u1_u1_1489_wire AND_u1_u1_1492_wire) (update_server_num_1494)   $flowthrough 
    $delay OR_u1_u1_1493_inst 0
    // 			$guard (update_control_register_pipe) CONTROL_REGISTER := nic_registers[0 ] $buffering 1// bits of buffering = 32. 
    //  file nic.linked.opt.aa, line 503
    // nic_registers[0 ]
    $load [array_obj_ref_1498_load_0] $from memory_space_0 (array_obj_ref_1498_word_address_0) (array_obj_ref_1498_data_0) $guard ( update_control_register_pipe_1478 ) 
    $buffering  $in array_obj_ref_1498_load_0 array_obj_ref_1498_word_address_0 2
    $buffering  $out array_obj_ref_1498_load_0 array_obj_ref_1498_data_0 2
    $delay array_obj_ref_1498_load_0 5
    &/ [array_obj_ref_1498_gather_scatter] (array_obj_ref_1498_data_0) (array_obj_ref_1498_wire) $guard ( update_control_register_pipe_1478 ) 
    $flowthrough 
    // CONTROL_REGISTER
    $ioport $out [WPIPE_CONTROL_REGISTER_1496_inst]  (array_obj_ref_1498_wire) (CONTROL_REGISTER) $guard ( update_control_register_pipe_1478 )  $fullrate 
    // 			$guard (update_free_q_pipe) FREE_Q_32 := nic_registers[18 ] $buffering 1// bits of buffering = 32. 
    //  file nic.linked.opt.aa, line 504
    // nic_registers[18 ]
    $load [array_obj_ref_1503_load_0] $from memory_space_0 (array_obj_ref_1503_word_address_0) (array_obj_ref_1503_data_0) $guard ( update_free_q_pipe_1486 ) 
    $buffering  $in array_obj_ref_1503_load_0 array_obj_ref_1503_word_address_0 2
    $buffering  $out array_obj_ref_1503_load_0 array_obj_ref_1503_data_0 2
    $delay array_obj_ref_1503_load_0 5
    &/ [array_obj_ref_1503_gather_scatter] (array_obj_ref_1503_data_0) (FREE_Q_32_1504) $guard ( update_free_q_pipe_1486 ) 
    $flowthrough 
    // 			update_free_q_pipe_1480_delayed_5_0 := update_free_q_pipe $buffering 5 $cut_through // bits of buffering = 5. 
    //  file nic.linked.opt.aa, line 505
    # := [W_update_free_q_pipe_1480_delayed_5_0_1505_inst] (update_free_q_pipe_1486) (update_free_q_pipe_1480_delayed_5_0_1507)  $cut_through    $fullrate
    $buffering  $out W_update_free_q_pipe_1480_delayed_5_0_1505_inst update_free_q_pipe_1480_delayed_5_0_1507 5
    // 			$guard (update_free_q_pipe_1480_delayed_5_0) FREE_Q := ($bitcast ($uint<36>) (FREE_Q_32 && ($bitcast ($uint<3>) _b0  )) ) $buffering 1// bits of buffering = 36. 
    //  file nic.linked.opt.aa, line 506
    // (FREE_Q_32 && ($bitcast ($uint<3>) _b0  ))
    &&[CONCAT_u32_u35_1513_inst] (FREE_Q_32_1504 type_cast_1512_wire_constant) (CONCAT_u32_u35_1513_wire) $guard ( update_free_q_pipe_1480_delayed_5_0_1507 )   $flowthrough 
    $delay CONCAT_u32_u35_1513_inst 0
    // ($bitcast ($uint<36>) (FREE_Q_32 && ($bitcast ($uint<3>) _b0  )) )
    # := [type_cast_1514_inst] (CONCAT_u32_u35_1513_wire) (type_cast_1514_wire)  $guard ( update_free_q_pipe_1480_delayed_5_0_1507 )    $fullrate
    $buffering  $out type_cast_1514_inst type_cast_1514_wire 1
    $delay type_cast_1514_inst 1
    // FREE_Q
    $ioport $out [WPIPE_FREE_Q_1509_inst]  (type_cast_1514_wire) (FREE_Q) $guard ( update_free_q_pipe_1480_delayed_5_0_1507 )  $fullrate 
    // 			$guard (update_server_num) NUMBER_OF_SERVERS := nic_registers[1 ] $buffering 1// bits of buffering = 32. 
    //  file nic.linked.opt.aa, line 507
    // nic_registers[1 ]
    $load [array_obj_ref_1519_load_0] $from memory_space_0 (array_obj_ref_1519_word_address_0) (array_obj_ref_1519_data_0) $guard ( update_server_num_1494 ) 
    $buffering  $in array_obj_ref_1519_load_0 array_obj_ref_1519_word_address_0 2
    $buffering  $out array_obj_ref_1519_load_0 array_obj_ref_1519_data_0 2
    $delay array_obj_ref_1519_load_0 5
    &/ [array_obj_ref_1519_gather_scatter] (array_obj_ref_1519_data_0) (array_obj_ref_1519_wire) $guard ( update_server_num_1494 ) 
    $flowthrough 
    // NUMBER_OF_SERVERS
    $ioport $out [WPIPE_NUMBER_OF_SERVERS_1517_inst]  (array_obj_ref_1519_wire) (NUMBER_OF_SERVERS) $guard ( update_server_num_1494 )  $fullrate 
    // 			req := AFB_NIC_REQUEST $buffering 2// bits of buffering = 148. 
    //  file nic.linked.opt.aa, line 508
    // AFB_NIC_REQUEST
    $ioport $in [RPIPE_AFB_NIC_REQUEST_1522_inst] (AFB_NIC_REQUEST) (req_1523)  $fullrate 
    $buffering $out RPIPE_AFB_NIC_REQUEST_1522_inst req_1523 1
    // 			$volatile rwbar := ( $slice req 72 72 )  $buffering 1
    //  file nic.linked.opt.aa, line 510
    // ( $slice req 72 72 ) 
    [:] [slice_1528_inst] (req_1523 72 72) (rwbar_1529)  $flowthrough
    $delay slice_1528_inst 0
    // 			$volatile bmask := ( $slice req 71 68 )  $buffering 1
    //  file nic.linked.opt.aa, line 511
    // ( $slice req 71 68 ) 
    [:] [slice_1532_inst] (req_1523 71 68) (bmask_1533)  $flowthrough
    $delay slice_1532_inst 0
    // 			$volatile addr := ( $slice req 67 32 )  $buffering 1
    //  file nic.linked.opt.aa, line 512
    // ( $slice req 67 32 ) 
    [:] [slice_1536_inst] (req_1523 67 32) (addr_1537)  $flowthrough
    $delay slice_1536_inst 0
    // 			$volatile wdata := ( $slice req 31 0 )  $buffering 1
    //  file nic.linked.opt.aa, line 513
    // ( $slice req 31 0 ) 
    [:] [slice_1540_inst] (req_1523 31 0) (wdata_1541)  $flowthrough
    $delay slice_1540_inst 0
    // 			$volatile index := ( $slice addr 7 2 )  $buffering 1
    //  file nic.linked.opt.aa, line 514
    // ( $slice addr 7 2 ) 
    [:] [slice_1544_inst] (addr_1537 7 2) (index_1545)  $flowthrough
    $delay slice_1544_inst 0
    // 			$volatile check_control_regsiter := ((index == 0 ) & (rwbar == 0 )) $buffering 1
    //  file nic.linked.opt.aa, line 515
    // (index == 0 )
    ==[EQ_u6_u1_1549_inst] (index_1545 konst_1548_wire_constant) (EQ_u6_u1_1549_wire)   $flowthrough 
    $delay EQ_u6_u1_1549_inst 0
    // (rwbar == 0 )
    ==[EQ_u1_u1_1552_inst] (rwbar_1529 konst_1551_wire_constant) (EQ_u1_u1_1552_wire)   $flowthrough 
    $delay EQ_u1_u1_1552_inst 0
    // ((index == 0 ) & (rwbar == 0 ))
    &[AND_u1_u1_1553_inst] (EQ_u6_u1_1549_wire EQ_u1_u1_1552_wire) (check_control_regsiter_1554)   $flowthrough 
    $delay AND_u1_u1_1553_inst 0
    // 			$volatile check_free_q := ((index == 18 ) & (rwbar == 0 )) $buffering 1
    //  file nic.linked.opt.aa, line 516
    // (index == 18 )
    ==[EQ_u6_u1_1558_inst] (index_1545 konst_1557_wire_constant) (EQ_u6_u1_1558_wire)   $flowthrough 
    $delay EQ_u6_u1_1558_inst 0
    // (rwbar == 0 )
    ==[EQ_u1_u1_1561_inst] (rwbar_1529 konst_1560_wire_constant) (EQ_u1_u1_1561_wire)   $flowthrough 
    $delay EQ_u1_u1_1561_inst 0
    // ((index == 18 ) & (rwbar == 0 ))
    &[AND_u1_u1_1562_inst] (EQ_u6_u1_1558_wire EQ_u1_u1_1561_wire) (check_free_q_1563)   $flowthrough 
    $delay AND_u1_u1_1562_inst 0
    // 			$volatile check_num_server := ((index == 1 ) & (rwbar == 0 )) $buffering 1
    //  file nic.linked.opt.aa, line 517
    // (index == 1 )
    ==[EQ_u6_u1_1567_inst] (index_1545 konst_1566_wire_constant) (EQ_u6_u1_1567_wire)   $flowthrough 
    $delay EQ_u6_u1_1567_inst 0
    // (rwbar == 0 )
    ==[EQ_u1_u1_1570_inst] (rwbar_1529 konst_1569_wire_constant) (EQ_u1_u1_1570_wire)   $flowthrough 
    $delay EQ_u1_u1_1570_inst 0
    // ((index == 1 ) & (rwbar == 0 ))
    &[AND_u1_u1_1571_inst] (EQ_u6_u1_1567_wire EQ_u1_u1_1570_wire) (check_num_server_1572)   $flowthrough 
    $delay AND_u1_u1_1571_inst 0
    // 			rval := nic_registers[index] $buffering 1// bits of buffering = 32. 
    //  file nic.linked.opt.aa, line 518
    // nic_registers[index]
    &/ [array_obj_ref_1575_index_0_resize] (index_1545) (R_index_1574_resized) 
    $flowthrough 
    &/ [array_obj_ref_1575_index_0_rename] (R_index_1574_resized) (R_index_1574_scaled) 
    $flowthrough 
    &/ [array_obj_ref_1575_index_offset] (R_index_1574_scaled) (array_obj_ref_1575_final_offset) 
    $flowthrough 
    &/ [array_obj_ref_1575_root_address_inst] (array_obj_ref_1575_final_offset) (array_obj_ref_1575_root_address) 
    $flowthrough 
    &/ [array_obj_ref_1575_addr_0] (array_obj_ref_1575_root_address) (array_obj_ref_1575_word_address_0) 
    $flowthrough 
    $load [array_obj_ref_1575_load_0] $from memory_space_0 (array_obj_ref_1575_word_address_0) (array_obj_ref_1575_data_0) 
    $buffering  $in array_obj_ref_1575_load_0 array_obj_ref_1575_word_address_0 2
    $buffering  $out array_obj_ref_1575_load_0 array_obj_ref_1575_data_0 2
    $delay array_obj_ref_1575_load_0 5
    &/ [array_obj_ref_1575_gather_scatter] (array_obj_ref_1575_data_0) (rval_1576) 
    $flowthrough 
    // 			rwbar_1553_delayed_5_0 := rwbar $buffering 5 $cut_through // bits of buffering = 5. 
    //  file nic.linked.opt.aa, line 519
    # := [W_rwbar_1553_delayed_5_0_1577_inst] (rwbar_1529) (rwbar_1553_delayed_5_0_1579)  $cut_through    $fullrate
    $buffering  $out W_rwbar_1553_delayed_5_0_1577_inst rwbar_1553_delayed_5_0_1579 5
    // 			bmask_1554_delayed_5_0 := bmask $buffering 5 $cut_through // bits of buffering = 20. 
    //  file nic.linked.opt.aa, line 520
    # := [W_bmask_1554_delayed_5_0_1580_inst] (bmask_1533) (bmask_1554_delayed_5_0_1582)  $cut_through    $fullrate
    $buffering  $out W_bmask_1554_delayed_5_0_1580_inst bmask_1554_delayed_5_0_1582 5
    // 			wdata_1556_delayed_5_0 := wdata $buffering 5 $cut_through // bits of buffering = 160. 
    //  file nic.linked.opt.aa, line 521
    # := [W_wdata_1556_delayed_5_0_1583_inst] (wdata_1541) (wdata_1556_delayed_5_0_1585)  $cut_through    $fullrate
    $buffering  $out W_wdata_1556_delayed_5_0_1583_inst wdata_1556_delayed_5_0_1585 5
    // 			index_1557_delayed_5_0 := index $buffering 5 $cut_through // bits of buffering = 30. 
    //  file nic.linked.opt.aa, line 522
    # := [W_index_1557_delayed_5_0_1586_inst] (index_1545) (index_1557_delayed_5_0_1588)  $cut_through    $fullrate
    $buffering  $out W_index_1557_delayed_5_0_1586_inst index_1557_delayed_5_0_1588 5
    // 			$guard (~rwbar_1553_delayed_5_0) $call UpdateRegister (bmask_1554_delayed_5_0 rval wdata_1556_delayed_5_0 index_1557_delayed_5_0 ) (wval ) 
    //  file nic.linked.opt.aa, line 523
    $call [call_stmt_1595_call] $module UpdateRegister(bmask_1554_delayed_5_0_1582 rval_1576 wdata_1556_delayed_5_0_1585 index_1557_delayed_5_0_1588) (wval_1595) $guard ( ~ rwbar_1553_delayed_5_0_1579 )   $fullrate
    $delay call_stmt_1595_call 4
    $buffering  $in call_stmt_1595_call bmask_1554_delayed_5_0_1582 1
    $buffering  $in call_stmt_1595_call rval_1576 1
    $buffering  $in call_stmt_1595_call wdata_1556_delayed_5_0_1585 1
    $buffering  $in call_stmt_1595_call index_1557_delayed_5_0_1588 1
    $buffering  $out call_stmt_1595_call wval_1595 1
    // 			rwbar_1561_delayed_5_0 := rwbar $buffering 5 $cut_through // bits of buffering = 5. 
    //  file nic.linked.opt.aa, line 524
    # := [W_rwbar_1561_delayed_5_0_1596_inst] (rwbar_1529) (rwbar_1561_delayed_5_0_1598)  $cut_through    $fullrate
    $buffering  $out W_rwbar_1561_delayed_5_0_1596_inst rwbar_1561_delayed_5_0_1598 5
    // 			$volatile rdata := ( $mux rwbar_1561_delayed_5_0 rval  ($bitcast ($uint<32>) _b0  ) )  $buffering 1
    //  file nic.linked.opt.aa, line 525
    // ( $mux rwbar_1561_delayed_5_0 rval  ($bitcast ($uint<32>) _b0  ) ) 
    ? [MUX_1604_inst] (rwbar_1561_delayed_5_0_1598 rval_1576 type_cast_1603_wire_constant) (rdata_1605)  $flowthrough
    // 			$volatile resp := (($bitcast ($uint<1>) _b0  ) && rdata) $buffering 1
    //  file nic.linked.opt.aa, line 526
    // (($bitcast ($uint<1>) _b0  ) && rdata)
    &&[CONCAT_u1_u33_1610_inst] (type_cast_1608_wire_constant rdata_1605) (resp_1611)   $flowthrough 
    $delay CONCAT_u1_u33_1610_inst 0
    // 			AFB_NIC_RESPONSE := resp $buffering 1// bits of buffering = 33. 
    //  file nic.linked.opt.aa, line 527
    // AFB_NIC_RESPONSE
    $ioport $out [WPIPE_AFB_NIC_RESPONSE_1612_inst]  (resp_1611) (AFB_NIC_RESPONSE)  $fullrate 
  }
  // end data-path
  // CP-DP links for do-while  do_while_stmt_1440
  //  file nic.linked.opt.aa, line 485
  phi_stmt_1442 <=> (branch_block_stmt_1439/do_while_stmt_1440/do_while_stmt_1440_loop_body/phi_stmt_1442_entry_sample_req branch_block_stmt_1439/do_while_stmt_1440/do_while_stmt_1440_loop_body/phi_stmt_1442_loopback_sample_req) (branch_block_stmt_1439/do_while_stmt_1440/do_while_stmt_1440_loop_body/phi_stmt_1442_phi_mux_ack)
  phi_stmt_1448 <=> (branch_block_stmt_1439/do_while_stmt_1440/do_while_stmt_1440_loop_body/phi_stmt_1448_entry_sample_req branch_block_stmt_1439/do_while_stmt_1440/do_while_stmt_1440_loop_body/phi_stmt_1448_loopback_sample_req) (branch_block_stmt_1439/do_while_stmt_1440/do_while_stmt_1440_loop_body/phi_stmt_1448_phi_mux_ack)
  check_control_regsiter_1554_1452_buf <=> (branch_block_stmt_1439/do_while_stmt_1440/do_while_stmt_1440_loop_body/R_check_control_regsiter_1452_Sample/req branch_block_stmt_1439/do_while_stmt_1440/do_while_stmt_1440_loop_body/R_check_control_regsiter_1452_Update/req) (branch_block_stmt_1439/do_while_stmt_1440/do_while_stmt_1440_loop_body/R_check_control_regsiter_1452_Sample/ack branch_block_stmt_1439/do_while_stmt_1440/do_while_stmt_1440_loop_body/R_check_control_regsiter_1452_Update/ack)
  phi_stmt_1453 <=> (branch_block_stmt_1439/do_while_stmt_1440/do_while_stmt_1440_loop_body/phi_stmt_1453_entry_sample_req branch_block_stmt_1439/do_while_stmt_1440/do_while_stmt_1440_loop_body/phi_stmt_1453_loopback_sample_req) (branch_block_stmt_1439/do_while_stmt_1440/do_while_stmt_1440_loop_body/phi_stmt_1453_phi_mux_ack)
  check_free_q_1563_1457_buf <=> (branch_block_stmt_1439/do_while_stmt_1440/do_while_stmt_1440_loop_body/R_check_free_q_1457_Sample/req branch_block_stmt_1439/do_while_stmt_1440/do_while_stmt_1440_loop_body/R_check_free_q_1457_Update/req) (branch_block_stmt_1439/do_while_stmt_1440/do_while_stmt_1440_loop_body/R_check_free_q_1457_Sample/ack branch_block_stmt_1439/do_while_stmt_1440/do_while_stmt_1440_loop_body/R_check_free_q_1457_Update/ack)
  phi_stmt_1458 <=> (branch_block_stmt_1439/do_while_stmt_1440/do_while_stmt_1440_loop_body/phi_stmt_1458_entry_sample_req branch_block_stmt_1439/do_while_stmt_1440/do_while_stmt_1440_loop_body/phi_stmt_1458_loopback_sample_req) (branch_block_stmt_1439/do_while_stmt_1440/do_while_stmt_1440_loop_body/phi_stmt_1458_phi_mux_ack)
  check_num_server_1572_1462_buf <=> (branch_block_stmt_1439/do_while_stmt_1440/do_while_stmt_1440_loop_body/R_check_num_server_1462_Sample/req branch_block_stmt_1439/do_while_stmt_1440/do_while_stmt_1440_loop_body/R_check_num_server_1462_Update/req) (branch_block_stmt_1439/do_while_stmt_1440/do_while_stmt_1440_loop_body/R_check_num_server_1462_Sample/ack branch_block_stmt_1439/do_while_stmt_1440/do_while_stmt_1440_loop_body/R_check_num_server_1462_Update/ack)
  // 			control_data := nic_registers[0 ] $buffering 1// bits of buffering = 32. 
  //  file nic.linked.opt.aa, line 498
  // nic_registers[0 ]
  array_obj_ref_1467_gather_scatter <=> (branch_block_stmt_1439/do_while_stmt_1440/do_while_stmt_1440_loop_body/array_obj_ref_1467_Update/array_obj_ref_1467_Merge/merge_req) (branch_block_stmt_1439/do_while_stmt_1440/do_while_stmt_1440_loop_body/array_obj_ref_1467_Update/array_obj_ref_1467_Merge/merge_ack)
  array_obj_ref_1467_load_0 <=> (branch_block_stmt_1439/do_while_stmt_1440/do_while_stmt_1440_loop_body/array_obj_ref_1467_Sample/word_access_start/word_0/rr branch_block_stmt_1439/do_while_stmt_1440/do_while_stmt_1440_loop_body/array_obj_ref_1467_Update/word_access_complete/word_0/cr) (branch_block_stmt_1439/do_while_stmt_1440/do_while_stmt_1440_loop_body/array_obj_ref_1467_Sample/word_access_start/word_0/ra branch_block_stmt_1439/do_while_stmt_1440/do_while_stmt_1440_loop_body/array_obj_ref_1467_Update/word_access_complete/word_0/ca)
  // 			$volatile update_control_register_pipe := (( ~ INIT ) | (INIT & control_register)) $buffering 1
  //  file nic.linked.opt.aa, line 500
  // (( ~ INIT ) | (INIT & control_register))
  // INIT
  // (INIT & control_register)
  // INIT
  // control_register
  // 			$volatile update_free_q_pipe := (( ~ INIT ) | (INIT & free_q)) $buffering 1
  //  file nic.linked.opt.aa, line 501
  // (( ~ INIT ) | (INIT & free_q))
  // INIT
  // (INIT & free_q)
  // INIT
  // free_q
  // 			$volatile update_server_num := (( ~ INIT ) | (INIT & num_server)) $buffering 1
  //  file nic.linked.opt.aa, line 502
  // (( ~ INIT ) | (INIT & num_server))
  // INIT
  // (INIT & num_server)
  // INIT
  // num_server
  // 			$guard (update_control_register_pipe) CONTROL_REGISTER := nic_registers[0 ] $buffering 1// bits of buffering = 32. 
  //  file nic.linked.opt.aa, line 503
  // nic_registers[0 ]
  array_obj_ref_1498_gather_scatter <=> (branch_block_stmt_1439/do_while_stmt_1440/do_while_stmt_1440_loop_body/array_obj_ref_1498_Update/array_obj_ref_1498_Merge/merge_req) (branch_block_stmt_1439/do_while_stmt_1440/do_while_stmt_1440_loop_body/array_obj_ref_1498_Update/array_obj_ref_1498_Merge/merge_ack)
  array_obj_ref_1498_load_0 <=> (branch_block_stmt_1439/do_while_stmt_1440/do_while_stmt_1440_loop_body/array_obj_ref_1498_Sample/word_access_start/word_0/rr branch_block_stmt_1439/do_while_stmt_1440/do_while_stmt_1440_loop_body/array_obj_ref_1498_Update/word_access_complete/word_0/cr) (branch_block_stmt_1439/do_while_stmt_1440/do_while_stmt_1440_loop_body/array_obj_ref_1498_Sample/word_access_start/word_0/ra branch_block_stmt_1439/do_while_stmt_1440/do_while_stmt_1440_loop_body/array_obj_ref_1498_Update/word_access_complete/word_0/ca)
  // CONTROL_REGISTER
  WPIPE_CONTROL_REGISTER_1496_inst <=> (branch_block_stmt_1439/do_while_stmt_1440/do_while_stmt_1440_loop_body/WPIPE_CONTROL_REGISTER_1496_Sample/req branch_block_stmt_1439/do_while_stmt_1440/do_while_stmt_1440_loop_body/WPIPE_CONTROL_REGISTER_1496_Update/req) (branch_block_stmt_1439/do_while_stmt_1440/do_while_stmt_1440_loop_body/WPIPE_CONTROL_REGISTER_1496_Sample/ack branch_block_stmt_1439/do_while_stmt_1440/do_while_stmt_1440_loop_body/WPIPE_CONTROL_REGISTER_1496_Update/ack)
  // 			$guard (update_free_q_pipe) FREE_Q_32 := nic_registers[18 ] $buffering 1// bits of buffering = 32. 
  //  file nic.linked.opt.aa, line 504
  // nic_registers[18 ]
  array_obj_ref_1503_gather_scatter <=> (branch_block_stmt_1439/do_while_stmt_1440/do_while_stmt_1440_loop_body/array_obj_ref_1503_Update/array_obj_ref_1503_Merge/merge_req) (branch_block_stmt_1439/do_while_stmt_1440/do_while_stmt_1440_loop_body/array_obj_ref_1503_Update/array_obj_ref_1503_Merge/merge_ack)
  array_obj_ref_1503_load_0 <=> (branch_block_stmt_1439/do_while_stmt_1440/do_while_stmt_1440_loop_body/array_obj_ref_1503_Sample/word_access_start/word_0/rr branch_block_stmt_1439/do_while_stmt_1440/do_while_stmt_1440_loop_body/array_obj_ref_1503_Update/word_access_complete/word_0/cr) (branch_block_stmt_1439/do_while_stmt_1440/do_while_stmt_1440_loop_body/array_obj_ref_1503_Sample/word_access_start/word_0/ra branch_block_stmt_1439/do_while_stmt_1440/do_while_stmt_1440_loop_body/array_obj_ref_1503_Update/word_access_complete/word_0/ca)
  // 			update_free_q_pipe_1480_delayed_5_0 := update_free_q_pipe $buffering 5 $cut_through // bits of buffering = 5. 
  //  file nic.linked.opt.aa, line 505
  // update_free_q_pipe
  W_update_free_q_pipe_1480_delayed_5_0_1505_inst <=> (branch_block_stmt_1439/do_while_stmt_1440/do_while_stmt_1440_loop_body/assign_stmt_1507_Sample/req branch_block_stmt_1439/do_while_stmt_1440/do_while_stmt_1440_loop_body/assign_stmt_1507_Update/req) (branch_block_stmt_1439/do_while_stmt_1440/do_while_stmt_1440_loop_body/assign_stmt_1507_Sample/ack branch_block_stmt_1439/do_while_stmt_1440/do_while_stmt_1440_loop_body/assign_stmt_1507_Update/ack)
  // 			$guard (update_free_q_pipe_1480_delayed_5_0) FREE_Q := ($bitcast ($uint<36>) (FREE_Q_32 && ($bitcast ($uint<3>) _b0  )) ) $buffering 1// bits of buffering = 36. 
  //  file nic.linked.opt.aa, line 506
  // (FREE_Q_32 && ($bitcast ($uint<3>) _b0  ))
  // FREE_Q_32
  // ($bitcast ($uint<36>) (FREE_Q_32 && ($bitcast ($uint<3>) _b0  )) )
  type_cast_1514_inst <=> (branch_block_stmt_1439/do_while_stmt_1440/do_while_stmt_1440_loop_body/type_cast_1514_Sample/rr branch_block_stmt_1439/do_while_stmt_1440/do_while_stmt_1440_loop_body/type_cast_1514_Update/cr) (branch_block_stmt_1439/do_while_stmt_1440/do_while_stmt_1440_loop_body/type_cast_1514_Sample/ra branch_block_stmt_1439/do_while_stmt_1440/do_while_stmt_1440_loop_body/type_cast_1514_Update/ca)
  // FREE_Q
  WPIPE_FREE_Q_1509_inst <=> (branch_block_stmt_1439/do_while_stmt_1440/do_while_stmt_1440_loop_body/WPIPE_FREE_Q_1509_Sample/req branch_block_stmt_1439/do_while_stmt_1440/do_while_stmt_1440_loop_body/WPIPE_FREE_Q_1509_Update/req) (branch_block_stmt_1439/do_while_stmt_1440/do_while_stmt_1440_loop_body/WPIPE_FREE_Q_1509_Sample/ack branch_block_stmt_1439/do_while_stmt_1440/do_while_stmt_1440_loop_body/WPIPE_FREE_Q_1509_Update/ack)
  // 			$guard (update_server_num) NUMBER_OF_SERVERS := nic_registers[1 ] $buffering 1// bits of buffering = 32. 
  //  file nic.linked.opt.aa, line 507
  // nic_registers[1 ]
  array_obj_ref_1519_gather_scatter <=> (branch_block_stmt_1439/do_while_stmt_1440/do_while_stmt_1440_loop_body/array_obj_ref_1519_Update/array_obj_ref_1519_Merge/merge_req) (branch_block_stmt_1439/do_while_stmt_1440/do_while_stmt_1440_loop_body/array_obj_ref_1519_Update/array_obj_ref_1519_Merge/merge_ack)
  array_obj_ref_1519_load_0 <=> (branch_block_stmt_1439/do_while_stmt_1440/do_while_stmt_1440_loop_body/array_obj_ref_1519_Sample/word_access_start/word_0/rr branch_block_stmt_1439/do_while_stmt_1440/do_while_stmt_1440_loop_body/array_obj_ref_1519_Update/word_access_complete/word_0/cr) (branch_block_stmt_1439/do_while_stmt_1440/do_while_stmt_1440_loop_body/array_obj_ref_1519_Sample/word_access_start/word_0/ra branch_block_stmt_1439/do_while_stmt_1440/do_while_stmt_1440_loop_body/array_obj_ref_1519_Update/word_access_complete/word_0/ca)
  // NUMBER_OF_SERVERS
  WPIPE_NUMBER_OF_SERVERS_1517_inst <=> (branch_block_stmt_1439/do_while_stmt_1440/do_while_stmt_1440_loop_body/WPIPE_NUMBER_OF_SERVERS_1517_Sample/req branch_block_stmt_1439/do_while_stmt_1440/do_while_stmt_1440_loop_body/WPIPE_NUMBER_OF_SERVERS_1517_Update/req) (branch_block_stmt_1439/do_while_stmt_1440/do_while_stmt_1440_loop_body/WPIPE_NUMBER_OF_SERVERS_1517_Sample/ack branch_block_stmt_1439/do_while_stmt_1440/do_while_stmt_1440_loop_body/WPIPE_NUMBER_OF_SERVERS_1517_Update/ack)
  // 			req := AFB_NIC_REQUEST $buffering 2// bits of buffering = 148. 
  //  file nic.linked.opt.aa, line 508
  // AFB_NIC_REQUEST
  RPIPE_AFB_NIC_REQUEST_1522_inst <=> (branch_block_stmt_1439/do_while_stmt_1440/do_while_stmt_1440_loop_body/RPIPE_AFB_NIC_REQUEST_1522_Sample/rr branch_block_stmt_1439/do_while_stmt_1440/do_while_stmt_1440_loop_body/RPIPE_AFB_NIC_REQUEST_1522_Update/cr) (branch_block_stmt_1439/do_while_stmt_1440/do_while_stmt_1440_loop_body/RPIPE_AFB_NIC_REQUEST_1522_Sample/ra branch_block_stmt_1439/do_while_stmt_1440/do_while_stmt_1440_loop_body/RPIPE_AFB_NIC_REQUEST_1522_Update/ca)
  // 			$volatile rwbar := ( $slice req 72 72 )  $buffering 1
  //  file nic.linked.opt.aa, line 510
  // req
  // 			$volatile bmask := ( $slice req 71 68 )  $buffering 1
  //  file nic.linked.opt.aa, line 511
  // req
  // 			$volatile addr := ( $slice req 67 32 )  $buffering 1
  //  file nic.linked.opt.aa, line 512
  // req
  // 			$volatile wdata := ( $slice req 31 0 )  $buffering 1
  //  file nic.linked.opt.aa, line 513
  // req
  // 			$volatile index := ( $slice addr 7 2 )  $buffering 1
  //  file nic.linked.opt.aa, line 514
  // addr
  // 			$volatile check_control_regsiter := ((index == 0 ) & (rwbar == 0 )) $buffering 1
  //  file nic.linked.opt.aa, line 515
  // ((index == 0 ) & (rwbar == 0 ))
  // (index == 0 )
  // index
  // (rwbar == 0 )
  // rwbar
  // 			$volatile check_free_q := ((index == 18 ) & (rwbar == 0 )) $buffering 1
  //  file nic.linked.opt.aa, line 516
  // ((index == 18 ) & (rwbar == 0 ))
  // (index == 18 )
  // index
  // (rwbar == 0 )
  // rwbar
  // 			$volatile check_num_server := ((index == 1 ) & (rwbar == 0 )) $buffering 1
  //  file nic.linked.opt.aa, line 517
  // ((index == 1 ) & (rwbar == 0 ))
  // (index == 1 )
  // index
  // (rwbar == 0 )
  // rwbar
  // 			rval := nic_registers[index] $buffering 1// bits of buffering = 32. 
  //  file nic.linked.opt.aa, line 518
  // nic_registers[index]
  // index
  array_obj_ref_1575_index_0_resize <=> (branch_block_stmt_1439/do_while_stmt_1440/do_while_stmt_1440_loop_body/array_obj_ref_1575_index_resize_0/index_resize_req) (branch_block_stmt_1439/do_while_stmt_1440/do_while_stmt_1440_loop_body/array_obj_ref_1575_index_resize_0/index_resize_ack)
  array_obj_ref_1575_index_0_rename <=> (branch_block_stmt_1439/do_while_stmt_1440/do_while_stmt_1440_loop_body/array_obj_ref_1575_index_scale_0/scale_rename_req) (branch_block_stmt_1439/do_while_stmt_1440/do_while_stmt_1440_loop_body/array_obj_ref_1575_index_scale_0/scale_rename_ack)
  array_obj_ref_1575_index_offset <=> (branch_block_stmt_1439/do_while_stmt_1440/do_while_stmt_1440_loop_body/array_obj_ref_1575_final_index_sum_regn/req) (branch_block_stmt_1439/do_while_stmt_1440/do_while_stmt_1440_loop_body/array_obj_ref_1575_final_index_sum_regn/ack)
  array_obj_ref_1575_root_address_inst <=> (branch_block_stmt_1439/do_while_stmt_1440/do_while_stmt_1440_loop_body/array_obj_ref_1575_base_plus_offset/sum_rename_req) (branch_block_stmt_1439/do_while_stmt_1440/do_while_stmt_1440_loop_body/array_obj_ref_1575_base_plus_offset/sum_rename_ack)
  array_obj_ref_1575_addr_0 <=> (branch_block_stmt_1439/do_while_stmt_1440/do_while_stmt_1440_loop_body/array_obj_ref_1575_word_addrgen/root_register_req) (branch_block_stmt_1439/do_while_stmt_1440/do_while_stmt_1440_loop_body/array_obj_ref_1575_word_addrgen/root_register_ack)
  array_obj_ref_1575_gather_scatter <=> (branch_block_stmt_1439/do_while_stmt_1440/do_while_stmt_1440_loop_body/array_obj_ref_1575_Update/array_obj_ref_1575_Merge/merge_req) (branch_block_stmt_1439/do_while_stmt_1440/do_while_stmt_1440_loop_body/array_obj_ref_1575_Update/array_obj_ref_1575_Merge/merge_ack)
  array_obj_ref_1575_load_0 <=> (branch_block_stmt_1439/do_while_stmt_1440/do_while_stmt_1440_loop_body/array_obj_ref_1575_Sample/word_access_start/word_0/rr branch_block_stmt_1439/do_while_stmt_1440/do_while_stmt_1440_loop_body/array_obj_ref_1575_Update/word_access_complete/word_0/cr) (branch_block_stmt_1439/do_while_stmt_1440/do_while_stmt_1440_loop_body/array_obj_ref_1575_Sample/word_access_start/word_0/ra branch_block_stmt_1439/do_while_stmt_1440/do_while_stmt_1440_loop_body/array_obj_ref_1575_Update/word_access_complete/word_0/ca)
  // 			rwbar_1553_delayed_5_0 := rwbar $buffering 5 $cut_through // bits of buffering = 5. 
  //  file nic.linked.opt.aa, line 519
  // rwbar
  W_rwbar_1553_delayed_5_0_1577_inst <=> (branch_block_stmt_1439/do_while_stmt_1440/do_while_stmt_1440_loop_body/assign_stmt_1579_Sample/req branch_block_stmt_1439/do_while_stmt_1440/do_while_stmt_1440_loop_body/assign_stmt_1579_Update/req) (branch_block_stmt_1439/do_while_stmt_1440/do_while_stmt_1440_loop_body/assign_stmt_1579_Sample/ack branch_block_stmt_1439/do_while_stmt_1440/do_while_stmt_1440_loop_body/assign_stmt_1579_Update/ack)
  // 			bmask_1554_delayed_5_0 := bmask $buffering 5 $cut_through // bits of buffering = 20. 
  //  file nic.linked.opt.aa, line 520
  // bmask
  W_bmask_1554_delayed_5_0_1580_inst <=> (branch_block_stmt_1439/do_while_stmt_1440/do_while_stmt_1440_loop_body/assign_stmt_1582_Sample/req branch_block_stmt_1439/do_while_stmt_1440/do_while_stmt_1440_loop_body/assign_stmt_1582_Update/req) (branch_block_stmt_1439/do_while_stmt_1440/do_while_stmt_1440_loop_body/assign_stmt_1582_Sample/ack branch_block_stmt_1439/do_while_stmt_1440/do_while_stmt_1440_loop_body/assign_stmt_1582_Update/ack)
  // 			wdata_1556_delayed_5_0 := wdata $buffering 5 $cut_through // bits of buffering = 160. 
  //  file nic.linked.opt.aa, line 521
  // wdata
  W_wdata_1556_delayed_5_0_1583_inst <=> (branch_block_stmt_1439/do_while_stmt_1440/do_while_stmt_1440_loop_body/assign_stmt_1585_Sample/req branch_block_stmt_1439/do_while_stmt_1440/do_while_stmt_1440_loop_body/assign_stmt_1585_Update/req) (branch_block_stmt_1439/do_while_stmt_1440/do_while_stmt_1440_loop_body/assign_stmt_1585_Sample/ack branch_block_stmt_1439/do_while_stmt_1440/do_while_stmt_1440_loop_body/assign_stmt_1585_Update/ack)
  // 			index_1557_delayed_5_0 := index $buffering 5 $cut_through // bits of buffering = 30. 
  //  file nic.linked.opt.aa, line 522
  // index
  W_index_1557_delayed_5_0_1586_inst <=> (branch_block_stmt_1439/do_while_stmt_1440/do_while_stmt_1440_loop_body/assign_stmt_1588_Sample/req branch_block_stmt_1439/do_while_stmt_1440/do_while_stmt_1440_loop_body/assign_stmt_1588_Update/req) (branch_block_stmt_1439/do_while_stmt_1440/do_while_stmt_1440_loop_body/assign_stmt_1588_Sample/ack branch_block_stmt_1439/do_while_stmt_1440/do_while_stmt_1440_loop_body/assign_stmt_1588_Update/ack)
  // 			$guard (~rwbar_1553_delayed_5_0) $call UpdateRegister (bmask_1554_delayed_5_0 rval wdata_1556_delayed_5_0 index_1557_delayed_5_0 ) (wval ) 
  //  file nic.linked.opt.aa, line 523
  // bmask_1554_delayed_5_0
  // rval
  // wdata_1556_delayed_5_0
  // index_1557_delayed_5_0
  call_stmt_1595_call <=> (branch_block_stmt_1439/do_while_stmt_1440/do_while_stmt_1440_loop_body/call_stmt_1595_Sample/crr branch_block_stmt_1439/do_while_stmt_1440/do_while_stmt_1440_loop_body/call_stmt_1595_Update/ccr) (branch_block_stmt_1439/do_while_stmt_1440/do_while_stmt_1440_loop_body/call_stmt_1595_Sample/cra branch_block_stmt_1439/do_while_stmt_1440/do_while_stmt_1440_loop_body/call_stmt_1595_Update/cca)
  // 			rwbar_1561_delayed_5_0 := rwbar $buffering 5 $cut_through // bits of buffering = 5. 
  //  file nic.linked.opt.aa, line 524
  // rwbar
  W_rwbar_1561_delayed_5_0_1596_inst <=> (branch_block_stmt_1439/do_while_stmt_1440/do_while_stmt_1440_loop_body/assign_stmt_1598_Sample/req branch_block_stmt_1439/do_while_stmt_1440/do_while_stmt_1440_loop_body/assign_stmt_1598_Update/req) (branch_block_stmt_1439/do_while_stmt_1440/do_while_stmt_1440_loop_body/assign_stmt_1598_Sample/ack branch_block_stmt_1439/do_while_stmt_1440/do_while_stmt_1440_loop_body/assign_stmt_1598_Update/ack)
  // 			$volatile rdata := ( $mux rwbar_1561_delayed_5_0 rval  ($bitcast ($uint<32>) _b0  ) )  $buffering 1
  //  file nic.linked.opt.aa, line 525
  // rwbar_1561_delayed_5_0
  // rval
  // ( $mux rwbar_1561_delayed_5_0 rval  ($bitcast ($uint<32>) _b0  ) ) 
  // 			$volatile resp := (($bitcast ($uint<1>) _b0  ) && rdata) $buffering 1
  //  file nic.linked.opt.aa, line 526
  // (($bitcast ($uint<1>) _b0  ) && rdata)
  // rdata
  // 			AFB_NIC_RESPONSE := resp $buffering 1// bits of buffering = 33. 
  //  file nic.linked.opt.aa, line 527
  // resp
  // AFB_NIC_RESPONSE
  WPIPE_AFB_NIC_RESPONSE_1612_inst <=> (branch_block_stmt_1439/do_while_stmt_1440/do_while_stmt_1440_loop_body/WPIPE_AFB_NIC_RESPONSE_1612_Sample/req branch_block_stmt_1439/do_while_stmt_1440/do_while_stmt_1440_loop_body/WPIPE_AFB_NIC_RESPONSE_1612_Update/req) (branch_block_stmt_1439/do_while_stmt_1440/do_while_stmt_1440_loop_body/WPIPE_AFB_NIC_RESPONSE_1612_Sample/ack branch_block_stmt_1439/do_while_stmt_1440/do_while_stmt_1440_loop_body/WPIPE_AFB_NIC_RESPONSE_1612_Update/ack)
  do_while_stmt_1440_branch <=> (branch_block_stmt_1439/do_while_stmt_1440/do_while_stmt_1440_loop_body/condition_evaluated) (branch_block_stmt_1439/do_while_stmt_1440/loop_exit/ack branch_block_stmt_1439/do_while_stmt_1440/loop_taken/ack)
}
$pipeline $depth 7 $buffering 1 $module [getTxPacketPointerFromServer] 
{
  $in queue_index:$int<6>
  // can point into 
  $out pkt_pointer:$int<32>
  // can point into 
  status:$int<1>
  // can point into 
  // pipe-declarations for block %getTxPacketPointerFromServer
  //  file nic.linked.opt.aa, line 531
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    // pipelined module
    :|:[assign_stmt_1628_to_stmt_1655] 
    {
      $T [queue_index_update_enable] 
      $T [queue_index_update_enable_out] 
      queue_index_update_enable &-> (queue_index_update_enable_out)
      $null &-> (queue_index_update_enable)
      $T [pkt_pointer_update_enable] 
      $T [pkt_pointer_update_enable_in] 
      $null &-> (pkt_pointer_update_enable)
      $null <-& (pkt_pointer_update_enable_in) 
      $null &-> (pkt_pointer_update_enable)
      pkt_pointer_update_enable <-& (pkt_pointer_update_enable_in) 
      $T [status_update_enable] 
      $T [status_update_enable_in] 
      $null &-> (status_update_enable)
      $null <-& (status_update_enable_in) 
      $null &-> (status_update_enable)
      status_update_enable <-& (status_update_enable_in) 
      // start: WAR dependencies for register_index
      // done: WAR dependencies for register_index
      // start:  	$volatile register_index := ($bitcast ($uint<6>) (queue_index + TX_QUEUES_REG_START_OFFSET) ) $buffering 1
      //  file nic.linked.opt.aa, line 536
      // volatile! 
      // Source expression
      // ($bitcast ($uint<6>) (queue_index + TX_QUEUES_REG_START_OFFSET) )
      // (queue_index + TX_QUEUES_REG_START_OFFSET)
      // queue_index
      // Target expression
      // (as target) register_index
      // start: WAR dependencies for register_index
      // done: WAR dependencies for register_index
      // end:  	$volatile register_index := ($bitcast ($uint<6>) (queue_index + TX_QUEUES_REG_START_OFFSET) ) $buffering 1
      // start: 	$call AccessRegister (($bitcast ($uint<1>) _b1  ) ( ~ ($bitcast ($uint<4>) _b0  ) ) register_index ($bitcast ($uint<32>) _b0  ) ) (tx_queue_pointer_32 ) 
      //  file nic.linked.opt.aa, line 537
      $T[call_stmt_1638_sample_start_] 
      $T[call_stmt_1638_sample_completed_] 
      $T[call_stmt_1638_update_start_] 
      $T[call_stmt_1638_update_completed_] 
      // Call input argument 0
      // Call input argument 1
      // Call input argument 2
      // register_index
      // Call input argument 3
      // start: Forward dependencies from register_index to transition call_stmt_1638_sample_start_
      call_stmt_1638_sample_start_ <-& ($entry)
      // done: Forward dependencies from register_index to transition call_stmt_1638_sample_start_
      // RAW reenables for register_index
      queue_index_update_enable o<-& (call_stmt_1638_sample_completed_ 0)
      ;;[call_stmt_1638_Sample] 
      {
        $T [crr] $T [cra] 
      }
      ;;[call_stmt_1638_Update] 
      {
        $T [ccr] $T [cca] 
      }
      call_stmt_1638_sample_start_ &-> (call_stmt_1638_Sample)
      call_stmt_1638_sample_completed_ <-& (call_stmt_1638_Sample)
      call_stmt_1638_sample_completed_ &-> ($null)
      call_stmt_1638_update_start_ &-> (call_stmt_1638_Update)
      call_stmt_1638_update_completed_ <-& (call_stmt_1638_Update)
      // Call output argument 0
      // (as target) tx_queue_pointer_32
      // self-release: 
      call_stmt_1638_sample_start_ o<-& (call_stmt_1638_sample_completed_ 1)
      $null &-> (call_stmt_1638_update_start_)
      call_stmt_1638_update_start_ o<-& (call_stmt_1638_update_completed_ 0)
      // start: WAR dependencies for tx_queue_pointer_32
      // done: WAR dependencies for tx_queue_pointer_32
      // end: 	$call AccessRegister (($bitcast ($uint<1>) _b1  ) ( ~ ($bitcast ($uint<4>) _b0  ) ) register_index ($bitcast ($uint<32>) _b0  ) ) (tx_queue_pointer_32 ) 
      // start: WAR dependencies for tx_queue_pointer_36
      // done: WAR dependencies for tx_queue_pointer_36
      // start:  	$volatile tx_queue_pointer_36 := (tx_queue_pointer_32 && ($bitcast ($uint<4>) _b0  )) $buffering 1
      //  file nic.linked.opt.aa, line 538
      // volatile! 
      // Source expression
      // (tx_queue_pointer_32 && ($bitcast ($uint<4>) _b0  ))
      // tx_queue_pointer_32
      // Target expression
      // (as target) tx_queue_pointer_36
      // start: WAR dependencies for tx_queue_pointer_36
      // done: WAR dependencies for tx_queue_pointer_36
      // end:  	$volatile tx_queue_pointer_36 := (tx_queue_pointer_32 && ($bitcast ($uint<4>) _b0  )) $buffering 1
      // start: 	$call popFromQueue (($bitcast ($uint<1>) _b1  ) tx_queue_pointer_36 ) (pkt_pointer status ) 
      //  file nic.linked.opt.aa, line 539
      $T[call_stmt_1650_sample_start_] 
      $T[call_stmt_1650_sample_completed_] 
      $T[call_stmt_1650_update_start_] 
      $T[call_stmt_1650_update_completed_] 
      // Call input argument 0
      // Call input argument 1
      // tx_queue_pointer_36
      // start: Forward dependencies from tx_queue_pointer_36 to transition call_stmt_1650_sample_start_
      call_stmt_1650_sample_start_ <-& (call_stmt_1638_update_completed_)
      // done: Forward dependencies from tx_queue_pointer_36 to transition call_stmt_1650_sample_start_
      // RAW reenables for tx_queue_pointer_36
      call_stmt_1638_update_start_ o<-& (call_stmt_1650_sample_completed_ 0)
      ;;[call_stmt_1650_Sample] 
      {
        $T [crr] $T [cra] 
      }
      ;;[call_stmt_1650_Update] 
      {
        $T [ccr] $T [cca] 
      }
      call_stmt_1650_sample_start_ &-> (call_stmt_1650_Sample)
      call_stmt_1650_sample_completed_ <-& (call_stmt_1650_Sample)
      call_stmt_1650_sample_completed_ &-> ($null)
      call_stmt_1650_update_start_ &-> (call_stmt_1650_Update)
      call_stmt_1650_update_completed_ <-& (call_stmt_1650_Update)
      // Call output argument 0
      // (as target) pkt_pointer
      // pkt_pointer
      // write to interface object
      // pkt_pointer
      // write to interface object
      call_stmt_1650_update_start_ <-& (pkt_pointer_update_enable)
      // Call output argument 1
      // (as target) status
      // status
      // write to interface object
      // status
      // write to interface object
      call_stmt_1650_update_start_ <-& (status_update_enable)
      // self-release: 
      call_stmt_1650_sample_start_ o<-& (call_stmt_1650_sample_completed_ 1)
      $null &-> (call_stmt_1650_update_start_)
      call_stmt_1650_update_start_ o<-& (call_stmt_1650_update_completed_ 0)
      // start: WAR dependencies for pkt_pointer
      // done: WAR dependencies for pkt_pointer
      // start: WAR dependencies for status
      // done: WAR dependencies for status
      // end: 	$call popFromQueue (($bitcast ($uint<1>) _b1  ) tx_queue_pointer_36 ) (pkt_pointer status ) 
      // load-store dependencies..
      // pipe read/write dependencies for pipe MEMORY_TO_NIC_RESPONSE
      // read-dependencies for pipe MEMORY_TO_NIC_RESPONSE
      // write-dependencies for pipe MEMORY_TO_NIC_RESPONSE
      // signal write dependencies for MEMORY_TO_NIC_RESPONSE
      // pipe read/write dependencies for pipe NIC_REQUEST_REGISTER_ACCESS_PIPE
      // read-dependencies for pipe NIC_REQUEST_REGISTER_ACCESS_PIPE
      // write-dependencies for pipe NIC_REQUEST_REGISTER_ACCESS_PIPE
      // signal write dependencies for NIC_REQUEST_REGISTER_ACCESS_PIPE
      // pipe read/write dependencies for pipe NIC_RESPONSE_REGISTER_ACCESS_PIPE
      // read-dependencies for pipe NIC_RESPONSE_REGISTER_ACCESS_PIPE
      // write-dependencies for pipe NIC_RESPONSE_REGISTER_ACCESS_PIPE
      // signal write dependencies for NIC_RESPONSE_REGISTER_ACCESS_PIPE
      // pipe read/write dependencies for pipe NIC_TO_MEMORY_REQUEST
      // read-dependencies for pipe NIC_TO_MEMORY_REQUEST
      // write-dependencies for pipe NIC_TO_MEMORY_REQUEST
      // signal write dependencies for NIC_TO_MEMORY_REQUEST
    }
    ( pkt_pointer_update_enable_in status_update_enable_in)
    ( queue_index_update_enable_out)
    $P [queue_index_update_enable] 
    $P [pkt_pointer_update_enable] 
    $P [status_update_enable] 
    $bind queue_index_update_enable <= assign_stmt_1628_to_stmt_1655 : queue_index_update_enable_out
    $bind pkt_pointer_update_enable => assign_stmt_1628_to_stmt_1655 : pkt_pointer_update_enable_in
    $bind status_update_enable => assign_stmt_1628_to_stmt_1655 : status_update_enable_in
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %getTxPacketPointerFromServer
    //  file nic.linked.opt.aa, line 531
    // TX_QUEUES_REG_START_OFFSET
    $constant $W[R_TX_QUEUES_REG_START_OFFSET_1625_wire_constant] : $int<6> := _b001010// 10
    // 	$call AccessRegister (($bitcast ($uint<1>) _b1  ) ( ~ ($bitcast ($uint<4>) _b0  ) ) register_index ($bitcast ($uint<32>) _b0  ) ) (tx_queue_pointer_32 ) 
    //  file nic.linked.opt.aa, line 537
    // ($bitcast ($uint<1>) _b1  )
    $constant $W[type_cast_1630_wire_constant] : $int<1> := _b1// 1
    // ( ~ ($bitcast ($uint<4>) _b0  ) )
    $constant $W[NOT_u4_u4_1633_wire_constant] : $int<4> := _b1111// -1
    // ($bitcast ($uint<32>) _b0  )
    $constant $W[type_cast_1636_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // ($bitcast ($uint<4>) _b0  )
    $constant $W[type_cast_1642_wire_constant] : $int<4> := _b0000// 0
    // 	$call popFromQueue (($bitcast ($uint<1>) _b1  ) tx_queue_pointer_36 ) (pkt_pointer status ) 
    //  file nic.linked.opt.aa, line 539
    // ($bitcast ($uint<1>) _b1  )
    $constant $W[type_cast_1646_wire_constant] : $int<1> := _b1// 1
    // 	$volatile register_index := ($bitcast ($uint<6>) (queue_index + TX_QUEUES_REG_START_OFFSET) ) $buffering 1
    //  file nic.linked.opt.aa, line 536
    // (queue_index + TX_QUEUES_REG_START_OFFSET)
    $intermediate $W[ADD_u6_u6_1626_wire] : $int<6>
    // register_index
    $W[register_index_1628] : $int<6>
    // 	$call AccessRegister (($bitcast ($uint<1>) _b1  ) ( ~ ($bitcast ($uint<4>) _b0  ) ) register_index ($bitcast ($uint<32>) _b0  ) ) (tx_queue_pointer_32 ) 
    //  file nic.linked.opt.aa, line 537
    // tx_queue_pointer_32
    $W[tx_queue_pointer_32_1638] : $int<32>
    // 	$volatile tx_queue_pointer_36 := (tx_queue_pointer_32 && ($bitcast ($uint<4>) _b0  )) $buffering 1
    //  file nic.linked.opt.aa, line 538
    // tx_queue_pointer_36
    $W[tx_queue_pointer_36_1644] : $int<36>
    // 	$call popFromQueue (($bitcast ($uint<1>) _b1  ) tx_queue_pointer_36 ) (pkt_pointer status ) 
    //  file nic.linked.opt.aa, line 539
    // pkt_pointer
    // status
    // 	$volatile register_index := ($bitcast ($uint<6>) (queue_index + TX_QUEUES_REG_START_OFFSET) ) $buffering 1
    //  file nic.linked.opt.aa, line 536
    // (queue_index + TX_QUEUES_REG_START_OFFSET)
    +[ADD_u6_u6_1626_inst] (queue_index R_TX_QUEUES_REG_START_OFFSET_1625_wire_constant) (ADD_u6_u6_1626_wire)   $flowthrough 
    $delay ADD_u6_u6_1626_inst 0
    // ($bitcast ($uint<6>) (queue_index + TX_QUEUES_REG_START_OFFSET) )
    # := [type_cast_1627_inst] (ADD_u6_u6_1626_wire) (register_index_1628)   $flowthrough
    $delay type_cast_1627_inst 0
    // 	$call AccessRegister (($bitcast ($uint<1>) _b1  ) ( ~ ($bitcast ($uint<4>) _b0  ) ) register_index ($bitcast ($uint<32>) _b0  ) ) (tx_queue_pointer_32 ) 
    //  file nic.linked.opt.aa, line 537
    $call [call_stmt_1638_call] $module AccessRegister(type_cast_1630_wire_constant NOT_u4_u4_1633_wire_constant register_index_1628 type_cast_1636_wire_constant) (tx_queue_pointer_32_1638)  
    $delay call_stmt_1638_call 4
    $buffering  $in call_stmt_1638_call type_cast_1630_wire_constant 1
    $buffering  $in call_stmt_1638_call NOT_u4_u4_1633_wire_constant 1
    $buffering  $in call_stmt_1638_call register_index_1628 1
    $buffering  $in call_stmt_1638_call type_cast_1636_wire_constant 1
    $buffering  $out call_stmt_1638_call tx_queue_pointer_32_1638 1
    // 	$volatile tx_queue_pointer_36 := (tx_queue_pointer_32 && ($bitcast ($uint<4>) _b0  )) $buffering 1
    //  file nic.linked.opt.aa, line 538
    // (tx_queue_pointer_32 && ($bitcast ($uint<4>) _b0  ))
    &&[CONCAT_u32_u36_1643_inst] (tx_queue_pointer_32_1638 type_cast_1642_wire_constant) (tx_queue_pointer_36_1644)   $flowthrough 
    $delay CONCAT_u32_u36_1643_inst 0
    // 	$call popFromQueue (($bitcast ($uint<1>) _b1  ) tx_queue_pointer_36 ) (pkt_pointer status ) 
    //  file nic.linked.opt.aa, line 539
    $call [call_stmt_1650_call] $module popFromQueue(type_cast_1646_wire_constant tx_queue_pointer_36_1644) (pkt_pointer status)  
    $delay call_stmt_1650_call 4
    $buffering  $in call_stmt_1650_call type_cast_1646_wire_constant 1
    $buffering  $in call_stmt_1650_call tx_queue_pointer_36_1644 1
    $buffering  $out call_stmt_1650_call pkt_pointer 1
    $buffering  $out call_stmt_1650_call status 1
  }
  // end data-path
  // 	$volatile register_index := ($bitcast ($uint<6>) (queue_index + TX_QUEUES_REG_START_OFFSET) ) $buffering 1
  //  file nic.linked.opt.aa, line 536
  // (queue_index + TX_QUEUES_REG_START_OFFSET)
  // queue_index
  // 	$call AccessRegister (($bitcast ($uint<1>) _b1  ) ( ~ ($bitcast ($uint<4>) _b0  ) ) register_index ($bitcast ($uint<32>) _b0  ) ) (tx_queue_pointer_32 ) 
  //  file nic.linked.opt.aa, line 537
  // register_index
  call_stmt_1638_call <=> (assign_stmt_1628_to_stmt_1655/call_stmt_1638_Sample/crr assign_stmt_1628_to_stmt_1655/call_stmt_1638_Update/ccr) (assign_stmt_1628_to_stmt_1655/call_stmt_1638_Sample/cra assign_stmt_1628_to_stmt_1655/call_stmt_1638_Update/cca)
  // 	$volatile tx_queue_pointer_36 := (tx_queue_pointer_32 && ($bitcast ($uint<4>) _b0  )) $buffering 1
  //  file nic.linked.opt.aa, line 538
  // (tx_queue_pointer_32 && ($bitcast ($uint<4>) _b0  ))
  // tx_queue_pointer_32
  // 	$call popFromQueue (($bitcast ($uint<1>) _b1  ) tx_queue_pointer_36 ) (pkt_pointer status ) 
  //  file nic.linked.opt.aa, line 539
  // tx_queue_pointer_36
  call_stmt_1650_call <=> (assign_stmt_1628_to_stmt_1655/call_stmt_1650_Sample/crr assign_stmt_1628_to_stmt_1655/call_stmt_1650_Update/ccr) (assign_stmt_1628_to_stmt_1655/call_stmt_1650_Sample/cra assign_stmt_1628_to_stmt_1655/call_stmt_1650_Update/cca)
  $attribute delay => "10"
}
$module [global_storage_initializer_] 
{
  // pipe-declarations for block %global_storage_initializer_
  //  file nic.linked.opt.aa, line 543
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %global_storage_initializer_
    //  file nic.linked.opt.aa, line 543
  }
  // end data-path
}
$module [macToNicInterface] 
{
  // pipe-declarations for block %macToNicInterface
  //  file nic.linked.opt.aa, line 550
  // pipe-declarations for block %macToNicInterface%loop
  //  file nic.linked.opt.aa, line 555
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    <>[branch_block_stmt_1661] // Branch Block  file nic.linked.opt.aa, line 555
    {
      $P [branch_block_stmt_1661__entry__]
      branch_block_stmt_1661__entry__ <-| ($entry)
      $P [branch_block_stmt_1661__exit__]
      branch_block_stmt_1661__exit__ |-> ($exit)
      $P [do_while_stmt_1662__entry__] 
      $P [do_while_stmt_1662__exit__] 
      // do-while-statement  
      //  file nic.linked.opt.aa, line 557
      <o> [do_while_stmt_1662]  $depth 7 $buffering 1 
      {
        $P[do_while_stmt_1662__entry__] 
        $P[do_while_stmt_1662__exit__] 
        $P[loop_back] 
        $P[condition_done] 
        $P[loop_body_done] 
        $pipeline [do_while_stmt_1662_loop_body] 
        {
          // Pipelined!
          $T[back_edge_to_loop_body] 
          $T[first_time_through_loop_body] 
          $T[loop_body_start] 
          $T[condition_evaluated] 
          $transitionmerge [entry_tmerge] (back_edge_to_loop_body first_time_through_loop_body) (loop_body_start)
          $entry <-& (loop_body_start)
          $T[aggregated_phi_sample_req] 
          $T[aggregated_phi_sample_ack] 
          $T[aggregated_phi_update_req] 
          $T[aggregated_phi_update_ack] 
          // do not loop-back unless all phi's have used up their triggering tokens.
          condition_evaluated <-& (aggregated_phi_update_ack)
          aggregated_phi_sample_req o<-& (aggregated_phi_update_ack 0)
          // start:  single source PHI statement phi_stmt_1664
          // 			$phi rdata0 := 			  mac_to_nic_data_0 $on   $entry ,   $loopback 
          // type of target is $uint<64>
          $T[phi_stmt_1664_sample_start_] 
          $T[phi_stmt_1664_sample_completed_] 
          $T[phi_stmt_1664_update_start_] 
          $T[phi_stmt_1664_update_completed_] 
          aggregated_phi_sample_req <-& (phi_stmt_1664_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_1664_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_1664_update_start_)
          // non-implicit source expression in single-source phi
          // mac_to_nic_data_0
          $T[RPIPE_mac_to_nic_data_0_1666_sample_start_] 
          $T[RPIPE_mac_to_nic_data_0_1666_sample_completed_] 
          $T[RPIPE_mac_to_nic_data_0_1666_update_start_] 
          $T[RPIPE_mac_to_nic_data_0_1666_update_completed_] 
          ;;[RPIPE_mac_to_nic_data_0_1666_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_mac_to_nic_data_0_1666_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_mac_to_nic_data_0_1666_sample_start_ &-> (RPIPE_mac_to_nic_data_0_1666_Sample)
          RPIPE_mac_to_nic_data_0_1666_sample_completed_ <-& (RPIPE_mac_to_nic_data_0_1666_Sample)
          RPIPE_mac_to_nic_data_0_1666_update_start_ <-& (RPIPE_mac_to_nic_data_0_1666_sample_completed_)
          RPIPE_mac_to_nic_data_0_1666_update_start_ &-> (RPIPE_mac_to_nic_data_0_1666_Update)
          RPIPE_mac_to_nic_data_0_1666_update_completed_ <-& (RPIPE_mac_to_nic_data_0_1666_Update)
          RPIPE_mac_to_nic_data_0_1666_sample_start_ o<-& (RPIPE_mac_to_nic_data_0_1666_update_completed_ 0)
          // RAW reenables for mac_to_nic_data_0
          // producer  and  consumer are both determined by PHI statements.
          aggregated_phi_sample_req &-> (RPIPE_mac_to_nic_data_0_1666_sample_start_)
          aggregated_phi_sample_ack <-& (RPIPE_mac_to_nic_data_0_1666_sample_completed_)
          aggregated_phi_update_req &-> (RPIPE_mac_to_nic_data_0_1666_update_start_)
          phi_stmt_1664_update_completed_ <-& (RPIPE_mac_to_nic_data_0_1666_update_completed_)
          aggregated_phi_update_ack <-& (phi_stmt_1664_update_completed_)
          // done: PHI Statement phi_stmt_1664
          // start:  single source PHI statement phi_stmt_1667
          // 			$phi rdata1 := 			  mac_to_nic_data_1 $on   $entry ,   $loopback 
          // type of target is $uint<16>
          $T[phi_stmt_1667_sample_start_] 
          $T[phi_stmt_1667_sample_completed_] 
          $T[phi_stmt_1667_update_start_] 
          $T[phi_stmt_1667_update_completed_] 
          aggregated_phi_sample_req <-& (phi_stmt_1667_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_1667_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_1667_update_start_)
          // non-implicit source expression in single-source phi
          // mac_to_nic_data_1
          $T[RPIPE_mac_to_nic_data_1_1669_sample_start_] 
          $T[RPIPE_mac_to_nic_data_1_1669_sample_completed_] 
          $T[RPIPE_mac_to_nic_data_1_1669_update_start_] 
          $T[RPIPE_mac_to_nic_data_1_1669_update_completed_] 
          ;;[RPIPE_mac_to_nic_data_1_1669_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_mac_to_nic_data_1_1669_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_mac_to_nic_data_1_1669_sample_start_ &-> (RPIPE_mac_to_nic_data_1_1669_Sample)
          RPIPE_mac_to_nic_data_1_1669_sample_completed_ <-& (RPIPE_mac_to_nic_data_1_1669_Sample)
          RPIPE_mac_to_nic_data_1_1669_update_start_ <-& (RPIPE_mac_to_nic_data_1_1669_sample_completed_)
          RPIPE_mac_to_nic_data_1_1669_update_start_ &-> (RPIPE_mac_to_nic_data_1_1669_Update)
          RPIPE_mac_to_nic_data_1_1669_update_completed_ <-& (RPIPE_mac_to_nic_data_1_1669_Update)
          RPIPE_mac_to_nic_data_1_1669_sample_start_ o<-& (RPIPE_mac_to_nic_data_1_1669_update_completed_ 0)
          // RAW reenables for mac_to_nic_data_1
          // producer  and  consumer are both determined by PHI statements.
          aggregated_phi_sample_req &-> (RPIPE_mac_to_nic_data_1_1669_sample_start_)
          aggregated_phi_sample_ack <-& (RPIPE_mac_to_nic_data_1_1669_sample_completed_)
          aggregated_phi_update_req &-> (RPIPE_mac_to_nic_data_1_1669_update_start_)
          phi_stmt_1667_update_completed_ <-& (RPIPE_mac_to_nic_data_1_1669_update_completed_)
          aggregated_phi_update_ack <-& (phi_stmt_1667_update_completed_)
          // done: PHI Statement phi_stmt_1667
          // start:  			mac_to_nic_data := (( $slice rdata1 8 0 )  && rdata0) $buffering 1// bits of buffering = 73. 
          //  file nic.linked.opt.aa, line 566
          // Source expression
          // (( $slice rdata1 8 0 )  && rdata0)
          $T[CONCAT_u9_u73_1679_sample_start_] 
          $T[CONCAT_u9_u73_1679_sample_completed_] 
          $T[CONCAT_u9_u73_1679_update_start_] 
          $T[CONCAT_u9_u73_1679_update_completed_] 
          // ( $slice rdata1 8 0 ) 
          // rdata1
          // rdata0
          // start: Forward dependencies from ( $slice rdata1 8 0 )  to transition CONCAT_u9_u73_1679_sample_start_
          CONCAT_u9_u73_1679_sample_start_ <-& (phi_stmt_1667_update_completed_)
          // done: Forward dependencies from ( $slice rdata1 8 0 )  to transition CONCAT_u9_u73_1679_sample_start_
          // start: Forward dependencies from rdata0 to transition CONCAT_u9_u73_1679_sample_start_
          CONCAT_u9_u73_1679_sample_start_ <-& (phi_stmt_1664_update_completed_)
          // done: Forward dependencies from rdata0 to transition CONCAT_u9_u73_1679_sample_start_
          ;;[CONCAT_u9_u73_1679_Sample] 
          {
            // binary expression 
            $T [rr] $T [ra]  // (split) binary operation 
          }
          ;;[CONCAT_u9_u73_1679_Update] 
          {
            // binary expression 
            $T [cr] $T [ca] // (split) binary operation 
          }
          CONCAT_u9_u73_1679_sample_start_ &-> (CONCAT_u9_u73_1679_Sample)
          CONCAT_u9_u73_1679_sample_completed_ <-& (CONCAT_u9_u73_1679_Sample)
          CONCAT_u9_u73_1679_sample_completed_ &-> ($null)
          CONCAT_u9_u73_1679_update_start_ &-> (CONCAT_u9_u73_1679_Update)
          CONCAT_u9_u73_1679_update_completed_ <-& (CONCAT_u9_u73_1679_Update)
          // RAW reenables for ( $slice rdata1 8 0 ) 
          phi_stmt_1667_update_start_ o<-& (CONCAT_u9_u73_1679_sample_completed_ 0)
          // RAW reenables for rdata0
          phi_stmt_1664_update_start_ o<-& (CONCAT_u9_u73_1679_sample_completed_ 0)
          // self-release: 
          CONCAT_u9_u73_1679_sample_start_ o<-& (CONCAT_u9_u73_1679_sample_completed_ 1)
          $null &-> (CONCAT_u9_u73_1679_update_start_)
          CONCAT_u9_u73_1679_update_start_ o<-& (CONCAT_u9_u73_1679_update_completed_ 0)
          // Target expression
          // (as target) mac_to_nic_data
          $T[WPIPE_mac_to_nic_data_1674_sample_start_] 
          $T[WPIPE_mac_to_nic_data_1674_sample_completed_] 
          $T[WPIPE_mac_to_nic_data_1674_update_start_] 
          $T[WPIPE_mac_to_nic_data_1674_update_completed_] 
          ;;[WPIPE_mac_to_nic_data_1674_Sample] 
          {
            // pipe write sample-start mac_to_nic_data
            $T [req] $T [ack] 
          }
          ;;[WPIPE_mac_to_nic_data_1674_Update] 
          {
            // pipe write update (complete) mac_to_nic_data
            $T [req] $T [ack] 
          }
          WPIPE_mac_to_nic_data_1674_sample_start_ &-> (WPIPE_mac_to_nic_data_1674_Sample)
          WPIPE_mac_to_nic_data_1674_sample_completed_ <-& (WPIPE_mac_to_nic_data_1674_Sample)
          WPIPE_mac_to_nic_data_1674_update_start_ <-& (WPIPE_mac_to_nic_data_1674_sample_completed_)
          WPIPE_mac_to_nic_data_1674_update_start_ &-> (WPIPE_mac_to_nic_data_1674_Update)
          WPIPE_mac_to_nic_data_1674_update_completed_ <-& (WPIPE_mac_to_nic_data_1674_Update)
          WPIPE_mac_to_nic_data_1674_sample_start_ o<-& (WPIPE_mac_to_nic_data_1674_update_completed_ 0)
          // start: Forward dependencies from (( $slice rdata1 8 0 )  && rdata0) to transition WPIPE_mac_to_nic_data_1674_sample_start_
          WPIPE_mac_to_nic_data_1674_sample_start_ <-& (CONCAT_u9_u73_1679_update_completed_)
          // done: Forward dependencies from (( $slice rdata1 8 0 )  && rdata0) to transition WPIPE_mac_to_nic_data_1674_sample_start_
          // RAW reenables for (( $slice rdata1 8 0 )  && rdata0)
          CONCAT_u9_u73_1679_update_start_ o<-& (WPIPE_mac_to_nic_data_1674_sample_completed_ 0)
          // end:  			mac_to_nic_data := (( $slice rdata1 8 0 )  && rdata0) $buffering 1// bits of buffering = 73. 
          $T [loop_body_delay_to_condition_start] $delay
          loop_body_start &-> (loop_body_delay_to_condition_start)
          loop_body_delay_to_condition_start &-> (condition_evaluated)
          condition_evaluated &-> ($null)
          // load-store dependencies..
          // pipe read/write dependencies for pipe mac_to_nic_data
          // read-dependencies for pipe mac_to_nic_data
          // write-dependencies for pipe mac_to_nic_data
          // signal write dependencies for mac_to_nic_data
          // pipe read/write dependencies for pipe mac_to_nic_data_0
          // read-dependencies for pipe mac_to_nic_data_0
          // write-dependencies for pipe mac_to_nic_data_0
          // signal write dependencies for mac_to_nic_data_0
          // pipe read/write dependencies for pipe mac_to_nic_data_1
          // read-dependencies for pipe mac_to_nic_data_1
          // write-dependencies for pipe mac_to_nic_data_1
          // signal write dependencies for mac_to_nic_data_1
        }
        ( first_time_through_loop_body  back_edge_to_loop_body) 
        ( condition_evaluated )
        ;; [loop_exit] 
        {
          $T [ack] 
        }
        ;; [loop_taken] 
        {
          $T [ack] 
        }
        do_while_stmt_1662__entry__ <-| ($entry)
        loop_body_done <-| ( do_while_stmt_1662_loop_body ) 
        condition_done |-> (loop_exit loop_taken)
        do_while_stmt_1662__exit__ |-> ($exit)
        $bind condition_done <= do_while_stmt_1662_loop_body : condition_evaluated
        $bind do_while_stmt_1662__entry__  => do_while_stmt_1662_loop_body : first_time_through_loop_body 
        $bind loop_back  => do_while_stmt_1662_loop_body : back_edge_to_loop_body 
        $terminate (loop_exit loop_taken loop_body_done) (loop_back do_while_stmt_1662__exit__)
      }
      do_while_stmt_1662__entry__ |-> (do_while_stmt_1662)
      do_while_stmt_1662__exit__ <-| (do_while_stmt_1662)
      do_while_stmt_1662__entry__ <-| (branch_block_stmt_1661__entry__)
      do_while_stmt_1662__exit__ |-> (branch_block_stmt_1661__exit__)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %macToNicInterface%loop%
    //  file nic.linked.opt.aa, line 559
    // constant-object-declarations for block %macToNicInterface%loop
    //  file nic.linked.opt.aa, line 555
    // constant-object-declarations for block %macToNicInterface
    //  file nic.linked.opt.aa, line 550
    // constant-declarations for block %macToNicInterface%loop
    //  file nic.linked.opt.aa, line 555
    // do-while statement  
    //  file nic.linked.opt.aa, line 557
    // 1 
    $constant $W[konst_1682_wire_constant] : $int<1> := _b1// 1
    // constant-declarations for block %macToNicInterface%loop%
    //  file nic.linked.opt.aa, line 559
    // constant-declarations for phi:  			$phi rdata0 := 			  mac_to_nic_data_0 $on   $entry ,   $loopback 
    // type of target is $uint<64>
    //  file nic.linked.opt.aa, line 560
    // constant-declarations for phi:  			$phi rdata1 := 			  mac_to_nic_data_1 $on   $entry ,   $loopback 
    // type of target is $uint<16>
    //  file nic.linked.opt.aa, line 562
    // block %macToNicInterface%loop
    //  file nic.linked.opt.aa, line 555
    // do-while statement  
    //  file nic.linked.opt.aa, line 557
    // merge-statement  
    //  file nic.linked.opt.aa, line 559
    // 			$phi rdata0 := 			  mac_to_nic_data_0 $on   $entry ,   $loopback 
    // type of target is $uint<64>
    //  file nic.linked.opt.aa, line 560
    // mac_to_nic_data_0
    $W[RPIPE_mac_to_nic_data_0_1666_wire] : $int<64>
    // rdata0
    $W[rdata0_1664] : $int<64>
    // 			$phi rdata1 := 			  mac_to_nic_data_1 $on   $entry ,   $loopback 
    // type of target is $uint<16>
    //  file nic.linked.opt.aa, line 562
    // mac_to_nic_data_1
    $W[RPIPE_mac_to_nic_data_1_1669_wire] : $int<16>
    // rdata1
    $W[rdata1_1667] : $int<16>
    // 			mac_to_nic_data := (( $slice rdata1 8 0 )  && rdata0) $buffering 1// bits of buffering = 73. 
    //  file nic.linked.opt.aa, line 566
    // ( $slice rdata1 8 0 ) 
    $intermediate $W[slice_1677_wire] : $int<9>
    // (( $slice rdata1 8 0 )  && rdata0)
    $intermediate $W[CONCAT_u9_u73_1679_wire] : $int<73>
    // mac_to_nic_data
    // datapath-instances for block %macToNicInterface%loop
    //  file nic.linked.opt.aa, line 555
    // datapath-instances for do-while  
    //  file nic.linked.opt.aa, line 557
    ==0? [do_while_stmt_1662_branch] (konst_1682_wire_constant)
    $flowthrough
    // data-path instances for merge  
    //  file nic.linked.opt.aa, line 559
    // 			$phi rdata0 := 			  mac_to_nic_data_0 $on   $entry ,   $loopback 
    // type of target is $uint<64>
    //  file nic.linked.opt.aa, line 560
    // mac_to_nic_data_0
    $ioport $in [RPIPE_mac_to_nic_data_0_1666_inst] (mac_to_nic_data_0) (RPIPE_mac_to_nic_data_0_1666_wire)  $fullrate 
    $buffering $out RPIPE_mac_to_nic_data_0_1666_inst RPIPE_mac_to_nic_data_0_1666_wire 1
    # := [ssrc_phi_stmt_1664] (RPIPE_mac_to_nic_data_0_1666_wire) (rdata0_1664)    $flowthrough 
    // 			$phi rdata1 := 			  mac_to_nic_data_1 $on   $entry ,   $loopback 
    // type of target is $uint<16>
    //  file nic.linked.opt.aa, line 562
    // mac_to_nic_data_1
    $ioport $in [RPIPE_mac_to_nic_data_1_1669_inst] (mac_to_nic_data_1) (RPIPE_mac_to_nic_data_1_1669_wire)  $fullrate 
    $buffering $out RPIPE_mac_to_nic_data_1_1669_inst RPIPE_mac_to_nic_data_1_1669_wire 1
    # := [ssrc_phi_stmt_1667] (RPIPE_mac_to_nic_data_1_1669_wire) (rdata1_1667)    $flowthrough 
    // 			mac_to_nic_data := (( $slice rdata1 8 0 )  && rdata0) $buffering 1// bits of buffering = 73. 
    //  file nic.linked.opt.aa, line 566
    // ( $slice rdata1 8 0 ) 
    [:] [slice_1677_inst] (rdata1_1667 8 0) (slice_1677_wire)  $flowthrough
    $delay slice_1677_inst 0
    // (( $slice rdata1 8 0 )  && rdata0)
    &&[CONCAT_u9_u73_1679_inst] (slice_1677_wire rdata0_1664) (CONCAT_u9_u73_1679_wire)    $fullrate
    $buffering  $out CONCAT_u9_u73_1679_inst CONCAT_u9_u73_1679_wire 1
    $delay CONCAT_u9_u73_1679_inst 1
    // mac_to_nic_data
    $ioport $out [WPIPE_mac_to_nic_data_1674_inst]  (CONCAT_u9_u73_1679_wire) (mac_to_nic_data)  $fullrate 
  }
  // end data-path
  // CP-DP links for do-while  do_while_stmt_1662
  //  file nic.linked.opt.aa, line 557
  // mac_to_nic_data_0
  RPIPE_mac_to_nic_data_0_1666_inst <=> (branch_block_stmt_1661/do_while_stmt_1662/do_while_stmt_1662_loop_body/RPIPE_mac_to_nic_data_0_1666_Sample/rr branch_block_stmt_1661/do_while_stmt_1662/do_while_stmt_1662_loop_body/RPIPE_mac_to_nic_data_0_1666_Update/cr) (branch_block_stmt_1661/do_while_stmt_1662/do_while_stmt_1662_loop_body/RPIPE_mac_to_nic_data_0_1666_Sample/ra branch_block_stmt_1661/do_while_stmt_1662/do_while_stmt_1662_loop_body/RPIPE_mac_to_nic_data_0_1666_Update/ca)
  // mac_to_nic_data_1
  RPIPE_mac_to_nic_data_1_1669_inst <=> (branch_block_stmt_1661/do_while_stmt_1662/do_while_stmt_1662_loop_body/RPIPE_mac_to_nic_data_1_1669_Sample/rr branch_block_stmt_1661/do_while_stmt_1662/do_while_stmt_1662_loop_body/RPIPE_mac_to_nic_data_1_1669_Update/cr) (branch_block_stmt_1661/do_while_stmt_1662/do_while_stmt_1662_loop_body/RPIPE_mac_to_nic_data_1_1669_Sample/ra branch_block_stmt_1661/do_while_stmt_1662/do_while_stmt_1662_loop_body/RPIPE_mac_to_nic_data_1_1669_Update/ca)
  // 			mac_to_nic_data := (( $slice rdata1 8 0 )  && rdata0) $buffering 1// bits of buffering = 73. 
  //  file nic.linked.opt.aa, line 566
  // (( $slice rdata1 8 0 )  && rdata0)
  // rdata1
  // rdata0
  CONCAT_u9_u73_1679_inst <=> (branch_block_stmt_1661/do_while_stmt_1662/do_while_stmt_1662_loop_body/CONCAT_u9_u73_1679_Sample/rr branch_block_stmt_1661/do_while_stmt_1662/do_while_stmt_1662_loop_body/CONCAT_u9_u73_1679_Update/cr) (branch_block_stmt_1661/do_while_stmt_1662/do_while_stmt_1662_loop_body/CONCAT_u9_u73_1679_Sample/ra branch_block_stmt_1661/do_while_stmt_1662/do_while_stmt_1662_loop_body/CONCAT_u9_u73_1679_Update/ca)
  // mac_to_nic_data
  WPIPE_mac_to_nic_data_1674_inst <=> (branch_block_stmt_1661/do_while_stmt_1662/do_while_stmt_1662_loop_body/WPIPE_mac_to_nic_data_1674_Sample/req branch_block_stmt_1661/do_while_stmt_1662/do_while_stmt_1662_loop_body/WPIPE_mac_to_nic_data_1674_Update/req) (branch_block_stmt_1661/do_while_stmt_1662/do_while_stmt_1662_loop_body/WPIPE_mac_to_nic_data_1674_Sample/ack branch_block_stmt_1661/do_while_stmt_1662/do_while_stmt_1662_loop_body/WPIPE_mac_to_nic_data_1674_Update/ack)
  do_while_stmt_1662_branch <=> (branch_block_stmt_1661/do_while_stmt_1662/do_while_stmt_1662_loop_body/condition_evaluated) (branch_block_stmt_1661/do_while_stmt_1662/loop_exit/ack branch_block_stmt_1661/do_while_stmt_1662/loop_taken/ack)
}
$module [memoryToNicInterface] 
{
  // pipe-declarations for block %memoryToNicInterface
  //  file nic.linked.opt.aa, line 570
  // pipe-declarations for block %memoryToNicInterface%loop
  //  file nic.linked.opt.aa, line 575
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    <>[branch_block_stmt_1686] // Branch Block  file nic.linked.opt.aa, line 575
    {
      $P [branch_block_stmt_1686__entry__]
      branch_block_stmt_1686__entry__ <-| ($entry)
      $P [branch_block_stmt_1686__exit__]
      branch_block_stmt_1686__exit__ |-> ($exit)
      $P [do_while_stmt_1687__entry__] 
      $P [do_while_stmt_1687__exit__] 
      // do-while-statement  
      //  file nic.linked.opt.aa, line 577
      <o> [do_while_stmt_1687]  $depth 7 $buffering 1 
      {
        $P[do_while_stmt_1687__entry__] 
        $P[do_while_stmt_1687__exit__] 
        $P[loop_back] 
        $P[condition_done] 
        $P[loop_body_done] 
        $pipeline [do_while_stmt_1687_loop_body] 
        {
          // Pipelined!
          $T[back_edge_to_loop_body] 
          $T[first_time_through_loop_body] 
          $T[loop_body_start] 
          $T[condition_evaluated] 
          $transitionmerge [entry_tmerge] (back_edge_to_loop_body first_time_through_loop_body) (loop_body_start)
          $entry <-& (loop_body_start)
          $T[aggregated_phi_sample_req] 
          $T[aggregated_phi_sample_ack] 
          $T[aggregated_phi_update_req] 
          $T[aggregated_phi_update_ack] 
          // do not loop-back unless all phi's have used up their triggering tokens.
          condition_evaluated <-& (aggregated_phi_update_ack)
          aggregated_phi_sample_req o<-& (aggregated_phi_update_ack 0)
          // start:  single source PHI statement phi_stmt_1689
          // 			$phi rdata0 := 			  mem_resp1_pipe0 $on   $entry ,   $loopback 
          // type of target is $uint<64>
          $T[phi_stmt_1689_sample_start_] 
          $T[phi_stmt_1689_sample_completed_] 
          $T[phi_stmt_1689_update_start_] 
          $T[phi_stmt_1689_update_completed_] 
          aggregated_phi_sample_req <-& (phi_stmt_1689_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_1689_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_1689_update_start_)
          // non-implicit source expression in single-source phi
          // mem_resp1_pipe0
          $T[RPIPE_mem_resp1_pipe0_1691_sample_start_] 
          $T[RPIPE_mem_resp1_pipe0_1691_sample_completed_] 
          $T[RPIPE_mem_resp1_pipe0_1691_update_start_] 
          $T[RPIPE_mem_resp1_pipe0_1691_update_completed_] 
          ;;[RPIPE_mem_resp1_pipe0_1691_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_mem_resp1_pipe0_1691_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_mem_resp1_pipe0_1691_sample_start_ &-> (RPIPE_mem_resp1_pipe0_1691_Sample)
          RPIPE_mem_resp1_pipe0_1691_sample_completed_ <-& (RPIPE_mem_resp1_pipe0_1691_Sample)
          RPIPE_mem_resp1_pipe0_1691_update_start_ <-& (RPIPE_mem_resp1_pipe0_1691_sample_completed_)
          RPIPE_mem_resp1_pipe0_1691_update_start_ &-> (RPIPE_mem_resp1_pipe0_1691_Update)
          RPIPE_mem_resp1_pipe0_1691_update_completed_ <-& (RPIPE_mem_resp1_pipe0_1691_Update)
          RPIPE_mem_resp1_pipe0_1691_sample_start_ o<-& (RPIPE_mem_resp1_pipe0_1691_update_completed_ 0)
          // RAW reenables for mem_resp1_pipe0
          // producer  and  consumer are both determined by PHI statements.
          aggregated_phi_sample_req &-> (RPIPE_mem_resp1_pipe0_1691_sample_start_)
          aggregated_phi_sample_ack <-& (RPIPE_mem_resp1_pipe0_1691_sample_completed_)
          aggregated_phi_update_req &-> (RPIPE_mem_resp1_pipe0_1691_update_start_)
          phi_stmt_1689_update_completed_ <-& (RPIPE_mem_resp1_pipe0_1691_update_completed_)
          aggregated_phi_update_ack <-& (phi_stmt_1689_update_completed_)
          // done: PHI Statement phi_stmt_1689
          // start:  single source PHI statement phi_stmt_1692
          // 			$phi rdata1 := 			  mem_resp1_pipe1 $on   $entry ,   $loopback 
          // type of target is $uint<8>
          $T[phi_stmt_1692_sample_start_] 
          $T[phi_stmt_1692_sample_completed_] 
          $T[phi_stmt_1692_update_start_] 
          $T[phi_stmt_1692_update_completed_] 
          aggregated_phi_sample_req <-& (phi_stmt_1692_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_1692_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_1692_update_start_)
          // non-implicit source expression in single-source phi
          // mem_resp1_pipe1
          $T[RPIPE_mem_resp1_pipe1_1694_sample_start_] 
          $T[RPIPE_mem_resp1_pipe1_1694_sample_completed_] 
          $T[RPIPE_mem_resp1_pipe1_1694_update_start_] 
          $T[RPIPE_mem_resp1_pipe1_1694_update_completed_] 
          ;;[RPIPE_mem_resp1_pipe1_1694_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_mem_resp1_pipe1_1694_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_mem_resp1_pipe1_1694_sample_start_ &-> (RPIPE_mem_resp1_pipe1_1694_Sample)
          RPIPE_mem_resp1_pipe1_1694_sample_completed_ <-& (RPIPE_mem_resp1_pipe1_1694_Sample)
          RPIPE_mem_resp1_pipe1_1694_update_start_ <-& (RPIPE_mem_resp1_pipe1_1694_sample_completed_)
          RPIPE_mem_resp1_pipe1_1694_update_start_ &-> (RPIPE_mem_resp1_pipe1_1694_Update)
          RPIPE_mem_resp1_pipe1_1694_update_completed_ <-& (RPIPE_mem_resp1_pipe1_1694_Update)
          RPIPE_mem_resp1_pipe1_1694_sample_start_ o<-& (RPIPE_mem_resp1_pipe1_1694_update_completed_ 0)
          // RAW reenables for mem_resp1_pipe1
          // producer  and  consumer are both determined by PHI statements.
          aggregated_phi_sample_req &-> (RPIPE_mem_resp1_pipe1_1694_sample_start_)
          aggregated_phi_sample_ack <-& (RPIPE_mem_resp1_pipe1_1694_sample_completed_)
          aggregated_phi_update_req &-> (RPIPE_mem_resp1_pipe1_1694_update_start_)
          phi_stmt_1692_update_completed_ <-& (RPIPE_mem_resp1_pipe1_1694_update_completed_)
          aggregated_phi_update_ack <-& (phi_stmt_1692_update_completed_)
          // done: PHI Statement phi_stmt_1692
          // start:  			MEMORY_TO_NIC_RESPONSE := ((rdata1 [] 0 ) && rdata0) $buffering 1// bits of buffering = 65. 
          //  file nic.linked.opt.aa, line 585
          // Source expression
          // ((rdata1 [] 0 ) && rdata0)
          $T[CONCAT_u1_u65_1701_sample_start_] 
          $T[CONCAT_u1_u65_1701_sample_completed_] 
          $T[CONCAT_u1_u65_1701_update_start_] 
          $T[CONCAT_u1_u65_1701_update_completed_] 
          // (rdata1 [] 0 )
          // rdata1
          // rdata0
          // start: Forward dependencies from (rdata1 [] 0 ) to transition CONCAT_u1_u65_1701_sample_start_
          CONCAT_u1_u65_1701_sample_start_ <-& (phi_stmt_1692_update_completed_)
          // done: Forward dependencies from (rdata1 [] 0 ) to transition CONCAT_u1_u65_1701_sample_start_
          // start: Forward dependencies from rdata0 to transition CONCAT_u1_u65_1701_sample_start_
          CONCAT_u1_u65_1701_sample_start_ <-& (phi_stmt_1689_update_completed_)
          // done: Forward dependencies from rdata0 to transition CONCAT_u1_u65_1701_sample_start_
          ;;[CONCAT_u1_u65_1701_Sample] 
          {
            // binary expression 
            $T [rr] $T [ra]  // (split) binary operation 
          }
          ;;[CONCAT_u1_u65_1701_Update] 
          {
            // binary expression 
            $T [cr] $T [ca] // (split) binary operation 
          }
          CONCAT_u1_u65_1701_sample_start_ &-> (CONCAT_u1_u65_1701_Sample)
          CONCAT_u1_u65_1701_sample_completed_ <-& (CONCAT_u1_u65_1701_Sample)
          CONCAT_u1_u65_1701_sample_completed_ &-> ($null)
          CONCAT_u1_u65_1701_update_start_ &-> (CONCAT_u1_u65_1701_Update)
          CONCAT_u1_u65_1701_update_completed_ <-& (CONCAT_u1_u65_1701_Update)
          // RAW reenables for (rdata1 [] 0 )
          phi_stmt_1692_update_start_ o<-& (CONCAT_u1_u65_1701_sample_completed_ 0)
          // RAW reenables for rdata0
          phi_stmt_1689_update_start_ o<-& (CONCAT_u1_u65_1701_sample_completed_ 0)
          // self-release: 
          CONCAT_u1_u65_1701_sample_start_ o<-& (CONCAT_u1_u65_1701_sample_completed_ 1)
          $null &-> (CONCAT_u1_u65_1701_update_start_)
          CONCAT_u1_u65_1701_update_start_ o<-& (CONCAT_u1_u65_1701_update_completed_ 0)
          // Target expression
          // (as target) MEMORY_TO_NIC_RESPONSE
          $T[WPIPE_MEMORY_TO_NIC_RESPONSE_1696_sample_start_] 
          $T[WPIPE_MEMORY_TO_NIC_RESPONSE_1696_sample_completed_] 
          $T[WPIPE_MEMORY_TO_NIC_RESPONSE_1696_update_start_] 
          $T[WPIPE_MEMORY_TO_NIC_RESPONSE_1696_update_completed_] 
          ;;[WPIPE_MEMORY_TO_NIC_RESPONSE_1696_Sample] 
          {
            // pipe write sample-start MEMORY_TO_NIC_RESPONSE
            $T [req] $T [ack] 
          }
          ;;[WPIPE_MEMORY_TO_NIC_RESPONSE_1696_Update] 
          {
            // pipe write update (complete) MEMORY_TO_NIC_RESPONSE
            $T [req] $T [ack] 
          }
          WPIPE_MEMORY_TO_NIC_RESPONSE_1696_sample_start_ &-> (WPIPE_MEMORY_TO_NIC_RESPONSE_1696_Sample)
          WPIPE_MEMORY_TO_NIC_RESPONSE_1696_sample_completed_ <-& (WPIPE_MEMORY_TO_NIC_RESPONSE_1696_Sample)
          WPIPE_MEMORY_TO_NIC_RESPONSE_1696_update_start_ <-& (WPIPE_MEMORY_TO_NIC_RESPONSE_1696_sample_completed_)
          WPIPE_MEMORY_TO_NIC_RESPONSE_1696_update_start_ &-> (WPIPE_MEMORY_TO_NIC_RESPONSE_1696_Update)
          WPIPE_MEMORY_TO_NIC_RESPONSE_1696_update_completed_ <-& (WPIPE_MEMORY_TO_NIC_RESPONSE_1696_Update)
          WPIPE_MEMORY_TO_NIC_RESPONSE_1696_sample_start_ o<-& (WPIPE_MEMORY_TO_NIC_RESPONSE_1696_update_completed_ 0)
          // start: Forward dependencies from ((rdata1 [] 0 ) && rdata0) to transition WPIPE_MEMORY_TO_NIC_RESPONSE_1696_sample_start_
          WPIPE_MEMORY_TO_NIC_RESPONSE_1696_sample_start_ <-& (CONCAT_u1_u65_1701_update_completed_)
          // done: Forward dependencies from ((rdata1 [] 0 ) && rdata0) to transition WPIPE_MEMORY_TO_NIC_RESPONSE_1696_sample_start_
          // RAW reenables for ((rdata1 [] 0 ) && rdata0)
          CONCAT_u1_u65_1701_update_start_ o<-& (WPIPE_MEMORY_TO_NIC_RESPONSE_1696_sample_completed_ 0)
          // end:  			MEMORY_TO_NIC_RESPONSE := ((rdata1 [] 0 ) && rdata0) $buffering 1// bits of buffering = 65. 
          $T [loop_body_delay_to_condition_start] $delay
          loop_body_start &-> (loop_body_delay_to_condition_start)
          loop_body_delay_to_condition_start &-> (condition_evaluated)
          condition_evaluated &-> ($null)
          // load-store dependencies..
          // pipe read/write dependencies for pipe MEMORY_TO_NIC_RESPONSE
          // read-dependencies for pipe MEMORY_TO_NIC_RESPONSE
          // write-dependencies for pipe MEMORY_TO_NIC_RESPONSE
          // signal write dependencies for MEMORY_TO_NIC_RESPONSE
          // pipe read/write dependencies for pipe mem_resp1_pipe0
          // read-dependencies for pipe mem_resp1_pipe0
          // write-dependencies for pipe mem_resp1_pipe0
          // signal write dependencies for mem_resp1_pipe0
          // pipe read/write dependencies for pipe mem_resp1_pipe1
          // read-dependencies for pipe mem_resp1_pipe1
          // write-dependencies for pipe mem_resp1_pipe1
          // signal write dependencies for mem_resp1_pipe1
        }
        ( first_time_through_loop_body  back_edge_to_loop_body) 
        ( condition_evaluated )
        ;; [loop_exit] 
        {
          $T [ack] 
        }
        ;; [loop_taken] 
        {
          $T [ack] 
        }
        do_while_stmt_1687__entry__ <-| ($entry)
        loop_body_done <-| ( do_while_stmt_1687_loop_body ) 
        condition_done |-> (loop_exit loop_taken)
        do_while_stmt_1687__exit__ |-> ($exit)
        $bind condition_done <= do_while_stmt_1687_loop_body : condition_evaluated
        $bind do_while_stmt_1687__entry__  => do_while_stmt_1687_loop_body : first_time_through_loop_body 
        $bind loop_back  => do_while_stmt_1687_loop_body : back_edge_to_loop_body 
        $terminate (loop_exit loop_taken loop_body_done) (loop_back do_while_stmt_1687__exit__)
      }
      do_while_stmt_1687__entry__ |-> (do_while_stmt_1687)
      do_while_stmt_1687__exit__ <-| (do_while_stmt_1687)
      do_while_stmt_1687__entry__ <-| (branch_block_stmt_1686__entry__)
      do_while_stmt_1687__exit__ |-> (branch_block_stmt_1686__exit__)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %memoryToNicInterface%loop%
    //  file nic.linked.opt.aa, line 579
    // constant-object-declarations for block %memoryToNicInterface%loop
    //  file nic.linked.opt.aa, line 575
    // constant-object-declarations for block %memoryToNicInterface
    //  file nic.linked.opt.aa, line 570
    // constant-declarations for block %memoryToNicInterface%loop
    //  file nic.linked.opt.aa, line 575
    // do-while statement  
    //  file nic.linked.opt.aa, line 577
    // 1 
    $constant $W[konst_1704_wire_constant] : $int<1> := _b1// 1
    // constant-declarations for block %memoryToNicInterface%loop%
    //  file nic.linked.opt.aa, line 579
    // constant-declarations for phi:  			$phi rdata0 := 			  mem_resp1_pipe0 $on   $entry ,   $loopback 
    // type of target is $uint<64>
    //  file nic.linked.opt.aa, line 580
    // constant-declarations for phi:  			$phi rdata1 := 			  mem_resp1_pipe1 $on   $entry ,   $loopback 
    // type of target is $uint<8>
    //  file nic.linked.opt.aa, line 582
    // 0 
    $constant $W[konst_1698_wire_constant] : $int<8> := _b00000000// 0
    // block %memoryToNicInterface%loop
    //  file nic.linked.opt.aa, line 575
    // do-while statement  
    //  file nic.linked.opt.aa, line 577
    // merge-statement  
    //  file nic.linked.opt.aa, line 579
    // 			$phi rdata0 := 			  mem_resp1_pipe0 $on   $entry ,   $loopback 
    // type of target is $uint<64>
    //  file nic.linked.opt.aa, line 580
    // mem_resp1_pipe0
    $W[RPIPE_mem_resp1_pipe0_1691_wire] : $int<64>
    // rdata0
    $W[rdata0_1689] : $int<64>
    // 			$phi rdata1 := 			  mem_resp1_pipe1 $on   $entry ,   $loopback 
    // type of target is $uint<8>
    //  file nic.linked.opt.aa, line 582
    // mem_resp1_pipe1
    $W[RPIPE_mem_resp1_pipe1_1694_wire] : $int<8>
    // rdata1
    $W[rdata1_1692] : $int<8>
    // 			MEMORY_TO_NIC_RESPONSE := ((rdata1 [] 0 ) && rdata0) $buffering 1// bits of buffering = 65. 
    //  file nic.linked.opt.aa, line 585
    // (rdata1 [] 0 )
    $intermediate $W[BITSEL_u8_u1_1699_wire] : $int<1>
    // ((rdata1 [] 0 ) && rdata0)
    $intermediate $W[CONCAT_u1_u65_1701_wire] : $int<65>
    // MEMORY_TO_NIC_RESPONSE
    // datapath-instances for block %memoryToNicInterface%loop
    //  file nic.linked.opt.aa, line 575
    // datapath-instances for do-while  
    //  file nic.linked.opt.aa, line 577
    ==0? [do_while_stmt_1687_branch] (konst_1704_wire_constant)
    $flowthrough
    // data-path instances for merge  
    //  file nic.linked.opt.aa, line 579
    // 			$phi rdata0 := 			  mem_resp1_pipe0 $on   $entry ,   $loopback 
    // type of target is $uint<64>
    //  file nic.linked.opt.aa, line 580
    // mem_resp1_pipe0
    $ioport $in [RPIPE_mem_resp1_pipe0_1691_inst] (mem_resp1_pipe0) (RPIPE_mem_resp1_pipe0_1691_wire)  $fullrate 
    $buffering $out RPIPE_mem_resp1_pipe0_1691_inst RPIPE_mem_resp1_pipe0_1691_wire 1
    # := [ssrc_phi_stmt_1689] (RPIPE_mem_resp1_pipe0_1691_wire) (rdata0_1689)    $flowthrough 
    // 			$phi rdata1 := 			  mem_resp1_pipe1 $on   $entry ,   $loopback 
    // type of target is $uint<8>
    //  file nic.linked.opt.aa, line 582
    // mem_resp1_pipe1
    $ioport $in [RPIPE_mem_resp1_pipe1_1694_inst] (mem_resp1_pipe1) (RPIPE_mem_resp1_pipe1_1694_wire)  $fullrate 
    $buffering $out RPIPE_mem_resp1_pipe1_1694_inst RPIPE_mem_resp1_pipe1_1694_wire 1
    # := [ssrc_phi_stmt_1692] (RPIPE_mem_resp1_pipe1_1694_wire) (rdata1_1692)    $flowthrough 
    // 			MEMORY_TO_NIC_RESPONSE := ((rdata1 [] 0 ) && rdata0) $buffering 1// bits of buffering = 65. 
    //  file nic.linked.opt.aa, line 585
    // (rdata1 [] 0 )
    [][BITSEL_u8_u1_1699_inst] (rdata1_1692 konst_1698_wire_constant) (BITSEL_u8_u1_1699_wire)   $flowthrough 
    $delay BITSEL_u8_u1_1699_inst 0
    // ((rdata1 [] 0 ) && rdata0)
    &&[CONCAT_u1_u65_1701_inst] (BITSEL_u8_u1_1699_wire rdata0_1689) (CONCAT_u1_u65_1701_wire)    $fullrate
    $buffering  $out CONCAT_u1_u65_1701_inst CONCAT_u1_u65_1701_wire 1
    $delay CONCAT_u1_u65_1701_inst 1
    // MEMORY_TO_NIC_RESPONSE
    $ioport $out [WPIPE_MEMORY_TO_NIC_RESPONSE_1696_inst]  (CONCAT_u1_u65_1701_wire) (MEMORY_TO_NIC_RESPONSE)  $fullrate 
  }
  // end data-path
  // CP-DP links for do-while  do_while_stmt_1687
  //  file nic.linked.opt.aa, line 577
  // mem_resp1_pipe0
  RPIPE_mem_resp1_pipe0_1691_inst <=> (branch_block_stmt_1686/do_while_stmt_1687/do_while_stmt_1687_loop_body/RPIPE_mem_resp1_pipe0_1691_Sample/rr branch_block_stmt_1686/do_while_stmt_1687/do_while_stmt_1687_loop_body/RPIPE_mem_resp1_pipe0_1691_Update/cr) (branch_block_stmt_1686/do_while_stmt_1687/do_while_stmt_1687_loop_body/RPIPE_mem_resp1_pipe0_1691_Sample/ra branch_block_stmt_1686/do_while_stmt_1687/do_while_stmt_1687_loop_body/RPIPE_mem_resp1_pipe0_1691_Update/ca)
  // mem_resp1_pipe1
  RPIPE_mem_resp1_pipe1_1694_inst <=> (branch_block_stmt_1686/do_while_stmt_1687/do_while_stmt_1687_loop_body/RPIPE_mem_resp1_pipe1_1694_Sample/rr branch_block_stmt_1686/do_while_stmt_1687/do_while_stmt_1687_loop_body/RPIPE_mem_resp1_pipe1_1694_Update/cr) (branch_block_stmt_1686/do_while_stmt_1687/do_while_stmt_1687_loop_body/RPIPE_mem_resp1_pipe1_1694_Sample/ra branch_block_stmt_1686/do_while_stmt_1687/do_while_stmt_1687_loop_body/RPIPE_mem_resp1_pipe1_1694_Update/ca)
  // 			MEMORY_TO_NIC_RESPONSE := ((rdata1 [] 0 ) && rdata0) $buffering 1// bits of buffering = 65. 
  //  file nic.linked.opt.aa, line 585
  // ((rdata1 [] 0 ) && rdata0)
  // (rdata1 [] 0 )
  // rdata1
  // rdata0
  CONCAT_u1_u65_1701_inst <=> (branch_block_stmt_1686/do_while_stmt_1687/do_while_stmt_1687_loop_body/CONCAT_u1_u65_1701_Sample/rr branch_block_stmt_1686/do_while_stmt_1687/do_while_stmt_1687_loop_body/CONCAT_u1_u65_1701_Update/cr) (branch_block_stmt_1686/do_while_stmt_1687/do_while_stmt_1687_loop_body/CONCAT_u1_u65_1701_Sample/ra branch_block_stmt_1686/do_while_stmt_1687/do_while_stmt_1687_loop_body/CONCAT_u1_u65_1701_Update/ca)
  // MEMORY_TO_NIC_RESPONSE
  WPIPE_MEMORY_TO_NIC_RESPONSE_1696_inst <=> (branch_block_stmt_1686/do_while_stmt_1687/do_while_stmt_1687_loop_body/WPIPE_MEMORY_TO_NIC_RESPONSE_1696_Sample/req branch_block_stmt_1686/do_while_stmt_1687/do_while_stmt_1687_loop_body/WPIPE_MEMORY_TO_NIC_RESPONSE_1696_Update/req) (branch_block_stmt_1686/do_while_stmt_1687/do_while_stmt_1687_loop_body/WPIPE_MEMORY_TO_NIC_RESPONSE_1696_Sample/ack branch_block_stmt_1686/do_while_stmt_1687/do_while_stmt_1687_loop_body/WPIPE_MEMORY_TO_NIC_RESPONSE_1696_Update/ack)
  do_while_stmt_1687_branch <=> (branch_block_stmt_1686/do_while_stmt_1687/do_while_stmt_1687_loop_body/condition_evaluated) (branch_block_stmt_1686/do_while_stmt_1687/loop_exit/ack branch_block_stmt_1686/do_while_stmt_1687/loop_taken/ack)
}
$module [memoryToProcessorInterface] 
{
  // pipe-declarations for block %memoryToProcessorInterface
  //  file nic.linked.opt.aa, line 589
  // pipe-declarations for block %memoryToProcessorInterface%loop
  //  file nic.linked.opt.aa, line 594
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    <>[branch_block_stmt_1708] // Branch Block  file nic.linked.opt.aa, line 594
    {
      $P [branch_block_stmt_1708__entry__]
      branch_block_stmt_1708__entry__ <-| ($entry)
      $P [branch_block_stmt_1708__exit__]
      branch_block_stmt_1708__exit__ |-> ($exit)
      $P [do_while_stmt_1709__entry__] 
      $P [do_while_stmt_1709__exit__] 
      // do-while-statement  
      //  file nic.linked.opt.aa, line 596
      <o> [do_while_stmt_1709]  $depth 7 $buffering 1 
      {
        $P[do_while_stmt_1709__entry__] 
        $P[do_while_stmt_1709__exit__] 
        $P[loop_back] 
        $P[condition_done] 
        $P[loop_body_done] 
        $pipeline [do_while_stmt_1709_loop_body] 
        {
          // Pipelined!
          $T[back_edge_to_loop_body] 
          $T[first_time_through_loop_body] 
          $T[loop_body_start] 
          $T[condition_evaluated] 
          $transitionmerge [entry_tmerge] (back_edge_to_loop_body first_time_through_loop_body) (loop_body_start)
          $entry <-& (loop_body_start)
          $T[aggregated_phi_sample_req] 
          $T[aggregated_phi_sample_ack] 
          $T[aggregated_phi_update_req] 
          $T[aggregated_phi_update_ack] 
          // do not loop-back unless all phi's have used up their triggering tokens.
          condition_evaluated <-& (aggregated_phi_update_ack)
          aggregated_phi_sample_req o<-& (aggregated_phi_update_ack 0)
          // start:  single source PHI statement phi_stmt_1711
          // 			$phi rdata0 := 			  mem_resp0_pipe0 $on   $entry ,   $loopback 
          // type of target is $uint<64>
          $T[phi_stmt_1711_sample_start_] 
          $T[phi_stmt_1711_sample_completed_] 
          $T[phi_stmt_1711_update_start_] 
          $T[phi_stmt_1711_update_completed_] 
          aggregated_phi_sample_req <-& (phi_stmt_1711_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_1711_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_1711_update_start_)
          // non-implicit source expression in single-source phi
          // mem_resp0_pipe0
          $T[RPIPE_mem_resp0_pipe0_1713_sample_start_] 
          $T[RPIPE_mem_resp0_pipe0_1713_sample_completed_] 
          $T[RPIPE_mem_resp0_pipe0_1713_update_start_] 
          $T[RPIPE_mem_resp0_pipe0_1713_update_completed_] 
          ;;[RPIPE_mem_resp0_pipe0_1713_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_mem_resp0_pipe0_1713_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_mem_resp0_pipe0_1713_sample_start_ &-> (RPIPE_mem_resp0_pipe0_1713_Sample)
          RPIPE_mem_resp0_pipe0_1713_sample_completed_ <-& (RPIPE_mem_resp0_pipe0_1713_Sample)
          RPIPE_mem_resp0_pipe0_1713_update_start_ <-& (RPIPE_mem_resp0_pipe0_1713_sample_completed_)
          RPIPE_mem_resp0_pipe0_1713_update_start_ &-> (RPIPE_mem_resp0_pipe0_1713_Update)
          RPIPE_mem_resp0_pipe0_1713_update_completed_ <-& (RPIPE_mem_resp0_pipe0_1713_Update)
          RPIPE_mem_resp0_pipe0_1713_sample_start_ o<-& (RPIPE_mem_resp0_pipe0_1713_update_completed_ 0)
          // RAW reenables for mem_resp0_pipe0
          // producer  and  consumer are both determined by PHI statements.
          aggregated_phi_sample_req &-> (RPIPE_mem_resp0_pipe0_1713_sample_start_)
          aggregated_phi_sample_ack <-& (RPIPE_mem_resp0_pipe0_1713_sample_completed_)
          aggregated_phi_update_req &-> (RPIPE_mem_resp0_pipe0_1713_update_start_)
          phi_stmt_1711_update_completed_ <-& (RPIPE_mem_resp0_pipe0_1713_update_completed_)
          aggregated_phi_update_ack <-& (phi_stmt_1711_update_completed_)
          // done: PHI Statement phi_stmt_1711
          // start:  single source PHI statement phi_stmt_1714
          // 			$phi rdata1 := 			  mem_resp0_pipe1 $on   $entry ,   $loopback 
          // type of target is $uint<8>
          $T[phi_stmt_1714_sample_start_] 
          $T[phi_stmt_1714_sample_completed_] 
          $T[phi_stmt_1714_update_start_] 
          $T[phi_stmt_1714_update_completed_] 
          aggregated_phi_sample_req <-& (phi_stmt_1714_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_1714_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_1714_update_start_)
          // non-implicit source expression in single-source phi
          // mem_resp0_pipe1
          $T[RPIPE_mem_resp0_pipe1_1716_sample_start_] 
          $T[RPIPE_mem_resp0_pipe1_1716_sample_completed_] 
          $T[RPIPE_mem_resp0_pipe1_1716_update_start_] 
          $T[RPIPE_mem_resp0_pipe1_1716_update_completed_] 
          ;;[RPIPE_mem_resp0_pipe1_1716_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_mem_resp0_pipe1_1716_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_mem_resp0_pipe1_1716_sample_start_ &-> (RPIPE_mem_resp0_pipe1_1716_Sample)
          RPIPE_mem_resp0_pipe1_1716_sample_completed_ <-& (RPIPE_mem_resp0_pipe1_1716_Sample)
          RPIPE_mem_resp0_pipe1_1716_update_start_ <-& (RPIPE_mem_resp0_pipe1_1716_sample_completed_)
          RPIPE_mem_resp0_pipe1_1716_update_start_ &-> (RPIPE_mem_resp0_pipe1_1716_Update)
          RPIPE_mem_resp0_pipe1_1716_update_completed_ <-& (RPIPE_mem_resp0_pipe1_1716_Update)
          RPIPE_mem_resp0_pipe1_1716_sample_start_ o<-& (RPIPE_mem_resp0_pipe1_1716_update_completed_ 0)
          // RAW reenables for mem_resp0_pipe1
          // producer  and  consumer are both determined by PHI statements.
          aggregated_phi_sample_req &-> (RPIPE_mem_resp0_pipe1_1716_sample_start_)
          aggregated_phi_sample_ack <-& (RPIPE_mem_resp0_pipe1_1716_sample_completed_)
          aggregated_phi_update_req &-> (RPIPE_mem_resp0_pipe1_1716_update_start_)
          phi_stmt_1714_update_completed_ <-& (RPIPE_mem_resp0_pipe1_1716_update_completed_)
          aggregated_phi_update_ack <-& (phi_stmt_1714_update_completed_)
          // done: PHI Statement phi_stmt_1714
          // start:  			mem_resp0_pipe0_tester := rdata0 $buffering 1// bits of buffering = 64. 
          //  file nic.linked.opt.aa, line 604
          // Source expression
          // rdata0
          // Target expression
          // (as target) mem_resp0_pipe0_tester
          $T[WPIPE_mem_resp0_pipe0_tester_1718_sample_start_] 
          $T[WPIPE_mem_resp0_pipe0_tester_1718_sample_completed_] 
          $T[WPIPE_mem_resp0_pipe0_tester_1718_update_start_] 
          $T[WPIPE_mem_resp0_pipe0_tester_1718_update_completed_] 
          ;;[WPIPE_mem_resp0_pipe0_tester_1718_Sample] 
          {
            // pipe write sample-start mem_resp0_pipe0_tester
            $T [req] $T [ack] 
          }
          ;;[WPIPE_mem_resp0_pipe0_tester_1718_Update] 
          {
            // pipe write update (complete) mem_resp0_pipe0_tester
            $T [req] $T [ack] 
          }
          WPIPE_mem_resp0_pipe0_tester_1718_sample_start_ &-> (WPIPE_mem_resp0_pipe0_tester_1718_Sample)
          WPIPE_mem_resp0_pipe0_tester_1718_sample_completed_ <-& (WPIPE_mem_resp0_pipe0_tester_1718_Sample)
          WPIPE_mem_resp0_pipe0_tester_1718_update_start_ <-& (WPIPE_mem_resp0_pipe0_tester_1718_sample_completed_)
          WPIPE_mem_resp0_pipe0_tester_1718_update_start_ &-> (WPIPE_mem_resp0_pipe0_tester_1718_Update)
          WPIPE_mem_resp0_pipe0_tester_1718_update_completed_ <-& (WPIPE_mem_resp0_pipe0_tester_1718_Update)
          WPIPE_mem_resp0_pipe0_tester_1718_sample_start_ o<-& (WPIPE_mem_resp0_pipe0_tester_1718_update_completed_ 0)
          // start: Forward dependencies from rdata0 to transition WPIPE_mem_resp0_pipe0_tester_1718_sample_start_
          WPIPE_mem_resp0_pipe0_tester_1718_sample_start_ <-& (phi_stmt_1711_update_completed_)
          // done: Forward dependencies from rdata0 to transition WPIPE_mem_resp0_pipe0_tester_1718_sample_start_
          // RAW reenables for rdata0
          phi_stmt_1711_update_start_ o<-& (WPIPE_mem_resp0_pipe0_tester_1718_sample_completed_ 0)
          // end:  			mem_resp0_pipe0_tester := rdata0 $buffering 1// bits of buffering = 64. 
          // start:  			mem_resp0_pipe1_tester := rdata1 $buffering 1// bits of buffering = 8. 
          //  file nic.linked.opt.aa, line 605
          // Source expression
          // rdata1
          // Target expression
          // (as target) mem_resp0_pipe1_tester
          $T[WPIPE_mem_resp0_pipe1_tester_1721_sample_start_] 
          $T[WPIPE_mem_resp0_pipe1_tester_1721_sample_completed_] 
          $T[WPIPE_mem_resp0_pipe1_tester_1721_update_start_] 
          $T[WPIPE_mem_resp0_pipe1_tester_1721_update_completed_] 
          ;;[WPIPE_mem_resp0_pipe1_tester_1721_Sample] 
          {
            // pipe write sample-start mem_resp0_pipe1_tester
            $T [req] $T [ack] 
          }
          ;;[WPIPE_mem_resp0_pipe1_tester_1721_Update] 
          {
            // pipe write update (complete) mem_resp0_pipe1_tester
            $T [req] $T [ack] 
          }
          WPIPE_mem_resp0_pipe1_tester_1721_sample_start_ &-> (WPIPE_mem_resp0_pipe1_tester_1721_Sample)
          WPIPE_mem_resp0_pipe1_tester_1721_sample_completed_ <-& (WPIPE_mem_resp0_pipe1_tester_1721_Sample)
          WPIPE_mem_resp0_pipe1_tester_1721_update_start_ <-& (WPIPE_mem_resp0_pipe1_tester_1721_sample_completed_)
          WPIPE_mem_resp0_pipe1_tester_1721_update_start_ &-> (WPIPE_mem_resp0_pipe1_tester_1721_Update)
          WPIPE_mem_resp0_pipe1_tester_1721_update_completed_ <-& (WPIPE_mem_resp0_pipe1_tester_1721_Update)
          WPIPE_mem_resp0_pipe1_tester_1721_sample_start_ o<-& (WPIPE_mem_resp0_pipe1_tester_1721_update_completed_ 0)
          // start: Forward dependencies from rdata1 to transition WPIPE_mem_resp0_pipe1_tester_1721_sample_start_
          WPIPE_mem_resp0_pipe1_tester_1721_sample_start_ <-& (phi_stmt_1714_update_completed_)
          // done: Forward dependencies from rdata1 to transition WPIPE_mem_resp0_pipe1_tester_1721_sample_start_
          // RAW reenables for rdata1
          phi_stmt_1714_update_start_ o<-& (WPIPE_mem_resp0_pipe1_tester_1721_sample_completed_ 0)
          // end:  			mem_resp0_pipe1_tester := rdata1 $buffering 1// bits of buffering = 8. 
          $T [loop_body_delay_to_condition_start] $delay
          loop_body_start &-> (loop_body_delay_to_condition_start)
          loop_body_delay_to_condition_start &-> (condition_evaluated)
          condition_evaluated &-> ($null)
          // load-store dependencies..
          // pipe read/write dependencies for pipe mem_resp0_pipe0
          // read-dependencies for pipe mem_resp0_pipe0
          // write-dependencies for pipe mem_resp0_pipe0
          // signal write dependencies for mem_resp0_pipe0
          // pipe read/write dependencies for pipe mem_resp0_pipe0_tester
          // read-dependencies for pipe mem_resp0_pipe0_tester
          // write-dependencies for pipe mem_resp0_pipe0_tester
          // signal write dependencies for mem_resp0_pipe0_tester
          // pipe read/write dependencies for pipe mem_resp0_pipe1
          // read-dependencies for pipe mem_resp0_pipe1
          // write-dependencies for pipe mem_resp0_pipe1
          // signal write dependencies for mem_resp0_pipe1
          // pipe read/write dependencies for pipe mem_resp0_pipe1_tester
          // read-dependencies for pipe mem_resp0_pipe1_tester
          // write-dependencies for pipe mem_resp0_pipe1_tester
          // signal write dependencies for mem_resp0_pipe1_tester
        }
        ( first_time_through_loop_body  back_edge_to_loop_body) 
        ( condition_evaluated )
        ;; [loop_exit] 
        {
          $T [ack] 
        }
        ;; [loop_taken] 
        {
          $T [ack] 
        }
        do_while_stmt_1709__entry__ <-| ($entry)
        loop_body_done <-| ( do_while_stmt_1709_loop_body ) 
        condition_done |-> (loop_exit loop_taken)
        do_while_stmt_1709__exit__ |-> ($exit)
        $bind condition_done <= do_while_stmt_1709_loop_body : condition_evaluated
        $bind do_while_stmt_1709__entry__  => do_while_stmt_1709_loop_body : first_time_through_loop_body 
        $bind loop_back  => do_while_stmt_1709_loop_body : back_edge_to_loop_body 
        $terminate (loop_exit loop_taken loop_body_done) (loop_back do_while_stmt_1709__exit__)
      }
      do_while_stmt_1709__entry__ |-> (do_while_stmt_1709)
      do_while_stmt_1709__exit__ <-| (do_while_stmt_1709)
      do_while_stmt_1709__entry__ <-| (branch_block_stmt_1708__entry__)
      do_while_stmt_1709__exit__ |-> (branch_block_stmt_1708__exit__)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %memoryToProcessorInterface%loop%
    //  file nic.linked.opt.aa, line 598
    // constant-object-declarations for block %memoryToProcessorInterface%loop
    //  file nic.linked.opt.aa, line 594
    // constant-object-declarations for block %memoryToProcessorInterface
    //  file nic.linked.opt.aa, line 589
    // constant-declarations for block %memoryToProcessorInterface%loop
    //  file nic.linked.opt.aa, line 594
    // do-while statement  
    //  file nic.linked.opt.aa, line 596
    // 1 
    $constant $W[konst_1725_wire_constant] : $int<1> := _b1// 1
    // constant-declarations for block %memoryToProcessorInterface%loop%
    //  file nic.linked.opt.aa, line 598
    // constant-declarations for phi:  			$phi rdata0 := 			  mem_resp0_pipe0 $on   $entry ,   $loopback 
    // type of target is $uint<64>
    //  file nic.linked.opt.aa, line 599
    // constant-declarations for phi:  			$phi rdata1 := 			  mem_resp0_pipe1 $on   $entry ,   $loopback 
    // type of target is $uint<8>
    //  file nic.linked.opt.aa, line 601
    // block %memoryToProcessorInterface%loop
    //  file nic.linked.opt.aa, line 594
    // do-while statement  
    //  file nic.linked.opt.aa, line 596
    // merge-statement  
    //  file nic.linked.opt.aa, line 598
    // 			$phi rdata0 := 			  mem_resp0_pipe0 $on   $entry ,   $loopback 
    // type of target is $uint<64>
    //  file nic.linked.opt.aa, line 599
    // mem_resp0_pipe0
    $W[RPIPE_mem_resp0_pipe0_1713_wire] : $int<64>
    // rdata0
    $W[rdata0_1711] : $int<64>
    // 			$phi rdata1 := 			  mem_resp0_pipe1 $on   $entry ,   $loopback 
    // type of target is $uint<8>
    //  file nic.linked.opt.aa, line 601
    // mem_resp0_pipe1
    $W[RPIPE_mem_resp0_pipe1_1716_wire] : $int<8>
    // rdata1
    $W[rdata1_1714] : $int<8>
    // 			mem_resp0_pipe0_tester := rdata0 $buffering 1// bits of buffering = 64. 
    //  file nic.linked.opt.aa, line 604
    // mem_resp0_pipe0_tester
    // 			mem_resp0_pipe1_tester := rdata1 $buffering 1// bits of buffering = 8. 
    //  file nic.linked.opt.aa, line 605
    // mem_resp0_pipe1_tester
    // datapath-instances for block %memoryToProcessorInterface%loop
    //  file nic.linked.opt.aa, line 594
    // datapath-instances for do-while  
    //  file nic.linked.opt.aa, line 596
    ==0? [do_while_stmt_1709_branch] (konst_1725_wire_constant)
    $flowthrough
    // data-path instances for merge  
    //  file nic.linked.opt.aa, line 598
    // 			$phi rdata0 := 			  mem_resp0_pipe0 $on   $entry ,   $loopback 
    // type of target is $uint<64>
    //  file nic.linked.opt.aa, line 599
    // mem_resp0_pipe0
    $ioport $in [RPIPE_mem_resp0_pipe0_1713_inst] (mem_resp0_pipe0) (RPIPE_mem_resp0_pipe0_1713_wire)  $fullrate 
    $buffering $out RPIPE_mem_resp0_pipe0_1713_inst RPIPE_mem_resp0_pipe0_1713_wire 1
    # := [ssrc_phi_stmt_1711] (RPIPE_mem_resp0_pipe0_1713_wire) (rdata0_1711)    $flowthrough 
    // 			$phi rdata1 := 			  mem_resp0_pipe1 $on   $entry ,   $loopback 
    // type of target is $uint<8>
    //  file nic.linked.opt.aa, line 601
    // mem_resp0_pipe1
    $ioport $in [RPIPE_mem_resp0_pipe1_1716_inst] (mem_resp0_pipe1) (RPIPE_mem_resp0_pipe1_1716_wire)  $fullrate 
    $buffering $out RPIPE_mem_resp0_pipe1_1716_inst RPIPE_mem_resp0_pipe1_1716_wire 1
    # := [ssrc_phi_stmt_1714] (RPIPE_mem_resp0_pipe1_1716_wire) (rdata1_1714)    $flowthrough 
    // 			mem_resp0_pipe0_tester := rdata0 $buffering 1// bits of buffering = 64. 
    //  file nic.linked.opt.aa, line 604
    // mem_resp0_pipe0_tester
    $ioport $out [WPIPE_mem_resp0_pipe0_tester_1718_inst]  (rdata0_1711) (mem_resp0_pipe0_tester)  $fullrate 
    // 			mem_resp0_pipe1_tester := rdata1 $buffering 1// bits of buffering = 8. 
    //  file nic.linked.opt.aa, line 605
    // mem_resp0_pipe1_tester
    $ioport $out [WPIPE_mem_resp0_pipe1_tester_1721_inst]  (rdata1_1714) (mem_resp0_pipe1_tester)  $fullrate 
  }
  // end data-path
  // CP-DP links for do-while  do_while_stmt_1709
  //  file nic.linked.opt.aa, line 596
  // mem_resp0_pipe0
  RPIPE_mem_resp0_pipe0_1713_inst <=> (branch_block_stmt_1708/do_while_stmt_1709/do_while_stmt_1709_loop_body/RPIPE_mem_resp0_pipe0_1713_Sample/rr branch_block_stmt_1708/do_while_stmt_1709/do_while_stmt_1709_loop_body/RPIPE_mem_resp0_pipe0_1713_Update/cr) (branch_block_stmt_1708/do_while_stmt_1709/do_while_stmt_1709_loop_body/RPIPE_mem_resp0_pipe0_1713_Sample/ra branch_block_stmt_1708/do_while_stmt_1709/do_while_stmt_1709_loop_body/RPIPE_mem_resp0_pipe0_1713_Update/ca)
  // mem_resp0_pipe1
  RPIPE_mem_resp0_pipe1_1716_inst <=> (branch_block_stmt_1708/do_while_stmt_1709/do_while_stmt_1709_loop_body/RPIPE_mem_resp0_pipe1_1716_Sample/rr branch_block_stmt_1708/do_while_stmt_1709/do_while_stmt_1709_loop_body/RPIPE_mem_resp0_pipe1_1716_Update/cr) (branch_block_stmt_1708/do_while_stmt_1709/do_while_stmt_1709_loop_body/RPIPE_mem_resp0_pipe1_1716_Sample/ra branch_block_stmt_1708/do_while_stmt_1709/do_while_stmt_1709_loop_body/RPIPE_mem_resp0_pipe1_1716_Update/ca)
  // 			mem_resp0_pipe0_tester := rdata0 $buffering 1// bits of buffering = 64. 
  //  file nic.linked.opt.aa, line 604
  // rdata0
  // mem_resp0_pipe0_tester
  WPIPE_mem_resp0_pipe0_tester_1718_inst <=> (branch_block_stmt_1708/do_while_stmt_1709/do_while_stmt_1709_loop_body/WPIPE_mem_resp0_pipe0_tester_1718_Sample/req branch_block_stmt_1708/do_while_stmt_1709/do_while_stmt_1709_loop_body/WPIPE_mem_resp0_pipe0_tester_1718_Update/req) (branch_block_stmt_1708/do_while_stmt_1709/do_while_stmt_1709_loop_body/WPIPE_mem_resp0_pipe0_tester_1718_Sample/ack branch_block_stmt_1708/do_while_stmt_1709/do_while_stmt_1709_loop_body/WPIPE_mem_resp0_pipe0_tester_1718_Update/ack)
  // 			mem_resp0_pipe1_tester := rdata1 $buffering 1// bits of buffering = 8. 
  //  file nic.linked.opt.aa, line 605
  // rdata1
  // mem_resp0_pipe1_tester
  WPIPE_mem_resp0_pipe1_tester_1721_inst <=> (branch_block_stmt_1708/do_while_stmt_1709/do_while_stmt_1709_loop_body/WPIPE_mem_resp0_pipe1_tester_1721_Sample/req branch_block_stmt_1708/do_while_stmt_1709/do_while_stmt_1709_loop_body/WPIPE_mem_resp0_pipe1_tester_1721_Update/req) (branch_block_stmt_1708/do_while_stmt_1709/do_while_stmt_1709_loop_body/WPIPE_mem_resp0_pipe1_tester_1721_Sample/ack branch_block_stmt_1708/do_while_stmt_1709/do_while_stmt_1709_loop_body/WPIPE_mem_resp0_pipe1_tester_1721_Update/ack)
  do_while_stmt_1709_branch <=> (branch_block_stmt_1708/do_while_stmt_1709/do_while_stmt_1709_loop_body/condition_evaluated) (branch_block_stmt_1708/do_while_stmt_1709/loop_exit/ack branch_block_stmt_1708/do_while_stmt_1709/loop_taken/ack)
}
$volatile $module [nextLSTATE] 
{
  $in RX:$int<73>
  // can point into 
  LSTATE:$int<2>
  // can point into 
  $out nLSTATE:$int<2>
  // can point into 
  // pipe-declarations for block %nextLSTATE
  //  file nic.linked.opt.aa, line 609
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    // Volatile! CP is left blank 
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %nextLSTATE
    //  file nic.linked.opt.aa, line 609
    // 1 
    $constant $W[konst_1738_wire_constant] : $int<1> := _b1// 1
    // ( $mux (LSTATE == S0) S1  _b0  ) 
    // S0
    $constant $W[R_S0_1743_wire_constant] : $int<2> := _b00// 0
    // S1
    $constant $W[R_S1_1745_wire_constant] : $int<2> := _b01// 1
    // _b0 
    $constant $W[konst_1746_wire_constant] : $int<2> := _b00// 0
    // ( $mux (LSTATE == S1) S2  _b0  ) 
    // S1
    $constant $W[R_S1_1749_wire_constant] : $int<2> := _b01// 1
    // S2
    $constant $W[R_S2_1751_wire_constant] : $int<2> := _b10// 2
    // _b0 
    $constant $W[konst_1752_wire_constant] : $int<2> := _b00// 0
    // ( $mux ((LSTATE == S2) & ( ~ last_word )) S2  _b0  ) 
    // S2
    $constant $W[R_S2_1756_wire_constant] : $int<2> := _b10// 2
    // S2
    $constant $W[R_S2_1761_wire_constant] : $int<2> := _b10// 2
    // _b0 
    $constant $W[konst_1762_wire_constant] : $int<2> := _b00// 0
    // ( $mux ((LSTATE == S2) & last_word) S0  _b0  ) 
    // S2
    $constant $W[R_S2_1765_wire_constant] : $int<2> := _b10// 2
    // S0
    $constant $W[R_S0_1769_wire_constant] : $int<2> := _b00// 0
    // _b0 
    $constant $W[konst_1770_wire_constant] : $int<2> := _b00// 0
    // 	$volatile tlast := ( $slice RX 72 72 )  $buffering 1
    //  file nic.linked.opt.aa, line 614
    // tlast
    $W[tlast_1735] : $int<1>
    // 	$volatile last_word := (tlast == 1 ) $buffering 1
    //  file nic.linked.opt.aa, line 615
    // last_word
    $W[last_word_1740] : $int<1>
    // 	nLSTATE := ((( $mux (LSTATE == S0) S1  _b0  )  | ( $mux (LSTATE == S1) S2  _b0  ) ) | (( $mux ((LSTATE == S2) & ( ~ last_word )) S2  _b0  )  | ( $mux ((LSTATE == S2) & last_word) S0  _b0  ) )) $buffering 1
    //  file nic.linked.opt.aa, line 616
    // (LSTATE == S0)
    $intermediate $W[EQ_u2_u1_1744_wire] : $int<1>
    // ( $mux (LSTATE == S0) S1  _b0  ) 
    $intermediate $W[MUX_1747_wire] : $int<2>
    // (LSTATE == S1)
    $intermediate $W[EQ_u2_u1_1750_wire] : $int<1>
    // ( $mux (LSTATE == S1) S2  _b0  ) 
    $intermediate $W[MUX_1753_wire] : $int<2>
    // (( $mux (LSTATE == S0) S1  _b0  )  | ( $mux (LSTATE == S1) S2  _b0  ) )
    $intermediate $W[OR_u2_u2_1754_wire] : $int<2>
    // (LSTATE == S2)
    $intermediate $W[EQ_u2_u1_1757_wire] : $int<1>
    // ( ~ last_word )
    $intermediate $W[NOT_u1_u1_1759_wire] : $int<1>
    // ((LSTATE == S2) & ( ~ last_word ))
    $intermediate $W[AND_u1_u1_1760_wire] : $int<1>
    // ( $mux ((LSTATE == S2) & ( ~ last_word )) S2  _b0  ) 
    $intermediate $W[MUX_1763_wire] : $int<2>
    // (LSTATE == S2)
    $intermediate $W[EQ_u2_u1_1766_wire] : $int<1>
    // ((LSTATE == S2) & last_word)
    $intermediate $W[AND_u1_u1_1768_wire] : $int<1>
    // ( $mux ((LSTATE == S2) & last_word) S0  _b0  ) 
    $intermediate $W[MUX_1771_wire] : $int<2>
    // (( $mux ((LSTATE == S2) & ( ~ last_word )) S2  _b0  )  | ( $mux ((LSTATE == S2) & last_word) S0  _b0  ) )
    $intermediate $W[OR_u2_u2_1772_wire] : $int<2>
    // nLSTATE
    // 	$volatile tlast := ( $slice RX 72 72 )  $buffering 1
    //  file nic.linked.opt.aa, line 614
    // ( $slice RX 72 72 ) 
    [:] [slice_1734_inst] (RX 72 72) (tlast_1735)  $flowthrough
    $delay slice_1734_inst 0
    // 	$volatile last_word := (tlast == 1 ) $buffering 1
    //  file nic.linked.opt.aa, line 615
    // (tlast == 1 )
    ==[EQ_u1_u1_1739_inst] (tlast_1735 konst_1738_wire_constant) (last_word_1740)   $flowthrough 
    $delay EQ_u1_u1_1739_inst 0
    // 	nLSTATE := ((( $mux (LSTATE == S0) S1  _b0  )  | ( $mux (LSTATE == S1) S2  _b0  ) ) | (( $mux ((LSTATE == S2) & ( ~ last_word )) S2  _b0  )  | ( $mux ((LSTATE == S2) & last_word) S0  _b0  ) )) $buffering 1
    //  file nic.linked.opt.aa, line 616
    // (LSTATE == S0)
    ==[EQ_u2_u1_1744_inst] (LSTATE R_S0_1743_wire_constant) (EQ_u2_u1_1744_wire)   $flowthrough 
    $delay EQ_u2_u1_1744_inst 0
    // ( $mux (LSTATE == S0) S1  _b0  ) 
    ? [MUX_1747_inst] (EQ_u2_u1_1744_wire R_S1_1745_wire_constant konst_1746_wire_constant) (MUX_1747_wire)  $flowthrough
    // (LSTATE == S1)
    ==[EQ_u2_u1_1750_inst] (LSTATE R_S1_1749_wire_constant) (EQ_u2_u1_1750_wire)   $flowthrough 
    $delay EQ_u2_u1_1750_inst 0
    // ( $mux (LSTATE == S1) S2  _b0  ) 
    ? [MUX_1753_inst] (EQ_u2_u1_1750_wire R_S2_1751_wire_constant konst_1752_wire_constant) (MUX_1753_wire)  $flowthrough
    // (( $mux (LSTATE == S0) S1  _b0  )  | ( $mux (LSTATE == S1) S2  _b0  ) )
    |[OR_u2_u2_1754_inst] (MUX_1747_wire MUX_1753_wire) (OR_u2_u2_1754_wire)   $flowthrough 
    $delay OR_u2_u2_1754_inst 0
    // (LSTATE == S2)
    ==[EQ_u2_u1_1757_inst] (LSTATE R_S2_1756_wire_constant) (EQ_u2_u1_1757_wire)   $flowthrough 
    $delay EQ_u2_u1_1757_inst 0
    // ( ~ last_word )
    ~ [NOT_u1_u1_1759_inst] (last_word_1740) (NOT_u1_u1_1759_wire)   $flowthrough
    $delay NOT_u1_u1_1759_inst 0
    // ((LSTATE == S2) & ( ~ last_word ))
    &[AND_u1_u1_1760_inst] (EQ_u2_u1_1757_wire NOT_u1_u1_1759_wire) (AND_u1_u1_1760_wire)   $flowthrough 
    $delay AND_u1_u1_1760_inst 0
    // ( $mux ((LSTATE == S2) & ( ~ last_word )) S2  _b0  ) 
    ? [MUX_1763_inst] (AND_u1_u1_1760_wire R_S2_1761_wire_constant konst_1762_wire_constant) (MUX_1763_wire)  $flowthrough
    // (LSTATE == S2)
    ==[EQ_u2_u1_1766_inst] (LSTATE R_S2_1765_wire_constant) (EQ_u2_u1_1766_wire)   $flowthrough 
    $delay EQ_u2_u1_1766_inst 0
    // ((LSTATE == S2) & last_word)
    &[AND_u1_u1_1768_inst] (EQ_u2_u1_1766_wire last_word_1740) (AND_u1_u1_1768_wire)   $flowthrough 
    $delay AND_u1_u1_1768_inst 0
    // ( $mux ((LSTATE == S2) & last_word) S0  _b0  ) 
    ? [MUX_1771_inst] (AND_u1_u1_1768_wire R_S0_1769_wire_constant konst_1770_wire_constant) (MUX_1771_wire)  $flowthrough
    // (( $mux ((LSTATE == S2) & ( ~ last_word )) S2  _b0  )  | ( $mux ((LSTATE == S2) & last_word) S0  _b0  ) )
    |[OR_u2_u2_1772_inst] (MUX_1763_wire MUX_1771_wire) (OR_u2_u2_1772_wire)   $flowthrough 
    $delay OR_u2_u2_1772_inst 0
    // ((( $mux (LSTATE == S0) S1  _b0  )  | ( $mux (LSTATE == S1) S2  _b0  ) ) | (( $mux ((LSTATE == S2) & ( ~ last_word )) S2  _b0  )  | ( $mux ((LSTATE == S2) & last_word) S0  _b0  ) ))
    |[OR_u2_u2_1773_inst] (OR_u2_u2_1754_wire OR_u2_u2_1772_wire) (nLSTATE)   
    $buffering  $out OR_u2_u2_1773_inst nLSTATE 1
    $delay OR_u2_u2_1773_inst 1
  }
  // end data-path
  // Volatile module.. no links.
}
$module [nicRxFromMacDaemon] 
{
  // pipe-declarations for block %nicRxFromMacDaemon
  //  file nic.linked.opt.aa, line 618
  // pipe-declarations for block %nicRxFromMacDaemon%loop
  //  file nic.linked.opt.aa, line 623
  // pipe-declarations for block %nicRxFromMacDaemon%loop%
  //  file nic.linked.opt.aa, line 626
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    <>[branch_block_stmt_1777] // Branch Block  file nic.linked.opt.aa, line 623
    {
      $P [branch_block_stmt_1777__entry__]
      branch_block_stmt_1777__entry__ <-| ($entry)
      $P [branch_block_stmt_1777__exit__]
      branch_block_stmt_1777__exit__ |-> ($exit)
      $P [merge_stmt_1779__entry__] 
      $P [merge_stmt_1779__exit__] 
      $P [call_stmt_1789__entry__] 
      $P [call_stmt_1789__exit__] 
      $P [if_stmt_1790__entry__] 
      $P [if_stmt_1790__exit__] 
      $P [call_stmt_1807__entry__] 
      $P [call_stmt_1807__exit__] 
      $P [do_while_stmt_1808__entry__] 
      $P [do_while_stmt_1808__exit__] 
      $P [disable_loopback]
      ::[call_stmt_1789] 
      {
        // start: 		$call AccessRegister (($bitcast ($uint<1>) _b0  ) ( ~ ($bitcast ($uint<4>) _b0  ) ) 22  ($bitcast ($uint<32>) _b0  ) ) (ignore_resp0 ) 
        //  file nic.linked.opt.aa, line 628
        $T[call_stmt_1789_sample_start_] 
        $T[call_stmt_1789_sample_completed_] 
        $T[call_stmt_1789_update_start_] 
        $T[call_stmt_1789_update_completed_] 
        // Call input argument 0
        // Call input argument 1
        // Call input argument 2
        // Call input argument 3
        ;;[call_stmt_1789_Sample] 
        {
          $T [crr] $T [cra] 
        }
        ;;[call_stmt_1789_Update] 
        {
          $T [ccr] $T [cca] 
        }
        call_stmt_1789_sample_start_ &-> (call_stmt_1789_Sample)
        call_stmt_1789_sample_completed_ <-& (call_stmt_1789_Sample)
        call_stmt_1789_sample_completed_ &-> ($null)
        call_stmt_1789_update_start_ &-> (call_stmt_1789_Update)
        call_stmt_1789_update_completed_ <-& (call_stmt_1789_Update)
        // Call output argument 0
        // (as target) ignore_resp0
        // start: WAR dependencies for ignore_resp0
        // done: WAR dependencies for ignore_resp0
        // end: 		$call AccessRegister (($bitcast ($uint<1>) _b0  ) ( ~ ($bitcast ($uint<4>) _b0  ) ) 22  ($bitcast ($uint<32>) _b0  ) ) (ignore_resp0 ) 
        // load-store dependencies..
        // pipe read/write dependencies for pipe NIC_REQUEST_REGISTER_ACCESS_PIPE
        // read-dependencies for pipe NIC_REQUEST_REGISTER_ACCESS_PIPE
        // write-dependencies for pipe NIC_REQUEST_REGISTER_ACCESS_PIPE
        // signal write dependencies for NIC_REQUEST_REGISTER_ACCESS_PIPE
        // pipe read/write dependencies for pipe NIC_RESPONSE_REGISTER_ACCESS_PIPE
        // read-dependencies for pipe NIC_RESPONSE_REGISTER_ACCESS_PIPE
        // write-dependencies for pipe NIC_RESPONSE_REGISTER_ACCESS_PIPE
        // signal write dependencies for NIC_RESPONSE_REGISTER_ACCESS_PIPE
      }
      call_stmt_1789__entry__ |-> (call_stmt_1789)
      call_stmt_1789__exit__ <-| (call_stmt_1789)
      // if-statement  
      //  file nic.linked.opt.aa, line 39906368
      ;;[if_stmt_1790_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      if_stmt_1790__entry__ |-> (if_stmt_1790_dead_link)
      if_stmt_1790__exit__ <-| (if_stmt_1790_dead_link)
      ;;[if_stmt_1790_eval_test] 
      {
        // test expression evaluate and trigger branch 
        // ( ~ (CONTROL_REGISTER [] 0 ) )
        ;;[NOT_u1_u1_1794] 
        {
          // unary expression 
          // (CONTROL_REGISTER [] 0 )
          ;;[BITSEL_u32_u1_1793] 
          {
            // binary expression 
            ||[BITSEL_u32_u1_1793_inputs] 
            {
              // CONTROL_REGISTER
              ;;[RPIPE_CONTROL_REGISTER_1791] 
              {
                // pipe read
                ;;[Sample] 
                {
                  $T [req] $T [ack] 
                }
                ;;[Update] 
                {
                  $T [req] $T [ack] 
                }
              }
            }
            // flow-through
            ;;[SplitProtocol] 
            {
              ;;[Sample] 
              {
                $T [rr] $T [ra]
              }
              ;;[Update] 
              {
                $T [cr] $T [ca]
              }
            }
          }
          // flow-through
          ;;[SplitProtocol] 
          {
            ;;[Sample] 
            {
              $T [rr] $T [ra]
            }
            ;;[Update] 
            {
              $T [cr] $T [ca]
            }
          }
        }
        $T [branch_req] 
      }
      if_stmt_1790__entry__ |-> (if_stmt_1790_eval_test)
      $P [NOT_u1_u1_1794_place]
      NOT_u1_u1_1794_place <-| (if_stmt_1790_eval_test)
      ;;[if_stmt_1790_if_link] 
      {
        $T [if_choice_transition] 
      }
      ;;[if_stmt_1790_else_link] 
      {
        $T [else_choice_transition] 
      }
      NOT_u1_u1_1794_place |-> (if_stmt_1790_if_link if_stmt_1790_else_link)
      $P [not_enabled_yet_loopback]
      not_enabled_yet_loopback <-| (if_stmt_1790_if_link)
      if_stmt_1790__exit__ <-| (if_stmt_1790_else_link)
      ::[call_stmt_1807] 
      {
        // start: 		$call AccessRegister (($bitcast ($uint<1>) _b0  ) ( ~ ($bitcast ($uint<4>) _b0  ) ) 22  ($bitcast ($uint<32>) _b1  ) ) (ignore_resp1 ) 
        //  file nic.linked.opt.aa, line 633
        $T[call_stmt_1807_sample_start_] 
        $T[call_stmt_1807_sample_completed_] 
        $T[call_stmt_1807_update_start_] 
        $T[call_stmt_1807_update_completed_] 
        // Call input argument 0
        // Call input argument 1
        // Call input argument 2
        // Call input argument 3
        ;;[call_stmt_1807_Sample] 
        {
          $T [crr] $T [cra] 
        }
        ;;[call_stmt_1807_Update] 
        {
          $T [ccr] $T [cca] 
        }
        call_stmt_1807_sample_start_ &-> (call_stmt_1807_Sample)
        call_stmt_1807_sample_completed_ <-& (call_stmt_1807_Sample)
        call_stmt_1807_sample_completed_ &-> ($null)
        call_stmt_1807_update_start_ &-> (call_stmt_1807_Update)
        call_stmt_1807_update_completed_ <-& (call_stmt_1807_Update)
        // Call output argument 0
        // (as target) ignore_resp1
        // start: WAR dependencies for ignore_resp1
        // done: WAR dependencies for ignore_resp1
        // end: 		$call AccessRegister (($bitcast ($uint<1>) _b0  ) ( ~ ($bitcast ($uint<4>) _b0  ) ) 22  ($bitcast ($uint<32>) _b1  ) ) (ignore_resp1 ) 
        // load-store dependencies..
        // pipe read/write dependencies for pipe NIC_REQUEST_REGISTER_ACCESS_PIPE
        // read-dependencies for pipe NIC_REQUEST_REGISTER_ACCESS_PIPE
        // write-dependencies for pipe NIC_REQUEST_REGISTER_ACCESS_PIPE
        // signal write dependencies for NIC_REQUEST_REGISTER_ACCESS_PIPE
        // pipe read/write dependencies for pipe NIC_RESPONSE_REGISTER_ACCESS_PIPE
        // read-dependencies for pipe NIC_RESPONSE_REGISTER_ACCESS_PIPE
        // write-dependencies for pipe NIC_RESPONSE_REGISTER_ACCESS_PIPE
        // signal write dependencies for NIC_RESPONSE_REGISTER_ACCESS_PIPE
      }
      call_stmt_1807__entry__ |-> (call_stmt_1807)
      call_stmt_1807__exit__ <-| (call_stmt_1807)
      // do-while-statement  
      //  file nic.linked.opt.aa, line 634
      <o> [do_while_stmt_1808]  $depth 7 $buffering 1 
      {
        $P[do_while_stmt_1808__entry__] 
        $P[do_while_stmt_1808__exit__] 
        $P[loop_back] 
        $P[condition_done] 
        $P[loop_body_done] 
        $pipeline [do_while_stmt_1808_loop_body] 
        {
          // Pipelined!
          $T[back_edge_to_loop_body] 
          $T[first_time_through_loop_body] 
          $T[loop_body_start] 
          $T[condition_evaluated] 
          $transitionmerge [entry_tmerge] (back_edge_to_loop_body first_time_through_loop_body) (loop_body_start)
          $entry <-& (loop_body_start)
          $T[aggregated_phi_sample_req] 
          $T[aggregated_phi_sample_ack] 
          $T[aggregated_phi_update_req] 
          $T[aggregated_phi_update_ack] 
          // do not loop-back unless all phi's have used up their triggering tokens.
          condition_evaluated <-& (aggregated_phi_update_ack)
          aggregated_phi_sample_req o<-& (aggregated_phi_update_ack 0)
          // start:  PHI statement phi_stmt_1810
          // 			$phi LSTATE := 			  S0 $on   $entry 			  nLSTATE $on   $loopback 
          // type of target is $uint<2>
          $T[phi_stmt_1810_sample_start_] 
          $T[phi_stmt_1810_sample_completed_] 
          $T[phi_stmt_1810_update_start_] 
          $T[phi_stmt_1810_update_completed_] 
          $T[phi_stmt_1810_sample_start__ps] 
          phi_stmt_1810_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_1810_sample_completed__ps] 
          phi_stmt_1810_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_1810_update_start__ps] 
          phi_stmt_1810_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_1810_update_completed__ps] 
          phi_stmt_1810_update_completed_ <-& (phi_stmt_1810_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_1810_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_1810_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_1810_update_start_)
          $T[phi_stmt_1810_loopback_trigger] 
          phi_stmt_1810_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_1810_loopback_sample_req] 
          $T[phi_stmt_1810_loopback_sample_req_ps] 
          phi_stmt_1810_loopback_sample_req <-& (phi_stmt_1810_loopback_sample_req_ps)
          phi_stmt_1810_loopback_sample_req &-> ($null)
          $T[phi_stmt_1810_entry_trigger] 
          phi_stmt_1810_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_1810_entry_sample_req] 
          $T[phi_stmt_1810_entry_sample_req_ps] 
          phi_stmt_1810_entry_sample_req <-& (phi_stmt_1810_entry_sample_req_ps)
          phi_stmt_1810_entry_sample_req &-> ($null)
          phi_stmt_1810_update_start_ o<-& (phi_stmt_1810_update_completed_ 0)
          phi_stmt_1810_sample_start_ o<-& (phi_stmt_1810_sample_completed_ 1)
          $T[phi_stmt_1810_merged_reqs] 
          $T[phi_stmt_1810_phi_mux_ack] 
          $T[phi_stmt_1810_phi_mux_ack_ps] 
          phi_stmt_1810_phi_mux_ack_ps <-& (phi_stmt_1810_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_1810_update_completed_)
          $T[R_nLSTATE_1812_sample_start__ps] 
          $T[R_nLSTATE_1812_sample_completed__ps] 
          $T[R_nLSTATE_1812_update_start__ps] 
          $T[R_nLSTATE_1812_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 0
          $T[R_nLSTATE_1812_sample_start_] 
          $T[R_nLSTATE_1812_sample_completed_] 
          $T[R_nLSTATE_1812_update_start_] 
          $T[R_nLSTATE_1812_update_completed_] 
          ;;[R_nLSTATE_1812_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_nLSTATE_1812_sample_start_ &-> (R_nLSTATE_1812_Sample)
          R_nLSTATE_1812_sample_completed_ <-& (R_nLSTATE_1812_Sample)
          ;;[R_nLSTATE_1812_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_nLSTATE_1812_update_start_ &-> (R_nLSTATE_1812_Update)
          R_nLSTATE_1812_update_completed_ <-& (R_nLSTATE_1812_Update)
          // RAW reenables for nLSTATE
          // Phi start dependency for implicit/constant alternative.
          R_nLSTATE_1812_sample_start_ <-& (R_nLSTATE_1812_sample_start__ps)
          R_nLSTATE_1812_update_start_ <-& (R_nLSTATE_1812_update_start__ps)
          // Phi complete dependency.
          R_nLSTATE_1812_sample_completed__ps <-& (R_nLSTATE_1812_sample_completed_)
          R_nLSTATE_1812_update_completed__ps <-& (R_nLSTATE_1812_update_completed_)
          $T[R_S0_1813_sample_start__ps] 
          $T[R_S0_1813_sample_completed__ps] 
          $T[R_S0_1813_update_start__ps] 
          $T[R_S0_1813_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[R_S0_1813_sample_start_] 
          $T[R_S0_1813_sample_completed_] 
          R_S0_1813_sample_completed_ <-& (R_S0_1813_sample_start_)
          $T[R_S0_1813_update_start_] 
          $T [R_S0_1813_update_completed_] $delay 
          R_S0_1813_update_completed_ <-& (R_S0_1813_update_start_)
          // Phi start dependency for implicit/constant alternative.
          R_S0_1813_sample_start_ <-& (R_S0_1813_sample_start__ps)
          R_S0_1813_update_start_ <-& (R_S0_1813_update_start__ps)
          // Phi complete dependency.
          R_S0_1813_sample_completed__ps <-& (R_S0_1813_sample_completed_)
          R_S0_1813_update_completed__ps <-& (R_S0_1813_update_completed_)
          $phisequencer [ phi_stmt_1810_phi_seq] : 
          phi_stmt_1810_loopback_trigger R_nLSTATE_1812_sample_start__ps R_nLSTATE_1812_sample_completed__ps R_nLSTATE_1812_update_start__ps R_nLSTATE_1812_update_completed__ps phi_stmt_1810_entry_trigger R_S0_1813_sample_start__ps R_S0_1813_sample_completed__ps R_S0_1813_update_start__ps R_S0_1813_update_completed__ps :
          phi_stmt_1810_sample_start__ps phi_stmt_1810_sample_completed__ps phi_stmt_1810_update_start__ps phi_stmt_1810_update_completed__ps :
          phi_stmt_1810_loopback_sample_req_ps phi_stmt_1810_entry_sample_req_ps : 
          phi_stmt_1810_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_1810
          // start:  single source PHI statement phi_stmt_1814
          // 			$phi RX := 			  mac_to_nic_data $on   $entry ,   $loopback 
          // type of target is $uint<73>
          $T[phi_stmt_1814_sample_start_] 
          $T[phi_stmt_1814_sample_completed_] 
          $T[phi_stmt_1814_update_start_] 
          $T[phi_stmt_1814_update_completed_] 
          aggregated_phi_sample_req <-& (phi_stmt_1814_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_1814_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_1814_update_start_)
          // non-implicit source expression in single-source phi
          // mac_to_nic_data
          $T[RPIPE_mac_to_nic_data_1816_sample_start_] 
          $T[RPIPE_mac_to_nic_data_1816_sample_completed_] 
          $T[RPIPE_mac_to_nic_data_1816_update_start_] 
          $T[RPIPE_mac_to_nic_data_1816_update_completed_] 
          ;;[RPIPE_mac_to_nic_data_1816_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_mac_to_nic_data_1816_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_mac_to_nic_data_1816_sample_start_ &-> (RPIPE_mac_to_nic_data_1816_Sample)
          RPIPE_mac_to_nic_data_1816_sample_completed_ <-& (RPIPE_mac_to_nic_data_1816_Sample)
          RPIPE_mac_to_nic_data_1816_update_start_ <-& (RPIPE_mac_to_nic_data_1816_sample_completed_)
          RPIPE_mac_to_nic_data_1816_update_start_ &-> (RPIPE_mac_to_nic_data_1816_Update)
          RPIPE_mac_to_nic_data_1816_update_completed_ <-& (RPIPE_mac_to_nic_data_1816_Update)
          RPIPE_mac_to_nic_data_1816_sample_start_ o<-& (RPIPE_mac_to_nic_data_1816_update_completed_ 0)
          // RAW reenables for mac_to_nic_data
          // producer  and  consumer are both determined by PHI statements.
          aggregated_phi_sample_req &-> (RPIPE_mac_to_nic_data_1816_sample_start_)
          aggregated_phi_sample_ack <-& (RPIPE_mac_to_nic_data_1816_sample_completed_)
          aggregated_phi_update_req &-> (RPIPE_mac_to_nic_data_1816_update_start_)
          phi_stmt_1814_update_completed_ <-& (RPIPE_mac_to_nic_data_1816_update_completed_)
          aggregated_phi_update_ack <-& (phi_stmt_1814_update_completed_)
          // done: PHI Statement phi_stmt_1814
          // start: WAR dependencies for nLSTATE
          // WAR dependency: Read: nLSTATE before Write:  $volatile 			$call nextLSTATE (RX LSTATE ) (nLSTATE ) 
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for nLSTATE
          // start:  $volatile 			$call nextLSTATE (RX LSTATE ) (nLSTATE ) 
          //  file nic.linked.opt.aa, line 643
          // volatile! 
          // Call input argument 0
          // RX
          // Call input argument 1
          // LSTATE
          // Call output argument 0
          // (as target) nLSTATE
          // start: WAR dependencies for nLSTATE
          // WAR dependency: Read: nLSTATE before Write:  $volatile 			$call nextLSTATE (RX LSTATE ) (nLSTATE ) 
          //  WAR  PHI-PHI dependency ignored...
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for nLSTATE
          // end:  $volatile 			$call nextLSTATE (RX LSTATE ) (nLSTATE ) 
          // start: WAR dependencies for write_to_header
          // done: WAR dependencies for write_to_header
          // start:  			$volatile write_to_header := ((LSTATE == S0) | (LSTATE == S1)) $buffering 1
          //  file nic.linked.opt.aa, line 644
          // volatile! 
          // Source expression
          // ((LSTATE == S0) | (LSTATE == S1))
          // (LSTATE == S0)
          // LSTATE
          // (LSTATE == S1)
          // LSTATE
          // Target expression
          // (as target) write_to_header
          // start: WAR dependencies for write_to_header
          // done: WAR dependencies for write_to_header
          // end:  			$volatile write_to_header := ((LSTATE == S0) | (LSTATE == S1)) $buffering 1
          // start:  			$guard (write_to_header) nic_rx_to_header := ( $mux (LSTATE == S1) (( $slice RX 72 8 )  && HEADER_TKEEP)  RX )  $buffering 1// bits of buffering = 73. 
          //  file nic.linked.opt.aa, line 645
          // Guard expression 
          // write_to_header
          // Source expression
          // ( $mux (LSTATE == S1) (( $slice RX 72 8 )  && HEADER_TKEEP)  RX ) 
          $T[MUX_1844_sample_start_] 
          $T[MUX_1844_sample_completed_] 
          $T[MUX_1844_update_start_] 
          $T[MUX_1844_update_completed_] 
          // Guard dependency for expression MUX_1844 with guard R_write_to_header_1834
          MUX_1844_sample_start_ <-& (phi_stmt_1810_update_completed_)
          // RAW reenables for write_to_header
          phi_stmt_1810_update_start_ o<-& (MUX_1844_sample_completed_ 0)
          // (LSTATE == S1)
          // LSTATE
          // (( $slice RX 72 8 )  && HEADER_TKEEP)
          // ( $slice RX 72 8 ) 
          // RX
          // RX
          // start: Forward dependencies from (LSTATE == S1) to transition MUX_1844_sample_start_
          MUX_1844_sample_start_ <-& (phi_stmt_1810_update_completed_)
          // done: Forward dependencies from (LSTATE == S1) to transition MUX_1844_sample_start_
          // start: Forward dependencies from (( $slice RX 72 8 )  && HEADER_TKEEP) to transition MUX_1844_sample_start_
          MUX_1844_sample_start_ <-& (phi_stmt_1814_update_completed_)
          // done: Forward dependencies from (( $slice RX 72 8 )  && HEADER_TKEEP) to transition MUX_1844_sample_start_
          // start: Forward dependencies from RX to transition MUX_1844_sample_start_
          MUX_1844_sample_start_ <-& (phi_stmt_1814_update_completed_)
          // done: Forward dependencies from RX to transition MUX_1844_sample_start_
          ;;[MUX_1844_start] 
          {
            // ternary expression: 
            $T [req] $T [ack] // sample req/ack
          }
          ;;[MUX_1844_complete] 
          {
            // ternary expression: 
            $T [req] $T [ack] // update req/ack
          }
          MUX_1844_sample_start_ &-> (MUX_1844_start)
          MUX_1844_sample_completed_ <-& (MUX_1844_start)
          MUX_1844_sample_completed_ &-> ($null)
          MUX_1844_update_start_ &-> (MUX_1844_complete)
          MUX_1844_update_completed_ <-& (MUX_1844_complete)
          // RAW reenables for (LSTATE == S1)
          phi_stmt_1810_update_start_ o<-& (MUX_1844_sample_completed_ 0)
          // RAW reenables for (( $slice RX 72 8 )  && HEADER_TKEEP)
          phi_stmt_1814_update_start_ o<-& (MUX_1844_sample_completed_ 0)
          // RAW reenables for RX
          phi_stmt_1814_update_start_ o<-& (MUX_1844_sample_completed_ 0)
          // self-release: 
          MUX_1844_sample_start_ o<-& (MUX_1844_sample_completed_ 1)
          $null &-> (MUX_1844_update_start_)
          MUX_1844_update_start_ o<-& (MUX_1844_update_completed_ 0)
          // Target expression
          // (as target) nic_rx_to_header
          $T[WPIPE_nic_rx_to_header_1835_sample_start_] 
          $T[WPIPE_nic_rx_to_header_1835_sample_completed_] 
          $T[WPIPE_nic_rx_to_header_1835_update_start_] 
          $T[WPIPE_nic_rx_to_header_1835_update_completed_] 
          // Guard dependency for expression WPIPE_nic_rx_to_header_1835 with guard R_write_to_header_1834
          WPIPE_nic_rx_to_header_1835_sample_start_ <-& (phi_stmt_1810_update_completed_)
          // RAW reenables for write_to_header
          phi_stmt_1810_update_start_ o<-& (WPIPE_nic_rx_to_header_1835_sample_completed_ 0)
          ;;[WPIPE_nic_rx_to_header_1835_Sample] 
          {
            // pipe write sample-start nic_rx_to_header
            $T [req] $T [ack] 
          }
          ;;[WPIPE_nic_rx_to_header_1835_Update] 
          {
            // pipe write update (complete) nic_rx_to_header
            $T [req] $T [ack] 
          }
          WPIPE_nic_rx_to_header_1835_sample_start_ &-> (WPIPE_nic_rx_to_header_1835_Sample)
          WPIPE_nic_rx_to_header_1835_sample_completed_ <-& (WPIPE_nic_rx_to_header_1835_Sample)
          WPIPE_nic_rx_to_header_1835_update_start_ <-& (WPIPE_nic_rx_to_header_1835_sample_completed_)
          WPIPE_nic_rx_to_header_1835_update_start_ &-> (WPIPE_nic_rx_to_header_1835_Update)
          WPIPE_nic_rx_to_header_1835_update_completed_ <-& (WPIPE_nic_rx_to_header_1835_Update)
          WPIPE_nic_rx_to_header_1835_sample_start_ o<-& (WPIPE_nic_rx_to_header_1835_update_completed_ 0)
          // start: Forward dependencies from ( $mux (LSTATE == S1) (( $slice RX 72 8 )  && HEADER_TKEEP)  RX )  to transition WPIPE_nic_rx_to_header_1835_sample_start_
          WPIPE_nic_rx_to_header_1835_sample_start_ <-& (MUX_1844_update_completed_)
          // done: Forward dependencies from ( $mux (LSTATE == S1) (( $slice RX 72 8 )  && HEADER_TKEEP)  RX )  to transition WPIPE_nic_rx_to_header_1835_sample_start_
          // RAW reenables for ( $mux (LSTATE == S1) (( $slice RX 72 8 )  && HEADER_TKEEP)  RX ) 
          MUX_1844_update_start_ o<-& (WPIPE_nic_rx_to_header_1835_sample_completed_ 0)
          // end:  			$guard (write_to_header) nic_rx_to_header := ( $mux (LSTATE == S1) (( $slice RX 72 8 )  && HEADER_TKEEP)  RX )  $buffering 1// bits of buffering = 73. 
          // start:  			nic_rx_to_packet := RX $buffering 1// bits of buffering = 73. 
          //  file nic.linked.opt.aa, line 646
          // Source expression
          // RX
          // Target expression
          // (as target) nic_rx_to_packet
          $T[WPIPE_nic_rx_to_packet_1846_sample_start_] 
          $T[WPIPE_nic_rx_to_packet_1846_sample_completed_] 
          $T[WPIPE_nic_rx_to_packet_1846_update_start_] 
          $T[WPIPE_nic_rx_to_packet_1846_update_completed_] 
          ;;[WPIPE_nic_rx_to_packet_1846_Sample] 
          {
            // pipe write sample-start nic_rx_to_packet
            $T [req] $T [ack] 
          }
          ;;[WPIPE_nic_rx_to_packet_1846_Update] 
          {
            // pipe write update (complete) nic_rx_to_packet
            $T [req] $T [ack] 
          }
          WPIPE_nic_rx_to_packet_1846_sample_start_ &-> (WPIPE_nic_rx_to_packet_1846_Sample)
          WPIPE_nic_rx_to_packet_1846_sample_completed_ <-& (WPIPE_nic_rx_to_packet_1846_Sample)
          WPIPE_nic_rx_to_packet_1846_update_start_ <-& (WPIPE_nic_rx_to_packet_1846_sample_completed_)
          WPIPE_nic_rx_to_packet_1846_update_start_ &-> (WPIPE_nic_rx_to_packet_1846_Update)
          WPIPE_nic_rx_to_packet_1846_update_completed_ <-& (WPIPE_nic_rx_to_packet_1846_Update)
          WPIPE_nic_rx_to_packet_1846_sample_start_ o<-& (WPIPE_nic_rx_to_packet_1846_update_completed_ 0)
          // start: Forward dependencies from RX to transition WPIPE_nic_rx_to_packet_1846_sample_start_
          WPIPE_nic_rx_to_packet_1846_sample_start_ <-& (phi_stmt_1814_update_completed_)
          // done: Forward dependencies from RX to transition WPIPE_nic_rx_to_packet_1846_sample_start_
          // RAW reenables for RX
          phi_stmt_1814_update_start_ o<-& (WPIPE_nic_rx_to_packet_1846_sample_completed_ 0)
          // end:  			nic_rx_to_packet := RX $buffering 1// bits of buffering = 73. 
          // (CONTROL_REGISTER [] 0 )
          // CONTROL_REGISTER
          $T [loop_body_delay_to_condition_start] $delay
          loop_body_start &-> (loop_body_delay_to_condition_start)
          loop_body_delay_to_condition_start &-> (condition_evaluated)
          // start: Forward dependencies from (CONTROL_REGISTER [] 0 ) to transition condition_evaluated
          // non-constant expression which depends only on signals/constants?
          // done: Forward dependencies from (CONTROL_REGISTER [] 0 ) to transition condition_evaluated
          condition_evaluated &-> ($null)
          // load-store dependencies..
          // pipe read/write dependencies for pipe mac_to_nic_data
          // read-dependencies for pipe mac_to_nic_data
          // write-dependencies for pipe mac_to_nic_data
          // signal write dependencies for mac_to_nic_data
          // pipe read/write dependencies for pipe nic_rx_to_header
          // read-dependencies for pipe nic_rx_to_header
          // write-dependencies for pipe nic_rx_to_header
          // signal write dependencies for nic_rx_to_header
          // pipe read/write dependencies for pipe nic_rx_to_packet
          // read-dependencies for pipe nic_rx_to_packet
          // write-dependencies for pipe nic_rx_to_packet
          // signal write dependencies for nic_rx_to_packet
        }
        ( first_time_through_loop_body  back_edge_to_loop_body) 
        ( condition_evaluated )
        ;; [loop_exit] 
        {
          $T [ack] 
        }
        ;; [loop_taken] 
        {
          $T [ack] 
        }
        do_while_stmt_1808__entry__ <-| ($entry)
        loop_body_done <-| ( do_while_stmt_1808_loop_body ) 
        condition_done |-> (loop_exit loop_taken)
        do_while_stmt_1808__exit__ |-> ($exit)
        $bind condition_done <= do_while_stmt_1808_loop_body : condition_evaluated
        $bind do_while_stmt_1808__entry__  => do_while_stmt_1808_loop_body : first_time_through_loop_body 
        $bind loop_back  => do_while_stmt_1808_loop_body : back_edge_to_loop_body 
        $terminate (loop_exit loop_taken loop_body_done) (loop_back do_while_stmt_1808__exit__)
      }
      do_while_stmt_1808__entry__ |-> (do_while_stmt_1808)
      do_while_stmt_1808__exit__ <-| (do_while_stmt_1808)
      // control-path for merge  
      //  file nic.linked.opt.aa, line 626
      ;;[merge_stmt_1779_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      merge_stmt_1779__entry__ |-> (merge_stmt_1779_dead_link)
      merge_stmt_1779__exit__ <-| (merge_stmt_1779_dead_link)
      //---------------------   merge statement  file nic.linked.opt.aa, line 626  --------------------------
      ||[merge_stmt_1779__entry___PhiReq] 
      {
        // no phi statements in merge..
      }
      merge_stmt_1779__entry__ |-> (merge_stmt_1779__entry___PhiReq)
      ||[disable_loopback_PhiReq] 
      {
        // no phi statements in merge..
      }
      disable_loopback |-> (disable_loopback_PhiReq)
      ||[not_enabled_yet_loopback_PhiReq] 
      {
        // no phi statements in merge..
      }
      not_enabled_yet_loopback |-> (not_enabled_yet_loopback_PhiReq)
      $P [merge_stmt_1779_PhiReqMerge] 
      merge_stmt_1779_PhiReqMerge <-| ( merge_stmt_1779__entry___PhiReq  disable_loopback_PhiReq  not_enabled_yet_loopback_PhiReq )
      ||[merge_stmt_1779_PhiAck] 
      {
        $T [dummy] 
      }
      merge_stmt_1779_PhiReqMerge |-> (merge_stmt_1779_PhiAck)
      merge_stmt_1779__exit__  <-| (merge_stmt_1779_PhiAck)
      //---------------------  end of merge statement  file nic.linked.opt.aa, line 626  --------------------------
      merge_stmt_1779__entry__ <-| (branch_block_stmt_1777__entry__)
      call_stmt_1789__entry__ <-| (merge_stmt_1779__exit__)
      if_stmt_1790__entry__ <-| (call_stmt_1789__exit__)
      call_stmt_1807__entry__ <-| (if_stmt_1790__exit__)
      do_while_stmt_1808__entry__ <-| (call_stmt_1807__exit__)
      disable_loopback <-| (do_while_stmt_1808__exit__)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %nicRxFromMacDaemon%loop%
    //  file nic.linked.opt.aa, line 626
    // constant-object-declarations for block %nicRxFromMacDaemon%loop%
    //  file nic.linked.opt.aa, line 636
    // constant-object-declarations for block %nicRxFromMacDaemon%loop
    //  file nic.linked.opt.aa, line 623
    // constant-object-declarations for block %nicRxFromMacDaemon
    //  file nic.linked.opt.aa, line 618
    // constant-declarations for block %nicRxFromMacDaemon%loop
    //  file nic.linked.opt.aa, line 623
    // constant-declarations for block %nicRxFromMacDaemon%loop%
    //  file nic.linked.opt.aa, line 626
    // 		$call AccessRegister (($bitcast ($uint<1>) _b0  ) ( ~ ($bitcast ($uint<4>) _b0  ) ) 22  ($bitcast ($uint<32>) _b0  ) ) (ignore_resp0 ) 
    //  file nic.linked.opt.aa, line 628
    // ($bitcast ($uint<1>) _b0  )
    $constant $W[type_cast_1781_wire_constant] : $int<1> := _b0// 0
    // ( ~ ($bitcast ($uint<4>) _b0  ) )
    $constant $W[NOT_u4_u4_1784_wire_constant] : $int<4> := _b1111// -1
    // 22 
    $constant $W[konst_1785_wire_constant] : $int<6> := _b010110// 22
    // ($bitcast ($uint<32>) _b0  )
    $constant $W[type_cast_1787_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // if-statement  
    //  file nic.linked.opt.aa, line 39906368
    // 0 
    $constant $W[konst_1792_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // 		$call AccessRegister (($bitcast ($uint<1>) _b0  ) ( ~ ($bitcast ($uint<4>) _b0  ) ) 22  ($bitcast ($uint<32>) _b1  ) ) (ignore_resp1 ) 
    //  file nic.linked.opt.aa, line 633
    // ($bitcast ($uint<1>) _b0  )
    $constant $W[type_cast_1799_wire_constant] : $int<1> := _b0// 0
    // ( ~ ($bitcast ($uint<4>) _b0  ) )
    $constant $W[NOT_u4_u4_1802_wire_constant] : $int<4> := _b1111// -1
    // 22 
    $constant $W[konst_1803_wire_constant] : $int<6> := _b010110// 22
    // ($bitcast ($uint<32>) _b1  )
    $constant $W[type_cast_1805_wire_constant] : $int<32> := _b00000000000000000000000000000001// 1
    // do-while statement  
    //  file nic.linked.opt.aa, line 634
    // 0 
    $constant $W[konst_1854_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // constant-declarations for block %nicRxFromMacDaemon%loop%
    //  file nic.linked.opt.aa, line 636
    // constant-declarations for phi:  			$phi LSTATE := 			  S0 $on   $entry 			  nLSTATE $on   $loopback 
    // type of target is $uint<2>
    //  file nic.linked.opt.aa, line 637
    // S0
    $constant $W[R_S0_1813_wire_constant] : $int<2> := _b00// 0
    // constant-declarations for phi:  			$phi RX := 			  mac_to_nic_data $on   $entry ,   $loopback 
    // type of target is $uint<73>
    //  file nic.linked.opt.aa, line 639
    //  $volatile 			$call nextLSTATE (RX LSTATE ) (nLSTATE ) 
    //  file nic.linked.opt.aa, line 643
    // S0
    $constant $W[R_S0_1827_wire_constant] : $int<2> := _b00// 0
    // S1
    $constant $W[R_S1_1830_wire_constant] : $int<2> := _b01// 1
    // ( $mux (LSTATE == S1) (( $slice RX 72 8 )  && HEADER_TKEEP)  RX ) 
    // S1
    $constant $W[R_S1_1837_wire_constant] : $int<2> := _b01// 1
    // HEADER_TKEEP
    $constant $W[R_HEADER_TKEEP_1841_wire_constant] : $int<8> := _b00111111// 63
    // block %nicRxFromMacDaemon%loop
    //  file nic.linked.opt.aa, line 623
    // 		$call AccessRegister (($bitcast ($uint<1>) _b0  ) ( ~ ($bitcast ($uint<4>) _b0  ) ) 22  ($bitcast ($uint<32>) _b0  ) ) (ignore_resp0 ) 
    //  file nic.linked.opt.aa, line 628
    // ignore_resp0
    $W[ignore_resp0_1789] : $int<32>
    // if statement  
    //  file nic.linked.opt.aa, line 39906368
    // CONTROL_REGISTER
    $W[RPIPE_CONTROL_REGISTER_1791_wire] : $int<32>
    // (CONTROL_REGISTER [] 0 )
    $intermediate $W[BITSEL_u32_u1_1793_wire] : $int<1>
    // ( ~ (CONTROL_REGISTER [] 0 ) )
    $intermediate $W[NOT_u1_u1_1794_wire] : $int<1>
    // 		$call AccessRegister (($bitcast ($uint<1>) _b0  ) ( ~ ($bitcast ($uint<4>) _b0  ) ) 22  ($bitcast ($uint<32>) _b1  ) ) (ignore_resp1 ) 
    //  file nic.linked.opt.aa, line 633
    // ignore_resp1
    $W[ignore_resp1_1807] : $int<32>
    // do-while statement  
    //  file nic.linked.opt.aa, line 634
    // CONTROL_REGISTER
    $W[RPIPE_CONTROL_REGISTER_1853_wire] : $int<32>
    // (CONTROL_REGISTER [] 0 )
    $intermediate $W[BITSEL_u32_u1_1855_wire] : $int<1>
    // merge-statement  
    //  file nic.linked.opt.aa, line 636
    // 			$phi LSTATE := 			  S0 $on   $entry 			  nLSTATE $on   $loopback 
    // type of target is $uint<2>
    //  file nic.linked.opt.aa, line 637
    $W[nLSTATE_1824_1812_buffered] : $int<2>
    // LSTATE
    $W[LSTATE_1810] : $int<2>
    // 			$phi RX := 			  mac_to_nic_data $on   $entry ,   $loopback 
    // type of target is $uint<73>
    //  file nic.linked.opt.aa, line 639
    // mac_to_nic_data
    $W[RPIPE_mac_to_nic_data_1816_wire] : $int<73>
    // RX
    $W[RX_1814] : $int<73>
    //  $volatile 			$call nextLSTATE (RX LSTATE ) (nLSTATE ) 
    //  file nic.linked.opt.aa, line 643
    // nLSTATE
    $W[nLSTATE_1824] : $int<2>
    // 			$volatile write_to_header := ((LSTATE == S0) | (LSTATE == S1)) $buffering 1
    //  file nic.linked.opt.aa, line 644
    // (LSTATE == S0)
    $intermediate $W[EQ_u2_u1_1828_wire] : $int<1>
    // (LSTATE == S1)
    $intermediate $W[EQ_u2_u1_1831_wire] : $int<1>
    // write_to_header
    $W[write_to_header_1833] : $int<1>
    // 			$guard (write_to_header) nic_rx_to_header := ( $mux (LSTATE == S1) (( $slice RX 72 8 )  && HEADER_TKEEP)  RX )  $buffering 1// bits of buffering = 73. 
    //  file nic.linked.opt.aa, line 645
    // (LSTATE == S1)
    $intermediate $W[EQ_u2_u1_1838_wire] : $int<1>
    // ( $slice RX 72 8 ) 
    $intermediate $W[slice_1840_wire] : $int<65>
    // (( $slice RX 72 8 )  && HEADER_TKEEP)
    $intermediate $W[CONCAT_u65_u73_1842_wire] : $int<73>
    // ( $mux (LSTATE == S1) (( $slice RX 72 8 )  && HEADER_TKEEP)  RX ) 
    $intermediate $W[MUX_1844_wire] : $int<73>
    // nic_rx_to_header
    // 			nic_rx_to_packet := RX $buffering 1// bits of buffering = 73. 
    //  file nic.linked.opt.aa, line 646
    // nic_rx_to_packet
    // datapath-instances for block %nicRxFromMacDaemon%loop
    //  file nic.linked.opt.aa, line 623
    // 		$call AccessRegister (($bitcast ($uint<1>) _b0  ) ( ~ ($bitcast ($uint<4>) _b0  ) ) 22  ($bitcast ($uint<32>) _b0  ) ) (ignore_resp0 ) 
    //  file nic.linked.opt.aa, line 628
    $call [call_stmt_1789_call] $module AccessRegister(type_cast_1781_wire_constant NOT_u4_u4_1784_wire_constant konst_1785_wire_constant type_cast_1787_wire_constant) (ignore_resp0_1789)  
    $delay call_stmt_1789_call 4
    $buffering  $in call_stmt_1789_call type_cast_1781_wire_constant 1
    $buffering  $in call_stmt_1789_call NOT_u4_u4_1784_wire_constant 1
    $buffering  $in call_stmt_1789_call konst_1785_wire_constant 1
    $buffering  $in call_stmt_1789_call type_cast_1787_wire_constant 1
    $buffering  $out call_stmt_1789_call ignore_resp0_1789 1
    // datapath-instances for if  
    //  file nic.linked.opt.aa, line 39906368
    // CONTROL_REGISTER
    $ioport $in [RPIPE_CONTROL_REGISTER_1791_inst] (CONTROL_REGISTER) (RPIPE_CONTROL_REGISTER_1791_wire) 
    $buffering $out RPIPE_CONTROL_REGISTER_1791_inst RPIPE_CONTROL_REGISTER_1791_wire 1
    // (CONTROL_REGISTER [] 0 )
    [][BITSEL_u32_u1_1793_inst] (RPIPE_CONTROL_REGISTER_1791_wire konst_1792_wire_constant) (BITSEL_u32_u1_1793_wire)   $flowthrough 
    $delay BITSEL_u32_u1_1793_inst 0
    // ( ~ (CONTROL_REGISTER [] 0 ) )
    ~ [NOT_u1_u1_1794_inst] (BITSEL_u32_u1_1793_wire) (NOT_u1_u1_1794_wire)   $flowthrough
    $delay NOT_u1_u1_1794_inst 0
    ==0? [if_stmt_1790_branch] (NOT_u1_u1_1794_wire)
    // 		$call AccessRegister (($bitcast ($uint<1>) _b0  ) ( ~ ($bitcast ($uint<4>) _b0  ) ) 22  ($bitcast ($uint<32>) _b1  ) ) (ignore_resp1 ) 
    //  file nic.linked.opt.aa, line 633
    $call [call_stmt_1807_call] $module AccessRegister(type_cast_1799_wire_constant NOT_u4_u4_1802_wire_constant konst_1803_wire_constant type_cast_1805_wire_constant) (ignore_resp1_1807)  
    $delay call_stmt_1807_call 4
    $buffering  $in call_stmt_1807_call type_cast_1799_wire_constant 1
    $buffering  $in call_stmt_1807_call NOT_u4_u4_1802_wire_constant 1
    $buffering  $in call_stmt_1807_call konst_1803_wire_constant 1
    $buffering  $in call_stmt_1807_call type_cast_1805_wire_constant 1
    $buffering  $out call_stmt_1807_call ignore_resp1_1807 1
    // datapath-instances for do-while  
    //  file nic.linked.opt.aa, line 634
    // CONTROL_REGISTER
    $ioport $in [RPIPE_CONTROL_REGISTER_1853_inst] (CONTROL_REGISTER) (RPIPE_CONTROL_REGISTER_1853_wire)  $fullrate 
    $buffering $out RPIPE_CONTROL_REGISTER_1853_inst RPIPE_CONTROL_REGISTER_1853_wire 1
    // (CONTROL_REGISTER [] 0 )
    [][BITSEL_u32_u1_1855_inst] (RPIPE_CONTROL_REGISTER_1853_wire konst_1854_wire_constant) (BITSEL_u32_u1_1855_wire)   $flowthrough 
    $delay BITSEL_u32_u1_1855_inst 0
    ==0? [do_while_stmt_1808_branch] (BITSEL_u32_u1_1855_wire)
    $flowthrough
    // data-path instances for merge  
    //  file nic.linked.opt.aa, line 636
    // 			$phi LSTATE := 			  S0 $on   $entry 			  nLSTATE $on   $loopback 
    // type of target is $uint<2>
    //  file nic.linked.opt.aa, line 637
    # := [nLSTATE_1824_1812_buf] (nLSTATE_1824) (nLSTATE_1824_1812_buffered)     $fullrate
    $buffering $out nLSTATE_1824_1812_buf nLSTATE_1824_1812_buffered  1
    # $phi [phi_stmt_1810] (nLSTATE_1824_1812_buffered R_S0_1813_wire_constant) ( LSTATE_1810 ) $fullrate
    // $buffering  $out phi_stmt_1810 LSTATE_1810 2
    // 			$phi RX := 			  mac_to_nic_data $on   $entry ,   $loopback 
    // type of target is $uint<73>
    //  file nic.linked.opt.aa, line 639
    // mac_to_nic_data
    $ioport $in [RPIPE_mac_to_nic_data_1816_inst] (mac_to_nic_data) (RPIPE_mac_to_nic_data_1816_wire)  $fullrate 
    $buffering $out RPIPE_mac_to_nic_data_1816_inst RPIPE_mac_to_nic_data_1816_wire 1
    # := [ssrc_phi_stmt_1814] (RPIPE_mac_to_nic_data_1816_wire) (RX_1814)    $flowthrough 
    //  $volatile 			$call nextLSTATE (RX LSTATE ) (nLSTATE ) 
    //  file nic.linked.opt.aa, line 643
    $call [call_stmt_1824_call] $module nextLSTATE(RX_1814 LSTATE_1810) (nLSTATE_1824)   $flowthrough $fullrate
    // 			$volatile write_to_header := ((LSTATE == S0) | (LSTATE == S1)) $buffering 1
    //  file nic.linked.opt.aa, line 644
    // (LSTATE == S0)
    ==[EQ_u2_u1_1828_inst] (LSTATE_1810 R_S0_1827_wire_constant) (EQ_u2_u1_1828_wire)   $flowthrough 
    $delay EQ_u2_u1_1828_inst 0
    // (LSTATE == S1)
    ==[EQ_u2_u1_1831_inst] (LSTATE_1810 R_S1_1830_wire_constant) (EQ_u2_u1_1831_wire)   $flowthrough 
    $delay EQ_u2_u1_1831_inst 0
    // ((LSTATE == S0) | (LSTATE == S1))
    |[OR_u1_u1_1832_inst] (EQ_u2_u1_1828_wire EQ_u2_u1_1831_wire) (write_to_header_1833)   $flowthrough 
    $delay OR_u1_u1_1832_inst 0
    // 			$guard (write_to_header) nic_rx_to_header := ( $mux (LSTATE == S1) (( $slice RX 72 8 )  && HEADER_TKEEP)  RX )  $buffering 1// bits of buffering = 73. 
    //  file nic.linked.opt.aa, line 645
    // (LSTATE == S1)
    ==[EQ_u2_u1_1838_inst] (LSTATE_1810 R_S1_1837_wire_constant) (EQ_u2_u1_1838_wire) $guard ( write_to_header_1833 )   $flowthrough 
    $delay EQ_u2_u1_1838_inst 0
    // ( $slice RX 72 8 ) 
    [:] [slice_1840_inst] (RX_1814 72 8) (slice_1840_wire) $guard ( write_to_header_1833 )  $flowthrough
    $delay slice_1840_inst 0
    // (( $slice RX 72 8 )  && HEADER_TKEEP)
    &&[CONCAT_u65_u73_1842_inst] (slice_1840_wire R_HEADER_TKEEP_1841_wire_constant) (CONCAT_u65_u73_1842_wire) $guard ( write_to_header_1833 )   $flowthrough 
    $delay CONCAT_u65_u73_1842_inst 0
    // ( $mux (LSTATE == S1) (( $slice RX 72 8 )  && HEADER_TKEEP)  RX ) 
    ? [MUX_1844_inst] (EQ_u2_u1_1838_wire CONCAT_u65_u73_1842_wire RX_1814) (MUX_1844_wire) $guard ( write_to_header_1833 )  $fullrate
    $buffering  $out MUX_1844_inst MUX_1844_wire 1
    // nic_rx_to_header
    $ioport $out [WPIPE_nic_rx_to_header_1835_inst]  (MUX_1844_wire) (nic_rx_to_header) $guard ( write_to_header_1833 )  $fullrate 
    // 			nic_rx_to_packet := RX $buffering 1// bits of buffering = 73. 
    //  file nic.linked.opt.aa, line 646
    // nic_rx_to_packet
    $ioport $out [WPIPE_nic_rx_to_packet_1846_inst]  (RX_1814) (nic_rx_to_packet)  $fullrate 
  }
  // end data-path
  // CP-DP links for merge  
  //  file nic.linked.opt.aa, line 626
  // 		$call AccessRegister (($bitcast ($uint<1>) _b0  ) ( ~ ($bitcast ($uint<4>) _b0  ) ) 22  ($bitcast ($uint<32>) _b0  ) ) (ignore_resp0 ) 
  //  file nic.linked.opt.aa, line 628
  call_stmt_1789_call <=> (branch_block_stmt_1777/call_stmt_1789/call_stmt_1789_Sample/crr branch_block_stmt_1777/call_stmt_1789/call_stmt_1789_Update/ccr) (branch_block_stmt_1777/call_stmt_1789/call_stmt_1789_Sample/cra branch_block_stmt_1777/call_stmt_1789/call_stmt_1789_Update/cca)
  // CP-DP links for if  
  //  file nic.linked.opt.aa, line 39906368
  // CONTROL_REGISTER
  // (CONTROL_REGISTER [] 0 )
  // ( ~ (CONTROL_REGISTER [] 0 ) )
  if_stmt_1790_branch <=> (branch_block_stmt_1777/if_stmt_1790_eval_test/branch_req) (branch_block_stmt_1777/if_stmt_1790_else_link/else_choice_transition branch_block_stmt_1777/if_stmt_1790_if_link/if_choice_transition)
  // 		$call AccessRegister (($bitcast ($uint<1>) _b0  ) ( ~ ($bitcast ($uint<4>) _b0  ) ) 22  ($bitcast ($uint<32>) _b1  ) ) (ignore_resp1 ) 
  //  file nic.linked.opt.aa, line 633
  call_stmt_1807_call <=> (branch_block_stmt_1777/call_stmt_1807/call_stmt_1807_Sample/crr branch_block_stmt_1777/call_stmt_1807/call_stmt_1807_Update/ccr) (branch_block_stmt_1777/call_stmt_1807/call_stmt_1807_Sample/cra branch_block_stmt_1777/call_stmt_1807/call_stmt_1807_Update/cca)
  // CP-DP links for do-while  do_while_stmt_1808
  //  file nic.linked.opt.aa, line 634
  phi_stmt_1810 <=> (branch_block_stmt_1777/do_while_stmt_1808/do_while_stmt_1808_loop_body/phi_stmt_1810_loopback_sample_req branch_block_stmt_1777/do_while_stmt_1808/do_while_stmt_1808_loop_body/phi_stmt_1810_entry_sample_req) (branch_block_stmt_1777/do_while_stmt_1808/do_while_stmt_1808_loop_body/phi_stmt_1810_phi_mux_ack)
  nLSTATE_1824_1812_buf <=> (branch_block_stmt_1777/do_while_stmt_1808/do_while_stmt_1808_loop_body/R_nLSTATE_1812_Sample/req branch_block_stmt_1777/do_while_stmt_1808/do_while_stmt_1808_loop_body/R_nLSTATE_1812_Update/req) (branch_block_stmt_1777/do_while_stmt_1808/do_while_stmt_1808_loop_body/R_nLSTATE_1812_Sample/ack branch_block_stmt_1777/do_while_stmt_1808/do_while_stmt_1808_loop_body/R_nLSTATE_1812_Update/ack)
  // mac_to_nic_data
  RPIPE_mac_to_nic_data_1816_inst <=> (branch_block_stmt_1777/do_while_stmt_1808/do_while_stmt_1808_loop_body/RPIPE_mac_to_nic_data_1816_Sample/rr branch_block_stmt_1777/do_while_stmt_1808/do_while_stmt_1808_loop_body/RPIPE_mac_to_nic_data_1816_Update/cr) (branch_block_stmt_1777/do_while_stmt_1808/do_while_stmt_1808_loop_body/RPIPE_mac_to_nic_data_1816_Sample/ra branch_block_stmt_1777/do_while_stmt_1808/do_while_stmt_1808_loop_body/RPIPE_mac_to_nic_data_1816_Update/ca)
  //  $volatile 			$call nextLSTATE (RX LSTATE ) (nLSTATE ) 
  //  file nic.linked.opt.aa, line 643
  // RX
  // LSTATE
  // 			$volatile write_to_header := ((LSTATE == S0) | (LSTATE == S1)) $buffering 1
  //  file nic.linked.opt.aa, line 644
  // ((LSTATE == S0) | (LSTATE == S1))
  // (LSTATE == S0)
  // LSTATE
  // (LSTATE == S1)
  // LSTATE
  // 			$guard (write_to_header) nic_rx_to_header := ( $mux (LSTATE == S1) (( $slice RX 72 8 )  && HEADER_TKEEP)  RX )  $buffering 1// bits of buffering = 73. 
  //  file nic.linked.opt.aa, line 645
  // (LSTATE == S1)
  // LSTATE
  // (( $slice RX 72 8 )  && HEADER_TKEEP)
  // RX
  // RX
  // ( $mux (LSTATE == S1) (( $slice RX 72 8 )  && HEADER_TKEEP)  RX ) 
  MUX_1844_inst <=> (branch_block_stmt_1777/do_while_stmt_1808/do_while_stmt_1808_loop_body/MUX_1844_start/req branch_block_stmt_1777/do_while_stmt_1808/do_while_stmt_1808_loop_body/MUX_1844_complete/req) (branch_block_stmt_1777/do_while_stmt_1808/do_while_stmt_1808_loop_body/MUX_1844_start/ack branch_block_stmt_1777/do_while_stmt_1808/do_while_stmt_1808_loop_body/MUX_1844_complete/ack)
  // nic_rx_to_header
  WPIPE_nic_rx_to_header_1835_inst <=> (branch_block_stmt_1777/do_while_stmt_1808/do_while_stmt_1808_loop_body/WPIPE_nic_rx_to_header_1835_Sample/req branch_block_stmt_1777/do_while_stmt_1808/do_while_stmt_1808_loop_body/WPIPE_nic_rx_to_header_1835_Update/req) (branch_block_stmt_1777/do_while_stmt_1808/do_while_stmt_1808_loop_body/WPIPE_nic_rx_to_header_1835_Sample/ack branch_block_stmt_1777/do_while_stmt_1808/do_while_stmt_1808_loop_body/WPIPE_nic_rx_to_header_1835_Update/ack)
  // 			nic_rx_to_packet := RX $buffering 1// bits of buffering = 73. 
  //  file nic.linked.opt.aa, line 646
  // RX
  // nic_rx_to_packet
  WPIPE_nic_rx_to_packet_1846_inst <=> (branch_block_stmt_1777/do_while_stmt_1808/do_while_stmt_1808_loop_body/WPIPE_nic_rx_to_packet_1846_Sample/req branch_block_stmt_1777/do_while_stmt_1808/do_while_stmt_1808_loop_body/WPIPE_nic_rx_to_packet_1846_Update/req) (branch_block_stmt_1777/do_while_stmt_1808/do_while_stmt_1808_loop_body/WPIPE_nic_rx_to_packet_1846_Sample/ack branch_block_stmt_1777/do_while_stmt_1808/do_while_stmt_1808_loop_body/WPIPE_nic_rx_to_packet_1846_Update/ack)
  // (CONTROL_REGISTER [] 0 )
  // CONTROL_REGISTER
  do_while_stmt_1808_branch <=> (branch_block_stmt_1777/do_while_stmt_1808/do_while_stmt_1808_loop_body/condition_evaluated) (branch_block_stmt_1777/do_while_stmt_1808/loop_exit/ack branch_block_stmt_1777/do_while_stmt_1808/loop_taken/ack)
}
$module [nicToMacInterface] 
{
  // pipe-declarations for block %nicToMacInterface
  //  file nic.linked.opt.aa, line 652
  // pipe-declarations for block %nicToMacInterface%loop
  //  file nic.linked.opt.aa, line 657
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    <>[branch_block_stmt_1860] // Branch Block  file nic.linked.opt.aa, line 657
    {
      $P [branch_block_stmt_1860__entry__]
      branch_block_stmt_1860__entry__ <-| ($entry)
      $P [branch_block_stmt_1860__exit__]
      branch_block_stmt_1860__exit__ |-> ($exit)
      $P [do_while_stmt_1861__entry__] 
      $P [do_while_stmt_1861__exit__] 
      // do-while-statement  
      //  file nic.linked.opt.aa, line 659
      <o> [do_while_stmt_1861]  $depth 7 $buffering 1 
      {
        $P[do_while_stmt_1861__entry__] 
        $P[do_while_stmt_1861__exit__] 
        $P[loop_back] 
        $P[condition_done] 
        $P[loop_body_done] 
        $pipeline [do_while_stmt_1861_loop_body] 
        {
          // Pipelined!
          $T[back_edge_to_loop_body] 
          $T[first_time_through_loop_body] 
          $T[loop_body_start] 
          $T[condition_evaluated] 
          $transitionmerge [entry_tmerge] (back_edge_to_loop_body first_time_through_loop_body) (loop_body_start)
          $entry <-& (loop_body_start)
          $T[aggregated_phi_sample_req] 
          $T[aggregated_phi_sample_ack] 
          $T[aggregated_phi_update_req] 
          $T[aggregated_phi_update_ack] 
          // do not loop-back unless all phi's have used up their triggering tokens.
          condition_evaluated <-& (aggregated_phi_update_ack)
          aggregated_phi_sample_req o<-& (aggregated_phi_update_ack 0)
          // start:  single source PHI statement phi_stmt_1863
          // 			$phi rdata := 			  nic_to_mac_transmit_pipe $on   $entry ,   $loopback 
          // type of target is $uint<73>
          $T[phi_stmt_1863_sample_start_] 
          $T[phi_stmt_1863_sample_completed_] 
          $T[phi_stmt_1863_update_start_] 
          $T[phi_stmt_1863_update_completed_] 
          aggregated_phi_sample_req <-& (phi_stmt_1863_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_1863_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_1863_update_start_)
          // non-implicit source expression in single-source phi
          // nic_to_mac_transmit_pipe
          $T[RPIPE_nic_to_mac_transmit_pipe_1865_sample_start_] 
          $T[RPIPE_nic_to_mac_transmit_pipe_1865_sample_completed_] 
          $T[RPIPE_nic_to_mac_transmit_pipe_1865_update_start_] 
          $T[RPIPE_nic_to_mac_transmit_pipe_1865_update_completed_] 
          ;;[RPIPE_nic_to_mac_transmit_pipe_1865_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_nic_to_mac_transmit_pipe_1865_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_nic_to_mac_transmit_pipe_1865_sample_start_ &-> (RPIPE_nic_to_mac_transmit_pipe_1865_Sample)
          RPIPE_nic_to_mac_transmit_pipe_1865_sample_completed_ <-& (RPIPE_nic_to_mac_transmit_pipe_1865_Sample)
          RPIPE_nic_to_mac_transmit_pipe_1865_update_start_ <-& (RPIPE_nic_to_mac_transmit_pipe_1865_sample_completed_)
          RPIPE_nic_to_mac_transmit_pipe_1865_update_start_ &-> (RPIPE_nic_to_mac_transmit_pipe_1865_Update)
          RPIPE_nic_to_mac_transmit_pipe_1865_update_completed_ <-& (RPIPE_nic_to_mac_transmit_pipe_1865_Update)
          RPIPE_nic_to_mac_transmit_pipe_1865_sample_start_ o<-& (RPIPE_nic_to_mac_transmit_pipe_1865_update_completed_ 0)
          // RAW reenables for nic_to_mac_transmit_pipe
          // producer  and  consumer are both determined by PHI statements.
          aggregated_phi_sample_req &-> (RPIPE_nic_to_mac_transmit_pipe_1865_sample_start_)
          aggregated_phi_sample_ack <-& (RPIPE_nic_to_mac_transmit_pipe_1865_sample_completed_)
          aggregated_phi_update_req &-> (RPIPE_nic_to_mac_transmit_pipe_1865_update_start_)
          phi_stmt_1863_update_completed_ <-& (RPIPE_nic_to_mac_transmit_pipe_1865_update_completed_)
          aggregated_phi_update_ack <-& (phi_stmt_1863_update_completed_)
          // done: PHI Statement phi_stmt_1863
          // start:  			nic_to_mac_data_0 := ( $slice rdata 63 0 )  $buffering 1// bits of buffering = 64. 
          //  file nic.linked.opt.aa, line 666
          // Source expression
          // ( $slice rdata 63 0 ) 
          $T[slice_1871_sample_start_] 
          $T[slice_1871_sample_completed_] 
          $T[slice_1871_update_start_] 
          $T[slice_1871_update_completed_] 
          // rdata
          // start: Forward dependencies from rdata to transition slice_1871_sample_start_
          slice_1871_sample_start_ <-& (phi_stmt_1863_update_completed_)
          // done: Forward dependencies from rdata to transition slice_1871_sample_start_
          ;;[slice_1871_Sample] 
          {
            // unary expression 
            $T [rr] $T [ra] // (split) unary operation
          }
          ;;[slice_1871_Update] 
          {
            // unary expression 
            $T [cr] $T [ca] //(split) unary operation
          }
          slice_1871_sample_start_ &-> (slice_1871_Sample)
          slice_1871_sample_completed_ <-& (slice_1871_Sample)
          slice_1871_sample_completed_ &-> ($null)
          slice_1871_update_start_ &-> (slice_1871_Update)
          slice_1871_update_completed_ <-& (slice_1871_Update)
          // RAW reenables for rdata
          phi_stmt_1863_update_start_ o<-& (slice_1871_sample_completed_ 0)
          // self-release: 
          slice_1871_sample_start_ o<-& (slice_1871_sample_completed_ 1)
          $null &-> (slice_1871_update_start_)
          slice_1871_update_start_ o<-& (slice_1871_update_completed_ 0)
          // Target expression
          // (as target) nic_to_mac_data_0
          $T[WPIPE_nic_to_mac_data_0_1869_sample_start_] 
          $T[WPIPE_nic_to_mac_data_0_1869_sample_completed_] 
          $T[WPIPE_nic_to_mac_data_0_1869_update_start_] 
          $T[WPIPE_nic_to_mac_data_0_1869_update_completed_] 
          ;;[WPIPE_nic_to_mac_data_0_1869_Sample] 
          {
            // pipe write sample-start nic_to_mac_data_0
            $T [req] $T [ack] 
          }
          ;;[WPIPE_nic_to_mac_data_0_1869_Update] 
          {
            // pipe write update (complete) nic_to_mac_data_0
            $T [req] $T [ack] 
          }
          WPIPE_nic_to_mac_data_0_1869_sample_start_ &-> (WPIPE_nic_to_mac_data_0_1869_Sample)
          WPIPE_nic_to_mac_data_0_1869_sample_completed_ <-& (WPIPE_nic_to_mac_data_0_1869_Sample)
          WPIPE_nic_to_mac_data_0_1869_update_start_ <-& (WPIPE_nic_to_mac_data_0_1869_sample_completed_)
          WPIPE_nic_to_mac_data_0_1869_update_start_ &-> (WPIPE_nic_to_mac_data_0_1869_Update)
          WPIPE_nic_to_mac_data_0_1869_update_completed_ <-& (WPIPE_nic_to_mac_data_0_1869_Update)
          WPIPE_nic_to_mac_data_0_1869_sample_start_ o<-& (WPIPE_nic_to_mac_data_0_1869_update_completed_ 0)
          // start: Forward dependencies from ( $slice rdata 63 0 )  to transition WPIPE_nic_to_mac_data_0_1869_sample_start_
          WPIPE_nic_to_mac_data_0_1869_sample_start_ <-& (slice_1871_update_completed_)
          // done: Forward dependencies from ( $slice rdata 63 0 )  to transition WPIPE_nic_to_mac_data_0_1869_sample_start_
          // RAW reenables for ( $slice rdata 63 0 ) 
          slice_1871_update_start_ o<-& (WPIPE_nic_to_mac_data_0_1869_sample_completed_ 0)
          // end:  			nic_to_mac_data_0 := ( $slice rdata 63 0 )  $buffering 1// bits of buffering = 64. 
          // start:  			nic_to_mac_data_1 := ($bitcast ($uint<16>) ( $slice rdata 72 64 )  ) $buffering 1// bits of buffering = 16. 
          //  file nic.linked.opt.aa, line 667
          // Source expression
          // ($bitcast ($uint<16>) ( $slice rdata 72 64 )  )
          $T[type_cast_1876_sample_start_] 
          $T[type_cast_1876_sample_completed_] 
          $T[type_cast_1876_update_start_] 
          $T[type_cast_1876_update_completed_] 
          // ( $slice rdata 72 64 ) 
          // rdata
          // start: Forward dependencies from ( $slice rdata 72 64 )  to transition type_cast_1876_sample_start_
          type_cast_1876_sample_start_ <-& (phi_stmt_1863_update_completed_)
          // done: Forward dependencies from ( $slice rdata 72 64 )  to transition type_cast_1876_sample_start_
          ;;[type_cast_1876_Sample] 
          {
            // unary expression 
            $T [rr] $T [ra] // (split) unary operation
          }
          ;;[type_cast_1876_Update] 
          {
            // unary expression 
            $T [cr] $T [ca] //(split) unary operation
          }
          type_cast_1876_sample_start_ &-> (type_cast_1876_Sample)
          type_cast_1876_sample_completed_ <-& (type_cast_1876_Sample)
          type_cast_1876_sample_completed_ &-> ($null)
          type_cast_1876_update_start_ &-> (type_cast_1876_Update)
          type_cast_1876_update_completed_ <-& (type_cast_1876_Update)
          // RAW reenables for ( $slice rdata 72 64 ) 
          phi_stmt_1863_update_start_ o<-& (type_cast_1876_sample_completed_ 0)
          // self-release: 
          type_cast_1876_sample_start_ o<-& (type_cast_1876_sample_completed_ 1)
          $null &-> (type_cast_1876_update_start_)
          type_cast_1876_update_start_ o<-& (type_cast_1876_update_completed_ 0)
          // Target expression
          // (as target) nic_to_mac_data_1
          $T[WPIPE_nic_to_mac_data_1_1873_sample_start_] 
          $T[WPIPE_nic_to_mac_data_1_1873_sample_completed_] 
          $T[WPIPE_nic_to_mac_data_1_1873_update_start_] 
          $T[WPIPE_nic_to_mac_data_1_1873_update_completed_] 
          ;;[WPIPE_nic_to_mac_data_1_1873_Sample] 
          {
            // pipe write sample-start nic_to_mac_data_1
            $T [req] $T [ack] 
          }
          ;;[WPIPE_nic_to_mac_data_1_1873_Update] 
          {
            // pipe write update (complete) nic_to_mac_data_1
            $T [req] $T [ack] 
          }
          WPIPE_nic_to_mac_data_1_1873_sample_start_ &-> (WPIPE_nic_to_mac_data_1_1873_Sample)
          WPIPE_nic_to_mac_data_1_1873_sample_completed_ <-& (WPIPE_nic_to_mac_data_1_1873_Sample)
          WPIPE_nic_to_mac_data_1_1873_update_start_ <-& (WPIPE_nic_to_mac_data_1_1873_sample_completed_)
          WPIPE_nic_to_mac_data_1_1873_update_start_ &-> (WPIPE_nic_to_mac_data_1_1873_Update)
          WPIPE_nic_to_mac_data_1_1873_update_completed_ <-& (WPIPE_nic_to_mac_data_1_1873_Update)
          WPIPE_nic_to_mac_data_1_1873_sample_start_ o<-& (WPIPE_nic_to_mac_data_1_1873_update_completed_ 0)
          // start: Forward dependencies from ($bitcast ($uint<16>) ( $slice rdata 72 64 )  ) to transition WPIPE_nic_to_mac_data_1_1873_sample_start_
          WPIPE_nic_to_mac_data_1_1873_sample_start_ <-& (type_cast_1876_update_completed_)
          // done: Forward dependencies from ($bitcast ($uint<16>) ( $slice rdata 72 64 )  ) to transition WPIPE_nic_to_mac_data_1_1873_sample_start_
          // RAW reenables for ($bitcast ($uint<16>) ( $slice rdata 72 64 )  )
          type_cast_1876_update_start_ o<-& (WPIPE_nic_to_mac_data_1_1873_sample_completed_ 0)
          // end:  			nic_to_mac_data_1 := ($bitcast ($uint<16>) ( $slice rdata 72 64 )  ) $buffering 1// bits of buffering = 16. 
          $T [loop_body_delay_to_condition_start] $delay
          loop_body_start &-> (loop_body_delay_to_condition_start)
          loop_body_delay_to_condition_start &-> (condition_evaluated)
          condition_evaluated &-> ($null)
          // load-store dependencies..
          // pipe read/write dependencies for pipe nic_to_mac_data_0
          // read-dependencies for pipe nic_to_mac_data_0
          // write-dependencies for pipe nic_to_mac_data_0
          // signal write dependencies for nic_to_mac_data_0
          // pipe read/write dependencies for pipe nic_to_mac_data_1
          // read-dependencies for pipe nic_to_mac_data_1
          // write-dependencies for pipe nic_to_mac_data_1
          // signal write dependencies for nic_to_mac_data_1
          // pipe read/write dependencies for pipe nic_to_mac_transmit_pipe
          // read-dependencies for pipe nic_to_mac_transmit_pipe
          // write-dependencies for pipe nic_to_mac_transmit_pipe
          // signal write dependencies for nic_to_mac_transmit_pipe
        }
        ( first_time_through_loop_body  back_edge_to_loop_body) 
        ( condition_evaluated )
        ;; [loop_exit] 
        {
          $T [ack] 
        }
        ;; [loop_taken] 
        {
          $T [ack] 
        }
        do_while_stmt_1861__entry__ <-| ($entry)
        loop_body_done <-| ( do_while_stmt_1861_loop_body ) 
        condition_done |-> (loop_exit loop_taken)
        do_while_stmt_1861__exit__ |-> ($exit)
        $bind condition_done <= do_while_stmt_1861_loop_body : condition_evaluated
        $bind do_while_stmt_1861__entry__  => do_while_stmt_1861_loop_body : first_time_through_loop_body 
        $bind loop_back  => do_while_stmt_1861_loop_body : back_edge_to_loop_body 
        $terminate (loop_exit loop_taken loop_body_done) (loop_back do_while_stmt_1861__exit__)
      }
      do_while_stmt_1861__entry__ |-> (do_while_stmt_1861)
      do_while_stmt_1861__exit__ <-| (do_while_stmt_1861)
      do_while_stmt_1861__entry__ <-| (branch_block_stmt_1860__entry__)
      do_while_stmt_1861__exit__ |-> (branch_block_stmt_1860__exit__)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %nicToMacInterface%loop%
    //  file nic.linked.opt.aa, line 661
    // constant-object-declarations for block %nicToMacInterface%loop
    //  file nic.linked.opt.aa, line 657
    // constant-object-declarations for block %nicToMacInterface
    //  file nic.linked.opt.aa, line 652
    // constant-declarations for block %nicToMacInterface%loop
    //  file nic.linked.opt.aa, line 657
    // do-while statement  
    //  file nic.linked.opt.aa, line 659
    // 1 
    $constant $W[konst_1879_wire_constant] : $int<1> := _b1// 1
    // constant-declarations for block %nicToMacInterface%loop%
    //  file nic.linked.opt.aa, line 661
    // constant-declarations for phi:  			$phi rdata := 			  nic_to_mac_transmit_pipe $on   $entry ,   $loopback 
    // type of target is $uint<73>
    //  file nic.linked.opt.aa, line 662
    // block %nicToMacInterface%loop
    //  file nic.linked.opt.aa, line 657
    // do-while statement  
    //  file nic.linked.opt.aa, line 659
    // merge-statement  
    //  file nic.linked.opt.aa, line 661
    // 			$phi rdata := 			  nic_to_mac_transmit_pipe $on   $entry ,   $loopback 
    // type of target is $uint<73>
    //  file nic.linked.opt.aa, line 662
    // nic_to_mac_transmit_pipe
    $W[RPIPE_nic_to_mac_transmit_pipe_1865_wire] : $int<73>
    // rdata
    $W[rdata_1863] : $int<73>
    // 			nic_to_mac_data_0 := ( $slice rdata 63 0 )  $buffering 1// bits of buffering = 64. 
    //  file nic.linked.opt.aa, line 666
    // ( $slice rdata 63 0 ) 
    $intermediate $W[slice_1871_wire] : $int<64>
    // nic_to_mac_data_0
    // 			nic_to_mac_data_1 := ($bitcast ($uint<16>) ( $slice rdata 72 64 )  ) $buffering 1// bits of buffering = 16. 
    //  file nic.linked.opt.aa, line 667
    // ( $slice rdata 72 64 ) 
    $intermediate $W[slice_1875_wire] : $int<9>
    // ($bitcast ($uint<16>) ( $slice rdata 72 64 )  )
    $intermediate $W[type_cast_1876_wire] : $int<16>
    // nic_to_mac_data_1
    // datapath-instances for block %nicToMacInterface%loop
    //  file nic.linked.opt.aa, line 657
    // datapath-instances for do-while  
    //  file nic.linked.opt.aa, line 659
    ==0? [do_while_stmt_1861_branch] (konst_1879_wire_constant)
    $flowthrough
    // data-path instances for merge  
    //  file nic.linked.opt.aa, line 661
    // 			$phi rdata := 			  nic_to_mac_transmit_pipe $on   $entry ,   $loopback 
    // type of target is $uint<73>
    //  file nic.linked.opt.aa, line 662
    // nic_to_mac_transmit_pipe
    $ioport $in [RPIPE_nic_to_mac_transmit_pipe_1865_inst] (nic_to_mac_transmit_pipe) (RPIPE_nic_to_mac_transmit_pipe_1865_wire)  $fullrate 
    $buffering $out RPIPE_nic_to_mac_transmit_pipe_1865_inst RPIPE_nic_to_mac_transmit_pipe_1865_wire 1
    # := [ssrc_phi_stmt_1863] (RPIPE_nic_to_mac_transmit_pipe_1865_wire) (rdata_1863)    $flowthrough 
    // 			nic_to_mac_data_0 := ( $slice rdata 63 0 )  $buffering 1// bits of buffering = 64. 
    //  file nic.linked.opt.aa, line 666
    // ( $slice rdata 63 0 ) 
    [:] [slice_1871_inst] (rdata_1863 63 0) (slice_1871_wire)  $fullrate
    $buffering  $out slice_1871_inst slice_1871_wire 1
    $delay slice_1871_inst 1
    // nic_to_mac_data_0
    $ioport $out [WPIPE_nic_to_mac_data_0_1869_inst]  (slice_1871_wire) (nic_to_mac_data_0)  $fullrate 
    // 			nic_to_mac_data_1 := ($bitcast ($uint<16>) ( $slice rdata 72 64 )  ) $buffering 1// bits of buffering = 16. 
    //  file nic.linked.opt.aa, line 667
    // ( $slice rdata 72 64 ) 
    [:] [slice_1875_inst] (rdata_1863 72 64) (slice_1875_wire)  $flowthrough
    $delay slice_1875_inst 0
    // ($bitcast ($uint<16>) ( $slice rdata 72 64 )  )
    # := [type_cast_1876_inst] (slice_1875_wire) (type_cast_1876_wire)     $fullrate
    $buffering  $out type_cast_1876_inst type_cast_1876_wire 1
    $delay type_cast_1876_inst 1
    // nic_to_mac_data_1
    $ioport $out [WPIPE_nic_to_mac_data_1_1873_inst]  (type_cast_1876_wire) (nic_to_mac_data_1)  $fullrate 
  }
  // end data-path
  // CP-DP links for do-while  do_while_stmt_1861
  //  file nic.linked.opt.aa, line 659
  // nic_to_mac_transmit_pipe
  RPIPE_nic_to_mac_transmit_pipe_1865_inst <=> (branch_block_stmt_1860/do_while_stmt_1861/do_while_stmt_1861_loop_body/RPIPE_nic_to_mac_transmit_pipe_1865_Sample/rr branch_block_stmt_1860/do_while_stmt_1861/do_while_stmt_1861_loop_body/RPIPE_nic_to_mac_transmit_pipe_1865_Update/cr) (branch_block_stmt_1860/do_while_stmt_1861/do_while_stmt_1861_loop_body/RPIPE_nic_to_mac_transmit_pipe_1865_Sample/ra branch_block_stmt_1860/do_while_stmt_1861/do_while_stmt_1861_loop_body/RPIPE_nic_to_mac_transmit_pipe_1865_Update/ca)
  // 			nic_to_mac_data_0 := ( $slice rdata 63 0 )  $buffering 1// bits of buffering = 64. 
  //  file nic.linked.opt.aa, line 666
  // rdata
  // ( $slice rdata 63 0 ) 
  slice_1871_inst <=> (branch_block_stmt_1860/do_while_stmt_1861/do_while_stmt_1861_loop_body/slice_1871_Sample/rr branch_block_stmt_1860/do_while_stmt_1861/do_while_stmt_1861_loop_body/slice_1871_Update/cr) (branch_block_stmt_1860/do_while_stmt_1861/do_while_stmt_1861_loop_body/slice_1871_Sample/ra branch_block_stmt_1860/do_while_stmt_1861/do_while_stmt_1861_loop_body/slice_1871_Update/ca)
  // nic_to_mac_data_0
  WPIPE_nic_to_mac_data_0_1869_inst <=> (branch_block_stmt_1860/do_while_stmt_1861/do_while_stmt_1861_loop_body/WPIPE_nic_to_mac_data_0_1869_Sample/req branch_block_stmt_1860/do_while_stmt_1861/do_while_stmt_1861_loop_body/WPIPE_nic_to_mac_data_0_1869_Update/req) (branch_block_stmt_1860/do_while_stmt_1861/do_while_stmt_1861_loop_body/WPIPE_nic_to_mac_data_0_1869_Sample/ack branch_block_stmt_1860/do_while_stmt_1861/do_while_stmt_1861_loop_body/WPIPE_nic_to_mac_data_0_1869_Update/ack)
  // 			nic_to_mac_data_1 := ($bitcast ($uint<16>) ( $slice rdata 72 64 )  ) $buffering 1// bits of buffering = 16. 
  //  file nic.linked.opt.aa, line 667
  // rdata
  // ($bitcast ($uint<16>) ( $slice rdata 72 64 )  )
  type_cast_1876_inst <=> (branch_block_stmt_1860/do_while_stmt_1861/do_while_stmt_1861_loop_body/type_cast_1876_Sample/rr branch_block_stmt_1860/do_while_stmt_1861/do_while_stmt_1861_loop_body/type_cast_1876_Update/cr) (branch_block_stmt_1860/do_while_stmt_1861/do_while_stmt_1861_loop_body/type_cast_1876_Sample/ra branch_block_stmt_1860/do_while_stmt_1861/do_while_stmt_1861_loop_body/type_cast_1876_Update/ca)
  // nic_to_mac_data_1
  WPIPE_nic_to_mac_data_1_1873_inst <=> (branch_block_stmt_1860/do_while_stmt_1861/do_while_stmt_1861_loop_body/WPIPE_nic_to_mac_data_1_1873_Sample/req branch_block_stmt_1860/do_while_stmt_1861/do_while_stmt_1861_loop_body/WPIPE_nic_to_mac_data_1_1873_Update/req) (branch_block_stmt_1860/do_while_stmt_1861/do_while_stmt_1861_loop_body/WPIPE_nic_to_mac_data_1_1873_Sample/ack branch_block_stmt_1860/do_while_stmt_1861/do_while_stmt_1861_loop_body/WPIPE_nic_to_mac_data_1_1873_Update/ack)
  do_while_stmt_1861_branch <=> (branch_block_stmt_1860/do_while_stmt_1861/do_while_stmt_1861_loop_body/condition_evaluated) (branch_block_stmt_1860/do_while_stmt_1861/loop_exit/ack branch_block_stmt_1860/do_while_stmt_1861/loop_taken/ack)
}
$module [nicToMemoryInterface] 
{
  // pipe-declarations for block %nicToMemoryInterface
  //  file nic.linked.opt.aa, line 671
  // pipe-declarations for block %nicToMemoryInterface%loop
  //  file nic.linked.opt.aa, line 676
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    <>[branch_block_stmt_1883] // Branch Block  file nic.linked.opt.aa, line 676
    {
      $P [branch_block_stmt_1883__entry__]
      branch_block_stmt_1883__entry__ <-| ($entry)
      $P [branch_block_stmt_1883__exit__]
      branch_block_stmt_1883__exit__ |-> ($exit)
      $P [do_while_stmt_1884__entry__] 
      $P [do_while_stmt_1884__exit__] 
      // do-while-statement  
      //  file nic.linked.opt.aa, line 678
      <o> [do_while_stmt_1884]  $depth 7 $buffering 1 
      {
        $P[do_while_stmt_1884__entry__] 
        $P[do_while_stmt_1884__exit__] 
        $P[loop_back] 
        $P[condition_done] 
        $P[loop_body_done] 
        $pipeline [do_while_stmt_1884_loop_body] 
        {
          // Pipelined!
          $T[back_edge_to_loop_body] 
          $T[first_time_through_loop_body] 
          $T[loop_body_start] 
          $T[condition_evaluated] 
          $transitionmerge [entry_tmerge] (back_edge_to_loop_body first_time_through_loop_body) (loop_body_start)
          $entry <-& (loop_body_start)
          $T[aggregated_phi_sample_req] 
          $T[aggregated_phi_sample_ack] 
          $T[aggregated_phi_update_req] 
          $T[aggregated_phi_update_ack] 
          // do not loop-back unless all phi's have used up their triggering tokens.
          condition_evaluated <-& (aggregated_phi_update_ack)
          aggregated_phi_sample_req o<-& (aggregated_phi_update_ack 0)
          // start:  single source PHI statement phi_stmt_1886
          // 			$phi rdata := 			  NIC_TO_MEMORY_REQUEST $on   $entry ,   $loopback 
          // type of target is $uint<110>
          $T[phi_stmt_1886_sample_start_] 
          $T[phi_stmt_1886_sample_completed_] 
          $T[phi_stmt_1886_update_start_] 
          $T[phi_stmt_1886_update_completed_] 
          aggregated_phi_sample_req <-& (phi_stmt_1886_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_1886_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_1886_update_start_)
          // non-implicit source expression in single-source phi
          // NIC_TO_MEMORY_REQUEST
          $T[RPIPE_NIC_TO_MEMORY_REQUEST_1888_sample_start_] 
          $T[RPIPE_NIC_TO_MEMORY_REQUEST_1888_sample_completed_] 
          $T[RPIPE_NIC_TO_MEMORY_REQUEST_1888_update_start_] 
          $T[RPIPE_NIC_TO_MEMORY_REQUEST_1888_update_completed_] 
          ;;[RPIPE_NIC_TO_MEMORY_REQUEST_1888_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_NIC_TO_MEMORY_REQUEST_1888_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_NIC_TO_MEMORY_REQUEST_1888_sample_start_ &-> (RPIPE_NIC_TO_MEMORY_REQUEST_1888_Sample)
          RPIPE_NIC_TO_MEMORY_REQUEST_1888_sample_completed_ <-& (RPIPE_NIC_TO_MEMORY_REQUEST_1888_Sample)
          RPIPE_NIC_TO_MEMORY_REQUEST_1888_update_start_ <-& (RPIPE_NIC_TO_MEMORY_REQUEST_1888_sample_completed_)
          RPIPE_NIC_TO_MEMORY_REQUEST_1888_update_start_ &-> (RPIPE_NIC_TO_MEMORY_REQUEST_1888_Update)
          RPIPE_NIC_TO_MEMORY_REQUEST_1888_update_completed_ <-& (RPIPE_NIC_TO_MEMORY_REQUEST_1888_Update)
          RPIPE_NIC_TO_MEMORY_REQUEST_1888_sample_start_ o<-& (RPIPE_NIC_TO_MEMORY_REQUEST_1888_update_completed_ 0)
          // RAW reenables for NIC_TO_MEMORY_REQUEST
          // producer  and  consumer are both determined by PHI statements.
          aggregated_phi_sample_req &-> (RPIPE_NIC_TO_MEMORY_REQUEST_1888_sample_start_)
          aggregated_phi_sample_ack <-& (RPIPE_NIC_TO_MEMORY_REQUEST_1888_sample_completed_)
          aggregated_phi_update_req &-> (RPIPE_NIC_TO_MEMORY_REQUEST_1888_update_start_)
          phi_stmt_1886_update_completed_ <-& (RPIPE_NIC_TO_MEMORY_REQUEST_1888_update_completed_)
          aggregated_phi_update_ack <-& (phi_stmt_1886_update_completed_)
          // done: PHI Statement phi_stmt_1886
          // start:  			mem_req1_pipe0 := ( $slice rdata 63 0 )  $buffering 1// bits of buffering = 64. 
          //  file nic.linked.opt.aa, line 685
          // Source expression
          // ( $slice rdata 63 0 ) 
          $T[slice_1894_sample_start_] 
          $T[slice_1894_sample_completed_] 
          $T[slice_1894_update_start_] 
          $T[slice_1894_update_completed_] 
          // rdata
          // start: Forward dependencies from rdata to transition slice_1894_sample_start_
          slice_1894_sample_start_ <-& (phi_stmt_1886_update_completed_)
          // done: Forward dependencies from rdata to transition slice_1894_sample_start_
          ;;[slice_1894_Sample] 
          {
            // unary expression 
            $T [rr] $T [ra] // (split) unary operation
          }
          ;;[slice_1894_Update] 
          {
            // unary expression 
            $T [cr] $T [ca] //(split) unary operation
          }
          slice_1894_sample_start_ &-> (slice_1894_Sample)
          slice_1894_sample_completed_ <-& (slice_1894_Sample)
          slice_1894_sample_completed_ &-> ($null)
          slice_1894_update_start_ &-> (slice_1894_Update)
          slice_1894_update_completed_ <-& (slice_1894_Update)
          // RAW reenables for rdata
          phi_stmt_1886_update_start_ o<-& (slice_1894_sample_completed_ 0)
          // self-release: 
          slice_1894_sample_start_ o<-& (slice_1894_sample_completed_ 1)
          $null &-> (slice_1894_update_start_)
          slice_1894_update_start_ o<-& (slice_1894_update_completed_ 0)
          // Target expression
          // (as target) mem_req1_pipe0
          $T[WPIPE_mem_req1_pipe0_1892_sample_start_] 
          $T[WPIPE_mem_req1_pipe0_1892_sample_completed_] 
          $T[WPIPE_mem_req1_pipe0_1892_update_start_] 
          $T[WPIPE_mem_req1_pipe0_1892_update_completed_] 
          ;;[WPIPE_mem_req1_pipe0_1892_Sample] 
          {
            // pipe write sample-start mem_req1_pipe0
            $T [req] $T [ack] 
          }
          ;;[WPIPE_mem_req1_pipe0_1892_Update] 
          {
            // pipe write update (complete) mem_req1_pipe0
            $T [req] $T [ack] 
          }
          WPIPE_mem_req1_pipe0_1892_sample_start_ &-> (WPIPE_mem_req1_pipe0_1892_Sample)
          WPIPE_mem_req1_pipe0_1892_sample_completed_ <-& (WPIPE_mem_req1_pipe0_1892_Sample)
          WPIPE_mem_req1_pipe0_1892_update_start_ <-& (WPIPE_mem_req1_pipe0_1892_sample_completed_)
          WPIPE_mem_req1_pipe0_1892_update_start_ &-> (WPIPE_mem_req1_pipe0_1892_Update)
          WPIPE_mem_req1_pipe0_1892_update_completed_ <-& (WPIPE_mem_req1_pipe0_1892_Update)
          WPIPE_mem_req1_pipe0_1892_sample_start_ o<-& (WPIPE_mem_req1_pipe0_1892_update_completed_ 0)
          // start: Forward dependencies from ( $slice rdata 63 0 )  to transition WPIPE_mem_req1_pipe0_1892_sample_start_
          WPIPE_mem_req1_pipe0_1892_sample_start_ <-& (slice_1894_update_completed_)
          // done: Forward dependencies from ( $slice rdata 63 0 )  to transition WPIPE_mem_req1_pipe0_1892_sample_start_
          // RAW reenables for ( $slice rdata 63 0 ) 
          slice_1894_update_start_ o<-& (WPIPE_mem_req1_pipe0_1892_sample_completed_ 0)
          // end:  			mem_req1_pipe0 := ( $slice rdata 63 0 )  $buffering 1// bits of buffering = 64. 
          // start:  			mem_req1_pipe1 := ($bitcast ($uint<64>) ( $slice rdata 109 64 )  ) $buffering 1// bits of buffering = 64. 
          //  file nic.linked.opt.aa, line 686
          // Source expression
          // ($bitcast ($uint<64>) ( $slice rdata 109 64 )  )
          $T[type_cast_1900_sample_start_] 
          $T[type_cast_1900_sample_completed_] 
          $T[type_cast_1900_update_start_] 
          $T[type_cast_1900_update_completed_] 
          // ( $slice rdata 109 64 ) 
          // rdata
          // start: Forward dependencies from ( $slice rdata 109 64 )  to transition type_cast_1900_sample_start_
          type_cast_1900_sample_start_ <-& (phi_stmt_1886_update_completed_)
          // done: Forward dependencies from ( $slice rdata 109 64 )  to transition type_cast_1900_sample_start_
          ;;[type_cast_1900_Sample] 
          {
            // unary expression 
            $T [rr] $T [ra] // (split) unary operation
          }
          ;;[type_cast_1900_Update] 
          {
            // unary expression 
            $T [cr] $T [ca] //(split) unary operation
          }
          type_cast_1900_sample_start_ &-> (type_cast_1900_Sample)
          type_cast_1900_sample_completed_ <-& (type_cast_1900_Sample)
          type_cast_1900_sample_completed_ &-> ($null)
          type_cast_1900_update_start_ &-> (type_cast_1900_Update)
          type_cast_1900_update_completed_ <-& (type_cast_1900_Update)
          // RAW reenables for ( $slice rdata 109 64 ) 
          phi_stmt_1886_update_start_ o<-& (type_cast_1900_sample_completed_ 0)
          // self-release: 
          type_cast_1900_sample_start_ o<-& (type_cast_1900_sample_completed_ 1)
          $null &-> (type_cast_1900_update_start_)
          type_cast_1900_update_start_ o<-& (type_cast_1900_update_completed_ 0)
          // Target expression
          // (as target) mem_req1_pipe1
          $T[WPIPE_mem_req1_pipe1_1896_sample_start_] 
          $T[WPIPE_mem_req1_pipe1_1896_sample_completed_] 
          $T[WPIPE_mem_req1_pipe1_1896_update_start_] 
          $T[WPIPE_mem_req1_pipe1_1896_update_completed_] 
          ;;[WPIPE_mem_req1_pipe1_1896_Sample] 
          {
            // pipe write sample-start mem_req1_pipe1
            $T [req] $T [ack] 
          }
          ;;[WPIPE_mem_req1_pipe1_1896_Update] 
          {
            // pipe write update (complete) mem_req1_pipe1
            $T [req] $T [ack] 
          }
          WPIPE_mem_req1_pipe1_1896_sample_start_ &-> (WPIPE_mem_req1_pipe1_1896_Sample)
          WPIPE_mem_req1_pipe1_1896_sample_completed_ <-& (WPIPE_mem_req1_pipe1_1896_Sample)
          WPIPE_mem_req1_pipe1_1896_update_start_ <-& (WPIPE_mem_req1_pipe1_1896_sample_completed_)
          WPIPE_mem_req1_pipe1_1896_update_start_ &-> (WPIPE_mem_req1_pipe1_1896_Update)
          WPIPE_mem_req1_pipe1_1896_update_completed_ <-& (WPIPE_mem_req1_pipe1_1896_Update)
          WPIPE_mem_req1_pipe1_1896_sample_start_ o<-& (WPIPE_mem_req1_pipe1_1896_update_completed_ 0)
          // start: Forward dependencies from ($bitcast ($uint<64>) ( $slice rdata 109 64 )  ) to transition WPIPE_mem_req1_pipe1_1896_sample_start_
          WPIPE_mem_req1_pipe1_1896_sample_start_ <-& (type_cast_1900_update_completed_)
          // done: Forward dependencies from ($bitcast ($uint<64>) ( $slice rdata 109 64 )  ) to transition WPIPE_mem_req1_pipe1_1896_sample_start_
          // RAW reenables for ($bitcast ($uint<64>) ( $slice rdata 109 64 )  )
          type_cast_1900_update_start_ o<-& (WPIPE_mem_req1_pipe1_1896_sample_completed_ 0)
          // end:  			mem_req1_pipe1 := ($bitcast ($uint<64>) ( $slice rdata 109 64 )  ) $buffering 1// bits of buffering = 64. 
          $T [loop_body_delay_to_condition_start] $delay
          loop_body_start &-> (loop_body_delay_to_condition_start)
          loop_body_delay_to_condition_start &-> (condition_evaluated)
          condition_evaluated &-> ($null)
          // load-store dependencies..
          // pipe read/write dependencies for pipe NIC_TO_MEMORY_REQUEST
          // read-dependencies for pipe NIC_TO_MEMORY_REQUEST
          // write-dependencies for pipe NIC_TO_MEMORY_REQUEST
          // signal write dependencies for NIC_TO_MEMORY_REQUEST
          // pipe read/write dependencies for pipe mem_req1_pipe1
          // read-dependencies for pipe mem_req1_pipe1
          // write-dependencies for pipe mem_req1_pipe1
          // signal write dependencies for mem_req1_pipe1
          // pipe read/write dependencies for pipe mem_req1_pipe0
          // read-dependencies for pipe mem_req1_pipe0
          // write-dependencies for pipe mem_req1_pipe0
          // signal write dependencies for mem_req1_pipe0
        }
        ( first_time_through_loop_body  back_edge_to_loop_body) 
        ( condition_evaluated )
        ;; [loop_exit] 
        {
          $T [ack] 
        }
        ;; [loop_taken] 
        {
          $T [ack] 
        }
        do_while_stmt_1884__entry__ <-| ($entry)
        loop_body_done <-| ( do_while_stmt_1884_loop_body ) 
        condition_done |-> (loop_exit loop_taken)
        do_while_stmt_1884__exit__ |-> ($exit)
        $bind condition_done <= do_while_stmt_1884_loop_body : condition_evaluated
        $bind do_while_stmt_1884__entry__  => do_while_stmt_1884_loop_body : first_time_through_loop_body 
        $bind loop_back  => do_while_stmt_1884_loop_body : back_edge_to_loop_body 
        $terminate (loop_exit loop_taken loop_body_done) (loop_back do_while_stmt_1884__exit__)
      }
      do_while_stmt_1884__entry__ |-> (do_while_stmt_1884)
      do_while_stmt_1884__exit__ <-| (do_while_stmt_1884)
      do_while_stmt_1884__entry__ <-| (branch_block_stmt_1883__entry__)
      do_while_stmt_1884__exit__ |-> (branch_block_stmt_1883__exit__)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %nicToMemoryInterface%loop%
    //  file nic.linked.opt.aa, line 680
    // constant-object-declarations for block %nicToMemoryInterface%loop
    //  file nic.linked.opt.aa, line 676
    // constant-object-declarations for block %nicToMemoryInterface
    //  file nic.linked.opt.aa, line 671
    // constant-declarations for block %nicToMemoryInterface%loop
    //  file nic.linked.opt.aa, line 676
    // do-while statement  
    //  file nic.linked.opt.aa, line 678
    // 1 
    $constant $W[konst_1903_wire_constant] : $int<1> := _b1// 1
    // constant-declarations for block %nicToMemoryInterface%loop%
    //  file nic.linked.opt.aa, line 680
    // constant-declarations for phi:  			$phi rdata := 			  NIC_TO_MEMORY_REQUEST $on   $entry ,   $loopback 
    // type of target is $uint<110>
    //  file nic.linked.opt.aa, line 681
    // block %nicToMemoryInterface%loop
    //  file nic.linked.opt.aa, line 676
    // do-while statement  
    //  file nic.linked.opt.aa, line 678
    // merge-statement  
    //  file nic.linked.opt.aa, line 680
    // 			$phi rdata := 			  NIC_TO_MEMORY_REQUEST $on   $entry ,   $loopback 
    // type of target is $uint<110>
    //  file nic.linked.opt.aa, line 681
    // NIC_TO_MEMORY_REQUEST
    $W[RPIPE_NIC_TO_MEMORY_REQUEST_1888_wire] : $int<110>
    // rdata
    $W[rdata_1886] : $int<110>
    // 			mem_req1_pipe0 := ( $slice rdata 63 0 )  $buffering 1// bits of buffering = 64. 
    //  file nic.linked.opt.aa, line 685
    // ( $slice rdata 63 0 ) 
    $intermediate $W[slice_1894_wire] : $int<64>
    // mem_req1_pipe0
    // 			mem_req1_pipe1 := ($bitcast ($uint<64>) ( $slice rdata 109 64 )  ) $buffering 1// bits of buffering = 64. 
    //  file nic.linked.opt.aa, line 686
    // ( $slice rdata 109 64 ) 
    $intermediate $W[slice_1899_wire] : $int<46>
    // ($bitcast ($uint<64>) ( $slice rdata 109 64 )  )
    $intermediate $W[type_cast_1900_wire] : $int<64>
    // mem_req1_pipe1
    // datapath-instances for block %nicToMemoryInterface%loop
    //  file nic.linked.opt.aa, line 676
    // datapath-instances for do-while  
    //  file nic.linked.opt.aa, line 678
    ==0? [do_while_stmt_1884_branch] (konst_1903_wire_constant)
    $flowthrough
    // data-path instances for merge  
    //  file nic.linked.opt.aa, line 680
    // 			$phi rdata := 			  NIC_TO_MEMORY_REQUEST $on   $entry ,   $loopback 
    // type of target is $uint<110>
    //  file nic.linked.opt.aa, line 681
    // NIC_TO_MEMORY_REQUEST
    $ioport $in [RPIPE_NIC_TO_MEMORY_REQUEST_1888_inst] (NIC_TO_MEMORY_REQUEST) (RPIPE_NIC_TO_MEMORY_REQUEST_1888_wire)  $fullrate 
    $buffering $out RPIPE_NIC_TO_MEMORY_REQUEST_1888_inst RPIPE_NIC_TO_MEMORY_REQUEST_1888_wire 1
    # := [ssrc_phi_stmt_1886] (RPIPE_NIC_TO_MEMORY_REQUEST_1888_wire) (rdata_1886)    $flowthrough 
    // 			mem_req1_pipe0 := ( $slice rdata 63 0 )  $buffering 1// bits of buffering = 64. 
    //  file nic.linked.opt.aa, line 685
    // ( $slice rdata 63 0 ) 
    [:] [slice_1894_inst] (rdata_1886 63 0) (slice_1894_wire)  $fullrate
    $buffering  $out slice_1894_inst slice_1894_wire 1
    $delay slice_1894_inst 1
    // mem_req1_pipe0
    $ioport $out [WPIPE_mem_req1_pipe0_1892_inst]  (slice_1894_wire) (mem_req1_pipe0)  $fullrate 
    // 			mem_req1_pipe1 := ($bitcast ($uint<64>) ( $slice rdata 109 64 )  ) $buffering 1// bits of buffering = 64. 
    //  file nic.linked.opt.aa, line 686
    // ( $slice rdata 109 64 ) 
    [:] [slice_1899_inst] (rdata_1886 109 64) (slice_1899_wire)  $flowthrough
    $delay slice_1899_inst 0
    // ($bitcast ($uint<64>) ( $slice rdata 109 64 )  )
    # := [type_cast_1900_inst] (slice_1899_wire) (type_cast_1900_wire)     $fullrate
    $buffering  $out type_cast_1900_inst type_cast_1900_wire 1
    $delay type_cast_1900_inst 1
    // mem_req1_pipe1
    $ioport $out [WPIPE_mem_req1_pipe1_1896_inst]  (type_cast_1900_wire) (mem_req1_pipe1)  $fullrate 
  }
  // end data-path
  // CP-DP links for do-while  do_while_stmt_1884
  //  file nic.linked.opt.aa, line 678
  // NIC_TO_MEMORY_REQUEST
  RPIPE_NIC_TO_MEMORY_REQUEST_1888_inst <=> (branch_block_stmt_1883/do_while_stmt_1884/do_while_stmt_1884_loop_body/RPIPE_NIC_TO_MEMORY_REQUEST_1888_Sample/rr branch_block_stmt_1883/do_while_stmt_1884/do_while_stmt_1884_loop_body/RPIPE_NIC_TO_MEMORY_REQUEST_1888_Update/cr) (branch_block_stmt_1883/do_while_stmt_1884/do_while_stmt_1884_loop_body/RPIPE_NIC_TO_MEMORY_REQUEST_1888_Sample/ra branch_block_stmt_1883/do_while_stmt_1884/do_while_stmt_1884_loop_body/RPIPE_NIC_TO_MEMORY_REQUEST_1888_Update/ca)
  // 			mem_req1_pipe0 := ( $slice rdata 63 0 )  $buffering 1// bits of buffering = 64. 
  //  file nic.linked.opt.aa, line 685
  // rdata
  // ( $slice rdata 63 0 ) 
  slice_1894_inst <=> (branch_block_stmt_1883/do_while_stmt_1884/do_while_stmt_1884_loop_body/slice_1894_Sample/rr branch_block_stmt_1883/do_while_stmt_1884/do_while_stmt_1884_loop_body/slice_1894_Update/cr) (branch_block_stmt_1883/do_while_stmt_1884/do_while_stmt_1884_loop_body/slice_1894_Sample/ra branch_block_stmt_1883/do_while_stmt_1884/do_while_stmt_1884_loop_body/slice_1894_Update/ca)
  // mem_req1_pipe0
  WPIPE_mem_req1_pipe0_1892_inst <=> (branch_block_stmt_1883/do_while_stmt_1884/do_while_stmt_1884_loop_body/WPIPE_mem_req1_pipe0_1892_Sample/req branch_block_stmt_1883/do_while_stmt_1884/do_while_stmt_1884_loop_body/WPIPE_mem_req1_pipe0_1892_Update/req) (branch_block_stmt_1883/do_while_stmt_1884/do_while_stmt_1884_loop_body/WPIPE_mem_req1_pipe0_1892_Sample/ack branch_block_stmt_1883/do_while_stmt_1884/do_while_stmt_1884_loop_body/WPIPE_mem_req1_pipe0_1892_Update/ack)
  // 			mem_req1_pipe1 := ($bitcast ($uint<64>) ( $slice rdata 109 64 )  ) $buffering 1// bits of buffering = 64. 
  //  file nic.linked.opt.aa, line 686
  // rdata
  // ($bitcast ($uint<64>) ( $slice rdata 109 64 )  )
  type_cast_1900_inst <=> (branch_block_stmt_1883/do_while_stmt_1884/do_while_stmt_1884_loop_body/type_cast_1900_Sample/rr branch_block_stmt_1883/do_while_stmt_1884/do_while_stmt_1884_loop_body/type_cast_1900_Update/cr) (branch_block_stmt_1883/do_while_stmt_1884/do_while_stmt_1884_loop_body/type_cast_1900_Sample/ra branch_block_stmt_1883/do_while_stmt_1884/do_while_stmt_1884_loop_body/type_cast_1900_Update/ca)
  // mem_req1_pipe1
  WPIPE_mem_req1_pipe1_1896_inst <=> (branch_block_stmt_1883/do_while_stmt_1884/do_while_stmt_1884_loop_body/WPIPE_mem_req1_pipe1_1896_Sample/req branch_block_stmt_1883/do_while_stmt_1884/do_while_stmt_1884_loop_body/WPIPE_mem_req1_pipe1_1896_Update/req) (branch_block_stmt_1883/do_while_stmt_1884/do_while_stmt_1884_loop_body/WPIPE_mem_req1_pipe1_1896_Sample/ack branch_block_stmt_1883/do_while_stmt_1884/do_while_stmt_1884_loop_body/WPIPE_mem_req1_pipe1_1896_Update/ack)
  do_while_stmt_1884_branch <=> (branch_block_stmt_1883/do_while_stmt_1884/do_while_stmt_1884_loop_body/condition_evaluated) (branch_block_stmt_1883/do_while_stmt_1884/loop_exit/ack branch_block_stmt_1883/do_while_stmt_1884/loop_taken/ack)
}
$module [nicToProcessorInterface] 
{
  // pipe-declarations for block %nicToProcessorInterface
  //  file nic.linked.opt.aa, line 690
  // pipe-declarations for block %nicToProcessorInterface%loop
  //  file nic.linked.opt.aa, line 695
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    <>[branch_block_stmt_1907] // Branch Block  file nic.linked.opt.aa, line 695
    {
      $P [branch_block_stmt_1907__entry__]
      branch_block_stmt_1907__entry__ <-| ($entry)
      $P [branch_block_stmt_1907__exit__]
      branch_block_stmt_1907__exit__ |-> ($exit)
      $P [do_while_stmt_1908__entry__] 
      $P [do_while_stmt_1908__exit__] 
      // do-while-statement  
      //  file nic.linked.opt.aa, line 697
      <o> [do_while_stmt_1908]  $depth 7 $buffering 1 
      {
        $P[do_while_stmt_1908__entry__] 
        $P[do_while_stmt_1908__exit__] 
        $P[loop_back] 
        $P[condition_done] 
        $P[loop_body_done] 
        $pipeline [do_while_stmt_1908_loop_body] 
        {
          // Pipelined!
          $T[back_edge_to_loop_body] 
          $T[first_time_through_loop_body] 
          $T[loop_body_start] 
          $T[condition_evaluated] 
          $transitionmerge [entry_tmerge] (back_edge_to_loop_body first_time_through_loop_body) (loop_body_start)
          $entry <-& (loop_body_start)
          $T[aggregated_phi_sample_req] 
          $T[aggregated_phi_sample_ack] 
          $T[aggregated_phi_update_req] 
          $T[aggregated_phi_update_ack] 
          // do not loop-back unless all phi's have used up their triggering tokens.
          condition_evaluated <-& (aggregated_phi_update_ack)
          aggregated_phi_sample_req o<-& (aggregated_phi_update_ack 0)
          // start:  single source PHI statement phi_stmt_1910
          // 			$phi rdata := 			  AFB_NIC_RESPONSE $on   $entry ,   $loopback 
          // type of target is $uint<33>
          $T[phi_stmt_1910_sample_start_] 
          $T[phi_stmt_1910_sample_completed_] 
          $T[phi_stmt_1910_update_start_] 
          $T[phi_stmt_1910_update_completed_] 
          aggregated_phi_sample_req <-& (phi_stmt_1910_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_1910_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_1910_update_start_)
          // non-implicit source expression in single-source phi
          // AFB_NIC_RESPONSE
          $T[RPIPE_AFB_NIC_RESPONSE_1912_sample_start_] 
          $T[RPIPE_AFB_NIC_RESPONSE_1912_sample_completed_] 
          $T[RPIPE_AFB_NIC_RESPONSE_1912_update_start_] 
          $T[RPIPE_AFB_NIC_RESPONSE_1912_update_completed_] 
          ;;[RPIPE_AFB_NIC_RESPONSE_1912_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_AFB_NIC_RESPONSE_1912_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_AFB_NIC_RESPONSE_1912_sample_start_ &-> (RPIPE_AFB_NIC_RESPONSE_1912_Sample)
          RPIPE_AFB_NIC_RESPONSE_1912_sample_completed_ <-& (RPIPE_AFB_NIC_RESPONSE_1912_Sample)
          RPIPE_AFB_NIC_RESPONSE_1912_update_start_ <-& (RPIPE_AFB_NIC_RESPONSE_1912_sample_completed_)
          RPIPE_AFB_NIC_RESPONSE_1912_update_start_ &-> (RPIPE_AFB_NIC_RESPONSE_1912_Update)
          RPIPE_AFB_NIC_RESPONSE_1912_update_completed_ <-& (RPIPE_AFB_NIC_RESPONSE_1912_Update)
          RPIPE_AFB_NIC_RESPONSE_1912_sample_start_ o<-& (RPIPE_AFB_NIC_RESPONSE_1912_update_completed_ 0)
          // RAW reenables for AFB_NIC_RESPONSE
          // producer  and  consumer are both determined by PHI statements.
          aggregated_phi_sample_req &-> (RPIPE_AFB_NIC_RESPONSE_1912_sample_start_)
          aggregated_phi_sample_ack <-& (RPIPE_AFB_NIC_RESPONSE_1912_sample_completed_)
          aggregated_phi_update_req &-> (RPIPE_AFB_NIC_RESPONSE_1912_update_start_)
          phi_stmt_1910_update_completed_ <-& (RPIPE_AFB_NIC_RESPONSE_1912_update_completed_)
          aggregated_phi_update_ack <-& (phi_stmt_1910_update_completed_)
          // done: PHI Statement phi_stmt_1910
          // start:  			control_word_response_pipe := ($bitcast ($uint<64>) rdata ) $buffering 1// bits of buffering = 64. 
          //  file nic.linked.opt.aa, line 703
          // Source expression
          // ($bitcast ($uint<64>) rdata )
          $T[type_cast_1916_sample_start_] 
          $T[type_cast_1916_sample_completed_] 
          $T[type_cast_1916_update_start_] 
          $T[type_cast_1916_update_completed_] 
          // rdata
          // start: Forward dependencies from rdata to transition type_cast_1916_sample_start_
          type_cast_1916_sample_start_ <-& (phi_stmt_1910_update_completed_)
          // done: Forward dependencies from rdata to transition type_cast_1916_sample_start_
          ;;[type_cast_1916_Sample] 
          {
            // unary expression 
            $T [rr] $T [ra] // (split) unary operation
          }
          ;;[type_cast_1916_Update] 
          {
            // unary expression 
            $T [cr] $T [ca] //(split) unary operation
          }
          type_cast_1916_sample_start_ &-> (type_cast_1916_Sample)
          type_cast_1916_sample_completed_ <-& (type_cast_1916_Sample)
          type_cast_1916_sample_completed_ &-> ($null)
          type_cast_1916_update_start_ &-> (type_cast_1916_Update)
          type_cast_1916_update_completed_ <-& (type_cast_1916_Update)
          // RAW reenables for rdata
          phi_stmt_1910_update_start_ o<-& (type_cast_1916_sample_completed_ 0)
          // self-release: 
          type_cast_1916_sample_start_ o<-& (type_cast_1916_sample_completed_ 1)
          $null &-> (type_cast_1916_update_start_)
          type_cast_1916_update_start_ o<-& (type_cast_1916_update_completed_ 0)
          // Target expression
          // (as target) control_word_response_pipe
          $T[WPIPE_control_word_response_pipe_1914_sample_start_] 
          $T[WPIPE_control_word_response_pipe_1914_sample_completed_] 
          $T[WPIPE_control_word_response_pipe_1914_update_start_] 
          $T[WPIPE_control_word_response_pipe_1914_update_completed_] 
          ;;[WPIPE_control_word_response_pipe_1914_Sample] 
          {
            // pipe write sample-start control_word_response_pipe
            $T [req] $T [ack] 
          }
          ;;[WPIPE_control_word_response_pipe_1914_Update] 
          {
            // pipe write update (complete) control_word_response_pipe
            $T [req] $T [ack] 
          }
          WPIPE_control_word_response_pipe_1914_sample_start_ &-> (WPIPE_control_word_response_pipe_1914_Sample)
          WPIPE_control_word_response_pipe_1914_sample_completed_ <-& (WPIPE_control_word_response_pipe_1914_Sample)
          WPIPE_control_word_response_pipe_1914_update_start_ <-& (WPIPE_control_word_response_pipe_1914_sample_completed_)
          WPIPE_control_word_response_pipe_1914_update_start_ &-> (WPIPE_control_word_response_pipe_1914_Update)
          WPIPE_control_word_response_pipe_1914_update_completed_ <-& (WPIPE_control_word_response_pipe_1914_Update)
          WPIPE_control_word_response_pipe_1914_sample_start_ o<-& (WPIPE_control_word_response_pipe_1914_update_completed_ 0)
          // start: Forward dependencies from ($bitcast ($uint<64>) rdata ) to transition WPIPE_control_word_response_pipe_1914_sample_start_
          WPIPE_control_word_response_pipe_1914_sample_start_ <-& (type_cast_1916_update_completed_)
          // done: Forward dependencies from ($bitcast ($uint<64>) rdata ) to transition WPIPE_control_word_response_pipe_1914_sample_start_
          // RAW reenables for ($bitcast ($uint<64>) rdata )
          type_cast_1916_update_start_ o<-& (WPIPE_control_word_response_pipe_1914_sample_completed_ 0)
          // end:  			control_word_response_pipe := ($bitcast ($uint<64>) rdata ) $buffering 1// bits of buffering = 64. 
          $T [loop_body_delay_to_condition_start] $delay
          loop_body_start &-> (loop_body_delay_to_condition_start)
          loop_body_delay_to_condition_start &-> (condition_evaluated)
          condition_evaluated &-> ($null)
          // load-store dependencies..
          // pipe read/write dependencies for pipe AFB_NIC_RESPONSE
          // read-dependencies for pipe AFB_NIC_RESPONSE
          // write-dependencies for pipe AFB_NIC_RESPONSE
          // signal write dependencies for AFB_NIC_RESPONSE
          // pipe read/write dependencies for pipe control_word_response_pipe
          // read-dependencies for pipe control_word_response_pipe
          // write-dependencies for pipe control_word_response_pipe
          // signal write dependencies for control_word_response_pipe
        }
        ( first_time_through_loop_body  back_edge_to_loop_body) 
        ( condition_evaluated )
        ;; [loop_exit] 
        {
          $T [ack] 
        }
        ;; [loop_taken] 
        {
          $T [ack] 
        }
        do_while_stmt_1908__entry__ <-| ($entry)
        loop_body_done <-| ( do_while_stmt_1908_loop_body ) 
        condition_done |-> (loop_exit loop_taken)
        do_while_stmt_1908__exit__ |-> ($exit)
        $bind condition_done <= do_while_stmt_1908_loop_body : condition_evaluated
        $bind do_while_stmt_1908__entry__  => do_while_stmt_1908_loop_body : first_time_through_loop_body 
        $bind loop_back  => do_while_stmt_1908_loop_body : back_edge_to_loop_body 
        $terminate (loop_exit loop_taken loop_body_done) (loop_back do_while_stmt_1908__exit__)
      }
      do_while_stmt_1908__entry__ |-> (do_while_stmt_1908)
      do_while_stmt_1908__exit__ <-| (do_while_stmt_1908)
      do_while_stmt_1908__entry__ <-| (branch_block_stmt_1907__entry__)
      do_while_stmt_1908__exit__ |-> (branch_block_stmt_1907__exit__)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %nicToProcessorInterface%loop%
    //  file nic.linked.opt.aa, line 699
    // constant-object-declarations for block %nicToProcessorInterface%loop
    //  file nic.linked.opt.aa, line 695
    // constant-object-declarations for block %nicToProcessorInterface
    //  file nic.linked.opt.aa, line 690
    // constant-declarations for block %nicToProcessorInterface%loop
    //  file nic.linked.opt.aa, line 695
    // do-while statement  
    //  file nic.linked.opt.aa, line 697
    // 1 
    $constant $W[konst_1919_wire_constant] : $int<1> := _b1// 1
    // constant-declarations for block %nicToProcessorInterface%loop%
    //  file nic.linked.opt.aa, line 699
    // constant-declarations for phi:  			$phi rdata := 			  AFB_NIC_RESPONSE $on   $entry ,   $loopback 
    // type of target is $uint<33>
    //  file nic.linked.opt.aa, line 700
    // block %nicToProcessorInterface%loop
    //  file nic.linked.opt.aa, line 695
    // do-while statement  
    //  file nic.linked.opt.aa, line 697
    // merge-statement  
    //  file nic.linked.opt.aa, line 699
    // 			$phi rdata := 			  AFB_NIC_RESPONSE $on   $entry ,   $loopback 
    // type of target is $uint<33>
    //  file nic.linked.opt.aa, line 700
    // AFB_NIC_RESPONSE
    $W[RPIPE_AFB_NIC_RESPONSE_1912_wire] : $int<33>
    // rdata
    $W[rdata_1910] : $int<33>
    // 			control_word_response_pipe := ($bitcast ($uint<64>) rdata ) $buffering 1// bits of buffering = 64. 
    //  file nic.linked.opt.aa, line 703
    // ($bitcast ($uint<64>) rdata )
    $intermediate $W[type_cast_1916_wire] : $int<64>
    // control_word_response_pipe
    // datapath-instances for block %nicToProcessorInterface%loop
    //  file nic.linked.opt.aa, line 695
    // datapath-instances for do-while  
    //  file nic.linked.opt.aa, line 697
    ==0? [do_while_stmt_1908_branch] (konst_1919_wire_constant)
    $flowthrough
    // data-path instances for merge  
    //  file nic.linked.opt.aa, line 699
    // 			$phi rdata := 			  AFB_NIC_RESPONSE $on   $entry ,   $loopback 
    // type of target is $uint<33>
    //  file nic.linked.opt.aa, line 700
    // AFB_NIC_RESPONSE
    $ioport $in [RPIPE_AFB_NIC_RESPONSE_1912_inst] (AFB_NIC_RESPONSE) (RPIPE_AFB_NIC_RESPONSE_1912_wire)  $fullrate 
    $buffering $out RPIPE_AFB_NIC_RESPONSE_1912_inst RPIPE_AFB_NIC_RESPONSE_1912_wire 1
    # := [ssrc_phi_stmt_1910] (RPIPE_AFB_NIC_RESPONSE_1912_wire) (rdata_1910)    $flowthrough 
    // 			control_word_response_pipe := ($bitcast ($uint<64>) rdata ) $buffering 1// bits of buffering = 64. 
    //  file nic.linked.opt.aa, line 703
    // ($bitcast ($uint<64>) rdata )
    # := [type_cast_1916_inst] (rdata_1910) (type_cast_1916_wire)     $fullrate
    $buffering  $out type_cast_1916_inst type_cast_1916_wire 1
    $delay type_cast_1916_inst 1
    // control_word_response_pipe
    $ioport $out [WPIPE_control_word_response_pipe_1914_inst]  (type_cast_1916_wire) (control_word_response_pipe)  $fullrate 
  }
  // end data-path
  // CP-DP links for do-while  do_while_stmt_1908
  //  file nic.linked.opt.aa, line 697
  // AFB_NIC_RESPONSE
  RPIPE_AFB_NIC_RESPONSE_1912_inst <=> (branch_block_stmt_1907/do_while_stmt_1908/do_while_stmt_1908_loop_body/RPIPE_AFB_NIC_RESPONSE_1912_Sample/rr branch_block_stmt_1907/do_while_stmt_1908/do_while_stmt_1908_loop_body/RPIPE_AFB_NIC_RESPONSE_1912_Update/cr) (branch_block_stmt_1907/do_while_stmt_1908/do_while_stmt_1908_loop_body/RPIPE_AFB_NIC_RESPONSE_1912_Sample/ra branch_block_stmt_1907/do_while_stmt_1908/do_while_stmt_1908_loop_body/RPIPE_AFB_NIC_RESPONSE_1912_Update/ca)
  // 			control_word_response_pipe := ($bitcast ($uint<64>) rdata ) $buffering 1// bits of buffering = 64. 
  //  file nic.linked.opt.aa, line 703
  // rdata
  // ($bitcast ($uint<64>) rdata )
  type_cast_1916_inst <=> (branch_block_stmt_1907/do_while_stmt_1908/do_while_stmt_1908_loop_body/type_cast_1916_Sample/rr branch_block_stmt_1907/do_while_stmt_1908/do_while_stmt_1908_loop_body/type_cast_1916_Update/cr) (branch_block_stmt_1907/do_while_stmt_1908/do_while_stmt_1908_loop_body/type_cast_1916_Sample/ra branch_block_stmt_1907/do_while_stmt_1908/do_while_stmt_1908_loop_body/type_cast_1916_Update/ca)
  // control_word_response_pipe
  WPIPE_control_word_response_pipe_1914_inst <=> (branch_block_stmt_1907/do_while_stmt_1908/do_while_stmt_1908_loop_body/WPIPE_control_word_response_pipe_1914_Sample/req branch_block_stmt_1907/do_while_stmt_1908/do_while_stmt_1908_loop_body/WPIPE_control_word_response_pipe_1914_Update/req) (branch_block_stmt_1907/do_while_stmt_1908/do_while_stmt_1908_loop_body/WPIPE_control_word_response_pipe_1914_Sample/ack branch_block_stmt_1907/do_while_stmt_1908/do_while_stmt_1908_loop_body/WPIPE_control_word_response_pipe_1914_Update/ack)
  do_while_stmt_1908_branch <=> (branch_block_stmt_1907/do_while_stmt_1908/do_while_stmt_1908_loop_body/condition_evaluated) (branch_block_stmt_1907/do_while_stmt_1908/loop_exit/ack branch_block_stmt_1907/do_while_stmt_1908/loop_taken/ack)
}
$module [processorToMemoryInterface] 
{
  // pipe-declarations for block %processorToMemoryInterface
  //  file nic.linked.opt.aa, line 707
  // pipe-declarations for block %processorToMemoryInterface%loop
  //  file nic.linked.opt.aa, line 712
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    <>[branch_block_stmt_1923] // Branch Block  file nic.linked.opt.aa, line 712
    {
      $P [branch_block_stmt_1923__entry__]
      branch_block_stmt_1923__entry__ <-| ($entry)
      $P [branch_block_stmt_1923__exit__]
      branch_block_stmt_1923__exit__ |-> ($exit)
      $P [do_while_stmt_1924__entry__] 
      $P [do_while_stmt_1924__exit__] 
      // do-while-statement  
      //  file nic.linked.opt.aa, line 714
      <o> [do_while_stmt_1924]  $depth 7 $buffering 1 
      {
        $P[do_while_stmt_1924__entry__] 
        $P[do_while_stmt_1924__exit__] 
        $P[loop_back] 
        $P[condition_done] 
        $P[loop_body_done] 
        $pipeline [do_while_stmt_1924_loop_body] 
        {
          // Pipelined!
          $T[back_edge_to_loop_body] 
          $T[first_time_through_loop_body] 
          $T[loop_body_start] 
          $T[condition_evaluated] 
          $transitionmerge [entry_tmerge] (back_edge_to_loop_body first_time_through_loop_body) (loop_body_start)
          $entry <-& (loop_body_start)
          $T[aggregated_phi_sample_req] 
          $T[aggregated_phi_sample_ack] 
          $T[aggregated_phi_update_req] 
          $T[aggregated_phi_update_ack] 
          // do not loop-back unless all phi's have used up their triggering tokens.
          condition_evaluated <-& (aggregated_phi_update_ack)
          aggregated_phi_sample_req o<-& (aggregated_phi_update_ack 0)
          // start:  single source PHI statement phi_stmt_1926
          // 			$phi rdata0 := 			  mem_req0_pipe0_tester $on   $entry ,   $loopback 
          // type of target is $uint<64>
          $T[phi_stmt_1926_sample_start_] 
          $T[phi_stmt_1926_sample_completed_] 
          $T[phi_stmt_1926_update_start_] 
          $T[phi_stmt_1926_update_completed_] 
          aggregated_phi_sample_req <-& (phi_stmt_1926_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_1926_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_1926_update_start_)
          // non-implicit source expression in single-source phi
          // mem_req0_pipe0_tester
          $T[RPIPE_mem_req0_pipe0_tester_1928_sample_start_] 
          $T[RPIPE_mem_req0_pipe0_tester_1928_sample_completed_] 
          $T[RPIPE_mem_req0_pipe0_tester_1928_update_start_] 
          $T[RPIPE_mem_req0_pipe0_tester_1928_update_completed_] 
          ;;[RPIPE_mem_req0_pipe0_tester_1928_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_mem_req0_pipe0_tester_1928_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_mem_req0_pipe0_tester_1928_sample_start_ &-> (RPIPE_mem_req0_pipe0_tester_1928_Sample)
          RPIPE_mem_req0_pipe0_tester_1928_sample_completed_ <-& (RPIPE_mem_req0_pipe0_tester_1928_Sample)
          RPIPE_mem_req0_pipe0_tester_1928_update_start_ <-& (RPIPE_mem_req0_pipe0_tester_1928_sample_completed_)
          RPIPE_mem_req0_pipe0_tester_1928_update_start_ &-> (RPIPE_mem_req0_pipe0_tester_1928_Update)
          RPIPE_mem_req0_pipe0_tester_1928_update_completed_ <-& (RPIPE_mem_req0_pipe0_tester_1928_Update)
          RPIPE_mem_req0_pipe0_tester_1928_sample_start_ o<-& (RPIPE_mem_req0_pipe0_tester_1928_update_completed_ 0)
          // RAW reenables for mem_req0_pipe0_tester
          // producer  and  consumer are both determined by PHI statements.
          aggregated_phi_sample_req &-> (RPIPE_mem_req0_pipe0_tester_1928_sample_start_)
          aggregated_phi_sample_ack <-& (RPIPE_mem_req0_pipe0_tester_1928_sample_completed_)
          aggregated_phi_update_req &-> (RPIPE_mem_req0_pipe0_tester_1928_update_start_)
          phi_stmt_1926_update_completed_ <-& (RPIPE_mem_req0_pipe0_tester_1928_update_completed_)
          aggregated_phi_update_ack <-& (phi_stmt_1926_update_completed_)
          // done: PHI Statement phi_stmt_1926
          // start:  single source PHI statement phi_stmt_1929
          // 			$phi rdata1 := 			  mem_req0_pipe1_tester $on   $entry ,   $loopback 
          // type of target is $uint<64>
          $T[phi_stmt_1929_sample_start_] 
          $T[phi_stmt_1929_sample_completed_] 
          $T[phi_stmt_1929_update_start_] 
          $T[phi_stmt_1929_update_completed_] 
          aggregated_phi_sample_req <-& (phi_stmt_1929_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_1929_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_1929_update_start_)
          // non-implicit source expression in single-source phi
          // mem_req0_pipe1_tester
          $T[RPIPE_mem_req0_pipe1_tester_1931_sample_start_] 
          $T[RPIPE_mem_req0_pipe1_tester_1931_sample_completed_] 
          $T[RPIPE_mem_req0_pipe1_tester_1931_update_start_] 
          $T[RPIPE_mem_req0_pipe1_tester_1931_update_completed_] 
          ;;[RPIPE_mem_req0_pipe1_tester_1931_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_mem_req0_pipe1_tester_1931_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_mem_req0_pipe1_tester_1931_sample_start_ &-> (RPIPE_mem_req0_pipe1_tester_1931_Sample)
          RPIPE_mem_req0_pipe1_tester_1931_sample_completed_ <-& (RPIPE_mem_req0_pipe1_tester_1931_Sample)
          RPIPE_mem_req0_pipe1_tester_1931_update_start_ <-& (RPIPE_mem_req0_pipe1_tester_1931_sample_completed_)
          RPIPE_mem_req0_pipe1_tester_1931_update_start_ &-> (RPIPE_mem_req0_pipe1_tester_1931_Update)
          RPIPE_mem_req0_pipe1_tester_1931_update_completed_ <-& (RPIPE_mem_req0_pipe1_tester_1931_Update)
          RPIPE_mem_req0_pipe1_tester_1931_sample_start_ o<-& (RPIPE_mem_req0_pipe1_tester_1931_update_completed_ 0)
          // RAW reenables for mem_req0_pipe1_tester
          // producer  and  consumer are both determined by PHI statements.
          aggregated_phi_sample_req &-> (RPIPE_mem_req0_pipe1_tester_1931_sample_start_)
          aggregated_phi_sample_ack <-& (RPIPE_mem_req0_pipe1_tester_1931_sample_completed_)
          aggregated_phi_update_req &-> (RPIPE_mem_req0_pipe1_tester_1931_update_start_)
          phi_stmt_1929_update_completed_ <-& (RPIPE_mem_req0_pipe1_tester_1931_update_completed_)
          aggregated_phi_update_ack <-& (phi_stmt_1929_update_completed_)
          // done: PHI Statement phi_stmt_1929
          // start:  			mem_req0_pipe0 := rdata0 $buffering 1// bits of buffering = 64. 
          //  file nic.linked.opt.aa, line 723
          // Source expression
          // rdata0
          // Target expression
          // (as target) mem_req0_pipe0
          $T[WPIPE_mem_req0_pipe0_1936_sample_start_] 
          $T[WPIPE_mem_req0_pipe0_1936_sample_completed_] 
          $T[WPIPE_mem_req0_pipe0_1936_update_start_] 
          $T[WPIPE_mem_req0_pipe0_1936_update_completed_] 
          ;;[WPIPE_mem_req0_pipe0_1936_Sample] 
          {
            // pipe write sample-start mem_req0_pipe0
            $T [req] $T [ack] 
          }
          ;;[WPIPE_mem_req0_pipe0_1936_Update] 
          {
            // pipe write update (complete) mem_req0_pipe0
            $T [req] $T [ack] 
          }
          WPIPE_mem_req0_pipe0_1936_sample_start_ &-> (WPIPE_mem_req0_pipe0_1936_Sample)
          WPIPE_mem_req0_pipe0_1936_sample_completed_ <-& (WPIPE_mem_req0_pipe0_1936_Sample)
          WPIPE_mem_req0_pipe0_1936_update_start_ <-& (WPIPE_mem_req0_pipe0_1936_sample_completed_)
          WPIPE_mem_req0_pipe0_1936_update_start_ &-> (WPIPE_mem_req0_pipe0_1936_Update)
          WPIPE_mem_req0_pipe0_1936_update_completed_ <-& (WPIPE_mem_req0_pipe0_1936_Update)
          WPIPE_mem_req0_pipe0_1936_sample_start_ o<-& (WPIPE_mem_req0_pipe0_1936_update_completed_ 0)
          // start: Forward dependencies from rdata0 to transition WPIPE_mem_req0_pipe0_1936_sample_start_
          WPIPE_mem_req0_pipe0_1936_sample_start_ <-& (phi_stmt_1926_update_completed_)
          // done: Forward dependencies from rdata0 to transition WPIPE_mem_req0_pipe0_1936_sample_start_
          // RAW reenables for rdata0
          phi_stmt_1926_update_start_ o<-& (WPIPE_mem_req0_pipe0_1936_sample_completed_ 0)
          // end:  			mem_req0_pipe0 := rdata0 $buffering 1// bits of buffering = 64. 
          // start:  			mem_req0_pipe1 := rdata1 $buffering 1// bits of buffering = 64. 
          //  file nic.linked.opt.aa, line 724
          // Source expression
          // rdata1
          // Target expression
          // (as target) mem_req0_pipe1
          $T[WPIPE_mem_req0_pipe1_1939_sample_start_] 
          $T[WPIPE_mem_req0_pipe1_1939_sample_completed_] 
          $T[WPIPE_mem_req0_pipe1_1939_update_start_] 
          $T[WPIPE_mem_req0_pipe1_1939_update_completed_] 
          ;;[WPIPE_mem_req0_pipe1_1939_Sample] 
          {
            // pipe write sample-start mem_req0_pipe1
            $T [req] $T [ack] 
          }
          ;;[WPIPE_mem_req0_pipe1_1939_Update] 
          {
            // pipe write update (complete) mem_req0_pipe1
            $T [req] $T [ack] 
          }
          WPIPE_mem_req0_pipe1_1939_sample_start_ &-> (WPIPE_mem_req0_pipe1_1939_Sample)
          WPIPE_mem_req0_pipe1_1939_sample_completed_ <-& (WPIPE_mem_req0_pipe1_1939_Sample)
          WPIPE_mem_req0_pipe1_1939_update_start_ <-& (WPIPE_mem_req0_pipe1_1939_sample_completed_)
          WPIPE_mem_req0_pipe1_1939_update_start_ &-> (WPIPE_mem_req0_pipe1_1939_Update)
          WPIPE_mem_req0_pipe1_1939_update_completed_ <-& (WPIPE_mem_req0_pipe1_1939_Update)
          WPIPE_mem_req0_pipe1_1939_sample_start_ o<-& (WPIPE_mem_req0_pipe1_1939_update_completed_ 0)
          // start: Forward dependencies from rdata1 to transition WPIPE_mem_req0_pipe1_1939_sample_start_
          WPIPE_mem_req0_pipe1_1939_sample_start_ <-& (phi_stmt_1929_update_completed_)
          // done: Forward dependencies from rdata1 to transition WPIPE_mem_req0_pipe1_1939_sample_start_
          // RAW reenables for rdata1
          phi_stmt_1929_update_start_ o<-& (WPIPE_mem_req0_pipe1_1939_sample_completed_ 0)
          // end:  			mem_req0_pipe1 := rdata1 $buffering 1// bits of buffering = 64. 
          $T [loop_body_delay_to_condition_start] $delay
          loop_body_start &-> (loop_body_delay_to_condition_start)
          loop_body_delay_to_condition_start &-> (condition_evaluated)
          condition_evaluated &-> ($null)
          // load-store dependencies..
          // pipe read/write dependencies for pipe mem_req0_pipe0
          // read-dependencies for pipe mem_req0_pipe0
          // write-dependencies for pipe mem_req0_pipe0
          // signal write dependencies for mem_req0_pipe0
          // pipe read/write dependencies for pipe mem_req0_pipe0_tester
          // read-dependencies for pipe mem_req0_pipe0_tester
          // write-dependencies for pipe mem_req0_pipe0_tester
          // signal write dependencies for mem_req0_pipe0_tester
          // pipe read/write dependencies for pipe mem_req0_pipe1
          // read-dependencies for pipe mem_req0_pipe1
          // write-dependencies for pipe mem_req0_pipe1
          // signal write dependencies for mem_req0_pipe1
          // pipe read/write dependencies for pipe mem_req0_pipe1_tester
          // read-dependencies for pipe mem_req0_pipe1_tester
          // write-dependencies for pipe mem_req0_pipe1_tester
          // signal write dependencies for mem_req0_pipe1_tester
        }
        ( first_time_through_loop_body  back_edge_to_loop_body) 
        ( condition_evaluated )
        ;; [loop_exit] 
        {
          $T [ack] 
        }
        ;; [loop_taken] 
        {
          $T [ack] 
        }
        do_while_stmt_1924__entry__ <-| ($entry)
        loop_body_done <-| ( do_while_stmt_1924_loop_body ) 
        condition_done |-> (loop_exit loop_taken)
        do_while_stmt_1924__exit__ |-> ($exit)
        $bind condition_done <= do_while_stmt_1924_loop_body : condition_evaluated
        $bind do_while_stmt_1924__entry__  => do_while_stmt_1924_loop_body : first_time_through_loop_body 
        $bind loop_back  => do_while_stmt_1924_loop_body : back_edge_to_loop_body 
        $terminate (loop_exit loop_taken loop_body_done) (loop_back do_while_stmt_1924__exit__)
      }
      do_while_stmt_1924__entry__ |-> (do_while_stmt_1924)
      do_while_stmt_1924__exit__ <-| (do_while_stmt_1924)
      do_while_stmt_1924__entry__ <-| (branch_block_stmt_1923__entry__)
      do_while_stmt_1924__exit__ |-> (branch_block_stmt_1923__exit__)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %processorToMemoryInterface%loop%
    //  file nic.linked.opt.aa, line 716
    // constant-object-declarations for block %processorToMemoryInterface%loop
    //  file nic.linked.opt.aa, line 712
    // constant-object-declarations for block %processorToMemoryInterface
    //  file nic.linked.opt.aa, line 707
    // constant-declarations for block %processorToMemoryInterface%loop
    //  file nic.linked.opt.aa, line 712
    // do-while statement  
    //  file nic.linked.opt.aa, line 714
    // 1 
    $constant $W[konst_1943_wire_constant] : $int<1> := _b1// 1
    // constant-declarations for block %processorToMemoryInterface%loop%
    //  file nic.linked.opt.aa, line 716
    // constant-declarations for phi:  			$phi rdata0 := 			  mem_req0_pipe0_tester $on   $entry ,   $loopback 
    // type of target is $uint<64>
    //  file nic.linked.opt.aa, line 717
    // constant-declarations for phi:  			$phi rdata1 := 			  mem_req0_pipe1_tester $on   $entry ,   $loopback 
    // type of target is $uint<64>
    //  file nic.linked.opt.aa, line 719
    // block %processorToMemoryInterface%loop
    //  file nic.linked.opt.aa, line 712
    // do-while statement  
    //  file nic.linked.opt.aa, line 714
    // merge-statement  
    //  file nic.linked.opt.aa, line 716
    // 			$phi rdata0 := 			  mem_req0_pipe0_tester $on   $entry ,   $loopback 
    // type of target is $uint<64>
    //  file nic.linked.opt.aa, line 717
    // mem_req0_pipe0_tester
    $W[RPIPE_mem_req0_pipe0_tester_1928_wire] : $int<64>
    // rdata0
    $W[rdata0_1926] : $int<64>
    // 			$phi rdata1 := 			  mem_req0_pipe1_tester $on   $entry ,   $loopback 
    // type of target is $uint<64>
    //  file nic.linked.opt.aa, line 719
    // mem_req0_pipe1_tester
    $W[RPIPE_mem_req0_pipe1_tester_1931_wire] : $int<64>
    // rdata1
    $W[rdata1_1929] : $int<64>
    // 			mem_req0_pipe0 := rdata0 $buffering 1// bits of buffering = 64. 
    //  file nic.linked.opt.aa, line 723
    // mem_req0_pipe0
    // 			mem_req0_pipe1 := rdata1 $buffering 1// bits of buffering = 64. 
    //  file nic.linked.opt.aa, line 724
    // mem_req0_pipe1
    // datapath-instances for block %processorToMemoryInterface%loop
    //  file nic.linked.opt.aa, line 712
    // datapath-instances for do-while  
    //  file nic.linked.opt.aa, line 714
    ==0? [do_while_stmt_1924_branch] (konst_1943_wire_constant)
    $flowthrough
    // data-path instances for merge  
    //  file nic.linked.opt.aa, line 716
    // 			$phi rdata0 := 			  mem_req0_pipe0_tester $on   $entry ,   $loopback 
    // type of target is $uint<64>
    //  file nic.linked.opt.aa, line 717
    // mem_req0_pipe0_tester
    $ioport $in [RPIPE_mem_req0_pipe0_tester_1928_inst] (mem_req0_pipe0_tester) (RPIPE_mem_req0_pipe0_tester_1928_wire)  $fullrate 
    $buffering $out RPIPE_mem_req0_pipe0_tester_1928_inst RPIPE_mem_req0_pipe0_tester_1928_wire 1
    # := [ssrc_phi_stmt_1926] (RPIPE_mem_req0_pipe0_tester_1928_wire) (rdata0_1926)    $flowthrough 
    // 			$phi rdata1 := 			  mem_req0_pipe1_tester $on   $entry ,   $loopback 
    // type of target is $uint<64>
    //  file nic.linked.opt.aa, line 719
    // mem_req0_pipe1_tester
    $ioport $in [RPIPE_mem_req0_pipe1_tester_1931_inst] (mem_req0_pipe1_tester) (RPIPE_mem_req0_pipe1_tester_1931_wire)  $fullrate 
    $buffering $out RPIPE_mem_req0_pipe1_tester_1931_inst RPIPE_mem_req0_pipe1_tester_1931_wire 1
    # := [ssrc_phi_stmt_1929] (RPIPE_mem_req0_pipe1_tester_1931_wire) (rdata1_1929)    $flowthrough 
    // 			mem_req0_pipe0 := rdata0 $buffering 1// bits of buffering = 64. 
    //  file nic.linked.opt.aa, line 723
    // mem_req0_pipe0
    $ioport $out [WPIPE_mem_req0_pipe0_1936_inst]  (rdata0_1926) (mem_req0_pipe0)  $fullrate 
    // 			mem_req0_pipe1 := rdata1 $buffering 1// bits of buffering = 64. 
    //  file nic.linked.opt.aa, line 724
    // mem_req0_pipe1
    $ioport $out [WPIPE_mem_req0_pipe1_1939_inst]  (rdata1_1929) (mem_req0_pipe1)  $fullrate 
  }
  // end data-path
  // CP-DP links for do-while  do_while_stmt_1924
  //  file nic.linked.opt.aa, line 714
  // mem_req0_pipe0_tester
  RPIPE_mem_req0_pipe0_tester_1928_inst <=> (branch_block_stmt_1923/do_while_stmt_1924/do_while_stmt_1924_loop_body/RPIPE_mem_req0_pipe0_tester_1928_Sample/rr branch_block_stmt_1923/do_while_stmt_1924/do_while_stmt_1924_loop_body/RPIPE_mem_req0_pipe0_tester_1928_Update/cr) (branch_block_stmt_1923/do_while_stmt_1924/do_while_stmt_1924_loop_body/RPIPE_mem_req0_pipe0_tester_1928_Sample/ra branch_block_stmt_1923/do_while_stmt_1924/do_while_stmt_1924_loop_body/RPIPE_mem_req0_pipe0_tester_1928_Update/ca)
  // mem_req0_pipe1_tester
  RPIPE_mem_req0_pipe1_tester_1931_inst <=> (branch_block_stmt_1923/do_while_stmt_1924/do_while_stmt_1924_loop_body/RPIPE_mem_req0_pipe1_tester_1931_Sample/rr branch_block_stmt_1923/do_while_stmt_1924/do_while_stmt_1924_loop_body/RPIPE_mem_req0_pipe1_tester_1931_Update/cr) (branch_block_stmt_1923/do_while_stmt_1924/do_while_stmt_1924_loop_body/RPIPE_mem_req0_pipe1_tester_1931_Sample/ra branch_block_stmt_1923/do_while_stmt_1924/do_while_stmt_1924_loop_body/RPIPE_mem_req0_pipe1_tester_1931_Update/ca)
  // 			mem_req0_pipe0 := rdata0 $buffering 1// bits of buffering = 64. 
  //  file nic.linked.opt.aa, line 723
  // rdata0
  // mem_req0_pipe0
  WPIPE_mem_req0_pipe0_1936_inst <=> (branch_block_stmt_1923/do_while_stmt_1924/do_while_stmt_1924_loop_body/WPIPE_mem_req0_pipe0_1936_Sample/req branch_block_stmt_1923/do_while_stmt_1924/do_while_stmt_1924_loop_body/WPIPE_mem_req0_pipe0_1936_Update/req) (branch_block_stmt_1923/do_while_stmt_1924/do_while_stmt_1924_loop_body/WPIPE_mem_req0_pipe0_1936_Sample/ack branch_block_stmt_1923/do_while_stmt_1924/do_while_stmt_1924_loop_body/WPIPE_mem_req0_pipe0_1936_Update/ack)
  // 			mem_req0_pipe1 := rdata1 $buffering 1// bits of buffering = 64. 
  //  file nic.linked.opt.aa, line 724
  // rdata1
  // mem_req0_pipe1
  WPIPE_mem_req0_pipe1_1939_inst <=> (branch_block_stmt_1923/do_while_stmt_1924/do_while_stmt_1924_loop_body/WPIPE_mem_req0_pipe1_1939_Sample/req branch_block_stmt_1923/do_while_stmt_1924/do_while_stmt_1924_loop_body/WPIPE_mem_req0_pipe1_1939_Update/req) (branch_block_stmt_1923/do_while_stmt_1924/do_while_stmt_1924_loop_body/WPIPE_mem_req0_pipe1_1939_Sample/ack branch_block_stmt_1923/do_while_stmt_1924/do_while_stmt_1924_loop_body/WPIPE_mem_req0_pipe1_1939_Update/ack)
  do_while_stmt_1924_branch <=> (branch_block_stmt_1923/do_while_stmt_1924/do_while_stmt_1924_loop_body/condition_evaluated) (branch_block_stmt_1923/do_while_stmt_1924/loop_exit/ack branch_block_stmt_1923/do_while_stmt_1924/loop_taken/ack)
}
$module [processorToNicInterface] 
{
  // pipe-declarations for block %processorToNicInterface
  //  file nic.linked.opt.aa, line 728
  // pipe-declarations for block %processorToNicInterface%loop
  //  file nic.linked.opt.aa, line 733
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    <>[branch_block_stmt_1947] // Branch Block  file nic.linked.opt.aa, line 733
    {
      $P [branch_block_stmt_1947__entry__]
      branch_block_stmt_1947__entry__ <-| ($entry)
      $P [branch_block_stmt_1947__exit__]
      branch_block_stmt_1947__exit__ |-> ($exit)
      $P [do_while_stmt_1948__entry__] 
      $P [do_while_stmt_1948__exit__] 
      // do-while-statement  
      //  file nic.linked.opt.aa, line 735
      <o> [do_while_stmt_1948]  $depth 7 $buffering 1 
      {
        $P[do_while_stmt_1948__entry__] 
        $P[do_while_stmt_1948__exit__] 
        $P[loop_back] 
        $P[condition_done] 
        $P[loop_body_done] 
        $pipeline [do_while_stmt_1948_loop_body] 
        {
          // Pipelined!
          $T[back_edge_to_loop_body] 
          $T[first_time_through_loop_body] 
          $T[loop_body_start] 
          $T[condition_evaluated] 
          $transitionmerge [entry_tmerge] (back_edge_to_loop_body first_time_through_loop_body) (loop_body_start)
          $entry <-& (loop_body_start)
          $T[aggregated_phi_sample_req] 
          $T[aggregated_phi_sample_ack] 
          $T[aggregated_phi_update_req] 
          $T[aggregated_phi_update_ack] 
          // do not loop-back unless all phi's have used up their triggering tokens.
          condition_evaluated <-& (aggregated_phi_update_ack)
          aggregated_phi_sample_req o<-& (aggregated_phi_update_ack 0)
          // start:  single source PHI statement phi_stmt_1950
          // 			$phi rdata0 := 			  control_word_request_pipe_0 $on   $entry ,   $loopback 
          // type of target is $uint<32>
          $T[phi_stmt_1950_sample_start_] 
          $T[phi_stmt_1950_sample_completed_] 
          $T[phi_stmt_1950_update_start_] 
          $T[phi_stmt_1950_update_completed_] 
          aggregated_phi_sample_req <-& (phi_stmt_1950_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_1950_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_1950_update_start_)
          // non-implicit source expression in single-source phi
          // control_word_request_pipe_0
          $T[RPIPE_control_word_request_pipe_0_1952_sample_start_] 
          $T[RPIPE_control_word_request_pipe_0_1952_sample_completed_] 
          $T[RPIPE_control_word_request_pipe_0_1952_update_start_] 
          $T[RPIPE_control_word_request_pipe_0_1952_update_completed_] 
          ;;[RPIPE_control_word_request_pipe_0_1952_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_control_word_request_pipe_0_1952_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_control_word_request_pipe_0_1952_sample_start_ &-> (RPIPE_control_word_request_pipe_0_1952_Sample)
          RPIPE_control_word_request_pipe_0_1952_sample_completed_ <-& (RPIPE_control_word_request_pipe_0_1952_Sample)
          RPIPE_control_word_request_pipe_0_1952_update_start_ <-& (RPIPE_control_word_request_pipe_0_1952_sample_completed_)
          RPIPE_control_word_request_pipe_0_1952_update_start_ &-> (RPIPE_control_word_request_pipe_0_1952_Update)
          RPIPE_control_word_request_pipe_0_1952_update_completed_ <-& (RPIPE_control_word_request_pipe_0_1952_Update)
          RPIPE_control_word_request_pipe_0_1952_sample_start_ o<-& (RPIPE_control_word_request_pipe_0_1952_update_completed_ 0)
          // RAW reenables for control_word_request_pipe_0
          // producer  and  consumer are both determined by PHI statements.
          aggregated_phi_sample_req &-> (RPIPE_control_word_request_pipe_0_1952_sample_start_)
          aggregated_phi_sample_ack <-& (RPIPE_control_word_request_pipe_0_1952_sample_completed_)
          aggregated_phi_update_req &-> (RPIPE_control_word_request_pipe_0_1952_update_start_)
          phi_stmt_1950_update_completed_ <-& (RPIPE_control_word_request_pipe_0_1952_update_completed_)
          aggregated_phi_update_ack <-& (phi_stmt_1950_update_completed_)
          // done: PHI Statement phi_stmt_1950
          // start:  single source PHI statement phi_stmt_1953
          // 			$phi rdata1 := 			  control_word_request_pipe_1 $on   $entry ,   $loopback 
          // type of target is $uint<64>
          $T[phi_stmt_1953_sample_start_] 
          $T[phi_stmt_1953_sample_completed_] 
          $T[phi_stmt_1953_update_start_] 
          $T[phi_stmt_1953_update_completed_] 
          aggregated_phi_sample_req <-& (phi_stmt_1953_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_1953_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_1953_update_start_)
          // non-implicit source expression in single-source phi
          // control_word_request_pipe_1
          $T[RPIPE_control_word_request_pipe_1_1955_sample_start_] 
          $T[RPIPE_control_word_request_pipe_1_1955_sample_completed_] 
          $T[RPIPE_control_word_request_pipe_1_1955_update_start_] 
          $T[RPIPE_control_word_request_pipe_1_1955_update_completed_] 
          ;;[RPIPE_control_word_request_pipe_1_1955_Sample] 
          {
            // pipe read sample
            $T [rr] $T [ra] 
          }
          ;;[RPIPE_control_word_request_pipe_1_1955_Update] 
          {
            // pipe read update
            $T [cr] $T [ca] 
          }
          RPIPE_control_word_request_pipe_1_1955_sample_start_ &-> (RPIPE_control_word_request_pipe_1_1955_Sample)
          RPIPE_control_word_request_pipe_1_1955_sample_completed_ <-& (RPIPE_control_word_request_pipe_1_1955_Sample)
          RPIPE_control_word_request_pipe_1_1955_update_start_ <-& (RPIPE_control_word_request_pipe_1_1955_sample_completed_)
          RPIPE_control_word_request_pipe_1_1955_update_start_ &-> (RPIPE_control_word_request_pipe_1_1955_Update)
          RPIPE_control_word_request_pipe_1_1955_update_completed_ <-& (RPIPE_control_word_request_pipe_1_1955_Update)
          RPIPE_control_word_request_pipe_1_1955_sample_start_ o<-& (RPIPE_control_word_request_pipe_1_1955_update_completed_ 0)
          // RAW reenables for control_word_request_pipe_1
          // producer  and  consumer are both determined by PHI statements.
          aggregated_phi_sample_req &-> (RPIPE_control_word_request_pipe_1_1955_sample_start_)
          aggregated_phi_sample_ack <-& (RPIPE_control_word_request_pipe_1_1955_sample_completed_)
          aggregated_phi_update_req &-> (RPIPE_control_word_request_pipe_1_1955_update_start_)
          phi_stmt_1953_update_completed_ <-& (RPIPE_control_word_request_pipe_1_1955_update_completed_)
          aggregated_phi_update_ack <-& (phi_stmt_1953_update_completed_)
          // done: PHI Statement phi_stmt_1953
          // start:  			AFB_NIC_REQUEST := (( $slice rdata1 41 0 )  && rdata0) $buffering 1// bits of buffering = 74. 
          //  file nic.linked.opt.aa, line 744
          // Source expression
          // (( $slice rdata1 41 0 )  && rdata0)
          $T[CONCAT_u42_u74_1965_sample_start_] 
          $T[CONCAT_u42_u74_1965_sample_completed_] 
          $T[CONCAT_u42_u74_1965_update_start_] 
          $T[CONCAT_u42_u74_1965_update_completed_] 
          // ( $slice rdata1 41 0 ) 
          // rdata1
          // rdata0
          // start: Forward dependencies from ( $slice rdata1 41 0 )  to transition CONCAT_u42_u74_1965_sample_start_
          CONCAT_u42_u74_1965_sample_start_ <-& (phi_stmt_1953_update_completed_)
          // done: Forward dependencies from ( $slice rdata1 41 0 )  to transition CONCAT_u42_u74_1965_sample_start_
          // start: Forward dependencies from rdata0 to transition CONCAT_u42_u74_1965_sample_start_
          CONCAT_u42_u74_1965_sample_start_ <-& (phi_stmt_1950_update_completed_)
          // done: Forward dependencies from rdata0 to transition CONCAT_u42_u74_1965_sample_start_
          ;;[CONCAT_u42_u74_1965_Sample] 
          {
            // binary expression 
            $T [rr] $T [ra]  // (split) binary operation 
          }
          ;;[CONCAT_u42_u74_1965_Update] 
          {
            // binary expression 
            $T [cr] $T [ca] // (split) binary operation 
          }
          CONCAT_u42_u74_1965_sample_start_ &-> (CONCAT_u42_u74_1965_Sample)
          CONCAT_u42_u74_1965_sample_completed_ <-& (CONCAT_u42_u74_1965_Sample)
          CONCAT_u42_u74_1965_sample_completed_ &-> ($null)
          CONCAT_u42_u74_1965_update_start_ &-> (CONCAT_u42_u74_1965_Update)
          CONCAT_u42_u74_1965_update_completed_ <-& (CONCAT_u42_u74_1965_Update)
          // RAW reenables for ( $slice rdata1 41 0 ) 
          phi_stmt_1953_update_start_ o<-& (CONCAT_u42_u74_1965_sample_completed_ 0)
          // RAW reenables for rdata0
          phi_stmt_1950_update_start_ o<-& (CONCAT_u42_u74_1965_sample_completed_ 0)
          // self-release: 
          CONCAT_u42_u74_1965_sample_start_ o<-& (CONCAT_u42_u74_1965_sample_completed_ 1)
          $null &-> (CONCAT_u42_u74_1965_update_start_)
          CONCAT_u42_u74_1965_update_start_ o<-& (CONCAT_u42_u74_1965_update_completed_ 0)
          // Target expression
          // (as target) AFB_NIC_REQUEST
          $T[WPIPE_AFB_NIC_REQUEST_1960_sample_start_] 
          $T[WPIPE_AFB_NIC_REQUEST_1960_sample_completed_] 
          $T[WPIPE_AFB_NIC_REQUEST_1960_update_start_] 
          $T[WPIPE_AFB_NIC_REQUEST_1960_update_completed_] 
          ;;[WPIPE_AFB_NIC_REQUEST_1960_Sample] 
          {
            // pipe write sample-start AFB_NIC_REQUEST
            $T [req] $T [ack] 
          }
          ;;[WPIPE_AFB_NIC_REQUEST_1960_Update] 
          {
            // pipe write update (complete) AFB_NIC_REQUEST
            $T [req] $T [ack] 
          }
          WPIPE_AFB_NIC_REQUEST_1960_sample_start_ &-> (WPIPE_AFB_NIC_REQUEST_1960_Sample)
          WPIPE_AFB_NIC_REQUEST_1960_sample_completed_ <-& (WPIPE_AFB_NIC_REQUEST_1960_Sample)
          WPIPE_AFB_NIC_REQUEST_1960_update_start_ <-& (WPIPE_AFB_NIC_REQUEST_1960_sample_completed_)
          WPIPE_AFB_NIC_REQUEST_1960_update_start_ &-> (WPIPE_AFB_NIC_REQUEST_1960_Update)
          WPIPE_AFB_NIC_REQUEST_1960_update_completed_ <-& (WPIPE_AFB_NIC_REQUEST_1960_Update)
          WPIPE_AFB_NIC_REQUEST_1960_sample_start_ o<-& (WPIPE_AFB_NIC_REQUEST_1960_update_completed_ 0)
          // start: Forward dependencies from (( $slice rdata1 41 0 )  && rdata0) to transition WPIPE_AFB_NIC_REQUEST_1960_sample_start_
          WPIPE_AFB_NIC_REQUEST_1960_sample_start_ <-& (CONCAT_u42_u74_1965_update_completed_)
          // done: Forward dependencies from (( $slice rdata1 41 0 )  && rdata0) to transition WPIPE_AFB_NIC_REQUEST_1960_sample_start_
          // RAW reenables for (( $slice rdata1 41 0 )  && rdata0)
          CONCAT_u42_u74_1965_update_start_ o<-& (WPIPE_AFB_NIC_REQUEST_1960_sample_completed_ 0)
          // end:  			AFB_NIC_REQUEST := (( $slice rdata1 41 0 )  && rdata0) $buffering 1// bits of buffering = 74. 
          $T [loop_body_delay_to_condition_start] $delay
          loop_body_start &-> (loop_body_delay_to_condition_start)
          loop_body_delay_to_condition_start &-> (condition_evaluated)
          condition_evaluated &-> ($null)
          // load-store dependencies..
          // pipe read/write dependencies for pipe AFB_NIC_REQUEST
          // read-dependencies for pipe AFB_NIC_REQUEST
          // write-dependencies for pipe AFB_NIC_REQUEST
          // signal write dependencies for AFB_NIC_REQUEST
          // pipe read/write dependencies for pipe control_word_request_pipe_0
          // read-dependencies for pipe control_word_request_pipe_0
          // write-dependencies for pipe control_word_request_pipe_0
          // signal write dependencies for control_word_request_pipe_0
          // pipe read/write dependencies for pipe control_word_request_pipe_1
          // read-dependencies for pipe control_word_request_pipe_1
          // write-dependencies for pipe control_word_request_pipe_1
          // signal write dependencies for control_word_request_pipe_1
        }
        ( first_time_through_loop_body  back_edge_to_loop_body) 
        ( condition_evaluated )
        ;; [loop_exit] 
        {
          $T [ack] 
        }
        ;; [loop_taken] 
        {
          $T [ack] 
        }
        do_while_stmt_1948__entry__ <-| ($entry)
        loop_body_done <-| ( do_while_stmt_1948_loop_body ) 
        condition_done |-> (loop_exit loop_taken)
        do_while_stmt_1948__exit__ |-> ($exit)
        $bind condition_done <= do_while_stmt_1948_loop_body : condition_evaluated
        $bind do_while_stmt_1948__entry__  => do_while_stmt_1948_loop_body : first_time_through_loop_body 
        $bind loop_back  => do_while_stmt_1948_loop_body : back_edge_to_loop_body 
        $terminate (loop_exit loop_taken loop_body_done) (loop_back do_while_stmt_1948__exit__)
      }
      do_while_stmt_1948__entry__ |-> (do_while_stmt_1948)
      do_while_stmt_1948__exit__ <-| (do_while_stmt_1948)
      do_while_stmt_1948__entry__ <-| (branch_block_stmt_1947__entry__)
      do_while_stmt_1948__exit__ |-> (branch_block_stmt_1947__exit__)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %processorToNicInterface%loop%
    //  file nic.linked.opt.aa, line 737
    // constant-object-declarations for block %processorToNicInterface%loop
    //  file nic.linked.opt.aa, line 733
    // constant-object-declarations for block %processorToNicInterface
    //  file nic.linked.opt.aa, line 728
    // constant-declarations for block %processorToNicInterface%loop
    //  file nic.linked.opt.aa, line 733
    // do-while statement  
    //  file nic.linked.opt.aa, line 735
    // 1 
    $constant $W[konst_1968_wire_constant] : $int<1> := _b1// 1
    // constant-declarations for block %processorToNicInterface%loop%
    //  file nic.linked.opt.aa, line 737
    // constant-declarations for phi:  			$phi rdata0 := 			  control_word_request_pipe_0 $on   $entry ,   $loopback 
    // type of target is $uint<32>
    //  file nic.linked.opt.aa, line 738
    // constant-declarations for phi:  			$phi rdata1 := 			  control_word_request_pipe_1 $on   $entry ,   $loopback 
    // type of target is $uint<64>
    //  file nic.linked.opt.aa, line 740
    // block %processorToNicInterface%loop
    //  file nic.linked.opt.aa, line 733
    // do-while statement  
    //  file nic.linked.opt.aa, line 735
    // merge-statement  
    //  file nic.linked.opt.aa, line 737
    // 			$phi rdata0 := 			  control_word_request_pipe_0 $on   $entry ,   $loopback 
    // type of target is $uint<32>
    //  file nic.linked.opt.aa, line 738
    // control_word_request_pipe_0
    $W[RPIPE_control_word_request_pipe_0_1952_wire] : $int<32>
    // rdata0
    $W[rdata0_1950] : $int<32>
    // 			$phi rdata1 := 			  control_word_request_pipe_1 $on   $entry ,   $loopback 
    // type of target is $uint<64>
    //  file nic.linked.opt.aa, line 740
    // control_word_request_pipe_1
    $W[RPIPE_control_word_request_pipe_1_1955_wire] : $int<64>
    // rdata1
    $W[rdata1_1953] : $int<64>
    // 			AFB_NIC_REQUEST := (( $slice rdata1 41 0 )  && rdata0) $buffering 1// bits of buffering = 74. 
    //  file nic.linked.opt.aa, line 744
    // ( $slice rdata1 41 0 ) 
    $intermediate $W[slice_1963_wire] : $int<42>
    // (( $slice rdata1 41 0 )  && rdata0)
    $intermediate $W[CONCAT_u42_u74_1965_wire] : $int<74>
    // AFB_NIC_REQUEST
    // datapath-instances for block %processorToNicInterface%loop
    //  file nic.linked.opt.aa, line 733
    // datapath-instances for do-while  
    //  file nic.linked.opt.aa, line 735
    ==0? [do_while_stmt_1948_branch] (konst_1968_wire_constant)
    $flowthrough
    // data-path instances for merge  
    //  file nic.linked.opt.aa, line 737
    // 			$phi rdata0 := 			  control_word_request_pipe_0 $on   $entry ,   $loopback 
    // type of target is $uint<32>
    //  file nic.linked.opt.aa, line 738
    // control_word_request_pipe_0
    $ioport $in [RPIPE_control_word_request_pipe_0_1952_inst] (control_word_request_pipe_0) (RPIPE_control_word_request_pipe_0_1952_wire)  $fullrate 
    $buffering $out RPIPE_control_word_request_pipe_0_1952_inst RPIPE_control_word_request_pipe_0_1952_wire 1
    # := [ssrc_phi_stmt_1950] (RPIPE_control_word_request_pipe_0_1952_wire) (rdata0_1950)    $flowthrough 
    // 			$phi rdata1 := 			  control_word_request_pipe_1 $on   $entry ,   $loopback 
    // type of target is $uint<64>
    //  file nic.linked.opt.aa, line 740
    // control_word_request_pipe_1
    $ioport $in [RPIPE_control_word_request_pipe_1_1955_inst] (control_word_request_pipe_1) (RPIPE_control_word_request_pipe_1_1955_wire)  $fullrate 
    $buffering $out RPIPE_control_word_request_pipe_1_1955_inst RPIPE_control_word_request_pipe_1_1955_wire 1
    # := [ssrc_phi_stmt_1953] (RPIPE_control_word_request_pipe_1_1955_wire) (rdata1_1953)    $flowthrough 
    // 			AFB_NIC_REQUEST := (( $slice rdata1 41 0 )  && rdata0) $buffering 1// bits of buffering = 74. 
    //  file nic.linked.opt.aa, line 744
    // ( $slice rdata1 41 0 ) 
    [:] [slice_1963_inst] (rdata1_1953 41 0) (slice_1963_wire)  $flowthrough
    $delay slice_1963_inst 0
    // (( $slice rdata1 41 0 )  && rdata0)
    &&[CONCAT_u42_u74_1965_inst] (slice_1963_wire rdata0_1950) (CONCAT_u42_u74_1965_wire)    $fullrate
    $buffering  $out CONCAT_u42_u74_1965_inst CONCAT_u42_u74_1965_wire 1
    $delay CONCAT_u42_u74_1965_inst 1
    // AFB_NIC_REQUEST
    $ioport $out [WPIPE_AFB_NIC_REQUEST_1960_inst]  (CONCAT_u42_u74_1965_wire) (AFB_NIC_REQUEST)  $fullrate 
  }
  // end data-path
  // CP-DP links for do-while  do_while_stmt_1948
  //  file nic.linked.opt.aa, line 735
  // control_word_request_pipe_0
  RPIPE_control_word_request_pipe_0_1952_inst <=> (branch_block_stmt_1947/do_while_stmt_1948/do_while_stmt_1948_loop_body/RPIPE_control_word_request_pipe_0_1952_Sample/rr branch_block_stmt_1947/do_while_stmt_1948/do_while_stmt_1948_loop_body/RPIPE_control_word_request_pipe_0_1952_Update/cr) (branch_block_stmt_1947/do_while_stmt_1948/do_while_stmt_1948_loop_body/RPIPE_control_word_request_pipe_0_1952_Sample/ra branch_block_stmt_1947/do_while_stmt_1948/do_while_stmt_1948_loop_body/RPIPE_control_word_request_pipe_0_1952_Update/ca)
  // control_word_request_pipe_1
  RPIPE_control_word_request_pipe_1_1955_inst <=> (branch_block_stmt_1947/do_while_stmt_1948/do_while_stmt_1948_loop_body/RPIPE_control_word_request_pipe_1_1955_Sample/rr branch_block_stmt_1947/do_while_stmt_1948/do_while_stmt_1948_loop_body/RPIPE_control_word_request_pipe_1_1955_Update/cr) (branch_block_stmt_1947/do_while_stmt_1948/do_while_stmt_1948_loop_body/RPIPE_control_word_request_pipe_1_1955_Sample/ra branch_block_stmt_1947/do_while_stmt_1948/do_while_stmt_1948_loop_body/RPIPE_control_word_request_pipe_1_1955_Update/ca)
  // 			AFB_NIC_REQUEST := (( $slice rdata1 41 0 )  && rdata0) $buffering 1// bits of buffering = 74. 
  //  file nic.linked.opt.aa, line 744
  // (( $slice rdata1 41 0 )  && rdata0)
  // rdata1
  // rdata0
  CONCAT_u42_u74_1965_inst <=> (branch_block_stmt_1947/do_while_stmt_1948/do_while_stmt_1948_loop_body/CONCAT_u42_u74_1965_Sample/rr branch_block_stmt_1947/do_while_stmt_1948/do_while_stmt_1948_loop_body/CONCAT_u42_u74_1965_Update/cr) (branch_block_stmt_1947/do_while_stmt_1948/do_while_stmt_1948_loop_body/CONCAT_u42_u74_1965_Sample/ra branch_block_stmt_1947/do_while_stmt_1948/do_while_stmt_1948_loop_body/CONCAT_u42_u74_1965_Update/ca)
  // AFB_NIC_REQUEST
  WPIPE_AFB_NIC_REQUEST_1960_inst <=> (branch_block_stmt_1947/do_while_stmt_1948/do_while_stmt_1948_loop_body/WPIPE_AFB_NIC_REQUEST_1960_Sample/req branch_block_stmt_1947/do_while_stmt_1948/do_while_stmt_1948_loop_body/WPIPE_AFB_NIC_REQUEST_1960_Update/req) (branch_block_stmt_1947/do_while_stmt_1948/do_while_stmt_1948_loop_body/WPIPE_AFB_NIC_REQUEST_1960_Sample/ack branch_block_stmt_1947/do_while_stmt_1948/do_while_stmt_1948_loop_body/WPIPE_AFB_NIC_REQUEST_1960_Update/ack)
  do_while_stmt_1948_branch <=> (branch_block_stmt_1947/do_while_stmt_1948/do_while_stmt_1948_loop_body/condition_evaluated) (branch_block_stmt_1947/do_while_stmt_1948/loop_exit/ack branch_block_stmt_1947/do_while_stmt_1948/loop_taken/ack)
}
$module [transmitPacket] 
{
  $in packet_pointer:$int<32>
  // can point into 
  $out status:$int<1>
  // can point into 
  // pipe-declarations for block %transmitPacket
  //  file nic.linked.opt.aa, line 748
  // pipe-declarations for block %transmitPacket%loop
  //  file nic.linked.opt.aa, line 759
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    ::[assign_stmt_1981_to_assign_stmt_2002] 
    {
      // start: WAR dependencies for control_data_addr
      // ignored out-of-scope w_root  packet_pointer : $uint<32> 
      // done: WAR dependencies for control_data_addr
      // start:  	$volatile control_data_addr := ($bitcast ($uint<36>) (( $slice packet_pointer 31 0 )  && ($bitcast ($uint<4>) _b0  )) ) $buffering 1
      //  file nic.linked.opt.aa, line 753
      // volatile! 
      // Source expression
      // ($bitcast ($uint<36>) (( $slice packet_pointer 31 0 )  && ($bitcast ($uint<4>) _b0  )) )
      // (( $slice packet_pointer 31 0 )  && ($bitcast ($uint<4>) _b0  ))
      // ( $slice packet_pointer 31 0 ) 
      // packet_pointer
      // Target expression
      // (as target) control_data_addr
      // start: WAR dependencies for control_data_addr
      // ignored out-of-scope w_root  packet_pointer : $uint<32> 
      // done: WAR dependencies for control_data_addr
      // end:  	$volatile control_data_addr := ($bitcast ($uint<36>) (( $slice packet_pointer 31 0 )  && ($bitcast ($uint<4>) _b0  )) ) $buffering 1
      // start: 	$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b1  ) FULL_BYTE_MASK control_data_addr ($bitcast ($uint<64>) _b0  ) ) (control_data ) 
      //  file nic.linked.opt.aa, line 755
      $T[call_stmt_1994_sample_start_] 
      $T[call_stmt_1994_sample_completed_] 
      $T[call_stmt_1994_update_start_] 
      $T[call_stmt_1994_update_completed_] 
      // Call input argument 0
      // Call input argument 1
      // Call input argument 2
      // Call input argument 3
      // control_data_addr
      // Call input argument 4
      // start: Forward dependencies from control_data_addr to transition call_stmt_1994_sample_start_
      // done: Forward dependencies from control_data_addr to transition call_stmt_1994_sample_start_
      ;;[call_stmt_1994_Sample] 
      {
        $T [crr] $T [cra] 
      }
      ;;[call_stmt_1994_Update] 
      {
        $T [ccr] $T [cca] 
      }
      call_stmt_1994_sample_start_ &-> (call_stmt_1994_Sample)
      call_stmt_1994_sample_completed_ <-& (call_stmt_1994_Sample)
      call_stmt_1994_sample_completed_ &-> ($null)
      call_stmt_1994_update_start_ &-> (call_stmt_1994_Update)
      call_stmt_1994_update_completed_ <-& (call_stmt_1994_Update)
      // Call output argument 0
      // (as target) control_data
      // start: WAR dependencies for control_data
      // done: WAR dependencies for control_data
      // end: 	$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b1  ) FULL_BYTE_MASK control_data_addr ($bitcast ($uint<64>) _b0  ) ) (control_data ) 
      // start: WAR dependencies for packet_size
      // done: WAR dependencies for packet_size
      // start:  	$volatile packet_size := ( $slice control_data 15 8 )  $buffering 1
      //  file nic.linked.opt.aa, line 756
      // volatile! 
      // Source expression
      // ( $slice control_data 15 8 ) 
      // control_data
      // Target expression
      // (as target) packet_size
      // start: WAR dependencies for packet_size
      // done: WAR dependencies for packet_size
      // end:  	$volatile packet_size := ( $slice control_data 15 8 )  $buffering 1
      // start: WAR dependencies for last_tkeep
      // done: WAR dependencies for last_tkeep
      // start:  	$volatile last_tkeep := ( $slice control_data 7 0 )  $buffering 1
      //  file nic.linked.opt.aa, line 757
      // volatile! 
      // Source expression
      // ( $slice control_data 7 0 ) 
      // control_data
      // Target expression
      // (as target) last_tkeep
      // start: WAR dependencies for last_tkeep
      // done: WAR dependencies for last_tkeep
      // end:  	$volatile last_tkeep := ( $slice control_data 7 0 )  $buffering 1
      // load-store dependencies..
      // pipe read/write dependencies for pipe MEMORY_TO_NIC_RESPONSE
      // read-dependencies for pipe MEMORY_TO_NIC_RESPONSE
      // write-dependencies for pipe MEMORY_TO_NIC_RESPONSE
      // signal write dependencies for MEMORY_TO_NIC_RESPONSE
      // pipe read/write dependencies for pipe NIC_TO_MEMORY_REQUEST
      // read-dependencies for pipe NIC_TO_MEMORY_REQUEST
      // write-dependencies for pipe NIC_TO_MEMORY_REQUEST
      // signal write dependencies for NIC_TO_MEMORY_REQUEST
    }
    <>[branch_block_stmt_2006] // Branch Block  file nic.linked.opt.aa, line 759
    {
      $P [branch_block_stmt_2006__entry__]
      branch_block_stmt_2006__entry__ <-| ($entry)
      $P [branch_block_stmt_2006__exit__]
      branch_block_stmt_2006__exit__ |-> ($exit)
      $P [do_while_stmt_2007__entry__] 
      $P [do_while_stmt_2007__exit__] 
      $P [call_stmt_2074_to_assign_stmt_2092__entry__] 
      $P [call_stmt_2074_to_assign_stmt_2092__exit__] 
      // do-while-statement  
      //  file nic.linked.opt.aa, line 761
      <o> [do_while_stmt_2007]  $depth 31 $buffering 1 
      {
        $P[do_while_stmt_2007__entry__] 
        $P[do_while_stmt_2007__exit__] 
        $P[loop_back] 
        $P[condition_done] 
        $P[loop_body_done] 
        $pipeline [do_while_stmt_2007_loop_body] 
        {
          // Pipelined!
          $T[back_edge_to_loop_body] 
          $T[first_time_through_loop_body] 
          $T[loop_body_start] 
          $T[condition_evaluated] 
          $transitionmerge [entry_tmerge] (back_edge_to_loop_body first_time_through_loop_body) (loop_body_start)
          $entry <-& (loop_body_start)
          $T[aggregated_phi_sample_req] 
          $T[aggregated_phi_sample_ack] 
          $T[aggregated_phi_update_req] 
          $T[aggregated_phi_update_ack] 
          // do not loop-back unless all phi's have used up their triggering tokens.
          condition_evaluated <-& (aggregated_phi_update_ack)
          aggregated_phi_sample_req o<-& (aggregated_phi_update_ack 0)
          // start:  PHI statement phi_stmt_2009
          // 			$phi count_down := 			  (packet_size - 16 ) $on   $entry 			  ncount_down $on   $loopback 
          // type of target is $uint<8>
          $T[phi_stmt_2009_sample_start_] 
          $T[phi_stmt_2009_sample_completed_] 
          $T[phi_stmt_2009_update_start_] 
          $T[phi_stmt_2009_update_completed_] 
          $T[phi_stmt_2009_sample_start__ps] 
          phi_stmt_2009_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_2009_sample_completed__ps] 
          phi_stmt_2009_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_2009_update_start__ps] 
          phi_stmt_2009_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_2009_update_completed__ps] 
          phi_stmt_2009_update_completed_ <-& (phi_stmt_2009_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_2009_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_2009_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_2009_update_start_)
          $T[phi_stmt_2009_loopback_trigger] 
          phi_stmt_2009_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_2009_loopback_sample_req] 
          $T[phi_stmt_2009_loopback_sample_req_ps] 
          phi_stmt_2009_loopback_sample_req <-& (phi_stmt_2009_loopback_sample_req_ps)
          phi_stmt_2009_loopback_sample_req &-> ($null)
          $T[phi_stmt_2009_entry_trigger] 
          phi_stmt_2009_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_2009_entry_sample_req] 
          $T[phi_stmt_2009_entry_sample_req_ps] 
          phi_stmt_2009_entry_sample_req <-& (phi_stmt_2009_entry_sample_req_ps)
          phi_stmt_2009_entry_sample_req &-> ($null)
          phi_stmt_2009_update_start_ o<-& (phi_stmt_2009_update_completed_ 0)
          phi_stmt_2009_sample_start_ o<-& (phi_stmt_2009_sample_completed_ 1)
          $T[phi_stmt_2009_merged_reqs] 
          $T[phi_stmt_2009_phi_mux_ack] 
          $T[phi_stmt_2009_phi_mux_ack_ps] 
          phi_stmt_2009_phi_mux_ack_ps <-& (phi_stmt_2009_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_2009_update_completed_)
          $T[R_ncount_down_2011_sample_start__ps] 
          $T[R_ncount_down_2011_sample_completed__ps] 
          $T[R_ncount_down_2011_update_start__ps] 
          $T[R_ncount_down_2011_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 0
          $T[R_ncount_down_2011_sample_start_] 
          $T[R_ncount_down_2011_sample_completed_] 
          $T[R_ncount_down_2011_update_start_] 
          $T[R_ncount_down_2011_update_completed_] 
          ;;[R_ncount_down_2011_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_ncount_down_2011_sample_start_ &-> (R_ncount_down_2011_Sample)
          R_ncount_down_2011_sample_completed_ <-& (R_ncount_down_2011_Sample)
          ;;[R_ncount_down_2011_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_ncount_down_2011_update_start_ &-> (R_ncount_down_2011_Update)
          R_ncount_down_2011_update_completed_ <-& (R_ncount_down_2011_Update)
          // RAW reenables for ncount_down
          // Phi start dependency for implicit/constant alternative.
          R_ncount_down_2011_sample_start_ <-& (R_ncount_down_2011_sample_start__ps)
          R_ncount_down_2011_update_start_ <-& (R_ncount_down_2011_update_start__ps)
          // Phi complete dependency.
          R_ncount_down_2011_sample_completed__ps <-& (R_ncount_down_2011_sample_completed_)
          R_ncount_down_2011_update_completed__ps <-& (R_ncount_down_2011_update_completed_)
          $T[SUB_u8_u8_2014_sample_start__ps] 
          $T[SUB_u8_u8_2014_sample_completed__ps] 
          $T[SUB_u8_u8_2014_update_start__ps] 
          $T[SUB_u8_u8_2014_update_completed__ps] 
          // source expression in Phi alternative 1
          // (packet_size - 16 )
          $T[SUB_u8_u8_2014_sample_start_] 
          $T[SUB_u8_u8_2014_sample_completed_] 
          $T[SUB_u8_u8_2014_update_start_] 
          $T[SUB_u8_u8_2014_update_completed_] 
          // packet_size
          // start: Forward dependencies from packet_size to transition SUB_u8_u8_2014_sample_start_
          // done: Forward dependencies from packet_size to transition SUB_u8_u8_2014_sample_start_
          ;;[SUB_u8_u8_2014_Sample] 
          {
            // binary expression 
            $T [rr] $T [ra]  // (split) binary operation 
          }
          ;;[SUB_u8_u8_2014_Update] 
          {
            // binary expression 
            $T [cr] $T [ca] // (split) binary operation 
          }
          SUB_u8_u8_2014_sample_start_ &-> (SUB_u8_u8_2014_Sample)
          SUB_u8_u8_2014_sample_completed_ <-& (SUB_u8_u8_2014_Sample)
          SUB_u8_u8_2014_sample_completed_ &-> ($null)
          SUB_u8_u8_2014_update_start_ &-> (SUB_u8_u8_2014_Update)
          SUB_u8_u8_2014_update_completed_ <-& (SUB_u8_u8_2014_Update)
          // RAW reenables for packet_size
          // self-release: 
          SUB_u8_u8_2014_sample_start_ o<-& (SUB_u8_u8_2014_sample_completed_ 1)
          $null &-> (SUB_u8_u8_2014_update_start_)
          SUB_u8_u8_2014_update_start_ o<-& (SUB_u8_u8_2014_update_completed_ 0)
          // Phi start dependency
          SUB_u8_u8_2014_sample_start_ <-& (SUB_u8_u8_2014_sample_start__ps)
          SUB_u8_u8_2014_update_start_ <-& (SUB_u8_u8_2014_update_start__ps)
          // RAW reenables for (packet_size - 16 )
          // producer  and  consumer are both determined by PHI statements.
          // Phi complete dependency.
          SUB_u8_u8_2014_sample_completed__ps <-& (SUB_u8_u8_2014_sample_completed_)
          SUB_u8_u8_2014_update_completed__ps <-& (SUB_u8_u8_2014_update_completed_)
          $phisequencer [ phi_stmt_2009_phi_seq] : 
          phi_stmt_2009_loopback_trigger R_ncount_down_2011_sample_start__ps R_ncount_down_2011_sample_completed__ps R_ncount_down_2011_update_start__ps R_ncount_down_2011_update_completed__ps phi_stmt_2009_entry_trigger SUB_u8_u8_2014_sample_start__ps SUB_u8_u8_2014_sample_completed__ps SUB_u8_u8_2014_update_start__ps SUB_u8_u8_2014_update_completed__ps :
          phi_stmt_2009_sample_start__ps phi_stmt_2009_sample_completed__ps phi_stmt_2009_update_start__ps phi_stmt_2009_update_completed__ps :
          phi_stmt_2009_loopback_sample_req_ps phi_stmt_2009_entry_sample_req_ps : 
          phi_stmt_2009_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_2009
          // start:  PHI statement phi_stmt_2015
          // 			$phi mem_addr := 			  (control_data_addr + 24 ) $on   $entry 			  nmem_addr $on   $loopback 
          // type of target is $uint<36>
          $T[phi_stmt_2015_sample_start_] 
          $T[phi_stmt_2015_sample_completed_] 
          $T[phi_stmt_2015_update_start_] 
          $T[phi_stmt_2015_update_completed_] 
          $T[phi_stmt_2015_sample_start__ps] 
          phi_stmt_2015_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_2015_sample_completed__ps] 
          phi_stmt_2015_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_2015_update_start__ps] 
          phi_stmt_2015_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_2015_update_completed__ps] 
          phi_stmt_2015_update_completed_ <-& (phi_stmt_2015_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_2015_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_2015_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_2015_update_start_)
          $T[phi_stmt_2015_loopback_trigger] 
          phi_stmt_2015_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_2015_loopback_sample_req] 
          $T[phi_stmt_2015_loopback_sample_req_ps] 
          phi_stmt_2015_loopback_sample_req <-& (phi_stmt_2015_loopback_sample_req_ps)
          phi_stmt_2015_loopback_sample_req &-> ($null)
          $T[phi_stmt_2015_entry_trigger] 
          phi_stmt_2015_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_2015_entry_sample_req] 
          $T[phi_stmt_2015_entry_sample_req_ps] 
          phi_stmt_2015_entry_sample_req <-& (phi_stmt_2015_entry_sample_req_ps)
          phi_stmt_2015_entry_sample_req &-> ($null)
          phi_stmt_2015_update_start_ o<-& (phi_stmt_2015_update_completed_ 0)
          phi_stmt_2015_sample_start_ o<-& (phi_stmt_2015_sample_completed_ 1)
          $T[phi_stmt_2015_merged_reqs] 
          $T[phi_stmt_2015_phi_mux_ack] 
          $T[phi_stmt_2015_phi_mux_ack_ps] 
          phi_stmt_2015_phi_mux_ack_ps <-& (phi_stmt_2015_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_2015_update_completed_)
          $T[R_nmem_addr_2017_sample_start__ps] 
          $T[R_nmem_addr_2017_sample_completed__ps] 
          $T[R_nmem_addr_2017_update_start__ps] 
          $T[R_nmem_addr_2017_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 0
          $T[R_nmem_addr_2017_sample_start_] 
          $T[R_nmem_addr_2017_sample_completed_] 
          $T[R_nmem_addr_2017_update_start_] 
          $T[R_nmem_addr_2017_update_completed_] 
          ;;[R_nmem_addr_2017_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_nmem_addr_2017_sample_start_ &-> (R_nmem_addr_2017_Sample)
          R_nmem_addr_2017_sample_completed_ <-& (R_nmem_addr_2017_Sample)
          ;;[R_nmem_addr_2017_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_nmem_addr_2017_update_start_ &-> (R_nmem_addr_2017_Update)
          R_nmem_addr_2017_update_completed_ <-& (R_nmem_addr_2017_Update)
          // RAW reenables for nmem_addr
          // Phi start dependency for implicit/constant alternative.
          R_nmem_addr_2017_sample_start_ <-& (R_nmem_addr_2017_sample_start__ps)
          R_nmem_addr_2017_update_start_ <-& (R_nmem_addr_2017_update_start__ps)
          // Phi complete dependency.
          R_nmem_addr_2017_sample_completed__ps <-& (R_nmem_addr_2017_sample_completed_)
          R_nmem_addr_2017_update_completed__ps <-& (R_nmem_addr_2017_update_completed_)
          $T[ADD_u36_u36_2020_sample_start__ps] 
          $T[ADD_u36_u36_2020_sample_completed__ps] 
          $T[ADD_u36_u36_2020_update_start__ps] 
          $T[ADD_u36_u36_2020_update_completed__ps] 
          // source expression in Phi alternative 1
          // (control_data_addr + 24 )
          $T[ADD_u36_u36_2020_sample_start_] 
          $T[ADD_u36_u36_2020_sample_completed_] 
          $T[ADD_u36_u36_2020_update_start_] 
          $T[ADD_u36_u36_2020_update_completed_] 
          // control_data_addr
          // start: Forward dependencies from control_data_addr to transition ADD_u36_u36_2020_sample_start_
          // done: Forward dependencies from control_data_addr to transition ADD_u36_u36_2020_sample_start_
          ;;[ADD_u36_u36_2020_Sample] 
          {
            // binary expression 
            $T [rr] $T [ra]  // (split) binary operation 
          }
          ;;[ADD_u36_u36_2020_Update] 
          {
            // binary expression 
            $T [cr] $T [ca] // (split) binary operation 
          }
          ADD_u36_u36_2020_sample_start_ &-> (ADD_u36_u36_2020_Sample)
          ADD_u36_u36_2020_sample_completed_ <-& (ADD_u36_u36_2020_Sample)
          ADD_u36_u36_2020_sample_completed_ &-> ($null)
          ADD_u36_u36_2020_update_start_ &-> (ADD_u36_u36_2020_Update)
          ADD_u36_u36_2020_update_completed_ <-& (ADD_u36_u36_2020_Update)
          // RAW reenables for control_data_addr
          // self-release: 
          ADD_u36_u36_2020_sample_start_ o<-& (ADD_u36_u36_2020_sample_completed_ 1)
          $null &-> (ADD_u36_u36_2020_update_start_)
          ADD_u36_u36_2020_update_start_ o<-& (ADD_u36_u36_2020_update_completed_ 0)
          // Phi start dependency
          ADD_u36_u36_2020_sample_start_ <-& (ADD_u36_u36_2020_sample_start__ps)
          ADD_u36_u36_2020_update_start_ <-& (ADD_u36_u36_2020_update_start__ps)
          // RAW reenables for (control_data_addr + 24 )
          // producer  and  consumer are both determined by PHI statements.
          // Phi complete dependency.
          ADD_u36_u36_2020_sample_completed__ps <-& (ADD_u36_u36_2020_sample_completed_)
          ADD_u36_u36_2020_update_completed__ps <-& (ADD_u36_u36_2020_update_completed_)
          $phisequencer [ phi_stmt_2015_phi_seq] : 
          phi_stmt_2015_loopback_trigger R_nmem_addr_2017_sample_start__ps R_nmem_addr_2017_sample_completed__ps R_nmem_addr_2017_update_start__ps R_nmem_addr_2017_update_completed__ps phi_stmt_2015_entry_trigger ADD_u36_u36_2020_sample_start__ps ADD_u36_u36_2020_sample_completed__ps ADD_u36_u36_2020_update_start__ps ADD_u36_u36_2020_update_completed__ps :
          phi_stmt_2015_sample_start__ps phi_stmt_2015_sample_completed__ps phi_stmt_2015_update_start__ps phi_stmt_2015_update_completed__ps :
          phi_stmt_2015_loopback_sample_req_ps phi_stmt_2015_entry_sample_req_ps : 
          phi_stmt_2015_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_2015
          // start: 			$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b1  ) FULL_BYTE_MASK mem_addr ($bitcast ($uint<64>) _b0  ) ) (data ) 
          //  file nic.linked.opt.aa, line 769
          $T[call_stmt_2031_sample_start_] 
          $T[call_stmt_2031_sample_completed_] 
          $T[call_stmt_2031_update_start_] 
          $T[call_stmt_2031_update_completed_] 
          // Call input argument 0
          // Call input argument 1
          // Call input argument 2
          // Call input argument 3
          // mem_addr
          // Call input argument 4
          // start: Forward dependencies from mem_addr to transition call_stmt_2031_sample_start_
          call_stmt_2031_sample_start_ <-& (phi_stmt_2015_update_completed_)
          // done: Forward dependencies from mem_addr to transition call_stmt_2031_sample_start_
          // RAW reenables for mem_addr
          phi_stmt_2015_update_start_ o<-& (call_stmt_2031_sample_completed_ 0)
          ;;[call_stmt_2031_Sample] 
          {
            $T [crr] $T [cra] 
          }
          ;;[call_stmt_2031_Update] 
          {
            $T [ccr] $T [cca] 
          }
          call_stmt_2031_sample_start_ &-> (call_stmt_2031_Sample)
          call_stmt_2031_sample_completed_ <-& (call_stmt_2031_Sample)
          call_stmt_2031_sample_completed_ &-> ($null)
          call_stmt_2031_update_start_ &-> (call_stmt_2031_Update)
          call_stmt_2031_update_completed_ <-& (call_stmt_2031_Update)
          // Call output argument 0
          // (as target) data
          // self-release: 
          call_stmt_2031_sample_start_ o<-& (call_stmt_2031_sample_completed_ 1)
          $null &-> (call_stmt_2031_update_start_)
          call_stmt_2031_update_start_ o<-& (call_stmt_2031_update_completed_ 0)
          // start: WAR dependencies for data
          // done: WAR dependencies for data
          // end: 			$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b1  ) FULL_BYTE_MASK mem_addr ($bitcast ($uint<64>) _b0  ) ) (data ) 
          // start:  			nic_to_mac_transmit_pipe := ((($bitcast ($uint<1>) _b0  ) && data) && FULL_BYTE_MASK) $buffering 1// bits of buffering = 73. 
          //  file nic.linked.opt.aa, line 770
          // Source expression
          // ((($bitcast ($uint<1>) _b0  ) && data) && FULL_BYTE_MASK)
          $T[CONCAT_u65_u73_2038_sample_start_] 
          $T[CONCAT_u65_u73_2038_sample_completed_] 
          $T[CONCAT_u65_u73_2038_update_start_] 
          $T[CONCAT_u65_u73_2038_update_completed_] 
          // (($bitcast ($uint<1>) _b0  ) && data)
          // data
          // start: Forward dependencies from (($bitcast ($uint<1>) _b0  ) && data) to transition CONCAT_u65_u73_2038_sample_start_
          CONCAT_u65_u73_2038_sample_start_ <-& (call_stmt_2031_update_completed_)
          // done: Forward dependencies from (($bitcast ($uint<1>) _b0  ) && data) to transition CONCAT_u65_u73_2038_sample_start_
          ;;[CONCAT_u65_u73_2038_Sample] 
          {
            // binary expression 
            $T [rr] $T [ra]  // (split) binary operation 
          }
          ;;[CONCAT_u65_u73_2038_Update] 
          {
            // binary expression 
            $T [cr] $T [ca] // (split) binary operation 
          }
          CONCAT_u65_u73_2038_sample_start_ &-> (CONCAT_u65_u73_2038_Sample)
          CONCAT_u65_u73_2038_sample_completed_ <-& (CONCAT_u65_u73_2038_Sample)
          CONCAT_u65_u73_2038_sample_completed_ &-> ($null)
          CONCAT_u65_u73_2038_update_start_ &-> (CONCAT_u65_u73_2038_Update)
          CONCAT_u65_u73_2038_update_completed_ <-& (CONCAT_u65_u73_2038_Update)
          // RAW reenables for (($bitcast ($uint<1>) _b0  ) && data)
          call_stmt_2031_update_start_ o<-& (CONCAT_u65_u73_2038_sample_completed_ 0)
          // self-release: 
          CONCAT_u65_u73_2038_sample_start_ o<-& (CONCAT_u65_u73_2038_sample_completed_ 1)
          $null &-> (CONCAT_u65_u73_2038_update_start_)
          CONCAT_u65_u73_2038_update_start_ o<-& (CONCAT_u65_u73_2038_update_completed_ 0)
          // Target expression
          // (as target) nic_to_mac_transmit_pipe
          $T[WPIPE_nic_to_mac_transmit_pipe_2032_sample_start_] 
          $T[WPIPE_nic_to_mac_transmit_pipe_2032_sample_completed_] 
          $T[WPIPE_nic_to_mac_transmit_pipe_2032_update_start_] 
          $T[WPIPE_nic_to_mac_transmit_pipe_2032_update_completed_] 
          ;;[WPIPE_nic_to_mac_transmit_pipe_2032_Sample] 
          {
            // pipe write sample-start nic_to_mac_transmit_pipe
            $T [req] $T [ack] 
          }
          ;;[WPIPE_nic_to_mac_transmit_pipe_2032_Update] 
          {
            // pipe write update (complete) nic_to_mac_transmit_pipe
            $T [req] $T [ack] 
          }
          WPIPE_nic_to_mac_transmit_pipe_2032_sample_start_ &-> (WPIPE_nic_to_mac_transmit_pipe_2032_Sample)
          WPIPE_nic_to_mac_transmit_pipe_2032_sample_completed_ <-& (WPIPE_nic_to_mac_transmit_pipe_2032_Sample)
          WPIPE_nic_to_mac_transmit_pipe_2032_update_start_ <-& (WPIPE_nic_to_mac_transmit_pipe_2032_sample_completed_)
          WPIPE_nic_to_mac_transmit_pipe_2032_update_start_ &-> (WPIPE_nic_to_mac_transmit_pipe_2032_Update)
          WPIPE_nic_to_mac_transmit_pipe_2032_update_completed_ <-& (WPIPE_nic_to_mac_transmit_pipe_2032_Update)
          WPIPE_nic_to_mac_transmit_pipe_2032_sample_start_ o<-& (WPIPE_nic_to_mac_transmit_pipe_2032_update_completed_ 0)
          // start: Forward dependencies from ((($bitcast ($uint<1>) _b0  ) && data) && FULL_BYTE_MASK) to transition WPIPE_nic_to_mac_transmit_pipe_2032_sample_start_
          WPIPE_nic_to_mac_transmit_pipe_2032_sample_start_ <-& (CONCAT_u65_u73_2038_update_completed_)
          // done: Forward dependencies from ((($bitcast ($uint<1>) _b0  ) && data) && FULL_BYTE_MASK) to transition WPIPE_nic_to_mac_transmit_pipe_2032_sample_start_
          // RAW reenables for ((($bitcast ($uint<1>) _b0  ) && data) && FULL_BYTE_MASK)
          CONCAT_u65_u73_2038_update_start_ o<-& (WPIPE_nic_to_mac_transmit_pipe_2032_sample_completed_ 0)
          // end:  			nic_to_mac_transmit_pipe := ((($bitcast ($uint<1>) _b0  ) && data) && FULL_BYTE_MASK) $buffering 1// bits of buffering = 73. 
          // start: WAR dependencies for ncount_down
          // WAR dependency: Read: ncount_down before Write: 			$volatile ncount_down := (count_down - 8 ) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for ncount_down
          // start:  			$volatile ncount_down := (count_down - 8 ) $buffering 1
          //  file nic.linked.opt.aa, line 771
          // volatile! 
          // Source expression
          // (count_down - 8 )
          // count_down
          // Target expression
          // (as target) ncount_down
          // start: WAR dependencies for ncount_down
          // WAR dependency: Read: ncount_down before Write: 			$volatile ncount_down := (count_down - 8 ) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for ncount_down
          // end:  			$volatile ncount_down := (count_down - 8 ) $buffering 1
          // start: WAR dependencies for nmem_addr
          // WAR dependency: Read: nmem_addr before Write: 			$volatile nmem_addr := (mem_addr + 8 ) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for nmem_addr
          // start:  			$volatile nmem_addr := (mem_addr + 8 ) $buffering 1
          //  file nic.linked.opt.aa, line 772
          // volatile! 
          // Source expression
          // (mem_addr + 8 )
          // mem_addr
          // Target expression
          // (as target) nmem_addr
          // start: WAR dependencies for nmem_addr
          // WAR dependency: Read: nmem_addr before Write: 			$volatile nmem_addr := (mem_addr + 8 ) $buffering 1
          //  WAR  PHI-PHI dependency ignored...
          // done: WAR dependencies for nmem_addr
          // end:  			$volatile nmem_addr := (mem_addr + 8 ) $buffering 1
          // start: WAR dependencies for not_last_word
          // done: WAR dependencies for not_last_word
          // start:  			$volatile not_last_word := (ncount_down > 8 ) $buffering 1
          //  file nic.linked.opt.aa, line 774
          // volatile! 
          // Source expression
          // (ncount_down > 8 )
          // ncount_down
          // Target expression
          // (as target) not_last_word
          // start: WAR dependencies for not_last_word
          // done: WAR dependencies for not_last_word
          // end:  			$volatile not_last_word := (ncount_down > 8 ) $buffering 1
          // not_last_word
          $T [loop_body_delay_to_condition_start] $delay
          loop_body_start &-> (loop_body_delay_to_condition_start)
          loop_body_delay_to_condition_start &-> (condition_evaluated)
          // start: Forward dependencies from not_last_word to transition condition_evaluated
          condition_evaluated <-& (phi_stmt_2009_update_completed_)
          // done: Forward dependencies from not_last_word to transition condition_evaluated
          condition_evaluated &-> ($null)
          // load-store dependencies..
          // pipe read/write dependencies for pipe MEMORY_TO_NIC_RESPONSE
          // read-dependencies for pipe MEMORY_TO_NIC_RESPONSE
          // write-dependencies for pipe MEMORY_TO_NIC_RESPONSE
          // signal write dependencies for MEMORY_TO_NIC_RESPONSE
          // pipe read/write dependencies for pipe NIC_TO_MEMORY_REQUEST
          // read-dependencies for pipe NIC_TO_MEMORY_REQUEST
          // write-dependencies for pipe NIC_TO_MEMORY_REQUEST
          // signal write dependencies for NIC_TO_MEMORY_REQUEST
          // pipe read/write dependencies for pipe nic_to_mac_transmit_pipe
          // read-dependencies for pipe nic_to_mac_transmit_pipe
          // write-dependencies for pipe nic_to_mac_transmit_pipe
          // signal write dependencies for nic_to_mac_transmit_pipe
        }
        ( first_time_through_loop_body  back_edge_to_loop_body) 
        ( condition_evaluated )
        ;; [loop_exit] 
        {
          $T [ack] 
        }
        ;; [loop_taken] 
        {
          $T [ack] 
        }
        do_while_stmt_2007__entry__ <-| ($entry)
        loop_body_done <-| ( do_while_stmt_2007_loop_body ) 
        condition_done |-> (loop_exit loop_taken)
        do_while_stmt_2007__exit__ |-> ($exit)
        $bind condition_done <= do_while_stmt_2007_loop_body : condition_evaluated
        $bind do_while_stmt_2007__entry__  => do_while_stmt_2007_loop_body : first_time_through_loop_body 
        $bind loop_back  => do_while_stmt_2007_loop_body : back_edge_to_loop_body 
        $terminate (loop_exit loop_taken loop_body_done) (loop_back do_while_stmt_2007__exit__)
      }
      do_while_stmt_2007__entry__ |-> (do_while_stmt_2007)
      do_while_stmt_2007__exit__ <-| (do_while_stmt_2007)
      ::[call_stmt_2074_to_assign_stmt_2092] 
      {
        // start: 		$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b1  ) FULL_BYTE_MASK nmem_addr ($bitcast ($uint<64>) _b0  ) ) (last_word ) 
        //  file nic.linked.opt.aa, line 777
        $T[call_stmt_2074_sample_start_] 
        $T[call_stmt_2074_sample_completed_] 
        $T[call_stmt_2074_update_start_] 
        $T[call_stmt_2074_update_completed_] 
        // Call input argument 0
        // Call input argument 1
        // Call input argument 2
        // Call input argument 3
        // nmem_addr
        // Call input argument 4
        // start: Forward dependencies from nmem_addr to transition call_stmt_2074_sample_start_
        // done: Forward dependencies from nmem_addr to transition call_stmt_2074_sample_start_
        ;;[call_stmt_2074_Sample] 
        {
          $T [crr] $T [cra] 
        }
        ;;[call_stmt_2074_Update] 
        {
          $T [ccr] $T [cca] 
        }
        call_stmt_2074_sample_start_ &-> (call_stmt_2074_Sample)
        call_stmt_2074_sample_completed_ <-& (call_stmt_2074_Sample)
        call_stmt_2074_sample_completed_ &-> ($null)
        call_stmt_2074_update_start_ &-> (call_stmt_2074_Update)
        call_stmt_2074_update_completed_ <-& (call_stmt_2074_Update)
        // Call output argument 0
        // (as target) last_word
        // start: WAR dependencies for last_word
        // done: WAR dependencies for last_word
        // end: 		$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b1  ) FULL_BYTE_MASK nmem_addr ($bitcast ($uint<64>) _b0  ) ) (last_word ) 
        // start:  		nic_to_mac_transmit_pipe := ((($bitcast ($uint<1>) _b1  ) && last_word) && last_tkeep) $buffering 1// bits of buffering = 73. 
        //  file nic.linked.opt.aa, line 779
        // Source expression
        // ((($bitcast ($uint<1>) _b1  ) && last_word) && last_tkeep)
        $T[CONCAT_u65_u73_2083_sample_start_] 
        $T[CONCAT_u65_u73_2083_sample_completed_] 
        $T[CONCAT_u65_u73_2083_update_start_] 
        $T[CONCAT_u65_u73_2083_update_completed_] 
        // (($bitcast ($uint<1>) _b1  ) && last_word)
        // last_word
        // last_tkeep
        // start: Forward dependencies from (($bitcast ($uint<1>) _b1  ) && last_word) to transition CONCAT_u65_u73_2083_sample_start_
        CONCAT_u65_u73_2083_sample_start_ <-& (call_stmt_2074_update_completed_)
        // done: Forward dependencies from (($bitcast ($uint<1>) _b1  ) && last_word) to transition CONCAT_u65_u73_2083_sample_start_
        // start: Forward dependencies from last_tkeep to transition CONCAT_u65_u73_2083_sample_start_
        // done: Forward dependencies from last_tkeep to transition CONCAT_u65_u73_2083_sample_start_
        ;;[CONCAT_u65_u73_2083_Sample] 
        {
          // binary expression 
          $T [rr] $T [ra]  // (split) binary operation 
        }
        ;;[CONCAT_u65_u73_2083_Update] 
        {
          // binary expression 
          $T [cr] $T [ca] // (split) binary operation 
        }
        CONCAT_u65_u73_2083_sample_start_ &-> (CONCAT_u65_u73_2083_Sample)
        CONCAT_u65_u73_2083_sample_completed_ <-& (CONCAT_u65_u73_2083_Sample)
        CONCAT_u65_u73_2083_sample_completed_ &-> ($null)
        CONCAT_u65_u73_2083_update_start_ &-> (CONCAT_u65_u73_2083_Update)
        CONCAT_u65_u73_2083_update_completed_ <-& (CONCAT_u65_u73_2083_Update)
        // Target expression
        // (as target) nic_to_mac_transmit_pipe
        $T[WPIPE_nic_to_mac_transmit_pipe_2077_sample_start_] 
        $T[WPIPE_nic_to_mac_transmit_pipe_2077_sample_completed_] 
        $T[WPIPE_nic_to_mac_transmit_pipe_2077_update_start_] 
        $T[WPIPE_nic_to_mac_transmit_pipe_2077_update_completed_] 
        ;;[WPIPE_nic_to_mac_transmit_pipe_2077_Sample] 
        {
          // pipe write sample-start nic_to_mac_transmit_pipe
          $T [req] $T [ack] 
        }
        ;;[WPIPE_nic_to_mac_transmit_pipe_2077_Update] 
        {
          // pipe write update (complete) nic_to_mac_transmit_pipe
          $T [req] $T [ack] 
        }
        WPIPE_nic_to_mac_transmit_pipe_2077_sample_start_ &-> (WPIPE_nic_to_mac_transmit_pipe_2077_Sample)
        WPIPE_nic_to_mac_transmit_pipe_2077_sample_completed_ <-& (WPIPE_nic_to_mac_transmit_pipe_2077_Sample)
        WPIPE_nic_to_mac_transmit_pipe_2077_update_start_ <-& (WPIPE_nic_to_mac_transmit_pipe_2077_sample_completed_)
        WPIPE_nic_to_mac_transmit_pipe_2077_update_start_ &-> (WPIPE_nic_to_mac_transmit_pipe_2077_Update)
        WPIPE_nic_to_mac_transmit_pipe_2077_update_completed_ <-& (WPIPE_nic_to_mac_transmit_pipe_2077_Update)
        // start: Forward dependencies from ((($bitcast ($uint<1>) _b1  ) && last_word) && last_tkeep) to transition WPIPE_nic_to_mac_transmit_pipe_2077_sample_start_
        WPIPE_nic_to_mac_transmit_pipe_2077_sample_start_ <-& (CONCAT_u65_u73_2083_update_completed_)
        // done: Forward dependencies from ((($bitcast ($uint<1>) _b1  ) && last_word) && last_tkeep) to transition WPIPE_nic_to_mac_transmit_pipe_2077_sample_start_
        // end:  		nic_to_mac_transmit_pipe := ((($bitcast ($uint<1>) _b1  ) && last_word) && last_tkeep) $buffering 1// bits of buffering = 73. 
        // start:  		status := (packet_size == ($bitcast ($uint<8>) (nmem_addr - control_data_addr) )) $buffering 1// bits of buffering = 1. 
        //  file nic.linked.opt.aa, line 780
        // Source expression
        // (packet_size == ($bitcast ($uint<8>) (nmem_addr - control_data_addr) ))
        $T[EQ_u8_u1_2091_sample_start_] 
        $T[EQ_u8_u1_2091_sample_completed_] 
        $T[EQ_u8_u1_2091_update_start_] 
        $T[EQ_u8_u1_2091_update_completed_] 
        // packet_size
        // ($bitcast ($uint<8>) (nmem_addr - control_data_addr) )
        // (nmem_addr - control_data_addr)
        // nmem_addr
        // control_data_addr
        // start: Forward dependencies from packet_size to transition EQ_u8_u1_2091_sample_start_
        // done: Forward dependencies from packet_size to transition EQ_u8_u1_2091_sample_start_
        // start: Forward dependencies from ($bitcast ($uint<8>) (nmem_addr - control_data_addr) ) to transition EQ_u8_u1_2091_sample_start_
        // done: Forward dependencies from ($bitcast ($uint<8>) (nmem_addr - control_data_addr) ) to transition EQ_u8_u1_2091_sample_start_
        ;;[EQ_u8_u1_2091_Sample] 
        {
          // binary expression 
          $T [rr] $T [ra]  // (split) binary operation 
        }
        ;;[EQ_u8_u1_2091_Update] 
        {
          // binary expression 
          $T [cr] $T [ca] // (split) binary operation 
        }
        EQ_u8_u1_2091_sample_start_ &-> (EQ_u8_u1_2091_Sample)
        EQ_u8_u1_2091_sample_completed_ <-& (EQ_u8_u1_2091_Sample)
        EQ_u8_u1_2091_sample_completed_ &-> ($null)
        EQ_u8_u1_2091_update_start_ &-> (EQ_u8_u1_2091_Update)
        EQ_u8_u1_2091_update_completed_ <-& (EQ_u8_u1_2091_Update)
        // Target expression
        // (as target) status
        // status
        // write to interface object
        // start: WAR dependencies for status
        // done: WAR dependencies for status
        // status
        // write to interface object
        // end:  		status := (packet_size == ($bitcast ($uint<8>) (nmem_addr - control_data_addr) )) $buffering 1// bits of buffering = 1. 
        // load-store dependencies..
        // pipe read/write dependencies for pipe MEMORY_TO_NIC_RESPONSE
        // read-dependencies for pipe MEMORY_TO_NIC_RESPONSE
        // write-dependencies for pipe MEMORY_TO_NIC_RESPONSE
        // signal write dependencies for MEMORY_TO_NIC_RESPONSE
        // pipe read/write dependencies for pipe NIC_TO_MEMORY_REQUEST
        // read-dependencies for pipe NIC_TO_MEMORY_REQUEST
        // write-dependencies for pipe NIC_TO_MEMORY_REQUEST
        // signal write dependencies for NIC_TO_MEMORY_REQUEST
        // pipe read/write dependencies for pipe nic_to_mac_transmit_pipe
        // read-dependencies for pipe nic_to_mac_transmit_pipe
        // write-dependencies for pipe nic_to_mac_transmit_pipe
        // signal write dependencies for nic_to_mac_transmit_pipe
      }
      call_stmt_2074_to_assign_stmt_2092__entry__ |-> (call_stmt_2074_to_assign_stmt_2092)
      call_stmt_2074_to_assign_stmt_2092__exit__ <-| (call_stmt_2074_to_assign_stmt_2092)
      do_while_stmt_2007__entry__ <-| (branch_block_stmt_2006__entry__)
      call_stmt_2074_to_assign_stmt_2092__entry__ <-| (do_while_stmt_2007__exit__)
      call_stmt_2074_to_assign_stmt_2092__exit__ |-> (branch_block_stmt_2006__exit__)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %transmitPacket%loop%
    //  file nic.linked.opt.aa, line 763
    // constant-object-declarations for block %transmitPacket%loop
    //  file nic.linked.opt.aa, line 759
    // constant-object-declarations for block %transmitPacket
    //  file nic.linked.opt.aa, line 748
    // ($bitcast ($uint<4>) _b0  )
    $constant $W[type_cast_1978_wire_constant] : $int<4> := _b0000// 0
    // 	$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b1  ) FULL_BYTE_MASK control_data_addr ($bitcast ($uint<64>) _b0  ) ) (control_data ) 
    //  file nic.linked.opt.aa, line 755
    // ($bitcast ($uint<1>) _b0  )
    $constant $W[type_cast_1986_wire_constant] : $int<1> := _b0// 0
    // ($bitcast ($uint<1>) _b1  )
    $constant $W[type_cast_1988_wire_constant] : $int<1> := _b1// 1
    // FULL_BYTE_MASK
    $constant $W[R_FULL_BYTE_MASK_1989_wire_constant] : $int<8> := _b11111111// 255
    // ($bitcast ($uint<64>) _b0  )
    $constant $W[type_cast_1992_wire_constant] : $int<64> := _b0000000000000000000000000000000000000000000000000000000000000000// 0
    // constant-declarations for block %transmitPacket%loop
    //  file nic.linked.opt.aa, line 759
    // do-while statement  
    //  file nic.linked.opt.aa, line 761
    // constant-declarations for block %transmitPacket%loop%
    //  file nic.linked.opt.aa, line 763
    // constant-declarations for phi:  			$phi count_down := 			  (packet_size - 16 ) $on   $entry 			  ncount_down $on   $loopback 
    // type of target is $uint<8>
    //  file nic.linked.opt.aa, line 764
    // 16 
    $constant $W[konst_2013_wire_constant] : $int<8> := _b00010000// 16
    // constant-declarations for phi:  			$phi mem_addr := 			  (control_data_addr + 24 ) $on   $entry 			  nmem_addr $on   $loopback 
    // type of target is $uint<36>
    //  file nic.linked.opt.aa, line 766
    // 24 
    $constant $W[konst_2019_wire_constant] : $int<36> := _b000000000000000000000000000000011000// 24
    // 			$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b1  ) FULL_BYTE_MASK mem_addr ($bitcast ($uint<64>) _b0  ) ) (data ) 
    //  file nic.linked.opt.aa, line 769
    // ($bitcast ($uint<1>) _b0  )
    $constant $W[type_cast_2023_wire_constant] : $int<1> := _b0// 0
    // ($bitcast ($uint<1>) _b1  )
    $constant $W[type_cast_2025_wire_constant] : $int<1> := _b1// 1
    // FULL_BYTE_MASK
    $constant $W[R_FULL_BYTE_MASK_2026_wire_constant] : $int<8> := _b11111111// 255
    // ($bitcast ($uint<64>) _b0  )
    $constant $W[type_cast_2029_wire_constant] : $int<64> := _b0000000000000000000000000000000000000000000000000000000000000000// 0
    // ($bitcast ($uint<1>) _b0  )
    $constant $W[type_cast_2034_wire_constant] : $int<1> := _b0// 0
    // FULL_BYTE_MASK
    $constant $W[R_FULL_BYTE_MASK_2037_wire_constant] : $int<8> := _b11111111// 255
    // 8 
    $constant $W[konst_2042_wire_constant] : $int<8> := _b00001000// 8
    // 8 
    $constant $W[konst_2047_wire_constant] : $int<36> := _b000000000000000000000000000000001000// 8
    // 8 
    $constant $W[konst_2058_wire_constant] : $int<8> := _b00001000// 8
    // 		$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b1  ) FULL_BYTE_MASK nmem_addr ($bitcast ($uint<64>) _b0  ) ) (last_word ) 
    //  file nic.linked.opt.aa, line 777
    // ($bitcast ($uint<1>) _b0  )
    $constant $W[type_cast_2066_wire_constant] : $int<1> := _b0// 0
    // ($bitcast ($uint<1>) _b1  )
    $constant $W[type_cast_2068_wire_constant] : $int<1> := _b1// 1
    // FULL_BYTE_MASK
    $constant $W[R_FULL_BYTE_MASK_2069_wire_constant] : $int<8> := _b11111111// 255
    // ($bitcast ($uint<64>) _b0  )
    $constant $W[type_cast_2072_wire_constant] : $int<64> := _b0000000000000000000000000000000000000000000000000000000000000000// 0
    // ($bitcast ($uint<1>) _b1  )
    $constant $W[type_cast_2079_wire_constant] : $int<1> := _b1// 1
    // 	$volatile control_data_addr := ($bitcast ($uint<36>) (( $slice packet_pointer 31 0 )  && ($bitcast ($uint<4>) _b0  )) ) $buffering 1
    //  file nic.linked.opt.aa, line 753
    // ( $slice packet_pointer 31 0 ) 
    $intermediate $W[slice_1976_wire] : $int<32>
    // (( $slice packet_pointer 31 0 )  && ($bitcast ($uint<4>) _b0  ))
    $intermediate $W[CONCAT_u32_u36_1979_wire] : $int<36>
    // control_data_addr
    $W[control_data_addr_1981] : $int<36>
    // 	$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b1  ) FULL_BYTE_MASK control_data_addr ($bitcast ($uint<64>) _b0  ) ) (control_data ) 
    //  file nic.linked.opt.aa, line 755
    // control_data
    $W[control_data_1994] : $int<64>
    // 	$volatile packet_size := ( $slice control_data 15 8 )  $buffering 1
    //  file nic.linked.opt.aa, line 756
    // packet_size
    $W[packet_size_1998] : $int<8>
    // 	$volatile last_tkeep := ( $slice control_data 7 0 )  $buffering 1
    //  file nic.linked.opt.aa, line 757
    // last_tkeep
    $W[last_tkeep_2002] : $int<8>
    // block %transmitPacket%loop
    //  file nic.linked.opt.aa, line 759
    // do-while statement  
    //  file nic.linked.opt.aa, line 761
    // merge-statement  
    //  file nic.linked.opt.aa, line 763
    // 			$phi count_down := 			  (packet_size - 16 ) $on   $entry 			  ncount_down $on   $loopback 
    // type of target is $uint<8>
    //  file nic.linked.opt.aa, line 764
    $W[ncount_down_2044_2011_buffered] : $int<8>
    // (packet_size - 16 )
    $intermediate $W[SUB_u8_u8_2014_wire] : $int<8>
    // count_down
    $W[count_down_2009] : $int<8>
    // 			$phi mem_addr := 			  (control_data_addr + 24 ) $on   $entry 			  nmem_addr $on   $loopback 
    // type of target is $uint<36>
    //  file nic.linked.opt.aa, line 766
    $W[nmem_addr_2049_2017_buffered] : $int<36>
    // (control_data_addr + 24 )
    $intermediate $W[ADD_u36_u36_2020_wire] : $int<36>
    // mem_addr
    $W[mem_addr_2015] : $int<36>
    // 			$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b1  ) FULL_BYTE_MASK mem_addr ($bitcast ($uint<64>) _b0  ) ) (data ) 
    //  file nic.linked.opt.aa, line 769
    // data
    $W[data_2031] : $int<64>
    // 			nic_to_mac_transmit_pipe := ((($bitcast ($uint<1>) _b0  ) && data) && FULL_BYTE_MASK) $buffering 1// bits of buffering = 73. 
    //  file nic.linked.opt.aa, line 770
    // (($bitcast ($uint<1>) _b0  ) && data)
    $intermediate $W[CONCAT_u1_u65_2036_wire] : $int<65>
    // ((($bitcast ($uint<1>) _b0  ) && data) && FULL_BYTE_MASK)
    $intermediate $W[CONCAT_u65_u73_2038_wire] : $int<73>
    // nic_to_mac_transmit_pipe
    // 			$volatile ncount_down := (count_down - 8 ) $buffering 1
    //  file nic.linked.opt.aa, line 771
    // ncount_down
    $W[ncount_down_2044] : $int<8>
    // 			$volatile nmem_addr := (mem_addr + 8 ) $buffering 1
    //  file nic.linked.opt.aa, line 772
    // nmem_addr
    $W[nmem_addr_2049] : $int<36>
    // 			$volatile not_last_word := (ncount_down > 8 ) $buffering 1
    //  file nic.linked.opt.aa, line 774
    // not_last_word
    $W[not_last_word_2060] : $int<1>
    // 		$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b1  ) FULL_BYTE_MASK nmem_addr ($bitcast ($uint<64>) _b0  ) ) (last_word ) 
    //  file nic.linked.opt.aa, line 777
    // last_word
    $W[last_word_2074] : $int<64>
    // 		nic_to_mac_transmit_pipe := ((($bitcast ($uint<1>) _b1  ) && last_word) && last_tkeep) $buffering 1// bits of buffering = 73. 
    //  file nic.linked.opt.aa, line 779
    // (($bitcast ($uint<1>) _b1  ) && last_word)
    $intermediate $W[CONCAT_u1_u65_2081_wire] : $int<65>
    // ((($bitcast ($uint<1>) _b1  ) && last_word) && last_tkeep)
    $intermediate $W[CONCAT_u65_u73_2083_wire] : $int<73>
    // nic_to_mac_transmit_pipe
    // 		status := (packet_size == ($bitcast ($uint<8>) (nmem_addr - control_data_addr) )) $buffering 1// bits of buffering = 1. 
    //  file nic.linked.opt.aa, line 780
    // (nmem_addr - control_data_addr)
    $intermediate $W[SUB_u36_u36_2089_wire] : $int<36>
    // ($bitcast ($uint<8>) (nmem_addr - control_data_addr) )
    $intermediate $W[type_cast_2090_wire] : $int<8>
    // status
    // 	$volatile control_data_addr := ($bitcast ($uint<36>) (( $slice packet_pointer 31 0 )  && ($bitcast ($uint<4>) _b0  )) ) $buffering 1
    //  file nic.linked.opt.aa, line 753
    // ( $slice packet_pointer 31 0 ) 
    [:] [slice_1976_inst] (packet_pointer 31 0) (slice_1976_wire)  $flowthrough
    $delay slice_1976_inst 0
    // (( $slice packet_pointer 31 0 )  && ($bitcast ($uint<4>) _b0  ))
    &&[CONCAT_u32_u36_1979_inst] (slice_1976_wire type_cast_1978_wire_constant) (CONCAT_u32_u36_1979_wire)   $flowthrough 
    $delay CONCAT_u32_u36_1979_inst 0
    // ($bitcast ($uint<36>) (( $slice packet_pointer 31 0 )  && ($bitcast ($uint<4>) _b0  )) )
    # := [type_cast_1980_inst] (CONCAT_u32_u36_1979_wire) (control_data_addr_1981)   $flowthrough
    $delay type_cast_1980_inst 0
    // 	$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b1  ) FULL_BYTE_MASK control_data_addr ($bitcast ($uint<64>) _b0  ) ) (control_data ) 
    //  file nic.linked.opt.aa, line 755
    $call [call_stmt_1994_call] $module accessMemory(type_cast_1986_wire_constant type_cast_1988_wire_constant R_FULL_BYTE_MASK_1989_wire_constant control_data_addr_1981 type_cast_1992_wire_constant) (control_data_1994)  
    $delay call_stmt_1994_call 3
    $buffering  $in call_stmt_1994_call type_cast_1986_wire_constant 1
    $buffering  $in call_stmt_1994_call type_cast_1988_wire_constant 1
    $buffering  $in call_stmt_1994_call R_FULL_BYTE_MASK_1989_wire_constant 1
    $buffering  $in call_stmt_1994_call control_data_addr_1981 1
    $buffering  $in call_stmt_1994_call type_cast_1992_wire_constant 1
    $buffering  $out call_stmt_1994_call control_data_1994 1
    // 	$volatile packet_size := ( $slice control_data 15 8 )  $buffering 1
    //  file nic.linked.opt.aa, line 756
    // ( $slice control_data 15 8 ) 
    [:] [slice_1997_inst] (control_data_1994 15 8) (packet_size_1998)  $flowthrough
    $delay slice_1997_inst 0
    // 	$volatile last_tkeep := ( $slice control_data 7 0 )  $buffering 1
    //  file nic.linked.opt.aa, line 757
    // ( $slice control_data 7 0 ) 
    [:] [slice_2001_inst] (control_data_1994 7 0) (last_tkeep_2002)  $flowthrough
    $delay slice_2001_inst 0
    // datapath-instances for block %transmitPacket%loop
    //  file nic.linked.opt.aa, line 759
    // datapath-instances for do-while  
    //  file nic.linked.opt.aa, line 761
    ==0? [do_while_stmt_2007_branch] (not_last_word_2060)
    $flowthrough
    // data-path instances for merge  
    //  file nic.linked.opt.aa, line 763
    // 			$phi count_down := 			  (packet_size - 16 ) $on   $entry 			  ncount_down $on   $loopback 
    // type of target is $uint<8>
    //  file nic.linked.opt.aa, line 764
    # := [ncount_down_2044_2011_buf] (ncount_down_2044) (ncount_down_2044_2011_buffered)     $fullrate
    $buffering $out ncount_down_2044_2011_buf ncount_down_2044_2011_buffered  1
    // (packet_size - 16 )
    -[SUB_u8_u8_2014_inst] (packet_size_1998 konst_2013_wire_constant) (SUB_u8_u8_2014_wire)    $fullrate
    $buffering  $out SUB_u8_u8_2014_inst SUB_u8_u8_2014_wire 1
    $delay SUB_u8_u8_2014_inst 1
    # $phi [phi_stmt_2009] (ncount_down_2044_2011_buffered SUB_u8_u8_2014_wire) ( count_down_2009 ) $fullrate
    // $buffering  $out phi_stmt_2009 count_down_2009 2
    // 			$phi mem_addr := 			  (control_data_addr + 24 ) $on   $entry 			  nmem_addr $on   $loopback 
    // type of target is $uint<36>
    //  file nic.linked.opt.aa, line 766
    # := [nmem_addr_2049_2017_buf] (nmem_addr_2049) (nmem_addr_2049_2017_buffered)     $fullrate
    $buffering $out nmem_addr_2049_2017_buf nmem_addr_2049_2017_buffered  1
    // (control_data_addr + 24 )
    +[ADD_u36_u36_2020_inst] (control_data_addr_1981 konst_2019_wire_constant) (ADD_u36_u36_2020_wire)    $fullrate
    $buffering  $out ADD_u36_u36_2020_inst ADD_u36_u36_2020_wire 1
    $delay ADD_u36_u36_2020_inst 1
    # $phi [phi_stmt_2015] (nmem_addr_2049_2017_buffered ADD_u36_u36_2020_wire) ( mem_addr_2015 ) $fullrate
    // $buffering  $out phi_stmt_2015 mem_addr_2015 2
    // 			$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b1  ) FULL_BYTE_MASK mem_addr ($bitcast ($uint<64>) _b0  ) ) (data ) 
    //  file nic.linked.opt.aa, line 769
    $call [call_stmt_2031_call] $module accessMemory(type_cast_2023_wire_constant type_cast_2025_wire_constant R_FULL_BYTE_MASK_2026_wire_constant mem_addr_2015 type_cast_2029_wire_constant) (data_2031)   $fullrate
    $delay call_stmt_2031_call 3
    $buffering  $in call_stmt_2031_call type_cast_2023_wire_constant 1
    $buffering  $in call_stmt_2031_call type_cast_2025_wire_constant 1
    $buffering  $in call_stmt_2031_call R_FULL_BYTE_MASK_2026_wire_constant 1
    $buffering  $in call_stmt_2031_call mem_addr_2015 1
    $buffering  $in call_stmt_2031_call type_cast_2029_wire_constant 1
    $buffering  $out call_stmt_2031_call data_2031 1
    // 			nic_to_mac_transmit_pipe := ((($bitcast ($uint<1>) _b0  ) && data) && FULL_BYTE_MASK) $buffering 1// bits of buffering = 73. 
    //  file nic.linked.opt.aa, line 770
    // (($bitcast ($uint<1>) _b0  ) && data)
    &&[CONCAT_u1_u65_2036_inst] (type_cast_2034_wire_constant data_2031) (CONCAT_u1_u65_2036_wire)   $flowthrough 
    $delay CONCAT_u1_u65_2036_inst 0
    // ((($bitcast ($uint<1>) _b0  ) && data) && FULL_BYTE_MASK)
    &&[CONCAT_u65_u73_2038_inst] (CONCAT_u1_u65_2036_wire R_FULL_BYTE_MASK_2037_wire_constant) (CONCAT_u65_u73_2038_wire)    $fullrate
    $buffering  $out CONCAT_u65_u73_2038_inst CONCAT_u65_u73_2038_wire 1
    $delay CONCAT_u65_u73_2038_inst 1
    // nic_to_mac_transmit_pipe
    $ioport $out [WPIPE_nic_to_mac_transmit_pipe_2032_inst]  (CONCAT_u65_u73_2038_wire) (nic_to_mac_transmit_pipe)  $fullrate 
    // 			$volatile ncount_down := (count_down - 8 ) $buffering 1
    //  file nic.linked.opt.aa, line 771
    // (count_down - 8 )
    -[SUB_u8_u8_2043_inst] (count_down_2009 konst_2042_wire_constant) (ncount_down_2044)   $flowthrough 
    $delay SUB_u8_u8_2043_inst 0
    // 			$volatile nmem_addr := (mem_addr + 8 ) $buffering 1
    //  file nic.linked.opt.aa, line 772
    // (mem_addr + 8 )
    +[ADD_u36_u36_2048_inst] (mem_addr_2015 konst_2047_wire_constant) (nmem_addr_2049)   $flowthrough 
    $delay ADD_u36_u36_2048_inst 0
    // 			$volatile not_last_word := (ncount_down > 8 ) $buffering 1
    //  file nic.linked.opt.aa, line 774
    // (ncount_down > 8 )
    >[UGT_u8_u1_2059_inst] (ncount_down_2044 konst_2058_wire_constant) (not_last_word_2060)   $flowthrough 
    $delay UGT_u8_u1_2059_inst 0
    // 		$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b1  ) FULL_BYTE_MASK nmem_addr ($bitcast ($uint<64>) _b0  ) ) (last_word ) 
    //  file nic.linked.opt.aa, line 777
    $call [call_stmt_2074_call] $module accessMemory(type_cast_2066_wire_constant type_cast_2068_wire_constant R_FULL_BYTE_MASK_2069_wire_constant nmem_addr_2049 type_cast_2072_wire_constant) (last_word_2074)  
    $delay call_stmt_2074_call 3
    $buffering  $in call_stmt_2074_call type_cast_2066_wire_constant 1
    $buffering  $in call_stmt_2074_call type_cast_2068_wire_constant 1
    $buffering  $in call_stmt_2074_call R_FULL_BYTE_MASK_2069_wire_constant 1
    $buffering  $in call_stmt_2074_call nmem_addr_2049 1
    $buffering  $in call_stmt_2074_call type_cast_2072_wire_constant 1
    $buffering  $out call_stmt_2074_call last_word_2074 1
    // 		nic_to_mac_transmit_pipe := ((($bitcast ($uint<1>) _b1  ) && last_word) && last_tkeep) $buffering 1// bits of buffering = 73. 
    //  file nic.linked.opt.aa, line 779
    // (($bitcast ($uint<1>) _b1  ) && last_word)
    &&[CONCAT_u1_u65_2081_inst] (type_cast_2079_wire_constant last_word_2074) (CONCAT_u1_u65_2081_wire)   $flowthrough 
    $delay CONCAT_u1_u65_2081_inst 0
    // ((($bitcast ($uint<1>) _b1  ) && last_word) && last_tkeep)
    &&[CONCAT_u65_u73_2083_inst] (CONCAT_u1_u65_2081_wire last_tkeep_2002) (CONCAT_u65_u73_2083_wire)   
    $buffering  $out CONCAT_u65_u73_2083_inst CONCAT_u65_u73_2083_wire 1
    $delay CONCAT_u65_u73_2083_inst 1
    // nic_to_mac_transmit_pipe
    $ioport $out [WPIPE_nic_to_mac_transmit_pipe_2077_inst]  (CONCAT_u65_u73_2083_wire) (nic_to_mac_transmit_pipe) 
    // 		status := (packet_size == ($bitcast ($uint<8>) (nmem_addr - control_data_addr) )) $buffering 1// bits of buffering = 1. 
    //  file nic.linked.opt.aa, line 780
    // (nmem_addr - control_data_addr)
    -[SUB_u36_u36_2089_inst] (nmem_addr_2049 control_data_addr_1981) (SUB_u36_u36_2089_wire)   $flowthrough 
    $delay SUB_u36_u36_2089_inst 0
    // ($bitcast ($uint<8>) (nmem_addr - control_data_addr) )
    # := [type_cast_2090_inst] (SUB_u36_u36_2089_wire) (type_cast_2090_wire)   $flowthrough
    $delay type_cast_2090_inst 0
    // (packet_size == ($bitcast ($uint<8>) (nmem_addr - control_data_addr) ))
    ==[EQ_u8_u1_2091_inst] (packet_size_1998 type_cast_2090_wire) (status)   
    $buffering  $out EQ_u8_u1_2091_inst status 1
    $delay EQ_u8_u1_2091_inst 1
  }
  // end data-path
  // 	$volatile control_data_addr := ($bitcast ($uint<36>) (( $slice packet_pointer 31 0 )  && ($bitcast ($uint<4>) _b0  )) ) $buffering 1
  //  file nic.linked.opt.aa, line 753
  // (( $slice packet_pointer 31 0 )  && ($bitcast ($uint<4>) _b0  ))
  // packet_pointer
  // 	$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b1  ) FULL_BYTE_MASK control_data_addr ($bitcast ($uint<64>) _b0  ) ) (control_data ) 
  //  file nic.linked.opt.aa, line 755
  // control_data_addr
  call_stmt_1994_call <=> (assign_stmt_1981_to_assign_stmt_2002/call_stmt_1994_Sample/crr assign_stmt_1981_to_assign_stmt_2002/call_stmt_1994_Update/ccr) (assign_stmt_1981_to_assign_stmt_2002/call_stmt_1994_Sample/cra assign_stmt_1981_to_assign_stmt_2002/call_stmt_1994_Update/cca)
  // 	$volatile packet_size := ( $slice control_data 15 8 )  $buffering 1
  //  file nic.linked.opt.aa, line 756
  // control_data
  // 	$volatile last_tkeep := ( $slice control_data 7 0 )  $buffering 1
  //  file nic.linked.opt.aa, line 757
  // control_data
  // CP-DP links for do-while  do_while_stmt_2007
  //  file nic.linked.opt.aa, line 761
  phi_stmt_2009 <=> (branch_block_stmt_2006/do_while_stmt_2007/do_while_stmt_2007_loop_body/phi_stmt_2009_loopback_sample_req branch_block_stmt_2006/do_while_stmt_2007/do_while_stmt_2007_loop_body/phi_stmt_2009_entry_sample_req) (branch_block_stmt_2006/do_while_stmt_2007/do_while_stmt_2007_loop_body/phi_stmt_2009_phi_mux_ack)
  ncount_down_2044_2011_buf <=> (branch_block_stmt_2006/do_while_stmt_2007/do_while_stmt_2007_loop_body/R_ncount_down_2011_Sample/req branch_block_stmt_2006/do_while_stmt_2007/do_while_stmt_2007_loop_body/R_ncount_down_2011_Update/req) (branch_block_stmt_2006/do_while_stmt_2007/do_while_stmt_2007_loop_body/R_ncount_down_2011_Sample/ack branch_block_stmt_2006/do_while_stmt_2007/do_while_stmt_2007_loop_body/R_ncount_down_2011_Update/ack)
  // (packet_size - 16 )
  // packet_size
  SUB_u8_u8_2014_inst <=> (branch_block_stmt_2006/do_while_stmt_2007/do_while_stmt_2007_loop_body/SUB_u8_u8_2014_Sample/rr branch_block_stmt_2006/do_while_stmt_2007/do_while_stmt_2007_loop_body/SUB_u8_u8_2014_Update/cr) (branch_block_stmt_2006/do_while_stmt_2007/do_while_stmt_2007_loop_body/SUB_u8_u8_2014_Sample/ra branch_block_stmt_2006/do_while_stmt_2007/do_while_stmt_2007_loop_body/SUB_u8_u8_2014_Update/ca)
  phi_stmt_2015 <=> (branch_block_stmt_2006/do_while_stmt_2007/do_while_stmt_2007_loop_body/phi_stmt_2015_loopback_sample_req branch_block_stmt_2006/do_while_stmt_2007/do_while_stmt_2007_loop_body/phi_stmt_2015_entry_sample_req) (branch_block_stmt_2006/do_while_stmt_2007/do_while_stmt_2007_loop_body/phi_stmt_2015_phi_mux_ack)
  nmem_addr_2049_2017_buf <=> (branch_block_stmt_2006/do_while_stmt_2007/do_while_stmt_2007_loop_body/R_nmem_addr_2017_Sample/req branch_block_stmt_2006/do_while_stmt_2007/do_while_stmt_2007_loop_body/R_nmem_addr_2017_Update/req) (branch_block_stmt_2006/do_while_stmt_2007/do_while_stmt_2007_loop_body/R_nmem_addr_2017_Sample/ack branch_block_stmt_2006/do_while_stmt_2007/do_while_stmt_2007_loop_body/R_nmem_addr_2017_Update/ack)
  // (control_data_addr + 24 )
  // control_data_addr
  ADD_u36_u36_2020_inst <=> (branch_block_stmt_2006/do_while_stmt_2007/do_while_stmt_2007_loop_body/ADD_u36_u36_2020_Sample/rr branch_block_stmt_2006/do_while_stmt_2007/do_while_stmt_2007_loop_body/ADD_u36_u36_2020_Update/cr) (branch_block_stmt_2006/do_while_stmt_2007/do_while_stmt_2007_loop_body/ADD_u36_u36_2020_Sample/ra branch_block_stmt_2006/do_while_stmt_2007/do_while_stmt_2007_loop_body/ADD_u36_u36_2020_Update/ca)
  // 			$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b1  ) FULL_BYTE_MASK mem_addr ($bitcast ($uint<64>) _b0  ) ) (data ) 
  //  file nic.linked.opt.aa, line 769
  // mem_addr
  call_stmt_2031_call <=> (branch_block_stmt_2006/do_while_stmt_2007/do_while_stmt_2007_loop_body/call_stmt_2031_Sample/crr branch_block_stmt_2006/do_while_stmt_2007/do_while_stmt_2007_loop_body/call_stmt_2031_Update/ccr) (branch_block_stmt_2006/do_while_stmt_2007/do_while_stmt_2007_loop_body/call_stmt_2031_Sample/cra branch_block_stmt_2006/do_while_stmt_2007/do_while_stmt_2007_loop_body/call_stmt_2031_Update/cca)
  // 			nic_to_mac_transmit_pipe := ((($bitcast ($uint<1>) _b0  ) && data) && FULL_BYTE_MASK) $buffering 1// bits of buffering = 73. 
  //  file nic.linked.opt.aa, line 770
  // ((($bitcast ($uint<1>) _b0  ) && data) && FULL_BYTE_MASK)
  // (($bitcast ($uint<1>) _b0  ) && data)
  // data
  CONCAT_u65_u73_2038_inst <=> (branch_block_stmt_2006/do_while_stmt_2007/do_while_stmt_2007_loop_body/CONCAT_u65_u73_2038_Sample/rr branch_block_stmt_2006/do_while_stmt_2007/do_while_stmt_2007_loop_body/CONCAT_u65_u73_2038_Update/cr) (branch_block_stmt_2006/do_while_stmt_2007/do_while_stmt_2007_loop_body/CONCAT_u65_u73_2038_Sample/ra branch_block_stmt_2006/do_while_stmt_2007/do_while_stmt_2007_loop_body/CONCAT_u65_u73_2038_Update/ca)
  // nic_to_mac_transmit_pipe
  WPIPE_nic_to_mac_transmit_pipe_2032_inst <=> (branch_block_stmt_2006/do_while_stmt_2007/do_while_stmt_2007_loop_body/WPIPE_nic_to_mac_transmit_pipe_2032_Sample/req branch_block_stmt_2006/do_while_stmt_2007/do_while_stmt_2007_loop_body/WPIPE_nic_to_mac_transmit_pipe_2032_Update/req) (branch_block_stmt_2006/do_while_stmt_2007/do_while_stmt_2007_loop_body/WPIPE_nic_to_mac_transmit_pipe_2032_Sample/ack branch_block_stmt_2006/do_while_stmt_2007/do_while_stmt_2007_loop_body/WPIPE_nic_to_mac_transmit_pipe_2032_Update/ack)
  // 			$volatile ncount_down := (count_down - 8 ) $buffering 1
  //  file nic.linked.opt.aa, line 771
  // (count_down - 8 )
  // count_down
  // 			$volatile nmem_addr := (mem_addr + 8 ) $buffering 1
  //  file nic.linked.opt.aa, line 772
  // (mem_addr + 8 )
  // mem_addr
  // 			$volatile not_last_word := (ncount_down > 8 ) $buffering 1
  //  file nic.linked.opt.aa, line 774
  // (ncount_down > 8 )
  // ncount_down
  // not_last_word
  do_while_stmt_2007_branch <=> (branch_block_stmt_2006/do_while_stmt_2007/do_while_stmt_2007_loop_body/condition_evaluated) (branch_block_stmt_2006/do_while_stmt_2007/loop_exit/ack branch_block_stmt_2006/do_while_stmt_2007/loop_taken/ack)
  // 		$call accessMemory (($bitcast ($uint<1>) _b0  ) ($bitcast ($uint<1>) _b1  ) FULL_BYTE_MASK nmem_addr ($bitcast ($uint<64>) _b0  ) ) (last_word ) 
  //  file nic.linked.opt.aa, line 777
  // nmem_addr
  call_stmt_2074_call <=> (branch_block_stmt_2006/call_stmt_2074_to_assign_stmt_2092/call_stmt_2074_Sample/crr branch_block_stmt_2006/call_stmt_2074_to_assign_stmt_2092/call_stmt_2074_Update/ccr) (branch_block_stmt_2006/call_stmt_2074_to_assign_stmt_2092/call_stmt_2074_Sample/cra branch_block_stmt_2006/call_stmt_2074_to_assign_stmt_2092/call_stmt_2074_Update/cca)
  // 		nic_to_mac_transmit_pipe := ((($bitcast ($uint<1>) _b1  ) && last_word) && last_tkeep) $buffering 1// bits of buffering = 73. 
  //  file nic.linked.opt.aa, line 779
  // ((($bitcast ($uint<1>) _b1  ) && last_word) && last_tkeep)
  // (($bitcast ($uint<1>) _b1  ) && last_word)
  // last_word
  // last_tkeep
  CONCAT_u65_u73_2083_inst <=> (branch_block_stmt_2006/call_stmt_2074_to_assign_stmt_2092/CONCAT_u65_u73_2083_Sample/rr branch_block_stmt_2006/call_stmt_2074_to_assign_stmt_2092/CONCAT_u65_u73_2083_Update/cr) (branch_block_stmt_2006/call_stmt_2074_to_assign_stmt_2092/CONCAT_u65_u73_2083_Sample/ra branch_block_stmt_2006/call_stmt_2074_to_assign_stmt_2092/CONCAT_u65_u73_2083_Update/ca)
  // nic_to_mac_transmit_pipe
  WPIPE_nic_to_mac_transmit_pipe_2077_inst <=> (branch_block_stmt_2006/call_stmt_2074_to_assign_stmt_2092/WPIPE_nic_to_mac_transmit_pipe_2077_Sample/req branch_block_stmt_2006/call_stmt_2074_to_assign_stmt_2092/WPIPE_nic_to_mac_transmit_pipe_2077_Update/req) (branch_block_stmt_2006/call_stmt_2074_to_assign_stmt_2092/WPIPE_nic_to_mac_transmit_pipe_2077_Sample/ack branch_block_stmt_2006/call_stmt_2074_to_assign_stmt_2092/WPIPE_nic_to_mac_transmit_pipe_2077_Update/ack)
  // 		status := (packet_size == ($bitcast ($uint<8>) (nmem_addr - control_data_addr) )) $buffering 1// bits of buffering = 1. 
  //  file nic.linked.opt.aa, line 780
  // (packet_size == ($bitcast ($uint<8>) (nmem_addr - control_data_addr) ))
  // packet_size
  // (nmem_addr - control_data_addr)
  // nmem_addr
  // control_data_addr
  EQ_u8_u1_2091_inst <=> (branch_block_stmt_2006/call_stmt_2074_to_assign_stmt_2092/EQ_u8_u1_2091_Sample/rr branch_block_stmt_2006/call_stmt_2074_to_assign_stmt_2092/EQ_u8_u1_2091_Update/cr) (branch_block_stmt_2006/call_stmt_2074_to_assign_stmt_2092/EQ_u8_u1_2091_Sample/ra branch_block_stmt_2006/call_stmt_2074_to_assign_stmt_2092/EQ_u8_u1_2091_Update/ca)
}
$module [transmitEngineDaemon] 
{
  // pipe-declarations for block %transmitEngineDaemon
  //  file nic.linked.opt.aa, line 783
  // pipe-declarations for block %transmitEngineDaemon%main
  //  file nic.linked.opt.aa, line 789
  // pipe-declarations for block %transmitEngineDaemon%main%
  //  file nic.linked.opt.aa, line 791
  // there are no memory spaces local to this module.
  $CP 
  {
    // begin control-path 
    ::[assign_stmt_2098] 
    {
      // start:  	LAST_READ_TX_QUEUE_INDEX := 0  $buffering 1// bits of buffering = 6. 
      //  file nic.linked.opt.aa, line 788
      // Target expression
      // (as target) LAST_READ_TX_QUEUE_INDEX
      $T[WPIPE_LAST_READ_TX_QUEUE_INDEX_2096_sample_start_] 
      $T[WPIPE_LAST_READ_TX_QUEUE_INDEX_2096_sample_completed_] 
      $T[WPIPE_LAST_READ_TX_QUEUE_INDEX_2096_update_start_] 
      $T[WPIPE_LAST_READ_TX_QUEUE_INDEX_2096_update_completed_] 
      ;;[WPIPE_LAST_READ_TX_QUEUE_INDEX_2096_Sample] 
      {
        // pipe write sample-start LAST_READ_TX_QUEUE_INDEX
        $T [req] $T [ack] 
      }
      ;;[WPIPE_LAST_READ_TX_QUEUE_INDEX_2096_Update] 
      {
        // pipe write update (complete) LAST_READ_TX_QUEUE_INDEX
        $T [req] $T [ack] 
      }
      WPIPE_LAST_READ_TX_QUEUE_INDEX_2096_sample_start_ &-> (WPIPE_LAST_READ_TX_QUEUE_INDEX_2096_Sample)
      WPIPE_LAST_READ_TX_QUEUE_INDEX_2096_sample_completed_ <-& (WPIPE_LAST_READ_TX_QUEUE_INDEX_2096_Sample)
      WPIPE_LAST_READ_TX_QUEUE_INDEX_2096_update_start_ <-& (WPIPE_LAST_READ_TX_QUEUE_INDEX_2096_sample_completed_)
      WPIPE_LAST_READ_TX_QUEUE_INDEX_2096_update_start_ &-> (WPIPE_LAST_READ_TX_QUEUE_INDEX_2096_Update)
      WPIPE_LAST_READ_TX_QUEUE_INDEX_2096_update_completed_ <-& (WPIPE_LAST_READ_TX_QUEUE_INDEX_2096_Update)
      // end:  	LAST_READ_TX_QUEUE_INDEX := 0  $buffering 1// bits of buffering = 6. 
      // load-store dependencies..
      // pipe read/write dependencies for pipe LAST_READ_TX_QUEUE_INDEX
      // read-dependencies for pipe LAST_READ_TX_QUEUE_INDEX
      // write-dependencies for pipe LAST_READ_TX_QUEUE_INDEX
      // signal write dependencies for LAST_READ_TX_QUEUE_INDEX
    }
    <>[branch_block_stmt_2099] // Branch Block  file nic.linked.opt.aa, line 789
    {
      $P [branch_block_stmt_2099__entry__]
      branch_block_stmt_2099__entry__ <-| ($entry)
      $P [branch_block_stmt_2099__exit__]
      branch_block_stmt_2099__exit__ |-> ($exit)
      $P [merge_stmt_2100__entry__] 
      $P [merge_stmt_2100__exit__] 
      $P [if_stmt_2101__entry__] 
      $P [if_stmt_2101__exit__] 
      $P [do_while_stmt_2109__entry__] 
      $P [do_while_stmt_2109__exit__] 
      $P [disable_loopback]
      // if-statement  
      //  file nic.linked.opt.aa, line -1575179400
      ;;[if_stmt_2101_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      if_stmt_2101__entry__ |-> (if_stmt_2101_dead_link)
      if_stmt_2101__exit__ <-| (if_stmt_2101_dead_link)
      ;;[if_stmt_2101_eval_test] 
      {
        // test expression evaluate and trigger branch 
        // ( ~ (CONTROL_REGISTER [] 0 ) )
        ;;[NOT_u1_u1_2105] 
        {
          // unary expression 
          // (CONTROL_REGISTER [] 0 )
          ;;[BITSEL_u32_u1_2104] 
          {
            // binary expression 
            ||[BITSEL_u32_u1_2104_inputs] 
            {
              // CONTROL_REGISTER
              ;;[RPIPE_CONTROL_REGISTER_2102] 
              {
                // pipe read
                ;;[Sample] 
                {
                  $T [req] $T [ack] 
                }
                ;;[Update] 
                {
                  $T [req] $T [ack] 
                }
              }
            }
            // flow-through
            ;;[SplitProtocol] 
            {
              ;;[Sample] 
              {
                $T [rr] $T [ra]
              }
              ;;[Update] 
              {
                $T [cr] $T [ca]
              }
            }
          }
          // flow-through
          ;;[SplitProtocol] 
          {
            ;;[Sample] 
            {
              $T [rr] $T [ra]
            }
            ;;[Update] 
            {
              $T [cr] $T [ca]
            }
          }
        }
        $T [branch_req] 
      }
      if_stmt_2101__entry__ |-> (if_stmt_2101_eval_test)
      $P [NOT_u1_u1_2105_place]
      NOT_u1_u1_2105_place <-| (if_stmt_2101_eval_test)
      ;;[if_stmt_2101_if_link] 
      {
        $T [if_choice_transition] 
      }
      ;;[if_stmt_2101_else_link] 
      {
        $T [else_choice_transition] 
      }
      NOT_u1_u1_2105_place |-> (if_stmt_2101_if_link if_stmt_2101_else_link)
      $P [not_enabled_yet_loopback]
      not_enabled_yet_loopback <-| (if_stmt_2101_if_link)
      if_stmt_2101__exit__ <-| (if_stmt_2101_else_link)
      // do-while-statement  
      //  file nic.linked.opt.aa, line 797
      <o> [do_while_stmt_2109]  $depth 31 $buffering 1 
      {
        $P[do_while_stmt_2109__entry__] 
        $P[do_while_stmt_2109__exit__] 
        $P[loop_back] 
        $P[condition_done] 
        $P[loop_body_done] 
        $pipeline [do_while_stmt_2109_loop_body] 
        {
          // Pipelined!
          $T[back_edge_to_loop_body] 
          $T[first_time_through_loop_body] 
          $T[loop_body_start] 
          $T[condition_evaluated] 
          $transitionmerge [entry_tmerge] (back_edge_to_loop_body first_time_through_loop_body) (loop_body_start)
          $entry <-& (loop_body_start)
          $T[aggregated_phi_sample_req] 
          $T[aggregated_phi_sample_ack] 
          $T[aggregated_phi_update_req] 
          $T[aggregated_phi_update_ack] 
          // do not loop-back unless all phi's have used up their triggering tokens.
          condition_evaluated <-& (aggregated_phi_update_ack)
          aggregated_phi_sample_req o<-& (aggregated_phi_update_ack 0)
          // start:  single source PHI statement phi_stmt_2111
          // 			$phi tx_q_index := 			  ((LAST_READ_TX_QUEUE_INDEX + 1 ) & ($bitcast ($uint<6>) (NUMBER_OF_SERVERS - 1 ) )) $on   $entry ,   $loopback 
          // type of target is $uint<6>
          $T[phi_stmt_2111_sample_start_] 
          $T[phi_stmt_2111_sample_completed_] 
          $T[phi_stmt_2111_update_start_] 
          $T[phi_stmt_2111_update_completed_] 
          aggregated_phi_sample_req <-& (phi_stmt_2111_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_2111_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_2111_update_start_)
          // non-implicit source expression in single-source phi
          // ((LAST_READ_TX_QUEUE_INDEX + 1 ) & ($bitcast ($uint<6>) (NUMBER_OF_SERVERS - 1 ) ))
          $T[AND_u6_u6_2120_sample_start_] 
          $T[AND_u6_u6_2120_sample_completed_] 
          $T[AND_u6_u6_2120_update_start_] 
          $T[AND_u6_u6_2120_update_completed_] 
          // (LAST_READ_TX_QUEUE_INDEX + 1 )
          // LAST_READ_TX_QUEUE_INDEX
          // ($bitcast ($uint<6>) (NUMBER_OF_SERVERS - 1 ) )
          // (NUMBER_OF_SERVERS - 1 )
          // NUMBER_OF_SERVERS
          // start: Forward dependencies from (LAST_READ_TX_QUEUE_INDEX + 1 ) to transition AND_u6_u6_2120_sample_start_
          // non-constant expression which depends only on signals/constants?
          // done: Forward dependencies from (LAST_READ_TX_QUEUE_INDEX + 1 ) to transition AND_u6_u6_2120_sample_start_
          // start: Forward dependencies from ($bitcast ($uint<6>) (NUMBER_OF_SERVERS - 1 ) ) to transition AND_u6_u6_2120_sample_start_
          // non-constant expression which depends only on signals/constants?
          // done: Forward dependencies from ($bitcast ($uint<6>) (NUMBER_OF_SERVERS - 1 ) ) to transition AND_u6_u6_2120_sample_start_
          ;;[AND_u6_u6_2120_Sample] 
          {
            // binary expression 
            $T [rr] $T [ra]  // (split) binary operation 
          }
          ;;[AND_u6_u6_2120_Update] 
          {
            // binary expression 
            $T [cr] $T [ca] // (split) binary operation 
          }
          AND_u6_u6_2120_sample_start_ &-> (AND_u6_u6_2120_Sample)
          AND_u6_u6_2120_sample_completed_ <-& (AND_u6_u6_2120_Sample)
          AND_u6_u6_2120_sample_completed_ &-> ($null)
          AND_u6_u6_2120_update_start_ &-> (AND_u6_u6_2120_Update)
          AND_u6_u6_2120_update_completed_ <-& (AND_u6_u6_2120_Update)
          // RAW reenables for (LAST_READ_TX_QUEUE_INDEX + 1 )
          // RAW reenables for ($bitcast ($uint<6>) (NUMBER_OF_SERVERS - 1 ) )
          // self-release: 
          AND_u6_u6_2120_sample_start_ o<-& (AND_u6_u6_2120_sample_completed_ 1)
          $null &-> (AND_u6_u6_2120_update_start_)
          AND_u6_u6_2120_update_start_ o<-& (AND_u6_u6_2120_update_completed_ 0)
          // RAW reenables for ((LAST_READ_TX_QUEUE_INDEX + 1 ) & ($bitcast ($uint<6>) (NUMBER_OF_SERVERS - 1 ) ))
          // producer  and  consumer are both determined by PHI statements.
          aggregated_phi_sample_req &-> (AND_u6_u6_2120_sample_start_)
          aggregated_phi_sample_ack <-& (AND_u6_u6_2120_sample_completed_)
          aggregated_phi_update_req &-> (AND_u6_u6_2120_update_start_)
          phi_stmt_2111_update_completed_ <-& (AND_u6_u6_2120_update_completed_)
          aggregated_phi_update_ack <-& (phi_stmt_2111_update_completed_)
          // done: PHI Statement phi_stmt_2111
          // start:  PHI statement phi_stmt_2121
          // 			$phi count := 			  ($bitcast ($uint<32>) _b1  ) $on   $entry 			  ncount $on   $loopback 
          // type of target is $uint<32>
          $T[phi_stmt_2121_sample_start_] 
          $T[phi_stmt_2121_sample_completed_] 
          $T[phi_stmt_2121_update_start_] 
          $T[phi_stmt_2121_update_completed_] 
          $T[phi_stmt_2121_sample_start__ps] 
          phi_stmt_2121_sample_start__ps <-& (aggregated_phi_sample_req)
          $T[phi_stmt_2121_sample_completed__ps] 
          phi_stmt_2121_sample_completed__ps &-> (aggregated_phi_sample_ack)
          $T[phi_stmt_2121_update_start__ps] 
          phi_stmt_2121_update_start__ps <-& (aggregated_phi_update_req)
          $T[phi_stmt_2121_update_completed__ps] 
          phi_stmt_2121_update_completed_ <-& (phi_stmt_2121_update_completed__ps)
          aggregated_phi_sample_req <-& (phi_stmt_2121_sample_start_)
          aggregated_phi_sample_ack &-> (phi_stmt_2121_sample_completed_)
          aggregated_phi_update_req <-& (phi_stmt_2121_update_start_)
          $T[phi_stmt_2121_loopback_trigger] 
          phi_stmt_2121_loopback_trigger <-& (back_edge_to_loop_body)
          $T[phi_stmt_2121_loopback_sample_req] 
          $T[phi_stmt_2121_loopback_sample_req_ps] 
          phi_stmt_2121_loopback_sample_req <-& (phi_stmt_2121_loopback_sample_req_ps)
          phi_stmt_2121_loopback_sample_req &-> ($null)
          $T[phi_stmt_2121_entry_trigger] 
          phi_stmt_2121_entry_trigger <-& (first_time_through_loop_body)
          $T[phi_stmt_2121_entry_sample_req] 
          $T[phi_stmt_2121_entry_sample_req_ps] 
          phi_stmt_2121_entry_sample_req <-& (phi_stmt_2121_entry_sample_req_ps)
          phi_stmt_2121_entry_sample_req &-> ($null)
          phi_stmt_2121_update_start_ o<-& (phi_stmt_2121_update_completed_ 0)
          phi_stmt_2121_sample_start_ o<-& (phi_stmt_2121_sample_completed_ 1)
          $T[phi_stmt_2121_merged_reqs] 
          $T[phi_stmt_2121_phi_mux_ack] 
          $T[phi_stmt_2121_phi_mux_ack_ps] 
          phi_stmt_2121_phi_mux_ack_ps <-& (phi_stmt_2121_phi_mux_ack)
          aggregated_phi_update_ack <-& (phi_stmt_2121_update_completed_)
          $T[R_ncount_2123_sample_start__ps] 
          $T[R_ncount_2123_sample_completed__ps] 
          $T[R_ncount_2123_update_start__ps] 
          $T[R_ncount_2123_update_completed__ps] 
          // interlock for implicit-variable-ref/signal-read in Phi alternative 0
          $T[R_ncount_2123_sample_start_] 
          $T[R_ncount_2123_sample_completed_] 
          $T[R_ncount_2123_update_start_] 
          $T[R_ncount_2123_update_completed_] 
          ;;[R_ncount_2123_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          R_ncount_2123_sample_start_ &-> (R_ncount_2123_Sample)
          R_ncount_2123_sample_completed_ <-& (R_ncount_2123_Sample)
          ;;[R_ncount_2123_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          R_ncount_2123_update_start_ &-> (R_ncount_2123_Update)
          R_ncount_2123_update_completed_ <-& (R_ncount_2123_Update)
          // RAW reenables for ncount
          // Phi start dependency for implicit/constant alternative.
          R_ncount_2123_sample_start_ <-& (R_ncount_2123_sample_start__ps)
          R_ncount_2123_update_start_ <-& (R_ncount_2123_update_start__ps)
          // Phi complete dependency.
          R_ncount_2123_sample_completed__ps <-& (R_ncount_2123_sample_completed_)
          R_ncount_2123_update_completed__ps <-& (R_ncount_2123_update_completed_)
          $T[type_cast_2125_sample_start__ps] 
          $T[type_cast_2125_sample_completed__ps] 
          $T[type_cast_2125_update_start__ps] 
          $T[type_cast_2125_update_completed__ps] 
          // dummies for constant expression source for phi
          $T[type_cast_2125_sample_start_] 
          $T[type_cast_2125_sample_completed_] 
          type_cast_2125_sample_completed_ <-& (type_cast_2125_sample_start_)
          $T[type_cast_2125_update_start_] 
          $T [type_cast_2125_update_completed_] $delay 
          type_cast_2125_update_completed_ <-& (type_cast_2125_update_start_)
          // Phi start dependency for implicit/constant alternative.
          type_cast_2125_sample_start_ <-& (type_cast_2125_sample_start__ps)
          type_cast_2125_update_start_ <-& (type_cast_2125_update_start__ps)
          // Phi complete dependency.
          type_cast_2125_sample_completed__ps <-& (type_cast_2125_sample_completed_)
          type_cast_2125_update_completed__ps <-& (type_cast_2125_update_completed_)
          $phisequencer [ phi_stmt_2121_phi_seq] : 
          phi_stmt_2121_loopback_trigger R_ncount_2123_sample_start__ps R_ncount_2123_sample_completed__ps R_ncount_2123_update_start__ps R_ncount_2123_update_completed__ps phi_stmt_2121_entry_trigger type_cast_2125_sample_start__ps type_cast_2125_sample_completed__ps type_cast_2125_update_start__ps type_cast_2125_update_completed__ps :
          phi_stmt_2121_sample_start__ps phi_stmt_2121_sample_completed__ps phi_stmt_2121_update_start__ps phi_stmt_2121_update_completed__ps :
          phi_stmt_2121_loopback_sample_req_ps phi_stmt_2121_entry_sample_req_ps : 
          phi_stmt_2121_phi_mux_ack_ps
          // done: PHI Statement phi_stmt_2121
          // start: 			$call getTxPacketPointerFromServer (tx_q_index ) (pkt_pointer tx_flag ) 
          //  file nic.linked.opt.aa, line 806
          $T[call_stmt_2132_sample_start_] 
          $T[call_stmt_2132_sample_completed_] 
          $T[call_stmt_2132_update_start_] 
          $T[call_stmt_2132_update_completed_] 
          // Call input argument 0
          // tx_q_index
          // start: Forward dependencies from tx_q_index to transition call_stmt_2132_sample_start_
          call_stmt_2132_sample_start_ <-& (phi_stmt_2111_update_completed_)
          // done: Forward dependencies from tx_q_index to transition call_stmt_2132_sample_start_
          // RAW reenables for tx_q_index
          phi_stmt_2111_update_start_ o<-& (call_stmt_2132_sample_completed_ 0)
          ;;[call_stmt_2132_Sample] 
          {
            $T [crr] $T [cra] 
          }
          ;;[call_stmt_2132_Update] 
          {
            $T [ccr] $T [cca] 
          }
          call_stmt_2132_sample_start_ &-> (call_stmt_2132_Sample)
          call_stmt_2132_sample_completed_ <-& (call_stmt_2132_Sample)
          call_stmt_2132_sample_completed_ &-> ($null)
          call_stmt_2132_update_start_ &-> (call_stmt_2132_Update)
          call_stmt_2132_update_completed_ <-& (call_stmt_2132_Update)
          // Call output argument 0
          // (as target) pkt_pointer
          // Call output argument 1
          // (as target) tx_flag
          // self-release: 
          call_stmt_2132_sample_start_ o<-& (call_stmt_2132_sample_completed_ 1)
          $null &-> (call_stmt_2132_update_start_)
          call_stmt_2132_update_start_ o<-& (call_stmt_2132_update_completed_ 0)
          // start: WAR dependencies for pkt_pointer
          // done: WAR dependencies for pkt_pointer
          // start: WAR dependencies for tx_flag
          // done: WAR dependencies for tx_flag
          // end: 			$call getTxPacketPointerFromServer (tx_q_index ) (pkt_pointer tx_flag ) 
          // start: 			$guard (~tx_flag) $call transmitPacket (pkt_pointer ) (transmitted_flag ) 
          //  file nic.linked.opt.aa, line 807
          $T[call_stmt_2136_sample_start_] 
          $T[call_stmt_2136_sample_completed_] 
          $T[call_stmt_2136_update_start_] 
          $T[call_stmt_2136_update_completed_] 
          // Guard expression
          // tx_flag
          // start: Forward dependencies from tx_flag to transition call_stmt_2136_sample_start_
          call_stmt_2136_sample_start_ <-& (call_stmt_2132_update_completed_)
          // done: Forward dependencies from tx_flag to transition call_stmt_2136_sample_start_
          // RAW reenables for tx_flag
          call_stmt_2132_update_start_ o<-& (call_stmt_2136_sample_completed_ 0)
          // Call input argument 0
          // pkt_pointer
          // start: Forward dependencies from pkt_pointer to transition call_stmt_2136_sample_start_
          call_stmt_2136_sample_start_ <-& (call_stmt_2132_update_completed_)
          // done: Forward dependencies from pkt_pointer to transition call_stmt_2136_sample_start_
          // RAW reenables for pkt_pointer
          call_stmt_2132_update_start_ o<-& (call_stmt_2136_sample_completed_ 0)
          ;;[call_stmt_2136_Sample] 
          {
            $T [crr] $T [cra] 
          }
          ;;[call_stmt_2136_Update] 
          {
            $T [ccr] $T [cca] 
          }
          call_stmt_2136_sample_start_ &-> (call_stmt_2136_Sample)
          call_stmt_2136_sample_completed_ <-& (call_stmt_2136_Sample)
          call_stmt_2136_sample_completed_ &-> ($null)
          call_stmt_2136_update_start_ &-> (call_stmt_2136_Update)
          call_stmt_2136_update_completed_ <-& (call_stmt_2136_Update)
          // Call output argument 0
          // (as target) transmitted_flag
          // self-release: 
          call_stmt_2136_sample_start_ o<-& (call_stmt_2136_sample_completed_ 1)
          $null &-> (call_stmt_2136_update_start_)
          call_stmt_2136_update_start_ o<-& (call_stmt_2136_update_completed_ 0)
          // start: WAR dependencies for transmitted_flag
          // done: WAR dependencies for transmitted_flag
          // end: 			$guard (~tx_flag) $call transmitPacket (pkt_pointer ) (transmitted_flag ) 
          // start:  			NOT_u1_u1_2120_2120_delayed_4_0 := ( ~ tx_flag ) $buffering 4 $cut_through // bits of buffering = 4. 
          //  file nic.linked.opt.aa, line 810
          // Source expression
          // ( ~ tx_flag )
          $T[NOT_u1_u1_2146_sample_start_] 
          $T[NOT_u1_u1_2146_sample_completed_] 
          $T[NOT_u1_u1_2146_update_start_] 
          $T[NOT_u1_u1_2146_update_completed_] 
          // tx_flag
          // start: Forward dependencies from tx_flag to transition NOT_u1_u1_2146_sample_start_
          NOT_u1_u1_2146_sample_start_ <-& (call_stmt_2132_update_completed_)
          // done: Forward dependencies from tx_flag to transition NOT_u1_u1_2146_sample_start_
          ;;[NOT_u1_u1_2146_Sample] 
          {
            // unary expression 
            $T [rr] $T [ra] // (split) unary operation
          }
          ;;[NOT_u1_u1_2146_Update] 
          {
            // unary expression 
            $T [cr] $T [ca] //(split) unary operation
          }
          NOT_u1_u1_2146_sample_start_ &-> (NOT_u1_u1_2146_Sample)
          NOT_u1_u1_2146_sample_completed_ <-& (NOT_u1_u1_2146_Sample)
          NOT_u1_u1_2146_sample_completed_ &-> ($null)
          NOT_u1_u1_2146_update_start_ &-> (NOT_u1_u1_2146_Update)
          NOT_u1_u1_2146_update_completed_ <-& (NOT_u1_u1_2146_Update)
          // RAW reenables for tx_flag
          call_stmt_2132_update_start_ o<-& (NOT_u1_u1_2146_sample_completed_ 0)
          // self-release: 
          NOT_u1_u1_2146_sample_start_ o<-& (NOT_u1_u1_2146_sample_completed_ 1)
          $null &-> (NOT_u1_u1_2146_update_start_)
          NOT_u1_u1_2146_update_start_ o<-& (NOT_u1_u1_2146_update_completed_ 0)
          // Target expression
          // (as target) NOT_u1_u1_2120_2120_delayed_4_0
          // start: WAR dependencies for NOT_u1_u1_2120_2120_delayed_4_0
          // done: WAR dependencies for NOT_u1_u1_2120_2120_delayed_4_0
          // end:  			NOT_u1_u1_2120_2120_delayed_4_0 := ( ~ tx_flag ) $buffering 4 $cut_through // bits of buffering = 4. 
          // start: WAR dependencies for push_pointer_back_to_free_Q
          // done: WAR dependencies for push_pointer_back_to_free_Q
          // start:  			$volatile push_pointer_back_to_free_Q := (NOT_u1_u1_2120_2120_delayed_4_0 & transmitted_flag) $buffering 1
          //  file nic.linked.opt.aa, line 811
          // volatile! 
          // Source expression
          // (NOT_u1_u1_2120_2120_delayed_4_0 & transmitted_flag)
          // NOT_u1_u1_2120_2120_delayed_4_0
          // transmitted_flag
          // Target expression
          // (as target) push_pointer_back_to_free_Q
          // start: WAR dependencies for push_pointer_back_to_free_Q
          // done: WAR dependencies for push_pointer_back_to_free_Q
          // end:  			$volatile push_pointer_back_to_free_Q := (NOT_u1_u1_2120_2120_delayed_4_0 & transmitted_flag) $buffering 1
          // start:  			pkt_pointer_2131_delayed_4_0 := pkt_pointer $buffering 4 $cut_through // bits of buffering = 128. 
          //  file nic.linked.opt.aa, line 813
          $T[assign_stmt_2158_sample_start_] 
          $T[assign_stmt_2158_sample_completed_] 
          $T[assign_stmt_2158_update_start_] 
          $T[assign_stmt_2158_update_completed_] 
          // Source expression
          // pkt_pointer
          // Target expression
          // (as target) pkt_pointer_2131_delayed_4_0
          // both source and target are implicit: use interlock 
          // Interlock 
          ;;[assign_stmt_2158_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          ;;[assign_stmt_2158_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          assign_stmt_2158_sample_start_ &-> (assign_stmt_2158_Sample)
          assign_stmt_2158_sample_completed_ <-& (assign_stmt_2158_Sample)
          assign_stmt_2158_sample_completed_ &-> ($null)
          assign_stmt_2158_update_start_ &-> (assign_stmt_2158_Update)
          assign_stmt_2158_update_completed_ <-& (assign_stmt_2158_Update)
          // start: Forward dependencies from pkt_pointer to transition assign_stmt_2158_sample_start_
          assign_stmt_2158_sample_start_ <-& (call_stmt_2132_update_completed_)
          // done: Forward dependencies from pkt_pointer to transition assign_stmt_2158_sample_start_
          // RAW reenables for pkt_pointer
          call_stmt_2132_update_start_ o<-& (assign_stmt_2158_sample_completed_ 0)
          // self-release: 
          assign_stmt_2158_sample_start_ o<-& (assign_stmt_2158_sample_completed_ 1)
          $null &-> (assign_stmt_2158_update_start_)
          assign_stmt_2158_update_start_ o<-& (assign_stmt_2158_update_completed_ 0)
          // start: WAR dependencies for pkt_pointer_2131_delayed_4_0
          // done: WAR dependencies for pkt_pointer_2131_delayed_4_0
          // end:  			pkt_pointer_2131_delayed_4_0 := pkt_pointer $buffering 4 $cut_through // bits of buffering = 128. 
          // start: 			$guard (push_pointer_back_to_free_Q) $call pushIntoQueue (($bitcast ($uint<1>) _b1  ) FREE_Q pkt_pointer_2131_delayed_4_0 ) (push_status ) 
          //  file nic.linked.opt.aa, line 814
          $T[call_stmt_2165_sample_start_] 
          $T[call_stmt_2165_sample_completed_] 
          $T[call_stmt_2165_update_start_] 
          $T[call_stmt_2165_update_completed_] 
          // Guard expression
          // push_pointer_back_to_free_Q
          // start: Forward dependencies from push_pointer_back_to_free_Q to transition call_stmt_2165_sample_start_
          call_stmt_2165_sample_start_ <-& (NOT_u1_u1_2146_update_completed_)
          call_stmt_2165_sample_start_ <-& (call_stmt_2136_update_completed_)
          // done: Forward dependencies from push_pointer_back_to_free_Q to transition call_stmt_2165_sample_start_
          // RAW reenables for push_pointer_back_to_free_Q
          NOT_u1_u1_2146_update_start_ o<-& (call_stmt_2165_sample_completed_ 0)
          call_stmt_2136_update_start_ o<-& (call_stmt_2165_sample_completed_ 0)
          // Call input argument 0
          // Call input argument 1
          // FREE_Q
          // Call input argument 2
          // pkt_pointer_2131_delayed_4_0
          // start: Forward dependencies from FREE_Q to transition call_stmt_2165_sample_start_
          // special case... expr is signal read, which does not involve control..
          // RAW reenables for FREE_Q
          // start: Forward dependencies from pkt_pointer_2131_delayed_4_0 to transition call_stmt_2165_sample_start_
          call_stmt_2165_sample_start_ <-& (assign_stmt_2158_update_completed_)
          // done: Forward dependencies from pkt_pointer_2131_delayed_4_0 to transition call_stmt_2165_sample_start_
          // RAW reenables for pkt_pointer_2131_delayed_4_0
          assign_stmt_2158_update_start_ o<-& (call_stmt_2165_sample_completed_ 0)
          ;;[call_stmt_2165_Sample] 
          {
            $T [crr] $T [cra] 
          }
          ;;[call_stmt_2165_Update] 
          {
            $T [ccr] $T [cca] 
          }
          call_stmt_2165_sample_start_ &-> (call_stmt_2165_Sample)
          call_stmt_2165_sample_completed_ <-& (call_stmt_2165_Sample)
          call_stmt_2165_sample_completed_ &-> ($null)
          call_stmt_2165_update_start_ &-> (call_stmt_2165_Update)
          call_stmt_2165_update_completed_ <-& (call_stmt_2165_Update)
          // Call output argument 0
          // (as target) push_status
          // self-release: 
          call_stmt_2165_sample_start_ o<-& (call_stmt_2165_sample_completed_ 1)
          $null &-> (call_stmt_2165_update_start_)
          call_stmt_2165_update_start_ o<-& (call_stmt_2165_update_completed_ 0)
          // start: WAR dependencies for push_status
          // done: WAR dependencies for push_status
          // end: 			$guard (push_pointer_back_to_free_Q) $call pushIntoQueue (($bitcast ($uint<1>) _b1  ) FREE_Q pkt_pointer_2131_delayed_4_0 ) (push_status ) 
          // start:  			count_2144_delayed_14_0 := count $buffering 14 $cut_through // bits of buffering = 448. 
          //  file nic.linked.opt.aa, line 816
          $T[assign_stmt_2171_sample_start_] 
          $T[assign_stmt_2171_sample_completed_] 
          $T[assign_stmt_2171_update_start_] 
          $T[assign_stmt_2171_update_completed_] 
          // Source expression
          // count
          // Target expression
          // (as target) count_2144_delayed_14_0
          // both source and target are implicit: use interlock 
          // Interlock 
          ;;[assign_stmt_2171_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          ;;[assign_stmt_2171_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          assign_stmt_2171_sample_start_ &-> (assign_stmt_2171_Sample)
          assign_stmt_2171_sample_completed_ <-& (assign_stmt_2171_Sample)
          assign_stmt_2171_sample_completed_ &-> ($null)
          assign_stmt_2171_update_start_ &-> (assign_stmt_2171_Update)
          assign_stmt_2171_update_completed_ <-& (assign_stmt_2171_Update)
          // start: Forward dependencies from count to transition assign_stmt_2171_sample_start_
          assign_stmt_2171_sample_start_ <-& (phi_stmt_2121_update_completed_)
          // done: Forward dependencies from count to transition assign_stmt_2171_sample_start_
          // RAW reenables for count
          phi_stmt_2121_update_start_ o<-& (assign_stmt_2171_sample_completed_ 0)
          // self-release: 
          assign_stmt_2171_sample_start_ o<-& (assign_stmt_2171_sample_completed_ 1)
          $null &-> (assign_stmt_2171_update_start_)
          assign_stmt_2171_update_start_ o<-& (assign_stmt_2171_update_completed_ 0)
          // start: WAR dependencies for count_2144_delayed_14_0
          // done: WAR dependencies for count_2144_delayed_14_0
          // end:  			count_2144_delayed_14_0 := count $buffering 14 $cut_through // bits of buffering = 448. 
          // start: 			$guard (push_pointer_back_to_free_Q) $call AccessRegister (($bitcast ($uint<1>) _b0  ) ( ~ ($bitcast ($uint<4>) _b0  ) ) 21  count_2144_delayed_14_0 ) (ignore_resp ) 
          //  file nic.linked.opt.aa, line 817
          $T[call_stmt_2181_sample_start_] 
          $T[call_stmt_2181_sample_completed_] 
          $T[call_stmt_2181_update_start_] 
          $T[call_stmt_2181_update_completed_] 
          // Guard expression
          // push_pointer_back_to_free_Q
          // start: Forward dependencies from push_pointer_back_to_free_Q to transition call_stmt_2181_sample_start_
          call_stmt_2181_sample_start_ <-& (NOT_u1_u1_2146_update_completed_)
          call_stmt_2181_sample_start_ <-& (call_stmt_2136_update_completed_)
          // done: Forward dependencies from push_pointer_back_to_free_Q to transition call_stmt_2181_sample_start_
          // RAW reenables for push_pointer_back_to_free_Q
          NOT_u1_u1_2146_update_start_ o<-& (call_stmt_2181_sample_completed_ 0)
          call_stmt_2136_update_start_ o<-& (call_stmt_2181_sample_completed_ 0)
          // Call input argument 0
          // Call input argument 1
          // Call input argument 2
          // Call input argument 3
          // count_2144_delayed_14_0
          // start: Forward dependencies from count_2144_delayed_14_0 to transition call_stmt_2181_sample_start_
          call_stmt_2181_sample_start_ <-& (assign_stmt_2171_update_completed_)
          // done: Forward dependencies from count_2144_delayed_14_0 to transition call_stmt_2181_sample_start_
          // RAW reenables for count_2144_delayed_14_0
          assign_stmt_2171_update_start_ o<-& (call_stmt_2181_sample_completed_ 0)
          ;;[call_stmt_2181_Sample] 
          {
            $T [crr] $T [cra] 
          }
          ;;[call_stmt_2181_Update] 
          {
            $T [ccr] $T [cca] 
          }
          call_stmt_2181_sample_start_ &-> (call_stmt_2181_Sample)
          call_stmt_2181_sample_completed_ <-& (call_stmt_2181_Sample)
          call_stmt_2181_sample_completed_ &-> ($null)
          call_stmt_2181_update_start_ &-> (call_stmt_2181_Update)
          call_stmt_2181_update_completed_ <-& (call_stmt_2181_Update)
          // Call output argument 0
          // (as target) ignore_resp
          // self-release: 
          call_stmt_2181_sample_start_ o<-& (call_stmt_2181_sample_completed_ 1)
          $null &-> (call_stmt_2181_update_start_)
          call_stmt_2181_update_start_ o<-& (call_stmt_2181_update_completed_ 0)
          // start: WAR dependencies for ignore_resp
          // done: WAR dependencies for ignore_resp
          // end: 			$guard (push_pointer_back_to_free_Q) $call AccessRegister (($bitcast ($uint<1>) _b0  ) ( ~ ($bitcast ($uint<4>) _b0  ) ) 21  count_2144_delayed_14_0 ) (ignore_resp ) 
          // start:  			count_2152_delayed_14_0 := count $buffering 14 $cut_through // bits of buffering = 448. 
          //  file nic.linked.opt.aa, line 818
          $T[assign_stmt_2184_sample_start_] 
          $T[assign_stmt_2184_sample_completed_] 
          $T[assign_stmt_2184_update_start_] 
          $T[assign_stmt_2184_update_completed_] 
          // Source expression
          // count
          // Target expression
          // (as target) count_2152_delayed_14_0
          // both source and target are implicit: use interlock 
          // Interlock 
          ;;[assign_stmt_2184_Sample] 
          {
            $T [req] $T [ack] // interlock-sample.
          }
          ;;[assign_stmt_2184_Update] 
          {
            $T [req] $T [ack] // interlock-update.
          }
          assign_stmt_2184_sample_start_ &-> (assign_stmt_2184_Sample)
          assign_stmt_2184_sample_completed_ <-& (assign_stmt_2184_Sample)
          assign_stmt_2184_sample_completed_ &-> ($null)
          assign_stmt_2184_update_start_ &-> (assign_stmt_2184_Update)
          assign_stmt_2184_update_completed_ <-& (assign_stmt_2184_Update)
          // start: Forward dependencies from count to transition assign_stmt_2184_sample_start_
          assign_stmt_2184_sample_start_ <-& (phi_stmt_2121_update_completed_)
          // done: Forward dependencies from count to transition assign_stmt_2184_sample_start_
          // RAW reenables for count
          phi_stmt_2121_update_start_ o<-& (assign_stmt_2184_sample_completed_ 0)
          // self-release: 
          assign_stmt_2184_sample_start_ o<-& (assign_stmt_2184_sample_completed_ 1)
          $null &-> (assign_stmt_2184_update_start_)
          assign_stmt_2184_update_start_ o<-& (assign_stmt_2184_update_completed_ 0)
          // start: WAR dependencies for count_2152_delayed_14_0
          // done: WAR dependencies for count_2152_delayed_14_0
          // end:  			count_2152_delayed_14_0 := count $buffering 14 $cut_through // bits of buffering = 448. 
          // start:  			ADD_u32_u32_2151_2151_delayed_14_0 := (count + 1 ) $buffering 14 $cut_through // bits of buffering = 448. 
          //  file nic.linked.opt.aa, line 819
          // Source expression
          // (count + 1 )
          $T[ADD_u32_u32_2188_sample_start_] 
          $T[ADD_u32_u32_2188_sample_completed_] 
          $T[ADD_u32_u32_2188_update_start_] 
          $T[ADD_u32_u32_2188_update_completed_] 
          // count
          // start: Forward dependencies from count to transition ADD_u32_u32_2188_sample_start_
          ADD_u32_u32_2188_sample_start_ <-& (phi_stmt_2121_update_completed_)
          // done: Forward dependencies from count to transition ADD_u32_u32_2188_sample_start_
          ;;[ADD_u32_u32_2188_Sample] 
          {
            // binary expression 
            $T [rr] $T [ra]  // (split) binary operation 
          }
          ;;[ADD_u32_u32_2188_Update] 
          {
            // binary expression 
            $T [cr] $T [ca] // (split) binary operation 
          }
          ADD_u32_u32_2188_sample_start_ &-> (ADD_u32_u32_2188_Sample)
          ADD_u32_u32_2188_sample_completed_ <-& (ADD_u32_u32_2188_Sample)
          ADD_u32_u32_2188_sample_completed_ &-> ($null)
          ADD_u32_u32_2188_update_start_ &-> (ADD_u32_u32_2188_Update)
          ADD_u32_u32_2188_update_completed_ <-& (ADD_u32_u32_2188_Update)
          // RAW reenables for count
          phi_stmt_2121_update_start_ o<-& (ADD_u32_u32_2188_sample_completed_ 0)
          // self-release: 
          ADD_u32_u32_2188_sample_start_ o<-& (ADD_u32_u32_2188_sample_completed_ 1)
          $null &-> (ADD_u32_u32_2188_update_start_)
          ADD_u32_u32_2188_update_start_ o<-& (ADD_u32_u32_2188_update_completed_ 0)
          // Target expression
          // (as target) ADD_u32_u32_2151_2151_delayed_14_0
          // start: WAR dependencies for ADD_u32_u32_2151_2151_delayed_14_0
          // done: WAR dependencies for ADD_u32_u32_2151_2151_delayed_14_0
          // end:  			ADD_u32_u32_2151_2151_delayed_14_0 := (count + 1 ) $buffering 14 $cut_through // bits of buffering = 448. 
          // start: WAR dependencies for ncount
          // WAR dependency: Read: ncount before Write: 			$volatile ncount := ( $mux push_pointer_back_to_free_Q ADD_u32_u32_2151_2151_delayed_14_0  count_2152_delayed_14_0 )  $buffering 1
          NOT_u1_u1_2146_update_start_ <-& (phi_stmt_2121_sample_completed_)
          phi_stmt_2121_sample_start_ o<-& (NOT_u1_u1_2146_update_completed_ 0)
          // WAR dependency: release  Read: ncount with Write: 			NOT_u1_u1_2120_2120_delayed_4_0 := ( ~ tx_flag ) $buffering 4 $cut_through // bits of buffering = 4. 
          call_stmt_2136_update_start_ <-& (phi_stmt_2121_sample_completed_)
          phi_stmt_2121_sample_start_ o<-& (call_stmt_2136_update_completed_ 0)
          // WAR dependency: release  Read: ncount with Write: 			$guard (~tx_flag) $call transmitPacket (pkt_pointer ) (transmitted_flag ) 
          assign_stmt_2184_update_start_ <-& (phi_stmt_2121_sample_completed_)
          phi_stmt_2121_sample_start_ o<-& (assign_stmt_2184_update_completed_ 0)
          // WAR dependency: release  Read: ncount with Write: 			count_2152_delayed_14_0 := count $buffering 14 $cut_through // bits of buffering = 448. 
          ADD_u32_u32_2188_update_start_ <-& (phi_stmt_2121_sample_completed_)
          phi_stmt_2121_sample_start_ o<-& (ADD_u32_u32_2188_update_completed_ 0)
          // WAR dependency: release  Read: ncount with Write: 			ADD_u32_u32_2151_2151_delayed_14_0 := (count + 1 ) $buffering 14 $cut_through // bits of buffering = 448. 
          // done: WAR dependencies for ncount
          // start:  			$volatile ncount := ( $mux push_pointer_back_to_free_Q ADD_u32_u32_2151_2151_delayed_14_0  count_2152_delayed_14_0 )  $buffering 1
          //  file nic.linked.opt.aa, line 820
          // volatile! 
          // Source expression
          // ( $mux push_pointer_back_to_free_Q ADD_u32_u32_2151_2151_delayed_14_0  count_2152_delayed_14_0 ) 
          // push_pointer_back_to_free_Q
          // ADD_u32_u32_2151_2151_delayed_14_0
          // count_2152_delayed_14_0
          // Target expression
          // (as target) ncount
          // start: WAR dependencies for ncount
          // WAR dependency: Read: ncount before Write: 			$volatile ncount := ( $mux push_pointer_back_to_free_Q ADD_u32_u32_2151_2151_delayed_14_0  count_2152_delayed_14_0 )  $buffering 1
          NOT_u1_u1_2146_update_start_ <-& (phi_stmt_2121_sample_completed_)
          phi_stmt_2121_sample_start_ o<-& (NOT_u1_u1_2146_update_completed_ 0)
          // WAR dependency: release  Read: ncount with Write: 			NOT_u1_u1_2120_2120_delayed_4_0 := ( ~ tx_flag ) $buffering 4 $cut_through // bits of buffering = 4. 
          call_stmt_2136_update_start_ <-& (phi_stmt_2121_sample_completed_)
          phi_stmt_2121_sample_start_ o<-& (call_stmt_2136_update_completed_ 0)
          // WAR dependency: release  Read: ncount with Write: 			$guard (~tx_flag) $call transmitPacket (pkt_pointer ) (transmitted_flag )  $buffering 2
          assign_stmt_2184_update_start_ <-& (phi_stmt_2121_sample_completed_)
          phi_stmt_2121_sample_start_ o<-& (assign_stmt_2184_update_completed_ 0)
          // WAR dependency: release  Read: ncount with Write: 			count_2152_delayed_14_0 := count $buffering 14 $cut_through // bits of buffering = 448. 
          ADD_u32_u32_2188_update_start_ <-& (phi_stmt_2121_sample_completed_)
          phi_stmt_2121_sample_start_ o<-& (ADD_u32_u32_2188_update_completed_ 0)
          // WAR dependency: release  Read: ncount with Write: 			ADD_u32_u32_2151_2151_delayed_14_0 := (count + 1 ) $buffering 14 $cut_through // bits of buffering = 448. 
          // done: WAR dependencies for ncount
          // end:  			$volatile ncount := ( $mux push_pointer_back_to_free_Q ADD_u32_u32_2151_2151_delayed_14_0  count_2152_delayed_14_0 )  $buffering 1
          // start:  			LAST_READ_TX_QUEUE_INDEX := tx_q_index $buffering 1// bits of buffering = 6. 
          //  file nic.linked.opt.aa, line 822
          // Source expression
          // tx_q_index
          // Target expression
          // (as target) LAST_READ_TX_QUEUE_INDEX
          $T[WPIPE_LAST_READ_TX_QUEUE_INDEX_2198_sample_start_] 
          $T[WPIPE_LAST_READ_TX_QUEUE_INDEX_2198_sample_completed_] 
          $T[WPIPE_LAST_READ_TX_QUEUE_INDEX_2198_update_start_] 
          $T[WPIPE_LAST_READ_TX_QUEUE_INDEX_2198_update_completed_] 
          ;;[WPIPE_LAST_READ_TX_QUEUE_INDEX_2198_Sample] 
          {
            // pipe write sample-start LAST_READ_TX_QUEUE_INDEX
            $T [req] $T [ack] 
          }
          ;;[WPIPE_LAST_READ_TX_QUEUE_INDEX_2198_Update] 
          {
            // pipe write update (complete) LAST_READ_TX_QUEUE_INDEX
            $T [req] $T [ack] 
          }
          WPIPE_LAST_READ_TX_QUEUE_INDEX_2198_sample_start_ &-> (WPIPE_LAST_READ_TX_QUEUE_INDEX_2198_Sample)
          WPIPE_LAST_READ_TX_QUEUE_INDEX_2198_sample_completed_ <-& (WPIPE_LAST_READ_TX_QUEUE_INDEX_2198_Sample)
          WPIPE_LAST_READ_TX_QUEUE_INDEX_2198_update_start_ <-& (WPIPE_LAST_READ_TX_QUEUE_INDEX_2198_sample_completed_)
          WPIPE_LAST_READ_TX_QUEUE_INDEX_2198_update_start_ &-> (WPIPE_LAST_READ_TX_QUEUE_INDEX_2198_Update)
          WPIPE_LAST_READ_TX_QUEUE_INDEX_2198_update_completed_ <-& (WPIPE_LAST_READ_TX_QUEUE_INDEX_2198_Update)
          WPIPE_LAST_READ_TX_QUEUE_INDEX_2198_sample_start_ o<-& (WPIPE_LAST_READ_TX_QUEUE_INDEX_2198_update_completed_ 0)
          // start: Forward dependencies from tx_q_index to transition WPIPE_LAST_READ_TX_QUEUE_INDEX_2198_sample_start_
          WPIPE_LAST_READ_TX_QUEUE_INDEX_2198_sample_start_ <-& (phi_stmt_2111_update_completed_)
          // done: Forward dependencies from tx_q_index to transition WPIPE_LAST_READ_TX_QUEUE_INDEX_2198_sample_start_
          // RAW reenables for tx_q_index
          phi_stmt_2111_update_start_ o<-& (WPIPE_LAST_READ_TX_QUEUE_INDEX_2198_sample_completed_ 0)
          // end:  			LAST_READ_TX_QUEUE_INDEX := tx_q_index $buffering 1// bits of buffering = 6. 
          // (CONTROL_REGISTER [] 0 )
          // CONTROL_REGISTER
          $T [loop_body_delay_to_condition_start] $delay
          loop_body_start &-> (loop_body_delay_to_condition_start)
          loop_body_delay_to_condition_start &-> (condition_evaluated)
          // start: Forward dependencies from (CONTROL_REGISTER [] 0 ) to transition condition_evaluated
          // non-constant expression which depends only on signals/constants?
          // done: Forward dependencies from (CONTROL_REGISTER [] 0 ) to transition condition_evaluated
          condition_evaluated &-> ($null)
          // load-store dependencies..
          // pipe read/write dependencies for pipe LAST_READ_TX_QUEUE_INDEX
          // read-dependencies for pipe LAST_READ_TX_QUEUE_INDEX
          // write-dependencies for pipe LAST_READ_TX_QUEUE_INDEX
          // signal write dependencies for LAST_READ_TX_QUEUE_INDEX
          // pipe read/write dependencies for pipe MEMORY_TO_NIC_RESPONSE
          // read-dependencies for pipe MEMORY_TO_NIC_RESPONSE
          call_stmt_2136_sample_start_ <-& (call_stmt_2132_update_completed_)
          call_stmt_2165_sample_start_ <-& (call_stmt_2136_update_completed_)
          // ring dependency in pipeline.
          call_stmt_2132_update_start_ o<-& (call_stmt_2165_update_completed_ 0)
          // write-dependencies for pipe MEMORY_TO_NIC_RESPONSE
          // signal write dependencies for MEMORY_TO_NIC_RESPONSE
          // pipe read/write dependencies for pipe NIC_REQUEST_REGISTER_ACCESS_PIPE
          // read-dependencies for pipe NIC_REQUEST_REGISTER_ACCESS_PIPE
          // write-dependencies for pipe NIC_REQUEST_REGISTER_ACCESS_PIPE
          call_stmt_2181_sample_start_ <-& (call_stmt_2132_update_completed_)
          // ring dependency in pipeline.
          call_stmt_2132_sample_start_ o<-& (call_stmt_2181_update_completed_ 0)
          // signal write dependencies for NIC_REQUEST_REGISTER_ACCESS_PIPE
          // pipe read/write dependencies for pipe NIC_RESPONSE_REGISTER_ACCESS_PIPE
          // read-dependencies for pipe NIC_RESPONSE_REGISTER_ACCESS_PIPE
          call_stmt_2181_sample_start_ <-& (call_stmt_2132_update_completed_)
          // ring dependency in pipeline.
          call_stmt_2132_update_start_ o<-& (call_stmt_2181_update_completed_ 0)
          // write-dependencies for pipe NIC_RESPONSE_REGISTER_ACCESS_PIPE
          // signal write dependencies for NIC_RESPONSE_REGISTER_ACCESS_PIPE
          // pipe read/write dependencies for pipe NIC_TO_MEMORY_REQUEST
          // read-dependencies for pipe NIC_TO_MEMORY_REQUEST
          // write-dependencies for pipe NIC_TO_MEMORY_REQUEST
          call_stmt_2136_sample_start_ <-& (call_stmt_2132_update_completed_)
          call_stmt_2165_sample_start_ <-& (call_stmt_2136_update_completed_)
          // ring dependency in pipeline.
          call_stmt_2132_sample_start_ o<-& (call_stmt_2165_update_completed_ 0)
          // signal write dependencies for NIC_TO_MEMORY_REQUEST
          // pipe read/write dependencies for pipe nic_to_mac_transmit_pipe
          // read-dependencies for pipe nic_to_mac_transmit_pipe
          // write-dependencies for pipe nic_to_mac_transmit_pipe
          // signal write dependencies for nic_to_mac_transmit_pipe
        }
        ( first_time_through_loop_body  back_edge_to_loop_body) 
        ( condition_evaluated )
        ;; [loop_exit] 
        {
          $T [ack] 
        }
        ;; [loop_taken] 
        {
          $T [ack] 
        }
        do_while_stmt_2109__entry__ <-| ($entry)
        loop_body_done <-| ( do_while_stmt_2109_loop_body ) 
        condition_done |-> (loop_exit loop_taken)
        do_while_stmt_2109__exit__ |-> ($exit)
        $bind condition_done <= do_while_stmt_2109_loop_body : condition_evaluated
        $bind do_while_stmt_2109__entry__  => do_while_stmt_2109_loop_body : first_time_through_loop_body 
        $bind loop_back  => do_while_stmt_2109_loop_body : back_edge_to_loop_body 
        $terminate (loop_exit loop_taken loop_body_done) (loop_back do_while_stmt_2109__exit__)
      }
      do_while_stmt_2109__entry__ |-> (do_while_stmt_2109)
      do_while_stmt_2109__exit__ <-| (do_while_stmt_2109)
      // control-path for merge  
      //  file nic.linked.opt.aa, line 791
      ;;[merge_stmt_2100_dead_link] 
      {
        $T [dead_transition] $dead 
      }
      merge_stmt_2100__entry__ |-> (merge_stmt_2100_dead_link)
      merge_stmt_2100__exit__ <-| (merge_stmt_2100_dead_link)
      //---------------------   merge statement  file nic.linked.opt.aa, line 791  --------------------------
      ||[merge_stmt_2100__entry___PhiReq] 
      {
        // no phi statements in merge..
      }
      merge_stmt_2100__entry__ |-> (merge_stmt_2100__entry___PhiReq)
      ||[disable_loopback_PhiReq] 
      {
        // no phi statements in merge..
      }
      disable_loopback |-> (disable_loopback_PhiReq)
      ||[not_enabled_yet_loopback_PhiReq] 
      {
        // no phi statements in merge..
      }
      not_enabled_yet_loopback |-> (not_enabled_yet_loopback_PhiReq)
      $P [merge_stmt_2100_PhiReqMerge] 
      merge_stmt_2100_PhiReqMerge <-| ( merge_stmt_2100__entry___PhiReq  disable_loopback_PhiReq  not_enabled_yet_loopback_PhiReq )
      ||[merge_stmt_2100_PhiAck] 
      {
        $T [dummy] 
      }
      merge_stmt_2100_PhiReqMerge |-> (merge_stmt_2100_PhiAck)
      merge_stmt_2100__exit__  <-| (merge_stmt_2100_PhiAck)
      //---------------------  end of merge statement  file nic.linked.opt.aa, line 791  --------------------------
      merge_stmt_2100__entry__ <-| (branch_block_stmt_2099__entry__)
      if_stmt_2101__entry__ <-| (merge_stmt_2100__exit__)
      do_while_stmt_2109__entry__ <-| (if_stmt_2101__exit__)
      disable_loopback <-| (do_while_stmt_2109__exit__)
    }
  }
  // end control-path
  $DP 
  {
    // begin data-path 
    // constant-object-declarations for block %transmitEngineDaemon%main%
    //  file nic.linked.opt.aa, line 791
    // constant-object-declarations for block %transmitEngineDaemon%main%
    //  file nic.linked.opt.aa, line 799
    // constant-object-declarations for block %transmitEngineDaemon%main
    //  file nic.linked.opt.aa, line 789
    // constant-object-declarations for block %transmitEngineDaemon
    //  file nic.linked.opt.aa, line 783
    // 0 
    $constant $W[konst_2097_wire_constant] : $int<6> := _b000000// 0
    // constant-declarations for block %transmitEngineDaemon%main
    //  file nic.linked.opt.aa, line 789
    // constant-declarations for block %transmitEngineDaemon%main%
    //  file nic.linked.opt.aa, line 791
    // if-statement  
    //  file nic.linked.opt.aa, line -1575179400
    // 0 
    $constant $W[konst_2103_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // do-while statement  
    //  file nic.linked.opt.aa, line 797
    // 0 
    $constant $W[konst_2203_wire_constant] : $int<32> := _b00000000000000000000000000000000// 0
    // constant-declarations for block %transmitEngineDaemon%main%
    //  file nic.linked.opt.aa, line 799
    // constant-declarations for phi:  			$phi tx_q_index := 			  ((LAST_READ_TX_QUEUE_INDEX + 1 ) & ($bitcast ($uint<6>) (NUMBER_OF_SERVERS - 1 ) )) $on   $entry ,   $loopback 
    // type of target is $uint<6>
    //  file nic.linked.opt.aa, line 800
    // 1 
    $constant $W[konst_2114_wire_constant] : $int<6> := _b000001// 1
    // 1 
    $constant $W[konst_2117_wire_constant] : $int<32> := _b00000000000000000000000000000001// 1
    // constant-declarations for phi:  			$phi count := 			  ($bitcast ($uint<32>) _b1  ) $on   $entry 			  ncount $on   $loopback 
    // type of target is $uint<32>
    //  file nic.linked.opt.aa, line 802
    // ($bitcast ($uint<32>) _b1  )
    $constant $W[type_cast_2125_wire_constant] : $int<32> := _b00000000000000000000000000000001// 1
    // 			$call getTxPacketPointerFromServer (tx_q_index ) (pkt_pointer tx_flag ) 
    //  file nic.linked.opt.aa, line 806
    // 			$guard (~tx_flag) $call transmitPacket (pkt_pointer ) (transmitted_flag )  $buffering 2
    //  file nic.linked.opt.aa, line 807
    // 			$guard (push_pointer_back_to_free_Q) $call pushIntoQueue (($bitcast ($uint<1>) _b1  ) FREE_Q pkt_pointer_2131_delayed_4_0 ) (push_status ) 
    //  file nic.linked.opt.aa, line 814
    // ($bitcast ($uint<1>) _b1  )
    $constant $W[type_cast_2161_wire_constant] : $int<1> := _b1// 1
    // 			$guard (push_pointer_back_to_free_Q) $call AccessRegister (($bitcast ($uint<1>) _b0  ) ( ~ ($bitcast ($uint<4>) _b0  ) ) 21  count_2144_delayed_14_0 ) (ignore_resp ) 
    //  file nic.linked.opt.aa, line 817
    // ($bitcast ($uint<1>) _b0  )
    $constant $W[type_cast_2174_wire_constant] : $int<1> := _b0// 0
    // ( ~ ($bitcast ($uint<4>) _b0  ) )
    $constant $W[NOT_u4_u4_2177_wire_constant] : $int<4> := _b1111// -1
    // 21 
    $constant $W[konst_2178_wire_constant] : $int<6> := _b010101// 21
    // 1 
    $constant $W[konst_2187_wire_constant] : $int<32> := _b00000000000000000000000000000001// 1
    // ( $mux push_pointer_back_to_free_Q ADD_u32_u32_2151_2151_delayed_14_0  count_2152_delayed_14_0 ) 
    // 	LAST_READ_TX_QUEUE_INDEX := 0  $buffering 1// bits of buffering = 6. 
    //  file nic.linked.opt.aa, line 788
    // LAST_READ_TX_QUEUE_INDEX
    // block %transmitEngineDaemon%main
    //  file nic.linked.opt.aa, line 789
    // if statement  
    //  file nic.linked.opt.aa, line -1575179400
    // CONTROL_REGISTER
    $W[RPIPE_CONTROL_REGISTER_2102_wire] : $int<32>
    // (CONTROL_REGISTER [] 0 )
    $intermediate $W[BITSEL_u32_u1_2104_wire] : $int<1>
    // ( ~ (CONTROL_REGISTER [] 0 ) )
    $intermediate $W[NOT_u1_u1_2105_wire] : $int<1>
    // do-while statement  
    //  file nic.linked.opt.aa, line 797
    // CONTROL_REGISTER
    $W[RPIPE_CONTROL_REGISTER_2202_wire] : $int<32>
    // (CONTROL_REGISTER [] 0 )
    $intermediate $W[BITSEL_u32_u1_2204_wire] : $int<1>
    // merge-statement  
    //  file nic.linked.opt.aa, line 799
    // 			$phi tx_q_index := 			  ((LAST_READ_TX_QUEUE_INDEX + 1 ) & ($bitcast ($uint<6>) (NUMBER_OF_SERVERS - 1 ) )) $on   $entry ,   $loopback 
    // type of target is $uint<6>
    //  file nic.linked.opt.aa, line 800
    // LAST_READ_TX_QUEUE_INDEX
    $W[RPIPE_LAST_READ_TX_QUEUE_INDEX_2113_wire] : $int<6>
    // (LAST_READ_TX_QUEUE_INDEX + 1 )
    $intermediate $W[ADD_u6_u6_2115_wire] : $int<6>
    // NUMBER_OF_SERVERS
    $W[RPIPE_NUMBER_OF_SERVERS_2116_wire] : $int<32>
    // (NUMBER_OF_SERVERS - 1 )
    $intermediate $W[SUB_u32_u32_2118_wire] : $int<32>
    // ($bitcast ($uint<6>) (NUMBER_OF_SERVERS - 1 ) )
    $intermediate $W[type_cast_2119_wire] : $int<6>
    // ((LAST_READ_TX_QUEUE_INDEX + 1 ) & ($bitcast ($uint<6>) (NUMBER_OF_SERVERS - 1 ) ))
    $intermediate $W[AND_u6_u6_2120_wire] : $int<6>
    // tx_q_index
    $W[tx_q_index_2111] : $int<6>
    // 			$phi count := 			  ($bitcast ($uint<32>) _b1  ) $on   $entry 			  ncount $on   $loopback 
    // type of target is $uint<32>
    //  file nic.linked.opt.aa, line 802
    $W[ncount_2195_2123_buffered] : $int<32>
    // count
    $W[count_2121] : $int<32>
    // 			$call getTxPacketPointerFromServer (tx_q_index ) (pkt_pointer tx_flag ) 
    //  file nic.linked.opt.aa, line 806
    // pkt_pointer
    $W[pkt_pointer_2132] : $int<32>
    // tx_flag
    $W[tx_flag_2132] : $int<1>
    // 			$guard (~tx_flag) $call transmitPacket (pkt_pointer ) (transmitted_flag )  $buffering 2
    //  file nic.linked.opt.aa, line 807
    // transmitted_flag
    $W[transmitted_flag_2136] : $int<1>
    // 			NOT_u1_u1_2120_2120_delayed_4_0 := ( ~ tx_flag ) $buffering 4 $cut_through // bits of buffering = 4. 
    //  file nic.linked.opt.aa, line 810
    // NOT_u1_u1_2120_2120_delayed_4_0
    $W[NOT_u1_u1_2120_2120_delayed_4_0_2147] : $int<1>
    // 			$volatile push_pointer_back_to_free_Q := (NOT_u1_u1_2120_2120_delayed_4_0 & transmitted_flag) $buffering 1
    //  file nic.linked.opt.aa, line 811
    // push_pointer_back_to_free_Q
    $W[push_pointer_back_to_free_Q_2152] : $int<1>
    // 			pkt_pointer_2131_delayed_4_0 := pkt_pointer $buffering 4 $cut_through // bits of buffering = 128. 
    //  file nic.linked.opt.aa, line 813
    // pkt_pointer_2131_delayed_4_0
    $W[pkt_pointer_2131_delayed_4_0_2158] : $int<32>
    // 			$guard (push_pointer_back_to_free_Q) $call pushIntoQueue (($bitcast ($uint<1>) _b1  ) FREE_Q pkt_pointer_2131_delayed_4_0 ) (push_status ) 
    //  file nic.linked.opt.aa, line 814
    // FREE_Q
    $W[RPIPE_FREE_Q_2162_wire] : $int<36>
    // push_status
    $W[push_status_2165] : $int<1>
    // 			count_2144_delayed_14_0 := count $buffering 14 $cut_through // bits of buffering = 448. 
    //  file nic.linked.opt.aa, line 816
    // count_2144_delayed_14_0
    $W[count_2144_delayed_14_0_2171] : $int<32>
    // 			$guard (push_pointer_back_to_free_Q) $call AccessRegister (($bitcast ($uint<1>) _b0  ) ( ~ ($bitcast ($uint<4>) _b0  ) ) 21  count_2144_delayed_14_0 ) (ignore_resp ) 
    //  file nic.linked.opt.aa, line 817
    // ignore_resp
    $W[ignore_resp_2181] : $int<32>
    // 			count_2152_delayed_14_0 := count $buffering 14 $cut_through // bits of buffering = 448. 
    //  file nic.linked.opt.aa, line 818
    // count_2152_delayed_14_0
    $W[count_2152_delayed_14_0_2184] : $int<32>
    // 			ADD_u32_u32_2151_2151_delayed_14_0 := (count + 1 ) $buffering 14 $cut_through // bits of buffering = 448. 
    //  file nic.linked.opt.aa, line 819
    // ADD_u32_u32_2151_2151_delayed_14_0
    $W[ADD_u32_u32_2151_2151_delayed_14_0_2189] : $int<32>
    // 			$volatile ncount := ( $mux push_pointer_back_to_free_Q ADD_u32_u32_2151_2151_delayed_14_0  count_2152_delayed_14_0 )  $buffering 1
    //  file nic.linked.opt.aa, line 820
    // ncount
    $W[ncount_2195] : $int<32>
    // 			LAST_READ_TX_QUEUE_INDEX := tx_q_index $buffering 1// bits of buffering = 6. 
    //  file nic.linked.opt.aa, line 822
    // LAST_READ_TX_QUEUE_INDEX
    // 	LAST_READ_TX_QUEUE_INDEX := 0  $buffering 1// bits of buffering = 6. 
    //  file nic.linked.opt.aa, line 788
    // LAST_READ_TX_QUEUE_INDEX
    $ioport $out [WPIPE_LAST_READ_TX_QUEUE_INDEX_2096_inst]  (konst_2097_wire_constant) (LAST_READ_TX_QUEUE_INDEX) 
    // datapath-instances for block %transmitEngineDaemon%main
    //  file nic.linked.opt.aa, line 789
    // datapath-instances for if  
    //  file nic.linked.opt.aa, line -1575179400
    // CONTROL_REGISTER
    $ioport $in [RPIPE_CONTROL_REGISTER_2102_inst] (CONTROL_REGISTER) (RPIPE_CONTROL_REGISTER_2102_wire) 
    $buffering $out RPIPE_CONTROL_REGISTER_2102_inst RPIPE_CONTROL_REGISTER_2102_wire 1
    // (CONTROL_REGISTER [] 0 )
    [][BITSEL_u32_u1_2104_inst] (RPIPE_CONTROL_REGISTER_2102_wire konst_2103_wire_constant) (BITSEL_u32_u1_2104_wire)   $flowthrough 
    $delay BITSEL_u32_u1_2104_inst 0
    // ( ~ (CONTROL_REGISTER [] 0 ) )
    ~ [NOT_u1_u1_2105_inst] (BITSEL_u32_u1_2104_wire) (NOT_u1_u1_2105_wire)   $flowthrough
    $delay NOT_u1_u1_2105_inst 0
    ==0? [if_stmt_2101_branch] (NOT_u1_u1_2105_wire)
    // datapath-instances for do-while  
    //  file nic.linked.opt.aa, line 797
    // CONTROL_REGISTER
    $ioport $in [RPIPE_CONTROL_REGISTER_2202_inst] (CONTROL_REGISTER) (RPIPE_CONTROL_REGISTER_2202_wire)  $fullrate 
    $buffering $out RPIPE_CONTROL_REGISTER_2202_inst RPIPE_CONTROL_REGISTER_2202_wire 1
    // (CONTROL_REGISTER [] 0 )
    [][BITSEL_u32_u1_2204_inst] (RPIPE_CONTROL_REGISTER_2202_wire konst_2203_wire_constant) (BITSEL_u32_u1_2204_wire)   $flowthrough 
    $delay BITSEL_u32_u1_2204_inst 0
    ==0? [do_while_stmt_2109_branch] (BITSEL_u32_u1_2204_wire)
    $flowthrough
    // data-path instances for merge  
    //  file nic.linked.opt.aa, line 799
    // 			$phi tx_q_index := 			  ((LAST_READ_TX_QUEUE_INDEX + 1 ) & ($bitcast ($uint<6>) (NUMBER_OF_SERVERS - 1 ) )) $on   $entry ,   $loopback 
    // type of target is $uint<6>
    //  file nic.linked.opt.aa, line 800
    // LAST_READ_TX_QUEUE_INDEX
    $ioport $in [RPIPE_LAST_READ_TX_QUEUE_INDEX_2113_inst] (LAST_READ_TX_QUEUE_INDEX) (RPIPE_LAST_READ_TX_QUEUE_INDEX_2113_wire)  $fullrate 
    $buffering $out RPIPE_LAST_READ_TX_QUEUE_INDEX_2113_inst RPIPE_LAST_READ_TX_QUEUE_INDEX_2113_wire 1
    // (LAST_READ_TX_QUEUE_INDEX + 1 )
    +[ADD_u6_u6_2115_inst] (RPIPE_LAST_READ_TX_QUEUE_INDEX_2113_wire konst_2114_wire_constant) (ADD_u6_u6_2115_wire)   $flowthrough 
    $delay ADD_u6_u6_2115_inst 0
    // NUMBER_OF_SERVERS
    $ioport $in [RPIPE_NUMBER_OF_SERVERS_2116_inst] (NUMBER_OF_SERVERS) (RPIPE_NUMBER_OF_SERVERS_2116_wire)  $fullrate 
    $buffering $out RPIPE_NUMBER_OF_SERVERS_2116_inst RPIPE_NUMBER_OF_SERVERS_2116_wire 1
    // (NUMBER_OF_SERVERS - 1 )
    -[SUB_u32_u32_2118_inst] (RPIPE_NUMBER_OF_SERVERS_2116_wire konst_2117_wire_constant) (SUB_u32_u32_2118_wire)   $flowthrough 
    $delay SUB_u32_u32_2118_inst 0
    // ($bitcast ($uint<6>) (NUMBER_OF_SERVERS - 1 ) )
    # := [type_cast_2119_inst] (SUB_u32_u32_2118_wire) (type_cast_2119_wire)   $flowthrough
    $delay type_cast_2119_inst 0
    // ((LAST_READ_TX_QUEUE_INDEX + 1 ) & ($bitcast ($uint<6>) (NUMBER_OF_SERVERS - 1 ) ))
    &[AND_u6_u6_2120_inst] (ADD_u6_u6_2115_wire type_cast_2119_wire) (AND_u6_u6_2120_wire)    $fullrate
    $buffering  $out AND_u6_u6_2120_inst AND_u6_u6_2120_wire 1
    $delay AND_u6_u6_2120_inst 1
    # := [ssrc_phi_stmt_2111] (AND_u6_u6_2120_wire) (tx_q_index_2111)    $flowthrough 
    // 			$phi count := 			  ($bitcast ($uint<32>) _b1  ) $on   $entry 			  ncount $on   $loopback 
    // type of target is $uint<32>
    //  file nic.linked.opt.aa, line 802
    # := [ncount_2195_2123_buf] (ncount_2195) (ncount_2195_2123_buffered)     $fullrate
    $buffering $out ncount_2195_2123_buf ncount_2195_2123_buffered  1
    # $phi [phi_stmt_2121] (ncount_2195_2123_buffered type_cast_2125_wire_constant) ( count_2121 ) $fullrate
    // $buffering  $out phi_stmt_2121 count_2121 2
    // 			$call getTxPacketPointerFromServer (tx_q_index ) (pkt_pointer tx_flag ) 
    //  file nic.linked.opt.aa, line 806
    $call [call_stmt_2132_call] $module getTxPacketPointerFromServer(tx_q_index_2111) (pkt_pointer_2132 tx_flag_2132)   $fullrate
    $delay call_stmt_2132_call 10
    $buffering  $in call_stmt_2132_call tx_q_index_2111 1
    $buffering  $out call_stmt_2132_call pkt_pointer_2132 1
    $buffering  $out call_stmt_2132_call tx_flag_2132 1
    // 			$guard (~tx_flag) $call transmitPacket (pkt_pointer ) (transmitted_flag )  $buffering 2
    //  file nic.linked.opt.aa, line 807
    $call [call_stmt_2136_call] $module transmitPacket(pkt_pointer_2132) (transmitted_flag_2136) $guard ( ~ tx_flag_2132 )   $fullrate
    $delay call_stmt_2136_call 4
    $buffering  $in call_stmt_2136_call pkt_pointer_2132 2
    $buffering  $out call_stmt_2136_call transmitted_flag_2136 2
    // 			NOT_u1_u1_2120_2120_delayed_4_0 := ( ~ tx_flag ) $buffering 4 $cut_through // bits of buffering = 4. 
    //  file nic.linked.opt.aa, line 810
    // ( ~ tx_flag )
    ~ [NOT_u1_u1_2146_inst] (tx_flag_2132) (NOT_u1_u1_2120_2120_delayed_4_0_2147)   $fullrate
    $buffering  $out NOT_u1_u1_2146_inst NOT_u1_u1_2120_2120_delayed_4_0_2147 4
    $delay NOT_u1_u1_2146_inst 1
    // 			$volatile push_pointer_back_to_free_Q := (NOT_u1_u1_2120_2120_delayed_4_0 & transmitted_flag) $buffering 1
    //  file nic.linked.opt.aa, line 811
    // (NOT_u1_u1_2120_2120_delayed_4_0 & transmitted_flag)
    &[AND_u1_u1_2151_inst] (NOT_u1_u1_2120_2120_delayed_4_0_2147 transmitted_flag_2136) (push_pointer_back_to_free_Q_2152)   $flowthrough 
    $delay AND_u1_u1_2151_inst 0
    // 			pkt_pointer_2131_delayed_4_0 := pkt_pointer $buffering 4 $cut_through // bits of buffering = 128. 
    //  file nic.linked.opt.aa, line 813
    # := [W_pkt_pointer_2131_delayed_4_0_2156_inst] (pkt_pointer_2132) (pkt_pointer_2131_delayed_4_0_2158)  $cut_through    $fullrate
    $buffering  $out W_pkt_pointer_2131_delayed_4_0_2156_inst pkt_pointer_2131_delayed_4_0_2158 4
    // 			$guard (push_pointer_back_to_free_Q) $call pushIntoQueue (($bitcast ($uint<1>) _b1  ) FREE_Q pkt_pointer_2131_delayed_4_0 ) (push_status ) 
    //  file nic.linked.opt.aa, line 814
    // FREE_Q
    $ioport $in [RPIPE_FREE_Q_2162_inst] (FREE_Q) (RPIPE_FREE_Q_2162_wire) $guard ( push_pointer_back_to_free_Q_2152 )  $fullrate 
    $buffering $out RPIPE_FREE_Q_2162_inst RPIPE_FREE_Q_2162_wire 1
    $call [call_stmt_2165_call] $module pushIntoQueue(type_cast_2161_wire_constant RPIPE_FREE_Q_2162_wire pkt_pointer_2131_delayed_4_0_2158) (push_status_2165) $guard ( push_pointer_back_to_free_Q_2152 )   $fullrate
    $delay call_stmt_2165_call 4
    $buffering  $in call_stmt_2165_call type_cast_2161_wire_constant 1
    $buffering  $in call_stmt_2165_call RPIPE_FREE_Q_2162_wire 1
    $buffering  $in call_stmt_2165_call pkt_pointer_2131_delayed_4_0_2158 1
    $buffering  $out call_stmt_2165_call push_status_2165 1
    // 			count_2144_delayed_14_0 := count $buffering 14 $cut_through // bits of buffering = 448. 
    //  file nic.linked.opt.aa, line 816
    # := [W_count_2144_delayed_14_0_2169_inst] (count_2121) (count_2144_delayed_14_0_2171)  $cut_through    $fullrate
    $buffering  $out W_count_2144_delayed_14_0_2169_inst count_2144_delayed_14_0_2171 14
    // 			$guard (push_pointer_back_to_free_Q) $call AccessRegister (($bitcast ($uint<1>) _b0  ) ( ~ ($bitcast ($uint<4>) _b0  ) ) 21  count_2144_delayed_14_0 ) (ignore_resp ) 
    //  file nic.linked.opt.aa, line 817
    $call [call_stmt_2181_call] $module AccessRegister(type_cast_2174_wire_constant NOT_u4_u4_2177_wire_constant konst_2178_wire_constant count_2144_delayed_14_0_2171) (ignore_resp_2181) $guard ( push_pointer_back_to_free_Q_2152 )   $fullrate
    $delay call_stmt_2181_call 4
    $buffering  $in call_stmt_2181_call type_cast_2174_wire_constant 1
    $buffering  $in call_stmt_2181_call NOT_u4_u4_2177_wire_constant 1
    $buffering  $in call_stmt_2181_call konst_2178_wire_constant 1
    $buffering  $in call_stmt_2181_call count_2144_delayed_14_0_2171 1
    $buffering  $out call_stmt_2181_call ignore_resp_2181 1
    // 			count_2152_delayed_14_0 := count $buffering 14 $cut_through // bits of buffering = 448. 
    //  file nic.linked.opt.aa, line 818
    # := [W_count_2152_delayed_14_0_2182_inst] (count_2121) (count_2152_delayed_14_0_2184)  $cut_through    $fullrate
    $buffering  $out W_count_2152_delayed_14_0_2182_inst count_2152_delayed_14_0_2184 14
    // 			ADD_u32_u32_2151_2151_delayed_14_0 := (count + 1 ) $buffering 14 $cut_through // bits of buffering = 448. 
    //  file nic.linked.opt.aa, line 819
    // (count + 1 )
    +[ADD_u32_u32_2188_inst] (count_2121 konst_2187_wire_constant) (ADD_u32_u32_2151_2151_delayed_14_0_2189)    $fullrate
    $buffering  $out ADD_u32_u32_2188_inst ADD_u32_u32_2151_2151_delayed_14_0_2189 14
    $delay ADD_u32_u32_2188_inst 1
    // 			$volatile ncount := ( $mux push_pointer_back_to_free_Q ADD_u32_u32_2151_2151_delayed_14_0  count_2152_delayed_14_0 )  $buffering 1
    //  file nic.linked.opt.aa, line 820
    // ( $mux push_pointer_back_to_free_Q ADD_u32_u32_2151_2151_delayed_14_0  count_2152_delayed_14_0 ) 
    ? [MUX_2194_inst] (push_pointer_back_to_free_Q_2152 ADD_u32_u32_2151_2151_delayed_14_0_2189 count_2152_delayed_14_0_2184) (ncount_2195)  $flowthrough
    // 			LAST_READ_TX_QUEUE_INDEX := tx_q_index $buffering 1// bits of buffering = 6. 
    //  file nic.linked.opt.aa, line 822
    // LAST_READ_TX_QUEUE_INDEX
    $ioport $out [WPIPE_LAST_READ_TX_QUEUE_INDEX_2198_inst]  (tx_q_index_2111) (LAST_READ_TX_QUEUE_INDEX)  $fullrate 
  }
  // end data-path
  // 	LAST_READ_TX_QUEUE_INDEX := 0  $buffering 1// bits of buffering = 6. 
  //  file nic.linked.opt.aa, line 788
  // LAST_READ_TX_QUEUE_INDEX
  WPIPE_LAST_READ_TX_QUEUE_INDEX_2096_inst <=> (assign_stmt_2098/WPIPE_LAST_READ_TX_QUEUE_INDEX_2096_Sample/req assign_stmt_2098/WPIPE_LAST_READ_TX_QUEUE_INDEX_2096_Update/req) (assign_stmt_2098/WPIPE_LAST_READ_TX_QUEUE_INDEX_2096_Sample/ack assign_stmt_2098/WPIPE_LAST_READ_TX_QUEUE_INDEX_2096_Update/ack)
  // CP-DP links for merge  
  //  file nic.linked.opt.aa, line 791
  // CP-DP links for if  
  //  file nic.linked.opt.aa, line -1575179400
  // CONTROL_REGISTER
  // (CONTROL_REGISTER [] 0 )
  // ( ~ (CONTROL_REGISTER [] 0 ) )
  if_stmt_2101_branch <=> (branch_block_stmt_2099/if_stmt_2101_eval_test/branch_req) (branch_block_stmt_2099/if_stmt_2101_else_link/else_choice_transition branch_block_stmt_2099/if_stmt_2101_if_link/if_choice_transition)
  // CP-DP links for do-while  do_while_stmt_2109
  //  file nic.linked.opt.aa, line 797
  // ((LAST_READ_TX_QUEUE_INDEX + 1 ) & ($bitcast ($uint<6>) (NUMBER_OF_SERVERS - 1 ) ))
  // (LAST_READ_TX_QUEUE_INDEX + 1 )
  // LAST_READ_TX_QUEUE_INDEX
  // (NUMBER_OF_SERVERS - 1 )
  // NUMBER_OF_SERVERS
  AND_u6_u6_2120_inst <=> (branch_block_stmt_2099/do_while_stmt_2109/do_while_stmt_2109_loop_body/AND_u6_u6_2120_Sample/rr branch_block_stmt_2099/do_while_stmt_2109/do_while_stmt_2109_loop_body/AND_u6_u6_2120_Update/cr) (branch_block_stmt_2099/do_while_stmt_2109/do_while_stmt_2109_loop_body/AND_u6_u6_2120_Sample/ra branch_block_stmt_2099/do_while_stmt_2109/do_while_stmt_2109_loop_body/AND_u6_u6_2120_Update/ca)
  phi_stmt_2121 <=> (branch_block_stmt_2099/do_while_stmt_2109/do_while_stmt_2109_loop_body/phi_stmt_2121_loopback_sample_req branch_block_stmt_2099/do_while_stmt_2109/do_while_stmt_2109_loop_body/phi_stmt_2121_entry_sample_req) (branch_block_stmt_2099/do_while_stmt_2109/do_while_stmt_2109_loop_body/phi_stmt_2121_phi_mux_ack)
  ncount_2195_2123_buf <=> (branch_block_stmt_2099/do_while_stmt_2109/do_while_stmt_2109_loop_body/R_ncount_2123_Sample/req branch_block_stmt_2099/do_while_stmt_2109/do_while_stmt_2109_loop_body/R_ncount_2123_Update/req) (branch_block_stmt_2099/do_while_stmt_2109/do_while_stmt_2109_loop_body/R_ncount_2123_Sample/ack branch_block_stmt_2099/do_while_stmt_2109/do_while_stmt_2109_loop_body/R_ncount_2123_Update/ack)
  // 			$call getTxPacketPointerFromServer (tx_q_index ) (pkt_pointer tx_flag ) 
  //  file nic.linked.opt.aa, line 806
  // tx_q_index
  call_stmt_2132_call <=> (branch_block_stmt_2099/do_while_stmt_2109/do_while_stmt_2109_loop_body/call_stmt_2132_Sample/crr branch_block_stmt_2099/do_while_stmt_2109/do_while_stmt_2109_loop_body/call_stmt_2132_Update/ccr) (branch_block_stmt_2099/do_while_stmt_2109/do_while_stmt_2109_loop_body/call_stmt_2132_Sample/cra branch_block_stmt_2099/do_while_stmt_2109/do_while_stmt_2109_loop_body/call_stmt_2132_Update/cca)
  // 			$guard (~tx_flag) $call transmitPacket (pkt_pointer ) (transmitted_flag )  $buffering 2
  //  file nic.linked.opt.aa, line 807
  // pkt_pointer
  call_stmt_2136_call <=> (branch_block_stmt_2099/do_while_stmt_2109/do_while_stmt_2109_loop_body/call_stmt_2136_Sample/crr branch_block_stmt_2099/do_while_stmt_2109/do_while_stmt_2109_loop_body/call_stmt_2136_Update/ccr) (branch_block_stmt_2099/do_while_stmt_2109/do_while_stmt_2109_loop_body/call_stmt_2136_Sample/cra branch_block_stmt_2099/do_while_stmt_2109/do_while_stmt_2109_loop_body/call_stmt_2136_Update/cca)
  // 			NOT_u1_u1_2120_2120_delayed_4_0 := ( ~ tx_flag ) $buffering 4 $cut_through // bits of buffering = 4. 
  //  file nic.linked.opt.aa, line 810
  // tx_flag
  // ( ~ tx_flag )
  NOT_u1_u1_2146_inst <=> (branch_block_stmt_2099/do_while_stmt_2109/do_while_stmt_2109_loop_body/NOT_u1_u1_2146_Sample/rr branch_block_stmt_2099/do_while_stmt_2109/do_while_stmt_2109_loop_body/NOT_u1_u1_2146_Update/cr) (branch_block_stmt_2099/do_while_stmt_2109/do_while_stmt_2109_loop_body/NOT_u1_u1_2146_Sample/ra branch_block_stmt_2099/do_while_stmt_2109/do_while_stmt_2109_loop_body/NOT_u1_u1_2146_Update/ca)
  // 			$volatile push_pointer_back_to_free_Q := (NOT_u1_u1_2120_2120_delayed_4_0 & transmitted_flag) $buffering 1
  //  file nic.linked.opt.aa, line 811
  // (NOT_u1_u1_2120_2120_delayed_4_0 & transmitted_flag)
  // NOT_u1_u1_2120_2120_delayed_4_0
  // transmitted_flag
  // 			pkt_pointer_2131_delayed_4_0 := pkt_pointer $buffering 4 $cut_through // bits of buffering = 128. 
  //  file nic.linked.opt.aa, line 813
  // pkt_pointer
  W_pkt_pointer_2131_delayed_4_0_2156_inst <=> (branch_block_stmt_2099/do_while_stmt_2109/do_while_stmt_2109_loop_body/assign_stmt_2158_Sample/req branch_block_stmt_2099/do_while_stmt_2109/do_while_stmt_2109_loop_body/assign_stmt_2158_Update/req) (branch_block_stmt_2099/do_while_stmt_2109/do_while_stmt_2109_loop_body/assign_stmt_2158_Sample/ack branch_block_stmt_2099/do_while_stmt_2109/do_while_stmt_2109_loop_body/assign_stmt_2158_Update/ack)
  // 			$guard (push_pointer_back_to_free_Q) $call pushIntoQueue (($bitcast ($uint<1>) _b1  ) FREE_Q pkt_pointer_2131_delayed_4_0 ) (push_status ) 
  //  file nic.linked.opt.aa, line 814
  // FREE_Q
  // pkt_pointer_2131_delayed_4_0
  call_stmt_2165_call <=> (branch_block_stmt_2099/do_while_stmt_2109/do_while_stmt_2109_loop_body/call_stmt_2165_Sample/crr branch_block_stmt_2099/do_while_stmt_2109/do_while_stmt_2109_loop_body/call_stmt_2165_Update/ccr) (branch_block_stmt_2099/do_while_stmt_2109/do_while_stmt_2109_loop_body/call_stmt_2165_Sample/cra branch_block_stmt_2099/do_while_stmt_2109/do_while_stmt_2109_loop_body/call_stmt_2165_Update/cca)
  // 			count_2144_delayed_14_0 := count $buffering 14 $cut_through // bits of buffering = 448. 
  //  file nic.linked.opt.aa, line 816
  // count
  W_count_2144_delayed_14_0_2169_inst <=> (branch_block_stmt_2099/do_while_stmt_2109/do_while_stmt_2109_loop_body/assign_stmt_2171_Sample/req branch_block_stmt_2099/do_while_stmt_2109/do_while_stmt_2109_loop_body/assign_stmt_2171_Update/req) (branch_block_stmt_2099/do_while_stmt_2109/do_while_stmt_2109_loop_body/assign_stmt_2171_Sample/ack branch_block_stmt_2099/do_while_stmt_2109/do_while_stmt_2109_loop_body/assign_stmt_2171_Update/ack)
  // 			$guard (push_pointer_back_to_free_Q) $call AccessRegister (($bitcast ($uint<1>) _b0  ) ( ~ ($bitcast ($uint<4>) _b0  ) ) 21  count_2144_delayed_14_0 ) (ignore_resp ) 
  //  file nic.linked.opt.aa, line 817
  // count_2144_delayed_14_0
  call_stmt_2181_call <=> (branch_block_stmt_2099/do_while_stmt_2109/do_while_stmt_2109_loop_body/call_stmt_2181_Sample/crr branch_block_stmt_2099/do_while_stmt_2109/do_while_stmt_2109_loop_body/call_stmt_2181_Update/ccr) (branch_block_stmt_2099/do_while_stmt_2109/do_while_stmt_2109_loop_body/call_stmt_2181_Sample/cra branch_block_stmt_2099/do_while_stmt_2109/do_while_stmt_2109_loop_body/call_stmt_2181_Update/cca)
  // 			count_2152_delayed_14_0 := count $buffering 14 $cut_through // bits of buffering = 448. 
  //  file nic.linked.opt.aa, line 818
  // count
  W_count_2152_delayed_14_0_2182_inst <=> (branch_block_stmt_2099/do_while_stmt_2109/do_while_stmt_2109_loop_body/assign_stmt_2184_Sample/req branch_block_stmt_2099/do_while_stmt_2109/do_while_stmt_2109_loop_body/assign_stmt_2184_Update/req) (branch_block_stmt_2099/do_while_stmt_2109/do_while_stmt_2109_loop_body/assign_stmt_2184_Sample/ack branch_block_stmt_2099/do_while_stmt_2109/do_while_stmt_2109_loop_body/assign_stmt_2184_Update/ack)
  // 			ADD_u32_u32_2151_2151_delayed_14_0 := (count + 1 ) $buffering 14 $cut_through // bits of buffering = 448. 
  //  file nic.linked.opt.aa, line 819
  // (count + 1 )
  // count
  ADD_u32_u32_2188_inst <=> (branch_block_stmt_2099/do_while_stmt_2109/do_while_stmt_2109_loop_body/ADD_u32_u32_2188_Sample/rr branch_block_stmt_2099/do_while_stmt_2109/do_while_stmt_2109_loop_body/ADD_u32_u32_2188_Update/cr) (branch_block_stmt_2099/do_while_stmt_2109/do_while_stmt_2109_loop_body/ADD_u32_u32_2188_Sample/ra branch_block_stmt_2099/do_while_stmt_2109/do_while_stmt_2109_loop_body/ADD_u32_u32_2188_Update/ca)
  // 			$volatile ncount := ( $mux push_pointer_back_to_free_Q ADD_u32_u32_2151_2151_delayed_14_0  count_2152_delayed_14_0 )  $buffering 1
  //  file nic.linked.opt.aa, line 820
  // push_pointer_back_to_free_Q
  // ADD_u32_u32_2151_2151_delayed_14_0
  // count_2152_delayed_14_0
  // ( $mux push_pointer_back_to_free_Q ADD_u32_u32_2151_2151_delayed_14_0  count_2152_delayed_14_0 ) 
  // 			LAST_READ_TX_QUEUE_INDEX := tx_q_index $buffering 1// bits of buffering = 6. 
  //  file nic.linked.opt.aa, line 822
  // tx_q_index
  // LAST_READ_TX_QUEUE_INDEX
  WPIPE_LAST_READ_TX_QUEUE_INDEX_2198_inst <=> (branch_block_stmt_2099/do_while_stmt_2109/do_while_stmt_2109_loop_body/WPIPE_LAST_READ_TX_QUEUE_INDEX_2198_Sample/req branch_block_stmt_2099/do_while_stmt_2109/do_while_stmt_2109_loop_body/WPIPE_LAST_READ_TX_QUEUE_INDEX_2198_Update/req) (branch_block_stmt_2099/do_while_stmt_2109/do_while_stmt_2109_loop_body/WPIPE_LAST_READ_TX_QUEUE_INDEX_2198_Sample/ack branch_block_stmt_2099/do_while_stmt_2109/do_while_stmt_2109_loop_body/WPIPE_LAST_READ_TX_QUEUE_INDEX_2198_Update/ack)
  // (CONTROL_REGISTER [] 0 )
  // CONTROL_REGISTER
  do_while_stmt_2109_branch <=> (branch_block_stmt_2099/do_while_stmt_2109/do_while_stmt_2109_loop_body/condition_evaluated) (branch_block_stmt_2099/do_while_stmt_2109/loop_exit/ack branch_block_stmt_2099/do_while_stmt_2109/loop_taken/ack)
}
