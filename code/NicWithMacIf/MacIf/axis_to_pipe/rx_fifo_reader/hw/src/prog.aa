/////////////////////////////////////////////////////////////////////////

// This module reads from the pipe to which rx_fifo.v writes to
// and checks if it is a good or a bad packet.
// If it is a bad packet then the buffer is flushed else it is sent to the NIC.

/////////////////////////////////////////////////////////////////////////

$pipe tb_in_pipe:$uint<64> $depth 1024
$pipe tb_out_pipe:$uint<64> $depth 1024


$pipe mac_data  : $uint<37> $depth 1024  //Pipe to which rx_fifo.v writes to
$pipe out_data  : $uint<37> $depth 1024  //Pipe which will contain only packets that are good

$storage buffer_1 : $array[1024] $of $uint<37>
$storage buffer_2 : $array[1024] $of $uint<37>

//
//Module reads the mac_data pipe and stores them in a buffer and then passes
// them to the NIC if there is no bad packet detected else, the buffer is flushed
// Uses ping pong buffers to allow a concurrent buffering and sending to NIC.

////////////////////////////////////////////////////////
$module [read_from_tb] $in() $out()
$is
{
	$branchblock[loop]{
		$dopipeline $depth 7 $fullrate
		$merge $entry $loopback
			$phi idata := tb_in_pipe $on $entry,$loopback
		$endmerge
		send_data  := ($slice idata 36 0)
		mac_data   := send_data
		//$place[loopback]

	$while 1
	}
}
////////////////////////////////////////////////////////

////////////////////////////////////////////////////////
$module [send_to_tb] $in() $out()
$is
{
	$branchblock[loop]{
		$dopipeline $depth 7 $fullrate
		$merge $entry $loopback
			$phi rdata := out_data $on $entry, $loopback
		$endmerge
		tb_out_pipe := ($bitcast ($uint<64>) rdata)	
		$while 1
	}
}
//////////////////////////////////////////////////////////






$module [rx_fifo_reader] $in() $out()
$is
{

$branchblock[pckt_good_check_fast]
{

	
	$merge $entry loopback $endmerge

		$call load_buffer1 () (last_written_pointer_1 packet_status_1)
		//$rreport (rx_fifo_reader packet_status_1 packet_status_1)
		$guard (packet_status_1)
			$call send_to_nic1 (last_written_pointer_1) ()


		$call load_buffer2 () (last_written_pointer_2 packet_status_2)
		//$rreport (rx_fifo_reader packet_status_2 packet_status_2)
		$guard (packet_status_2)
			$call send_to_nic2 (last_written_pointer_2) ()
				 

	$place [loopback]

}

}



$module [send_to_nic1] $in(buf_ptr : $uint<10>) $out()
$is
{

//$rreport (send_to_nic1 sending_nic1 buf_ptr)
	
$branchblock [main] 
{
	
	$dopipeline $depth 5 $fullrate
		$merge $entry $loopback
			$phi I := $zero<10> $on $entry num $on $loopback
		$endmerge
		out_data := buffer_1[I]
		$volatile num := (I+1)
		//$rreport (send_to_nic1 num_val num)
	$while(num<buf_ptr)

}
}

$module [send_to_nic2] $in(buf_ptr : $uint<10>) $out()
$is
{

//$rreport (send_to_nic2 sending_nic2 buf_ptr)
	
$branchblock [main] 
{
	$dopipeline $depth 5 $fullrate
		$merge $entry $loopback
			$phi I := $zero<10> $on $entry num $on $loopback
		$endmerge
		out_data := buffer_2[I]
		$volatile num := (I+1)
		//$rreport (send_to_nic2 num_val out_data)
	$while(num<buf_ptr)

}
}



$module [load_buffer1] $in () $out(next_buf_ptr_out:$uint<10> pckt_status : $uint<1>) 
$is
{
$branchblock[pckt_good_check_fast]
{
	$dopipeline $depth 7 $fullrate 
		$merge $entry $loopback
			$phi intm_data := mac_data $on $entry mac_data $on $loopback 
			   
			$phi buf_ptr := $zero<10> $on $entry next_buf_ptr $on $loopback
							
		$endmerge
	
	
	$volatile $split (intm_data 1 32 4) (tlast tdata tkeep)

	$volatile bad_packet := (((tlast == 1) & (tdata == _hFFFFFFFF)) & (tkeep == 0))
	
	$volatile good_packet := ((tlast == 1) & (tkeep != 0))
	
	
	buffer_1[buf_ptr] := intm_data
	
	 
	$volatile next_buf_ptr := (buf_ptr + 1)
	//$rreport (load_buffer1 fill_buffer_val fill_buffer)
	//$rreport (load_buffer1 got_data tlast)
	$while (tlast == 0)


$volatile next_buf_ptr_out := next_buf_ptr

$volatile pckt_status := ($prioritymux good_packet $one<1>
			  	       bad_packet $zero<1> 
				       $default $zero<1>)
 
}

} 



$module [load_buffer2] $in () $out(next_buf_ptr_out:$uint<10> pckt_status : $uint<1>) 
$is
{
$branchblock[pckt_good_check_fast]
{
	$dopipeline $depth 7 $fullrate 
		$merge $entry $loopback
			$phi intm_data := mac_data $on $entry mac_data $on $loopback 
						   
			$phi buf_ptr := $zero<10> $on $entry next_buf_ptr $on $loopback
							
		$endmerge
	
	
	$volatile $split (intm_data 1 32 4) (tlast tdata tkeep)

	$volatile bad_packet := (((tlast == 1) & (tdata == _hFFFFFFFF)) & (tkeep == 0))
	
	$volatile good_packet := ((tlast == 1) & (tkeep != 0))
	
	
	buffer_2[buf_ptr] := intm_data
	
	$volatile next_buf_ptr := (buf_ptr + 1)
		
	
	$while (tlast == 0)


$volatile next_buf_ptr_out := next_buf_ptr

$volatile pckt_status := ($prioritymux good_packet $one<1>
			  	       bad_packet $zero<1> 
				       $default $zero<1>)
 
}
}  
