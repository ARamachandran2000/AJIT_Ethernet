// ------------------------------------------------
// Register     address   		Description
// Id	       offset	
// ------------------------------------------------
// 0		0x0		control register
// ------------------------------------------------
// 1		0x4		number of servers
// ------------------------------------------------
// 2               0x8             Rx Q to server 0
// 3               0xC             Rx Q to server 1
// 4               0x10            Rx Q to server 2
// 5               0x14            Rx Q to server 3
// 6               0x18            Rx Q to server 4
// 7               0x1c            Rx Q to server 5
// 8               0x20            Rx Q to server 6
// 9               0x24            Rx Q to server 7
// --------------------------------------------------
// Tx queues from servers (8 registers)
// ids 		10 to 17
// addresses   0x28, 0x2c, 0x30, 0x34, 0x38, 0x3c, 0x40,  0x44
// ---------------------------------------------------
// Address of Free Q (1 register)
// id          18
// address     0x48
// ---------------------------------------------------
// MAC address 48 bits (ie, two registers)
// id          19, address 0x4c (top 16 bits)
// id          20, address 0x50 (bottom 32 bits)
//
// ---------------------------------------------------
//  Unused 
// ---------------------------------------------------

// for the moment, we implement 64 registers
$storage nic_registers: $array [64] $of $uint<32>

$volatile $module [updateW] $in (bmask: $uint<4> rval wdata: $uint<32>) $out (wval : $uint<32>) $is
{
	$volatile $split (bmask 1 1 1 1) (b0 b1 b2 b3)
	$volatile $split (rval  8 8 8 8) (r0 r1 r2 r3)
	$volatile $split (wdata  8 8 8 8) (w0 w1 w2 w3)

	wval := ($concat
			($mux b0 w0 r0)
			($mux b1 w1 r1)
			($mux b2 w2 r2)
			($mux b3 w3 r3))
}

$module [accessRegisterDaemon] $in () $out () $is
{
	$branchblock[loop] {
		$merge $entry loopback $endmerge
			req := AFB_NIC_REQUEST
			$volatile $split (req 1 1 4 36 32) 
					(lock rwbar bmask addr wdata)
		
			$volatile index := ($slice addr 8 2)

			// read modify write
			rval := nic_registers [index]
			$volatile wval := ($call updateW (bmask rval wdata))
			$guard (~rwbar)
				nic_registers[index] := wval
			
			$volatile rdata := ($mux rwbar rval $zero<32>)
			$volatile resp  := ($concat $one<1> rdata)
			

			AFB_NIC_RESPONSE := resp	
		$place[loopback]
	}
}
