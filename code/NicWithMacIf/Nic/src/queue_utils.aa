//
// Utilities
//    Pop a uint32_t from the queue.  Return status = 1 on success.
// 
$module [popFromQueue] 
	$in  (lock : $uint<1> q_base_address : $uint<36> ) $out (q_r_data: $uint<32>  status: $uint<1>)
$is
{
	$guard (lock) $call acquireMutex (q_base_address) (m_ok) 
	$barrier

	$call getQueuePointers (q_base_address) (write_pointer read_pointer)
	$volatile q_empty := (write_pointer == read_pointer)
	$volatile next_rp := ((read_pointer + 1) &  QUEUE_SIZE_MASK)

	$guard (~q_empty) $call getQueueElement (q_base_address read_pointer) (q_r_data)
	$guard (~q_empty) $call setQueuePointers (q_base_address  write_pointer next_rp) ()
	$rreport(popFromQueue pop_data q_r_data) 

	$barrier
	$guard (lock) $call releaseMutex (q_base_address) ()
	status := q_empty // 0 = Success, 1 = Fail
}

//
//
// Utilities
//    push a uint32_t into the queue.  Return status = 0 on success.
// 
$module [pushIntoQueue] 
	$in  (lock : $uint<1> q_base_address : $uint<36> q_w_data: $uint<32>) $out (status: $uint<1>)
$is
{
	$guard (lock) $call acquireMutex (q_base_address) (m_ok) 
	$barrier
	$rreport(pushIntoQueue pushing_to_queue q_w_data)
	$call getQueuePointers (q_base_address) (write_pointer read_pointer)
	$volatile next_wp := ((write_pointer + 1) &  QUEUE_SIZE_MASK)
	$rreport(pushIntoQueue pushing_to_queue q_w_data write_pointer read_pointer next_wp)
	$volatile q_full := (next_wp == read_pointer)

	$guard (~q_full) $call setQueueElement (q_base_address write_pointer q_w_data) ()
	$guard (~q_full) $call setQueuePointers (q_base_address  write_pointer next_wp) ()


	$barrier
	$guard (lock) $call releaseMutex (q_base_address) ()
	status := (~q_full)
}


//
// lock read  modify write (aka swap), spin till lock acquired.
//
$module [acquireMutex] $in (q_base_address: $uint<36>) $out (m_ok: $uint<1>) 
$is
{
	$branchblock[loop] {

		$volatile mutex_address := q_base_address

		$merge $entry loopback $endmerge
		
		// input arguments: lock, rwbar, bytemask, address, write-data
		// output arguments: read-data
		$call accessMemory ($one<1> $one<1> (~$zero<8>) mutex_address $zero<64>) (mutex_plus_nentries)

		$volatile mutex_val := ($slice mutex_plus_nentries 63 32)
		
		$if (mutex_val == 1) $then
			$place [loopback]
		$endif
		
		$volatile wval := ($concat $one<32> ($slice mutex_plus_nentries 31 0))
		$call accessMemory ($zero<1> $zero<1> (~$zero<8>) mutex_address wval)
						(ignore)
	}

	m_ok := $one<1>
}


//
// set mutex to 0 in queue.
//
$module [releaseMutex] $in (q_base_address: $uint<36>) $out () $is
{
		$call accessMemory ($zero<1> $zero<1> 
					($concat (~$zero<4>) $zero<4>) 
					 q_base_address $zero<64>) (ignore)
}

	

//
// get wp, rp pair.
//
$module [getQueuePointers] $in (q_base_address: $uint<36>)
		$out (wp rp: $uint<32>) $is
{
		$call accessMemory ($zero<1> $one<1>  (~$zero<8>)
					 (q_base_address + 8) $zero<64>) (wp_rp)

		$volatile $split (wp_rp 32 32) (wp rp)
}

//
// set wp, rp pair.
//
$module [setQueuePointers] $in (q_base_address: $uint<36> wp rp: $uint<32>) $out ()  $is
{
		$call accessMemory ($zero<1> $zero<1>  (~$zero<8>)
					 (q_base_address + 8) ($concat wp rp)) (ignore)
}

	
//
// get element pointed to by read-pointer
// inside queue.
//
$module  [getQueueElement]
	$in (q_base_address: $uint<36> read_pointer: $uint<32>) 
	$out (q_r_data : $uint<32>)
$is
{
	$volatile buffer_address := (q_base_address + ($bitcast ($uint<36>) 16) )
	$volatile element_pair_address := (buffer_address + ($bitcast ($uint<36>) ($concat ($slice read_pointer 31 1) $zero<3>)))
	$call accessMemory ($zero<1> $one<1>  (~$zero<8>) element_pair_address $zero<64>) (element_pair)

	$volatile $split (element_pair 32 32) (e0 e1)
	q_r_data := ($mux (read_pointer [] 0) e1 e0) // Access 63 : 32 when addr[2 : 0] = 0 and
						     // Access 31:0 when addr[2 : 0] = 4
}

//
// set queue element pointed to by write
// pointer.
//
$module  [setQueueElement]
	$in (q_base_address: $uint<36> write_pointer: $uint<32> q_w_data : $uint<32>)
	$out () 
$is
{
	$volatile buffer_address := (q_base_address + ($bitcast ($uint<36>) 16) )
	$volatile element_pair_address := 
		(buffer_address + ($bitcast ($uint<36>) ($concat ($slice write_pointer 31 1) $zero<3>)))
	$volatile bmask := ($mux (write_pointer [] 0) 
				($concat $zero<4> (~$zero<4>))
				($concat (~ $zero<4>) $zero<4>)
				)
	$volatile wval := ($mux (write_pointer [] 0)
					($concat $zero<32> q_w_data)
					($concat q_w_data $zero<32>)
				)
	$call accessMemory ($zero<1> $zero<1>  bmask
					 element_pair_address wval) (ignore)

}

