/ This file includes the code for the implementation of
// the NIC -> MAC path.
//
// The NIC should go through the following sequence
//
//  while(1) {
//        for (I = 0; I < #servers; I++)
//        {
//               pkt = popFromServer(I);
//               if (pkt != 0) transmit it
//	  }
//  }
//


// Transmit packet, given the pointer to the
// packet.
$module [transmitPacket]
	$in (packet_pointer: $uint<36>) $out (status: $uint<1>) $is
{
	// read packet information from packet buffer.
	
	// calculate checksum

	// transmit packet to MAC.
}


$module [transmitDaemon] $in () $out () $is
{
	// spin, reading control register until
	// it is set.
	
	$call getNumberOfServers () (NSERVERS)
	$branchblock[loop] {
		$merge $entry outer_loopback $endmerge

			// loop across the servers.
			$merge $entry server_loopback 
				$phi I := $zero<8> $on $entry nI $on server_loopback
			$endmerge
				$volatile nI := (I + 1)
				$volatile continue_flag := (nI < NSERVERS)

				$call getTxPacketFromServer (I) (pkt_pointer)
				$volatile tx_flag := (pkt_counter != 0)

				$guard (tx_flag) $call transmitPacket (pkt_pointer) (ok_flag)
			
				$if (continue_flag) $then
					$place [server_loopback]
				$endif

		$place [outer_loopback]
	}
}



$module [transmitPacket]
    $in (packet_pointer : $uint<36>)
    $out (transmit_packet_status : $uint<1>)

    $is
        {
	    $split (processed_buf_status 12 8) (last_y_index tkeep_last)
            $branchblock [main]
            {
                $merge $entry loopback error_read
			        $phi y_index := THREE $on $entry 
                                    y_next $on loopback 
                                    y_index $on error_read
		        $endmerge

                $volatile $call addr_gen (buf_index y_index) (mem_addr)

                $volatile req := ($concat $zero<1> $one<1> ($bitcast ($uint<8>) _hff) mem_addr $zero<64>)

                request_pipe := req

                response_data := response_pipe

                $volatile error_flag := (response_data [] 64)

                $if(error_flag == 1) $then
                    $place [error_read]
                $endif

                data := ($slice response_data 63 0)

                $if(y_index == last_y_index) $then
                    transmit_pipe := ($concat $one<1> tkeep_last data)
                $else                    
                    transmit_pipe := ($concat $zero<1> ($bitcast ($uint<8>) _hff) data)
                $endif
                
                y_next := (y_index + 1)

                $if(y_next <= last_y_index) $then
                    $place [loopback]
                $endif

            }

		$volatile transmit_packet_status := buf_index
        }


