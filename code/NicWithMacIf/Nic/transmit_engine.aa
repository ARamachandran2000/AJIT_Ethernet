



//Pipes to Memory

$pipe request_pipe   : $uint<110> $depth 128  
$pipe response_pipe  : $uint<65>  $depth 128

// Pipe to Tx_FIFO
$pipe transmit_pipe : $uint<73> $depth 128




// Constants
$constant THREE: $uint<12> := 3
$constant Y_LIMIT : $uint<12> := 1544
$constant BUFFER_OFFSET : $uint<36> := 0


// Helper Modules

//Delay Block
$operator $module [delay_time]
	$in (T: $uint<32>) $out (delay_done : $uint<1>) $is
{
	$branchblock[loop] {
	    $dopipeline $depth 7 $fullrate
		$merge $entry $loopback
			$phi R := T $on $entry nR $on $loopback
		$endmerge

		$volatile nR := (R - 1)
	   $while (R > 0)

	   $volatile delay_done := 1
	}
}

// Address Generator

$volatile $module [addr_gen]
	$in(buffer_index : $uint<12> y_index : $uint<12>)
	$out(mem_addr : $uint<36>)
    $is
    {

        buf_index_cast := ($bitcast ($uint<12>) buffer_index)
        intm_calc := ((buf_index_cast * Y_LIMIT) + (y_index * 8))
        intm_calc_cast := ($bitcast ($uint<36>) intm_calc)
        mem_addr := (BUFFER_OFFSET + intm_calc_cast)
    }


$module [checkProcessedBuf]
    $in (buf_index : $uint<12>)
    $out(processed_buf_status : $uint<20> )

    $is
    {
        $branchblock [main]
        {
            $merge $entry loopback
		$phi wait_req := $one<1> $on $entry
			    ($call delay_time (30)) $on loopback
            $endmerge

            
	    $volatile $call addr_gen (buf_index 0) (mem_addr) 
            $volatile request_data := ($concat $zero<1> $one<1> ($bitcast ($uint<8>) _hff) 						mem_addr $zero<64>)

	    $if(wait_req == 1) $then		    
		    request_pipe := request_data
		    response_data := response_pipe

		    $volatile flag := ($slice response_data 7 0)
		    $volatile XMIT := (flag == _b11010000)

		    $if (~XMIT) $then
		        $place [loopback] // put token in place "loopback"
		    $endif
	    $endif

            $volatile tkeep_last := ($slice response_data 15 8)
            $volatile last_y_index := ($slice response_data 27 16)
	    $volatile processed_buf_status := ($concat last_y_index tkeep_last)

        }

    }

$module [transmitPacket]
    $in (buf_index : $uint<12>
	 processed_buf_status : $uint<20>)
    $out (transmit_packet_status : $uint<12>)

    $is
        {
	    $split (processed_buf_status 12 8) (last_y_index tkeep_last)
            $branchblock [main]
            {
                $merge $entry loopback error_read
			        $phi y_index := THREE $on $entry 
                                    y_next $on loopback 
                                    y_index $on error_read
		        $endmerge

                $volatile $call addr_gen (buf_index y_index) (mem_addr)

                $volatile req := ($concat $zero<1> $one<1> ($bitcast ($uint<8>) _hff) mem_addr $zero<64>)

                request_pipe := req

                response_data := response_pipe

                $volatile error_flag := (response_data [] 64)

                $if(error_flag == 1) $then
                    $place [error_read]
                $endif

                data := ($slice response_data 63 0)

                $if(y_index == last_y_index) $then
                    transmit_pipe := ($concat $one<1> tkeep_last data)
                $else                    
                    transmit_pipe := ($concat $zero<1> ($bitcast ($uint<8>) _hff) data)
                $endif
                
                y_next := (y_index + 1)

                $if(y_next <= last_y_index) $then
                    $place [loopback]
                $endif

            }

		$volatile transmit_packet_status := buf_index
        }


$module [clearFlag]
	$in(buf_index : $uint<12>)
	$out()
$is
{

	$volatile $call addr_gen (buf_index 0) (mem_addr)

	request_data := ($concat $zero<36> $zero<12> $zero<8> $zero<8>)

	request_pipe :=  ($concat $zero<1> $zero<1> ($bitcast ($uint<8>) _hff) mem_addr 			  request_data)

	response_data := response_pipe

	
}








$module [transmitDaemon] $in () $out () $is
{
	$branchblock[main]
	{
		$dopipeline $depth 7 $fullrate
		$merge $entry $loopback
			$phi buffer_index := $zero<12> $on $entry
					     (buffer_index + 1)   $on $loopback 
		$endmerge


            
		$call checkProcessedBuf (buffer_index) (processed_buf_status)
            		
		$call transmitPacket (buffer_index processed_buf_status) 					     (transmitted_packet_status)

		$call clearFlag (transmitted_packet_status) ()
		
		$while 1
	}

}

