// Receives the header and packet data from the Parser and stores it in Memory...


// Step 1 : Get Free Buffer Pointer from Free Queue
// Step 2 : Write the packet data into the acquired free buffer
// Step 3 : Write the buffer pointer into one of the Rx Queues pointed  by RxQ register (Do this
// Sequentilly so that a particular server is not overburdened.
// Step 4 : Repeat Steps 1-3 for the next packet


// Main Daemon that repeatedly executes Steps 1-3 above

$module [ReceiveEngineDaemon] 
$in ()
$out()
$is
{
	LAST_WRITTEN_RX_QUEUE_INDEX := 0
	$branchblock[main]
	{
		
		// loop around until enabled by Software
		$rreport(ReceiveEngineDaemon waiting_for_control)
		$merge $entry not_enabled_yet_loopback disable_loopback $endmerge
		
			// If not enabled yet -> Loopback
			$if (~(CONTROL_REGISTER [] 0)) $then
				$place [not_enabled_yet_loopback]
		$endif

		$rreport(ReceiveEngineDaemon got_the__control )

		// Once enabled start processing
		$dopipeline $depth 31 $fullrate
		$merge $entry $loopback 
				// for Debug
				$phi pkt_cnt := $zero<32> $on $entry npkt_cnt $on $loopback
		$endmerge

		// Step 1 : Pop From Free Queue -> If not empty (Success indicated by status) 
		$rreport(ReceiveEngineDaemon called_pop_From_queue )
		$call popFromQueue ($one<1> FREE_Q) (rx_buffer_pointer_32 status)
		$rreport(ReceiveEngineDaemon rx_buffer rx_buffer_pointer_32) 

				// DEBUG purpose
				$guard(~status)
					$call AccessRegister ($zero<1> (~$zero<4>) 24 rx_buffer_pointer_32) (ignore_resp0)

		// convert 32 bit 16-byte aligned address to 36 bit physical address.
		$volatile rx_buffer_pointer_36 :=  ($concat $zero<4> rx_buffer_pointer_32)
		$rreport(ReceiveEngineDaemon rx_buffer_val rx_buffer_pointer_36)
		
		// Step 2 : If pop was successful then start loading the buffer
		$rreport(ReceiveEngineDaemon calling_loadBuffer status rx_buffer_pointer_36 rx_buffer_pointer_32)
		$barrier
		$guard (~status)// 0 = success
			$call loadBuffer (rx_buffer_pointer_36) (bad_packet_identifier)

		// packet is ok, push into rx queue
		$volatile ok_flag := ((~status) & (~bad_packet_identifier))

		// packet is not ok, free the buffer.
		$volatile free_flag := ((~status) & bad_packet_identifier)
		$volatile cond := (ok_flag == 1)
		
		
				// for Debug
				$guard(ok_flag)
					$call AccessRegister ($zero<1> (~$zero<4>) 25 pkt_cnt) (ignore_resp1)
					$volatile npkt_cnt := ($mux ok_flag (pkt_cnt + $one<32>)  pkt_cnt) 

		$rreport(ReceiveEngineDaemon populating_rx_queue ok_flag cond)		
		$rreport(ReceiveEngineDaemon running_ok_flag)
	
		$guard (ok_flag) 
			$call populateRxQueue (rx_buffer_pointer_36) ()

		$rreport(ReceiveEngineDaemon pushing_into_free_q free_flag )
		$guard (free_flag) 
			$call pushIntoQueue ($one<1> FREE_Q ($slice rx_buffer_pointer_36 31 0)) (push_status) 

		$rreport(ReceiveEngineDaemon completed_iteration_in_receive_engine )
		
		// Loop while Control word is 1
		$while (CONTROL_REGISTER [] 0)

		$place [disable_loopback]
	}
}



// Writes into the RX_Queue of server "q_index" the buffer pointer  
// "rx_buffer_pointer"   
$module [populateRxQueue] $in (rx_buffer_pointer : $uint<36>) $out ()
$is
{
	$rreport(populateRxQueue started_populate_rx_queue_module LAST_WRITTEN_RX_QUEUE_INDEX)
	$branchblock[PushIntoQueue]
	{

		$merge $entry loopback 
			$phi q_index := ((LAST_WRITTEN_RX_QUEUE_INDEX+1)& ($bitcast ($uint<6>) (NUMBER_OF_SERVERS - 1))) $on $entry 
					n_q_index $on loopback
		$endmerge
		$rreport(populateRxQueue in_loop q_index)
		// Rx Queues Index in the Register File start from Index 2
		$volatile register_index := ($bitcast ($uint<6>) (q_index + RX_QUEUES_REG_START_OFFSET))
		$rreport(populateRxQueue will_be_Accessing_register register_index)
		// Request for Rx Queue Pointer of Server ID : q_index Regsiter ID : q_index + 2
			    	// rwbar bmask       index	     wdata        
		$call AccessRegister ($one<1> (~$zero<4>) register_index $zero<32>) (rx_queue_pointer_32)
	
	

		$volatile rx_queue_pointer_36 :=  ($concat $zero<4> rx_queue_pointer_32)	
		$rreport(populateRxQueue got_rx_queue_pointer_pushing_to_rx_queue rx_queue_pointer_32 rx_queue_pointer_36 NUMBER_OF_SERVERS)	
		
		$call pushIntoQueue ($one<1> rx_queue_pointer_36 ($slice rx_buffer_pointer 31 0)) (push_status)

		n_q_index := ((q_index + 1) & ($bitcast ($uint<6>) (NUMBER_OF_SERVERS - 1)))
		$rreport(populateRxQueue written_to_rx_queue n_q_index push_status)

		$if(~push_status) $then
			$call delay_time (32) (status)
			$if (status == 0) $then
				$place [loopback]
			$endif
		$else
			LAST_WRITTEN_RX_QUEUE_INDEX :=  q_index
			selected_q_index := q_index
		$endif
	}
	
}




// Load into the Buffer starting from Buffer Index 1...
// Buffer Index 0 is reserved for control information of the packet following it
// Steps : 
// First Store the Ethernet Header information in the buffer
// Then, store the IP payload into the buffer
// Finally Add the Control Information at the base address pointer (index = 0) if the packet
// currently being stored is not a bad packet
$pipeline $depth 31 
	$module [loadBuffer] $in (rx_buffer_pointer : $uint<36>) $out(bad_packet_identifier : $uint<1>)
$is
{
	// Read from Ethernet Header Pipe and stores into memory 
	// Returns the last pointer location which was written to
	$call writeEthernetHeaderToMem (rx_buffer_pointer) (new_buf_pointer)

	// Read from Ethernet Payload Pipe and stores in memory starting from the last written
	// pointer location
	// Returns the Control information like -> Packet Size, BAd packet Status and 
	// byte mask of last word
	$call writePayloadToMem 
		(rx_buffer_pointer new_buf_pointer)
				(packet_size bad_packet_identifier last_keep)

	// Write Control Information to Memory if not a bad packet
	// If it IS a bad packet don't bother writing since the buffer will be repurposed
	// for the next packet 
	$guard(~bad_packet_identifier)
		$call writeControlInformationToMem (rx_buffer_pointer packet_size  last_keep) ()
}

// Write Ethernet Header to Buffer
$module [writeEthernetHeaderToMem]
$in (buf_pointer : $uint<36>)
$out(buf_position_out : $uint<36>)
$is
{
	$branchblock [main]
	{
		$dopipeline $depth 15 $fullrate
		$merge $entry $loopback
			// Write from buffer index 1 i.e (buf_pointer + 8), since ...
			// index = 0 i.e location buf_pointer is reserved for control
			//information
			$phi buf_position :=  (buf_pointer + 8) $on $entry
				     	 nbuf_position $on $loopback
					// After storing a packet increment buf_position to
					// next index
			$phi I := $zero<4> $on $entry nI $on $loopback 
		// Ethernet Header is only 2 words, therefore a counter to keep track of count
		
		// Read Header word from pipe
			$phi ethernet_header := nic_rx_to_header $on $entry, $loopback
		$endmerge
	
		$rreport(writeEthernetHeaderToMem received_eth_header_is ethernet_header buf_position)
	// Extract individual components of the word 
		$volatile $split (ethernet_header 1 64 8)(last_bit wdata wkeep)
	
	// Write the data to memory with bmask->wkeep at location buf_position
		$call accessMemory ($zero<1> $zero<1> wkeep buf_position wdata)	(ignore_return) 
		$volatile nI := (I + 1)
		$volatile nbuf_position := (buf_position + 8)
	// If 2 words are stored, then end
		$while (nI <= 1)
		
	}(buf_position => buf_position)
	
	buf_position_out := buf_position

	//$attribute delay 4
}


// Write Payload Data to Buffer
$module [writePayloadToMem]
	// Base buffer pointer is used to calculate the packet size
	// buf_pointer -> Consists of last written buffer location
$in (base_buf_pointer : $uint<36> buf_pointer : $uint<36>)
$out(packet_size_32:$uint<11> bad_packet_identifier : $uint<1> last_keep : $uint<8>)
$is
{
	$branchblock[loop] {
		$dopipeline $depth 15 $fullrate
			$merge $entry $loopback
				// Begin loading from buf_pointer + 8 since buf_pointer
				// has already been written into by Ethernet Header 
				$phi buf_position := (buf_pointer + 8) $on $entry
				     		nbuf_position $on $loopback //(buf_position + 8) $on $loopback

				// Read Data from Payload Pipe
				$phi payload_data := nic_rx_to_packet $on $entry, $loopback
			$endmerge
	

			// Extract payload word components
			$volatile $split (payload_data 1 64 8)(last_bit wdata wkeep)
			
			// Load wdata to memory with wkeep = bmask
			$rreport(writePayloadToMem writing_payload_to_mem last_bit wdata wkeep buf_position)
			$call accessMemory ($zero<1> $zero<1> wkeep buf_position wdata) 
									   (ignore_return) 
			$volatile nbuf_position := (buf_position + 8)
		$while (~last_bit)

	} (wdata => tdata wkeep => tkeep buf_position => buf_position)

	// Identify if the data is a bad packet which is identified by 
	// data bits all 1 and bmask all zeros.
	$volatile bad_packet_identifier := ((tdata == BAD_PACKET_DATA) & (tkeep == 0))

	// Calculate packet size which is in multiples of 8-bit words stored
	// Can divide by 8 to get size in 64-bit word multiples
	// Divide by 4 to get size in 32-bit word multiples	
	$volatile packet_size_11 := ($bitcast ($uint<11>) (buf_position - base_buf_pointer) )
	$volatile packet_size_32 := packet_size_11
	$rreport(writePayloadToMem packet_size_is packet_size_11 packet_size_32)
	
	// bmask of last word is wkeep
	$volatile last_keep := tkeep
	
}

// Write the Control Information of stored packet into buffer location 0
$module [writeControlInformationToMem]
$in (base_buffer_pointer : $uint<36> packet_size:$uint<11>  last_keep : $uint<8>)
$out()
$is
{
	// Concatenate the control information to create control_data
	// This control data is a work in progress.... (Can add other information like 
	// stored by NIC so and so and send to NIC so and so etc.. 
	$volatile control_data := ($bitcast ($uint<64>) ($concat packet_size last_keep))

	// Write this control data with bmask set to all 1s to base_buffer_pointer location
	$call accessMemory ($zero<1> $zero<1> FULL_BYTE_MASK base_buffer_pointer control_data) (ignore_return)


}



