$volatile $module [parseRequest] 
		$in (request: $uint<111>)
		//  Valid Lock RWBAR
		//    1     1   1   
		$out (V L RWBAR: $uint<1>) $is
{
	$split (request 1 1 1 108) (V L RWBAR U108)
}


//
// 0-3 NICs
// 4   P
//
$volatile $module [calculatePriorities]
	$in (V0 V1 V2 V3 V4: $uint<1> priority: $uint<3>)
	$out (P0 P1 P2 P3 P4: $uint<1>)  $is
{
	VV := ($concat V0 V1 V2 V3 V4)

	// rotate left to line up top priority at first slot
	RVV := ($excmux
			(priority == 0) ($concat V0 V1 V2 V3 V4)
			(priority == 1) ($concat V1 V2 V3 V4 V0)
			(priority == 2) ($concat V2 V3 V4 V0 V1)
			(priority == 3) ($concat V3 V4 V0 V1 V2)
			(priority == 4) ($concat V4 V0 V1 V2 V3)
		)
	$split (RVV 1 1 1 1 1) (R0 R1 R2 R3 R4)

	// priority encode
	RS0 := R0
	RS1 := ($reduce & (~R0) R1)
	RS2 := ($reduce & (~R0) (~R1) R2)
	RS3 := ($reduce & (~R0) (~R1) (~R2) R3)
	RS4 := ($reduce & (~R0) (~R1) (~R2) (~R3) R4)

	// rotate right to get back original alignment.
	PP := ($excmux
			(priority == 0)  ($concat RS0 RS1 RS2 RS3 RS4)
			(priority == 1)  ($concat RS4 RS0 RS1 RS2 RS3)
			(priority == 2)  ($concat RS3 RS4 RS0 RS1 RS2)
			(priority == 3)  ($concat RS2 RS3 RS4 RS0 RS1)
			(priority == 4)  ($concat RS1 RS2 RS3 RS4 RS0)
		)

	$split (PP 1 1 1 1 1) (P0 P1 P2 P3 P4)
}

	
$volatile $module [computeActions] 
	$in (
			V0 L0 RWB0 
			V1 L1 RWB1 
			V2 L2 RWB2
			V3 L3 RWB3
			V4 L4 RWB4: $uint<1>  STATE: $uint<8>) 
	$out (s0 s1 s2 s3 s4: $uint<1> nSTATE: $uint<8>)
$is
{
	$split (STATE 1 1 1 1 1 3) (ll0 ll1 ll2 ll3 ll4 priority)

	
	cl0 := ($reduce & V0 ll0)
	cl1 := ($reduce & V1 ll1)
	cl2 := ($reduce & V2 ll2)
	cl3 := ($reduce & V3 ll3)
	cl4 := ($reduce & V4 ll4)

	wl0 := ($reduce & V0 L0)
	wl1 := ($reduce & V0 L0)
	wl2 := ($reduce & V0 L0)
	wl3 := ($reduce & V0 L0)
	wl4 := ($reduce & V0 L0)

	$volatile $call  calculatePriorities (wl0 wl1 wl2 wl3 wl4 priority) (p0 p1 p2 p3 p4)
	$volatile someone_wants_lock  := ($reduce | wl0 wl1 wl2 wl3 wl4)

	// select 0 if valid and someone else does not hold the lock.
	s0 := 	($reduce & 
			V0
			($reduce &  (~cl1) (~cl2) (~cl3) (~cl4)) // somebody else does not hold the lock.
			((~someone_wants_lock) | p0) // either noone wants the lock or 0 is selected.
		)
	s1 := 	($reduce & 
			V1
			($reduce &  (~cl0) (~cl2) (~cl3) (~cl4)) // somebody else does not hold the lock.
			((~someone_wants_lock) | p1) // either noone wants the lock or 1 is selected.
		)
	s2 := 	($reduce & 
			V2
			($reduce &  (~cl0) (~cl1) (~cl3) (~cl4)) // somebody else does not hold the lock.
			((~someone_wants_lock) | p2) // either noone wants the lock or 2 is selected.
		)
	s3 := 	($reduce & 
			V3
			($reduce &  (~cl0) (~cl1) (~cl2) (~cl4)) // somebody else does not hold the lock.
			((~someone_wants_lock) | p3) // either noone wants the lock or 3 is selected.
		)
	s4 := 	($reduce & 
			V4
			($reduce &  (~cl0) (~cl1) (~cl2) (~cl3)) // somebody else does not hold the lock.
			((~someone_wants_lock) | p4) // either noone wants the lock or 4 is selected.
		)

	at_least_one_selected := ($reduce | s0 s1 s2 s3 s4)

	//
	// rotate priority if someone who wants lock was selected.
	//
	n_priority := ($mux (at_least_one_selected & someone_wants_lock)
					  ($excmux  
								s0  1
								s1  2
								s2  3
								s3  4
							 	s4  0) priority)
			
	nll0 :=   (s0 & L0)
	nll1 :=   (s1 & L1)
	nll2 :=   (s2 & L2)
	nll3 :=   (s3 & L3)
	nll4 :=   (s4 & L4)
	nSTATE  := ($mux at_least_one_selected ($concat nll0 nll1 nll2 nll3 nll4 n_priority)  ($slice STATE 7 0))
}

//
// In principle, we could serve more than one request at a time.
//
// 
$module [memSwitchDaemon] $in () $out () $is
{
	$branchblock[loop] {

		$dopipeline $depth 15 $fullrate 

		$merge $entry $loopback

			$phi R0 := 0 $on $entry $guard (g0) NOBLOCK_NIC_0_MC_BUS_REQUEST $on $loopback
			$phi R1 := 0 $on $entry $guard (g1) NOBLOCK_NIC_1_MC_BUS_REQUEST $on $loopback
			$phi R2 := 0 $on $entry $guard (g2) NOBLOCK_NIC_2_MC_BUS_REQUEST $on $loopback
			$phi R3 := 0 $on $entry $guard (g3) NOBLOCK_NIC_3_MC_BUS_REQUEST $on $loopback
			$phi R4 := 0 $on $entry $guard (g4) NOBLOCK_PROCESSOR_MC_BUS_REQUEST $on $loopback


			//
			// State: locks  priority last_writer last_written_line_addr
			//    l0 l1 l2 l3 l4 priority counter 
			//    1  1  1  1  1   3	      8     
			$phi TOTAL_STATE := $zero<16> $on $entry nTOTAL_STATE $on $loopback

		$endmerge 


			$volatile $call parseRequest (R0) (V0 L0 RWB0)
			$volatile $call parseRequest (R1) (V1 L1 RWB1)
			$volatile $call parseRequest (R2) (V2 L2 RWB2)
			$volatile $call parseRequest (R3) (V3 L3 RWB3)
			$volatile $call parseRequest (R4) (V4 L4 RWB4)

			$volatile $split (TOTAL_STATE 8 8) (STATE counter)
			$volatile n_counter :=
					($mux ($reduce | V0 V1 V2 V3 V4) (counter + 1) counter)


			$volatile $call computeActions
					(V0 L0 RWB0 
						V1 L1 RWB1 
						V2 L2 RWB2 	
						V3 L3 RWB3 
						V4 L4 RWB4 
						STATE) (s0 s1 s2 s3 s4 nSTATE)


			$volatile g0 := ((~V0) | s0)
			$volatile g1 := ((~V1) | s1)
			$volatile g2 := ((~V2) | s2)
			$volatile g3 := ((~V3) | s3)
			$volatile g4 := ((~V4) | s4)

			$volatile nTOTAL_STATE := ($concat nSTATE n_counter)

			$guard (s0) $call access_mem_0 ( ($slice R0 109 0) ) (resp_0)
			$guard (s0) MC_NIC_0_BUS_RESPONSE := resp_0

			$guard (s1) $call access_mem_1 ( ($slice R1 109 0) ) (resp_1)
			$guard (s1) MC_NIC_1_BUS_RESPONSE := resp_1

			$guard (s2) $call access_mem_2 ( ($slice R2 109 0) ) (resp_2)
			$guard (s2) MC_NIC_2_BUS_RESPONSE := resp_2
			
			$guard (s3) $call access_mem_3 ( ($slice R3 109 0) ) (resp_3)
			$guard (s3) MC_NIC_3_BUS_RESPONSE := resp_3
			
			$guard (s4) $call access_mem_4 ( ($slice R4 109 0) ) (resp_4)
			$guard (s4) MC_PROCESSOR_BUS_RESPONSE := resp_4
			
			$while 1
		}
}







